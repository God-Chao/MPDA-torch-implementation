[2024-12-02 17:37:36.868045] start transfer model NCF
{'recall_num': 50, 'recall_alg': 'random', 'epochs': 1, 'device': 'cuda:5', 'batch_size': 64, 'task_index': 8, 'num_task': 10, 'lr': 0.001}
test users have been loaded, len = 567
test users = ['109314' '109360' '109379' '109387' '109427' '109473' '109497' '109499'
 '109522' '109523' '109550' '109564' '109596' '109661' '109727' '109745'
 '109746' '109764' '109883' '109888' '109915' '109933' '109955' '109965'
 '109995' '109996' '110004' '110018' '110036' '110048' '110053' '110061'
 '110101' '110139' '110180' '110225' '110228' '110233' '110299' '110359'
 '110392' '110395' '110447' '110496' '110507' '110512' '110515' '110542'
 '110576' '110578' '110609' '110627' '110656' '110661' '110669' '110681'
 '110696' '110706' '110742' '110758' '110770' '110826' '110846' '110847'
 '110858' '110868' '110869' '110899' '110901' '110906' '110917' '110970'
 '110991' '111038' '111053' '111122' '111139' '111149' '111162' '111193'
 '111202' '111235' '111266' '111277' '111321' '111323' '111333' '111354'
 '111373' '111386' '111414' '111433' '111485' '111522' '111549' '111650'
 '111660' '111671' '111727' '111758' '111773' '111783' '111827' '111859'
 '111873' '111887' '111912' '111933' '111959' '111982' '112039' '112049'
 '112174' '112203' '112204' '112217' '112231' '112236' '112237' '112245'
 '112262' '112284' '112294' '112337' '112350' '112355' '112365' '112369'
 '112423' '112456' '112509' '112520' '112618' '112693' '112762' '112936'
 '112943' '112964' '112977' '113073' '113081' '113127' '113135' '113181'
 '113209' '113229' '113249' '113270' '113365' '113389' '113418' '113487'
 '113610' '113651' '113663' '113693' '113770' '113772' '113806' '113873'
 '113909' '113923' '113954' '113972' '113980' '113991' '114009' '114045'
 '114053' '114064' '114120' '114133' '114183' '114198' '114311' '114327'
 '114338' '114346' '114392' '114394' '114461' '114501' '114531' '114545'
 '114570' '114579' '114603' '114617' '114620' '114624' '114645' '114653'
 '114659' '114671' '114708' '114716' '114746' '114749' '114758' '114764'
 '114911' '114937' '114967' '114993' '115046' '115048' '115055' '115081'
 '115095' '115115' '115121' '115124' '115164' '115176' '115181' '115200'
 '115203' '115213' '115226' '115303' '115312' '115333' '115353' '115364'
 '115368' '115408' '115416' '115424' '115467' '115496' '115502' '115585'
 '115604' '115606' '115617' '115620' '115626' '115686' '115701' '115702'
 '115721' '115762' '115767' '115768' '115799' '115829' '115852' '115870'
 '115959' '115974' '115982' '116001' '116057' '116095' '116106' '116113'
 '116189' '116204' '116215' '116261' '116263' '116298' '116302' '116342'
 '116346' '116353' '116361' '116373' '116375' '116436' '116460' '116498'
 '116506' '116526' '116544' '116556' '116603' '116677' '116687' '116763'
 '116806' '116822' '116823' '116869' '116935' '116936' '116951' '116957'
 '116960' '116984' '117005' '117007' '117049' '117070' '117107' '117110'
 '117122' '117143' '117144' '117165' '117169' '117190' '117217' '117289'
 '117307' '117311' '117315' '117337' '117352' '117374' '117384' '117415'
 '117426' '117464' '117474' '117497' '117541' '117560' '117603' '117611'
 '117617' '117664' '117681' '117705' '117729' '117743' '117779' '117814'
 '117856' '117869' '117905' '117910' '117952' '117987' '118027' '118036'
 '118050' '118062' '118067' '118106' '118152' '118177' '118205' '118247'
 '118254' '118277' '118283' '118289' '118363' '118372' '118388' '118397'
 '118419' '118436' '118453' '118503' '118508' '118529' '118534' '118540'
 '118632' '118701' '118727' '118776' '118813' '118818' '118845' '118848'
 '118872' '118895' '118926' '118968' '118983' '119013' '119024' '119044'
 '119046' '119048' '119098' '119102' '119128' '119148' '119152' '119197'
 '119220' '119223' '119259' '119260' '119309' '119323' '119324' '119348'
 '119367' '119386' '119445' '119467' '119486' '119501' '119506' '119515'
 '119531' '119535' '119539' '119563' '119578' '119666' '119734' '119778'
 '119791' '119839' '119842' '119869' '119915' '119916' '119943' '119963'
 '119981' '119989' '120005' '120045' '120052' '120067' '120086' '120097'
 '120131' '120133' '120179' '120250' '120267' '120270' '120276' '120290'
 '120306' '120378' '120385' '120446' '120450' '120479' '120572' '120573'
 '120575' '120622' '120644' '120647' '120691' '120707' '120735' '120758'
 '120765' '120782' '120794' '120796' '120853' '120856' '120918' '120937'
 '120942' '120948' '120951' '120985' '121024' '121040' '121052' '121055'
 '121114' '121148' '121169' '121208' '121266' '121303' '121436' '121445'
 '121487' '121497' '121499' '121509' '121516' '121535' '121539' '121560'
 '121564' '121581' '121614' '121650' '121713' '121735' '121736' '121742'
 '121779' '121787' '121831' '121847' '121853' '121874' '121935' '121966'
 '121969' '121987' '122009' '122027' '122044' '122050' '122058' '122136'
 '122143' '122160' '122179' '122228' '122257' '122263' '122294' '122301'
 '122310' '122342' '122343' '122371' '122434' '122521' '122587' '122595'
 '122608' '122609' '122652' '122683' '122741' '122760' '122797' '122860'
 '122909' '122939' '122995' '123011' '123019' '123020' '123026' '123146'
 '123163' '123191' '123201' '123257' '123281' '123297' '123303' '123315'
 '123330' '123378' '123398' '123402' '123416' '123419' '123426' '123429'
 '123443' '123444' '123469' '123496' '123502' '123512' '123536' '123574'
 '123606' '123679' '123686' '123745' '123754' '123886' '123913']
[2024-12-02 17:37:36.880487] start test on test users
[2024-12-02 17:37:36.880540] start test user 109314 0/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:37:39.813877] start test user 109314 0/567 recall augumented users by random, augumented_users = [97269, 54659, 6083, 135145, 111084, 38011, 78565, 117770, 81804, 64402, 106833, 20283, 91881, 63712, 51413, 134949, 91178, 129052, 26374, 55814, 132983, 109635, 35661, 21562, 62586, 103554, 19001, 83276, 81368, 108433, 131163, 81873, 54922, 103003, 132392, 2791, 35194, 131746, 134853, 137651, 81550, 47955, 23007, 8634, 17888, 17226, 12953, 135561, 46334, 122688]
[2024-12-02 17:37:39.855396] user = 109314 Cloud 0/567
[2024-12-02 17:37:44.470831] user = 109314 Local 0/567
[2024-12-02 17:37:44.977039] user = 109314 Local+ 0/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:37:47.717448] user = 109314 MPDA- 0/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.544107744107744
Training on augumented user 97269 0/50 current_auc = 0.544107744107744
User 97269 AUC after training: 0.5461279461279461
User 97269 improves AUC. Keeping the model.
Training on augumented user 54659 1/50 current_auc = 0.5461279461279461
User 54659 AUC after training: 0.5468013468013468
User 54659 improves AUC. Keeping the model.
Training on augumented user 6083 2/50 current_auc = 0.5468013468013468
User 6083 AUC after training: 0.5488215488215489
User 6083 improves AUC. Keeping the model.
Training on augumented user 135145 3/50 current_auc = 0.5488215488215489
User 135145 AUC after training: 0.5494949494949495
User 135145 improves AUC. Keeping the model.
Training on augumented user 111084 4/50 current_auc = 0.5494949494949495
User 111084 AUC after training: 0.5488215488215489
User 111084 does not improve AUC. Reverting changes.
Training on augumented user 38011 5/50 current_auc = 0.5494949494949495
User 38011 AUC after training: 0.5488215488215489
User 38011 does not improve AUC. Reverting changes.
Training on augumented user 78565 6/50 current_auc = 0.5494949494949495
User 78565 AUC after training: 0.5488215488215489
User 78565 does not improve AUC. Reverting changes.
Training on augumented user 117770 7/50 current_auc = 0.5494949494949495
User 117770 AUC after training: 0.5508417508417509
User 117770 improves AUC. Keeping the model.
Training on augumented user 81804 8/50 current_auc = 0.5508417508417509
User 81804 AUC after training: 0.5501683501683501
User 81804 does not improve AUC. Reverting changes.
Training on augumented user 64402 9/50 current_auc = 0.5508417508417509
User 64402 AUC after training: 0.5488215488215489
User 64402 does not improve AUC. Reverting changes.
Training on augumented user 106833 10/50 current_auc = 0.5508417508417509
User 106833 AUC after training: 0.5501683501683502
User 106833 does not improve AUC. Reverting changes.
Training on augumented user 20283 11/50 current_auc = 0.5508417508417509
User 20283 AUC after training: 0.5461279461279461
User 20283 does not improve AUC. Reverting changes.
Training on augumented user 91881 12/50 current_auc = 0.5508417508417509
User 91881 AUC after training: 0.5508417508417509
User 91881 does not improve AUC. Reverting changes.
Training on augumented user 63712 13/50 current_auc = 0.5508417508417509
User 63712 AUC after training: 0.5488215488215489
User 63712 does not improve AUC. Reverting changes.
Training on augumented user 51413 14/50 current_auc = 0.5508417508417509
User 51413 AUC after training: 0.5501683501683502
User 51413 does not improve AUC. Reverting changes.
Training on augumented user 134949 15/50 current_auc = 0.5508417508417509
User 134949 AUC after training: 0.5508417508417509
User 134949 does not improve AUC. Reverting changes.
Training on augumented user 91178 16/50 current_auc = 0.5508417508417509
User 91178 AUC after training: 0.5488215488215488
User 91178 does not improve AUC. Reverting changes.
Training on augumented user 129052 17/50 current_auc = 0.5508417508417509
User 129052 AUC after training: 0.5488215488215489
User 129052 does not improve AUC. Reverting changes.
Training on augumented user 26374 18/50 current_auc = 0.5508417508417509
User 26374 AUC after training: 0.5488215488215489
User 26374 does not improve AUC. Reverting changes.
Training on augumented user 55814 19/50 current_auc = 0.5508417508417509
User 55814 AUC after training: 0.5494949494949495
User 55814 does not improve AUC. Reverting changes.
Training on augumented user 132983 20/50 current_auc = 0.5508417508417509
User 132983 AUC after training: 0.5501683501683502
User 132983 does not improve AUC. Reverting changes.
Training on augumented user 109635 21/50 current_auc = 0.5508417508417509
User 109635 AUC after training: 0.5494949494949495
User 109635 does not improve AUC. Reverting changes.
Training on augumented user 35661 22/50 current_auc = 0.5508417508417509
User 35661 AUC after training: 0.5494949494949495
User 35661 does not improve AUC. Reverting changes.
Training on augumented user 21562 23/50 current_auc = 0.5508417508417509
User 21562 AUC after training: 0.5494949494949495
User 21562 does not improve AUC. Reverting changes.
Training on augumented user 62586 24/50 current_auc = 0.5508417508417509
User 62586 AUC after training: 0.5494949494949495
User 62586 does not improve AUC. Reverting changes.
Training on augumented user 103554 25/50 current_auc = 0.5508417508417509
User 103554 AUC after training: 0.5494949494949495
User 103554 does not improve AUC. Reverting changes.
Training on augumented user 19001 26/50 current_auc = 0.5508417508417509
User 19001 AUC after training: 0.5501683501683501
User 19001 does not improve AUC. Reverting changes.
Training on augumented user 83276 27/50 current_auc = 0.5508417508417509
User 83276 AUC after training: 0.5501683501683501
User 83276 does not improve AUC. Reverting changes.
Training on augumented user 81368 28/50 current_auc = 0.5508417508417509
User 81368 AUC after training: 0.5501683501683502
User 81368 does not improve AUC. Reverting changes.
Training on augumented user 108433 29/50 current_auc = 0.5508417508417509
User 108433 AUC after training: 0.5494949494949495
User 108433 does not improve AUC. Reverting changes.
Training on augumented user 131163 30/50 current_auc = 0.5508417508417509
User 131163 AUC after training: 0.5494949494949495
User 131163 does not improve AUC. Reverting changes.
Training on augumented user 81873 31/50 current_auc = 0.5508417508417509
User 81873 AUC after training: 0.5508417508417509
User 81873 does not improve AUC. Reverting changes.
Training on augumented user 54922 32/50 current_auc = 0.5508417508417509
User 54922 AUC after training: 0.5468013468013468
User 54922 does not improve AUC. Reverting changes.
Training on augumented user 103003 33/50 current_auc = 0.5508417508417509
User 103003 AUC after training: 0.5494949494949495
User 103003 does not improve AUC. Reverting changes.
Training on augumented user 132392 34/50 current_auc = 0.5508417508417509
User 132392 AUC after training: 0.5461279461279461
User 132392 does not improve AUC. Reverting changes.
Training on augumented user 2791 35/50 current_auc = 0.5508417508417509
User 2791 AUC after training: 0.5494949494949495
User 2791 does not improve AUC. Reverting changes.
Training on augumented user 35194 36/50 current_auc = 0.5508417508417509
User 35194 AUC after training: 0.5488215488215489
User 35194 does not improve AUC. Reverting changes.
Training on augumented user 131746 37/50 current_auc = 0.5508417508417509
User 131746 AUC after training: 0.554882154882155
User 131746 improves AUC. Keeping the model.
Training on augumented user 134853 38/50 current_auc = 0.554882154882155
User 134853 AUC after training: 0.554882154882155
User 134853 does not improve AUC. Reverting changes.
Training on augumented user 137651 39/50 current_auc = 0.554882154882155
User 137651 AUC after training: 0.5535353535353535
User 137651 does not improve AUC. Reverting changes.
Training on augumented user 81550 40/50 current_auc = 0.554882154882155
User 81550 AUC after training: 0.5542087542087543
User 81550 does not improve AUC. Reverting changes.
Training on augumented user 47955 41/50 current_auc = 0.554882154882155
User 47955 AUC after training: 0.5535353535353535
User 47955 does not improve AUC. Reverting changes.
Training on augumented user 23007 42/50 current_auc = 0.554882154882155
User 23007 AUC after training: 0.5535353535353535
User 23007 does not improve AUC. Reverting changes.
Training on augumented user 8634 43/50 current_auc = 0.554882154882155
User 8634 AUC after training: 0.554882154882155
User 8634 does not improve AUC. Reverting changes.
Training on augumented user 17888 44/50 current_auc = 0.554882154882155
User 17888 AUC after training: 0.5548821548821549
User 17888 does not improve AUC. Reverting changes.
Training on augumented user 17226 45/50 current_auc = 0.554882154882155
User 17226 AUC after training: 0.5542087542087543
User 17226 does not improve AUC. Reverting changes.
Training on augumented user 12953 46/50 current_auc = 0.554882154882155
User 12953 AUC after training: 0.5542087542087543
User 12953 does not improve AUC. Reverting changes.
Training on augumented user 135561 47/50 current_auc = 0.554882154882155
User 135561 AUC after training: 0.554882154882155
User 135561 does not improve AUC. Reverting changes.
Training on augumented user 46334 48/50 current_auc = 0.554882154882155
User 46334 AUC after training: 0.5535353535353535
User 46334 does not improve AUC. Reverting changes.
Training on augumented user 122688 49/50 current_auc = 0.554882154882155
User 122688 AUC after training: 0.554882154882155
User 122688 does not improve AUC. Reverting changes.
[2024-12-02 17:38:18.090664] start test user 109360 1/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:38:18.548516] start test user 109360 1/567 recall augumented users by random, augumented_users = [127470, 97013, 122922, 56738, 85286, 21819, 91597, 11557, 129039, 49643, 18460, 33208, 110674, 55119, 28628, 135255, 137705, 76205, 112030, 77184, 87758, 91530, 6967, 114678, 105935, 29512, 25222, 137764, 1512, 92937, 58840, 19707, 63183, 74094, 121842, 18817, 19860, 54657, 96606, 85195, 103104, 48217, 136051, 112036, 94974, 102473, 71419, 123019, 135629, 87464]
[2024-12-02 17:38:18.565948] user = 109360 Cloud 1/567
[2024-12-02 17:38:18.577476] user = 109360 Local 1/567
[2024-12-02 17:38:18.629384] user = 109360 Local+ 1/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:38:21.175917] user = 109360 MPDA- 1/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5412698412698413
Training on augumented user 127470 0/50 current_auc = 0.5412698412698413
User 127470 AUC after training: 0.5444444444444445
User 127470 improves AUC. Keeping the model.
Training on augumented user 97013 1/50 current_auc = 0.5444444444444445
User 97013 AUC after training: 0.5444444444444445
User 97013 does not improve AUC. Reverting changes.
Training on augumented user 122922 2/50 current_auc = 0.5444444444444445
User 122922 AUC after training: 0.5412698412698413
User 122922 does not improve AUC. Reverting changes.
Training on augumented user 56738 3/50 current_auc = 0.5444444444444445
User 56738 AUC after training: 0.5412698412698413
User 56738 does not improve AUC. Reverting changes.
Training on augumented user 85286 4/50 current_auc = 0.5444444444444445
User 85286 AUC after training: 0.5428571428571428
User 85286 does not improve AUC. Reverting changes.
Training on augumented user 21819 5/50 current_auc = 0.5444444444444445
User 21819 AUC after training: 0.5444444444444445
User 21819 does not improve AUC. Reverting changes.
Training on augumented user 91597 6/50 current_auc = 0.5444444444444445
User 91597 AUC after training: 0.5444444444444445
User 91597 does not improve AUC. Reverting changes.
Training on augumented user 11557 7/50 current_auc = 0.5444444444444445
User 11557 AUC after training: 0.5380952380952381
User 11557 does not improve AUC. Reverting changes.
Training on augumented user 129039 8/50 current_auc = 0.5444444444444445
User 129039 AUC after training: 0.5428571428571428
User 129039 does not improve AUC. Reverting changes.
Training on augumented user 49643 9/50 current_auc = 0.5444444444444445
User 49643 AUC after training: 0.5444444444444445
User 49643 does not improve AUC. Reverting changes.
Training on augumented user 18460 10/50 current_auc = 0.5444444444444445
User 18460 AUC after training: 0.5444444444444445
User 18460 does not improve AUC. Reverting changes.
Training on augumented user 33208 11/50 current_auc = 0.5444444444444445
User 33208 AUC after training: 0.5444444444444445
User 33208 does not improve AUC. Reverting changes.
Training on augumented user 110674 12/50 current_auc = 0.5444444444444445
User 110674 AUC after training: 0.5428571428571429
User 110674 does not improve AUC. Reverting changes.
Training on augumented user 55119 13/50 current_auc = 0.5444444444444445
User 55119 AUC after training: 0.5428571428571428
User 55119 does not improve AUC. Reverting changes.
Training on augumented user 28628 14/50 current_auc = 0.5444444444444445
User 28628 AUC after training: 0.5412698412698413
User 28628 does not improve AUC. Reverting changes.
Training on augumented user 135255 15/50 current_auc = 0.5444444444444445
User 135255 AUC after training: 0.5428571428571429
User 135255 does not improve AUC. Reverting changes.
Training on augumented user 137705 16/50 current_auc = 0.5444444444444445
User 137705 AUC after training: 0.5444444444444445
User 137705 does not improve AUC. Reverting changes.
Training on augumented user 76205 17/50 current_auc = 0.5444444444444445
User 76205 AUC after training: 0.5428571428571429
User 76205 does not improve AUC. Reverting changes.
Training on augumented user 112030 18/50 current_auc = 0.5444444444444445
User 112030 AUC after training: 0.5444444444444445
User 112030 does not improve AUC. Reverting changes.
Training on augumented user 77184 19/50 current_auc = 0.5444444444444445
User 77184 AUC after training: 0.5428571428571429
User 77184 does not improve AUC. Reverting changes.
Training on augumented user 87758 20/50 current_auc = 0.5444444444444445
User 87758 AUC after training: 0.5428571428571428
User 87758 does not improve AUC. Reverting changes.
Training on augumented user 91530 21/50 current_auc = 0.5444444444444445
User 91530 AUC after training: 0.5444444444444445
User 91530 does not improve AUC. Reverting changes.
Training on augumented user 6967 22/50 current_auc = 0.5444444444444445
User 6967 AUC after training: 0.5412698412698411
User 6967 does not improve AUC. Reverting changes.
Training on augumented user 114678 23/50 current_auc = 0.5444444444444445
User 114678 AUC after training: 0.5444444444444445
User 114678 does not improve AUC. Reverting changes.
Training on augumented user 105935 24/50 current_auc = 0.5444444444444445
User 105935 AUC after training: 0.5444444444444445
User 105935 does not improve AUC. Reverting changes.
Training on augumented user 29512 25/50 current_auc = 0.5444444444444445
User 29512 AUC after training: 0.5428571428571429
User 29512 does not improve AUC. Reverting changes.
Training on augumented user 25222 26/50 current_auc = 0.5444444444444445
User 25222 AUC after training: 0.5444444444444445
User 25222 does not improve AUC. Reverting changes.
Training on augumented user 137764 27/50 current_auc = 0.5444444444444445
User 137764 AUC after training: 0.5428571428571428
User 137764 does not improve AUC. Reverting changes.
Training on augumented user 1512 28/50 current_auc = 0.5444444444444445
User 1512 AUC after training: 0.5428571428571429
User 1512 does not improve AUC. Reverting changes.
Training on augumented user 92937 29/50 current_auc = 0.5444444444444445
User 92937 AUC after training: 0.5444444444444445
User 92937 does not improve AUC. Reverting changes.
Training on augumented user 58840 30/50 current_auc = 0.5444444444444445
User 58840 AUC after training: 0.5444444444444445
User 58840 does not improve AUC. Reverting changes.
Training on augumented user 19707 31/50 current_auc = 0.5444444444444445
User 19707 AUC after training: 0.5460317460317461
User 19707 improves AUC. Keeping the model.
Training on augumented user 63183 32/50 current_auc = 0.5460317460317461
User 63183 AUC after training: 0.5492063492063493
User 63183 improves AUC. Keeping the model.
Training on augumented user 74094 33/50 current_auc = 0.5492063492063493
User 74094 AUC after training: 0.5476190476190477
User 74094 does not improve AUC. Reverting changes.
Training on augumented user 121842 34/50 current_auc = 0.5492063492063493
User 121842 AUC after training: 0.546031746031746
User 121842 does not improve AUC. Reverting changes.
Training on augumented user 18817 35/50 current_auc = 0.5492063492063493
User 18817 AUC after training: 0.546031746031746
User 18817 does not improve AUC. Reverting changes.
Training on augumented user 19860 36/50 current_auc = 0.5492063492063493
User 19860 AUC after training: 0.5492063492063493
User 19860 does not improve AUC. Reverting changes.
Training on augumented user 54657 37/50 current_auc = 0.5492063492063493
User 54657 AUC after training: 0.5492063492063493
User 54657 does not improve AUC. Reverting changes.
Training on augumented user 96606 38/50 current_auc = 0.5492063492063493
User 96606 AUC after training: 0.5444444444444445
User 96606 does not improve AUC. Reverting changes.
Training on augumented user 85195 39/50 current_auc = 0.5492063492063493
User 85195 AUC after training: 0.5492063492063493
User 85195 does not improve AUC. Reverting changes.
Training on augumented user 103104 40/50 current_auc = 0.5492063492063493
User 103104 AUC after training: 0.5507936507936508
User 103104 improves AUC. Keeping the model.
Training on augumented user 48217 41/50 current_auc = 0.5507936507936508
User 48217 AUC after training: 0.5507936507936508
User 48217 does not improve AUC. Reverting changes.
Training on augumented user 136051 42/50 current_auc = 0.5507936507936508
User 136051 AUC after training: 0.5476190476190477
User 136051 does not improve AUC. Reverting changes.
Training on augumented user 112036 43/50 current_auc = 0.5507936507936508
User 112036 AUC after training: 0.5507936507936507
User 112036 does not improve AUC. Reverting changes.
Training on augumented user 94974 44/50 current_auc = 0.5507936507936508
User 94974 AUC after training: 0.5492063492063493
User 94974 does not improve AUC. Reverting changes.
Training on augumented user 102473 45/50 current_auc = 0.5507936507936508
User 102473 AUC after training: 0.5523809523809524
User 102473 improves AUC. Keeping the model.
Training on augumented user 71419 46/50 current_auc = 0.5523809523809524
User 71419 AUC after training: 0.5476190476190477
User 71419 does not improve AUC. Reverting changes.
Training on augumented user 123019 47/50 current_auc = 0.5523809523809524
User 123019 AUC after training: 0.5523809523809524
User 123019 does not improve AUC. Reverting changes.
Training on augumented user 135629 48/50 current_auc = 0.5523809523809524
User 135629 AUC after training: 0.5523809523809524
User 135629 does not improve AUC. Reverting changes.
Training on augumented user 87464 49/50 current_auc = 0.5523809523809524
User 87464 AUC after training: 0.5587301587301587
User 87464 improves AUC. Keeping the model.
[2024-12-02 17:38:51.800420] start test user 109379 2/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:38:52.533431] start test user 109379 2/567 recall augumented users by random, augumented_users = [113176, 115337, 7380, 102317, 118778, 5456, 4006, 8547, 80248, 39620, 99156, 85828, 93367, 23942, 136875, 101189, 108404, 68361, 45153, 24101, 124398, 108138, 54206, 89470, 136762, 69500, 16894, 132575, 58947, 56889, 36300, 44618, 129303, 132662, 7094, 78171, 130070, 88748, 6594, 61527, 61440, 68117, 619, 40703, 35150, 10402, 132702, 20634, 45315, 6907]
[2024-12-02 17:38:52.549523] user = 109379 Cloud 2/567
[2024-12-02 17:38:52.568457] user = 109379 Local 2/567
[2024-12-02 17:38:52.709569] user = 109379 Local+ 2/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:38:54.318149] user = 109379 MPDA- 2/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5936578171091446
Training on augumented user 113176 0/50 current_auc = 0.5936578171091446
User 113176 AUC after training: 0.5929203539823008
User 113176 does not improve AUC. Reverting changes.
Training on augumented user 115337 1/50 current_auc = 0.5936578171091446
User 115337 AUC after training: 0.5895280235988201
User 115337 does not improve AUC. Reverting changes.
Training on augumented user 7380 2/50 current_auc = 0.5936578171091446
User 7380 AUC after training: 0.5971976401179941
User 7380 improves AUC. Keeping the model.
Training on augumented user 102317 3/50 current_auc = 0.5971976401179941
User 102317 AUC after training: 0.5992625368731563
User 102317 improves AUC. Keeping the model.
Training on augumented user 118778 4/50 current_auc = 0.5992625368731563
User 118778 AUC after training: 0.5966076696165191
User 118778 does not improve AUC. Reverting changes.
Training on augumented user 5456 5/50 current_auc = 0.5992625368731563
User 5456 AUC after training: 0.6001474926253688
User 5456 improves AUC. Keeping the model.
Training on augumented user 4006 6/50 current_auc = 0.6001474926253688
User 4006 AUC after training: 0.6025073746312685
User 4006 improves AUC. Keeping the model.
Training on augumented user 8547 7/50 current_auc = 0.6025073746312685
User 8547 AUC after training: 0.6039823008849559
User 8547 improves AUC. Keeping the model.
Training on augumented user 80248 8/50 current_auc = 0.6039823008849559
User 80248 AUC after training: 0.608259587020649
User 80248 improves AUC. Keeping the model.
Training on augumented user 39620 9/50 current_auc = 0.608259587020649
User 39620 AUC after training: 0.6073746312684366
User 39620 does not improve AUC. Reverting changes.
Training on augumented user 99156 10/50 current_auc = 0.608259587020649
User 99156 AUC after training: 0.6103244837758113
User 99156 improves AUC. Keeping the model.
Training on augumented user 85828 11/50 current_auc = 0.6103244837758113
User 85828 AUC after training: 0.6109144542772862
User 85828 improves AUC. Keeping the model.
Training on augumented user 93367 12/50 current_auc = 0.6109144542772862
User 93367 AUC after training: 0.6088495575221239
User 93367 does not improve AUC. Reverting changes.
Training on augumented user 23942 13/50 current_auc = 0.6109144542772862
User 23942 AUC after training: 0.6106194690265487
User 23942 does not improve AUC. Reverting changes.
Training on augumented user 136875 14/50 current_auc = 0.6109144542772862
User 136875 AUC after training: 0.6103244837758113
User 136875 does not improve AUC. Reverting changes.
Training on augumented user 101189 15/50 current_auc = 0.6109144542772862
User 101189 AUC after training: 0.6109144542772862
User 101189 does not improve AUC. Reverting changes.
Training on augumented user 108404 16/50 current_auc = 0.6109144542772862
User 108404 AUC after training: 0.6117994100294986
User 108404 improves AUC. Keeping the model.
Training on augumented user 68361 17/50 current_auc = 0.6117994100294986
User 68361 AUC after training: 0.6106194690265487
User 68361 does not improve AUC. Reverting changes.
Training on augumented user 45153 18/50 current_auc = 0.6117994100294986
User 45153 AUC after training: 0.6112094395280236
User 45153 does not improve AUC. Reverting changes.
Training on augumented user 24101 19/50 current_auc = 0.6117994100294986
User 24101 AUC after training: 0.6112094395280236
User 24101 does not improve AUC. Reverting changes.
Training on augumented user 124398 20/50 current_auc = 0.6117994100294986
User 124398 AUC after training: 0.6109144542772862
User 124398 does not improve AUC. Reverting changes.
Training on augumented user 108138 21/50 current_auc = 0.6117994100294986
User 108138 AUC after training: 0.6097345132743363
User 108138 does not improve AUC. Reverting changes.
Training on augumented user 54206 22/50 current_auc = 0.6117994100294986
User 54206 AUC after training: 0.6129793510324484
User 54206 improves AUC. Keeping the model.
Training on augumented user 89470 23/50 current_auc = 0.6129793510324484
User 89470 AUC after training: 0.6138643067846608
User 89470 improves AUC. Keeping the model.
Training on augumented user 136762 24/50 current_auc = 0.6138643067846608
User 136762 AUC after training: 0.6150442477876106
User 136762 improves AUC. Keeping the model.
Training on augumented user 69500 25/50 current_auc = 0.6150442477876106
User 69500 AUC after training: 0.6159292035398231
User 69500 improves AUC. Keeping the model.
Training on augumented user 16894 26/50 current_auc = 0.6159292035398231
User 16894 AUC after training: 0.6123893805309735
User 16894 does not improve AUC. Reverting changes.
Training on augumented user 132575 27/50 current_auc = 0.6159292035398231
User 132575 AUC after training: 0.6179941002949852
User 132575 improves AUC. Keeping the model.
Training on augumented user 58947 28/50 current_auc = 0.6179941002949852
User 58947 AUC after training: 0.6117994100294986
User 58947 does not improve AUC. Reverting changes.
Training on augumented user 56889 29/50 current_auc = 0.6179941002949852
User 56889 AUC after training: 0.6117994100294986
User 56889 does not improve AUC. Reverting changes.
Training on augumented user 36300 30/50 current_auc = 0.6179941002949852
User 36300 AUC after training: 0.6165191740412979
User 36300 does not improve AUC. Reverting changes.
Training on augumented user 44618 31/50 current_auc = 0.6179941002949852
User 44618 AUC after training: 0.6174041297935103
User 44618 does not improve AUC. Reverting changes.
Training on augumented user 129303 32/50 current_auc = 0.6179941002949852
User 129303 AUC after training: 0.611504424778761
User 129303 does not improve AUC. Reverting changes.
Training on augumented user 132662 33/50 current_auc = 0.6179941002949852
User 132662 AUC after training: 0.6182890855457227
User 132662 improves AUC. Keeping the model.
Training on augumented user 7094 34/50 current_auc = 0.6182890855457227
User 7094 AUC after training: 0.6182890855457227
User 7094 does not improve AUC. Reverting changes.
Training on augumented user 78171 35/50 current_auc = 0.6182890855457227
User 78171 AUC after training: 0.6185840707964603
User 78171 improves AUC. Keeping the model.
Training on augumented user 130070 36/50 current_auc = 0.6185840707964603
User 130070 AUC after training: 0.6188790560471976
User 130070 improves AUC. Keeping the model.
Training on augumented user 88748 37/50 current_auc = 0.6188790560471976
User 88748 AUC after training: 0.6182890855457228
User 88748 does not improve AUC. Reverting changes.
Training on augumented user 6594 38/50 current_auc = 0.6188790560471976
User 6594 AUC after training: 0.6182890855457227
User 6594 does not improve AUC. Reverting changes.
Training on augumented user 61527 39/50 current_auc = 0.6188790560471976
User 61527 AUC after training: 0.6185840707964603
User 61527 does not improve AUC. Reverting changes.
Training on augumented user 61440 40/50 current_auc = 0.6188790560471976
User 61440 AUC after training: 0.6174041297935103
User 61440 does not improve AUC. Reverting changes.
Training on augumented user 68117 41/50 current_auc = 0.6188790560471976
User 68117 AUC after training: 0.6168141592920354
User 68117 does not improve AUC. Reverting changes.
Training on augumented user 619 42/50 current_auc = 0.6188790560471976
User 619 AUC after training: 0.6162241887905604
User 619 does not improve AUC. Reverting changes.
Training on augumented user 40703 43/50 current_auc = 0.6188790560471976
User 40703 AUC after training: 0.6168141592920354
User 40703 does not improve AUC. Reverting changes.
Training on augumented user 35150 44/50 current_auc = 0.6188790560471976
User 35150 AUC after training: 0.620353982300885
User 35150 improves AUC. Keeping the model.
Training on augumented user 10402 45/50 current_auc = 0.620353982300885
User 10402 AUC after training: 0.6191740412979352
User 10402 does not improve AUC. Reverting changes.
Training on augumented user 132702 46/50 current_auc = 0.620353982300885
User 132702 AUC after training: 0.6185840707964603
User 132702 does not improve AUC. Reverting changes.
Training on augumented user 20634 47/50 current_auc = 0.620353982300885
User 20634 AUC after training: 0.6191740412979351
User 20634 does not improve AUC. Reverting changes.
Training on augumented user 45315 48/50 current_auc = 0.620353982300885
User 45315 AUC after training: 0.6191740412979352
User 45315 does not improve AUC. Reverting changes.
Training on augumented user 6907 49/50 current_auc = 0.620353982300885
User 6907 AUC after training: 0.6185840707964603
User 6907 does not improve AUC. Reverting changes.
[2024-12-02 17:39:26.207296] start test user 109387 3/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:39:26.625111] start test user 109387 3/567 recall augumented users by random, augumented_users = [76750, 5396, 17579, 70280, 58597, 83480, 102421, 64962, 122031, 52901, 32607, 81075, 80038, 98889, 63944, 94978, 108351, 12449, 20677, 93021, 22761, 71720, 82783, 44934, 132027, 85955, 59957, 40181, 52954, 25795, 106746, 44506, 9645, 12412, 27759, 134977, 47937, 75988, 89996, 122627, 45323, 47427, 2607, 53887, 105216, 4457, 57846, 30805, 51448, 81479]
[2024-12-02 17:39:26.640406] user = 109387 Cloud 3/567
[2024-12-02 17:39:26.655661] user = 109387 Local 3/567
[2024-12-02 17:39:26.693347] user = 109387 Local+ 3/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:39:28.663962] user = 109387 MPDA- 3/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.568007662835249
Training on augumented user 76750 0/50 current_auc = 0.568007662835249
User 76750 AUC after training: 0.5689655172413793
User 76750 improves AUC. Keeping the model.
Training on augumented user 5396 1/50 current_auc = 0.5689655172413793
User 5396 AUC after training: 0.5683269476372925
User 5396 does not improve AUC. Reverting changes.
Training on augumented user 17579 2/50 current_auc = 0.5689655172413793
User 17579 AUC after training: 0.5686462324393359
User 17579 does not improve AUC. Reverting changes.
Training on augumented user 70280 3/50 current_auc = 0.5689655172413793
User 70280 AUC after training: 0.5686462324393359
User 70280 does not improve AUC. Reverting changes.
Training on augumented user 58597 4/50 current_auc = 0.5689655172413793
User 58597 AUC after training: 0.5689655172413793
User 58597 does not improve AUC. Reverting changes.
Training on augumented user 83480 5/50 current_auc = 0.5689655172413793
User 83480 AUC after training: 0.5680076628352491
User 83480 does not improve AUC. Reverting changes.
Training on augumented user 102421 6/50 current_auc = 0.5689655172413793
User 102421 AUC after training: 0.5676883780332056
User 102421 does not improve AUC. Reverting changes.
Training on augumented user 64962 7/50 current_auc = 0.5689655172413793
User 64962 AUC after training: 0.5683269476372925
User 64962 does not improve AUC. Reverting changes.
Training on augumented user 122031 8/50 current_auc = 0.5689655172413793
User 122031 AUC after training: 0.5680076628352491
User 122031 does not improve AUC. Reverting changes.
Training on augumented user 52901 9/50 current_auc = 0.5689655172413793
User 52901 AUC after training: 0.5686462324393359
User 52901 does not improve AUC. Reverting changes.
Training on augumented user 32607 10/50 current_auc = 0.5689655172413793
User 32607 AUC after training: 0.5676883780332056
User 32607 does not improve AUC. Reverting changes.
Training on augumented user 81075 11/50 current_auc = 0.5689655172413793
User 81075 AUC after training: 0.5686462324393359
User 81075 does not improve AUC. Reverting changes.
Training on augumented user 80038 12/50 current_auc = 0.5689655172413793
User 80038 AUC after training: 0.5686462324393359
User 80038 does not improve AUC. Reverting changes.
Training on augumented user 98889 13/50 current_auc = 0.5689655172413793
User 98889 AUC after training: 0.5689655172413793
User 98889 does not improve AUC. Reverting changes.
Training on augumented user 63944 14/50 current_auc = 0.5689655172413793
User 63944 AUC after training: 0.5683269476372924
User 63944 does not improve AUC. Reverting changes.
Training on augumented user 94978 15/50 current_auc = 0.5689655172413793
User 94978 AUC after training: 0.5683269476372924
User 94978 does not improve AUC. Reverting changes.
Training on augumented user 108351 16/50 current_auc = 0.5689655172413793
User 108351 AUC after training: 0.568007662835249
User 108351 does not improve AUC. Reverting changes.
Training on augumented user 12449 17/50 current_auc = 0.5689655172413793
User 12449 AUC after training: 0.5676883780332056
User 12449 does not improve AUC. Reverting changes.
Training on augumented user 20677 18/50 current_auc = 0.5689655172413793
User 20677 AUC after training: 0.5686462324393359
User 20677 does not improve AUC. Reverting changes.
Training on augumented user 93021 19/50 current_auc = 0.5689655172413793
User 93021 AUC after training: 0.5689655172413793
User 93021 does not improve AUC. Reverting changes.
Training on augumented user 22761 20/50 current_auc = 0.5689655172413793
User 22761 AUC after training: 0.5670498084291188
User 22761 does not improve AUC. Reverting changes.
Training on augumented user 71720 21/50 current_auc = 0.5689655172413793
User 71720 AUC after training: 0.5670498084291188
User 71720 does not improve AUC. Reverting changes.
Training on augumented user 82783 22/50 current_auc = 0.5689655172413793
User 82783 AUC after training: 0.5673690932311622
User 82783 does not improve AUC. Reverting changes.
Training on augumented user 44934 23/50 current_auc = 0.5689655172413793
User 44934 AUC after training: 0.5676883780332056
User 44934 does not improve AUC. Reverting changes.
Training on augumented user 132027 24/50 current_auc = 0.5689655172413793
User 132027 AUC after training: 0.5686462324393359
User 132027 does not improve AUC. Reverting changes.
Training on augumented user 85955 25/50 current_auc = 0.5689655172413793
User 85955 AUC after training: 0.5683269476372924
User 85955 does not improve AUC. Reverting changes.
Training on augumented user 59957 26/50 current_auc = 0.5689655172413793
User 59957 AUC after training: 0.5683269476372925
User 59957 does not improve AUC. Reverting changes.
Training on augumented user 40181 27/50 current_auc = 0.5689655172413793
User 40181 AUC after training: 0.568007662835249
User 40181 does not improve AUC. Reverting changes.
Training on augumented user 52954 28/50 current_auc = 0.5689655172413793
User 52954 AUC after training: 0.5664112388250319
User 52954 does not improve AUC. Reverting changes.
Training on augumented user 25795 29/50 current_auc = 0.5689655172413793
User 25795 AUC after training: 0.568007662835249
User 25795 does not improve AUC. Reverting changes.
Training on augumented user 106746 30/50 current_auc = 0.5689655172413793
User 106746 AUC after training: 0.5673690932311622
User 106746 does not improve AUC. Reverting changes.
Training on augumented user 44506 31/50 current_auc = 0.5689655172413793
User 44506 AUC after training: 0.5683269476372925
User 44506 does not improve AUC. Reverting changes.
Training on augumented user 9645 32/50 current_auc = 0.5689655172413793
User 9645 AUC after training: 0.5673690932311622
User 9645 does not improve AUC. Reverting changes.
Training on augumented user 12412 33/50 current_auc = 0.5689655172413793
User 12412 AUC after training: 0.568007662835249
User 12412 does not improve AUC. Reverting changes.
Training on augumented user 27759 34/50 current_auc = 0.5689655172413793
User 27759 AUC after training: 0.5676883780332056
User 27759 does not improve AUC. Reverting changes.
Training on augumented user 134977 35/50 current_auc = 0.5689655172413793
User 134977 AUC after training: 0.5667305236270753
User 134977 does not improve AUC. Reverting changes.
Training on augumented user 47937 36/50 current_auc = 0.5689655172413793
User 47937 AUC after training: 0.5686462324393359
User 47937 does not improve AUC. Reverting changes.
Training on augumented user 75988 37/50 current_auc = 0.5689655172413793
User 75988 AUC after training: 0.5686462324393359
User 75988 does not improve AUC. Reverting changes.
Training on augumented user 89996 38/50 current_auc = 0.5689655172413793
User 89996 AUC after training: 0.568007662835249
User 89996 does not improve AUC. Reverting changes.
Training on augumented user 122627 39/50 current_auc = 0.5689655172413793
User 122627 AUC after training: 0.5680076628352491
User 122627 does not improve AUC. Reverting changes.
Training on augumented user 45323 40/50 current_auc = 0.5689655172413793
User 45323 AUC after training: 0.5680076628352491
User 45323 does not improve AUC. Reverting changes.
Training on augumented user 47427 41/50 current_auc = 0.5689655172413793
User 47427 AUC after training: 0.5689655172413793
User 47427 does not improve AUC. Reverting changes.
Training on augumented user 2607 42/50 current_auc = 0.5689655172413793
User 2607 AUC after training: 0.5689655172413793
User 2607 does not improve AUC. Reverting changes.
Training on augumented user 53887 43/50 current_auc = 0.5689655172413793
User 53887 AUC after training: 0.5683269476372924
User 53887 does not improve AUC. Reverting changes.
Training on augumented user 105216 44/50 current_auc = 0.5689655172413793
User 105216 AUC after training: 0.5638569604086846
User 105216 does not improve AUC. Reverting changes.
Training on augumented user 4457 45/50 current_auc = 0.5689655172413793
User 4457 AUC after training: 0.5683269476372925
User 4457 does not improve AUC. Reverting changes.
Training on augumented user 57846 46/50 current_auc = 0.5689655172413793
User 57846 AUC after training: 0.5676883780332056
User 57846 does not improve AUC. Reverting changes.
Training on augumented user 30805 47/50 current_auc = 0.5689655172413793
User 30805 AUC after training: 0.5676883780332056
User 30805 does not improve AUC. Reverting changes.
Training on augumented user 51448 48/50 current_auc = 0.5689655172413793
User 51448 AUC after training: 0.5676883780332056
User 51448 does not improve AUC. Reverting changes.
Training on augumented user 81479 49/50 current_auc = 0.5689655172413793
User 81479 AUC after training: 0.5689655172413793
User 81479 does not improve AUC. Reverting changes.
[2024-12-02 17:40:00.557305] start test user 109427 4/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:40:00.996632] start test user 109427 4/567 recall augumented users by random, augumented_users = [64880, 27602, 82511, 42164, 112421, 52751, 134660, 27444, 128658, 90587, 70718, 122630, 79032, 137070, 115661, 106413, 34265, 103854, 80463, 1768, 51568, 86440, 111334, 71930, 54946, 20006, 10308, 26037, 110738, 112728, 75831, 64392, 436, 51303, 1208, 38456, 90897, 77563, 11139, 31551, 26695, 54948, 87613, 4388, 74232, 63195, 4701, 29617, 135379, 8161]
[2024-12-02 17:40:01.011127] user = 109427 Cloud 4/567
[2024-12-02 17:40:01.020600] user = 109427 Local 4/567
[2024-12-02 17:40:01.056016] user = 109427 Local+ 4/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:40:03.209029] user = 109427 MPDA- 4/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6
Training on augumented user 64880 0/50 current_auc = 0.6
User 64880 AUC after training: 0.6
User 64880 does not improve AUC. Reverting changes.
Training on augumented user 27602 1/50 current_auc = 0.6
User 27602 AUC after training: 0.6
User 27602 does not improve AUC. Reverting changes.
Training on augumented user 82511 2/50 current_auc = 0.6
User 82511 AUC after training: 0.6181818181818182
User 82511 improves AUC. Keeping the model.
Training on augumented user 42164 3/50 current_auc = 0.6181818181818182
User 42164 AUC after training: 0.6181818181818182
User 42164 does not improve AUC. Reverting changes.
Training on augumented user 112421 4/50 current_auc = 0.6181818181818182
User 112421 AUC after training: 0.6
User 112421 does not improve AUC. Reverting changes.
Training on augumented user 52751 5/50 current_auc = 0.6181818181818182
User 52751 AUC after training: 0.6
User 52751 does not improve AUC. Reverting changes.
Training on augumented user 134660 6/50 current_auc = 0.6181818181818182
User 134660 AUC after training: 0.6
User 134660 does not improve AUC. Reverting changes.
Training on augumented user 27444 7/50 current_auc = 0.6181818181818182
User 27444 AUC after training: 0.6
User 27444 does not improve AUC. Reverting changes.
Training on augumented user 128658 8/50 current_auc = 0.6181818181818182
User 128658 AUC after training: 0.6
User 128658 does not improve AUC. Reverting changes.
Training on augumented user 90587 9/50 current_auc = 0.6181818181818182
User 90587 AUC after training: 0.6181818181818182
User 90587 does not improve AUC. Reverting changes.
Training on augumented user 70718 10/50 current_auc = 0.6181818181818182
User 70718 AUC after training: 0.6
User 70718 does not improve AUC. Reverting changes.
Training on augumented user 122630 11/50 current_auc = 0.6181818181818182
User 122630 AUC after training: 0.6181818181818182
User 122630 does not improve AUC. Reverting changes.
Training on augumented user 79032 12/50 current_auc = 0.6181818181818182
User 79032 AUC after training: 0.6181818181818182
User 79032 does not improve AUC. Reverting changes.
Training on augumented user 137070 13/50 current_auc = 0.6181818181818182
User 137070 AUC after training: 0.6
User 137070 does not improve AUC. Reverting changes.
Training on augumented user 115661 14/50 current_auc = 0.6181818181818182
User 115661 AUC after training: 0.6181818181818182
User 115661 does not improve AUC. Reverting changes.
Training on augumented user 106413 15/50 current_auc = 0.6181818181818182
User 106413 AUC after training: 0.6181818181818182
User 106413 does not improve AUC. Reverting changes.
Training on augumented user 34265 16/50 current_auc = 0.6181818181818182
User 34265 AUC after training: 0.6181818181818182
User 34265 does not improve AUC. Reverting changes.
Training on augumented user 103854 17/50 current_auc = 0.6181818181818182
User 103854 AUC after training: 0.6181818181818182
User 103854 does not improve AUC. Reverting changes.
Training on augumented user 80463 18/50 current_auc = 0.6181818181818182
User 80463 AUC after training: 0.6181818181818182
User 80463 does not improve AUC. Reverting changes.
Training on augumented user 1768 19/50 current_auc = 0.6181818181818182
User 1768 AUC after training: 0.6181818181818182
User 1768 does not improve AUC. Reverting changes.
Training on augumented user 51568 20/50 current_auc = 0.6181818181818182
User 51568 AUC after training: 0.6181818181818182
User 51568 does not improve AUC. Reverting changes.
Training on augumented user 86440 21/50 current_auc = 0.6181818181818182
User 86440 AUC after training: 0.6181818181818182
User 86440 does not improve AUC. Reverting changes.
Training on augumented user 111334 22/50 current_auc = 0.6181818181818182
User 111334 AUC after training: 0.6181818181818182
User 111334 does not improve AUC. Reverting changes.
Training on augumented user 71930 23/50 current_auc = 0.6181818181818182
User 71930 AUC after training: 0.6181818181818182
User 71930 does not improve AUC. Reverting changes.
Training on augumented user 54946 24/50 current_auc = 0.6181818181818182
User 54946 AUC after training: 0.6
User 54946 does not improve AUC. Reverting changes.
Training on augumented user 20006 25/50 current_auc = 0.6181818181818182
User 20006 AUC after training: 0.6181818181818182
User 20006 does not improve AUC. Reverting changes.
Training on augumented user 10308 26/50 current_auc = 0.6181818181818182
User 10308 AUC after training: 0.6181818181818182
User 10308 does not improve AUC. Reverting changes.
Training on augumented user 26037 27/50 current_auc = 0.6181818181818182
User 26037 AUC after training: 0.6181818181818182
User 26037 does not improve AUC. Reverting changes.
Training on augumented user 110738 28/50 current_auc = 0.6181818181818182
User 110738 AUC after training: 0.6
User 110738 does not improve AUC. Reverting changes.
Training on augumented user 112728 29/50 current_auc = 0.6181818181818182
User 112728 AUC after training: 0.6
User 112728 does not improve AUC. Reverting changes.
Training on augumented user 75831 30/50 current_auc = 0.6181818181818182
User 75831 AUC after training: 0.6181818181818182
User 75831 does not improve AUC. Reverting changes.
Training on augumented user 64392 31/50 current_auc = 0.6181818181818182
User 64392 AUC after training: 0.6
User 64392 does not improve AUC. Reverting changes.
Training on augumented user 436 32/50 current_auc = 0.6181818181818182
User 436 AUC after training: 0.6181818181818182
User 436 does not improve AUC. Reverting changes.
Training on augumented user 51303 33/50 current_auc = 0.6181818181818182
User 51303 AUC after training: 0.6181818181818182
User 51303 does not improve AUC. Reverting changes.
Training on augumented user 1208 34/50 current_auc = 0.6181818181818182
User 1208 AUC after training: 0.6181818181818182
User 1208 does not improve AUC. Reverting changes.
Training on augumented user 38456 35/50 current_auc = 0.6181818181818182
User 38456 AUC after training: 0.6
User 38456 does not improve AUC. Reverting changes.
Training on augumented user 90897 36/50 current_auc = 0.6181818181818182
User 90897 AUC after training: 0.6181818181818182
User 90897 does not improve AUC. Reverting changes.
Training on augumented user 77563 37/50 current_auc = 0.6181818181818182
User 77563 AUC after training: 0.6090909090909091
User 77563 does not improve AUC. Reverting changes.
Training on augumented user 11139 38/50 current_auc = 0.6181818181818182
User 11139 AUC after training: 0.6181818181818182
User 11139 does not improve AUC. Reverting changes.
Training on augumented user 31551 39/50 current_auc = 0.6181818181818182
User 31551 AUC after training: 0.6181818181818182
User 31551 does not improve AUC. Reverting changes.
Training on augumented user 26695 40/50 current_auc = 0.6181818181818182
User 26695 AUC after training: 0.6
User 26695 does not improve AUC. Reverting changes.
Training on augumented user 54948 41/50 current_auc = 0.6181818181818182
User 54948 AUC after training: 0.6181818181818182
User 54948 does not improve AUC. Reverting changes.
Training on augumented user 87613 42/50 current_auc = 0.6181818181818182
User 87613 AUC after training: 0.6181818181818182
User 87613 does not improve AUC. Reverting changes.
Training on augumented user 4388 43/50 current_auc = 0.6181818181818182
User 4388 AUC after training: 0.6181818181818182
User 4388 does not improve AUC. Reverting changes.
Training on augumented user 74232 44/50 current_auc = 0.6181818181818182
User 74232 AUC after training: 0.6181818181818182
User 74232 does not improve AUC. Reverting changes.
Training on augumented user 63195 45/50 current_auc = 0.6181818181818182
User 63195 AUC after training: 0.6
User 63195 does not improve AUC. Reverting changes.
Training on augumented user 4701 46/50 current_auc = 0.6181818181818182
User 4701 AUC after training: 0.6181818181818182
User 4701 does not improve AUC. Reverting changes.
Training on augumented user 29617 47/50 current_auc = 0.6181818181818182
User 29617 AUC after training: 0.6181818181818182
User 29617 does not improve AUC. Reverting changes.
Training on augumented user 135379 48/50 current_auc = 0.6181818181818182
User 135379 AUC after training: 0.6181818181818182
User 135379 does not improve AUC. Reverting changes.
Training on augumented user 8161 49/50 current_auc = 0.6181818181818182
User 8161 AUC after training: 0.6
User 8161 does not improve AUC. Reverting changes.
[2024-12-02 17:40:31.922996] start test user 109473 5/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:40:32.635240] start test user 109473 5/567 recall augumented users by random, augumented_users = [36834, 110466, 91751, 3818, 26052, 37369, 7436, 12291, 43066, 26226, 27743, 100507, 25338, 84383, 98647, 98455, 28085, 63529, 54196, 30050, 57134, 84571, 89356, 121153, 87441, 78998, 105389, 35860, 109154, 51379, 135559, 38428, 40856, 29697, 93593, 38609, 105982, 66413, 69433, 3784, 136137, 74744, 6038, 59541, 71101, 89635, 90280, 72181, 10782, 114615]
[2024-12-02 17:40:32.650860] user = 109473 Cloud 5/567
[2024-12-02 17:40:32.664970] user = 109473 Local 5/567
[2024-12-02 17:40:32.825703] user = 109473 Local+ 5/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:40:34.630248] user = 109473 MPDA- 5/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7053846153846154
Training on augumented user 36834 0/50 current_auc = 0.7053846153846154
User 36834 AUC after training: 0.7047692307692308
User 36834 does not improve AUC. Reverting changes.
Training on augumented user 110466 1/50 current_auc = 0.7053846153846154
User 110466 AUC after training: 0.7047692307692308
User 110466 does not improve AUC. Reverting changes.
Training on augumented user 91751 2/50 current_auc = 0.7053846153846154
User 91751 AUC after training: 0.705076923076923
User 91751 does not improve AUC. Reverting changes.
Training on augumented user 3818 3/50 current_auc = 0.7053846153846154
User 3818 AUC after training: 0.7066153846153846
User 3818 improves AUC. Keeping the model.
Training on augumented user 26052 4/50 current_auc = 0.7066153846153846
User 26052 AUC after training: 0.7069230769230769
User 26052 improves AUC. Keeping the model.
Training on augumented user 37369 5/50 current_auc = 0.7069230769230769
User 37369 AUC after training: 0.7066153846153846
User 37369 does not improve AUC. Reverting changes.
Training on augumented user 7436 6/50 current_auc = 0.7069230769230769
User 7436 AUC after training: 0.7069230769230769
User 7436 does not improve AUC. Reverting changes.
Training on augumented user 12291 7/50 current_auc = 0.7069230769230769
User 12291 AUC after training: 0.7066153846153846
User 12291 does not improve AUC. Reverting changes.
Training on augumented user 43066 8/50 current_auc = 0.7069230769230769
User 43066 AUC after training: 0.7069230769230769
User 43066 does not improve AUC. Reverting changes.
Training on augumented user 26226 9/50 current_auc = 0.7069230769230769
User 26226 AUC after training: 0.7066153846153848
User 26226 does not improve AUC. Reverting changes.
Training on augumented user 27743 10/50 current_auc = 0.7069230769230769
User 27743 AUC after training: 0.7069230769230769
User 27743 does not improve AUC. Reverting changes.
Training on augumented user 100507 11/50 current_auc = 0.7069230769230769
User 100507 AUC after training: 0.7072307692307692
User 100507 improves AUC. Keeping the model.
Training on augumented user 25338 12/50 current_auc = 0.7072307692307692
User 25338 AUC after training: 0.7078461538461539
User 25338 improves AUC. Keeping the model.
Training on augumented user 84383 13/50 current_auc = 0.7078461538461539
User 84383 AUC after training: 0.7078461538461539
User 84383 does not improve AUC. Reverting changes.
Training on augumented user 98647 14/50 current_auc = 0.7078461538461539
User 98647 AUC after training: 0.7069230769230769
User 98647 does not improve AUC. Reverting changes.
Training on augumented user 98455 15/50 current_auc = 0.7078461538461539
User 98455 AUC after training: 0.7075384615384616
User 98455 does not improve AUC. Reverting changes.
Training on augumented user 28085 16/50 current_auc = 0.7078461538461539
User 28085 AUC after training: 0.7078461538461539
User 28085 does not improve AUC. Reverting changes.
Training on augumented user 63529 17/50 current_auc = 0.7078461538461539
User 63529 AUC after training: 0.7056923076923077
User 63529 does not improve AUC. Reverting changes.
Training on augumented user 54196 18/50 current_auc = 0.7078461538461539
User 54196 AUC after training: 0.7072307692307692
User 54196 does not improve AUC. Reverting changes.
Training on augumented user 30050 19/50 current_auc = 0.7078461538461539
User 30050 AUC after training: 0.7078461538461539
User 30050 does not improve AUC. Reverting changes.
Training on augumented user 57134 20/50 current_auc = 0.7078461538461539
User 57134 AUC after training: 0.7072307692307692
User 57134 does not improve AUC. Reverting changes.
Training on augumented user 84571 21/50 current_auc = 0.7078461538461539
User 84571 AUC after training: 0.7081538461538461
User 84571 improves AUC. Keeping the model.
Training on augumented user 89356 22/50 current_auc = 0.7081538461538461
User 89356 AUC after training: 0.7072307692307692
User 89356 does not improve AUC. Reverting changes.
Training on augumented user 121153 23/50 current_auc = 0.7081538461538461
User 121153 AUC after training: 0.7078461538461539
User 121153 does not improve AUC. Reverting changes.
Training on augumented user 87441 24/50 current_auc = 0.7081538461538461
User 87441 AUC after training: 0.7069230769230769
User 87441 does not improve AUC. Reverting changes.
Training on augumented user 78998 25/50 current_auc = 0.7081538461538461
User 78998 AUC after training: 0.7081538461538461
User 78998 does not improve AUC. Reverting changes.
Training on augumented user 105389 26/50 current_auc = 0.7081538461538461
User 105389 AUC after training: 0.7075384615384616
User 105389 does not improve AUC. Reverting changes.
Training on augumented user 35860 27/50 current_auc = 0.7081538461538461
User 35860 AUC after training: 0.7081538461538461
User 35860 does not improve AUC. Reverting changes.
Training on augumented user 109154 28/50 current_auc = 0.7081538461538461
User 109154 AUC after training: 0.7084615384615385
User 109154 improves AUC. Keeping the model.
Training on augumented user 51379 29/50 current_auc = 0.7084615384615385
User 51379 AUC after training: 0.7078461538461539
User 51379 does not improve AUC. Reverting changes.
Training on augumented user 135559 30/50 current_auc = 0.7084615384615385
User 135559 AUC after training: 0.7081538461538461
User 135559 does not improve AUC. Reverting changes.
Training on augumented user 38428 31/50 current_auc = 0.7084615384615385
User 38428 AUC after training: 0.7081538461538461
User 38428 does not improve AUC. Reverting changes.
Training on augumented user 40856 32/50 current_auc = 0.7084615384615385
User 40856 AUC after training: 0.7075384615384616
User 40856 does not improve AUC. Reverting changes.
Training on augumented user 29697 33/50 current_auc = 0.7084615384615385
User 29697 AUC after training: 0.7081538461538461
User 29697 does not improve AUC. Reverting changes.
Training on augumented user 93593 34/50 current_auc = 0.7084615384615385
User 93593 AUC after training: 0.7084615384615385
User 93593 does not improve AUC. Reverting changes.
Training on augumented user 38609 35/50 current_auc = 0.7084615384615385
User 38609 AUC after training: 0.7066153846153845
User 38609 does not improve AUC. Reverting changes.
Training on augumented user 105982 36/50 current_auc = 0.7084615384615385
User 105982 AUC after training: 0.7087692307692307
User 105982 improves AUC. Keeping the model.
Training on augumented user 66413 37/50 current_auc = 0.7087692307692307
User 66413 AUC after training: 0.7081538461538461
User 66413 does not improve AUC. Reverting changes.
Training on augumented user 69433 38/50 current_auc = 0.7087692307692307
User 69433 AUC after training: 0.7087692307692307
User 69433 does not improve AUC. Reverting changes.
Training on augumented user 3784 39/50 current_auc = 0.7087692307692307
User 3784 AUC after training: 0.7087692307692308
User 3784 improves AUC. Keeping the model.
Training on augumented user 136137 40/50 current_auc = 0.7087692307692308
User 136137 AUC after training: 0.7087692307692308
User 136137 does not improve AUC. Reverting changes.
Training on augumented user 74744 41/50 current_auc = 0.7087692307692308
User 74744 AUC after training: 0.709076923076923
User 74744 improves AUC. Keeping the model.
Training on augumented user 6038 42/50 current_auc = 0.709076923076923
User 6038 AUC after training: 0.7081538461538462
User 6038 does not improve AUC. Reverting changes.
Training on augumented user 59541 43/50 current_auc = 0.709076923076923
User 59541 AUC after training: 0.7087692307692308
User 59541 does not improve AUC. Reverting changes.
Training on augumented user 71101 44/50 current_auc = 0.709076923076923
User 71101 AUC after training: 0.7084615384615385
User 71101 does not improve AUC. Reverting changes.
Training on augumented user 89635 45/50 current_auc = 0.709076923076923
User 89635 AUC after training: 0.7087692307692307
User 89635 does not improve AUC. Reverting changes.
Training on augumented user 90280 46/50 current_auc = 0.709076923076923
User 90280 AUC after training: 0.7087692307692308
User 90280 does not improve AUC. Reverting changes.
Training on augumented user 72181 47/50 current_auc = 0.709076923076923
User 72181 AUC after training: 0.7087692307692309
User 72181 does not improve AUC. Reverting changes.
Training on augumented user 10782 48/50 current_auc = 0.709076923076923
User 10782 AUC after training: 0.7087692307692309
User 10782 does not improve AUC. Reverting changes.
Training on augumented user 114615 49/50 current_auc = 0.709076923076923
User 114615 AUC after training: 0.7084615384615385
User 114615 does not improve AUC. Reverting changes.
[2024-12-02 17:41:00.061269] start test user 109497 6/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:41:00.574631] start test user 109497 6/567 recall augumented users by random, augumented_users = [66926, 28867, 126395, 58213, 105510, 81195, 13204, 26237, 78995, 15706, 81578, 20478, 110442, 88957, 51906, 76185, 44768, 127430, 89286, 111496, 106837, 96066, 86580, 2162, 80247, 102571, 132715, 56827, 57715, 45703, 46110, 12752, 51418, 65472, 105490, 133495, 45160, 62799, 91245, 112396, 95910, 5849, 11901, 105701, 12446, 85689, 9319, 35493, 44109, 91857]
[2024-12-02 17:41:00.589365] user = 109497 Cloud 6/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:41:00.596629] user = 109497 Local 6/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:41:00.635642] user = 109497 Local+ 6/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:41:03.359993] user = 109497 MPDA- 6/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 66926 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66926 AUC after training: 0.5
User 66926 does not improve AUC. Reverting changes.
Training on augumented user 28867 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28867 AUC after training: 0.5
User 28867 does not improve AUC. Reverting changes.
Training on augumented user 126395 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126395 AUC after training: 0.5
User 126395 does not improve AUC. Reverting changes.
Training on augumented user 58213 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58213 AUC after training: 0.5
User 58213 does not improve AUC. Reverting changes.
Training on augumented user 105510 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105510 AUC after training: 0.5
User 105510 does not improve AUC. Reverting changes.
Training on augumented user 81195 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81195 AUC after training: 0.5
User 81195 does not improve AUC. Reverting changes.
Training on augumented user 13204 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13204 AUC after training: 0.5
User 13204 does not improve AUC. Reverting changes.
Training on augumented user 26237 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26237 AUC after training: 0.5
User 26237 does not improve AUC. Reverting changes.
Training on augumented user 78995 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 78995 AUC after training: 0.5
User 78995 does not improve AUC. Reverting changes.
Training on augumented user 15706 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15706 AUC after training: 0.5
User 15706 does not improve AUC. Reverting changes.
Training on augumented user 81578 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81578 AUC after training: 0.5
User 81578 does not improve AUC. Reverting changes.
Training on augumented user 20478 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20478 AUC after training: 0.5
User 20478 does not improve AUC. Reverting changes.
Training on augumented user 110442 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110442 AUC after training: 0.5
User 110442 does not improve AUC. Reverting changes.
Training on augumented user 88957 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88957 AUC after training: 0.5
User 88957 does not improve AUC. Reverting changes.
Training on augumented user 51906 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51906 AUC after training: 0.5
User 51906 does not improve AUC. Reverting changes.
Training on augumented user 76185 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76185 AUC after training: 0.5
User 76185 does not improve AUC. Reverting changes.
Training on augumented user 44768 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44768 AUC after training: 0.5
User 44768 does not improve AUC. Reverting changes.
Training on augumented user 127430 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127430 AUC after training: 0.5
User 127430 does not improve AUC. Reverting changes.
Training on augumented user 89286 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89286 AUC after training: 0.5
User 89286 does not improve AUC. Reverting changes.
Training on augumented user 111496 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111496 AUC after training: 0.5
User 111496 does not improve AUC. Reverting changes.
Training on augumented user 106837 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106837 AUC after training: 0.5
User 106837 does not improve AUC. Reverting changes.
Training on augumented user 96066 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96066 AUC after training: 0.5
User 96066 does not improve AUC. Reverting changes.
Training on augumented user 86580 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86580 AUC after training: 0.5
User 86580 does not improve AUC. Reverting changes.
Training on augumented user 2162 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2162 AUC after training: 0.5
User 2162 does not improve AUC. Reverting changes.
Training on augumented user 80247 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80247 AUC after training: 0.5
User 80247 does not improve AUC. Reverting changes.
Training on augumented user 102571 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102571 AUC after training: 0.5
User 102571 does not improve AUC. Reverting changes.
Training on augumented user 132715 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132715 AUC after training: 0.5
User 132715 does not improve AUC. Reverting changes.
Training on augumented user 56827 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56827 AUC after training: 0.5
User 56827 does not improve AUC. Reverting changes.
Training on augumented user 57715 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57715 AUC after training: 0.5
User 57715 does not improve AUC. Reverting changes.
Training on augumented user 45703 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45703 AUC after training: 0.5
User 45703 does not improve AUC. Reverting changes.
Training on augumented user 46110 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 46110 AUC after training: 0.5
User 46110 does not improve AUC. Reverting changes.
Training on augumented user 12752 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12752 AUC after training: 0.5
User 12752 does not improve AUC. Reverting changes.
Training on augumented user 51418 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51418 AUC after training: 0.5
User 51418 does not improve AUC. Reverting changes.
Training on augumented user 65472 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 65472 AUC after training: 0.5
User 65472 does not improve AUC. Reverting changes.
Training on augumented user 105490 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105490 AUC after training: 0.5
User 105490 does not improve AUC. Reverting changes.
Training on augumented user 133495 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133495 AUC after training: 0.5
User 133495 does not improve AUC. Reverting changes.
Training on augumented user 45160 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45160 AUC after training: 0.5
User 45160 does not improve AUC. Reverting changes.
Training on augumented user 62799 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62799 AUC after training: 0.5
User 62799 does not improve AUC. Reverting changes.
Training on augumented user 91245 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91245 AUC after training: 0.5
User 91245 does not improve AUC. Reverting changes.
Training on augumented user 112396 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112396 AUC after training: 0.5
User 112396 does not improve AUC. Reverting changes.
Training on augumented user 95910 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95910 AUC after training: 0.5
User 95910 does not improve AUC. Reverting changes.
Training on augumented user 5849 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5849 AUC after training: 0.5
User 5849 does not improve AUC. Reverting changes.
Training on augumented user 11901 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11901 AUC after training: 0.5
User 11901 does not improve AUC. Reverting changes.
Training on augumented user 105701 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105701 AUC after training: 0.5
User 105701 does not improve AUC. Reverting changes.
Training on augumented user 12446 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12446 AUC after training: 0.5
User 12446 does not improve AUC. Reverting changes.
Training on augumented user 85689 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85689 AUC after training: 0.5
User 85689 does not improve AUC. Reverting changes.
Training on augumented user 9319 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9319 AUC after training: 0.5
User 9319 does not improve AUC. Reverting changes.
Training on augumented user 35493 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35493 AUC after training: 0.5
User 35493 does not improve AUC. Reverting changes.
Training on augumented user 44109 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44109 AUC after training: 0.5
User 44109 does not improve AUC. Reverting changes.
Training on augumented user 91857 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91857 AUC after training: 0.5
User 91857 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:41:31.501650] start test user 109499 7/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:41:31.984299] start test user 109499 7/567 recall augumented users by random, augumented_users = [80137, 10284, 30600, 88224, 109422, 5209, 98170, 107246, 131936, 108213, 60303, 94194, 125191, 47379, 86177, 76701, 8924, 84863, 76776, 97361, 60029, 88423, 107097, 32921, 105045, 107360, 27084, 124739, 100442, 99310, 50, 17783, 127977, 103944, 51275, 79152, 129451, 104760, 119301, 100272, 106898, 38233, 32599, 61459, 106368, 33652, 96170, 109421, 117733, 40555]
[2024-12-02 17:41:32.001765] user = 109499 Cloud 7/567
[2024-12-02 17:41:32.013255] user = 109499 Local 7/567
[2024-12-02 17:41:32.075473] user = 109499 Local+ 7/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:41:34.086852] user = 109499 MPDA- 7/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7060869565217391
Training on augumented user 80137 0/50 current_auc = 0.7060869565217391
User 80137 AUC after training: 0.7060869565217391
User 80137 does not improve AUC. Reverting changes.
Training on augumented user 10284 1/50 current_auc = 0.7060869565217391
User 10284 AUC after training: 0.7060869565217391
User 10284 does not improve AUC. Reverting changes.
Training on augumented user 30600 2/50 current_auc = 0.7060869565217391
User 30600 AUC after training: 0.711304347826087
User 30600 improves AUC. Keeping the model.
Training on augumented user 88224 3/50 current_auc = 0.711304347826087
User 88224 AUC after training: 0.711304347826087
User 88224 does not improve AUC. Reverting changes.
Training on augumented user 109422 4/50 current_auc = 0.711304347826087
User 109422 AUC after training: 0.7095652173913044
User 109422 does not improve AUC. Reverting changes.
Training on augumented user 5209 5/50 current_auc = 0.711304347826087
User 5209 AUC after training: 0.7078260869565217
User 5209 does not improve AUC. Reverting changes.
Training on augumented user 98170 6/50 current_auc = 0.711304347826087
User 98170 AUC after training: 0.7095652173913044
User 98170 does not improve AUC. Reverting changes.
Training on augumented user 107246 7/50 current_auc = 0.711304347826087
User 107246 AUC after training: 0.711304347826087
User 107246 does not improve AUC. Reverting changes.
Training on augumented user 131936 8/50 current_auc = 0.711304347826087
User 131936 AUC after training: 0.7095652173913044
User 131936 does not improve AUC. Reverting changes.
Training on augumented user 108213 9/50 current_auc = 0.711304347826087
User 108213 AUC after training: 0.7078260869565217
User 108213 does not improve AUC. Reverting changes.
Training on augumented user 60303 10/50 current_auc = 0.711304347826087
User 60303 AUC after training: 0.7095652173913044
User 60303 does not improve AUC. Reverting changes.
Training on augumented user 94194 11/50 current_auc = 0.711304347826087
User 94194 AUC after training: 0.7095652173913044
User 94194 does not improve AUC. Reverting changes.
Training on augumented user 125191 12/50 current_auc = 0.711304347826087
User 125191 AUC after training: 0.711304347826087
User 125191 does not improve AUC. Reverting changes.
Training on augumented user 47379 13/50 current_auc = 0.711304347826087
User 47379 AUC after training: 0.711304347826087
User 47379 does not improve AUC. Reverting changes.
Training on augumented user 86177 14/50 current_auc = 0.711304347826087
User 86177 AUC after training: 0.7095652173913044
User 86177 does not improve AUC. Reverting changes.
Training on augumented user 76701 15/50 current_auc = 0.711304347826087
User 76701 AUC after training: 0.7130434782608696
User 76701 improves AUC. Keeping the model.
Training on augumented user 8924 16/50 current_auc = 0.7130434782608696
User 8924 AUC after training: 0.711304347826087
User 8924 does not improve AUC. Reverting changes.
Training on augumented user 84863 17/50 current_auc = 0.7130434782608696
User 84863 AUC after training: 0.7130434782608696
User 84863 does not improve AUC. Reverting changes.
Training on augumented user 76776 18/50 current_auc = 0.7130434782608696
User 76776 AUC after training: 0.7113043478260869
User 76776 does not improve AUC. Reverting changes.
Training on augumented user 97361 19/50 current_auc = 0.7130434782608696
User 97361 AUC after training: 0.711304347826087
User 97361 does not improve AUC. Reverting changes.
Training on augumented user 60029 20/50 current_auc = 0.7130434782608696
User 60029 AUC after training: 0.7078260869565217
User 60029 does not improve AUC. Reverting changes.
Training on augumented user 88423 21/50 current_auc = 0.7130434782608696
User 88423 AUC after training: 0.7130434782608696
User 88423 does not improve AUC. Reverting changes.
Training on augumented user 107097 22/50 current_auc = 0.7130434782608696
User 107097 AUC after training: 0.711304347826087
User 107097 does not improve AUC. Reverting changes.
Training on augumented user 32921 23/50 current_auc = 0.7130434782608696
User 32921 AUC after training: 0.7130434782608696
User 32921 does not improve AUC. Reverting changes.
Training on augumented user 105045 24/50 current_auc = 0.7130434782608696
User 105045 AUC after training: 0.7130434782608696
User 105045 does not improve AUC. Reverting changes.
Training on augumented user 107360 25/50 current_auc = 0.7130434782608696
User 107360 AUC after training: 0.7095652173913044
User 107360 does not improve AUC. Reverting changes.
Training on augumented user 27084 26/50 current_auc = 0.7130434782608696
User 27084 AUC after training: 0.711304347826087
User 27084 does not improve AUC. Reverting changes.
Training on augumented user 124739 27/50 current_auc = 0.7130434782608696
User 124739 AUC after training: 0.7130434782608696
User 124739 does not improve AUC. Reverting changes.
Training on augumented user 100442 28/50 current_auc = 0.7130434782608696
User 100442 AUC after training: 0.7130434782608696
User 100442 does not improve AUC. Reverting changes.
Training on augumented user 99310 29/50 current_auc = 0.7130434782608696
User 99310 AUC after training: 0.711304347826087
User 99310 does not improve AUC. Reverting changes.
Training on augumented user 50 30/50 current_auc = 0.7130434782608696
User 50 AUC after training: 0.7095652173913044
User 50 does not improve AUC. Reverting changes.
Training on augumented user 17783 31/50 current_auc = 0.7130434782608696
User 17783 AUC after training: 0.7130434782608696
User 17783 does not improve AUC. Reverting changes.
Training on augumented user 127977 32/50 current_auc = 0.7130434782608696
User 127977 AUC after training: 0.7095652173913044
User 127977 does not improve AUC. Reverting changes.
Training on augumented user 103944 33/50 current_auc = 0.7130434782608696
User 103944 AUC after training: 0.711304347826087
User 103944 does not improve AUC. Reverting changes.
Training on augumented user 51275 34/50 current_auc = 0.7130434782608696
User 51275 AUC after training: 0.7130434782608696
User 51275 does not improve AUC. Reverting changes.
Training on augumented user 79152 35/50 current_auc = 0.7130434782608696
User 79152 AUC after training: 0.7078260869565217
User 79152 does not improve AUC. Reverting changes.
Training on augumented user 129451 36/50 current_auc = 0.7130434782608696
User 129451 AUC after training: 0.7130434782608696
User 129451 does not improve AUC. Reverting changes.
Training on augumented user 104760 37/50 current_auc = 0.7130434782608696
User 104760 AUC after training: 0.7078260869565217
User 104760 does not improve AUC. Reverting changes.
Training on augumented user 119301 38/50 current_auc = 0.7130434782608696
User 119301 AUC after training: 0.711304347826087
User 119301 does not improve AUC. Reverting changes.
Training on augumented user 100272 39/50 current_auc = 0.7130434782608696
User 100272 AUC after training: 0.7078260869565217
User 100272 does not improve AUC. Reverting changes.
Training on augumented user 106898 40/50 current_auc = 0.7130434782608696
User 106898 AUC after training: 0.706086956521739
User 106898 does not improve AUC. Reverting changes.
Training on augumented user 38233 41/50 current_auc = 0.7130434782608696
User 38233 AUC after training: 0.7130434782608696
User 38233 does not improve AUC. Reverting changes.
Training on augumented user 32599 42/50 current_auc = 0.7130434782608696
User 32599 AUC after training: 0.7130434782608696
User 32599 does not improve AUC. Reverting changes.
Training on augumented user 61459 43/50 current_auc = 0.7130434782608696
User 61459 AUC after training: 0.706086956521739
User 61459 does not improve AUC. Reverting changes.
Training on augumented user 106368 44/50 current_auc = 0.7130434782608696
User 106368 AUC after training: 0.711304347826087
User 106368 does not improve AUC. Reverting changes.
Training on augumented user 33652 45/50 current_auc = 0.7130434782608696
User 33652 AUC after training: 0.7078260869565217
User 33652 does not improve AUC. Reverting changes.
Training on augumented user 96170 46/50 current_auc = 0.7130434782608696
User 96170 AUC after training: 0.711304347826087
User 96170 does not improve AUC. Reverting changes.
Training on augumented user 109421 47/50 current_auc = 0.7130434782608696
User 109421 AUC after training: 0.706086956521739
User 109421 does not improve AUC. Reverting changes.
Training on augumented user 117733 48/50 current_auc = 0.7130434782608696
User 117733 AUC after training: 0.7130434782608696
User 117733 does not improve AUC. Reverting changes.
Training on augumented user 40555 49/50 current_auc = 0.7130434782608696
User 40555 AUC after training: 0.711304347826087
User 40555 does not improve AUC. Reverting changes.
[2024-12-02 17:42:01.987028] start test user 109522 8/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:42:02.562308] start test user 109522 8/567 recall augumented users by random, augumented_users = [133954, 45958, 54608, 98473, 59363, 90704, 7752, 110852, 39786, 16128, 91091, 31771, 78282, 29861, 26713, 15599, 90283, 27776, 136761, 14262, 83695, 129065, 125680, 108675, 66414, 120312, 6790, 25624, 1640, 99421, 77345, 8652, 50578, 38654, 125562, 103398, 121547, 108429, 106388, 48359, 133329, 3021, 131160, 3757, 75928, 71452, 91952, 83486, 118778, 42624]
[2024-12-02 17:42:02.578172] user = 109522 Cloud 8/567
[2024-12-02 17:42:02.624620] user = 109522 Local 8/567
[2024-12-02 17:42:02.710503] user = 109522 Local+ 8/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:42:04.980488] user = 109522 MPDA- 8/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6985519754507097
Training on augumented user 133954 0/50 current_auc = 0.6985519754507097
User 133954 AUC after training: 0.6987821250479479
User 133954 improves AUC. Keeping the model.
Training on augumented user 45958 1/50 current_auc = 0.6987821250479479
User 45958 AUC after training: 0.6981300345224396
User 45958 does not improve AUC. Reverting changes.
Training on augumented user 54608 2/50 current_auc = 0.6987821250479479
User 54608 AUC after training: 0.6999904104334486
User 54608 improves AUC. Keeping the model.
Training on augumented user 98473 3/50 current_auc = 0.6999904104334486
User 98473 AUC after training: 0.6998465669351744
User 98473 does not improve AUC. Reverting changes.
Training on augumented user 59363 4/50 current_auc = 0.6999904104334486
User 59363 AUC after training: 0.7007671653241274
User 59363 improves AUC. Keeping the model.
Training on augumented user 90704 5/50 current_auc = 0.7007671653241274
User 90704 AUC after training: 0.7010932105868813
User 90704 improves AUC. Keeping the model.
Training on augumented user 7752 6/50 current_auc = 0.7010932105868813
User 7752 AUC after training: 0.7007000383582661
User 7752 does not improve AUC. Reverting changes.
Training on augumented user 110852 7/50 current_auc = 0.7010932105868813
User 110852 AUC after training: 0.7008247027234369
User 110852 does not improve AUC. Reverting changes.
Training on augumented user 39786 8/50 current_auc = 0.7010932105868813
User 39786 AUC after training: 0.7009205983889528
User 39786 does not improve AUC. Reverting changes.
Training on augumented user 16128 9/50 current_auc = 0.7010932105868813
User 16128 AUC after training: 0.7002493287303414
User 16128 does not improve AUC. Reverting changes.
Training on augumented user 91091 10/50 current_auc = 0.7010932105868813
User 91091 AUC after training: 0.7011891062523974
User 91091 improves AUC. Keeping the model.
Training on augumented user 31771 11/50 current_auc = 0.7011891062523974
User 31771 AUC after training: 0.7005082470272344
User 31771 does not improve AUC. Reverting changes.
Training on augumented user 78282 12/50 current_auc = 0.7011891062523974
User 78282 AUC after training: 0.7015918680475642
User 78282 improves AUC. Keeping the model.
Training on augumented user 29861 13/50 current_auc = 0.7015918680475642
User 29861 AUC after training: 0.7011411584196394
User 29861 does not improve AUC. Reverting changes.
Training on augumented user 26713 14/50 current_auc = 0.7015918680475642
User 26713 AUC after training: 0.7007575757575757
User 26713 does not improve AUC. Reverting changes.
Training on augumented user 15599 15/50 current_auc = 0.7015918680475642
User 15599 AUC after training: 0.7015630993479094
User 15599 does not improve AUC. Reverting changes.
Training on augumented user 90283 16/50 current_auc = 0.7015918680475642
User 90283 AUC after training: 0.7014288454161872
User 90283 does not improve AUC. Reverting changes.
Training on augumented user 27776 17/50 current_auc = 0.7015918680475642
User 27776 AUC after training: 0.7014288454161872
User 27776 does not improve AUC. Reverting changes.
Training on augumented user 136761 18/50 current_auc = 0.7015918680475642
User 136761 AUC after training: 0.7007192174913695
User 136761 does not improve AUC. Reverting changes.
Training on augumented user 14262 19/50 current_auc = 0.7015918680475642
User 14262 AUC after training: 0.7016110471806674
User 14262 improves AUC. Keeping the model.
Training on augumented user 83695 20/50 current_auc = 0.7016110471806674
User 83695 AUC after training: 0.7011891062523974
User 83695 does not improve AUC. Reverting changes.
Training on augumented user 129065 21/50 current_auc = 0.7016110471806674
User 129065 AUC after training: 0.7014767932489452
User 129065 does not improve AUC. Reverting changes.
Training on augumented user 125680 22/50 current_auc = 0.7016110471806674
User 125680 AUC after training: 0.7011507479861909
User 125680 does not improve AUC. Reverting changes.
Training on augumented user 108675 23/50 current_auc = 0.7016110471806674
User 108675 AUC after training: 0.7014384349827388
User 108675 does not improve AUC. Reverting changes.
Training on augumented user 66414 24/50 current_auc = 0.7016110471806674
User 66414 AUC after training: 0.7014000767165324
User 66414 does not improve AUC. Reverting changes.
Training on augumented user 120312 25/50 current_auc = 0.7016110471806674
User 120312 AUC after training: 0.7036536248561565
User 120312 improves AUC. Keeping the model.
Training on augumented user 6790 26/50 current_auc = 0.7036536248561565
User 6790 AUC after training: 0.7032508630609897
User 6790 does not improve AUC. Reverting changes.
Training on augumented user 25624 27/50 current_auc = 0.7036536248561565
User 25624 AUC after training: 0.7033947065592635
User 25624 does not improve AUC. Reverting changes.
Training on augumented user 1640 28/50 current_auc = 0.7036536248561565
User 1640 AUC after training: 0.7037974683544305
User 1640 improves AUC. Keeping the model.
Training on augumented user 99421 29/50 current_auc = 0.7037974683544305
User 99421 AUC after training: 0.7030686612965095
User 99421 does not improve AUC. Reverting changes.
Training on augumented user 77345 30/50 current_auc = 0.7037974683544305
User 77345 AUC after training: 0.7035193709244343
User 77345 does not improve AUC. Reverting changes.
Training on augumented user 8652 31/50 current_auc = 0.7037974683544305
User 8652 AUC after training: 0.7023014959723821
User 8652 does not improve AUC. Reverting changes.
Training on augumented user 50578 32/50 current_auc = 0.7037974683544305
User 50578 AUC after training: 0.7035673187571923
User 50578 does not improve AUC. Reverting changes.
Training on augumented user 38654 33/50 current_auc = 0.7037974683544305
User 38654 AUC after training: 0.7033275795934024
User 38654 does not improve AUC. Reverting changes.
Training on augumented user 125562 34/50 current_auc = 0.7037974683544305
User 125562 AUC after training: 0.7032796317606445
User 125562 does not improve AUC. Reverting changes.
Training on augumented user 103398 35/50 current_auc = 0.7037974683544305
User 103398 AUC after training: 0.7034522439585731
User 103398 does not improve AUC. Reverting changes.
Training on augumented user 121547 36/50 current_auc = 0.7037974683544305
User 121547 AUC after training: 0.703922132719601
User 121547 improves AUC. Keeping the model.
Training on augumented user 108429 37/50 current_auc = 0.703922132719601
User 108429 AUC after training: 0.702445339470656
User 108429 does not improve AUC. Reverting changes.
Training on augumented user 106388 38/50 current_auc = 0.703922132719601
User 106388 AUC after training: 0.702397391637898
User 106388 does not improve AUC. Reverting changes.
Training on augumented user 48359 39/50 current_auc = 0.703922132719601
User 48359 AUC after training: 0.7035193709244343
User 48359 does not improve AUC. Reverting changes.
Training on augumented user 133329 40/50 current_auc = 0.703922132719601
User 133329 AUC after training: 0.702867280398926
User 133329 does not improve AUC. Reverting changes.
Training on augumented user 3021 41/50 current_auc = 0.703922132719601
User 3021 AUC after training: 0.7038645953202916
User 3021 does not improve AUC. Reverting changes.
Training on augumented user 131160 42/50 current_auc = 0.703922132719601
User 131160 AUC after training: 0.7045166858457999
User 131160 improves AUC. Keeping the model.
Training on augumented user 3757 43/50 current_auc = 0.7045166858457999
User 3757 AUC after training: 0.7034426543920215
User 3757 does not improve AUC. Reverting changes.
Training on augumented user 75928 44/50 current_auc = 0.7045166858457999
User 75928 AUC after training: 0.7042098197161488
User 75928 does not improve AUC. Reverting changes.
Training on augumented user 71452 45/50 current_auc = 0.7045166858457999
User 71452 AUC after training: 0.7046892980437285
User 71452 improves AUC. Keeping the model.
Training on augumented user 91952 46/50 current_auc = 0.7046892980437285
User 91952 AUC after training: 0.704679708477177
User 91952 does not improve AUC. Reverting changes.
Training on augumented user 83486 47/50 current_auc = 0.7046892980437285
User 83486 AUC after training: 0.7043824319140775
User 83486 does not improve AUC. Reverting changes.
Training on augumented user 118778 48/50 current_auc = 0.7046892980437285
User 118778 AUC after training: 0.7049002685078636
User 118778 improves AUC. Keeping the model.
Training on augumented user 42624 49/50 current_auc = 0.7049002685078636
User 42624 AUC after training: 0.7042673571154583
User 42624 does not improve AUC. Reverting changes.
[2024-12-02 17:42:31.805090] start test user 109523 9/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:42:32.454829] start test user 109523 9/567 recall augumented users by random, augumented_users = [112587, 78456, 82390, 108415, 108531, 84601, 20470, 128540, 58144, 79301, 113562, 82861, 59718, 102634, 16769, 71936, 100400, 125247, 42830, 113070, 94444, 61716, 74877, 48021, 94521, 121038, 41393, 18537, 86299, 78954, 897, 51365, 87600, 120568, 62758, 130577, 49952, 123314, 51668, 42453, 37076, 51549, 55615, 41413, 131359, 38803, 102973, 75266, 50290, 49603]
[2024-12-02 17:42:32.469400] user = 109523 Cloud 9/567
[2024-12-02 17:42:32.485171] user = 109523 Local 9/567
[2024-12-02 17:42:32.528714] user = 109523 Local+ 9/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:42:34.468950] user = 109523 MPDA- 9/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7318840579710144
Training on augumented user 112587 0/50 current_auc = 0.7318840579710144
User 112587 AUC after training: 0.7318840579710144
User 112587 does not improve AUC. Reverting changes.
Training on augumented user 78456 1/50 current_auc = 0.7318840579710144
User 78456 AUC after training: 0.7246376811594203
User 78456 does not improve AUC. Reverting changes.
Training on augumented user 82390 2/50 current_auc = 0.7318840579710144
User 82390 AUC after training: 0.7318840579710144
User 82390 does not improve AUC. Reverting changes.
Training on augumented user 108415 3/50 current_auc = 0.7318840579710144
User 108415 AUC after training: 0.7318840579710144
User 108415 does not improve AUC. Reverting changes.
Training on augumented user 108531 4/50 current_auc = 0.7318840579710144
User 108531 AUC after training: 0.7318840579710144
User 108531 does not improve AUC. Reverting changes.
Training on augumented user 84601 5/50 current_auc = 0.7318840579710144
User 84601 AUC after training: 0.7318840579710144
User 84601 does not improve AUC. Reverting changes.
Training on augumented user 20470 6/50 current_auc = 0.7318840579710144
User 20470 AUC after training: 0.7318840579710144
User 20470 does not improve AUC. Reverting changes.
Training on augumented user 128540 7/50 current_auc = 0.7318840579710144
User 128540 AUC after training: 0.7246376811594203
User 128540 does not improve AUC. Reverting changes.
Training on augumented user 58144 8/50 current_auc = 0.7318840579710144
User 58144 AUC after training: 0.7246376811594203
User 58144 does not improve AUC. Reverting changes.
Training on augumented user 79301 9/50 current_auc = 0.7318840579710144
User 79301 AUC after training: 0.7318840579710144
User 79301 does not improve AUC. Reverting changes.
Training on augumented user 113562 10/50 current_auc = 0.7318840579710144
User 113562 AUC after training: 0.7318840579710144
User 113562 does not improve AUC. Reverting changes.
Training on augumented user 82861 11/50 current_auc = 0.7318840579710144
User 82861 AUC after training: 0.7246376811594203
User 82861 does not improve AUC. Reverting changes.
Training on augumented user 59718 12/50 current_auc = 0.7318840579710144
User 59718 AUC after training: 0.7318840579710144
User 59718 does not improve AUC. Reverting changes.
Training on augumented user 102634 13/50 current_auc = 0.7318840579710144
User 102634 AUC after training: 0.7318840579710144
User 102634 does not improve AUC. Reverting changes.
Training on augumented user 16769 14/50 current_auc = 0.7318840579710144
User 16769 AUC after training: 0.7318840579710144
User 16769 does not improve AUC. Reverting changes.
Training on augumented user 71936 15/50 current_auc = 0.7318840579710144
User 71936 AUC after training: 0.7318840579710144
User 71936 does not improve AUC. Reverting changes.
Training on augumented user 100400 16/50 current_auc = 0.7318840579710144
User 100400 AUC after training: 0.7318840579710144
User 100400 does not improve AUC. Reverting changes.
Training on augumented user 125247 17/50 current_auc = 0.7318840579710144
User 125247 AUC after training: 0.7246376811594203
User 125247 does not improve AUC. Reverting changes.
Training on augumented user 42830 18/50 current_auc = 0.7318840579710144
User 42830 AUC after training: 0.7318840579710144
User 42830 does not improve AUC. Reverting changes.
Training on augumented user 113070 19/50 current_auc = 0.7318840579710144
User 113070 AUC after training: 0.7246376811594203
User 113070 does not improve AUC. Reverting changes.
Training on augumented user 94444 20/50 current_auc = 0.7318840579710144
User 94444 AUC after training: 0.7318840579710144
User 94444 does not improve AUC. Reverting changes.
Training on augumented user 61716 21/50 current_auc = 0.7318840579710144
User 61716 AUC after training: 0.717391304347826
User 61716 does not improve AUC. Reverting changes.
Training on augumented user 74877 22/50 current_auc = 0.7318840579710144
User 74877 AUC after training: 0.7318840579710144
User 74877 does not improve AUC. Reverting changes.
Training on augumented user 48021 23/50 current_auc = 0.7318840579710144
User 48021 AUC after training: 0.7246376811594203
User 48021 does not improve AUC. Reverting changes.
Training on augumented user 94521 24/50 current_auc = 0.7318840579710144
User 94521 AUC after training: 0.7246376811594203
User 94521 does not improve AUC. Reverting changes.
Training on augumented user 121038 25/50 current_auc = 0.7318840579710144
User 121038 AUC after training: 0.7318840579710144
User 121038 does not improve AUC. Reverting changes.
Training on augumented user 41393 26/50 current_auc = 0.7318840579710144
User 41393 AUC after training: 0.7318840579710144
User 41393 does not improve AUC. Reverting changes.
Training on augumented user 18537 27/50 current_auc = 0.7318840579710144
User 18537 AUC after training: 0.7318840579710144
User 18537 does not improve AUC. Reverting changes.
Training on augumented user 86299 28/50 current_auc = 0.7318840579710144
User 86299 AUC after training: 0.7318840579710144
User 86299 does not improve AUC. Reverting changes.
Training on augumented user 78954 29/50 current_auc = 0.7318840579710144
User 78954 AUC after training: 0.7246376811594203
User 78954 does not improve AUC. Reverting changes.
Training on augumented user 897 30/50 current_auc = 0.7318840579710144
User 897 AUC after training: 0.7246376811594203
User 897 does not improve AUC. Reverting changes.
Training on augumented user 51365 31/50 current_auc = 0.7318840579710144
User 51365 AUC after training: 0.717391304347826
User 51365 does not improve AUC. Reverting changes.
Training on augumented user 87600 32/50 current_auc = 0.7318840579710144
User 87600 AUC after training: 0.7318840579710144
User 87600 does not improve AUC. Reverting changes.
Training on augumented user 120568 33/50 current_auc = 0.7318840579710144
User 120568 AUC after training: 0.7246376811594203
User 120568 does not improve AUC. Reverting changes.
Training on augumented user 62758 34/50 current_auc = 0.7318840579710144
User 62758 AUC after training: 0.7318840579710144
User 62758 does not improve AUC. Reverting changes.
Training on augumented user 130577 35/50 current_auc = 0.7318840579710144
User 130577 AUC after training: 0.717391304347826
User 130577 does not improve AUC. Reverting changes.
Training on augumented user 49952 36/50 current_auc = 0.7318840579710144
User 49952 AUC after training: 0.7246376811594203
User 49952 does not improve AUC. Reverting changes.
Training on augumented user 123314 37/50 current_auc = 0.7318840579710144
User 123314 AUC after training: 0.7246376811594203
User 123314 does not improve AUC. Reverting changes.
Training on augumented user 51668 38/50 current_auc = 0.7318840579710144
User 51668 AUC after training: 0.7318840579710144
User 51668 does not improve AUC. Reverting changes.
Training on augumented user 42453 39/50 current_auc = 0.7318840579710144
User 42453 AUC after training: 0.7246376811594203
User 42453 does not improve AUC. Reverting changes.
Training on augumented user 37076 40/50 current_auc = 0.7318840579710144
User 37076 AUC after training: 0.7246376811594203
User 37076 does not improve AUC. Reverting changes.
Training on augumented user 51549 41/50 current_auc = 0.7318840579710144
User 51549 AUC after training: 0.7318840579710144
User 51549 does not improve AUC. Reverting changes.
Training on augumented user 55615 42/50 current_auc = 0.7318840579710144
User 55615 AUC after training: 0.7318840579710144
User 55615 does not improve AUC. Reverting changes.
Training on augumented user 41413 43/50 current_auc = 0.7318840579710144
User 41413 AUC after training: 0.7318840579710144
User 41413 does not improve AUC. Reverting changes.
Training on augumented user 131359 44/50 current_auc = 0.7318840579710144
User 131359 AUC after training: 0.7246376811594203
User 131359 does not improve AUC. Reverting changes.
Training on augumented user 38803 45/50 current_auc = 0.7318840579710144
User 38803 AUC after training: 0.7318840579710144
User 38803 does not improve AUC. Reverting changes.
Training on augumented user 102973 46/50 current_auc = 0.7318840579710144
User 102973 AUC after training: 0.7246376811594203
User 102973 does not improve AUC. Reverting changes.
Training on augumented user 75266 47/50 current_auc = 0.7318840579710144
User 75266 AUC after training: 0.7318840579710144
User 75266 does not improve AUC. Reverting changes.
Training on augumented user 50290 48/50 current_auc = 0.7318840579710144
User 50290 AUC after training: 0.717391304347826
User 50290 does not improve AUC. Reverting changes.
Training on augumented user 49603 49/50 current_auc = 0.7318840579710144
User 49603 AUC after training: 0.7246376811594203
User 49603 does not improve AUC. Reverting changes.
[2024-12-02 17:43:07.803453] start test user 109550 10/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:43:08.410473] start test user 109550 10/567 recall augumented users by random, augumented_users = [127295, 13453, 58307, 137523, 46883, 37867, 137217, 58972, 21154, 36985, 88207, 86685, 60552, 71988, 8900, 7460, 132135, 38019, 36967, 113886, 137989, 74190, 110598, 23113, 118423, 121347, 18626, 132785, 128543, 50351, 38868, 115277, 23104, 102952, 55601, 6086, 38346, 70659, 80173, 100400, 52737, 100648, 93457, 5261, 1407, 118874, 17962, 16248, 22564, 22635]
[2024-12-02 17:43:08.425978] user = 109550 Cloud 10/567
[2024-12-02 17:43:08.448523] user = 109550 Local 10/567
[2024-12-02 17:43:08.535964] user = 109550 Local+ 10/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:43:10.520545] user = 109550 MPDA- 10/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7877658748641515
Training on augumented user 127295 0/50 current_auc = 0.7877658748641515
User 127295 AUC after training: 0.7879211302592765
User 127295 improves AUC. Keeping the model.
Training on augumented user 13453 1/50 current_auc = 0.7879211302592765
User 13453 AUC after training: 0.7877658748641515
User 13453 does not improve AUC. Reverting changes.
Training on augumented user 58307 2/50 current_auc = 0.7879211302592765
User 58307 AUC after training: 0.7883868964446515
User 58307 improves AUC. Keeping the model.
Training on augumented user 137523 3/50 current_auc = 0.7883868964446515
User 137523 AUC after training: 0.7885421518397765
User 137523 improves AUC. Keeping the model.
Training on augumented user 46883 4/50 current_auc = 0.7885421518397765
User 46883 AUC after training: 0.7883868964446515
User 46883 does not improve AUC. Reverting changes.
Training on augumented user 37867 5/50 current_auc = 0.7885421518397765
User 37867 AUC after training: 0.7876106194690266
User 37867 does not improve AUC. Reverting changes.
Training on augumented user 137217 6/50 current_auc = 0.7885421518397765
User 137217 AUC after training: 0.7883868964446514
User 137217 does not improve AUC. Reverting changes.
Training on augumented user 58972 7/50 current_auc = 0.7885421518397765
User 58972 AUC after training: 0.7886974072349014
User 58972 improves AUC. Keeping the model.
Training on augumented user 21154 8/50 current_auc = 0.7886974072349014
User 21154 AUC after training: 0.7890079180251514
User 21154 improves AUC. Keeping the model.
Training on augumented user 36985 9/50 current_auc = 0.7890079180251514
User 36985 AUC after training: 0.7886974072349013
User 36985 does not improve AUC. Reverting changes.
Training on augumented user 88207 10/50 current_auc = 0.7890079180251514
User 88207 AUC after training: 0.7891631734202763
User 88207 improves AUC. Keeping the model.
Training on augumented user 86685 11/50 current_auc = 0.7891631734202763
User 86685 AUC after training: 0.7883868964446514
User 86685 does not improve AUC. Reverting changes.
Training on augumented user 60552 12/50 current_auc = 0.7891631734202763
User 60552 AUC after training: 0.7882316410495264
User 60552 does not improve AUC. Reverting changes.
Training on augumented user 71988 13/50 current_auc = 0.7891631734202763
User 71988 AUC after training: 0.7883868964446514
User 71988 does not improve AUC. Reverting changes.
Training on augumented user 8900 14/50 current_auc = 0.7891631734202763
User 8900 AUC after training: 0.7879211302592765
User 8900 does not improve AUC. Reverting changes.
Training on augumented user 7460 15/50 current_auc = 0.7891631734202763
User 7460 AUC after training: 0.7890079180251514
User 7460 does not improve AUC. Reverting changes.
Training on augumented user 132135 16/50 current_auc = 0.7891631734202763
User 132135 AUC after training: 0.7890079180251515
User 132135 does not improve AUC. Reverting changes.
Training on augumented user 38019 17/50 current_auc = 0.7891631734202763
User 38019 AUC after training: 0.7890079180251515
User 38019 does not improve AUC. Reverting changes.
Training on augumented user 36967 18/50 current_auc = 0.7891631734202763
User 36967 AUC after training: 0.7891631734202763
User 36967 does not improve AUC. Reverting changes.
Training on augumented user 113886 19/50 current_auc = 0.7891631734202763
User 113886 AUC after training: 0.7886974072349014
User 113886 does not improve AUC. Reverting changes.
Training on augumented user 137989 20/50 current_auc = 0.7891631734202763
User 137989 AUC after training: 0.7888526626300263
User 137989 does not improve AUC. Reverting changes.
Training on augumented user 74190 21/50 current_auc = 0.7891631734202763
User 74190 AUC after training: 0.7893184288154013
User 74190 improves AUC. Keeping the model.
Training on augumented user 110598 22/50 current_auc = 0.7893184288154013
User 110598 AUC after training: 0.7890079180251514
User 110598 does not improve AUC. Reverting changes.
Training on augumented user 23113 23/50 current_auc = 0.7893184288154013
User 23113 AUC after training: 0.7891631734202764
User 23113 does not improve AUC. Reverting changes.
Training on augumented user 118423 24/50 current_auc = 0.7893184288154013
User 118423 AUC after training: 0.7897841950007763
User 118423 improves AUC. Keeping the model.
Training on augumented user 121347 25/50 current_auc = 0.7897841950007763
User 121347 AUC after training: 0.7904052165812762
User 121347 improves AUC. Keeping the model.
Training on augumented user 18626 26/50 current_auc = 0.7904052165812762
User 18626 AUC after training: 0.7891631734202763
User 18626 does not improve AUC. Reverting changes.
Training on augumented user 132785 27/50 current_auc = 0.7904052165812762
User 132785 AUC after training: 0.7899394503959013
User 132785 does not improve AUC. Reverting changes.
Training on augumented user 128543 28/50 current_auc = 0.7904052165812762
User 128543 AUC after training: 0.7904052165812762
User 128543 does not improve AUC. Reverting changes.
Training on augumented user 50351 29/50 current_auc = 0.7904052165812762
User 50351 AUC after training: 0.7891631734202763
User 50351 does not improve AUC. Reverting changes.
Training on augumented user 38868 30/50 current_auc = 0.7904052165812762
User 38868 AUC after training: 0.7880763856544015
User 38868 does not improve AUC. Reverting changes.
Training on augumented user 115277 31/50 current_auc = 0.7904052165812762
User 115277 AUC after training: 0.7900947057910263
User 115277 does not improve AUC. Reverting changes.
Training on augumented user 23104 32/50 current_auc = 0.7904052165812762
User 23104 AUC after training: 0.7900947057910263
User 23104 does not improve AUC. Reverting changes.
Training on augumented user 102952 33/50 current_auc = 0.7904052165812762
User 102952 AUC after training: 0.7899394503959012
User 102952 does not improve AUC. Reverting changes.
Training on augumented user 55601 34/50 current_auc = 0.7904052165812762
User 55601 AUC after training: 0.7896289396056514
User 55601 does not improve AUC. Reverting changes.
Training on augumented user 6086 35/50 current_auc = 0.7904052165812762
User 6086 AUC after training: 0.7896289396056513
User 6086 does not improve AUC. Reverting changes.
Training on augumented user 38346 36/50 current_auc = 0.7904052165812762
User 38346 AUC after training: 0.7879211302592765
User 38346 does not improve AUC. Reverting changes.
Training on augumented user 70659 37/50 current_auc = 0.7904052165812762
User 70659 AUC after training: 0.7896289396056514
User 70659 does not improve AUC. Reverting changes.
Training on augumented user 80173 38/50 current_auc = 0.7904052165812762
User 80173 AUC after training: 0.7897841950007762
User 80173 does not improve AUC. Reverting changes.
Training on augumented user 100400 39/50 current_auc = 0.7904052165812762
User 100400 AUC after training: 0.7900947057910263
User 100400 does not improve AUC. Reverting changes.
Training on augumented user 52737 40/50 current_auc = 0.7904052165812762
User 52737 AUC after training: 0.7899394503959013
User 52737 does not improve AUC. Reverting changes.
Training on augumented user 100648 41/50 current_auc = 0.7904052165812762
User 100648 AUC after training: 0.7899394503959011
User 100648 does not improve AUC. Reverting changes.
Training on augumented user 93457 42/50 current_auc = 0.7904052165812762
User 93457 AUC after training: 0.7900947057910263
User 93457 does not improve AUC. Reverting changes.
Training on augumented user 5261 43/50 current_auc = 0.7904052165812762
User 5261 AUC after training: 0.7897841950007763
User 5261 does not improve AUC. Reverting changes.
Training on augumented user 1407 44/50 current_auc = 0.7904052165812762
User 1407 AUC after training: 0.7902499611861512
User 1407 does not improve AUC. Reverting changes.
Training on augumented user 118874 45/50 current_auc = 0.7904052165812762
User 118874 AUC after training: 0.7896289396056514
User 118874 does not improve AUC. Reverting changes.
Training on augumented user 17962 46/50 current_auc = 0.7904052165812762
User 17962 AUC after training: 0.7896289396056513
User 17962 does not improve AUC. Reverting changes.
Training on augumented user 16248 47/50 current_auc = 0.7904052165812762
User 16248 AUC after training: 0.7899394503959013
User 16248 does not improve AUC. Reverting changes.
Training on augumented user 22564 48/50 current_auc = 0.7904052165812762
User 22564 AUC after training: 0.7900947057910263
User 22564 does not improve AUC. Reverting changes.
Training on augumented user 22635 49/50 current_auc = 0.7904052165812762
User 22635 AUC after training: 0.7907157273715262
User 22635 improves AUC. Keeping the model.
[2024-12-02 17:43:42.968666] start test user 109564 11/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:43:43.730876] start test user 109564 11/567 recall augumented users by random, augumented_users = [12222, 99142, 49017, 38562, 107757, 119531, 3522, 17115, 24404, 104858, 9964, 68073, 19679, 41755, 90851, 81927, 50736, 122900, 112888, 94357, 109916, 110027, 108014, 123016, 3895, 47097, 101629, 134824, 46453, 57414, 136712, 134177, 93622, 9687, 37348, 43396, 128193, 8927, 18957, 21294, 101193, 107681, 115137, 90992, 135518, 55627, 119901, 44110, 3674, 28817]
[2024-12-02 17:43:43.747896] user = 109564 Cloud 11/567
[2024-12-02 17:43:43.762871] user = 109564 Local 11/567
[2024-12-02 17:43:43.787009] user = 109564 Local+ 11/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:43:46.571597] user = 109564 MPDA- 11/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6177884615384616
Training on augumented user 12222 0/50 current_auc = 0.6177884615384616
User 12222 AUC after training: 0.6201923076923077
User 12222 improves AUC. Keeping the model.
Training on augumented user 99142 1/50 current_auc = 0.6201923076923077
User 99142 AUC after training: 0.6201923076923077
User 99142 does not improve AUC. Reverting changes.
Training on augumented user 49017 2/50 current_auc = 0.6201923076923077
User 49017 AUC after training: 0.6225961538461539
User 49017 improves AUC. Keeping the model.
Training on augumented user 38562 3/50 current_auc = 0.6225961538461539
User 38562 AUC after training: 0.6105769230769231
User 38562 does not improve AUC. Reverting changes.
Training on augumented user 107757 4/50 current_auc = 0.6225961538461539
User 107757 AUC after training: 0.6105769230769231
User 107757 does not improve AUC. Reverting changes.
Training on augumented user 119531 5/50 current_auc = 0.6225961538461539
User 119531 AUC after training: 0.625
User 119531 improves AUC. Keeping the model.
Training on augumented user 3522 6/50 current_auc = 0.625
User 3522 AUC after training: 0.6225961538461539
User 3522 does not improve AUC. Reverting changes.
Training on augumented user 17115 7/50 current_auc = 0.625
User 17115 AUC after training: 0.625
User 17115 does not improve AUC. Reverting changes.
Training on augumented user 24404 8/50 current_auc = 0.625
User 24404 AUC after training: 0.625
User 24404 does not improve AUC. Reverting changes.
Training on augumented user 104858 9/50 current_auc = 0.625
User 104858 AUC after training: 0.6177884615384616
User 104858 does not improve AUC. Reverting changes.
Training on augumented user 9964 10/50 current_auc = 0.625
User 9964 AUC after training: 0.6201923076923077
User 9964 does not improve AUC. Reverting changes.
Training on augumented user 68073 11/50 current_auc = 0.625
User 68073 AUC after training: 0.6225961538461539
User 68073 does not improve AUC. Reverting changes.
Training on augumented user 19679 12/50 current_auc = 0.625
User 19679 AUC after training: 0.6274038461538461
User 19679 improves AUC. Keeping the model.
Training on augumented user 41755 13/50 current_auc = 0.6274038461538461
User 41755 AUC after training: 0.6274038461538461
User 41755 does not improve AUC. Reverting changes.
Training on augumented user 90851 14/50 current_auc = 0.6274038461538461
User 90851 AUC after training: 0.6298076923076923
User 90851 improves AUC. Keeping the model.
Training on augumented user 81927 15/50 current_auc = 0.6298076923076923
User 81927 AUC after training: 0.6298076923076923
User 81927 does not improve AUC. Reverting changes.
Training on augumented user 50736 16/50 current_auc = 0.6298076923076923
User 50736 AUC after training: 0.6322115384615384
User 50736 improves AUC. Keeping the model.
Training on augumented user 122900 17/50 current_auc = 0.6322115384615384
User 122900 AUC after training: 0.6274038461538461
User 122900 does not improve AUC. Reverting changes.
Training on augumented user 112888 18/50 current_auc = 0.6322115384615384
User 112888 AUC after training: 0.6225961538461539
User 112888 does not improve AUC. Reverting changes.
Training on augumented user 94357 19/50 current_auc = 0.6322115384615384
User 94357 AUC after training: 0.6274038461538461
User 94357 does not improve AUC. Reverting changes.
Training on augumented user 109916 20/50 current_auc = 0.6322115384615384
User 109916 AUC after training: 0.625
User 109916 does not improve AUC. Reverting changes.
Training on augumented user 110027 21/50 current_auc = 0.6322115384615384
User 110027 AUC after training: 0.6274038461538461
User 110027 does not improve AUC. Reverting changes.
Training on augumented user 108014 22/50 current_auc = 0.6322115384615384
User 108014 AUC after training: 0.625
User 108014 does not improve AUC. Reverting changes.
Training on augumented user 123016 23/50 current_auc = 0.6322115384615384
User 123016 AUC after training: 0.6274038461538461
User 123016 does not improve AUC. Reverting changes.
Training on augumented user 3895 24/50 current_auc = 0.6322115384615384
User 3895 AUC after training: 0.6201923076923077
User 3895 does not improve AUC. Reverting changes.
Training on augumented user 47097 25/50 current_auc = 0.6322115384615384
User 47097 AUC after training: 0.625
User 47097 does not improve AUC. Reverting changes.
Training on augumented user 101629 26/50 current_auc = 0.6322115384615384
User 101629 AUC after training: 0.625
User 101629 does not improve AUC. Reverting changes.
Training on augumented user 134824 27/50 current_auc = 0.6322115384615384
User 134824 AUC after training: 0.625
User 134824 does not improve AUC. Reverting changes.
Training on augumented user 46453 28/50 current_auc = 0.6322115384615384
User 46453 AUC after training: 0.6201923076923077
User 46453 does not improve AUC. Reverting changes.
Training on augumented user 57414 29/50 current_auc = 0.6322115384615384
User 57414 AUC after training: 0.625
User 57414 does not improve AUC. Reverting changes.
Training on augumented user 136712 30/50 current_auc = 0.6322115384615384
User 136712 AUC after training: 0.6274038461538461
User 136712 does not improve AUC. Reverting changes.
Training on augumented user 134177 31/50 current_auc = 0.6322115384615384
User 134177 AUC after training: 0.625
User 134177 does not improve AUC. Reverting changes.
Training on augumented user 93622 32/50 current_auc = 0.6322115384615384
User 93622 AUC after training: 0.6225961538461539
User 93622 does not improve AUC. Reverting changes.
Training on augumented user 9687 33/50 current_auc = 0.6322115384615384
User 9687 AUC after training: 0.6298076923076923
User 9687 does not improve AUC. Reverting changes.
Training on augumented user 37348 34/50 current_auc = 0.6322115384615384
User 37348 AUC after training: 0.6322115384615385
User 37348 improves AUC. Keeping the model.
Training on augumented user 43396 35/50 current_auc = 0.6322115384615385
User 43396 AUC after training: 0.6298076923076923
User 43396 does not improve AUC. Reverting changes.
Training on augumented user 128193 36/50 current_auc = 0.6322115384615385
User 128193 AUC after training: 0.6298076923076923
User 128193 does not improve AUC. Reverting changes.
Training on augumented user 8927 37/50 current_auc = 0.6322115384615385
User 8927 AUC after training: 0.6322115384615385
User 8927 does not improve AUC. Reverting changes.
Training on augumented user 18957 38/50 current_auc = 0.6322115384615385
User 18957 AUC after training: 0.6274038461538461
User 18957 does not improve AUC. Reverting changes.
Training on augumented user 21294 39/50 current_auc = 0.6322115384615385
User 21294 AUC after training: 0.6274038461538461
User 21294 does not improve AUC. Reverting changes.
Training on augumented user 101193 40/50 current_auc = 0.6322115384615385
User 101193 AUC after training: 0.6298076923076923
User 101193 does not improve AUC. Reverting changes.
Training on augumented user 107681 41/50 current_auc = 0.6322115384615385
User 107681 AUC after training: 0.6298076923076923
User 107681 does not improve AUC. Reverting changes.
Training on augumented user 115137 42/50 current_auc = 0.6322115384615385
User 115137 AUC after training: 0.6322115384615385
User 115137 does not improve AUC. Reverting changes.
Training on augumented user 90992 43/50 current_auc = 0.6322115384615385
User 90992 AUC after training: 0.6298076923076923
User 90992 does not improve AUC. Reverting changes.
Training on augumented user 135518 44/50 current_auc = 0.6322115384615385
User 135518 AUC after training: 0.625
User 135518 does not improve AUC. Reverting changes.
Training on augumented user 55627 45/50 current_auc = 0.6322115384615385
User 55627 AUC after training: 0.6298076923076923
User 55627 does not improve AUC. Reverting changes.
Training on augumented user 119901 46/50 current_auc = 0.6322115384615385
User 119901 AUC after training: 0.6274038461538461
User 119901 does not improve AUC. Reverting changes.
Training on augumented user 44110 47/50 current_auc = 0.6322115384615385
User 44110 AUC after training: 0.6298076923076923
User 44110 does not improve AUC. Reverting changes.
Training on augumented user 3674 48/50 current_auc = 0.6322115384615385
User 3674 AUC after training: 0.6274038461538461
User 3674 does not improve AUC. Reverting changes.
Training on augumented user 28817 49/50 current_auc = 0.6322115384615385
User 28817 AUC after training: 0.6298076923076923
User 28817 does not improve AUC. Reverting changes.
[2024-12-02 17:44:15.137751] start test user 109596 12/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:44:15.533421] start test user 109596 12/567 recall augumented users by random, augumented_users = [112366, 124950, 112240, 96178, 9298, 75522, 12652, 10567, 47492, 59632, 54778, 25698, 18282, 81214, 53572, 106639, 52967, 9894, 24250, 45188, 99183, 1939, 3936, 13546, 76488, 10685, 85273, 6867, 47073, 77352, 121075, 126930, 58509, 134531, 108737, 19488, 137906, 106018, 94537, 82638, 11121, 93356, 133319, 30593, 5041, 86261, 58507, 79398, 33439, 66508]
[2024-12-02 17:44:15.547615] user = 109596 Cloud 12/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:44:15.553422] user = 109596 Local 12/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:44:15.580092] user = 109596 Local+ 12/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:44:17.347106] user = 109596 MPDA- 12/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 112366 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112366 AUC after training: 0.5
User 112366 does not improve AUC. Reverting changes.
Training on augumented user 124950 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124950 AUC after training: 0.5
User 124950 does not improve AUC. Reverting changes.
Training on augumented user 112240 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112240 AUC after training: 0.5
User 112240 does not improve AUC. Reverting changes.
Training on augumented user 96178 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96178 AUC after training: 0.5
User 96178 does not improve AUC. Reverting changes.
Training on augumented user 9298 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9298 AUC after training: 0.5
User 9298 does not improve AUC. Reverting changes.
Training on augumented user 75522 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75522 AUC after training: 0.5
User 75522 does not improve AUC. Reverting changes.
Training on augumented user 12652 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12652 AUC after training: 0.5
User 12652 does not improve AUC. Reverting changes.
Training on augumented user 10567 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10567 AUC after training: 0.5
User 10567 does not improve AUC. Reverting changes.
Training on augumented user 47492 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47492 AUC after training: 0.5
User 47492 does not improve AUC. Reverting changes.
Training on augumented user 59632 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59632 AUC after training: 0.5
User 59632 does not improve AUC. Reverting changes.
Training on augumented user 54778 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54778 AUC after training: 0.5
User 54778 does not improve AUC. Reverting changes.
Training on augumented user 25698 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25698 AUC after training: 0.5
User 25698 does not improve AUC. Reverting changes.
Training on augumented user 18282 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18282 AUC after training: 0.5
User 18282 does not improve AUC. Reverting changes.
Training on augumented user 81214 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81214 AUC after training: 0.5
User 81214 does not improve AUC. Reverting changes.
Training on augumented user 53572 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53572 AUC after training: 0.5
User 53572 does not improve AUC. Reverting changes.
Training on augumented user 106639 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106639 AUC after training: 0.5
User 106639 does not improve AUC. Reverting changes.
Training on augumented user 52967 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 52967 AUC after training: 0.5
User 52967 does not improve AUC. Reverting changes.
Training on augumented user 9894 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9894 AUC after training: 0.5
User 9894 does not improve AUC. Reverting changes.
Training on augumented user 24250 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24250 AUC after training: 0.5
User 24250 does not improve AUC. Reverting changes.
Training on augumented user 45188 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45188 AUC after training: 0.5
User 45188 does not improve AUC. Reverting changes.
Training on augumented user 99183 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99183 AUC after training: 0.5
User 99183 does not improve AUC. Reverting changes.
Training on augumented user 1939 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1939 AUC after training: 0.5
User 1939 does not improve AUC. Reverting changes.
Training on augumented user 3936 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3936 AUC after training: 0.5
User 3936 does not improve AUC. Reverting changes.
Training on augumented user 13546 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13546 AUC after training: 0.5
User 13546 does not improve AUC. Reverting changes.
Training on augumented user 76488 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76488 AUC after training: 0.5
User 76488 does not improve AUC. Reverting changes.
Training on augumented user 10685 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10685 AUC after training: 0.5
User 10685 does not improve AUC. Reverting changes.
Training on augumented user 85273 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85273 AUC after training: 0.5
User 85273 does not improve AUC. Reverting changes.
Training on augumented user 6867 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6867 AUC after training: 0.5
User 6867 does not improve AUC. Reverting changes.
Training on augumented user 47073 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47073 AUC after training: 0.5
User 47073 does not improve AUC. Reverting changes.
Training on augumented user 77352 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77352 AUC after training: 0.5
User 77352 does not improve AUC. Reverting changes.
Training on augumented user 121075 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121075 AUC after training: 0.5
User 121075 does not improve AUC. Reverting changes.
Training on augumented user 126930 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126930 AUC after training: 0.5
User 126930 does not improve AUC. Reverting changes.
Training on augumented user 58509 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58509 AUC after training: 0.5
User 58509 does not improve AUC. Reverting changes.
Training on augumented user 134531 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134531 AUC after training: 0.5
User 134531 does not improve AUC. Reverting changes.
Training on augumented user 108737 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108737 AUC after training: 0.5
User 108737 does not improve AUC. Reverting changes.
Training on augumented user 19488 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19488 AUC after training: 0.5
User 19488 does not improve AUC. Reverting changes.
Training on augumented user 137906 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137906 AUC after training: 0.5
User 137906 does not improve AUC. Reverting changes.
Training on augumented user 106018 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106018 AUC after training: 0.5
User 106018 does not improve AUC. Reverting changes.
Training on augumented user 94537 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94537 AUC after training: 0.5
User 94537 does not improve AUC. Reverting changes.
Training on augumented user 82638 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82638 AUC after training: 0.5
User 82638 does not improve AUC. Reverting changes.
Training on augumented user 11121 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11121 AUC after training: 0.5
User 11121 does not improve AUC. Reverting changes.
Training on augumented user 93356 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93356 AUC after training: 0.5
User 93356 does not improve AUC. Reverting changes.
Training on augumented user 133319 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133319 AUC after training: 0.5
User 133319 does not improve AUC. Reverting changes.
Training on augumented user 30593 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30593 AUC after training: 0.5
User 30593 does not improve AUC. Reverting changes.
Training on augumented user 5041 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5041 AUC after training: 0.5
User 5041 does not improve AUC. Reverting changes.
Training on augumented user 86261 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86261 AUC after training: 0.5
User 86261 does not improve AUC. Reverting changes.
Training on augumented user 58507 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58507 AUC after training: 0.5
User 58507 does not improve AUC. Reverting changes.
Training on augumented user 79398 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79398 AUC after training: 0.5
User 79398 does not improve AUC. Reverting changes.
Training on augumented user 33439 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33439 AUC after training: 0.5
User 33439 does not improve AUC. Reverting changes.
Training on augumented user 66508 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66508 AUC after training: 0.5
User 66508 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:44:48.450024] start test user 109661 13/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:44:49.052670] start test user 109661 13/567 recall augumented users by random, augumented_users = [127823, 94592, 53681, 130742, 20839, 102584, 112892, 99451, 62625, 104359, 105153, 83228, 5774, 117500, 65523, 92993, 102758, 5743, 53051, 110796, 114998, 35564, 58249, 43005, 106773, 105224, 1567, 128406, 116933, 58615, 43283, 99320, 60842, 10527, 42086, 57844, 86375, 113469, 36105, 20972, 135910, 13196, 32591, 112673, 16984, 30577, 117177, 117942, 33405, 56957]
[2024-12-02 17:44:49.070116] user = 109661 Cloud 13/567
[2024-12-02 17:44:49.103461] user = 109661 Local 13/567
[2024-12-02 17:44:49.226521] user = 109661 Local+ 13/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:44:51.941568] user = 109661 MPDA- 13/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7311723602484472
Training on augumented user 127823 0/50 current_auc = 0.7311723602484472
User 127823 AUC after training: 0.7312208850931676
User 127823 improves AUC. Keeping the model.
Training on augumented user 94592 1/50 current_auc = 0.7312208850931676
User 94592 AUC after training: 0.7312208850931677
User 94592 improves AUC. Keeping the model.
Training on augumented user 53681 2/50 current_auc = 0.7312208850931677
User 53681 AUC after training: 0.7308326863354038
User 53681 does not improve AUC. Reverting changes.
Training on augumented user 130742 3/50 current_auc = 0.7312208850931677
User 130742 AUC after training: 0.7320458074534162
User 130742 improves AUC. Keeping the model.
Training on augumented user 20839 4/50 current_auc = 0.7320458074534162
User 20839 AUC after training: 0.7322399068322981
User 20839 improves AUC. Keeping the model.
Training on augumented user 102584 5/50 current_auc = 0.7322399068322981
User 102584 AUC after training: 0.7321428571428571
User 102584 does not improve AUC. Reverting changes.
Training on augumented user 112892 6/50 current_auc = 0.7322399068322981
User 112892 AUC after training: 0.7321428571428571
User 112892 does not improve AUC. Reverting changes.
Training on augumented user 99451 7/50 current_auc = 0.7322399068322981
User 99451 AUC after training: 0.731948757763975
User 99451 does not improve AUC. Reverting changes.
Training on augumented user 62625 8/50 current_auc = 0.7322399068322981
User 62625 AUC after training: 0.7321428571428571
User 62625 does not improve AUC. Reverting changes.
Training on augumented user 104359 9/50 current_auc = 0.7322399068322981
User 104359 AUC after training: 0.7322399068322981
User 104359 does not improve AUC. Reverting changes.
Training on augumented user 105153 10/50 current_auc = 0.7322399068322981
User 105153 AUC after training: 0.7321428571428572
User 105153 does not improve AUC. Reverting changes.
Training on augumented user 83228 11/50 current_auc = 0.7322399068322981
User 83228 AUC after training: 0.7322399068322981
User 83228 does not improve AUC. Reverting changes.
Training on augumented user 5774 12/50 current_auc = 0.7322399068322981
User 5774 AUC after training: 0.7319972826086957
User 5774 does not improve AUC. Reverting changes.
Training on augumented user 117500 13/50 current_auc = 0.7322399068322981
User 117500 AUC after training: 0.7315605590062112
User 117500 does not improve AUC. Reverting changes.
Training on augumented user 65523 14/50 current_auc = 0.7322399068322981
User 65523 AUC after training: 0.7317546583850932
User 65523 does not improve AUC. Reverting changes.
Training on augumented user 92993 15/50 current_auc = 0.7322399068322981
User 92993 AUC after training: 0.7321428571428571
User 92993 does not improve AUC. Reverting changes.
Training on augumented user 102758 16/50 current_auc = 0.7322399068322981
User 102758 AUC after training: 0.7321428571428571
User 102758 does not improve AUC. Reverting changes.
Training on augumented user 5743 17/50 current_auc = 0.7322399068322981
User 5743 AUC after training: 0.7313179347826086
User 5743 does not improve AUC. Reverting changes.
Training on augumented user 53051 18/50 current_auc = 0.7322399068322981
User 53051 AUC after training: 0.7316090838509317
User 53051 does not improve AUC. Reverting changes.
Training on augumented user 110796 19/50 current_auc = 0.7322399068322981
User 110796 AUC after training: 0.7322399068322981
User 110796 does not improve AUC. Reverting changes.
Training on augumented user 114998 20/50 current_auc = 0.7322399068322981
User 114998 AUC after training: 0.7320458074534161
User 114998 does not improve AUC. Reverting changes.
Training on augumented user 35564 21/50 current_auc = 0.7322399068322981
User 35564 AUC after training: 0.7318517080745341
User 35564 does not improve AUC. Reverting changes.
Training on augumented user 58249 22/50 current_auc = 0.7322399068322981
User 58249 AUC after training: 0.7324340062111802
User 58249 improves AUC. Keeping the model.
Training on augumented user 43005 23/50 current_auc = 0.7324340062111802
User 43005 AUC after training: 0.7315120341614907
User 43005 does not improve AUC. Reverting changes.
Training on augumented user 106773 24/50 current_auc = 0.7324340062111802
User 106773 AUC after training: 0.7320458074534161
User 106773 does not improve AUC. Reverting changes.
Training on augumented user 105224 25/50 current_auc = 0.7324340062111802
User 105224 AUC after training: 0.7317546583850932
User 105224 does not improve AUC. Reverting changes.
Training on augumented user 1567 26/50 current_auc = 0.7324340062111802
User 1567 AUC after training: 0.7308812111801243
User 1567 does not improve AUC. Reverting changes.
Training on augumented user 128406 27/50 current_auc = 0.7324340062111802
User 128406 AUC after training: 0.7313179347826088
User 128406 does not improve AUC. Reverting changes.
Training on augumented user 116933 28/50 current_auc = 0.7324340062111802
User 116933 AUC after training: 0.7320943322981367
User 116933 does not improve AUC. Reverting changes.
Training on augumented user 58615 29/50 current_auc = 0.7324340062111802
User 58615 AUC after training: 0.7321428571428571
User 58615 does not improve AUC. Reverting changes.
Training on augumented user 43283 30/50 current_auc = 0.7324340062111802
User 43283 AUC after training: 0.7322399068322981
User 43283 does not improve AUC. Reverting changes.
Training on augumented user 99320 31/50 current_auc = 0.7324340062111802
User 99320 AUC after training: 0.7318517080745341
User 99320 does not improve AUC. Reverting changes.
Training on augumented user 60842 32/50 current_auc = 0.7324340062111802
User 60842 AUC after training: 0.7317546583850932
User 60842 does not improve AUC. Reverting changes.
Training on augumented user 10527 33/50 current_auc = 0.7324340062111802
User 10527 AUC after training: 0.7320943322981367
User 10527 does not improve AUC. Reverting changes.
Training on augumented user 42086 34/50 current_auc = 0.7324340062111802
User 42086 AUC after training: 0.7308812111801243
User 42086 does not improve AUC. Reverting changes.
Training on augumented user 57844 35/50 current_auc = 0.7324340062111802
User 57844 AUC after training: 0.7323369565217391
User 57844 does not improve AUC. Reverting changes.
Training on augumented user 86375 36/50 current_auc = 0.7324340062111802
User 86375 AUC after training: 0.7321428571428571
User 86375 does not improve AUC. Reverting changes.
Training on augumented user 113469 37/50 current_auc = 0.7324340062111802
User 113469 AUC after training: 0.7322399068322981
User 113469 does not improve AUC. Reverting changes.
Training on augumented user 36105 38/50 current_auc = 0.7324340062111802
User 36105 AUC after training: 0.7321913819875776
User 36105 does not improve AUC. Reverting changes.
Training on augumented user 20972 39/50 current_auc = 0.7324340062111802
User 20972 AUC after training: 0.7318517080745341
User 20972 does not improve AUC. Reverting changes.
Training on augumented user 135910 40/50 current_auc = 0.7324340062111802
User 135910 AUC after training: 0.7322399068322982
User 135910 does not improve AUC. Reverting changes.
Training on augumented user 13196 41/50 current_auc = 0.7324340062111802
User 13196 AUC after training: 0.7317546583850932
User 13196 does not improve AUC. Reverting changes.
Training on augumented user 32591 42/50 current_auc = 0.7324340062111802
User 32591 AUC after training: 0.7323369565217391
User 32591 does not improve AUC. Reverting changes.
Training on augumented user 112673 43/50 current_auc = 0.7324340062111802
User 112673 AUC after training: 0.7323369565217391
User 112673 does not improve AUC. Reverting changes.
Training on augumented user 16984 44/50 current_auc = 0.7324340062111802
User 16984 AUC after training: 0.7324825310559007
User 16984 improves AUC. Keeping the model.
Training on augumented user 30577 45/50 current_auc = 0.7324825310559007
User 30577 AUC after training: 0.7321913819875777
User 30577 does not improve AUC. Reverting changes.
Training on augumented user 117177 46/50 current_auc = 0.7324825310559007
User 117177 AUC after training: 0.7326281055900621
User 117177 improves AUC. Keeping the model.
Training on augumented user 117942 47/50 current_auc = 0.7326281055900621
User 117942 AUC after training: 0.7324340062111802
User 117942 does not improve AUC. Reverting changes.
Training on augumented user 33405 48/50 current_auc = 0.7326281055900621
User 33405 AUC after training: 0.7322399068322981
User 33405 does not improve AUC. Reverting changes.
Training on augumented user 56957 49/50 current_auc = 0.7326281055900621
User 56957 AUC after training: 0.7327251552795032
User 56957 improves AUC. Keeping the model.
[2024-12-02 17:45:23.313347] start test user 109727 14/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:45:23.935197] start test user 109727 14/567 recall augumented users by random, augumented_users = [19499, 12106, 76193, 101551, 22382, 102957, 93633, 3862, 121712, 987, 51478, 6526, 22533, 88442, 9402, 101027, 28980, 39837, 51063, 127394, 19937, 18384, 128427, 50999, 36443, 122527, 47478, 25579, 38227, 71919, 78205, 90887, 66179, 106797, 91602, 16622, 55921, 64400, 86407, 251, 113694, 1638, 82964, 44833, 79533, 25863, 10192, 99177, 61090, 84205]
[2024-12-02 17:45:23.948970] user = 109727 Cloud 14/567
[2024-12-02 17:45:23.958415] user = 109727 Local 14/567
[2024-12-02 17:45:24.018664] user = 109727 Local+ 14/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:45:26.740456] user = 109727 MPDA- 14/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.375
Training on augumented user 19499 0/50 current_auc = 0.375
User 19499 AUC after training: 0.375
User 19499 does not improve AUC. Reverting changes.
Training on augumented user 12106 1/50 current_auc = 0.375
User 12106 AUC after training: 0.375
User 12106 does not improve AUC. Reverting changes.
Training on augumented user 76193 2/50 current_auc = 0.375
User 76193 AUC after training: 0.375
User 76193 does not improve AUC. Reverting changes.
Training on augumented user 101551 3/50 current_auc = 0.375
User 101551 AUC after training: 0.375
User 101551 does not improve AUC. Reverting changes.
Training on augumented user 22382 4/50 current_auc = 0.375
User 22382 AUC after training: 0.375
User 22382 does not improve AUC. Reverting changes.
Training on augumented user 102957 5/50 current_auc = 0.375
User 102957 AUC after training: 0.375
User 102957 does not improve AUC. Reverting changes.
Training on augumented user 93633 6/50 current_auc = 0.375
User 93633 AUC after training: 0.375
User 93633 does not improve AUC. Reverting changes.
Training on augumented user 3862 7/50 current_auc = 0.375
User 3862 AUC after training: 0.375
User 3862 does not improve AUC. Reverting changes.
Training on augumented user 121712 8/50 current_auc = 0.375
User 121712 AUC after training: 0.375
User 121712 does not improve AUC. Reverting changes.
Training on augumented user 987 9/50 current_auc = 0.375
User 987 AUC after training: 0.375
User 987 does not improve AUC. Reverting changes.
Training on augumented user 51478 10/50 current_auc = 0.375
User 51478 AUC after training: 0.375
User 51478 does not improve AUC. Reverting changes.
Training on augumented user 6526 11/50 current_auc = 0.375
User 6526 AUC after training: 0.375
User 6526 does not improve AUC. Reverting changes.
Training on augumented user 22533 12/50 current_auc = 0.375
User 22533 AUC after training: 0.375
User 22533 does not improve AUC. Reverting changes.
Training on augumented user 88442 13/50 current_auc = 0.375
User 88442 AUC after training: 0.375
User 88442 does not improve AUC. Reverting changes.
Training on augumented user 9402 14/50 current_auc = 0.375
User 9402 AUC after training: 0.375
User 9402 does not improve AUC. Reverting changes.
Training on augumented user 101027 15/50 current_auc = 0.375
User 101027 AUC after training: 0.375
User 101027 does not improve AUC. Reverting changes.
Training on augumented user 28980 16/50 current_auc = 0.375
User 28980 AUC after training: 0.375
User 28980 does not improve AUC. Reverting changes.
Training on augumented user 39837 17/50 current_auc = 0.375
User 39837 AUC after training: 0.375
User 39837 does not improve AUC. Reverting changes.
Training on augumented user 51063 18/50 current_auc = 0.375
User 51063 AUC after training: 0.375
User 51063 does not improve AUC. Reverting changes.
Training on augumented user 127394 19/50 current_auc = 0.375
User 127394 AUC after training: 0.375
User 127394 does not improve AUC. Reverting changes.
Training on augumented user 19937 20/50 current_auc = 0.375
User 19937 AUC after training: 0.375
User 19937 does not improve AUC. Reverting changes.
Training on augumented user 18384 21/50 current_auc = 0.375
User 18384 AUC after training: 0.375
User 18384 does not improve AUC. Reverting changes.
Training on augumented user 128427 22/50 current_auc = 0.375
User 128427 AUC after training: 0.375
User 128427 does not improve AUC. Reverting changes.
Training on augumented user 50999 23/50 current_auc = 0.375
User 50999 AUC after training: 0.375
User 50999 does not improve AUC. Reverting changes.
Training on augumented user 36443 24/50 current_auc = 0.375
User 36443 AUC after training: 0.375
User 36443 does not improve AUC. Reverting changes.
Training on augumented user 122527 25/50 current_auc = 0.375
User 122527 AUC after training: 0.375
User 122527 does not improve AUC. Reverting changes.
Training on augumented user 47478 26/50 current_auc = 0.375
User 47478 AUC after training: 0.375
User 47478 does not improve AUC. Reverting changes.
Training on augumented user 25579 27/50 current_auc = 0.375
User 25579 AUC after training: 0.375
User 25579 does not improve AUC. Reverting changes.
Training on augumented user 38227 28/50 current_auc = 0.375
User 38227 AUC after training: 0.375
User 38227 does not improve AUC. Reverting changes.
Training on augumented user 71919 29/50 current_auc = 0.375
User 71919 AUC after training: 0.375
User 71919 does not improve AUC. Reverting changes.
Training on augumented user 78205 30/50 current_auc = 0.375
User 78205 AUC after training: 0.375
User 78205 does not improve AUC. Reverting changes.
Training on augumented user 90887 31/50 current_auc = 0.375
User 90887 AUC after training: 0.375
User 90887 does not improve AUC. Reverting changes.
Training on augumented user 66179 32/50 current_auc = 0.375
User 66179 AUC after training: 0.375
User 66179 does not improve AUC. Reverting changes.
Training on augumented user 106797 33/50 current_auc = 0.375
User 106797 AUC after training: 0.375
User 106797 does not improve AUC. Reverting changes.
Training on augumented user 91602 34/50 current_auc = 0.375
User 91602 AUC after training: 0.375
User 91602 does not improve AUC. Reverting changes.
Training on augumented user 16622 35/50 current_auc = 0.375
User 16622 AUC after training: 0.375
User 16622 does not improve AUC. Reverting changes.
Training on augumented user 55921 36/50 current_auc = 0.375
User 55921 AUC after training: 0.375
User 55921 does not improve AUC. Reverting changes.
Training on augumented user 64400 37/50 current_auc = 0.375
User 64400 AUC after training: 0.375
User 64400 does not improve AUC. Reverting changes.
Training on augumented user 86407 38/50 current_auc = 0.375
User 86407 AUC after training: 0.375
User 86407 does not improve AUC. Reverting changes.
Training on augumented user 251 39/50 current_auc = 0.375
User 251 AUC after training: 0.375
User 251 does not improve AUC. Reverting changes.
Training on augumented user 113694 40/50 current_auc = 0.375
User 113694 AUC after training: 0.375
User 113694 does not improve AUC. Reverting changes.
Training on augumented user 1638 41/50 current_auc = 0.375
User 1638 AUC after training: 0.375
User 1638 does not improve AUC. Reverting changes.
Training on augumented user 82964 42/50 current_auc = 0.375
User 82964 AUC after training: 0.375
User 82964 does not improve AUC. Reverting changes.
Training on augumented user 44833 43/50 current_auc = 0.375
User 44833 AUC after training: 0.375
User 44833 does not improve AUC. Reverting changes.
Training on augumented user 79533 44/50 current_auc = 0.375
User 79533 AUC after training: 0.375
User 79533 does not improve AUC. Reverting changes.
Training on augumented user 25863 45/50 current_auc = 0.375
User 25863 AUC after training: 0.375
User 25863 does not improve AUC. Reverting changes.
Training on augumented user 10192 46/50 current_auc = 0.375
User 10192 AUC after training: 0.375
User 10192 does not improve AUC. Reverting changes.
Training on augumented user 99177 47/50 current_auc = 0.375
User 99177 AUC after training: 0.375
User 99177 does not improve AUC. Reverting changes.
Training on augumented user 61090 48/50 current_auc = 0.375
User 61090 AUC after training: 0.375
User 61090 does not improve AUC. Reverting changes.
Training on augumented user 84205 49/50 current_auc = 0.375
User 84205 AUC after training: 0.375
User 84205 does not improve AUC. Reverting changes.
[2024-12-02 17:45:54.138427] start test user 109745 15/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:45:54.612960] start test user 109745 15/567 recall augumented users by random, augumented_users = [80536, 78283, 63851, 74060, 21111, 115634, 81966, 98696, 100671, 47568, 25462, 51040, 22829, 91070, 65056, 135910, 98380, 51749, 62825, 762, 75184, 130880, 101723, 64636, 77546, 59452, 118594, 77721, 55362, 50468, 117905, 122077, 158, 11024, 100571, 7418, 89105, 102767, 28867, 7945, 54217, 97502, 86299, 35436, 73373, 35723, 121802, 39931, 89836, 40628]
[2024-12-02 17:45:54.637232] user = 109745 Cloud 15/567
[2024-12-02 17:45:54.674866] user = 109745 Local 15/567
[2024-12-02 17:45:54.928426] user = 109745 Local+ 15/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:45:57.545795] user = 109745 MPDA- 15/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6601766513056835
Training on augumented user 80536 0/50 current_auc = 0.6601766513056835
User 80536 AUC after training: 0.6601766513056835
User 80536 does not improve AUC. Reverting changes.
Training on augumented user 78283 1/50 current_auc = 0.6601766513056835
User 78283 AUC after training: 0.6605990783410138
User 78283 improves AUC. Keeping the model.
Training on augumented user 63851 2/50 current_auc = 0.6605990783410138
User 63851 AUC after training: 0.66036866359447
User 63851 does not improve AUC. Reverting changes.
Training on augumented user 74060 3/50 current_auc = 0.6605990783410138
User 74060 AUC after training: 0.660867895545315
User 74060 improves AUC. Keeping the model.
Training on augumented user 21111 4/50 current_auc = 0.660867895545315
User 21111 AUC after training: 0.6609831029185868
User 21111 improves AUC. Keeping the model.
Training on augumented user 115634 5/50 current_auc = 0.6609831029185868
User 115634 AUC after training: 0.6608678955453148
User 115634 does not improve AUC. Reverting changes.
Training on augumented user 81966 6/50 current_auc = 0.6609831029185868
User 81966 AUC after training: 0.6609447004608295
User 81966 does not improve AUC. Reverting changes.
Training on augumented user 98696 7/50 current_auc = 0.6609831029185868
User 98696 AUC after training: 0.660099846390169
User 98696 does not improve AUC. Reverting changes.
Training on augumented user 100671 8/50 current_auc = 0.6609831029185868
User 100671 AUC after training: 0.6609062980030722
User 100671 does not improve AUC. Reverting changes.
Training on augumented user 47568 9/50 current_auc = 0.6609831029185868
User 47568 AUC after training: 0.6608294930875576
User 47568 does not improve AUC. Reverting changes.
Training on augumented user 25462 10/50 current_auc = 0.6609831029185868
User 25462 AUC after training: 0.660752688172043
User 25462 does not improve AUC. Reverting changes.
Training on augumented user 51040 11/50 current_auc = 0.6609831029185868
User 51040 AUC after training: 0.660867895545315
User 51040 does not improve AUC. Reverting changes.
Training on augumented user 22829 12/50 current_auc = 0.6609831029185868
User 22829 AUC after training: 0.6601382488479264
User 22829 does not improve AUC. Reverting changes.
Training on augumented user 91070 13/50 current_auc = 0.6609831029185868
User 91070 AUC after training: 0.6616743471582182
User 91070 improves AUC. Keeping the model.
Training on augumented user 65056 14/50 current_auc = 0.6616743471582182
User 65056 AUC after training: 0.6612519201228878
User 65056 does not improve AUC. Reverting changes.
Training on augumented user 135910 15/50 current_auc = 0.6616743471582182
User 135910 AUC after training: 0.6605990783410138
User 135910 does not improve AUC. Reverting changes.
Training on augumented user 98380 16/50 current_auc = 0.6616743471582182
User 98380 AUC after training: 0.6616743471582182
User 98380 does not improve AUC. Reverting changes.
Training on augumented user 51749 17/50 current_auc = 0.6616743471582182
User 51749 AUC after training: 0.6617511520737326
User 51749 improves AUC. Keeping the model.
Training on augumented user 62825 18/50 current_auc = 0.6617511520737326
User 62825 AUC after training: 0.660637480798771
User 62825 does not improve AUC. Reverting changes.
Training on augumented user 762 19/50 current_auc = 0.6617511520737326
User 762 AUC after training: 0.6618279569892473
User 762 improves AUC. Keeping the model.
Training on augumented user 75184 20/50 current_auc = 0.6618279569892473
User 75184 AUC after training: 0.6607910906298002
User 75184 does not improve AUC. Reverting changes.
Training on augumented user 130880 21/50 current_auc = 0.6618279569892473
User 130880 AUC after training: 0.66178955453149
User 130880 does not improve AUC. Reverting changes.
Training on augumented user 101723 22/50 current_auc = 0.6618279569892473
User 101723 AUC after training: 0.661520737327189
User 101723 does not improve AUC. Reverting changes.
Training on augumented user 64636 23/50 current_auc = 0.6618279569892473
User 64636 AUC after training: 0.66178955453149
User 64636 does not improve AUC. Reverting changes.
Training on augumented user 77546 24/50 current_auc = 0.6618279569892473
User 77546 AUC after training: 0.6610983102918587
User 77546 does not improve AUC. Reverting changes.
Training on augumented user 59452 25/50 current_auc = 0.6618279569892473
User 59452 AUC after training: 0.6620967741935484
User 59452 improves AUC. Keeping the model.
Training on augumented user 118594 26/50 current_auc = 0.6620967741935484
User 118594 AUC after training: 0.6615207373271889
User 118594 does not improve AUC. Reverting changes.
Training on augumented user 77721 27/50 current_auc = 0.6620967741935484
User 77721 AUC after training: 0.6613287250384025
User 77721 does not improve AUC. Reverting changes.
Training on augumented user 55362 28/50 current_auc = 0.6620967741935484
User 55362 AUC after training: 0.6610983102918586
User 55362 does not improve AUC. Reverting changes.
Training on augumented user 50468 29/50 current_auc = 0.6620967741935484
User 50468 AUC after training: 0.6621351766513056
User 50468 improves AUC. Keeping the model.
Training on augumented user 117905 30/50 current_auc = 0.6621351766513056
User 117905 AUC after training: 0.6625960061443932
User 117905 improves AUC. Keeping the model.
Training on augumented user 122077 31/50 current_auc = 0.6625960061443932
User 122077 AUC after training: 0.6620967741935484
User 122077 does not improve AUC. Reverting changes.
Training on augumented user 158 32/50 current_auc = 0.6625960061443932
User 158 AUC after training: 0.6617127496159755
User 158 does not improve AUC. Reverting changes.
Training on augumented user 11024 33/50 current_auc = 0.6625960061443932
User 11024 AUC after training: 0.6624807987711214
User 11024 does not improve AUC. Reverting changes.
Training on augumented user 100571 34/50 current_auc = 0.6625960061443932
User 100571 AUC after training: 0.6627112135176652
User 100571 improves AUC. Keeping the model.
Training on augumented user 7418 35/50 current_auc = 0.6627112135176652
User 7418 AUC after training: 0.6621351766513057
User 7418 does not improve AUC. Reverting changes.
Training on augumented user 89105 36/50 current_auc = 0.6627112135176652
User 89105 AUC after training: 0.6629800307219663
User 89105 improves AUC. Keeping the model.
Training on augumented user 102767 37/50 current_auc = 0.6629800307219663
User 102767 AUC after training: 0.6626344086021505
User 102767 does not improve AUC. Reverting changes.
Training on augumented user 28867 38/50 current_auc = 0.6629800307219663
User 28867 AUC after training: 0.6627496159754225
User 28867 does not improve AUC. Reverting changes.
Training on augumented user 7945 39/50 current_auc = 0.6629800307219663
User 7945 AUC after training: 0.6624423963133641
User 7945 does not improve AUC. Reverting changes.
Training on augumented user 54217 40/50 current_auc = 0.6629800307219663
User 54217 AUC after training: 0.6627496159754225
User 54217 does not improve AUC. Reverting changes.
Training on augumented user 97502 41/50 current_auc = 0.6629800307219663
User 97502 AUC after training: 0.6626344086021505
User 97502 does not improve AUC. Reverting changes.
Training on augumented user 86299 42/50 current_auc = 0.6629800307219663
User 86299 AUC after training: 0.6624423963133641
User 86299 does not improve AUC. Reverting changes.
Training on augumented user 35436 43/50 current_auc = 0.6629800307219663
User 35436 AUC after training: 0.6626728110599079
User 35436 does not improve AUC. Reverting changes.
Training on augumented user 73373 44/50 current_auc = 0.6629800307219663
User 73373 AUC after training: 0.6617127496159754
User 73373 does not improve AUC. Reverting changes.
Training on augumented user 35723 45/50 current_auc = 0.6629800307219663
User 35723 AUC after training: 0.6624423963133641
User 35723 does not improve AUC. Reverting changes.
Training on augumented user 121802 46/50 current_auc = 0.6629800307219663
User 121802 AUC after training: 0.6630184331797235
User 121802 improves AUC. Keeping the model.
Training on augumented user 39931 47/50 current_auc = 0.6630184331797235
User 39931 AUC after training: 0.6627880184331797
User 39931 does not improve AUC. Reverting changes.
Training on augumented user 89836 48/50 current_auc = 0.6630184331797235
User 89836 AUC after training: 0.6628648233486942
User 89836 does not improve AUC. Reverting changes.
Training on augumented user 40628 49/50 current_auc = 0.6630184331797235
User 40628 AUC after training: 0.6629416282642089
User 40628 does not improve AUC. Reverting changes.
[2024-12-02 17:46:26.480256] start test user 109746 16/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:46:27.029245] start test user 109746 16/567 recall augumented users by random, augumented_users = [103589, 3408, 97871, 128374, 31123, 16724, 1611, 14019, 80738, 80468, 44265, 91585, 105846, 86881, 9319, 76782, 63825, 809, 34998, 20775, 125197, 63729, 90598, 418, 105056, 8009, 105162, 73359, 65202, 71018, 33437, 118048, 127005, 59769, 74945, 31944, 46779, 39566, 68388, 20267, 41168, 100066, 113725, 86821, 2426, 28741, 80253, 90005, 19693, 22089]
[2024-12-02 17:46:27.044060] user = 109746 Cloud 16/567
[2024-12-02 17:46:27.053562] user = 109746 Local 16/567
[2024-12-02 17:46:27.096246] user = 109746 Local+ 16/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:46:29.636989] user = 109746 MPDA- 16/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 1.0
Training on augumented user 103589 0/50 current_auc = 1.0
User 103589 AUC after training: 1.0
User 103589 does not improve AUC. Reverting changes.
Training on augumented user 3408 1/50 current_auc = 1.0
User 3408 AUC after training: 1.0
User 3408 does not improve AUC. Reverting changes.
Training on augumented user 97871 2/50 current_auc = 1.0
User 97871 AUC after training: 1.0
User 97871 does not improve AUC. Reverting changes.
Training on augumented user 128374 3/50 current_auc = 1.0
User 128374 AUC after training: 1.0
User 128374 does not improve AUC. Reverting changes.
Training on augumented user 31123 4/50 current_auc = 1.0
User 31123 AUC after training: 1.0
User 31123 does not improve AUC. Reverting changes.
Training on augumented user 16724 5/50 current_auc = 1.0
User 16724 AUC after training: 1.0
User 16724 does not improve AUC. Reverting changes.
Training on augumented user 1611 6/50 current_auc = 1.0
User 1611 AUC after training: 1.0
User 1611 does not improve AUC. Reverting changes.
Training on augumented user 14019 7/50 current_auc = 1.0
User 14019 AUC after training: 1.0
User 14019 does not improve AUC. Reverting changes.
Training on augumented user 80738 8/50 current_auc = 1.0
User 80738 AUC after training: 1.0
User 80738 does not improve AUC. Reverting changes.
Training on augumented user 80468 9/50 current_auc = 1.0
User 80468 AUC after training: 1.0
User 80468 does not improve AUC. Reverting changes.
Training on augumented user 44265 10/50 current_auc = 1.0
User 44265 AUC after training: 1.0
User 44265 does not improve AUC. Reverting changes.
Training on augumented user 91585 11/50 current_auc = 1.0
User 91585 AUC after training: 1.0
User 91585 does not improve AUC. Reverting changes.
Training on augumented user 105846 12/50 current_auc = 1.0
User 105846 AUC after training: 1.0
User 105846 does not improve AUC. Reverting changes.
Training on augumented user 86881 13/50 current_auc = 1.0
User 86881 AUC after training: 1.0
User 86881 does not improve AUC. Reverting changes.
Training on augumented user 9319 14/50 current_auc = 1.0
User 9319 AUC after training: 1.0
User 9319 does not improve AUC. Reverting changes.
Training on augumented user 76782 15/50 current_auc = 1.0
User 76782 AUC after training: 1.0
User 76782 does not improve AUC. Reverting changes.
Training on augumented user 63825 16/50 current_auc = 1.0
User 63825 AUC after training: 1.0
User 63825 does not improve AUC. Reverting changes.
Training on augumented user 809 17/50 current_auc = 1.0
User 809 AUC after training: 1.0
User 809 does not improve AUC. Reverting changes.
Training on augumented user 34998 18/50 current_auc = 1.0
User 34998 AUC after training: 1.0
User 34998 does not improve AUC. Reverting changes.
Training on augumented user 20775 19/50 current_auc = 1.0
User 20775 AUC after training: 1.0
User 20775 does not improve AUC. Reverting changes.
Training on augumented user 125197 20/50 current_auc = 1.0
User 125197 AUC after training: 1.0
User 125197 does not improve AUC. Reverting changes.
Training on augumented user 63729 21/50 current_auc = 1.0
User 63729 AUC after training: 1.0
User 63729 does not improve AUC. Reverting changes.
Training on augumented user 90598 22/50 current_auc = 1.0
User 90598 AUC after training: 1.0
User 90598 does not improve AUC. Reverting changes.
Training on augumented user 418 23/50 current_auc = 1.0
User 418 AUC after training: 1.0
User 418 does not improve AUC. Reverting changes.
Training on augumented user 105056 24/50 current_auc = 1.0
User 105056 AUC after training: 1.0
User 105056 does not improve AUC. Reverting changes.
Training on augumented user 8009 25/50 current_auc = 1.0
User 8009 AUC after training: 1.0
User 8009 does not improve AUC. Reverting changes.
Training on augumented user 105162 26/50 current_auc = 1.0
User 105162 AUC after training: 1.0
User 105162 does not improve AUC. Reverting changes.
Training on augumented user 73359 27/50 current_auc = 1.0
User 73359 AUC after training: 1.0
User 73359 does not improve AUC. Reverting changes.
Training on augumented user 65202 28/50 current_auc = 1.0
User 65202 AUC after training: 1.0
User 65202 does not improve AUC. Reverting changes.
Training on augumented user 71018 29/50 current_auc = 1.0
User 71018 AUC after training: 1.0
User 71018 does not improve AUC. Reverting changes.
Training on augumented user 33437 30/50 current_auc = 1.0
User 33437 AUC after training: 1.0
User 33437 does not improve AUC. Reverting changes.
Training on augumented user 118048 31/50 current_auc = 1.0
User 118048 AUC after training: 1.0
User 118048 does not improve AUC. Reverting changes.
Training on augumented user 127005 32/50 current_auc = 1.0
User 127005 AUC after training: 1.0
User 127005 does not improve AUC. Reverting changes.
Training on augumented user 59769 33/50 current_auc = 1.0
User 59769 AUC after training: 1.0
User 59769 does not improve AUC. Reverting changes.
Training on augumented user 74945 34/50 current_auc = 1.0
User 74945 AUC after training: 1.0
User 74945 does not improve AUC. Reverting changes.
Training on augumented user 31944 35/50 current_auc = 1.0
User 31944 AUC after training: 1.0
User 31944 does not improve AUC. Reverting changes.
Training on augumented user 46779 36/50 current_auc = 1.0
User 46779 AUC after training: 1.0
User 46779 does not improve AUC. Reverting changes.
Training on augumented user 39566 37/50 current_auc = 1.0
User 39566 AUC after training: 1.0
User 39566 does not improve AUC. Reverting changes.
Training on augumented user 68388 38/50 current_auc = 1.0
User 68388 AUC after training: 1.0
User 68388 does not improve AUC. Reverting changes.
Training on augumented user 20267 39/50 current_auc = 1.0
User 20267 AUC after training: 1.0
User 20267 does not improve AUC. Reverting changes.
Training on augumented user 41168 40/50 current_auc = 1.0
User 41168 AUC after training: 1.0
User 41168 does not improve AUC. Reverting changes.
Training on augumented user 100066 41/50 current_auc = 1.0
User 100066 AUC after training: 1.0
User 100066 does not improve AUC. Reverting changes.
Training on augumented user 113725 42/50 current_auc = 1.0
User 113725 AUC after training: 1.0
User 113725 does not improve AUC. Reverting changes.
Training on augumented user 86821 43/50 current_auc = 1.0
User 86821 AUC after training: 1.0
User 86821 does not improve AUC. Reverting changes.
Training on augumented user 2426 44/50 current_auc = 1.0
User 2426 AUC after training: 1.0
User 2426 does not improve AUC. Reverting changes.
Training on augumented user 28741 45/50 current_auc = 1.0
User 28741 AUC after training: 1.0
User 28741 does not improve AUC. Reverting changes.
Training on augumented user 80253 46/50 current_auc = 1.0
User 80253 AUC after training: 1.0
User 80253 does not improve AUC. Reverting changes.
Training on augumented user 90005 47/50 current_auc = 1.0
User 90005 AUC after training: 1.0
User 90005 does not improve AUC. Reverting changes.
Training on augumented user 19693 48/50 current_auc = 1.0
User 19693 AUC after training: 1.0
User 19693 does not improve AUC. Reverting changes.
Training on augumented user 22089 49/50 current_auc = 1.0
User 22089 AUC after training: 1.0
User 22089 does not improve AUC. Reverting changes.
[2024-12-02 17:46:58.375587] start test user 109764 17/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:46:58.806542] start test user 109764 17/567 recall augumented users by random, augumented_users = [34052, 66889, 5786, 78874, 23153, 131405, 102637, 37943, 77332, 85159, 94718, 60640, 91249, 38720, 91205, 123217, 113187, 44936, 50694, 121960, 3566, 64722, 75035, 14835, 42236, 138008, 41013, 7109, 78672, 67105, 34325, 124066, 51347, 80280, 8689, 92945, 114650, 59005, 24539, 103040, 85994, 21373, 1225, 79527, 79407, 7707, 41409, 97454, 57038, 44354]
[2024-12-02 17:46:58.821943] user = 109764 Cloud 17/567
[2024-12-02 17:46:58.846642] user = 109764 Local 17/567
[2024-12-02 17:46:58.888700] user = 109764 Local+ 17/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:47:00.931172] user = 109764 MPDA- 17/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5913113695090438
Training on augumented user 34052 0/50 current_auc = 0.5913113695090438
User 34052 AUC after training: 0.5910206718346253
User 34052 does not improve AUC. Reverting changes.
Training on augumented user 66889 1/50 current_auc = 0.5913113695090438
User 66889 AUC after training: 0.5913759689922481
User 66889 improves AUC. Keeping the model.
Training on augumented user 5786 2/50 current_auc = 0.5913759689922481
User 5786 AUC after training: 0.591311369509044
User 5786 does not improve AUC. Reverting changes.
Training on augumented user 78874 3/50 current_auc = 0.5913759689922481
User 78874 AUC after training: 0.5904715762273902
User 78874 does not improve AUC. Reverting changes.
Training on augumented user 23153 4/50 current_auc = 0.5913759689922481
User 23153 AUC after training: 0.5910529715762274
User 23153 does not improve AUC. Reverting changes.
Training on augumented user 131405 5/50 current_auc = 0.5913759689922481
User 131405 AUC after training: 0.5916343669250645
User 131405 improves AUC. Keeping the model.
Training on augumented user 102637 6/50 current_auc = 0.5916343669250645
User 102637 AUC after training: 0.5916666666666667
User 102637 improves AUC. Keeping the model.
Training on augumented user 37943 7/50 current_auc = 0.5916666666666667
User 37943 AUC after training: 0.5918281653746771
User 37943 improves AUC. Keeping the model.
Training on augumented user 77332 8/50 current_auc = 0.5918281653746771
User 77332 AUC after training: 0.5922480620155038
User 77332 improves AUC. Keeping the model.
Training on augumented user 85159 9/50 current_auc = 0.5922480620155038
User 85159 AUC after training: 0.5918281653746771
User 85159 does not improve AUC. Reverting changes.
Training on augumented user 94718 10/50 current_auc = 0.5922480620155038
User 94718 AUC after training: 0.5921834625322998
User 94718 does not improve AUC. Reverting changes.
Training on augumented user 60640 11/50 current_auc = 0.5922480620155038
User 60640 AUC after training: 0.5907622739018088
User 60640 does not improve AUC. Reverting changes.
Training on augumented user 91249 12/50 current_auc = 0.5922480620155038
User 91249 AUC after training: 0.5916020671834625
User 91249 does not improve AUC. Reverting changes.
Training on augumented user 38720 13/50 current_auc = 0.5922480620155038
User 38720 AUC after training: 0.5905038759689922
User 38720 does not improve AUC. Reverting changes.
Training on augumented user 91205 14/50 current_auc = 0.5922480620155038
User 91205 AUC after training: 0.5906976744186047
User 91205 does not improve AUC. Reverting changes.
Training on augumented user 123217 15/50 current_auc = 0.5922480620155038
User 123217 AUC after training: 0.5915051679586564
User 123217 does not improve AUC. Reverting changes.
Training on augumented user 113187 16/50 current_auc = 0.5922480620155038
User 113187 AUC after training: 0.5919250645994832
User 113187 does not improve AUC. Reverting changes.
Training on augumented user 44936 17/50 current_auc = 0.5922480620155038
User 44936 AUC after training: 0.5915697674418604
User 44936 does not improve AUC. Reverting changes.
Training on augumented user 50694 18/50 current_auc = 0.5922480620155038
User 50694 AUC after training: 0.5911498708010335
User 50694 does not improve AUC. Reverting changes.
Training on augumented user 121960 19/50 current_auc = 0.5922480620155038
User 121960 AUC after training: 0.591828165374677
User 121960 does not improve AUC. Reverting changes.
Training on augumented user 3566 20/50 current_auc = 0.5922480620155038
User 3566 AUC after training: 0.591795865633075
User 3566 does not improve AUC. Reverting changes.
Training on augumented user 64722 21/50 current_auc = 0.5922480620155038
User 64722 AUC after training: 0.5915374677002584
User 64722 does not improve AUC. Reverting changes.
Training on augumented user 75035 22/50 current_auc = 0.5922480620155038
User 75035 AUC after training: 0.591343669250646
User 75035 does not improve AUC. Reverting changes.
Training on augumented user 14835 23/50 current_auc = 0.5922480620155038
User 14835 AUC after training: 0.5920542635658914
User 14835 does not improve AUC. Reverting changes.
Training on augumented user 42236 24/50 current_auc = 0.5922480620155038
User 42236 AUC after training: 0.5916343669250645
User 42236 does not improve AUC. Reverting changes.
Training on augumented user 138008 25/50 current_auc = 0.5922480620155038
User 138008 AUC after training: 0.5918281653746771
User 138008 does not improve AUC. Reverting changes.
Training on augumented user 41013 26/50 current_auc = 0.5922480620155038
User 41013 AUC after training: 0.5920865633074935
User 41013 does not improve AUC. Reverting changes.
Training on augumented user 7109 27/50 current_auc = 0.5922480620155038
User 7109 AUC after training: 0.591828165374677
User 7109 does not improve AUC. Reverting changes.
Training on augumented user 78672 28/50 current_auc = 0.5922480620155038
User 78672 AUC after training: 0.5914405684754521
User 78672 does not improve AUC. Reverting changes.
Training on augumented user 67105 29/50 current_auc = 0.5922480620155038
User 67105 AUC after training: 0.5910206718346253
User 67105 does not improve AUC. Reverting changes.
Training on augumented user 34325 30/50 current_auc = 0.5922480620155038
User 34325 AUC after training: 0.5921511627906977
User 34325 does not improve AUC. Reverting changes.
Training on augumented user 124066 31/50 current_auc = 0.5922480620155038
User 124066 AUC after training: 0.5900839793281654
User 124066 does not improve AUC. Reverting changes.
Training on augumented user 51347 32/50 current_auc = 0.5922480620155038
User 51347 AUC after training: 0.5921834625322997
User 51347 does not improve AUC. Reverting changes.
Training on augumented user 80280 33/50 current_auc = 0.5922480620155038
User 80280 AUC after training: 0.5912467700258398
User 80280 does not improve AUC. Reverting changes.
Training on augumented user 8689 34/50 current_auc = 0.5922480620155038
User 8689 AUC after training: 0.5915051679586563
User 8689 does not improve AUC. Reverting changes.
Training on augumented user 92945 35/50 current_auc = 0.5922480620155038
User 92945 AUC after training: 0.5908268733850129
User 92945 does not improve AUC. Reverting changes.
Training on augumented user 114650 36/50 current_auc = 0.5922480620155038
User 114650 AUC after training: 0.5918604651162791
User 114650 does not improve AUC. Reverting changes.
Training on augumented user 59005 37/50 current_auc = 0.5922480620155038
User 59005 AUC after training: 0.5921188630490957
User 59005 does not improve AUC. Reverting changes.
Training on augumented user 24539 38/50 current_auc = 0.5922480620155038
User 24539 AUC after training: 0.5911498708010335
User 24539 does not improve AUC. Reverting changes.
Training on augumented user 103040 39/50 current_auc = 0.5922480620155038
User 103040 AUC after training: 0.592248062015504
User 103040 improves AUC. Keeping the model.
Training on augumented user 85994 40/50 current_auc = 0.592248062015504
User 85994 AUC after training: 0.5921834625322999
User 85994 does not improve AUC. Reverting changes.
Training on augumented user 21373 41/50 current_auc = 0.592248062015504
User 21373 AUC after training: 0.5921188630490957
User 21373 does not improve AUC. Reverting changes.
Training on augumented user 1225 42/50 current_auc = 0.592248062015504
User 1225 AUC after training: 0.5917312661498708
User 1225 does not improve AUC. Reverting changes.
Training on augumented user 79527 43/50 current_auc = 0.592248062015504
User 79527 AUC after training: 0.5919250645994832
User 79527 does not improve AUC. Reverting changes.
Training on augumented user 79407 44/50 current_auc = 0.592248062015504
User 79407 AUC after training: 0.591795865633075
User 79407 does not improve AUC. Reverting changes.
Training on augumented user 7707 45/50 current_auc = 0.592248062015504
User 7707 AUC after training: 0.5903746770025841
User 7707 does not improve AUC. Reverting changes.
Training on augumented user 41409 46/50 current_auc = 0.592248062015504
User 41409 AUC after training: 0.5916343669250645
User 41409 does not improve AUC. Reverting changes.
Training on augumented user 97454 47/50 current_auc = 0.592248062015504
User 97454 AUC after training: 0.5902454780361758
User 97454 does not improve AUC. Reverting changes.
Training on augumented user 57038 48/50 current_auc = 0.592248062015504
User 57038 AUC after training: 0.5916343669250645
User 57038 does not improve AUC. Reverting changes.
Training on augumented user 44354 49/50 current_auc = 0.592248062015504
User 44354 AUC after training: 0.5922480620155038
User 44354 does not improve AUC. Reverting changes.
[2024-12-02 17:47:29.095544] start test user 109883 18/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:47:29.513984] start test user 109883 18/567 recall augumented users by random, augumented_users = [75096, 133338, 76834, 31549, 133886, 86113, 101602, 13744, 48482, 88483, 130090, 10704, 82464, 118478, 135961, 25042, 64484, 72663, 66950, 57268, 86646, 28383, 56537, 137728, 9386, 5727, 13780, 74423, 136611, 101763, 79434, 135440, 58944, 67415, 121755, 60785, 90824, 82948, 90660, 15428, 40603, 93460, 49333, 59566, 36960, 122572, 2717, 86213, 137272, 21792]
[2024-12-02 17:47:29.531506] user = 109883 Cloud 18/567
[2024-12-02 17:47:29.546714] user = 109883 Local 18/567
[2024-12-02 17:47:29.769366] user = 109883 Local+ 18/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:47:31.971065] user = 109883 MPDA- 18/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6886363636363637
Training on augumented user 75096 0/50 current_auc = 0.6886363636363637
User 75096 AUC after training: 0.6893939393939394
User 75096 improves AUC. Keeping the model.
Training on augumented user 133338 1/50 current_auc = 0.6893939393939394
User 133338 AUC after training: 0.6898989898989899
User 133338 improves AUC. Keeping the model.
Training on augumented user 76834 2/50 current_auc = 0.6898989898989899
User 76834 AUC after training: 0.6914141414141414
User 76834 improves AUC. Keeping the model.
Training on augumented user 31549 3/50 current_auc = 0.6914141414141414
User 31549 AUC after training: 0.6909090909090909
User 31549 does not improve AUC. Reverting changes.
Training on augumented user 133886 4/50 current_auc = 0.6914141414141414
User 133886 AUC after training: 0.6919191919191919
User 133886 improves AUC. Keeping the model.
Training on augumented user 86113 5/50 current_auc = 0.6919191919191919
User 86113 AUC after training: 0.6921717171717172
User 86113 improves AUC. Keeping the model.
Training on augumented user 101602 6/50 current_auc = 0.6921717171717172
User 101602 AUC after training: 0.6916666666666667
User 101602 does not improve AUC. Reverting changes.
Training on augumented user 13744 7/50 current_auc = 0.6921717171717172
User 13744 AUC after training: 0.6898989898989899
User 13744 does not improve AUC. Reverting changes.
Training on augumented user 48482 8/50 current_auc = 0.6921717171717172
User 48482 AUC after training: 0.6911616161616162
User 48482 does not improve AUC. Reverting changes.
Training on augumented user 88483 9/50 current_auc = 0.6921717171717172
User 88483 AUC after training: 0.6911616161616162
User 88483 does not improve AUC. Reverting changes.
Training on augumented user 130090 10/50 current_auc = 0.6921717171717172
User 130090 AUC after training: 0.6911616161616162
User 130090 does not improve AUC. Reverting changes.
Training on augumented user 10704 11/50 current_auc = 0.6921717171717172
User 10704 AUC after training: 0.6909090909090909
User 10704 does not improve AUC. Reverting changes.
Training on augumented user 82464 12/50 current_auc = 0.6921717171717172
User 82464 AUC after training: 0.692929292929293
User 82464 improves AUC. Keeping the model.
Training on augumented user 118478 13/50 current_auc = 0.692929292929293
User 118478 AUC after training: 0.6921717171717172
User 118478 does not improve AUC. Reverting changes.
Training on augumented user 135961 14/50 current_auc = 0.692929292929293
User 135961 AUC after training: 0.6921717171717172
User 135961 does not improve AUC. Reverting changes.
Training on augumented user 25042 15/50 current_auc = 0.692929292929293
User 25042 AUC after training: 0.6931818181818182
User 25042 improves AUC. Keeping the model.
Training on augumented user 64484 16/50 current_auc = 0.6931818181818182
User 64484 AUC after training: 0.6926767676767677
User 64484 does not improve AUC. Reverting changes.
Training on augumented user 72663 17/50 current_auc = 0.6931818181818182
User 72663 AUC after training: 0.6934343434343434
User 72663 improves AUC. Keeping the model.
Training on augumented user 66950 18/50 current_auc = 0.6934343434343434
User 66950 AUC after training: 0.6936868686868687
User 66950 improves AUC. Keeping the model.
Training on augumented user 57268 19/50 current_auc = 0.6936868686868687
User 57268 AUC after training: 0.6936868686868688
User 57268 improves AUC. Keeping the model.
Training on augumented user 86646 20/50 current_auc = 0.6936868686868688
User 86646 AUC after training: 0.6924242424242425
User 86646 does not improve AUC. Reverting changes.
Training on augumented user 28383 21/50 current_auc = 0.6936868686868688
User 28383 AUC after training: 0.6954545454545454
User 28383 improves AUC. Keeping the model.
Training on augumented user 56537 22/50 current_auc = 0.6954545454545454
User 56537 AUC after training: 0.694949494949495
User 56537 does not improve AUC. Reverting changes.
Training on augumented user 137728 23/50 current_auc = 0.6954545454545454
User 137728 AUC after training: 0.6954545454545454
User 137728 does not improve AUC. Reverting changes.
Training on augumented user 9386 24/50 current_auc = 0.6954545454545454
User 9386 AUC after training: 0.6944444444444444
User 9386 does not improve AUC. Reverting changes.
Training on augumented user 5727 25/50 current_auc = 0.6954545454545454
User 5727 AUC after training: 0.6954545454545454
User 5727 does not improve AUC. Reverting changes.
Training on augumented user 13780 26/50 current_auc = 0.6954545454545454
User 13780 AUC after training: 0.6946969696969697
User 13780 does not improve AUC. Reverting changes.
Training on augumented user 74423 27/50 current_auc = 0.6954545454545454
User 74423 AUC after training: 0.6949494949494949
User 74423 does not improve AUC. Reverting changes.
Training on augumented user 136611 28/50 current_auc = 0.6954545454545454
User 136611 AUC after training: 0.6952020202020202
User 136611 does not improve AUC. Reverting changes.
Training on augumented user 101763 29/50 current_auc = 0.6954545454545454
User 101763 AUC after training: 0.6949494949494949
User 101763 does not improve AUC. Reverting changes.
Training on augumented user 79434 30/50 current_auc = 0.6954545454545454
User 79434 AUC after training: 0.6911616161616161
User 79434 does not improve AUC. Reverting changes.
Training on augumented user 135440 31/50 current_auc = 0.6954545454545454
User 135440 AUC after training: 0.6957070707070706
User 135440 improves AUC. Keeping the model.
Training on augumented user 58944 32/50 current_auc = 0.6957070707070706
User 58944 AUC after training: 0.6944444444444444
User 58944 does not improve AUC. Reverting changes.
Training on augumented user 67415 33/50 current_auc = 0.6957070707070706
User 67415 AUC after training: 0.6967171717171717
User 67415 improves AUC. Keeping the model.
Training on augumented user 121755 34/50 current_auc = 0.6967171717171717
User 121755 AUC after training: 0.6939393939393939
User 121755 does not improve AUC. Reverting changes.
Training on augumented user 60785 35/50 current_auc = 0.6967171717171717
User 60785 AUC after training: 0.6969696969696969
User 60785 improves AUC. Keeping the model.
Training on augumented user 90824 36/50 current_auc = 0.6969696969696969
User 90824 AUC after training: 0.696969696969697
User 90824 improves AUC. Keeping the model.
Training on augumented user 82948 37/50 current_auc = 0.696969696969697
User 82948 AUC after training: 0.6944444444444445
User 82948 does not improve AUC. Reverting changes.
Training on augumented user 90660 38/50 current_auc = 0.696969696969697
User 90660 AUC after training: 0.6967171717171717
User 90660 does not improve AUC. Reverting changes.
Training on augumented user 15428 39/50 current_auc = 0.696969696969697
User 15428 AUC after training: 0.6979797979797979
User 15428 improves AUC. Keeping the model.
Training on augumented user 40603 40/50 current_auc = 0.6979797979797979
User 40603 AUC after training: 0.6972222222222222
User 40603 does not improve AUC. Reverting changes.
Training on augumented user 93460 41/50 current_auc = 0.6979797979797979
User 93460 AUC after training: 0.697979797979798
User 93460 improves AUC. Keeping the model.
Training on augumented user 49333 42/50 current_auc = 0.697979797979798
User 49333 AUC after training: 0.6957070707070706
User 49333 does not improve AUC. Reverting changes.
Training on augumented user 59566 43/50 current_auc = 0.697979797979798
User 59566 AUC after training: 0.6979797979797979
User 59566 does not improve AUC. Reverting changes.
Training on augumented user 36960 44/50 current_auc = 0.697979797979798
User 36960 AUC after training: 0.6959595959595959
User 36960 does not improve AUC. Reverting changes.
Training on augumented user 122572 45/50 current_auc = 0.697979797979798
User 122572 AUC after training: 0.6967171717171716
User 122572 does not improve AUC. Reverting changes.
Training on augumented user 2717 46/50 current_auc = 0.697979797979798
User 2717 AUC after training: 0.6974747474747475
User 2717 does not improve AUC. Reverting changes.
Training on augumented user 86213 47/50 current_auc = 0.697979797979798
User 86213 AUC after training: 0.6974747474747475
User 86213 does not improve AUC. Reverting changes.
Training on augumented user 137272 48/50 current_auc = 0.697979797979798
User 137272 AUC after training: 0.694949494949495
User 137272 does not improve AUC. Reverting changes.
Training on augumented user 21792 49/50 current_auc = 0.697979797979798
User 21792 AUC after training: 0.696969696969697
User 21792 does not improve AUC. Reverting changes.
[2024-12-02 17:48:05.364974] start test user 109888 19/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:48:05.917676] start test user 109888 19/567 recall augumented users by random, augumented_users = [38248, 9384, 92695, 123216, 87873, 113216, 106099, 125290, 2284, 124057, 96911, 28064, 83178, 68824, 65654, 125520, 65824, 59756, 94517, 136273, 102839, 125745, 67954, 2516, 39461, 120677, 12897, 84949, 62375, 79818, 58608, 10970, 72343, 121969, 48979, 124929, 111065, 83173, 123024, 119118, 96581, 137999, 134335, 60166, 120580, 81458, 27257, 87631, 25866, 81734]
[2024-12-02 17:48:05.933926] user = 109888 Cloud 19/567
[2024-12-02 17:48:05.986711] user = 109888 Local 19/567
[2024-12-02 17:48:06.123344] user = 109888 Local+ 19/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:48:07.887523] user = 109888 MPDA- 19/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4406604747162023
Training on augumented user 38248 0/50 current_auc = 0.4406604747162023
User 38248 AUC after training: 0.43962848297213625
User 38248 does not improve AUC. Reverting changes.
Training on augumented user 9384 1/50 current_auc = 0.4406604747162023
User 9384 AUC after training: 0.4385964912280702
User 9384 does not improve AUC. Reverting changes.
Training on augumented user 92695 2/50 current_auc = 0.4406604747162023
User 92695 AUC after training: 0.43859649122807015
User 92695 does not improve AUC. Reverting changes.
Training on augumented user 123216 3/50 current_auc = 0.4406604747162023
User 123216 AUC after training: 0.4406604747162023
User 123216 does not improve AUC. Reverting changes.
Training on augumented user 87873 4/50 current_auc = 0.4406604747162023
User 87873 AUC after training: 0.4406604747162023
User 87873 does not improve AUC. Reverting changes.
Training on augumented user 113216 5/50 current_auc = 0.4406604747162023
User 113216 AUC after training: 0.4375644994840041
User 113216 does not improve AUC. Reverting changes.
Training on augumented user 106099 6/50 current_auc = 0.4406604747162023
User 106099 AUC after training: 0.4365325077399381
User 106099 does not improve AUC. Reverting changes.
Training on augumented user 125290 7/50 current_auc = 0.4406604747162023
User 125290 AUC after training: 0.44169246646026833
User 125290 improves AUC. Keeping the model.
Training on augumented user 2284 8/50 current_auc = 0.44169246646026833
User 2284 AUC after training: 0.4406604747162023
User 2284 does not improve AUC. Reverting changes.
Training on augumented user 124057 9/50 current_auc = 0.44169246646026833
User 124057 AUC after training: 0.4396284829721362
User 124057 does not improve AUC. Reverting changes.
Training on augumented user 96911 10/50 current_auc = 0.44169246646026833
User 96911 AUC after training: 0.4355005159958721
User 96911 does not improve AUC. Reverting changes.
Training on augumented user 28064 11/50 current_auc = 0.44169246646026833
User 28064 AUC after training: 0.4437564499484004
User 28064 improves AUC. Keeping the model.
Training on augumented user 83178 12/50 current_auc = 0.4437564499484004
User 83178 AUC after training: 0.43962848297213625
User 83178 does not improve AUC. Reverting changes.
Training on augumented user 68824 13/50 current_auc = 0.4437564499484004
User 68824 AUC after training: 0.4427244582043344
User 68824 does not improve AUC. Reverting changes.
Training on augumented user 65654 14/50 current_auc = 0.4437564499484004
User 65654 AUC after training: 0.4427244582043344
User 65654 does not improve AUC. Reverting changes.
Training on augumented user 125520 15/50 current_auc = 0.4437564499484004
User 125520 AUC after training: 0.43859649122807015
User 125520 does not improve AUC. Reverting changes.
Training on augumented user 65824 16/50 current_auc = 0.4437564499484004
User 65824 AUC after training: 0.44169246646026833
User 65824 does not improve AUC. Reverting changes.
Training on augumented user 59756 17/50 current_auc = 0.4437564499484004
User 59756 AUC after training: 0.44272445820433437
User 59756 does not improve AUC. Reverting changes.
Training on augumented user 94517 18/50 current_auc = 0.4437564499484004
User 94517 AUC after training: 0.44375644994840036
User 94517 does not improve AUC. Reverting changes.
Training on augumented user 136273 19/50 current_auc = 0.4437564499484004
User 136273 AUC after training: 0.44272445820433437
User 136273 does not improve AUC. Reverting changes.
Training on augumented user 102839 20/50 current_auc = 0.4437564499484004
User 102839 AUC after training: 0.4427244582043344
User 102839 does not improve AUC. Reverting changes.
Training on augumented user 125745 21/50 current_auc = 0.4437564499484004
User 125745 AUC after training: 0.4406604747162023
User 125745 does not improve AUC. Reverting changes.
Training on augumented user 67954 22/50 current_auc = 0.4437564499484004
User 67954 AUC after training: 0.43756449948400417
User 67954 does not improve AUC. Reverting changes.
Training on augumented user 2516 23/50 current_auc = 0.4437564499484004
User 2516 AUC after training: 0.44272445820433437
User 2516 does not improve AUC. Reverting changes.
Training on augumented user 39461 24/50 current_auc = 0.4437564499484004
User 39461 AUC after training: 0.4406604747162023
User 39461 does not improve AUC. Reverting changes.
Training on augumented user 120677 25/50 current_auc = 0.4437564499484004
User 120677 AUC after training: 0.434468524251806
User 120677 does not improve AUC. Reverting changes.
Training on augumented user 12897 26/50 current_auc = 0.4437564499484004
User 12897 AUC after training: 0.4437564499484004
User 12897 does not improve AUC. Reverting changes.
Training on augumented user 84949 27/50 current_auc = 0.4437564499484004
User 84949 AUC after training: 0.44272445820433437
User 84949 does not improve AUC. Reverting changes.
Training on augumented user 62375 28/50 current_auc = 0.4437564499484004
User 62375 AUC after training: 0.43446852425180593
User 62375 does not improve AUC. Reverting changes.
Training on augumented user 79818 29/50 current_auc = 0.4437564499484004
User 79818 AUC after training: 0.4437564499484004
User 79818 does not improve AUC. Reverting changes.
Training on augumented user 58608 30/50 current_auc = 0.4437564499484004
User 58608 AUC after training: 0.44272445820433437
User 58608 does not improve AUC. Reverting changes.
Training on augumented user 10970 31/50 current_auc = 0.4437564499484004
User 10970 AUC after training: 0.4427244582043344
User 10970 does not improve AUC. Reverting changes.
Training on augumented user 72343 32/50 current_auc = 0.4437564499484004
User 72343 AUC after training: 0.43240454076367385
User 72343 does not improve AUC. Reverting changes.
Training on augumented user 121969 33/50 current_auc = 0.4437564499484004
User 121969 AUC after training: 0.4437564499484004
User 121969 does not improve AUC. Reverting changes.
Training on augumented user 48979 34/50 current_auc = 0.4437564499484004
User 48979 AUC after training: 0.44169246646026833
User 48979 does not improve AUC. Reverting changes.
Training on augumented user 124929 35/50 current_auc = 0.4437564499484004
User 124929 AUC after training: 0.4437564499484004
User 124929 does not improve AUC. Reverting changes.
Training on augumented user 111065 36/50 current_auc = 0.4437564499484004
User 111065 AUC after training: 0.4437564499484004
User 111065 does not improve AUC. Reverting changes.
Training on augumented user 83173 37/50 current_auc = 0.4437564499484004
User 83173 AUC after training: 0.43962848297213625
User 83173 does not improve AUC. Reverting changes.
Training on augumented user 123024 38/50 current_auc = 0.4437564499484004
User 123024 AUC after training: 0.44066047471620223
User 123024 does not improve AUC. Reverting changes.
Training on augumented user 119118 39/50 current_auc = 0.4437564499484004
User 119118 AUC after training: 0.4385964912280702
User 119118 does not improve AUC. Reverting changes.
Training on augumented user 96581 40/50 current_auc = 0.4437564499484004
User 96581 AUC after training: 0.44169246646026833
User 96581 does not improve AUC. Reverting changes.
Training on augumented user 137999 41/50 current_auc = 0.4437564499484004
User 137999 AUC after training: 0.44272445820433437
User 137999 does not improve AUC. Reverting changes.
Training on augumented user 134335 42/50 current_auc = 0.4437564499484004
User 134335 AUC after training: 0.44272445820433437
User 134335 does not improve AUC. Reverting changes.
Training on augumented user 60166 43/50 current_auc = 0.4437564499484004
User 60166 AUC after training: 0.43962848297213625
User 60166 does not improve AUC. Reverting changes.
Training on augumented user 120580 44/50 current_auc = 0.4437564499484004
User 120580 AUC after training: 0.43962848297213625
User 120580 does not improve AUC. Reverting changes.
Training on augumented user 81458 45/50 current_auc = 0.4437564499484004
User 81458 AUC after training: 0.4427244582043344
User 81458 does not improve AUC. Reverting changes.
Training on augumented user 27257 46/50 current_auc = 0.4437564499484004
User 27257 AUC after training: 0.44272445820433437
User 27257 does not improve AUC. Reverting changes.
Training on augumented user 87631 47/50 current_auc = 0.4437564499484004
User 87631 AUC after training: 0.4416924664602683
User 87631 does not improve AUC. Reverting changes.
Training on augumented user 25866 48/50 current_auc = 0.4437564499484004
User 25866 AUC after training: 0.44169246646026833
User 25866 does not improve AUC. Reverting changes.
Training on augumented user 81734 49/50 current_auc = 0.4437564499484004
User 81734 AUC after training: 0.4385964912280702
User 81734 does not improve AUC. Reverting changes.
[2024-12-02 17:48:36.067162] start test user 109915 20/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:48:36.765526] start test user 109915 20/567 recall augumented users by random, augumented_users = [13421, 24325, 117148, 31653, 46838, 78536, 87898, 59748, 119830, 19316, 87749, 5497, 123129, 90, 122845, 109044, 66603, 79408, 41660, 89132, 135570, 10988, 104139, 113158, 59316, 11909, 47151, 119758, 129277, 113894, 126418, 33453, 12566, 76784, 68888, 17584, 92133, 99279, 28140, 102124, 86884, 107692, 117879, 84144, 54042, 83134, 19120, 81608, 103384, 44734]
[2024-12-02 17:48:36.787640] user = 109915 Cloud 20/567
[2024-12-02 17:48:36.844996] user = 109915 Local 20/567
[2024-12-02 17:48:36.917393] user = 109915 Local+ 20/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:48:39.463594] user = 109915 MPDA- 20/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7944444444444445
Training on augumented user 13421 0/50 current_auc = 0.7944444444444445
User 13421 AUC after training: 0.7946127946127945
User 13421 improves AUC. Keeping the model.
Training on augumented user 24325 1/50 current_auc = 0.7946127946127945
User 24325 AUC after training: 0.7945286195286195
User 24325 does not improve AUC. Reverting changes.
Training on augumented user 117148 2/50 current_auc = 0.7946127946127945
User 117148 AUC after training: 0.7952861952861953
User 117148 improves AUC. Keeping the model.
Training on augumented user 31653 3/50 current_auc = 0.7952861952861953
User 31653 AUC after training: 0.7936026936026936
User 31653 does not improve AUC. Reverting changes.
Training on augumented user 46838 4/50 current_auc = 0.7952861952861953
User 46838 AUC after training: 0.7952020202020202
User 46838 does not improve AUC. Reverting changes.
Training on augumented user 78536 5/50 current_auc = 0.7952861952861953
User 78536 AUC after training: 0.7952861952861953
User 78536 does not improve AUC. Reverting changes.
Training on augumented user 87898 6/50 current_auc = 0.7952861952861953
User 87898 AUC after training: 0.79503367003367
User 87898 does not improve AUC. Reverting changes.
Training on augumented user 59748 7/50 current_auc = 0.7952861952861953
User 59748 AUC after training: 0.7946127946127945
User 59748 does not improve AUC. Reverting changes.
Training on augumented user 119830 8/50 current_auc = 0.7952861952861953
User 119830 AUC after training: 0.7953703703703704
User 119830 improves AUC. Keeping the model.
Training on augumented user 19316 9/50 current_auc = 0.7953703703703704
User 19316 AUC after training: 0.7953703703703704
User 19316 does not improve AUC. Reverting changes.
Training on augumented user 87749 10/50 current_auc = 0.7953703703703704
User 87749 AUC after training: 0.7952861952861953
User 87749 does not improve AUC. Reverting changes.
Training on augumented user 5497 11/50 current_auc = 0.7953703703703704
User 5497 AUC after training: 0.7951178451178451
User 5497 does not improve AUC. Reverting changes.
Training on augumented user 123129 12/50 current_auc = 0.7953703703703704
User 123129 AUC after training: 0.794949494949495
User 123129 does not improve AUC. Reverting changes.
Training on augumented user 90 13/50 current_auc = 0.7953703703703704
User 90 AUC after training: 0.794949494949495
User 90 does not improve AUC. Reverting changes.
Training on augumented user 122845 14/50 current_auc = 0.7953703703703704
User 122845 AUC after training: 0.7952020202020202
User 122845 does not improve AUC. Reverting changes.
Training on augumented user 109044 15/50 current_auc = 0.7953703703703704
User 109044 AUC after training: 0.7947811447811448
User 109044 does not improve AUC. Reverting changes.
Training on augumented user 66603 16/50 current_auc = 0.7953703703703704
User 66603 AUC after training: 0.7945286195286195
User 66603 does not improve AUC. Reverting changes.
Training on augumented user 79408 17/50 current_auc = 0.7953703703703704
User 79408 AUC after training: 0.7948653198653199
User 79408 does not improve AUC. Reverting changes.
Training on augumented user 41660 18/50 current_auc = 0.7953703703703704
User 41660 AUC after training: 0.7951178451178451
User 41660 does not improve AUC. Reverting changes.
Training on augumented user 89132 19/50 current_auc = 0.7953703703703704
User 89132 AUC after training: 0.7951178451178451
User 89132 does not improve AUC. Reverting changes.
Training on augumented user 135570 20/50 current_auc = 0.7953703703703704
User 135570 AUC after training: 0.7952861952861953
User 135570 does not improve AUC. Reverting changes.
Training on augumented user 10988 21/50 current_auc = 0.7953703703703704
User 10988 AUC after training: 0.7955387205387204
User 10988 improves AUC. Keeping the model.
Training on augumented user 104139 22/50 current_auc = 0.7955387205387204
User 104139 AUC after training: 0.7952020202020202
User 104139 does not improve AUC. Reverting changes.
Training on augumented user 113158 23/50 current_auc = 0.7955387205387204
User 113158 AUC after training: 0.7958754208754208
User 113158 improves AUC. Keeping the model.
Training on augumented user 59316 24/50 current_auc = 0.7958754208754208
User 59316 AUC after training: 0.7952020202020201
User 59316 does not improve AUC. Reverting changes.
Training on augumented user 11909 25/50 current_auc = 0.7958754208754208
User 11909 AUC after training: 0.796043771043771
User 11909 improves AUC. Keeping the model.
Training on augumented user 47151 26/50 current_auc = 0.796043771043771
User 47151 AUC after training: 0.795959595959596
User 47151 does not improve AUC. Reverting changes.
Training on augumented user 119758 27/50 current_auc = 0.796043771043771
User 119758 AUC after training: 0.7924242424242425
User 119758 does not improve AUC. Reverting changes.
Training on augumented user 129277 28/50 current_auc = 0.796043771043771
User 129277 AUC after training: 0.7957070707070707
User 129277 does not improve AUC. Reverting changes.
Training on augumented user 113894 29/50 current_auc = 0.796043771043771
User 113894 AUC after training: 0.7957912457912457
User 113894 does not improve AUC. Reverting changes.
Training on augumented user 126418 30/50 current_auc = 0.796043771043771
User 126418 AUC after training: 0.7957070707070707
User 126418 does not improve AUC. Reverting changes.
Training on augumented user 33453 31/50 current_auc = 0.796043771043771
User 33453 AUC after training: 0.7958754208754208
User 33453 does not improve AUC. Reverting changes.
Training on augumented user 12566 32/50 current_auc = 0.796043771043771
User 12566 AUC after training: 0.7949494949494949
User 12566 does not improve AUC. Reverting changes.
Training on augumented user 76784 33/50 current_auc = 0.796043771043771
User 76784 AUC after training: 0.7957070707070707
User 76784 does not improve AUC. Reverting changes.
Training on augumented user 68888 34/50 current_auc = 0.796043771043771
User 68888 AUC after training: 0.7958754208754208
User 68888 does not improve AUC. Reverting changes.
Training on augumented user 17584 35/50 current_auc = 0.796043771043771
User 17584 AUC after training: 0.7954545454545455
User 17584 does not improve AUC. Reverting changes.
Training on augumented user 92133 36/50 current_auc = 0.796043771043771
User 92133 AUC after training: 0.7952861952861953
User 92133 does not improve AUC. Reverting changes.
Training on augumented user 99279 37/50 current_auc = 0.796043771043771
User 99279 AUC after training: 0.7953703703703704
User 99279 does not improve AUC. Reverting changes.
Training on augumented user 28140 38/50 current_auc = 0.796043771043771
User 28140 AUC after training: 0.7957912457912458
User 28140 does not improve AUC. Reverting changes.
Training on augumented user 102124 39/50 current_auc = 0.796043771043771
User 102124 AUC after training: 0.7957070707070706
User 102124 does not improve AUC. Reverting changes.
Training on augumented user 86884 40/50 current_auc = 0.796043771043771
User 86884 AUC after training: 0.7954545454545455
User 86884 does not improve AUC. Reverting changes.
Training on augumented user 107692 41/50 current_auc = 0.796043771043771
User 107692 AUC after training: 0.7953703703703703
User 107692 does not improve AUC. Reverting changes.
Training on augumented user 117879 42/50 current_auc = 0.796043771043771
User 117879 AUC after training: 0.7954545454545454
User 117879 does not improve AUC. Reverting changes.
Training on augumented user 84144 43/50 current_auc = 0.796043771043771
User 84144 AUC after training: 0.795959595959596
User 84144 does not improve AUC. Reverting changes.
Training on augumented user 54042 44/50 current_auc = 0.796043771043771
User 54042 AUC after training: 0.7926767676767676
User 54042 does not improve AUC. Reverting changes.
Training on augumented user 83134 45/50 current_auc = 0.796043771043771
User 83134 AUC after training: 0.7957912457912458
User 83134 does not improve AUC. Reverting changes.
Training on augumented user 19120 46/50 current_auc = 0.796043771043771
User 19120 AUC after training: 0.7954545454545454
User 19120 does not improve AUC. Reverting changes.
Training on augumented user 81608 47/50 current_auc = 0.796043771043771
User 81608 AUC after training: 0.7952861952861953
User 81608 does not improve AUC. Reverting changes.
Training on augumented user 103384 48/50 current_auc = 0.796043771043771
User 103384 AUC after training: 0.7957070707070707
User 103384 does not improve AUC. Reverting changes.
Training on augumented user 44734 49/50 current_auc = 0.796043771043771
User 44734 AUC after training: 0.7958754208754208
User 44734 does not improve AUC. Reverting changes.
[2024-12-02 17:49:12.680644] start test user 109933 21/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:49:13.559416] start test user 109933 21/567 recall augumented users by random, augumented_users = [103597, 127785, 72585, 763, 49583, 74616, 117224, 64234, 119154, 30055, 16158, 94059, 105951, 138179, 57070, 120453, 116108, 100856, 100507, 51382, 11038, 124877, 101311, 112730, 74681, 102159, 24316, 112410, 59058, 135426, 86381, 32698, 121555, 130296, 12135, 37974, 55081, 101763, 102734, 111699, 56993, 636, 104959, 109580, 34867, 33849, 97742, 41935, 94530, 103313]
[2024-12-02 17:49:13.579142] user = 109933 Cloud 21/567
[2024-12-02 17:49:13.663338] user = 109933 Local 21/567
[2024-12-02 17:49:14.050416] user = 109933 Local+ 21/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:49:16.584985] user = 109933 MPDA- 21/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7271518033713156
Training on augumented user 103597 0/50 current_auc = 0.7271518033713156
User 103597 AUC after training: 0.7271164893116112
User 103597 does not improve AUC. Reverting changes.
Training on augumented user 127785 1/50 current_auc = 0.7271518033713156
User 127785 AUC after training: 0.7270458611922026
User 127785 does not improve AUC. Reverting changes.
Training on augumented user 72585 2/50 current_auc = 0.7271518033713156
User 72585 AUC after training: 0.7270458611922027
User 72585 does not improve AUC. Reverting changes.
Training on augumented user 763 3/50 current_auc = 0.7271518033713156
User 763 AUC after training: 0.7270811752519069
User 763 does not improve AUC. Reverting changes.
Training on augumented user 49583 4/50 current_auc = 0.7271518033713156
User 49583 AUC after training: 0.7271871174310198
User 49583 improves AUC. Keeping the model.
Training on augumented user 74616 5/50 current_auc = 0.7271871174310198
User 74616 AUC after training: 0.7273048309633676
User 74616 improves AUC. Keeping the model.
Training on augumented user 117224 6/50 current_auc = 0.7273048309633676
User 117224 AUC after training: 0.7272577455504283
User 117224 does not improve AUC. Reverting changes.
Training on augumented user 64234 7/50 current_auc = 0.7273048309633676
User 64234 AUC after training: 0.7275520293812977
User 64234 improves AUC. Keeping the model.
Training on augumented user 119154 8/50 current_auc = 0.7275520293812977
User 119154 AUC after training: 0.7269399190130897
User 119154 does not improve AUC. Reverting changes.
Training on augumented user 30055 9/50 current_auc = 0.7275520293812977
User 30055 AUC after training: 0.7275638007345324
User 30055 improves AUC. Keeping the model.
Training on augumented user 16158 10/50 current_auc = 0.7275638007345324
User 16158 AUC after training: 0.7272459741971937
User 16158 does not improve AUC. Reverting changes.
Training on augumented user 94059 11/50 current_auc = 0.7275638007345324
User 94059 AUC after training: 0.727328373669837
User 94059 does not improve AUC. Reverting changes.
Training on augumented user 105951 12/50 current_auc = 0.7275638007345324
User 105951 AUC after training: 0.727540258028063
User 105951 does not improve AUC. Reverting changes.
Training on augumented user 138179 13/50 current_auc = 0.7275638007345324
User 138179 AUC after training: 0.7278463132121669
User 138179 improves AUC. Keeping the model.
Training on augumented user 57070 14/50 current_auc = 0.7278463132121669
User 57070 AUC after training: 0.7275167153215933
User 57070 does not improve AUC. Reverting changes.
Training on augumented user 120453 15/50 current_auc = 0.7278463132121669
User 120453 AUC after training: 0.7275284866748282
User 120453 does not improve AUC. Reverting changes.
Training on augumented user 116108 16/50 current_auc = 0.7278463132121669
User 116108 AUC after training: 0.7276344288539411
User 116108 does not improve AUC. Reverting changes.
Training on augumented user 100856 17/50 current_auc = 0.7278463132121669
User 100856 AUC after training: 0.7276344288539411
User 100856 does not improve AUC. Reverting changes.
Training on augumented user 100507 18/50 current_auc = 0.7278463132121669
User 100507 AUC after training: 0.7276815142668802
User 100507 does not improve AUC. Reverting changes.
Training on augumented user 51382 19/50 current_auc = 0.7278463132121669
User 51382 AUC after training: 0.727328373669837
User 51382 does not improve AUC. Reverting changes.
Training on augumented user 11038 20/50 current_auc = 0.7278463132121669
User 11038 AUC after training: 0.7272342028439589
User 11038 does not improve AUC. Reverting changes.
Training on augumented user 124877 21/50 current_auc = 0.7278463132121669
User 124877 AUC after training: 0.7277285996798193
User 124877 does not improve AUC. Reverting changes.
Training on augumented user 101311 22/50 current_auc = 0.7278463132121669
User 101311 AUC after training: 0.7274696299086543
User 101311 does not improve AUC. Reverting changes.
Training on augumented user 112730 23/50 current_auc = 0.7278463132121669
User 112730 AUC after training: 0.7280111121574535
User 112730 improves AUC. Keeping the model.
Training on augumented user 74681 24/50 current_auc = 0.7280111121574535
User 74681 AUC after training: 0.7278580845654017
User 74681 does not improve AUC. Reverting changes.
Training on augumented user 102159 25/50 current_auc = 0.7280111121574535
User 102159 AUC after training: 0.7280228835106883
User 102159 improves AUC. Keeping the model.
Training on augumented user 24316 26/50 current_auc = 0.7280228835106883
User 24316 AUC after training: 0.7276462002071757
User 24316 does not improve AUC. Reverting changes.
Training on augumented user 112410 27/50 current_auc = 0.7280228835106883
User 112410 AUC after training: 0.7284937376400792
User 112410 improves AUC. Keeping the model.
Training on augumented user 59058 28/50 current_auc = 0.7284937376400792
User 59058 AUC after training: 0.7285408230530181
User 59058 improves AUC. Keeping the model.
Training on augumented user 135426 29/50 current_auc = 0.7285408230530181
User 135426 AUC after training: 0.7288351068838873
User 135426 improves AUC. Keeping the model.
Training on augumented user 86381 30/50 current_auc = 0.7288351068838873
User 86381 AUC after training: 0.7287291647047744
User 86381 does not improve AUC. Reverting changes.
Training on augumented user 32698 31/50 current_auc = 0.7288351068838873
User 32698 AUC after training: 0.7288939636500611
User 32698 improves AUC. Keeping the model.
Training on augumented user 121555 32/50 current_auc = 0.7288939636500611
User 121555 AUC after training: 0.7276462002071757
User 121555 does not improve AUC. Reverting changes.
Training on augumented user 130296 33/50 current_auc = 0.7288939636500611
User 130296 AUC after training: 0.7287997928241832
User 130296 does not improve AUC. Reverting changes.
Training on augumented user 12135 34/50 current_auc = 0.7288939636500611
User 12135 AUC after training: 0.7287409360580092
User 12135 does not improve AUC. Reverting changes.
Training on augumented user 37974 35/50 current_auc = 0.7288939636500611
User 37974 AUC after training: 0.7287762501177135
User 37974 does not improve AUC. Reverting changes.
Training on augumented user 55081 36/50 current_auc = 0.7288939636500611
User 55081 AUC after training: 0.7287291647047744
User 55081 does not improve AUC. Reverting changes.
Training on augumented user 101763 37/50 current_auc = 0.7288939636500611
User 101763 AUC after training: 0.7283171673415576
User 101763 does not improve AUC. Reverting changes.
Training on augumented user 102734 38/50 current_auc = 0.7288939636500611
User 102734 AUC after training: 0.728858649590357
User 102734 does not improve AUC. Reverting changes.
Training on augumented user 111699 39/50 current_auc = 0.7288939636500611
User 111699 AUC after training: 0.7289763631227045
User 111699 improves AUC. Keeping the model.
Training on augumented user 56993 40/50 current_auc = 0.7289763631227045
User 56993 AUC after training: 0.7286703079386007
User 56993 does not improve AUC. Reverting changes.
Training on augumented user 636 41/50 current_auc = 0.7289763631227045
User 636 AUC after training: 0.7284937376400791
User 636 does not improve AUC. Reverting changes.
Training on augumented user 104959 42/50 current_auc = 0.7289763631227045
User 104959 AUC after training: 0.7290234485356436
User 104959 improves AUC. Keeping the model.
Training on augumented user 109580 43/50 current_auc = 0.7290234485356436
User 109580 AUC after training: 0.7288821922968264
User 109580 does not improve AUC. Reverting changes.
Training on augumented user 34867 44/50 current_auc = 0.7290234485356436
User 34867 AUC after training: 0.7290940766550522
User 34867 improves AUC. Keeping the model.
Training on augumented user 33849 45/50 current_auc = 0.7290940766550522
User 33849 AUC after training: 0.728952820416235
User 33849 does not improve AUC. Reverting changes.
Training on augumented user 97742 46/50 current_auc = 0.7290940766550522
User 97742 AUC after training: 0.7291882474809304
User 97742 improves AUC. Keeping the model.
Training on augumented user 41935 47/50 current_auc = 0.7291882474809304
User 41935 AUC after training: 0.7289057350032959
User 41935 does not improve AUC. Reverting changes.
Training on augumented user 94530 48/50 current_auc = 0.7291882474809304
User 94530 AUC after training: 0.7290469912421131
User 94530 does not improve AUC. Reverting changes.
Training on augumented user 103313 49/50 current_auc = 0.7291882474809304
User 103313 AUC after training: 0.7291647047744608
User 103313 does not improve AUC. Reverting changes.
[2024-12-02 17:49:46.649660] start test user 109955 22/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:49:47.449108] start test user 109955 22/567 recall augumented users by random, augumented_users = [47976, 45089, 37180, 61106, 62728, 17106, 90102, 95008, 107806, 123263, 133809, 50901, 77217, 126435, 59919, 111597, 40032, 103687, 120010, 73846, 10404, 123505, 116787, 10071, 3200, 78525, 119977, 77472, 102022, 36128, 102158, 104647, 36804, 87693, 51377, 86762, 97223, 51115, 47906, 106696, 11128, 18013, 11544, 20889, 122991, 107989, 39779, 42899, 116458, 53884]
[2024-12-02 17:49:47.464275] user = 109955 Cloud 22/567
[2024-12-02 17:49:47.475437] user = 109955 Local 22/567
[2024-12-02 17:49:47.517453] user = 109955 Local+ 22/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:49:49.513382] user = 109955 MPDA- 22/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7126436781609196
Training on augumented user 47976 0/50 current_auc = 0.7126436781609196
User 47976 AUC after training: 0.7126436781609196
User 47976 does not improve AUC. Reverting changes.
Training on augumented user 45089 1/50 current_auc = 0.7126436781609196
User 45089 AUC after training: 0.7155172413793104
User 45089 improves AUC. Keeping the model.
Training on augumented user 37180 2/50 current_auc = 0.7155172413793104
User 37180 AUC after training: 0.7183908045977011
User 37180 improves AUC. Keeping the model.
Training on augumented user 61106 3/50 current_auc = 0.7183908045977011
User 61106 AUC after training: 0.7183908045977011
User 61106 does not improve AUC. Reverting changes.
Training on augumented user 62728 4/50 current_auc = 0.7183908045977011
User 62728 AUC after training: 0.7155172413793103
User 62728 does not improve AUC. Reverting changes.
Training on augumented user 17106 5/50 current_auc = 0.7183908045977011
User 17106 AUC after training: 0.7126436781609196
User 17106 does not improve AUC. Reverting changes.
Training on augumented user 90102 6/50 current_auc = 0.7183908045977011
User 90102 AUC after training: 0.7155172413793103
User 90102 does not improve AUC. Reverting changes.
Training on augumented user 95008 7/50 current_auc = 0.7183908045977011
User 95008 AUC after training: 0.7155172413793103
User 95008 does not improve AUC. Reverting changes.
Training on augumented user 107806 8/50 current_auc = 0.7183908045977011
User 107806 AUC after training: 0.7155172413793104
User 107806 does not improve AUC. Reverting changes.
Training on augumented user 123263 9/50 current_auc = 0.7183908045977011
User 123263 AUC after training: 0.7126436781609196
User 123263 does not improve AUC. Reverting changes.
Training on augumented user 133809 10/50 current_auc = 0.7183908045977011
User 133809 AUC after training: 0.7126436781609196
User 133809 does not improve AUC. Reverting changes.
Training on augumented user 50901 11/50 current_auc = 0.7183908045977011
User 50901 AUC after training: 0.7155172413793104
User 50901 does not improve AUC. Reverting changes.
Training on augumented user 77217 12/50 current_auc = 0.7183908045977011
User 77217 AUC after training: 0.7155172413793103
User 77217 does not improve AUC. Reverting changes.
Training on augumented user 126435 13/50 current_auc = 0.7183908045977011
User 126435 AUC after training: 0.7183908045977011
User 126435 does not improve AUC. Reverting changes.
Training on augumented user 59919 14/50 current_auc = 0.7183908045977011
User 59919 AUC after training: 0.7097701149425287
User 59919 does not improve AUC. Reverting changes.
Training on augumented user 111597 15/50 current_auc = 0.7183908045977011
User 111597 AUC after training: 0.7097701149425287
User 111597 does not improve AUC. Reverting changes.
Training on augumented user 40032 16/50 current_auc = 0.7183908045977011
User 40032 AUC after training: 0.7126436781609196
User 40032 does not improve AUC. Reverting changes.
Training on augumented user 103687 17/50 current_auc = 0.7183908045977011
User 103687 AUC after training: 0.7126436781609196
User 103687 does not improve AUC. Reverting changes.
Training on augumented user 120010 18/50 current_auc = 0.7183908045977011
User 120010 AUC after training: 0.7183908045977011
User 120010 does not improve AUC. Reverting changes.
Training on augumented user 73846 19/50 current_auc = 0.7183908045977011
User 73846 AUC after training: 0.7126436781609196
User 73846 does not improve AUC. Reverting changes.
Training on augumented user 10404 20/50 current_auc = 0.7183908045977011
User 10404 AUC after training: 0.7155172413793104
User 10404 does not improve AUC. Reverting changes.
Training on augumented user 123505 21/50 current_auc = 0.7183908045977011
User 123505 AUC after training: 0.7126436781609196
User 123505 does not improve AUC. Reverting changes.
Training on augumented user 116787 22/50 current_auc = 0.7183908045977011
User 116787 AUC after training: 0.7126436781609196
User 116787 does not improve AUC. Reverting changes.
Training on augumented user 10071 23/50 current_auc = 0.7183908045977011
User 10071 AUC after training: 0.7155172413793103
User 10071 does not improve AUC. Reverting changes.
Training on augumented user 3200 24/50 current_auc = 0.7183908045977011
User 3200 AUC after training: 0.7155172413793104
User 3200 does not improve AUC. Reverting changes.
Training on augumented user 78525 25/50 current_auc = 0.7183908045977011
User 78525 AUC after training: 0.7183908045977011
User 78525 does not improve AUC. Reverting changes.
Training on augumented user 119977 26/50 current_auc = 0.7183908045977011
User 119977 AUC after training: 0.7097701149425287
User 119977 does not improve AUC. Reverting changes.
Training on augumented user 77472 27/50 current_auc = 0.7183908045977011
User 77472 AUC after training: 0.7097701149425287
User 77472 does not improve AUC. Reverting changes.
Training on augumented user 102022 28/50 current_auc = 0.7183908045977011
User 102022 AUC after training: 0.7155172413793104
User 102022 does not improve AUC. Reverting changes.
Training on augumented user 36128 29/50 current_auc = 0.7183908045977011
User 36128 AUC after training: 0.7126436781609196
User 36128 does not improve AUC. Reverting changes.
Training on augumented user 102158 30/50 current_auc = 0.7183908045977011
User 102158 AUC after training: 0.7155172413793103
User 102158 does not improve AUC. Reverting changes.
Training on augumented user 104647 31/50 current_auc = 0.7183908045977011
User 104647 AUC after training: 0.7155172413793103
User 104647 does not improve AUC. Reverting changes.
Training on augumented user 36804 32/50 current_auc = 0.7183908045977011
User 36804 AUC after training: 0.7155172413793104
User 36804 does not improve AUC. Reverting changes.
Training on augumented user 87693 33/50 current_auc = 0.7183908045977011
User 87693 AUC after training: 0.7155172413793103
User 87693 does not improve AUC. Reverting changes.
Training on augumented user 51377 34/50 current_auc = 0.7183908045977011
User 51377 AUC after training: 0.7097701149425287
User 51377 does not improve AUC. Reverting changes.
Training on augumented user 86762 35/50 current_auc = 0.7183908045977011
User 86762 AUC after training: 0.7183908045977011
User 86762 does not improve AUC. Reverting changes.
Training on augumented user 97223 36/50 current_auc = 0.7183908045977011
User 97223 AUC after training: 0.7126436781609196
User 97223 does not improve AUC. Reverting changes.
Training on augumented user 51115 37/50 current_auc = 0.7183908045977011
User 51115 AUC after training: 0.7155172413793103
User 51115 does not improve AUC. Reverting changes.
Training on augumented user 47906 38/50 current_auc = 0.7183908045977011
User 47906 AUC after training: 0.7126436781609196
User 47906 does not improve AUC. Reverting changes.
Training on augumented user 106696 39/50 current_auc = 0.7183908045977011
User 106696 AUC after training: 0.7155172413793103
User 106696 does not improve AUC. Reverting changes.
Training on augumented user 11128 40/50 current_auc = 0.7183908045977011
User 11128 AUC after training: 0.7155172413793104
User 11128 does not improve AUC. Reverting changes.
Training on augumented user 18013 41/50 current_auc = 0.7183908045977011
User 18013 AUC after training: 0.7183908045977011
User 18013 does not improve AUC. Reverting changes.
Training on augumented user 11544 42/50 current_auc = 0.7183908045977011
User 11544 AUC after training: 0.7126436781609196
User 11544 does not improve AUC. Reverting changes.
Training on augumented user 20889 43/50 current_auc = 0.7183908045977011
User 20889 AUC after training: 0.7097701149425287
User 20889 does not improve AUC. Reverting changes.
Training on augumented user 122991 44/50 current_auc = 0.7183908045977011
User 122991 AUC after training: 0.7155172413793103
User 122991 does not improve AUC. Reverting changes.
Training on augumented user 107989 45/50 current_auc = 0.7183908045977011
User 107989 AUC after training: 0.7155172413793103
User 107989 does not improve AUC. Reverting changes.
Training on augumented user 39779 46/50 current_auc = 0.7183908045977011
User 39779 AUC after training: 0.7183908045977011
User 39779 does not improve AUC. Reverting changes.
Training on augumented user 42899 47/50 current_auc = 0.7183908045977011
User 42899 AUC after training: 0.7126436781609196
User 42899 does not improve AUC. Reverting changes.
Training on augumented user 116458 48/50 current_auc = 0.7183908045977011
User 116458 AUC after training: 0.7183908045977011
User 116458 does not improve AUC. Reverting changes.
Training on augumented user 53884 49/50 current_auc = 0.7183908045977011
User 53884 AUC after training: 0.7126436781609196
User 53884 does not improve AUC. Reverting changes.
[2024-12-02 17:50:16.170857] start test user 109965 23/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:50:16.582907] start test user 109965 23/567 recall augumented users by random, augumented_users = [59498, 105887, 122938, 109118, 102453, 63894, 125960, 133989, 130956, 98839, 1352, 20285, 12196, 87845, 59330, 118369, 44686, 92602, 1035, 107060, 64952, 111675, 19386, 50540, 107316, 53695, 2646, 124914, 71940, 67165, 115314, 63431, 99551, 61060, 99659, 92731, 45505, 1225, 111274, 84062, 125883, 111331, 10974, 20067, 39795, 96600, 128990, 96531, 4751, 99525]
[2024-12-02 17:50:16.598278] user = 109965 Cloud 23/567
[2024-12-02 17:50:16.607979] user = 109965 Local 23/567
[2024-12-02 17:50:16.662168] user = 109965 Local+ 23/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:50:19.306259] user = 109965 MPDA- 23/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8579545454545454
Training on augumented user 59498 0/50 current_auc = 0.8579545454545454
User 59498 AUC after training: 0.8579545454545454
User 59498 does not improve AUC. Reverting changes.
Training on augumented user 105887 1/50 current_auc = 0.8579545454545454
User 105887 AUC after training: 0.8636363636363636
User 105887 improves AUC. Keeping the model.
Training on augumented user 122938 2/50 current_auc = 0.8636363636363636
User 122938 AUC after training: 0.8636363636363636
User 122938 does not improve AUC. Reverting changes.
Training on augumented user 109118 3/50 current_auc = 0.8636363636363636
User 109118 AUC after training: 0.8636363636363636
User 109118 does not improve AUC. Reverting changes.
Training on augumented user 102453 4/50 current_auc = 0.8636363636363636
User 102453 AUC after training: 0.8693181818181819
User 102453 improves AUC. Keeping the model.
Training on augumented user 63894 5/50 current_auc = 0.8693181818181819
User 63894 AUC after training: 0.8693181818181819
User 63894 does not improve AUC. Reverting changes.
Training on augumented user 125960 6/50 current_auc = 0.8693181818181819
User 125960 AUC after training: 0.875
User 125960 improves AUC. Keeping the model.
Training on augumented user 133989 7/50 current_auc = 0.875
User 133989 AUC after training: 0.8806818181818181
User 133989 improves AUC. Keeping the model.
Training on augumented user 130956 8/50 current_auc = 0.8806818181818181
User 130956 AUC after training: 0.875
User 130956 does not improve AUC. Reverting changes.
Training on augumented user 98839 9/50 current_auc = 0.8806818181818181
User 98839 AUC after training: 0.8806818181818181
User 98839 does not improve AUC. Reverting changes.
Training on augumented user 1352 10/50 current_auc = 0.8806818181818181
User 1352 AUC after training: 0.8806818181818181
User 1352 does not improve AUC. Reverting changes.
Training on augumented user 20285 11/50 current_auc = 0.8806818181818181
User 20285 AUC after training: 0.875
User 20285 does not improve AUC. Reverting changes.
Training on augumented user 12196 12/50 current_auc = 0.8806818181818181
User 12196 AUC after training: 0.8806818181818181
User 12196 does not improve AUC. Reverting changes.
Training on augumented user 87845 13/50 current_auc = 0.8806818181818181
User 87845 AUC after training: 0.8806818181818181
User 87845 does not improve AUC. Reverting changes.
Training on augumented user 59330 14/50 current_auc = 0.8806818181818181
User 59330 AUC after training: 0.875
User 59330 does not improve AUC. Reverting changes.
Training on augumented user 118369 15/50 current_auc = 0.8806818181818181
User 118369 AUC after training: 0.8806818181818181
User 118369 does not improve AUC. Reverting changes.
Training on augumented user 44686 16/50 current_auc = 0.8806818181818181
User 44686 AUC after training: 0.8806818181818181
User 44686 does not improve AUC. Reverting changes.
Training on augumented user 92602 17/50 current_auc = 0.8806818181818181
User 92602 AUC after training: 0.8806818181818181
User 92602 does not improve AUC. Reverting changes.
Training on augumented user 1035 18/50 current_auc = 0.8806818181818181
User 1035 AUC after training: 0.8806818181818181
User 1035 does not improve AUC. Reverting changes.
Training on augumented user 107060 19/50 current_auc = 0.8806818181818181
User 107060 AUC after training: 0.8806818181818181
User 107060 does not improve AUC. Reverting changes.
Training on augumented user 64952 20/50 current_auc = 0.8806818181818181
User 64952 AUC after training: 0.8806818181818181
User 64952 does not improve AUC. Reverting changes.
Training on augumented user 111675 21/50 current_auc = 0.8806818181818181
User 111675 AUC after training: 0.8806818181818181
User 111675 does not improve AUC. Reverting changes.
Training on augumented user 19386 22/50 current_auc = 0.8806818181818181
User 19386 AUC after training: 0.8806818181818181
User 19386 does not improve AUC. Reverting changes.
Training on augumented user 50540 23/50 current_auc = 0.8806818181818181
User 50540 AUC after training: 0.8806818181818181
User 50540 does not improve AUC. Reverting changes.
Training on augumented user 107316 24/50 current_auc = 0.8806818181818181
User 107316 AUC after training: 0.8806818181818181
User 107316 does not improve AUC. Reverting changes.
Training on augumented user 53695 25/50 current_auc = 0.8806818181818181
User 53695 AUC after training: 0.875
User 53695 does not improve AUC. Reverting changes.
Training on augumented user 2646 26/50 current_auc = 0.8806818181818181
User 2646 AUC after training: 0.8806818181818181
User 2646 does not improve AUC. Reverting changes.
Training on augumented user 124914 27/50 current_auc = 0.8806818181818181
User 124914 AUC after training: 0.8806818181818181
User 124914 does not improve AUC. Reverting changes.
Training on augumented user 71940 28/50 current_auc = 0.8806818181818181
User 71940 AUC after training: 0.8806818181818181
User 71940 does not improve AUC. Reverting changes.
Training on augumented user 67165 29/50 current_auc = 0.8806818181818181
User 67165 AUC after training: 0.8806818181818181
User 67165 does not improve AUC. Reverting changes.
Training on augumented user 115314 30/50 current_auc = 0.8806818181818181
User 115314 AUC after training: 0.8863636363636364
User 115314 improves AUC. Keeping the model.
Training on augumented user 63431 31/50 current_auc = 0.8863636363636364
User 63431 AUC after training: 0.8863636363636364
User 63431 does not improve AUC. Reverting changes.
Training on augumented user 99551 32/50 current_auc = 0.8863636363636364
User 99551 AUC after training: 0.8806818181818181
User 99551 does not improve AUC. Reverting changes.
Training on augumented user 61060 33/50 current_auc = 0.8863636363636364
User 61060 AUC after training: 0.8863636363636364
User 61060 does not improve AUC. Reverting changes.
Training on augumented user 99659 34/50 current_auc = 0.8863636363636364
User 99659 AUC after training: 0.8863636363636364
User 99659 does not improve AUC. Reverting changes.
Training on augumented user 92731 35/50 current_auc = 0.8863636363636364
User 92731 AUC after training: 0.8863636363636364
User 92731 does not improve AUC. Reverting changes.
Training on augumented user 45505 36/50 current_auc = 0.8863636363636364
User 45505 AUC after training: 0.8863636363636364
User 45505 does not improve AUC. Reverting changes.
Training on augumented user 1225 37/50 current_auc = 0.8863636363636364
User 1225 AUC after training: 0.8863636363636364
User 1225 does not improve AUC. Reverting changes.
Training on augumented user 111274 38/50 current_auc = 0.8863636363636364
User 111274 AUC after training: 0.8863636363636364
User 111274 does not improve AUC. Reverting changes.
Training on augumented user 84062 39/50 current_auc = 0.8863636363636364
User 84062 AUC after training: 0.8863636363636364
User 84062 does not improve AUC. Reverting changes.
Training on augumented user 125883 40/50 current_auc = 0.8863636363636364
User 125883 AUC after training: 0.8806818181818181
User 125883 does not improve AUC. Reverting changes.
Training on augumented user 111331 41/50 current_auc = 0.8863636363636364
User 111331 AUC after training: 0.8806818181818181
User 111331 does not improve AUC. Reverting changes.
Training on augumented user 10974 42/50 current_auc = 0.8863636363636364
User 10974 AUC after training: 0.8920454545454546
User 10974 improves AUC. Keeping the model.
Training on augumented user 20067 43/50 current_auc = 0.8920454545454546
User 20067 AUC after training: 0.8863636363636364
User 20067 does not improve AUC. Reverting changes.
Training on augumented user 39795 44/50 current_auc = 0.8920454545454546
User 39795 AUC after training: 0.8863636363636362
User 39795 does not improve AUC. Reverting changes.
Training on augumented user 96600 45/50 current_auc = 0.8920454545454546
User 96600 AUC after training: 0.8863636363636364
User 96600 does not improve AUC. Reverting changes.
Training on augumented user 128990 46/50 current_auc = 0.8920454545454546
User 128990 AUC after training: 0.8920454545454546
User 128990 does not improve AUC. Reverting changes.
Training on augumented user 96531 47/50 current_auc = 0.8920454545454546
User 96531 AUC after training: 0.8863636363636364
User 96531 does not improve AUC. Reverting changes.
Training on augumented user 4751 48/50 current_auc = 0.8920454545454546
User 4751 AUC after training: 0.8920454545454546
User 4751 does not improve AUC. Reverting changes.
Training on augumented user 99525 49/50 current_auc = 0.8920454545454546
User 99525 AUC after training: 0.8863636363636364
User 99525 does not improve AUC. Reverting changes.
[2024-12-02 17:50:47.910838] start test user 109995 24/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:50:48.472882] start test user 109995 24/567 recall augumented users by random, augumented_users = [7288, 112191, 49936, 26476, 17382, 138045, 117590, 88845, 62804, 55840, 193, 62160, 108883, 688, 48817, 120424, 81841, 109175, 96996, 28788, 94415, 58344, 133239, 37076, 45643, 137711, 119597, 100547, 82903, 20824, 108993, 51082, 57287, 110903, 41238, 81351, 102225, 65380, 74964, 125672, 124710, 80370, 62618, 73791, 31684, 18318, 134794, 120593, 25386, 68270]
[2024-12-02 17:50:48.490715] user = 109995 Cloud 24/567
[2024-12-02 17:50:48.501248] user = 109995 Local 24/567
[2024-12-02 17:50:48.566605] user = 109995 Local+ 24/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:50:51.561545] user = 109995 MPDA- 24/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7
Training on augumented user 7288 0/50 current_auc = 0.7
User 7288 AUC after training: 0.7
User 7288 does not improve AUC. Reverting changes.
Training on augumented user 112191 1/50 current_auc = 0.7
User 112191 AUC after training: 0.7
User 112191 does not improve AUC. Reverting changes.
Training on augumented user 49936 2/50 current_auc = 0.7
User 49936 AUC after training: 0.7
User 49936 does not improve AUC. Reverting changes.
Training on augumented user 26476 3/50 current_auc = 0.7
User 26476 AUC after training: 0.7
User 26476 does not improve AUC. Reverting changes.
Training on augumented user 17382 4/50 current_auc = 0.7
User 17382 AUC after training: 0.7
User 17382 does not improve AUC. Reverting changes.
Training on augumented user 138045 5/50 current_auc = 0.7
User 138045 AUC after training: 0.7
User 138045 does not improve AUC. Reverting changes.
Training on augumented user 117590 6/50 current_auc = 0.7
User 117590 AUC after training: 0.7
User 117590 does not improve AUC. Reverting changes.
Training on augumented user 88845 7/50 current_auc = 0.7
User 88845 AUC after training: 0.7
User 88845 does not improve AUC. Reverting changes.
Training on augumented user 62804 8/50 current_auc = 0.7
User 62804 AUC after training: 0.6666666666666666
User 62804 does not improve AUC. Reverting changes.
Training on augumented user 55840 9/50 current_auc = 0.7
User 55840 AUC after training: 0.7
User 55840 does not improve AUC. Reverting changes.
Training on augumented user 193 10/50 current_auc = 0.7
User 193 AUC after training: 0.7
User 193 does not improve AUC. Reverting changes.
Training on augumented user 62160 11/50 current_auc = 0.7
User 62160 AUC after training: 0.7
User 62160 does not improve AUC. Reverting changes.
Training on augumented user 108883 12/50 current_auc = 0.7
User 108883 AUC after training: 0.7
User 108883 does not improve AUC. Reverting changes.
Training on augumented user 688 13/50 current_auc = 0.7
User 688 AUC after training: 0.6666666666666666
User 688 does not improve AUC. Reverting changes.
Training on augumented user 48817 14/50 current_auc = 0.7
User 48817 AUC after training: 0.7
User 48817 does not improve AUC. Reverting changes.
Training on augumented user 120424 15/50 current_auc = 0.7
User 120424 AUC after training: 0.7
User 120424 does not improve AUC. Reverting changes.
Training on augumented user 81841 16/50 current_auc = 0.7
User 81841 AUC after training: 0.7
User 81841 does not improve AUC. Reverting changes.
Training on augumented user 109175 17/50 current_auc = 0.7
User 109175 AUC after training: 0.7
User 109175 does not improve AUC. Reverting changes.
Training on augumented user 96996 18/50 current_auc = 0.7
User 96996 AUC after training: 0.7
User 96996 does not improve AUC. Reverting changes.
Training on augumented user 28788 19/50 current_auc = 0.7
User 28788 AUC after training: 0.7
User 28788 does not improve AUC. Reverting changes.
Training on augumented user 94415 20/50 current_auc = 0.7
User 94415 AUC after training: 0.7
User 94415 does not improve AUC. Reverting changes.
Training on augumented user 58344 21/50 current_auc = 0.7
User 58344 AUC after training: 0.7
User 58344 does not improve AUC. Reverting changes.
Training on augumented user 133239 22/50 current_auc = 0.7
User 133239 AUC after training: 0.7
User 133239 does not improve AUC. Reverting changes.
Training on augumented user 37076 23/50 current_auc = 0.7
User 37076 AUC after training: 0.7
User 37076 does not improve AUC. Reverting changes.
Training on augumented user 45643 24/50 current_auc = 0.7
User 45643 AUC after training: 0.7
User 45643 does not improve AUC. Reverting changes.
Training on augumented user 137711 25/50 current_auc = 0.7
User 137711 AUC after training: 0.7
User 137711 does not improve AUC. Reverting changes.
Training on augumented user 119597 26/50 current_auc = 0.7
User 119597 AUC after training: 0.7
User 119597 does not improve AUC. Reverting changes.
Training on augumented user 100547 27/50 current_auc = 0.7
User 100547 AUC after training: 0.7
User 100547 does not improve AUC. Reverting changes.
Training on augumented user 82903 28/50 current_auc = 0.7
User 82903 AUC after training: 0.7
User 82903 does not improve AUC. Reverting changes.
Training on augumented user 20824 29/50 current_auc = 0.7
User 20824 AUC after training: 0.7
User 20824 does not improve AUC. Reverting changes.
Training on augumented user 108993 30/50 current_auc = 0.7
User 108993 AUC after training: 0.7
User 108993 does not improve AUC. Reverting changes.
Training on augumented user 51082 31/50 current_auc = 0.7
User 51082 AUC after training: 0.7
User 51082 does not improve AUC. Reverting changes.
Training on augumented user 57287 32/50 current_auc = 0.7
User 57287 AUC after training: 0.7
User 57287 does not improve AUC. Reverting changes.
Training on augumented user 110903 33/50 current_auc = 0.7
User 110903 AUC after training: 0.7
User 110903 does not improve AUC. Reverting changes.
Training on augumented user 41238 34/50 current_auc = 0.7
User 41238 AUC after training: 0.7
User 41238 does not improve AUC. Reverting changes.
Training on augumented user 81351 35/50 current_auc = 0.7
User 81351 AUC after training: 0.7
User 81351 does not improve AUC. Reverting changes.
Training on augumented user 102225 36/50 current_auc = 0.7
User 102225 AUC after training: 0.7
User 102225 does not improve AUC. Reverting changes.
Training on augumented user 65380 37/50 current_auc = 0.7
User 65380 AUC after training: 0.6666666666666666
User 65380 does not improve AUC. Reverting changes.
Training on augumented user 74964 38/50 current_auc = 0.7
User 74964 AUC after training: 0.7
User 74964 does not improve AUC. Reverting changes.
Training on augumented user 125672 39/50 current_auc = 0.7
User 125672 AUC after training: 0.7
User 125672 does not improve AUC. Reverting changes.
Training on augumented user 124710 40/50 current_auc = 0.7
User 124710 AUC after training: 0.7
User 124710 does not improve AUC. Reverting changes.
Training on augumented user 80370 41/50 current_auc = 0.7
User 80370 AUC after training: 0.7
User 80370 does not improve AUC. Reverting changes.
Training on augumented user 62618 42/50 current_auc = 0.7
User 62618 AUC after training: 0.7
User 62618 does not improve AUC. Reverting changes.
Training on augumented user 73791 43/50 current_auc = 0.7
User 73791 AUC after training: 0.7
User 73791 does not improve AUC. Reverting changes.
Training on augumented user 31684 44/50 current_auc = 0.7
User 31684 AUC after training: 0.7
User 31684 does not improve AUC. Reverting changes.
Training on augumented user 18318 45/50 current_auc = 0.7
User 18318 AUC after training: 0.7
User 18318 does not improve AUC. Reverting changes.
Training on augumented user 134794 46/50 current_auc = 0.7
User 134794 AUC after training: 0.7
User 134794 does not improve AUC. Reverting changes.
Training on augumented user 120593 47/50 current_auc = 0.7
User 120593 AUC after training: 0.7
User 120593 does not improve AUC. Reverting changes.
Training on augumented user 25386 48/50 current_auc = 0.7
User 25386 AUC after training: 0.7
User 25386 does not improve AUC. Reverting changes.
Training on augumented user 68270 49/50 current_auc = 0.7
User 68270 AUC after training: 0.7
User 68270 does not improve AUC. Reverting changes.
[2024-12-02 17:51:23.778986] start test user 109996 25/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:51:24.286861] start test user 109996 25/567 recall augumented users by random, augumented_users = [12440, 89842, 72031, 100463, 2736, 12705, 124163, 56177, 8454, 96286, 52545, 66056, 80201, 5892, 64673, 122294, 802, 65638, 110954, 27691, 136239, 84626, 109176, 81238, 104505, 124051, 30076, 63467, 65919, 10877, 121947, 54662, 61036, 39278, 6773, 12739, 42609, 123630, 126233, 87019, 19656, 50352, 94975, 105421, 115496, 39118, 133199, 49860, 66189, 10640]
[2024-12-02 17:51:24.307091] user = 109996 Cloud 25/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:51:24.313075] user = 109996 Local 25/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:51:24.373400] user = 109996 Local+ 25/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:51:27.583352] user = 109996 MPDA- 25/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 12440 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12440 AUC after training: 0.5
User 12440 does not improve AUC. Reverting changes.
Training on augumented user 89842 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89842 AUC after training: 0.5
User 89842 does not improve AUC. Reverting changes.
Training on augumented user 72031 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72031 AUC after training: 0.5
User 72031 does not improve AUC. Reverting changes.
Training on augumented user 100463 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100463 AUC after training: 0.5
User 100463 does not improve AUC. Reverting changes.
Training on augumented user 2736 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2736 AUC after training: 0.5
User 2736 does not improve AUC. Reverting changes.
Training on augumented user 12705 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12705 AUC after training: 0.5
User 12705 does not improve AUC. Reverting changes.
Training on augumented user 124163 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124163 AUC after training: 0.5
User 124163 does not improve AUC. Reverting changes.
Training on augumented user 56177 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56177 AUC after training: 0.5
User 56177 does not improve AUC. Reverting changes.
Training on augumented user 8454 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8454 AUC after training: 0.5
User 8454 does not improve AUC. Reverting changes.
Training on augumented user 96286 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96286 AUC after training: 0.5
User 96286 does not improve AUC. Reverting changes.
Training on augumented user 52545 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 52545 AUC after training: 0.5
User 52545 does not improve AUC. Reverting changes.
Training on augumented user 66056 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66056 AUC after training: 0.5
User 66056 does not improve AUC. Reverting changes.
Training on augumented user 80201 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80201 AUC after training: 0.5
User 80201 does not improve AUC. Reverting changes.
Training on augumented user 5892 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5892 AUC after training: 0.5
User 5892 does not improve AUC. Reverting changes.
Training on augumented user 64673 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64673 AUC after training: 0.5
User 64673 does not improve AUC. Reverting changes.
Training on augumented user 122294 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122294 AUC after training: 0.5
User 122294 does not improve AUC. Reverting changes.
Training on augumented user 802 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 802 AUC after training: 0.5
User 802 does not improve AUC. Reverting changes.
Training on augumented user 65638 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 65638 AUC after training: 0.5
User 65638 does not improve AUC. Reverting changes.
Training on augumented user 110954 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110954 AUC after training: 0.5
User 110954 does not improve AUC. Reverting changes.
Training on augumented user 27691 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27691 AUC after training: 0.5
User 27691 does not improve AUC. Reverting changes.
Training on augumented user 136239 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136239 AUC after training: 0.5
User 136239 does not improve AUC. Reverting changes.
Training on augumented user 84626 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84626 AUC after training: 0.5
User 84626 does not improve AUC. Reverting changes.
Training on augumented user 109176 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109176 AUC after training: 0.5
User 109176 does not improve AUC. Reverting changes.
Training on augumented user 81238 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81238 AUC after training: 0.5
User 81238 does not improve AUC. Reverting changes.
Training on augumented user 104505 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104505 AUC after training: 0.5
User 104505 does not improve AUC. Reverting changes.
Training on augumented user 124051 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124051 AUC after training: 0.5
User 124051 does not improve AUC. Reverting changes.
Training on augumented user 30076 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30076 AUC after training: 0.5
User 30076 does not improve AUC. Reverting changes.
Training on augumented user 63467 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63467 AUC after training: 0.5
User 63467 does not improve AUC. Reverting changes.
Training on augumented user 65919 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 65919 AUC after training: 0.5
User 65919 does not improve AUC. Reverting changes.
Training on augumented user 10877 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10877 AUC after training: 0.5
User 10877 does not improve AUC. Reverting changes.
Training on augumented user 121947 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121947 AUC after training: 0.5
User 121947 does not improve AUC. Reverting changes.
Training on augumented user 54662 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54662 AUC after training: 0.5
User 54662 does not improve AUC. Reverting changes.
Training on augumented user 61036 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61036 AUC after training: 0.5
User 61036 does not improve AUC. Reverting changes.
Training on augumented user 39278 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 39278 AUC after training: 0.5
User 39278 does not improve AUC. Reverting changes.
Training on augumented user 6773 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6773 AUC after training: 0.5
User 6773 does not improve AUC. Reverting changes.
Training on augumented user 12739 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12739 AUC after training: 0.5
User 12739 does not improve AUC. Reverting changes.
Training on augumented user 42609 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42609 AUC after training: 0.5
User 42609 does not improve AUC. Reverting changes.
Training on augumented user 123630 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123630 AUC after training: 0.5
User 123630 does not improve AUC. Reverting changes.
Training on augumented user 126233 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126233 AUC after training: 0.5
User 126233 does not improve AUC. Reverting changes.
Training on augumented user 87019 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87019 AUC after training: 0.5
User 87019 does not improve AUC. Reverting changes.
Training on augumented user 19656 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19656 AUC after training: 0.5
User 19656 does not improve AUC. Reverting changes.
Training on augumented user 50352 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50352 AUC after training: 0.5
User 50352 does not improve AUC. Reverting changes.
Training on augumented user 94975 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94975 AUC after training: 0.5
User 94975 does not improve AUC. Reverting changes.
Training on augumented user 105421 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105421 AUC after training: 0.5
User 105421 does not improve AUC. Reverting changes.
Training on augumented user 115496 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115496 AUC after training: 0.5
User 115496 does not improve AUC. Reverting changes.
Training on augumented user 39118 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 39118 AUC after training: 0.5
User 39118 does not improve AUC. Reverting changes.
Training on augumented user 133199 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133199 AUC after training: 0.5
User 133199 does not improve AUC. Reverting changes.
Training on augumented user 49860 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49860 AUC after training: 0.5
User 49860 does not improve AUC. Reverting changes.
Training on augumented user 66189 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66189 AUC after training: 0.5
User 66189 does not improve AUC. Reverting changes.
Training on augumented user 10640 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10640 AUC after training: 0.5
User 10640 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:51:56.942167] start test user 110004 26/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:51:57.895210] start test user 110004 26/567 recall augumented users by random, augumented_users = [25156, 27120, 65829, 109308, 52279, 21261, 119138, 73464, 1645, 39999, 64947, 39009, 51393, 110694, 54797, 104601, 34535, 112193, 45112, 138061, 56109, 37363, 56136, 80130, 92302, 109747, 119475, 62760, 125956, 28755, 90599, 136940, 12682, 66748, 100724, 2422, 27183, 113012, 56888, 102723, 54540, 208, 62807, 82899, 113595, 401, 104306, 82981, 73926, 25442]
[2024-12-02 17:51:57.912600] user = 110004 Cloud 26/567
[2024-12-02 17:51:57.935518] user = 110004 Local 26/567
[2024-12-02 17:51:58.238358] user = 110004 Local+ 26/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:52:01.312718] user = 110004 MPDA- 26/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.49473909324208726
Training on augumented user 25156 0/50 current_auc = 0.49473909324208726
User 25156 AUC after training: 0.49414029084687766
User 25156 does not improve AUC. Reverting changes.
Training on augumented user 27120 1/50 current_auc = 0.49473909324208726
User 27120 AUC after training: 0.49491017964071854
User 27120 improves AUC. Keeping the model.
Training on augumented user 65829 2/50 current_auc = 0.49491017964071854
User 65829 AUC after training: 0.49482463644140284
User 65829 does not improve AUC. Reverting changes.
Training on augumented user 109308 3/50 current_auc = 0.49491017964071854
User 109308 AUC after training: 0.49217279726261765
User 109308 does not improve AUC. Reverting changes.
Training on augumented user 52279 4/50 current_auc = 0.49491017964071854
User 52279 AUC after training: 0.4948246364414029
User 52279 does not improve AUC. Reverting changes.
Training on augumented user 21261 5/50 current_auc = 0.49491017964071854
User 21261 AUC after training: 0.4944824636441403
User 21261 does not improve AUC. Reverting changes.
Training on augumented user 119138 6/50 current_auc = 0.49491017964071854
User 119138 AUC after training: 0.4949957228400342
User 119138 improves AUC. Keeping the model.
Training on augumented user 73464 7/50 current_auc = 0.4949957228400342
User 73464 AUC after training: 0.4947390932420872
User 73464 does not improve AUC. Reverting changes.
Training on augumented user 1645 8/50 current_auc = 0.4949957228400342
User 1645 AUC after training: 0.49414029084687766
User 1645 does not improve AUC. Reverting changes.
Training on augumented user 39999 9/50 current_auc = 0.4949957228400342
User 39999 AUC after training: 0.4944824636441403
User 39999 does not improve AUC. Reverting changes.
Training on augumented user 64947 10/50 current_auc = 0.4949957228400342
User 64947 AUC after training: 0.4950812660393498
User 64947 improves AUC. Keeping the model.
Training on augumented user 39009 11/50 current_auc = 0.4950812660393498
User 39009 AUC after training: 0.49491017964071854
User 39009 does not improve AUC. Reverting changes.
Training on augumented user 51393 12/50 current_auc = 0.4950812660393498
User 51393 AUC after training: 0.4950812660393498
User 51393 does not improve AUC. Reverting changes.
Training on augumented user 110694 13/50 current_auc = 0.4950812660393498
User 110694 AUC after training: 0.4950812660393498
User 110694 does not improve AUC. Reverting changes.
Training on augumented user 54797 14/50 current_auc = 0.4950812660393498
User 54797 AUC after training: 0.4949957228400342
User 54797 does not improve AUC. Reverting changes.
Training on augumented user 104601 15/50 current_auc = 0.4950812660393498
User 104601 AUC after training: 0.49533789563729685
User 104601 improves AUC. Keeping the model.
Training on augumented user 34535 16/50 current_auc = 0.49533789563729685
User 34535 AUC after training: 0.4948246364414029
User 34535 does not improve AUC. Reverting changes.
Training on augumented user 112193 17/50 current_auc = 0.49533789563729685
User 112193 AUC after training: 0.4950812660393499
User 112193 does not improve AUC. Reverting changes.
Training on augumented user 45112 18/50 current_auc = 0.49533789563729685
User 45112 AUC after training: 0.4918733960650128
User 45112 does not improve AUC. Reverting changes.
Training on augumented user 138061 19/50 current_auc = 0.49533789563729685
User 138061 AUC after training: 0.49499572284003424
User 138061 does not improve AUC. Reverting changes.
Training on augumented user 56109 20/50 current_auc = 0.49533789563729685
User 56109 AUC after training: 0.4959366980325064
User 56109 improves AUC. Keeping the model.
Training on augumented user 37363 21/50 current_auc = 0.4959366980325064
User 37363 AUC after training: 0.49473909324208726
User 37363 does not improve AUC. Reverting changes.
Training on augumented user 56136 22/50 current_auc = 0.4959366980325064
User 56136 AUC after training: 0.4971770744225834
User 56136 improves AUC. Keeping the model.
Training on augumented user 80130 23/50 current_auc = 0.4971770744225834
User 80130 AUC after training: 0.4976047904191617
User 80130 improves AUC. Keeping the model.
Training on augumented user 92302 24/50 current_auc = 0.4976047904191617
User 92302 AUC after training: 0.49692044482463643
User 92302 does not improve AUC. Reverting changes.
Training on augumented user 109747 25/50 current_auc = 0.4976047904191617
User 109747 AUC after training: 0.4974337040205304
User 109747 does not improve AUC. Reverting changes.
Training on augumented user 119475 26/50 current_auc = 0.4976047904191617
User 119475 AUC after training: 0.49820359281437127
User 119475 improves AUC. Keeping the model.
Training on augumented user 62760 27/50 current_auc = 0.49820359281437127
User 62760 AUC after training: 0.49666381522668945
User 62760 does not improve AUC. Reverting changes.
Training on augumented user 125956 28/50 current_auc = 0.49820359281437127
User 125956 AUC after training: 0.4984602224123182
User 125956 improves AUC. Keeping the model.
Training on augumented user 28755 29/50 current_auc = 0.4984602224123182
User 28755 AUC after training: 0.4978614200171086
User 28755 does not improve AUC. Reverting changes.
Training on augumented user 90599 30/50 current_auc = 0.4984602224123182
User 90599 AUC after training: 0.49803250641574
User 90599 does not improve AUC. Reverting changes.
Training on augumented user 136940 31/50 current_auc = 0.4984602224123182
User 136940 AUC after training: 0.496535500427716
User 136940 does not improve AUC. Reverting changes.
Training on augumented user 12682 32/50 current_auc = 0.4984602224123182
User 12682 AUC after training: 0.4983746792130026
User 12682 does not improve AUC. Reverting changes.
Training on augumented user 66748 33/50 current_auc = 0.4984602224123182
User 66748 AUC after training: 0.49751924721984603
User 66748 does not improve AUC. Reverting changes.
Training on augumented user 100724 34/50 current_auc = 0.4984602224123182
User 100724 AUC after training: 0.49794696321642423
User 100724 does not improve AUC. Reverting changes.
Training on augumented user 2422 35/50 current_auc = 0.4984602224123182
User 2422 AUC after training: 0.49811804961505557
User 2422 does not improve AUC. Reverting changes.
Training on augumented user 27183 36/50 current_auc = 0.4984602224123182
User 27183 AUC after training: 0.497775876817793
User 27183 does not improve AUC. Reverting changes.
Training on augumented user 113012 37/50 current_auc = 0.4984602224123182
User 113012 AUC after training: 0.49777587681779295
User 113012 does not improve AUC. Reverting changes.
Training on augumented user 56888 38/50 current_auc = 0.4984602224123182
User 56888 AUC after training: 0.4968349016253208
User 56888 does not improve AUC. Reverting changes.
Training on augumented user 102723 39/50 current_auc = 0.4984602224123182
User 102723 AUC after training: 0.49803250641574
User 102723 does not improve AUC. Reverting changes.
Training on augumented user 54540 40/50 current_auc = 0.4984602224123182
User 54540 AUC after training: 0.4981180496150557
User 54540 does not improve AUC. Reverting changes.
Training on augumented user 208 41/50 current_auc = 0.4984602224123182
User 208 AUC after training: 0.5017108639863131
User 208 improves AUC. Keeping the model.
Training on augumented user 62807 42/50 current_auc = 0.5017108639863131
User 62807 AUC after training: 0.5015397775876819
User 62807 does not improve AUC. Reverting changes.
Training on augumented user 82899 43/50 current_auc = 0.5017108639863131
User 82899 AUC after training: 0.5012831479897348
User 82899 does not improve AUC. Reverting changes.
Training on augumented user 113595 44/50 current_auc = 0.5017108639863131
User 113595 AUC after training: 0.5014114627887083
User 113595 does not improve AUC. Reverting changes.
Training on augumented user 401 45/50 current_auc = 0.5017108639863131
User 401 AUC after training: 0.5016680923866552
User 401 does not improve AUC. Reverting changes.
Training on augumented user 104306 46/50 current_auc = 0.5017108639863131
User 104306 AUC after training: 0.5017108639863131
User 104306 does not improve AUC. Reverting changes.
Training on augumented user 82981 47/50 current_auc = 0.5017108639863131
User 82981 AUC after training: 0.49790419161676647
User 82981 does not improve AUC. Reverting changes.
Training on augumented user 73926 48/50 current_auc = 0.5017108639863131
User 73926 AUC after training: 0.5011120615911036
User 73926 does not improve AUC. Reverting changes.
Training on augumented user 25442 49/50 current_auc = 0.5017108639863131
User 25442 AUC after training: 0.5012831479897348
User 25442 does not improve AUC. Reverting changes.
[2024-12-02 17:52:32.252644] start test user 110018 27/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:52:32.939150] start test user 110018 27/567 recall augumented users by random, augumented_users = [111017, 64810, 25094, 96878, 42697, 101720, 22025, 37270, 842, 137853, 95656, 55387, 87392, 43886, 28400, 71764, 65789, 94340, 9818, 77081, 10683, 89406, 95913, 27136, 125098, 60327, 51833, 48457, 77847, 72129, 1328, 92882, 63794, 70741, 100856, 81322, 52407, 96109, 110374, 22303, 138283, 20443, 1886, 113679, 117895, 3530, 26494, 125491, 39425, 83520]
[2024-12-02 17:52:32.960647] user = 110018 Cloud 27/567
[2024-12-02 17:52:32.983258] user = 110018 Local 27/567
[2024-12-02 17:52:33.002871] user = 110018 Local+ 27/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:52:35.935375] user = 110018 MPDA- 27/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8333333333333334
Training on augumented user 111017 0/50 current_auc = 0.8333333333333334
User 111017 AUC after training: 0.8333333333333334
User 111017 does not improve AUC. Reverting changes.
Training on augumented user 64810 1/50 current_auc = 0.8333333333333334
User 64810 AUC after training: 0.8333333333333334
User 64810 does not improve AUC. Reverting changes.
Training on augumented user 25094 2/50 current_auc = 0.8333333333333334
User 25094 AUC after training: 0.8333333333333334
User 25094 does not improve AUC. Reverting changes.
Training on augumented user 96878 3/50 current_auc = 0.8333333333333334
User 96878 AUC after training: 0.8333333333333334
User 96878 does not improve AUC. Reverting changes.
Training on augumented user 42697 4/50 current_auc = 0.8333333333333334
User 42697 AUC after training: 0.8333333333333334
User 42697 does not improve AUC. Reverting changes.
Training on augumented user 101720 5/50 current_auc = 0.8333333333333334
User 101720 AUC after training: 0.8333333333333334
User 101720 does not improve AUC. Reverting changes.
Training on augumented user 22025 6/50 current_auc = 0.8333333333333334
User 22025 AUC after training: 0.8333333333333334
User 22025 does not improve AUC. Reverting changes.
Training on augumented user 37270 7/50 current_auc = 0.8333333333333334
User 37270 AUC after training: 0.8333333333333334
User 37270 does not improve AUC. Reverting changes.
Training on augumented user 842 8/50 current_auc = 0.8333333333333334
User 842 AUC after training: 0.8333333333333334
User 842 does not improve AUC. Reverting changes.
Training on augumented user 137853 9/50 current_auc = 0.8333333333333334
User 137853 AUC after training: 0.8333333333333334
User 137853 does not improve AUC. Reverting changes.
Training on augumented user 95656 10/50 current_auc = 0.8333333333333334
User 95656 AUC after training: 0.8333333333333334
User 95656 does not improve AUC. Reverting changes.
Training on augumented user 55387 11/50 current_auc = 0.8333333333333334
User 55387 AUC after training: 0.8333333333333334
User 55387 does not improve AUC. Reverting changes.
Training on augumented user 87392 12/50 current_auc = 0.8333333333333334
User 87392 AUC after training: 0.8333333333333334
User 87392 does not improve AUC. Reverting changes.
Training on augumented user 43886 13/50 current_auc = 0.8333333333333334
User 43886 AUC after training: 0.8333333333333334
User 43886 does not improve AUC. Reverting changes.
Training on augumented user 28400 14/50 current_auc = 0.8333333333333334
User 28400 AUC after training: 0.8333333333333334
User 28400 does not improve AUC. Reverting changes.
Training on augumented user 71764 15/50 current_auc = 0.8333333333333334
User 71764 AUC after training: 0.8333333333333334
User 71764 does not improve AUC. Reverting changes.
Training on augumented user 65789 16/50 current_auc = 0.8333333333333334
User 65789 AUC after training: 0.8333333333333334
User 65789 does not improve AUC. Reverting changes.
Training on augumented user 94340 17/50 current_auc = 0.8333333333333334
User 94340 AUC after training: 0.8333333333333334
User 94340 does not improve AUC. Reverting changes.
Training on augumented user 9818 18/50 current_auc = 0.8333333333333334
User 9818 AUC after training: 0.8333333333333334
User 9818 does not improve AUC. Reverting changes.
Training on augumented user 77081 19/50 current_auc = 0.8333333333333334
User 77081 AUC after training: 0.8333333333333334
User 77081 does not improve AUC. Reverting changes.
Training on augumented user 10683 20/50 current_auc = 0.8333333333333334
User 10683 AUC after training: 0.8333333333333334
User 10683 does not improve AUC. Reverting changes.
Training on augumented user 89406 21/50 current_auc = 0.8333333333333334
User 89406 AUC after training: 0.8333333333333334
User 89406 does not improve AUC. Reverting changes.
Training on augumented user 95913 22/50 current_auc = 0.8333333333333334
User 95913 AUC after training: 0.8333333333333334
User 95913 does not improve AUC. Reverting changes.
Training on augumented user 27136 23/50 current_auc = 0.8333333333333334
User 27136 AUC after training: 0.8333333333333334
User 27136 does not improve AUC. Reverting changes.
Training on augumented user 125098 24/50 current_auc = 0.8333333333333334
User 125098 AUC after training: 0.8333333333333334
User 125098 does not improve AUC. Reverting changes.
Training on augumented user 60327 25/50 current_auc = 0.8333333333333334
User 60327 AUC after training: 0.8333333333333334
User 60327 does not improve AUC. Reverting changes.
Training on augumented user 51833 26/50 current_auc = 0.8333333333333334
User 51833 AUC after training: 0.8333333333333334
User 51833 does not improve AUC. Reverting changes.
Training on augumented user 48457 27/50 current_auc = 0.8333333333333334
User 48457 AUC after training: 0.8333333333333334
User 48457 does not improve AUC. Reverting changes.
Training on augumented user 77847 28/50 current_auc = 0.8333333333333334
User 77847 AUC after training: 0.8333333333333334
User 77847 does not improve AUC. Reverting changes.
Training on augumented user 72129 29/50 current_auc = 0.8333333333333334
User 72129 AUC after training: 0.8333333333333334
User 72129 does not improve AUC. Reverting changes.
Training on augumented user 1328 30/50 current_auc = 0.8333333333333334
User 1328 AUC after training: 0.8333333333333334
User 1328 does not improve AUC. Reverting changes.
Training on augumented user 92882 31/50 current_auc = 0.8333333333333334
User 92882 AUC after training: 0.8333333333333334
User 92882 does not improve AUC. Reverting changes.
Training on augumented user 63794 32/50 current_auc = 0.8333333333333334
User 63794 AUC after training: 0.8333333333333334
User 63794 does not improve AUC. Reverting changes.
Training on augumented user 70741 33/50 current_auc = 0.8333333333333334
User 70741 AUC after training: 0.8333333333333334
User 70741 does not improve AUC. Reverting changes.
Training on augumented user 100856 34/50 current_auc = 0.8333333333333334
User 100856 AUC after training: 0.8333333333333334
User 100856 does not improve AUC. Reverting changes.
Training on augumented user 81322 35/50 current_auc = 0.8333333333333334
User 81322 AUC after training: 0.8333333333333334
User 81322 does not improve AUC. Reverting changes.
Training on augumented user 52407 36/50 current_auc = 0.8333333333333334
User 52407 AUC after training: 0.8333333333333334
User 52407 does not improve AUC. Reverting changes.
Training on augumented user 96109 37/50 current_auc = 0.8333333333333334
User 96109 AUC after training: 0.8333333333333334
User 96109 does not improve AUC. Reverting changes.
Training on augumented user 110374 38/50 current_auc = 0.8333333333333334
User 110374 AUC after training: 0.8333333333333334
User 110374 does not improve AUC. Reverting changes.
Training on augumented user 22303 39/50 current_auc = 0.8333333333333334
User 22303 AUC after training: 0.8333333333333334
User 22303 does not improve AUC. Reverting changes.
Training on augumented user 138283 40/50 current_auc = 0.8333333333333334
User 138283 AUC after training: 0.8333333333333334
User 138283 does not improve AUC. Reverting changes.
Training on augumented user 20443 41/50 current_auc = 0.8333333333333334
User 20443 AUC after training: 0.8333333333333334
User 20443 does not improve AUC. Reverting changes.
Training on augumented user 1886 42/50 current_auc = 0.8333333333333334
User 1886 AUC after training: 0.8333333333333334
User 1886 does not improve AUC. Reverting changes.
Training on augumented user 113679 43/50 current_auc = 0.8333333333333334
User 113679 AUC after training: 0.8333333333333334
User 113679 does not improve AUC. Reverting changes.
Training on augumented user 117895 44/50 current_auc = 0.8333333333333334
User 117895 AUC after training: 0.8333333333333334
User 117895 does not improve AUC. Reverting changes.
Training on augumented user 3530 45/50 current_auc = 0.8333333333333334
User 3530 AUC after training: 0.8333333333333334
User 3530 does not improve AUC. Reverting changes.
Training on augumented user 26494 46/50 current_auc = 0.8333333333333334
User 26494 AUC after training: 0.8333333333333334
User 26494 does not improve AUC. Reverting changes.
Training on augumented user 125491 47/50 current_auc = 0.8333333333333334
User 125491 AUC after training: 0.8333333333333334
User 125491 does not improve AUC. Reverting changes.
Training on augumented user 39425 48/50 current_auc = 0.8333333333333334
User 39425 AUC after training: 0.8333333333333334
User 39425 does not improve AUC. Reverting changes.
Training on augumented user 83520 49/50 current_auc = 0.8333333333333334
User 83520 AUC after training: 0.8333333333333334
User 83520 does not improve AUC. Reverting changes.
[2024-12-02 17:53:05.454052] start test user 110036 28/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:53:05.928817] start test user 110036 28/567 recall augumented users by random, augumented_users = [34385, 113502, 5428, 77245, 94256, 61169, 120160, 92005, 96207, 21700, 125592, 60123, 50842, 13284, 54133, 67492, 129670, 84846, 120103, 34671, 30528, 4627, 128091, 118745, 47264, 74278, 61431, 124299, 11755, 79241, 82575, 135134, 138469, 26830, 56492, 78715, 117486, 100085, 10904, 43212, 42033, 101746, 26719, 128809, 5425, 135327, 41745, 59038, 24685, 99253]
[2024-12-02 17:53:05.943526] user = 110036 Cloud 28/567
[2024-12-02 17:53:05.953798] user = 110036 Local 28/567
[2024-12-02 17:53:05.980405] user = 110036 Local+ 28/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:53:08.096484] user = 110036 MPDA- 28/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5888888888888888
Training on augumented user 34385 0/50 current_auc = 0.5888888888888888
User 34385 AUC after training: 0.5888888888888888
User 34385 does not improve AUC. Reverting changes.
Training on augumented user 113502 1/50 current_auc = 0.5888888888888888
User 113502 AUC after training: 0.5888888888888888
User 113502 does not improve AUC. Reverting changes.
Training on augumented user 5428 2/50 current_auc = 0.5888888888888888
User 5428 AUC after training: 0.5833333333333333
User 5428 does not improve AUC. Reverting changes.
Training on augumented user 77245 3/50 current_auc = 0.5888888888888888
User 77245 AUC after training: 0.5833333333333333
User 77245 does not improve AUC. Reverting changes.
Training on augumented user 94256 4/50 current_auc = 0.5888888888888888
User 94256 AUC after training: 0.5833333333333333
User 94256 does not improve AUC. Reverting changes.
Training on augumented user 61169 5/50 current_auc = 0.5888888888888888
User 61169 AUC after training: 0.5833333333333333
User 61169 does not improve AUC. Reverting changes.
Training on augumented user 120160 6/50 current_auc = 0.5888888888888888
User 120160 AUC after training: 0.5888888888888888
User 120160 does not improve AUC. Reverting changes.
Training on augumented user 92005 7/50 current_auc = 0.5888888888888888
User 92005 AUC after training: 0.5833333333333333
User 92005 does not improve AUC. Reverting changes.
Training on augumented user 96207 8/50 current_auc = 0.5888888888888888
User 96207 AUC after training: 0.5888888888888888
User 96207 does not improve AUC. Reverting changes.
Training on augumented user 21700 9/50 current_auc = 0.5888888888888888
User 21700 AUC after training: 0.5833333333333333
User 21700 does not improve AUC. Reverting changes.
Training on augumented user 125592 10/50 current_auc = 0.5888888888888888
User 125592 AUC after training: 0.5833333333333333
User 125592 does not improve AUC. Reverting changes.
Training on augumented user 60123 11/50 current_auc = 0.5888888888888888
User 60123 AUC after training: 0.5833333333333333
User 60123 does not improve AUC. Reverting changes.
Training on augumented user 50842 12/50 current_auc = 0.5888888888888888
User 50842 AUC after training: 0.5888888888888888
User 50842 does not improve AUC. Reverting changes.
Training on augumented user 13284 13/50 current_auc = 0.5888888888888888
User 13284 AUC after training: 0.5833333333333333
User 13284 does not improve AUC. Reverting changes.
Training on augumented user 54133 14/50 current_auc = 0.5888888888888888
User 54133 AUC after training: 0.5833333333333333
User 54133 does not improve AUC. Reverting changes.
Training on augumented user 67492 15/50 current_auc = 0.5888888888888888
User 67492 AUC after training: 0.5833333333333333
User 67492 does not improve AUC. Reverting changes.
Training on augumented user 129670 16/50 current_auc = 0.5888888888888888
User 129670 AUC after training: 0.5833333333333333
User 129670 does not improve AUC. Reverting changes.
Training on augumented user 84846 17/50 current_auc = 0.5888888888888888
User 84846 AUC after training: 0.5888888888888888
User 84846 does not improve AUC. Reverting changes.
Training on augumented user 120103 18/50 current_auc = 0.5888888888888888
User 120103 AUC after training: 0.5888888888888888
User 120103 does not improve AUC. Reverting changes.
Training on augumented user 34671 19/50 current_auc = 0.5888888888888888
User 34671 AUC after training: 0.5833333333333333
User 34671 does not improve AUC. Reverting changes.
Training on augumented user 30528 20/50 current_auc = 0.5888888888888888
User 30528 AUC after training: 0.5833333333333333
User 30528 does not improve AUC. Reverting changes.
Training on augumented user 4627 21/50 current_auc = 0.5888888888888888
User 4627 AUC after training: 0.5833333333333333
User 4627 does not improve AUC. Reverting changes.
Training on augumented user 128091 22/50 current_auc = 0.5888888888888888
User 128091 AUC after training: 0.5833333333333333
User 128091 does not improve AUC. Reverting changes.
Training on augumented user 118745 23/50 current_auc = 0.5888888888888888
User 118745 AUC after training: 0.5888888888888888
User 118745 does not improve AUC. Reverting changes.
Training on augumented user 47264 24/50 current_auc = 0.5888888888888888
User 47264 AUC after training: 0.5888888888888888
User 47264 does not improve AUC. Reverting changes.
Training on augumented user 74278 25/50 current_auc = 0.5888888888888888
User 74278 AUC after training: 0.5888888888888888
User 74278 does not improve AUC. Reverting changes.
Training on augumented user 61431 26/50 current_auc = 0.5888888888888888
User 61431 AUC after training: 0.5833333333333333
User 61431 does not improve AUC. Reverting changes.
Training on augumented user 124299 27/50 current_auc = 0.5888888888888888
User 124299 AUC after training: 0.5833333333333333
User 124299 does not improve AUC. Reverting changes.
Training on augumented user 11755 28/50 current_auc = 0.5888888888888888
User 11755 AUC after training: 0.5833333333333333
User 11755 does not improve AUC. Reverting changes.
Training on augumented user 79241 29/50 current_auc = 0.5888888888888888
User 79241 AUC after training: 0.5888888888888888
User 79241 does not improve AUC. Reverting changes.
Training on augumented user 82575 30/50 current_auc = 0.5888888888888888
User 82575 AUC after training: 0.5833333333333333
User 82575 does not improve AUC. Reverting changes.
Training on augumented user 135134 31/50 current_auc = 0.5888888888888888
User 135134 AUC after training: 0.5888888888888888
User 135134 does not improve AUC. Reverting changes.
Training on augumented user 138469 32/50 current_auc = 0.5888888888888888
User 138469 AUC after training: 0.5888888888888888
User 138469 does not improve AUC. Reverting changes.
Training on augumented user 26830 33/50 current_auc = 0.5888888888888888
User 26830 AUC after training: 0.5833333333333333
User 26830 does not improve AUC. Reverting changes.
Training on augumented user 56492 34/50 current_auc = 0.5888888888888888
User 56492 AUC after training: 0.5888888888888888
User 56492 does not improve AUC. Reverting changes.
Training on augumented user 78715 35/50 current_auc = 0.5888888888888888
User 78715 AUC after training: 0.5888888888888888
User 78715 does not improve AUC. Reverting changes.
Training on augumented user 117486 36/50 current_auc = 0.5888888888888888
User 117486 AUC after training: 0.5833333333333333
User 117486 does not improve AUC. Reverting changes.
Training on augumented user 100085 37/50 current_auc = 0.5888888888888888
User 100085 AUC after training: 0.5833333333333333
User 100085 does not improve AUC. Reverting changes.
Training on augumented user 10904 38/50 current_auc = 0.5888888888888888
User 10904 AUC after training: 0.5833333333333333
User 10904 does not improve AUC. Reverting changes.
Training on augumented user 43212 39/50 current_auc = 0.5888888888888888
User 43212 AUC after training: 0.5833333333333333
User 43212 does not improve AUC. Reverting changes.
Training on augumented user 42033 40/50 current_auc = 0.5888888888888888
User 42033 AUC after training: 0.5888888888888889
User 42033 improves AUC. Keeping the model.
Training on augumented user 101746 41/50 current_auc = 0.5888888888888889
User 101746 AUC after training: 0.5944444444444444
User 101746 improves AUC. Keeping the model.
Training on augumented user 26719 42/50 current_auc = 0.5944444444444444
User 26719 AUC after training: 0.5888888888888889
User 26719 does not improve AUC. Reverting changes.
Training on augumented user 128809 43/50 current_auc = 0.5944444444444444
User 128809 AUC after training: 0.5888888888888888
User 128809 does not improve AUC. Reverting changes.
Training on augumented user 5425 44/50 current_auc = 0.5944444444444444
User 5425 AUC after training: 0.5944444444444444
User 5425 does not improve AUC. Reverting changes.
Training on augumented user 135327 45/50 current_auc = 0.5944444444444444
User 135327 AUC after training: 0.6
User 135327 improves AUC. Keeping the model.
Training on augumented user 41745 46/50 current_auc = 0.6
User 41745 AUC after training: 0.6
User 41745 does not improve AUC. Reverting changes.
Training on augumented user 59038 47/50 current_auc = 0.6
User 59038 AUC after training: 0.6
User 59038 does not improve AUC. Reverting changes.
Training on augumented user 24685 48/50 current_auc = 0.6
User 24685 AUC after training: 0.6
User 24685 does not improve AUC. Reverting changes.
Training on augumented user 99253 49/50 current_auc = 0.6
User 99253 AUC after training: 0.5944444444444444
User 99253 does not improve AUC. Reverting changes.
[2024-12-02 17:53:37.475306] start test user 110048 29/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:53:37.906136] start test user 110048 29/567 recall augumented users by random, augumented_users = [27833, 79112, 92803, 38137, 78122, 19990, 24221, 21554, 14295, 20857, 2981, 14209, 43261, 19738, 46213, 78581, 24938, 79848, 58298, 6008, 134259, 22031, 34469, 17000, 36798, 36020, 10697, 22032, 133016, 65534, 104655, 21423, 2656, 117031, 78143, 111844, 24314, 85168, 101621, 88268, 126210, 109286, 39786, 87566, 45188, 12162, 15828, 45373, 101407, 120926]
[2024-12-02 17:53:37.921954] user = 110048 Cloud 29/567
[2024-12-02 17:53:37.935573] user = 110048 Local 29/567
[2024-12-02 17:53:38.049512] user = 110048 Local+ 29/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:53:40.185840] user = 110048 MPDA- 29/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5508305647840532
Training on augumented user 27833 0/50 current_auc = 0.5508305647840532
User 27833 AUC after training: 0.5508305647840532
User 27833 does not improve AUC. Reverting changes.
Training on augumented user 79112 1/50 current_auc = 0.5508305647840532
User 79112 AUC after training: 0.5501661129568107
User 79112 does not improve AUC. Reverting changes.
Training on augumented user 92803 2/50 current_auc = 0.5508305647840532
User 92803 AUC after training: 0.5501661129568107
User 92803 does not improve AUC. Reverting changes.
Training on augumented user 38137 3/50 current_auc = 0.5508305647840532
User 38137 AUC after training: 0.5495016611295681
User 38137 does not improve AUC. Reverting changes.
Training on augumented user 78122 4/50 current_auc = 0.5508305647840532
User 78122 AUC after training: 0.5508305647840532
User 78122 does not improve AUC. Reverting changes.
Training on augumented user 19990 5/50 current_auc = 0.5508305647840532
User 19990 AUC after training: 0.5501661129568107
User 19990 does not improve AUC. Reverting changes.
Training on augumented user 24221 6/50 current_auc = 0.5508305647840532
User 24221 AUC after training: 0.5501661129568107
User 24221 does not improve AUC. Reverting changes.
Training on augumented user 21554 7/50 current_auc = 0.5508305647840532
User 21554 AUC after training: 0.5508305647840532
User 21554 does not improve AUC. Reverting changes.
Training on augumented user 14295 8/50 current_auc = 0.5508305647840532
User 14295 AUC after training: 0.549501661129568
User 14295 does not improve AUC. Reverting changes.
Training on augumented user 20857 9/50 current_auc = 0.5508305647840532
User 20857 AUC after training: 0.5501661129568107
User 20857 does not improve AUC. Reverting changes.
Training on augumented user 2981 10/50 current_auc = 0.5508305647840532
User 2981 AUC after training: 0.5501661129568107
User 2981 does not improve AUC. Reverting changes.
Training on augumented user 14209 11/50 current_auc = 0.5508305647840532
User 14209 AUC after training: 0.5508305647840532
User 14209 does not improve AUC. Reverting changes.
Training on augumented user 43261 12/50 current_auc = 0.5508305647840532
User 43261 AUC after training: 0.5508305647840532
User 43261 does not improve AUC. Reverting changes.
Training on augumented user 19738 13/50 current_auc = 0.5508305647840532
User 19738 AUC after training: 0.5501661129568107
User 19738 does not improve AUC. Reverting changes.
Training on augumented user 46213 14/50 current_auc = 0.5508305647840532
User 46213 AUC after training: 0.5495016611295681
User 46213 does not improve AUC. Reverting changes.
Training on augumented user 78581 15/50 current_auc = 0.5508305647840532
User 78581 AUC after training: 0.5508305647840532
User 78581 does not improve AUC. Reverting changes.
Training on augumented user 24938 16/50 current_auc = 0.5508305647840532
User 24938 AUC after training: 0.5508305647840532
User 24938 does not improve AUC. Reverting changes.
Training on augumented user 79848 17/50 current_auc = 0.5508305647840532
User 79848 AUC after training: 0.5508305647840532
User 79848 does not improve AUC. Reverting changes.
Training on augumented user 58298 18/50 current_auc = 0.5508305647840532
User 58298 AUC after training: 0.5495016611295681
User 58298 does not improve AUC. Reverting changes.
Training on augumented user 6008 19/50 current_auc = 0.5508305647840532
User 6008 AUC after training: 0.548172757475083
User 6008 does not improve AUC. Reverting changes.
Training on augumented user 134259 20/50 current_auc = 0.5508305647840532
User 134259 AUC after training: 0.5508305647840532
User 134259 does not improve AUC. Reverting changes.
Training on augumented user 22031 21/50 current_auc = 0.5508305647840532
User 22031 AUC after training: 0.5501661129568107
User 22031 does not improve AUC. Reverting changes.
Training on augumented user 34469 22/50 current_auc = 0.5508305647840532
User 34469 AUC after training: 0.5475083056478405
User 34469 does not improve AUC. Reverting changes.
Training on augumented user 17000 23/50 current_auc = 0.5508305647840532
User 17000 AUC after training: 0.5501661129568107
User 17000 does not improve AUC. Reverting changes.
Training on augumented user 36798 24/50 current_auc = 0.5508305647840532
User 36798 AUC after training: 0.5488372093023256
User 36798 does not improve AUC. Reverting changes.
Training on augumented user 36020 25/50 current_auc = 0.5508305647840532
User 36020 AUC after training: 0.5501661129568107
User 36020 does not improve AUC. Reverting changes.
Training on augumented user 10697 26/50 current_auc = 0.5508305647840532
User 10697 AUC after training: 0.5508305647840532
User 10697 does not improve AUC. Reverting changes.
Training on augumented user 22032 27/50 current_auc = 0.5508305647840532
User 22032 AUC after training: 0.5495016611295681
User 22032 does not improve AUC. Reverting changes.
Training on augumented user 133016 28/50 current_auc = 0.5508305647840532
User 133016 AUC after training: 0.5495016611295681
User 133016 does not improve AUC. Reverting changes.
Training on augumented user 65534 29/50 current_auc = 0.5508305647840532
User 65534 AUC after training: 0.5488372093023256
User 65534 does not improve AUC. Reverting changes.
Training on augumented user 104655 30/50 current_auc = 0.5508305647840532
User 104655 AUC after training: 0.5475083056478405
User 104655 does not improve AUC. Reverting changes.
Training on augumented user 21423 31/50 current_auc = 0.5508305647840532
User 21423 AUC after training: 0.5508305647840532
User 21423 does not improve AUC. Reverting changes.
Training on augumented user 2656 32/50 current_auc = 0.5508305647840532
User 2656 AUC after training: 0.5501661129568107
User 2656 does not improve AUC. Reverting changes.
Training on augumented user 117031 33/50 current_auc = 0.5508305647840532
User 117031 AUC after training: 0.5501661129568107
User 117031 does not improve AUC. Reverting changes.
Training on augumented user 78143 34/50 current_auc = 0.5508305647840532
User 78143 AUC after training: 0.5475083056478405
User 78143 does not improve AUC. Reverting changes.
Training on augumented user 111844 35/50 current_auc = 0.5508305647840532
User 111844 AUC after training: 0.5475083056478405
User 111844 does not improve AUC. Reverting changes.
Training on augumented user 24314 36/50 current_auc = 0.5508305647840532
User 24314 AUC after training: 0.5501661129568107
User 24314 does not improve AUC. Reverting changes.
Training on augumented user 85168 37/50 current_auc = 0.5508305647840532
User 85168 AUC after training: 0.5501661129568107
User 85168 does not improve AUC. Reverting changes.
Training on augumented user 101621 38/50 current_auc = 0.5508305647840532
User 101621 AUC after training: 0.5508305647840532
User 101621 does not improve AUC. Reverting changes.
Training on augumented user 88268 39/50 current_auc = 0.5508305647840532
User 88268 AUC after training: 0.5508305647840532
User 88268 does not improve AUC. Reverting changes.
Training on augumented user 126210 40/50 current_auc = 0.5508305647840532
User 126210 AUC after training: 0.5495016611295681
User 126210 does not improve AUC. Reverting changes.
Training on augumented user 109286 41/50 current_auc = 0.5508305647840532
User 109286 AUC after training: 0.5481727574750831
User 109286 does not improve AUC. Reverting changes.
Training on augumented user 39786 42/50 current_auc = 0.5508305647840532
User 39786 AUC after training: 0.5508305647840532
User 39786 does not improve AUC. Reverting changes.
Training on augumented user 87566 43/50 current_auc = 0.5508305647840532
User 87566 AUC after training: 0.5501661129568107
User 87566 does not improve AUC. Reverting changes.
Training on augumented user 45188 44/50 current_auc = 0.5508305647840532
User 45188 AUC after training: 0.5495016611295681
User 45188 does not improve AUC. Reverting changes.
Training on augumented user 12162 45/50 current_auc = 0.5508305647840532
User 12162 AUC after training: 0.5495016611295681
User 12162 does not improve AUC. Reverting changes.
Training on augumented user 15828 46/50 current_auc = 0.5508305647840532
User 15828 AUC after training: 0.5508305647840532
User 15828 does not improve AUC. Reverting changes.
Training on augumented user 45373 47/50 current_auc = 0.5508305647840532
User 45373 AUC after training: 0.5508305647840532
User 45373 does not improve AUC. Reverting changes.
Training on augumented user 101407 48/50 current_auc = 0.5508305647840532
User 101407 AUC after training: 0.5501661129568107
User 101407 does not improve AUC. Reverting changes.
Training on augumented user 120926 49/50 current_auc = 0.5508305647840532
User 120926 AUC after training: 0.5475083056478405
User 120926 does not improve AUC. Reverting changes.
[2024-12-02 17:54:05.677133] start test user 110053 30/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:54:06.125491] start test user 110053 30/567 recall augumented users by random, augumented_users = [33126, 28947, 30649, 64930, 2322, 81837, 114416, 86086, 116888, 137172, 83901, 109481, 57832, 57123, 113161, 27654, 106670, 7741, 32380, 95144, 83766, 61574, 4845, 105394, 91411, 37390, 132836, 84458, 53012, 114504, 136998, 113627, 114676, 25098, 83521, 1550, 132103, 132751, 105630, 38707, 66067, 133317, 85435, 54545, 29142, 128312, 72737, 12095, 120075, 13057]
[2024-12-02 17:54:06.140970] user = 110053 Cloud 30/567
[2024-12-02 17:54:06.152264] user = 110053 Local 30/567
[2024-12-02 17:54:06.273928] user = 110053 Local+ 30/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:54:08.813504] user = 110053 MPDA- 30/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6608695652173914
Training on augumented user 33126 0/50 current_auc = 0.6608695652173914
User 33126 AUC after training: 0.6608695652173914
User 33126 does not improve AUC. Reverting changes.
Training on augumented user 28947 1/50 current_auc = 0.6608695652173914
User 28947 AUC after training: 0.6630434782608696
User 28947 improves AUC. Keeping the model.
Training on augumented user 30649 2/50 current_auc = 0.6630434782608696
User 30649 AUC after training: 0.6652173913043478
User 30649 improves AUC. Keeping the model.
Training on augumented user 64930 3/50 current_auc = 0.6652173913043478
User 64930 AUC after training: 0.6630434782608696
User 64930 does not improve AUC. Reverting changes.
Training on augumented user 2322 4/50 current_auc = 0.6652173913043478
User 2322 AUC after training: 0.6673913043478261
User 2322 improves AUC. Keeping the model.
Training on augumented user 81837 5/50 current_auc = 0.6673913043478261
User 81837 AUC after training: 0.6630434782608695
User 81837 does not improve AUC. Reverting changes.
Training on augumented user 114416 6/50 current_auc = 0.6673913043478261
User 114416 AUC after training: 0.6630434782608696
User 114416 does not improve AUC. Reverting changes.
Training on augumented user 86086 7/50 current_auc = 0.6673913043478261
User 86086 AUC after training: 0.6630434782608696
User 86086 does not improve AUC. Reverting changes.
Training on augumented user 116888 8/50 current_auc = 0.6673913043478261
User 116888 AUC after training: 0.6652173913043478
User 116888 does not improve AUC. Reverting changes.
Training on augumented user 137172 9/50 current_auc = 0.6673913043478261
User 137172 AUC after training: 0.6630434782608696
User 137172 does not improve AUC. Reverting changes.
Training on augumented user 83901 10/50 current_auc = 0.6673913043478261
User 83901 AUC after training: 0.6673913043478261
User 83901 does not improve AUC. Reverting changes.
Training on augumented user 109481 11/50 current_auc = 0.6673913043478261
User 109481 AUC after training: 0.6630434782608696
User 109481 does not improve AUC. Reverting changes.
Training on augumented user 57832 12/50 current_auc = 0.6673913043478261
User 57832 AUC after training: 0.6608695652173913
User 57832 does not improve AUC. Reverting changes.
Training on augumented user 57123 13/50 current_auc = 0.6673913043478261
User 57123 AUC after training: 0.6652173913043478
User 57123 does not improve AUC. Reverting changes.
Training on augumented user 113161 14/50 current_auc = 0.6673913043478261
User 113161 AUC after training: 0.6652173913043478
User 113161 does not improve AUC. Reverting changes.
Training on augumented user 27654 15/50 current_auc = 0.6673913043478261
User 27654 AUC after training: 0.6630434782608696
User 27654 does not improve AUC. Reverting changes.
Training on augumented user 106670 16/50 current_auc = 0.6673913043478261
User 106670 AUC after training: 0.6652173913043479
User 106670 does not improve AUC. Reverting changes.
Training on augumented user 7741 17/50 current_auc = 0.6673913043478261
User 7741 AUC after training: 0.6630434782608695
User 7741 does not improve AUC. Reverting changes.
Training on augumented user 32380 18/50 current_auc = 0.6673913043478261
User 32380 AUC after training: 0.6608695652173914
User 32380 does not improve AUC. Reverting changes.
Training on augumented user 95144 19/50 current_auc = 0.6673913043478261
User 95144 AUC after training: 0.6652173913043478
User 95144 does not improve AUC. Reverting changes.
Training on augumented user 83766 20/50 current_auc = 0.6673913043478261
User 83766 AUC after training: 0.6673913043478261
User 83766 does not improve AUC. Reverting changes.
Training on augumented user 61574 21/50 current_auc = 0.6673913043478261
User 61574 AUC after training: 0.6652173913043478
User 61574 does not improve AUC. Reverting changes.
Training on augumented user 4845 22/50 current_auc = 0.6673913043478261
User 4845 AUC after training: 0.6608695652173913
User 4845 does not improve AUC. Reverting changes.
Training on augumented user 105394 23/50 current_auc = 0.6673913043478261
User 105394 AUC after training: 0.6608695652173914
User 105394 does not improve AUC. Reverting changes.
Training on augumented user 91411 24/50 current_auc = 0.6673913043478261
User 91411 AUC after training: 0.6608695652173913
User 91411 does not improve AUC. Reverting changes.
Training on augumented user 37390 25/50 current_auc = 0.6673913043478261
User 37390 AUC after training: 0.6652173913043478
User 37390 does not improve AUC. Reverting changes.
Training on augumented user 132836 26/50 current_auc = 0.6673913043478261
User 132836 AUC after training: 0.6608695652173913
User 132836 does not improve AUC. Reverting changes.
Training on augumented user 84458 27/50 current_auc = 0.6673913043478261
User 84458 AUC after training: 0.6630434782608696
User 84458 does not improve AUC. Reverting changes.
Training on augumented user 53012 28/50 current_auc = 0.6673913043478261
User 53012 AUC after training: 0.6652173913043479
User 53012 does not improve AUC. Reverting changes.
Training on augumented user 114504 29/50 current_auc = 0.6673913043478261
User 114504 AUC after training: 0.6695652173913044
User 114504 improves AUC. Keeping the model.
Training on augumented user 136998 30/50 current_auc = 0.6695652173913044
User 136998 AUC after training: 0.6652173913043478
User 136998 does not improve AUC. Reverting changes.
Training on augumented user 113627 31/50 current_auc = 0.6695652173913044
User 113627 AUC after training: 0.6695652173913044
User 113627 does not improve AUC. Reverting changes.
Training on augumented user 114676 32/50 current_auc = 0.6695652173913044
User 114676 AUC after training: 0.6717391304347826
User 114676 improves AUC. Keeping the model.
Training on augumented user 25098 33/50 current_auc = 0.6717391304347826
User 25098 AUC after training: 0.6630434782608696
User 25098 does not improve AUC. Reverting changes.
Training on augumented user 83521 34/50 current_auc = 0.6717391304347826
User 83521 AUC after training: 0.6673913043478261
User 83521 does not improve AUC. Reverting changes.
Training on augumented user 1550 35/50 current_auc = 0.6717391304347826
User 1550 AUC after training: 0.6652173913043479
User 1550 does not improve AUC. Reverting changes.
Training on augumented user 132103 36/50 current_auc = 0.6717391304347826
User 132103 AUC after training: 0.6695652173913045
User 132103 does not improve AUC. Reverting changes.
Training on augumented user 132751 37/50 current_auc = 0.6717391304347826
User 132751 AUC after training: 0.6652173913043479
User 132751 does not improve AUC. Reverting changes.
Training on augumented user 105630 38/50 current_auc = 0.6717391304347826
User 105630 AUC after training: 0.6673913043478261
User 105630 does not improve AUC. Reverting changes.
Training on augumented user 38707 39/50 current_auc = 0.6717391304347826
User 38707 AUC after training: 0.6673913043478261
User 38707 does not improve AUC. Reverting changes.
Training on augumented user 66067 40/50 current_auc = 0.6717391304347826
User 66067 AUC after training: 0.6673913043478261
User 66067 does not improve AUC. Reverting changes.
Training on augumented user 133317 41/50 current_auc = 0.6717391304347826
User 133317 AUC after training: 0.6630434782608695
User 133317 does not improve AUC. Reverting changes.
Training on augumented user 85435 42/50 current_auc = 0.6717391304347826
User 85435 AUC after training: 0.6695652173913044
User 85435 does not improve AUC. Reverting changes.
Training on augumented user 54545 43/50 current_auc = 0.6717391304347826
User 54545 AUC after training: 0.6717391304347827
User 54545 improves AUC. Keeping the model.
Training on augumented user 29142 44/50 current_auc = 0.6717391304347827
User 29142 AUC after training: 0.6673913043478261
User 29142 does not improve AUC. Reverting changes.
Training on augumented user 128312 45/50 current_auc = 0.6717391304347827
User 128312 AUC after training: 0.6717391304347827
User 128312 does not improve AUC. Reverting changes.
Training on augumented user 72737 46/50 current_auc = 0.6717391304347827
User 72737 AUC after training: 0.6652173913043479
User 72737 does not improve AUC. Reverting changes.
Training on augumented user 12095 47/50 current_auc = 0.6717391304347827
User 12095 AUC after training: 0.6739130434782609
User 12095 improves AUC. Keeping the model.
Training on augumented user 120075 48/50 current_auc = 0.6739130434782609
User 120075 AUC after training: 0.673913043478261
User 120075 improves AUC. Keeping the model.
Training on augumented user 13057 49/50 current_auc = 0.673913043478261
User 13057 AUC after training: 0.6673913043478261
User 13057 does not improve AUC. Reverting changes.
[2024-12-02 17:54:34.007674] start test user 110061 31/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:54:34.625068] start test user 110061 31/567 recall augumented users by random, augumented_users = [5093, 32693, 55220, 15168, 11010, 71989, 105670, 22397, 41364, 23251, 121336, 56880, 34088, 2680, 51273, 67118, 109947, 134188, 43058, 28379, 18869, 82473, 60942, 122128, 128243, 72635, 118271, 81768, 79998, 116620, 98050, 76122, 85520, 10957, 68478, 50358, 103925, 81897, 69038, 127177, 8304, 102024, 76642, 71662, 60384, 106068, 133119, 76487, 85569, 119126]
[2024-12-02 17:54:34.639969] user = 110061 Cloud 31/567
[2024-12-02 17:54:34.661121] user = 110061 Local 31/567
[2024-12-02 17:54:34.806711] user = 110061 Local+ 31/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:54:37.257170] user = 110061 MPDA- 31/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6304347826086956
Training on augumented user 5093 0/50 current_auc = 0.6304347826086956
User 5093 AUC after training: 0.6308536483203485
User 5093 improves AUC. Keeping the model.
Training on augumented user 32693 1/50 current_auc = 0.6308536483203485
User 32693 AUC after training: 0.630057803468208
User 32693 does not improve AUC. Reverting changes.
Training on augumented user 55220 2/50 current_auc = 0.6308536483203485
User 55220 AUC after training: 0.6308117617491833
User 55220 does not improve AUC. Reverting changes.
Training on augumented user 15168 3/50 current_auc = 0.6308536483203485
User 15168 AUC after training: 0.6303510094663651
User 15168 does not improve AUC. Reverting changes.
Training on augumented user 11010 4/50 current_auc = 0.6308536483203485
User 11010 AUC after training: 0.6314819468878278
User 11010 improves AUC. Keeping the model.
Training on augumented user 71989 5/50 current_auc = 0.6314819468878278
User 71989 AUC after training: 0.631230627460836
User 71989 does not improve AUC. Reverting changes.
Training on augumented user 105670 6/50 current_auc = 0.6314819468878278
User 105670 AUC after training: 0.6297227108988858
User 105670 does not improve AUC. Reverting changes.
Training on augumented user 22397 7/50 current_auc = 0.6314819468878278
User 22397 AUC after training: 0.6294713914718941
User 22397 does not improve AUC. Reverting changes.
Training on augumented user 41364 8/50 current_auc = 0.6314819468878278
User 41364 AUC after training: 0.6308536483203485
User 41364 does not improve AUC. Reverting changes.
Training on augumented user 23251 9/50 current_auc = 0.6314819468878278
User 23251 AUC after training: 0.6298064840412164
User 23251 does not improve AUC. Reverting changes.
Training on augumented user 121336 10/50 current_auc = 0.6314819468878278
User 121336 AUC after training: 0.6299740303258775
User 121336 does not improve AUC. Reverting changes.
Training on augumented user 56880 11/50 current_auc = 0.6314819468878278
User 56880 AUC after training: 0.6307279886068528
User 56880 does not improve AUC. Reverting changes.
Training on augumented user 34088 12/50 current_auc = 0.6314819468878278
User 34088 AUC after training: 0.6298483706123816
User 34088 does not improve AUC. Reverting changes.
Training on augumented user 2680 13/50 current_auc = 0.6314819468878278
User 2680 AUC after training: 0.6309374214626791
User 2680 does not improve AUC. Reverting changes.
Training on augumented user 51273 14/50 current_auc = 0.6314819468878278
User 51273 AUC after training: 0.6307279886068528
User 51273 does not improve AUC. Reverting changes.
Training on augumented user 67118 15/50 current_auc = 0.6314819468878278
User 67118 AUC after training: 0.6300996900393734
User 67118 does not improve AUC. Reverting changes.
Training on augumented user 109947 16/50 current_auc = 0.6314819468878278
User 109947 AUC after training: 0.6309793080338444
User 109947 does not improve AUC. Reverting changes.
Training on augumented user 134188 17/50 current_auc = 0.6314819468878278
User 134188 AUC after training: 0.6298483706123816
User 134188 does not improve AUC. Reverting changes.
Training on augumented user 43058 18/50 current_auc = 0.6314819468878278
User 43058 AUC after training: 0.630351009466365
User 43058 does not improve AUC. Reverting changes.
Training on augumented user 28379 19/50 current_auc = 0.6314819468878278
User 28379 AUC after training: 0.6304766691798609
User 28379 does not improve AUC. Reverting changes.
Training on augumented user 18869 20/50 current_auc = 0.6314819468878278
User 18869 AUC after training: 0.6288012063332495
User 18869 does not improve AUC. Reverting changes.
Training on augumented user 82473 21/50 current_auc = 0.6314819468878278
User 82473 AUC after training: 0.6307279886068526
User 82473 does not improve AUC. Reverting changes.
Training on augumented user 60942 22/50 current_auc = 0.6314819468878278
User 60942 AUC after training: 0.6305604423221915
User 60942 does not improve AUC. Reverting changes.
Training on augumented user 122128 23/50 current_auc = 0.6314819468878278
User 122128 AUC after training: 0.6308117617491832
User 122128 does not improve AUC. Reverting changes.
Training on augumented user 128243 24/50 current_auc = 0.6314819468878278
User 128243 AUC after training: 0.6311887408896707
User 128243 does not improve AUC. Reverting changes.
Training on augumented user 72635 25/50 current_auc = 0.6314819468878278
User 72635 AUC after training: 0.6308117617491832
User 72635 does not improve AUC. Reverting changes.
Training on augumented user 118271 26/50 current_auc = 0.6314819468878278
User 118271 AUC after training: 0.6286336600485884
User 118271 does not improve AUC. Reverting changes.
Training on augumented user 81768 27/50 current_auc = 0.6314819468878278
User 81768 AUC after training: 0.6303928960375303
User 81768 does not improve AUC. Reverting changes.
Training on augumented user 79998 28/50 current_auc = 0.6314819468878278
User 79998 AUC after training: 0.6312725140320014
User 79998 does not improve AUC. Reverting changes.
Training on augumented user 116620 29/50 current_auc = 0.6314819468878278
User 116620 AUC after training: 0.6300996900393734
User 116620 does not improve AUC. Reverting changes.
Training on augumented user 98050 30/50 current_auc = 0.6314819468878278
User 98050 AUC after training: 0.6307279886068526
User 98050 does not improve AUC. Reverting changes.
Training on augumented user 76122 31/50 current_auc = 0.6314819468878278
User 76122 AUC after training: 0.6317332663148194
User 76122 improves AUC. Keeping the model.
Training on augumented user 85520 32/50 current_auc = 0.6317332663148194
User 85520 AUC after training: 0.6318589260283153
User 85520 improves AUC. Keeping the model.
Training on augumented user 10957 33/50 current_auc = 0.6318589260283153
User 10957 AUC after training: 0.6292619586160677
User 10957 does not improve AUC. Reverting changes.
Training on augumented user 68478 34/50 current_auc = 0.6318589260283153
User 68478 AUC after training: 0.6325709977381252
User 68478 improves AUC. Keeping the model.
Training on augumented user 50358 35/50 current_auc = 0.6325709977381252
User 50358 AUC after training: 0.6322359051688029
User 50358 does not improve AUC. Reverting changes.
Training on augumented user 103925 36/50 current_auc = 0.6325709977381252
User 103925 AUC after training: 0.6320683588841418
User 103925 does not improve AUC. Reverting changes.
Training on augumented user 81897 37/50 current_auc = 0.6325709977381252
User 81897 AUC after training: 0.6328223171651168
User 81897 improves AUC. Keeping the model.
Training on augumented user 69038 38/50 current_auc = 0.6328223171651168
User 69038 AUC after training: 0.6320683588841417
User 69038 does not improve AUC. Reverting changes.
Training on augumented user 127177 39/50 current_auc = 0.6328223171651168
User 127177 AUC after training: 0.6323196783111334
User 127177 does not improve AUC. Reverting changes.
Training on augumented user 8304 40/50 current_auc = 0.6328223171651168
User 8304 AUC after training: 0.6333249560191003
User 8304 improves AUC. Keeping the model.
Training on augumented user 102024 41/50 current_auc = 0.6333249560191003
User 102024 AUC after training: 0.6330736365921086
User 102024 does not improve AUC. Reverting changes.
Training on augumented user 76642 42/50 current_auc = 0.6333249560191003
User 76642 AUC after training: 0.632989863449778
User 76642 does not improve AUC. Reverting changes.
Training on augumented user 71662 43/50 current_auc = 0.6333249560191003
User 71662 AUC after training: 0.6324453380246292
User 71662 does not improve AUC. Reverting changes.
Training on augumented user 60384 44/50 current_auc = 0.6333249560191003
User 60384 AUC after training: 0.6322777917399681
User 60384 does not improve AUC. Reverting changes.
Training on augumented user 106068 45/50 current_auc = 0.6333249560191003
User 106068 AUC after training: 0.630057803468208
User 106068 does not improve AUC. Reverting changes.
Training on augumented user 133119 46/50 current_auc = 0.6333249560191003
User 133119 AUC after training: 0.6322777917399682
User 133119 does not improve AUC. Reverting changes.
Training on augumented user 76487 47/50 current_auc = 0.6333249560191003
User 76487 AUC after training: 0.6313981737454972
User 76487 does not improve AUC. Reverting changes.
Training on augumented user 85569 48/50 current_auc = 0.6333249560191003
User 85569 AUC after training: 0.630057803468208
User 85569 does not improve AUC. Reverting changes.
Training on augumented user 119126 49/50 current_auc = 0.6333249560191003
User 119126 AUC after training: 0.6327385440227863
User 119126 does not improve AUC. Reverting changes.
[2024-12-02 17:55:05.044372] start test user 110101 32/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:55:05.475774] start test user 110101 32/567 recall augumented users by random, augumented_users = [109057, 1477, 2804, 34648, 106680, 129164, 64503, 18784, 134995, 42982, 45202, 89894, 125572, 4403, 18843, 54971, 109621, 35978, 95812, 138353, 117516, 71455, 35056, 43896, 133039, 46808, 133757, 99329, 8697, 135621, 32410, 42965, 92604, 5152, 59673, 67711, 17938, 30860, 8586, 24992, 65131, 8037, 103158, 90083, 59186, 107783, 112779, 15856, 49916, 74579]
[2024-12-02 17:55:05.490361] user = 110101 Cloud 32/567
[2024-12-02 17:55:05.501521] user = 110101 Local 32/567
[2024-12-02 17:55:05.543308] user = 110101 Local+ 32/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:55:07.587585] user = 110101 MPDA- 32/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6495238095238096
Training on augumented user 109057 0/50 current_auc = 0.6495238095238096
User 109057 AUC after training: 0.6514285714285715
User 109057 improves AUC. Keeping the model.
Training on augumented user 1477 1/50 current_auc = 0.6514285714285715
User 1477 AUC after training: 0.6514285714285715
User 1477 does not improve AUC. Reverting changes.
Training on augumented user 2804 2/50 current_auc = 0.6514285714285715
User 2804 AUC after training: 0.6533333333333333
User 2804 improves AUC. Keeping the model.
Training on augumented user 34648 3/50 current_auc = 0.6533333333333333
User 34648 AUC after training: 0.6533333333333333
User 34648 does not improve AUC. Reverting changes.
Training on augumented user 106680 4/50 current_auc = 0.6533333333333333
User 106680 AUC after training: 0.6495238095238095
User 106680 does not improve AUC. Reverting changes.
Training on augumented user 129164 5/50 current_auc = 0.6533333333333333
User 129164 AUC after training: 0.6533333333333333
User 129164 does not improve AUC. Reverting changes.
Training on augumented user 64503 6/50 current_auc = 0.6533333333333333
User 64503 AUC after training: 0.6495238095238095
User 64503 does not improve AUC. Reverting changes.
Training on augumented user 18784 7/50 current_auc = 0.6533333333333333
User 18784 AUC after training: 0.6533333333333333
User 18784 does not improve AUC. Reverting changes.
Training on augumented user 134995 8/50 current_auc = 0.6533333333333333
User 134995 AUC after training: 0.6533333333333333
User 134995 does not improve AUC. Reverting changes.
Training on augumented user 42982 9/50 current_auc = 0.6533333333333333
User 42982 AUC after training: 0.6533333333333333
User 42982 does not improve AUC. Reverting changes.
Training on augumented user 45202 10/50 current_auc = 0.6533333333333333
User 45202 AUC after training: 0.6514285714285715
User 45202 does not improve AUC. Reverting changes.
Training on augumented user 89894 11/50 current_auc = 0.6533333333333333
User 89894 AUC after training: 0.6533333333333333
User 89894 does not improve AUC. Reverting changes.
Training on augumented user 125572 12/50 current_auc = 0.6533333333333333
User 125572 AUC after training: 0.6533333333333333
User 125572 does not improve AUC. Reverting changes.
Training on augumented user 4403 13/50 current_auc = 0.6533333333333333
User 4403 AUC after training: 0.6533333333333333
User 4403 does not improve AUC. Reverting changes.
Training on augumented user 18843 14/50 current_auc = 0.6533333333333333
User 18843 AUC after training: 0.6514285714285714
User 18843 does not improve AUC. Reverting changes.
Training on augumented user 54971 15/50 current_auc = 0.6533333333333333
User 54971 AUC after training: 0.6495238095238095
User 54971 does not improve AUC. Reverting changes.
Training on augumented user 109621 16/50 current_auc = 0.6533333333333333
User 109621 AUC after training: 0.6514285714285714
User 109621 does not improve AUC. Reverting changes.
Training on augumented user 35978 17/50 current_auc = 0.6533333333333333
User 35978 AUC after training: 0.6533333333333333
User 35978 does not improve AUC. Reverting changes.
Training on augumented user 95812 18/50 current_auc = 0.6533333333333333
User 95812 AUC after training: 0.6533333333333333
User 95812 does not improve AUC. Reverting changes.
Training on augumented user 138353 19/50 current_auc = 0.6533333333333333
User 138353 AUC after training: 0.6533333333333333
User 138353 does not improve AUC. Reverting changes.
Training on augumented user 117516 20/50 current_auc = 0.6533333333333333
User 117516 AUC after training: 0.6495238095238095
User 117516 does not improve AUC. Reverting changes.
Training on augumented user 71455 21/50 current_auc = 0.6533333333333333
User 71455 AUC after training: 0.6514285714285715
User 71455 does not improve AUC. Reverting changes.
Training on augumented user 35056 22/50 current_auc = 0.6533333333333333
User 35056 AUC after training: 0.6533333333333333
User 35056 does not improve AUC. Reverting changes.
Training on augumented user 43896 23/50 current_auc = 0.6533333333333333
User 43896 AUC after training: 0.6514285714285715
User 43896 does not improve AUC. Reverting changes.
Training on augumented user 133039 24/50 current_auc = 0.6533333333333333
User 133039 AUC after training: 0.6514285714285715
User 133039 does not improve AUC. Reverting changes.
Training on augumented user 46808 25/50 current_auc = 0.6533333333333333
User 46808 AUC after training: 0.6533333333333333
User 46808 does not improve AUC. Reverting changes.
Training on augumented user 133757 26/50 current_auc = 0.6533333333333333
User 133757 AUC after training: 0.6514285714285715
User 133757 does not improve AUC. Reverting changes.
Training on augumented user 99329 27/50 current_auc = 0.6533333333333333
User 99329 AUC after training: 0.6514285714285715
User 99329 does not improve AUC. Reverting changes.
Training on augumented user 8697 28/50 current_auc = 0.6533333333333333
User 8697 AUC after training: 0.6514285714285715
User 8697 does not improve AUC. Reverting changes.
Training on augumented user 135621 29/50 current_auc = 0.6533333333333333
User 135621 AUC after training: 0.6419047619047619
User 135621 does not improve AUC. Reverting changes.
Training on augumented user 32410 30/50 current_auc = 0.6533333333333333
User 32410 AUC after training: 0.6533333333333333
User 32410 does not improve AUC. Reverting changes.
Training on augumented user 42965 31/50 current_auc = 0.6533333333333333
User 42965 AUC after training: 0.6533333333333333
User 42965 does not improve AUC. Reverting changes.
Training on augumented user 92604 32/50 current_auc = 0.6533333333333333
User 92604 AUC after training: 0.6514285714285715
User 92604 does not improve AUC. Reverting changes.
Training on augumented user 5152 33/50 current_auc = 0.6533333333333333
User 5152 AUC after training: 0.6533333333333333
User 5152 does not improve AUC. Reverting changes.
Training on augumented user 59673 34/50 current_auc = 0.6533333333333333
User 59673 AUC after training: 0.6514285714285715
User 59673 does not improve AUC. Reverting changes.
Training on augumented user 67711 35/50 current_auc = 0.6533333333333333
User 67711 AUC after training: 0.6533333333333333
User 67711 does not improve AUC. Reverting changes.
Training on augumented user 17938 36/50 current_auc = 0.6533333333333333
User 17938 AUC after training: 0.6552380952380953
User 17938 improves AUC. Keeping the model.
Training on augumented user 30860 37/50 current_auc = 0.6552380952380953
User 30860 AUC after training: 0.6552380952380953
User 30860 does not improve AUC. Reverting changes.
Training on augumented user 8586 38/50 current_auc = 0.6552380952380953
User 8586 AUC after training: 0.6552380952380953
User 8586 does not improve AUC. Reverting changes.
Training on augumented user 24992 39/50 current_auc = 0.6552380952380953
User 24992 AUC after training: 0.6552380952380952
User 24992 does not improve AUC. Reverting changes.
Training on augumented user 65131 40/50 current_auc = 0.6552380952380953
User 65131 AUC after training: 0.6552380952380953
User 65131 does not improve AUC. Reverting changes.
Training on augumented user 8037 41/50 current_auc = 0.6552380952380953
User 8037 AUC after training: 0.6571428571428571
User 8037 improves AUC. Keeping the model.
Training on augumented user 103158 42/50 current_auc = 0.6571428571428571
User 103158 AUC after training: 0.6552380952380953
User 103158 does not improve AUC. Reverting changes.
Training on augumented user 90083 43/50 current_auc = 0.6571428571428571
User 90083 AUC after training: 0.6552380952380953
User 90083 does not improve AUC. Reverting changes.
Training on augumented user 59186 44/50 current_auc = 0.6571428571428571
User 59186 AUC after training: 0.6552380952380952
User 59186 does not improve AUC. Reverting changes.
Training on augumented user 107783 45/50 current_auc = 0.6571428571428571
User 107783 AUC after training: 0.6552380952380952
User 107783 does not improve AUC. Reverting changes.
Training on augumented user 112779 46/50 current_auc = 0.6571428571428571
User 112779 AUC after training: 0.6514285714285715
User 112779 does not improve AUC. Reverting changes.
Training on augumented user 15856 47/50 current_auc = 0.6571428571428571
User 15856 AUC after training: 0.6533333333333333
User 15856 does not improve AUC. Reverting changes.
Training on augumented user 49916 48/50 current_auc = 0.6571428571428571
User 49916 AUC after training: 0.6533333333333333
User 49916 does not improve AUC. Reverting changes.
Training on augumented user 74579 49/50 current_auc = 0.6571428571428571
User 74579 AUC after training: 0.6476190476190475
User 74579 does not improve AUC. Reverting changes.
[2024-12-02 17:55:33.101604] start test user 110139 33/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:55:33.836120] start test user 110139 33/567 recall augumented users by random, augumented_users = [41040, 126954, 124393, 36642, 18409, 61529, 76166, 61003, 79936, 137286, 96153, 26400, 46110, 26498, 33457, 12230, 135563, 18747, 76106, 128474, 100470, 67707, 8306, 23831, 81357, 15987, 221, 48286, 39398, 81247, 117526, 102381, 5342, 107671, 105231, 76791, 15761, 77702, 118822, 49068, 109675, 38309, 74869, 22132, 1262, 100340, 77776, 75740, 3201, 72929]
[2024-12-02 17:55:33.851447] user = 110139 Cloud 33/567
[2024-12-02 17:55:33.889153] user = 110139 Local 33/567
[2024-12-02 17:55:34.053016] user = 110139 Local+ 33/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:55:36.258534] user = 110139 MPDA- 33/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6230700064226076
Training on augumented user 41040 0/50 current_auc = 0.6230700064226076
User 41040 AUC after training: 0.6234810533076429
User 41040 improves AUC. Keeping the model.
Training on augumented user 126954 1/50 current_auc = 0.6234810533076429
User 126954 AUC after training: 0.6239177906229929
User 126954 improves AUC. Keeping the model.
Training on augumented user 124393 2/50 current_auc = 0.6239177906229929
User 124393 AUC after training: 0.6240976236351958
User 124393 improves AUC. Keeping the model.
Training on augumented user 36642 3/50 current_auc = 0.6240976236351958
User 36642 AUC after training: 0.6238021836865767
User 36642 does not improve AUC. Reverting changes.
Training on augumented user 18409 4/50 current_auc = 0.6240976236351958
User 18409 AUC after training: 0.622247912652537
User 18409 does not improve AUC. Reverting changes.
Training on augumented user 61529 5/50 current_auc = 0.6240976236351958
User 61529 AUC after training: 0.6240462427745664
User 61529 does not improve AUC. Reverting changes.
Training on augumented user 76166 6/50 current_auc = 0.6240976236351958
User 76166 AUC after training: 0.6242003853564546
User 76166 improves AUC. Keeping the model.
Training on augumented user 61003 7/50 current_auc = 0.6242003853564546
User 61003 AUC after training: 0.6234553628773283
User 61003 does not improve AUC. Reverting changes.
Training on augumented user 79936 8/50 current_auc = 0.6242003853564546
User 79936 AUC after training: 0.6238150289017341
User 79936 does not improve AUC. Reverting changes.
Training on augumented user 137286 9/50 current_auc = 0.6242003853564546
User 137286 AUC after training: 0.6233526011560693
User 137286 does not improve AUC. Reverting changes.
Training on augumented user 96153 10/50 current_auc = 0.6242003853564546
User 96153 AUC after training: 0.6248169556840077
User 96153 improves AUC. Keeping the model.
Training on augumented user 26400 11/50 current_auc = 0.6248169556840077
User 26400 AUC after training: 0.625009633911368
User 26400 improves AUC. Keeping the model.
Training on augumented user 46110 12/50 current_auc = 0.625009633911368
User 46110 AUC after training: 0.6242517662170841
User 46110 does not improve AUC. Reverting changes.
Training on augumented user 26498 13/50 current_auc = 0.625009633911368
User 26498 AUC after training: 0.6242260757867695
User 26498 does not improve AUC. Reverting changes.
Training on augumented user 33457 14/50 current_auc = 0.625009633911368
User 33457 AUC after training: 0.6256390494540783
User 33457 improves AUC. Keeping the model.
Training on augumented user 12230 15/50 current_auc = 0.6256390494540783
User 12230 AUC after training: 0.6250995504174695
User 12230 does not improve AUC. Reverting changes.
Training on augumented user 135563 16/50 current_auc = 0.6256390494540783
User 135563 AUC after training: 0.6251123956326268
User 135563 does not improve AUC. Reverting changes.
Training on augumented user 18747 17/50 current_auc = 0.6256390494540783
User 18747 AUC after training: 0.6256904303147077
User 18747 improves AUC. Keeping the model.
Training on augumented user 76106 18/50 current_auc = 0.6256904303147077
User 76106 AUC after training: 0.6257931920359665
User 76106 improves AUC. Keeping the model.
Training on augumented user 128474 19/50 current_auc = 0.6257931920359665
User 128474 AUC after training: 0.6257675016056519
User 128474 does not improve AUC. Reverting changes.
Training on augumented user 100470 20/50 current_auc = 0.6257931920359665
User 100470 AUC after training: 0.6255619781631343
User 100470 does not improve AUC. Reverting changes.
Training on augumented user 67707 21/50 current_auc = 0.6257931920359665
User 67707 AUC after training: 0.6258574181117533
User 67707 improves AUC. Keeping the model.
Training on augumented user 8306 22/50 current_auc = 0.6258574181117533
User 8306 AUC after training: 0.6249967886962107
User 8306 does not improve AUC. Reverting changes.
Training on augumented user 23831 23/50 current_auc = 0.6258574181117533
User 23831 AUC after training: 0.6255105973025048
User 23831 does not improve AUC. Reverting changes.
Training on augumented user 81357 24/50 current_auc = 0.6258574181117533
User 81357 AUC after training: 0.6257546563904945
User 81357 does not improve AUC. Reverting changes.
Training on augumented user 15987 25/50 current_auc = 0.6258574181117533
User 15987 AUC after training: 0.6257675016056519
User 15987 does not improve AUC. Reverting changes.
Training on augumented user 221 26/50 current_auc = 0.6258574181117533
User 221 AUC after training: 0.6244059087989724
User 221 does not improve AUC. Reverting changes.
Training on augumented user 48286 27/50 current_auc = 0.6258574181117533
User 48286 AUC after training: 0.6253179190751446
User 48286 does not improve AUC. Reverting changes.
Training on augumented user 39398 28/50 current_auc = 0.6258574181117533
User 39398 AUC after training: 0.6257418111753372
User 39398 does not improve AUC. Reverting changes.
Training on augumented user 81247 29/50 current_auc = 0.6258574181117533
User 81247 AUC after training: 0.6252280025690431
User 81247 does not improve AUC. Reverting changes.
Training on augumented user 117526 30/50 current_auc = 0.6258574181117533
User 117526 AUC after training: 0.6255362877328194
User 117526 does not improve AUC. Reverting changes.
Training on augumented user 102381 31/50 current_auc = 0.6258574181117533
User 102381 AUC after training: 0.6251252408477842
User 102381 does not improve AUC. Reverting changes.
Training on augumented user 5342 32/50 current_auc = 0.6258574181117533
User 5342 AUC after training: 0.6250738599871548
User 5342 does not improve AUC. Reverting changes.
Training on augumented user 107671 33/50 current_auc = 0.6258574181117533
User 107671 AUC after training: 0.6252922286448298
User 107671 does not improve AUC. Reverting changes.
Training on augumented user 105231 34/50 current_auc = 0.6258574181117533
User 105231 AUC after training: 0.6259216441875401
User 105231 improves AUC. Keeping the model.
Training on augumented user 76791 35/50 current_auc = 0.6259216441875401
User 76791 AUC after training: 0.6252536929993577
User 76791 does not improve AUC. Reverting changes.
Training on augumented user 15761 36/50 current_auc = 0.6259216441875401
User 15761 AUC after training: 0.623994861913937
User 15761 does not improve AUC. Reverting changes.
Training on augumented user 77702 37/50 current_auc = 0.6259216441875401
User 77702 AUC after training: 0.6256133590237636
User 77702 does not improve AUC. Reverting changes.
Training on augumented user 118822 38/50 current_auc = 0.6259216441875401
User 118822 AUC after training: 0.6249967886962107
User 118822 does not improve AUC. Reverting changes.
Training on augumented user 49068 39/50 current_auc = 0.6259216441875401
User 49068 AUC after training: 0.6257546563904945
User 49068 does not improve AUC. Reverting changes.
Training on augumented user 109675 40/50 current_auc = 0.6259216441875401
User 109675 AUC after training: 0.6254335260115607
User 109675 does not improve AUC. Reverting changes.
Training on augumented user 38309 41/50 current_auc = 0.6259216441875401
User 38309 AUC after training: 0.6254849068721902
User 38309 does not improve AUC. Reverting changes.
Training on augumented user 74869 42/50 current_auc = 0.6259216441875401
User 74869 AUC after training: 0.6258702633269108
User 74869 does not improve AUC. Reverting changes.
Training on augumented user 22132 43/50 current_auc = 0.6259216441875401
User 22132 AUC after training: 0.6259216441875401
User 22132 does not improve AUC. Reverting changes.
Training on augumented user 1262 44/50 current_auc = 0.6259216441875401
User 1262 AUC after training: 0.6249197174052665
User 1262 does not improve AUC. Reverting changes.
Training on augumented user 100340 45/50 current_auc = 0.6259216441875401
User 100340 AUC after training: 0.62504816955684
User 100340 does not improve AUC. Reverting changes.
Training on augumented user 77776 46/50 current_auc = 0.6259216441875401
User 77776 AUC after training: 0.6261528580603726
User 77776 improves AUC. Keeping the model.
Training on augumented user 75740 47/50 current_auc = 0.6261528580603726
User 75740 AUC after training: 0.6256904303147077
User 75740 does not improve AUC. Reverting changes.
Training on augumented user 3201 48/50 current_auc = 0.6261528580603726
User 3201 AUC after training: 0.6249967886962107
User 3201 does not improve AUC. Reverting changes.
Training on augumented user 72929 49/50 current_auc = 0.6261528580603726
User 72929 AUC after training: 0.6246114322414901
User 72929 does not improve AUC. Reverting changes.
[2024-12-02 17:56:05.589600] start test user 110180 34/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:56:06.048202] start test user 110180 34/567 recall augumented users by random, augumented_users = [106567, 51502, 46060, 90395, 50686, 16624, 52909, 84514, 19234, 47259, 107991, 13170, 120161, 103133, 55697, 85070, 20449, 100846, 49721, 78244, 43262, 126856, 34480, 105339, 67691, 79379, 44238, 64909, 33756, 12916, 94493, 41346, 111179, 53272, 23253, 2006, 42875, 98398, 103375, 137373, 58516, 82923, 17107, 18759, 28741, 64603, 134790, 137347, 62703, 105461]
[2024-12-02 17:56:06.062843] user = 110180 Cloud 34/567
[2024-12-02 17:56:06.072976] user = 110180 Local 34/567
[2024-12-02 17:56:06.092170] user = 110180 Local+ 34/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:56:09.377111] user = 110180 MPDA- 34/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.96875
Training on augumented user 106567 0/50 current_auc = 0.96875
User 106567 AUC after training: 0.96875
User 106567 does not improve AUC. Reverting changes.
Training on augumented user 51502 1/50 current_auc = 0.96875
User 51502 AUC after training: 0.96875
User 51502 does not improve AUC. Reverting changes.
Training on augumented user 46060 2/50 current_auc = 0.96875
User 46060 AUC after training: 0.96875
User 46060 does not improve AUC. Reverting changes.
Training on augumented user 90395 3/50 current_auc = 0.96875
User 90395 AUC after training: 0.96875
User 90395 does not improve AUC. Reverting changes.
Training on augumented user 50686 4/50 current_auc = 0.96875
User 50686 AUC after training: 0.96875
User 50686 does not improve AUC. Reverting changes.
Training on augumented user 16624 5/50 current_auc = 0.96875
User 16624 AUC after training: 0.96875
User 16624 does not improve AUC. Reverting changes.
Training on augumented user 52909 6/50 current_auc = 0.96875
User 52909 AUC after training: 0.96875
User 52909 does not improve AUC. Reverting changes.
Training on augumented user 84514 7/50 current_auc = 0.96875
User 84514 AUC after training: 0.96875
User 84514 does not improve AUC. Reverting changes.
Training on augumented user 19234 8/50 current_auc = 0.96875
User 19234 AUC after training: 0.96875
User 19234 does not improve AUC. Reverting changes.
Training on augumented user 47259 9/50 current_auc = 0.96875
User 47259 AUC after training: 0.96875
User 47259 does not improve AUC. Reverting changes.
Training on augumented user 107991 10/50 current_auc = 0.96875
User 107991 AUC after training: 0.96875
User 107991 does not improve AUC. Reverting changes.
Training on augumented user 13170 11/50 current_auc = 0.96875
User 13170 AUC after training: 0.96875
User 13170 does not improve AUC. Reverting changes.
Training on augumented user 120161 12/50 current_auc = 0.96875
User 120161 AUC after training: 0.9375
User 120161 does not improve AUC. Reverting changes.
Training on augumented user 103133 13/50 current_auc = 0.96875
User 103133 AUC after training: 0.96875
User 103133 does not improve AUC. Reverting changes.
Training on augumented user 55697 14/50 current_auc = 0.96875
User 55697 AUC after training: 0.96875
User 55697 does not improve AUC. Reverting changes.
Training on augumented user 85070 15/50 current_auc = 0.96875
User 85070 AUC after training: 0.96875
User 85070 does not improve AUC. Reverting changes.
Training on augumented user 20449 16/50 current_auc = 0.96875
User 20449 AUC after training: 0.96875
User 20449 does not improve AUC. Reverting changes.
Training on augumented user 100846 17/50 current_auc = 0.96875
User 100846 AUC after training: 0.96875
User 100846 does not improve AUC. Reverting changes.
Training on augumented user 49721 18/50 current_auc = 0.96875
User 49721 AUC after training: 0.96875
User 49721 does not improve AUC. Reverting changes.
Training on augumented user 78244 19/50 current_auc = 0.96875
User 78244 AUC after training: 0.96875
User 78244 does not improve AUC. Reverting changes.
Training on augumented user 43262 20/50 current_auc = 0.96875
User 43262 AUC after training: 0.96875
User 43262 does not improve AUC. Reverting changes.
Training on augumented user 126856 21/50 current_auc = 0.96875
User 126856 AUC after training: 0.96875
User 126856 does not improve AUC. Reverting changes.
Training on augumented user 34480 22/50 current_auc = 0.96875
User 34480 AUC after training: 0.96875
User 34480 does not improve AUC. Reverting changes.
Training on augumented user 105339 23/50 current_auc = 0.96875
User 105339 AUC after training: 0.96875
User 105339 does not improve AUC. Reverting changes.
Training on augumented user 67691 24/50 current_auc = 0.96875
User 67691 AUC after training: 0.96875
User 67691 does not improve AUC. Reverting changes.
Training on augumented user 79379 25/50 current_auc = 0.96875
User 79379 AUC after training: 0.96875
User 79379 does not improve AUC. Reverting changes.
Training on augumented user 44238 26/50 current_auc = 0.96875
User 44238 AUC after training: 0.9375
User 44238 does not improve AUC. Reverting changes.
Training on augumented user 64909 27/50 current_auc = 0.96875
User 64909 AUC after training: 0.96875
User 64909 does not improve AUC. Reverting changes.
Training on augumented user 33756 28/50 current_auc = 0.96875
User 33756 AUC after training: 0.96875
User 33756 does not improve AUC. Reverting changes.
Training on augumented user 12916 29/50 current_auc = 0.96875
User 12916 AUC after training: 0.96875
User 12916 does not improve AUC. Reverting changes.
Training on augumented user 94493 30/50 current_auc = 0.96875
User 94493 AUC after training: 0.96875
User 94493 does not improve AUC. Reverting changes.
Training on augumented user 41346 31/50 current_auc = 0.96875
User 41346 AUC after training: 0.96875
User 41346 does not improve AUC. Reverting changes.
Training on augumented user 111179 32/50 current_auc = 0.96875
User 111179 AUC after training: 0.96875
User 111179 does not improve AUC. Reverting changes.
Training on augumented user 53272 33/50 current_auc = 0.96875
User 53272 AUC after training: 0.96875
User 53272 does not improve AUC. Reverting changes.
Training on augumented user 23253 34/50 current_auc = 0.96875
User 23253 AUC after training: 0.96875
User 23253 does not improve AUC. Reverting changes.
Training on augumented user 2006 35/50 current_auc = 0.96875
User 2006 AUC after training: 0.96875
User 2006 does not improve AUC. Reverting changes.
Training on augumented user 42875 36/50 current_auc = 0.96875
User 42875 AUC after training: 0.96875
User 42875 does not improve AUC. Reverting changes.
Training on augumented user 98398 37/50 current_auc = 0.96875
User 98398 AUC after training: 0.96875
User 98398 does not improve AUC. Reverting changes.
Training on augumented user 103375 38/50 current_auc = 0.96875
User 103375 AUC after training: 0.96875
User 103375 does not improve AUC. Reverting changes.
Training on augumented user 137373 39/50 current_auc = 0.96875
User 137373 AUC after training: 0.96875
User 137373 does not improve AUC. Reverting changes.
Training on augumented user 58516 40/50 current_auc = 0.96875
User 58516 AUC after training: 0.96875
User 58516 does not improve AUC. Reverting changes.
Training on augumented user 82923 41/50 current_auc = 0.96875
User 82923 AUC after training: 0.96875
User 82923 does not improve AUC. Reverting changes.
Training on augumented user 17107 42/50 current_auc = 0.96875
User 17107 AUC after training: 0.96875
User 17107 does not improve AUC. Reverting changes.
Training on augumented user 18759 43/50 current_auc = 0.96875
User 18759 AUC after training: 0.96875
User 18759 does not improve AUC. Reverting changes.
Training on augumented user 28741 44/50 current_auc = 0.96875
User 28741 AUC after training: 0.96875
User 28741 does not improve AUC. Reverting changes.
Training on augumented user 64603 45/50 current_auc = 0.96875
User 64603 AUC after training: 0.96875
User 64603 does not improve AUC. Reverting changes.
Training on augumented user 134790 46/50 current_auc = 0.96875
User 134790 AUC after training: 0.96875
User 134790 does not improve AUC. Reverting changes.
Training on augumented user 137347 47/50 current_auc = 0.96875
User 137347 AUC after training: 0.96875
User 137347 does not improve AUC. Reverting changes.
Training on augumented user 62703 48/50 current_auc = 0.96875
User 62703 AUC after training: 0.96875
User 62703 does not improve AUC. Reverting changes.
Training on augumented user 105461 49/50 current_auc = 0.96875
User 105461 AUC after training: 0.96875
User 105461 does not improve AUC. Reverting changes.
[2024-12-02 17:56:39.879253] start test user 110225 35/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:56:40.293768] start test user 110225 35/567 recall augumented users by random, augumented_users = [24292, 71461, 100666, 61803, 130077, 121835, 102868, 127925, 94856, 105040, 81185, 106660, 66444, 85592, 113927, 102412, 99156, 49932, 106276, 16550, 6098, 88370, 137213, 74525, 93976, 11032, 135876, 63528, 43003, 21952, 104377, 8896, 22090, 51620, 62079, 132154, 100170, 55356, 124183, 101320, 108629, 84574, 31226, 74852, 22346, 124251, 12940, 99007, 129889, 34848]
[2024-12-02 17:56:40.308961] user = 110225 Cloud 35/567
[2024-12-02 17:56:40.317971] user = 110225 Local 35/567
[2024-12-02 17:56:40.344112] user = 110225 Local+ 35/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:56:42.846514] user = 110225 MPDA- 35/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6666666666666666
Training on augumented user 24292 0/50 current_auc = 0.6666666666666666
User 24292 AUC after training: 0.6666666666666666
User 24292 does not improve AUC. Reverting changes.
Training on augumented user 71461 1/50 current_auc = 0.6666666666666666
User 71461 AUC after training: 0.6666666666666666
User 71461 does not improve AUC. Reverting changes.
Training on augumented user 100666 2/50 current_auc = 0.6666666666666666
User 100666 AUC after training: 0.6666666666666666
User 100666 does not improve AUC. Reverting changes.
Training on augumented user 61803 3/50 current_auc = 0.6666666666666666
User 61803 AUC after training: 0.6666666666666666
User 61803 does not improve AUC. Reverting changes.
Training on augumented user 130077 4/50 current_auc = 0.6666666666666666
User 130077 AUC after training: 0.6666666666666666
User 130077 does not improve AUC. Reverting changes.
Training on augumented user 121835 5/50 current_auc = 0.6666666666666666
User 121835 AUC after training: 0.6666666666666666
User 121835 does not improve AUC. Reverting changes.
Training on augumented user 102868 6/50 current_auc = 0.6666666666666666
User 102868 AUC after training: 0.6666666666666666
User 102868 does not improve AUC. Reverting changes.
Training on augumented user 127925 7/50 current_auc = 0.6666666666666666
User 127925 AUC after training: 0.6666666666666666
User 127925 does not improve AUC. Reverting changes.
Training on augumented user 94856 8/50 current_auc = 0.6666666666666666
User 94856 AUC after training: 0.6666666666666666
User 94856 does not improve AUC. Reverting changes.
Training on augumented user 105040 9/50 current_auc = 0.6666666666666666
User 105040 AUC after training: 0.6666666666666666
User 105040 does not improve AUC. Reverting changes.
Training on augumented user 81185 10/50 current_auc = 0.6666666666666666
User 81185 AUC after training: 0.6666666666666666
User 81185 does not improve AUC. Reverting changes.
Training on augumented user 106660 11/50 current_auc = 0.6666666666666666
User 106660 AUC after training: 0.6666666666666666
User 106660 does not improve AUC. Reverting changes.
Training on augumented user 66444 12/50 current_auc = 0.6666666666666666
User 66444 AUC after training: 0.6666666666666666
User 66444 does not improve AUC. Reverting changes.
Training on augumented user 85592 13/50 current_auc = 0.6666666666666666
User 85592 AUC after training: 0.6666666666666666
User 85592 does not improve AUC. Reverting changes.
Training on augumented user 113927 14/50 current_auc = 0.6666666666666666
User 113927 AUC after training: 0.6666666666666666
User 113927 does not improve AUC. Reverting changes.
Training on augumented user 102412 15/50 current_auc = 0.6666666666666666
User 102412 AUC after training: 0.6666666666666666
User 102412 does not improve AUC. Reverting changes.
Training on augumented user 99156 16/50 current_auc = 0.6666666666666666
User 99156 AUC after training: 0.6666666666666666
User 99156 does not improve AUC. Reverting changes.
Training on augumented user 49932 17/50 current_auc = 0.6666666666666666
User 49932 AUC after training: 0.6666666666666666
User 49932 does not improve AUC. Reverting changes.
Training on augumented user 106276 18/50 current_auc = 0.6666666666666666
User 106276 AUC after training: 0.6666666666666666
User 106276 does not improve AUC. Reverting changes.
Training on augumented user 16550 19/50 current_auc = 0.6666666666666666
User 16550 AUC after training: 0.6666666666666666
User 16550 does not improve AUC. Reverting changes.
Training on augumented user 6098 20/50 current_auc = 0.6666666666666666
User 6098 AUC after training: 0.6666666666666666
User 6098 does not improve AUC. Reverting changes.
Training on augumented user 88370 21/50 current_auc = 0.6666666666666666
User 88370 AUC after training: 0.6666666666666666
User 88370 does not improve AUC. Reverting changes.
Training on augumented user 137213 22/50 current_auc = 0.6666666666666666
User 137213 AUC after training: 0.6666666666666666
User 137213 does not improve AUC. Reverting changes.
Training on augumented user 74525 23/50 current_auc = 0.6666666666666666
User 74525 AUC after training: 0.6666666666666666
User 74525 does not improve AUC. Reverting changes.
Training on augumented user 93976 24/50 current_auc = 0.6666666666666666
User 93976 AUC after training: 0.6666666666666666
User 93976 does not improve AUC. Reverting changes.
Training on augumented user 11032 25/50 current_auc = 0.6666666666666666
User 11032 AUC after training: 0.6666666666666666
User 11032 does not improve AUC. Reverting changes.
Training on augumented user 135876 26/50 current_auc = 0.6666666666666666
User 135876 AUC after training: 0.6666666666666666
User 135876 does not improve AUC. Reverting changes.
Training on augumented user 63528 27/50 current_auc = 0.6666666666666666
User 63528 AUC after training: 0.6666666666666666
User 63528 does not improve AUC. Reverting changes.
Training on augumented user 43003 28/50 current_auc = 0.6666666666666666
User 43003 AUC after training: 0.6666666666666666
User 43003 does not improve AUC. Reverting changes.
Training on augumented user 21952 29/50 current_auc = 0.6666666666666666
User 21952 AUC after training: 0.6666666666666666
User 21952 does not improve AUC. Reverting changes.
Training on augumented user 104377 30/50 current_auc = 0.6666666666666666
User 104377 AUC after training: 0.6666666666666666
User 104377 does not improve AUC. Reverting changes.
Training on augumented user 8896 31/50 current_auc = 0.6666666666666666
User 8896 AUC after training: 0.6666666666666666
User 8896 does not improve AUC. Reverting changes.
Training on augumented user 22090 32/50 current_auc = 0.6666666666666666
User 22090 AUC after training: 0.6666666666666666
User 22090 does not improve AUC. Reverting changes.
Training on augumented user 51620 33/50 current_auc = 0.6666666666666666
User 51620 AUC after training: 0.6666666666666666
User 51620 does not improve AUC. Reverting changes.
Training on augumented user 62079 34/50 current_auc = 0.6666666666666666
User 62079 AUC after training: 0.6666666666666666
User 62079 does not improve AUC. Reverting changes.
Training on augumented user 132154 35/50 current_auc = 0.6666666666666666
User 132154 AUC after training: 0.6666666666666666
User 132154 does not improve AUC. Reverting changes.
Training on augumented user 100170 36/50 current_auc = 0.6666666666666666
User 100170 AUC after training: 0.6666666666666666
User 100170 does not improve AUC. Reverting changes.
Training on augumented user 55356 37/50 current_auc = 0.6666666666666666
User 55356 AUC after training: 0.6666666666666666
User 55356 does not improve AUC. Reverting changes.
Training on augumented user 124183 38/50 current_auc = 0.6666666666666666
User 124183 AUC after training: 0.6666666666666666
User 124183 does not improve AUC. Reverting changes.
Training on augumented user 101320 39/50 current_auc = 0.6666666666666666
User 101320 AUC after training: 0.6666666666666666
User 101320 does not improve AUC. Reverting changes.
Training on augumented user 108629 40/50 current_auc = 0.6666666666666666
User 108629 AUC after training: 0.6666666666666666
User 108629 does not improve AUC. Reverting changes.
Training on augumented user 84574 41/50 current_auc = 0.6666666666666666
User 84574 AUC after training: 0.6666666666666666
User 84574 does not improve AUC. Reverting changes.
Training on augumented user 31226 42/50 current_auc = 0.6666666666666666
User 31226 AUC after training: 0.6666666666666666
User 31226 does not improve AUC. Reverting changes.
Training on augumented user 74852 43/50 current_auc = 0.6666666666666666
User 74852 AUC after training: 0.6666666666666666
User 74852 does not improve AUC. Reverting changes.
Training on augumented user 22346 44/50 current_auc = 0.6666666666666666
User 22346 AUC after training: 0.6666666666666666
User 22346 does not improve AUC. Reverting changes.
Training on augumented user 124251 45/50 current_auc = 0.6666666666666666
User 124251 AUC after training: 0.6666666666666666
User 124251 does not improve AUC. Reverting changes.
Training on augumented user 12940 46/50 current_auc = 0.6666666666666666
User 12940 AUC after training: 0.6666666666666666
User 12940 does not improve AUC. Reverting changes.
Training on augumented user 99007 47/50 current_auc = 0.6666666666666666
User 99007 AUC after training: 0.6666666666666666
User 99007 does not improve AUC. Reverting changes.
Training on augumented user 129889 48/50 current_auc = 0.6666666666666666
User 129889 AUC after training: 0.6666666666666666
User 129889 does not improve AUC. Reverting changes.
Training on augumented user 34848 49/50 current_auc = 0.6666666666666666
User 34848 AUC after training: 0.6666666666666666
User 34848 does not improve AUC. Reverting changes.
[2024-12-02 17:57:14.744587] start test user 110228 36/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:57:15.395655] start test user 110228 36/567 recall augumented users by random, augumented_users = [76454, 12535, 76851, 66404, 55137, 81625, 53416, 99150, 100762, 70604, 63199, 75580, 88031, 28574, 22209, 90360, 131416, 60082, 103037, 128577, 137001, 126820, 3687, 122366, 43305, 78003, 20634, 87325, 32418, 82066, 1231, 9612, 50895, 91509, 83267, 121017, 137651, 111707, 75979, 101002, 114053, 126427, 106626, 60442, 32644, 108481, 47038, 3085, 30676, 122051]
[2024-12-02 17:57:15.410023] user = 110228 Cloud 36/567
[2024-12-02 17:57:15.458918] user = 110228 Local 36/567
[2024-12-02 17:57:15.518927] user = 110228 Local+ 36/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:57:17.197744] user = 110228 MPDA- 36/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5637743006164059
Training on augumented user 76454 0/50 current_auc = 0.5637743006164059
User 76454 AUC after training: 0.5651967757230916
User 76454 improves AUC. Keeping the model.
Training on augumented user 12535 1/50 current_auc = 0.5651967757230916
User 12535 AUC after training: 0.568515884305358
User 12535 improves AUC. Keeping the model.
Training on augumented user 76851 2/50 current_auc = 0.568515884305358
User 76851 AUC after training: 0.5689900426742532
User 76851 improves AUC. Keeping the model.
Training on augumented user 66404 3/50 current_auc = 0.5689900426742532
User 66404 AUC after training: 0.5680417259364627
User 66404 does not improve AUC. Reverting changes.
Training on augumented user 55137 4/50 current_auc = 0.5689900426742532
User 55137 AUC after training: 0.5680417259364628
User 55137 does not improve AUC. Reverting changes.
Training on augumented user 81625 5/50 current_auc = 0.5689900426742532
User 81625 AUC after training: 0.5682788051209104
User 81625 does not improve AUC. Reverting changes.
Training on augumented user 53416 6/50 current_auc = 0.5689900426742532
User 53416 AUC after training: 0.5670934091986723
User 53416 does not improve AUC. Reverting changes.
Training on augumented user 99150 7/50 current_auc = 0.5689900426742532
User 99150 AUC after training: 0.5680417259364628
User 99150 does not improve AUC. Reverting changes.
Training on augumented user 100762 8/50 current_auc = 0.5689900426742532
User 100762 AUC after training: 0.5680417259364628
User 100762 does not improve AUC. Reverting changes.
Training on augumented user 70604 9/50 current_auc = 0.5689900426742532
User 70604 AUC after training: 0.5675675675675675
User 70604 does not improve AUC. Reverting changes.
Training on augumented user 63199 10/50 current_auc = 0.5689900426742532
User 63199 AUC after training: 0.568515884305358
User 63199 does not improve AUC. Reverting changes.
Training on augumented user 75580 11/50 current_auc = 0.5689900426742532
User 75580 AUC after training: 0.5675675675675675
User 75580 does not improve AUC. Reverting changes.
Training on augumented user 88031 12/50 current_auc = 0.5689900426742532
User 88031 AUC after training: 0.5694642010431484
User 88031 improves AUC. Keeping the model.
Training on augumented user 28574 13/50 current_auc = 0.5694642010431484
User 28574 AUC after training: 0.568515884305358
User 28574 does not improve AUC. Reverting changes.
Training on augumented user 22209 14/50 current_auc = 0.5694642010431484
User 22209 AUC after training: 0.5675675675675677
User 22209 does not improve AUC. Reverting changes.
Training on augumented user 90360 15/50 current_auc = 0.5694642010431484
User 90360 AUC after training: 0.5675675675675677
User 90360 does not improve AUC. Reverting changes.
Training on augumented user 131416 16/50 current_auc = 0.5694642010431484
User 131416 AUC after training: 0.5680417259364627
User 131416 does not improve AUC. Reverting changes.
Training on augumented user 60082 17/50 current_auc = 0.5694642010431484
User 60082 AUC after training: 0.568515884305358
User 60082 does not improve AUC. Reverting changes.
Training on augumented user 103037 18/50 current_auc = 0.5694642010431484
User 103037 AUC after training: 0.5689900426742532
User 103037 does not improve AUC. Reverting changes.
Training on augumented user 128577 19/50 current_auc = 0.5694642010431484
User 128577 AUC after training: 0.5675675675675675
User 128577 does not improve AUC. Reverting changes.
Training on augumented user 137001 20/50 current_auc = 0.5694642010431484
User 137001 AUC after training: 0.5680417259364627
User 137001 does not improve AUC. Reverting changes.
Training on augumented user 126820 21/50 current_auc = 0.5694642010431484
User 126820 AUC after training: 0.5680417259364627
User 126820 does not improve AUC. Reverting changes.
Training on augumented user 3687 22/50 current_auc = 0.5694642010431484
User 3687 AUC after training: 0.5694642010431484
User 3687 does not improve AUC. Reverting changes.
Training on augumented user 122366 23/50 current_auc = 0.5694642010431484
User 122366 AUC after training: 0.5694642010431484
User 122366 does not improve AUC. Reverting changes.
Training on augumented user 43305 24/50 current_auc = 0.5694642010431484
User 43305 AUC after training: 0.5685158843053579
User 43305 does not improve AUC. Reverting changes.
Training on augumented user 78003 25/50 current_auc = 0.5694642010431484
User 78003 AUC after training: 0.5680417259364627
User 78003 does not improve AUC. Reverting changes.
Training on augumented user 20634 26/50 current_auc = 0.5694642010431484
User 20634 AUC after training: 0.5694642010431484
User 20634 does not improve AUC. Reverting changes.
Training on augumented user 87325 27/50 current_auc = 0.5694642010431484
User 87325 AUC after training: 0.568515884305358
User 87325 does not improve AUC. Reverting changes.
Training on augumented user 32418 28/50 current_auc = 0.5694642010431484
User 32418 AUC after training: 0.5680417259364628
User 32418 does not improve AUC. Reverting changes.
Training on augumented user 82066 29/50 current_auc = 0.5694642010431484
User 82066 AUC after training: 0.566145092460882
User 82066 does not improve AUC. Reverting changes.
Training on augumented user 1231 30/50 current_auc = 0.5694642010431484
User 1231 AUC after training: 0.5675675675675677
User 1231 does not improve AUC. Reverting changes.
Training on augumented user 9612 31/50 current_auc = 0.5694642010431484
User 9612 AUC after training: 0.568515884305358
User 9612 does not improve AUC. Reverting changes.
Training on augumented user 50895 32/50 current_auc = 0.5694642010431484
User 50895 AUC after training: 0.5675675675675677
User 50895 does not improve AUC. Reverting changes.
Training on augumented user 91509 33/50 current_auc = 0.5694642010431484
User 91509 AUC after training: 0.5675675675675675
User 91509 does not improve AUC. Reverting changes.
Training on augumented user 83267 34/50 current_auc = 0.5694642010431484
User 83267 AUC after training: 0.5675675675675675
User 83267 does not improve AUC. Reverting changes.
Training on augumented user 121017 35/50 current_auc = 0.5694642010431484
User 121017 AUC after training: 0.5694642010431484
User 121017 does not improve AUC. Reverting changes.
Training on augumented user 137651 36/50 current_auc = 0.5694642010431484
User 137651 AUC after training: 0.5680417259364628
User 137651 does not improve AUC. Reverting changes.
Training on augumented user 111707 37/50 current_auc = 0.5694642010431484
User 111707 AUC after training: 0.568515884305358
User 111707 does not improve AUC. Reverting changes.
Training on augumented user 75979 38/50 current_auc = 0.5694642010431484
User 75979 AUC after training: 0.5680417259364628
User 75979 does not improve AUC. Reverting changes.
Training on augumented user 101002 39/50 current_auc = 0.5694642010431484
User 101002 AUC after training: 0.5670934091986723
User 101002 does not improve AUC. Reverting changes.
Training on augumented user 114053 40/50 current_auc = 0.5694642010431484
User 114053 AUC after training: 0.5647226173541963
User 114053 does not improve AUC. Reverting changes.
Training on augumented user 126427 41/50 current_auc = 0.5694642010431484
User 126427 AUC after training: 0.56733048838312
User 126427 does not improve AUC. Reverting changes.
Training on augumented user 106626 42/50 current_auc = 0.5694642010431484
User 106626 AUC after training: 0.5680417259364628
User 106626 does not improve AUC. Reverting changes.
Training on augumented user 60442 43/50 current_auc = 0.5694642010431484
User 60442 AUC after training: 0.5670934091986723
User 60442 does not improve AUC. Reverting changes.
Training on augumented user 32644 44/50 current_auc = 0.5694642010431484
User 32644 AUC after training: 0.568515884305358
User 32644 does not improve AUC. Reverting changes.
Training on augumented user 108481 45/50 current_auc = 0.5694642010431484
User 108481 AUC after training: 0.5680417259364628
User 108481 does not improve AUC. Reverting changes.
Training on augumented user 47038 46/50 current_auc = 0.5694642010431484
User 47038 AUC after training: 0.5675675675675675
User 47038 does not improve AUC. Reverting changes.
Training on augumented user 3085 47/50 current_auc = 0.5694642010431484
User 3085 AUC after training: 0.5675675675675675
User 3085 does not improve AUC. Reverting changes.
Training on augumented user 30676 48/50 current_auc = 0.5694642010431484
User 30676 AUC after training: 0.5670934091986723
User 30676 does not improve AUC. Reverting changes.
Training on augumented user 122051 49/50 current_auc = 0.5694642010431484
User 122051 AUC after training: 0.5670934091986723
User 122051 does not improve AUC. Reverting changes.
[2024-12-02 17:57:48.977707] start test user 110233 37/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:57:49.844102] start test user 110233 37/567 recall augumented users by random, augumented_users = [51909, 10763, 456, 76304, 37226, 7854, 28447, 102092, 15214, 58406, 82256, 103280, 43919, 34652, 137814, 87977, 84354, 45148, 64227, 68392, 136450, 12144, 39914, 52849, 22901, 16448, 108093, 69606, 126398, 11634, 24244, 72658, 136203, 58437, 134137, 65876, 115619, 122059, 14251, 104397, 59835, 5155, 88857, 137399, 116583, 63792, 113033, 44145, 127187, 32846]
[2024-12-02 17:57:49.861578] user = 110233 Cloud 37/567
[2024-12-02 17:57:49.880203] user = 110233 Local 37/567
[2024-12-02 17:57:49.933880] user = 110233 Local+ 37/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:57:52.878196] user = 110233 MPDA- 37/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.868421052631579
Training on augumented user 51909 0/50 current_auc = 0.868421052631579
User 51909 AUC after training: 0.868421052631579
User 51909 does not improve AUC. Reverting changes.
Training on augumented user 10763 1/50 current_auc = 0.868421052631579
User 10763 AUC after training: 0.8552631578947368
User 10763 does not improve AUC. Reverting changes.
Training on augumented user 456 2/50 current_auc = 0.868421052631579
User 456 AUC after training: 0.8552631578947368
User 456 does not improve AUC. Reverting changes.
Training on augumented user 76304 3/50 current_auc = 0.868421052631579
User 76304 AUC after training: 0.868421052631579
User 76304 does not improve AUC. Reverting changes.
Training on augumented user 37226 4/50 current_auc = 0.868421052631579
User 37226 AUC after training: 0.868421052631579
User 37226 does not improve AUC. Reverting changes.
Training on augumented user 7854 5/50 current_auc = 0.868421052631579
User 7854 AUC after training: 0.868421052631579
User 7854 does not improve AUC. Reverting changes.
Training on augumented user 28447 6/50 current_auc = 0.868421052631579
User 28447 AUC after training: 0.8421052631578947
User 28447 does not improve AUC. Reverting changes.
Training on augumented user 102092 7/50 current_auc = 0.868421052631579
User 102092 AUC after training: 0.868421052631579
User 102092 does not improve AUC. Reverting changes.
Training on augumented user 15214 8/50 current_auc = 0.868421052631579
User 15214 AUC after training: 0.868421052631579
User 15214 does not improve AUC. Reverting changes.
Training on augumented user 58406 9/50 current_auc = 0.868421052631579
User 58406 AUC after training: 0.868421052631579
User 58406 does not improve AUC. Reverting changes.
Training on augumented user 82256 10/50 current_auc = 0.868421052631579
User 82256 AUC after training: 0.8552631578947368
User 82256 does not improve AUC. Reverting changes.
Training on augumented user 103280 11/50 current_auc = 0.868421052631579
User 103280 AUC after training: 0.868421052631579
User 103280 does not improve AUC. Reverting changes.
Training on augumented user 43919 12/50 current_auc = 0.868421052631579
User 43919 AUC after training: 0.868421052631579
User 43919 does not improve AUC. Reverting changes.
Training on augumented user 34652 13/50 current_auc = 0.868421052631579
User 34652 AUC after training: 0.8552631578947368
User 34652 does not improve AUC. Reverting changes.
Training on augumented user 137814 14/50 current_auc = 0.868421052631579
User 137814 AUC after training: 0.868421052631579
User 137814 does not improve AUC. Reverting changes.
Training on augumented user 87977 15/50 current_auc = 0.868421052631579
User 87977 AUC after training: 0.868421052631579
User 87977 does not improve AUC. Reverting changes.
Training on augumented user 84354 16/50 current_auc = 0.868421052631579
User 84354 AUC after training: 0.8421052631578947
User 84354 does not improve AUC. Reverting changes.
Training on augumented user 45148 17/50 current_auc = 0.868421052631579
User 45148 AUC after training: 0.8552631578947368
User 45148 does not improve AUC. Reverting changes.
Training on augumented user 64227 18/50 current_auc = 0.868421052631579
User 64227 AUC after training: 0.8552631578947368
User 64227 does not improve AUC. Reverting changes.
Training on augumented user 68392 19/50 current_auc = 0.868421052631579
User 68392 AUC after training: 0.868421052631579
User 68392 does not improve AUC. Reverting changes.
Training on augumented user 136450 20/50 current_auc = 0.868421052631579
User 136450 AUC after training: 0.868421052631579
User 136450 does not improve AUC. Reverting changes.
Training on augumented user 12144 21/50 current_auc = 0.868421052631579
User 12144 AUC after training: 0.868421052631579
User 12144 does not improve AUC. Reverting changes.
Training on augumented user 39914 22/50 current_auc = 0.868421052631579
User 39914 AUC after training: 0.881578947368421
User 39914 improves AUC. Keeping the model.
Training on augumented user 52849 23/50 current_auc = 0.881578947368421
User 52849 AUC after training: 0.881578947368421
User 52849 does not improve AUC. Reverting changes.
Training on augumented user 22901 24/50 current_auc = 0.881578947368421
User 22901 AUC after training: 0.881578947368421
User 22901 does not improve AUC. Reverting changes.
Training on augumented user 16448 25/50 current_auc = 0.881578947368421
User 16448 AUC after training: 0.8552631578947368
User 16448 does not improve AUC. Reverting changes.
Training on augumented user 108093 26/50 current_auc = 0.881578947368421
User 108093 AUC after training: 0.868421052631579
User 108093 does not improve AUC. Reverting changes.
Training on augumented user 69606 27/50 current_auc = 0.881578947368421
User 69606 AUC after training: 0.881578947368421
User 69606 does not improve AUC. Reverting changes.
Training on augumented user 126398 28/50 current_auc = 0.881578947368421
User 126398 AUC after training: 0.881578947368421
User 126398 does not improve AUC. Reverting changes.
Training on augumented user 11634 29/50 current_auc = 0.881578947368421
User 11634 AUC after training: 0.881578947368421
User 11634 does not improve AUC. Reverting changes.
Training on augumented user 24244 30/50 current_auc = 0.881578947368421
User 24244 AUC after training: 0.868421052631579
User 24244 does not improve AUC. Reverting changes.
Training on augumented user 72658 31/50 current_auc = 0.881578947368421
User 72658 AUC after training: 0.881578947368421
User 72658 does not improve AUC. Reverting changes.
Training on augumented user 136203 32/50 current_auc = 0.881578947368421
User 136203 AUC after training: 0.8552631578947368
User 136203 does not improve AUC. Reverting changes.
Training on augumented user 58437 33/50 current_auc = 0.881578947368421
User 58437 AUC after training: 0.881578947368421
User 58437 does not improve AUC. Reverting changes.
Training on augumented user 134137 34/50 current_auc = 0.881578947368421
User 134137 AUC after training: 0.881578947368421
User 134137 does not improve AUC. Reverting changes.
Training on augumented user 65876 35/50 current_auc = 0.881578947368421
User 65876 AUC after training: 0.868421052631579
User 65876 does not improve AUC. Reverting changes.
Training on augumented user 115619 36/50 current_auc = 0.881578947368421
User 115619 AUC after training: 0.868421052631579
User 115619 does not improve AUC. Reverting changes.
Training on augumented user 122059 37/50 current_auc = 0.881578947368421
User 122059 AUC after training: 0.881578947368421
User 122059 does not improve AUC. Reverting changes.
Training on augumented user 14251 38/50 current_auc = 0.881578947368421
User 14251 AUC after training: 0.881578947368421
User 14251 does not improve AUC. Reverting changes.
Training on augumented user 104397 39/50 current_auc = 0.881578947368421
User 104397 AUC after training: 0.868421052631579
User 104397 does not improve AUC. Reverting changes.
Training on augumented user 59835 40/50 current_auc = 0.881578947368421
User 59835 AUC after training: 0.881578947368421
User 59835 does not improve AUC. Reverting changes.
Training on augumented user 5155 41/50 current_auc = 0.881578947368421
User 5155 AUC after training: 0.8552631578947368
User 5155 does not improve AUC. Reverting changes.
Training on augumented user 88857 42/50 current_auc = 0.881578947368421
User 88857 AUC after training: 0.881578947368421
User 88857 does not improve AUC. Reverting changes.
Training on augumented user 137399 43/50 current_auc = 0.881578947368421
User 137399 AUC after training: 0.881578947368421
User 137399 does not improve AUC. Reverting changes.
Training on augumented user 116583 44/50 current_auc = 0.881578947368421
User 116583 AUC after training: 0.881578947368421
User 116583 does not improve AUC. Reverting changes.
Training on augumented user 63792 45/50 current_auc = 0.881578947368421
User 63792 AUC after training: 0.881578947368421
User 63792 does not improve AUC. Reverting changes.
Training on augumented user 113033 46/50 current_auc = 0.881578947368421
User 113033 AUC after training: 0.8552631578947368
User 113033 does not improve AUC. Reverting changes.
Training on augumented user 44145 47/50 current_auc = 0.881578947368421
User 44145 AUC after training: 0.881578947368421
User 44145 does not improve AUC. Reverting changes.
Training on augumented user 127187 48/50 current_auc = 0.881578947368421
User 127187 AUC after training: 0.868421052631579
User 127187 does not improve AUC. Reverting changes.
Training on augumented user 32846 49/50 current_auc = 0.881578947368421
User 32846 AUC after training: 0.881578947368421
User 32846 does not improve AUC. Reverting changes.
[2024-12-02 17:58:26.897453] start test user 110299 38/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:58:27.679684] start test user 110299 38/567 recall augumented users by random, augumented_users = [62534, 36199, 46013, 99595, 130946, 59645, 85676, 7971, 71429, 13209, 127143, 38658, 70009, 28341, 133606, 24621, 66308, 4796, 21864, 90699, 75800, 66539, 45100, 86710, 95238, 123541, 48459, 41581, 82599, 114327, 118771, 118300, 112065, 2110, 116584, 51605, 120286, 75625, 27865, 21609, 103514, 40012, 124140, 77316, 40147, 5970, 9980, 66986, 62934, 55198]
[2024-12-02 17:58:27.709568] user = 110299 Cloud 38/567
[2024-12-02 17:58:27.720833] user = 110299 Local 38/567
[2024-12-02 17:58:27.781162] user = 110299 Local+ 38/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:58:30.174037] user = 110299 MPDA- 38/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7
Training on augumented user 62534 0/50 current_auc = 0.7
User 62534 AUC after training: 0.7
User 62534 does not improve AUC. Reverting changes.
Training on augumented user 36199 1/50 current_auc = 0.7
User 36199 AUC after training: 0.8
User 36199 improves AUC. Keeping the model.
Training on augumented user 46013 2/50 current_auc = 0.8
User 46013 AUC after training: 0.8
User 46013 does not improve AUC. Reverting changes.
Training on augumented user 99595 3/50 current_auc = 0.8
User 99595 AUC after training: 0.8
User 99595 does not improve AUC. Reverting changes.
Training on augumented user 130946 4/50 current_auc = 0.8
User 130946 AUC after training: 0.8
User 130946 does not improve AUC. Reverting changes.
Training on augumented user 59645 5/50 current_auc = 0.8
User 59645 AUC after training: 0.8
User 59645 does not improve AUC. Reverting changes.
Training on augumented user 85676 6/50 current_auc = 0.8
User 85676 AUC after training: 0.8
User 85676 does not improve AUC. Reverting changes.
Training on augumented user 7971 7/50 current_auc = 0.8
User 7971 AUC after training: 0.7
User 7971 does not improve AUC. Reverting changes.
Training on augumented user 71429 8/50 current_auc = 0.8
User 71429 AUC after training: 0.7
User 71429 does not improve AUC. Reverting changes.
Training on augumented user 13209 9/50 current_auc = 0.8
User 13209 AUC after training: 0.8
User 13209 does not improve AUC. Reverting changes.
Training on augumented user 127143 10/50 current_auc = 0.8
User 127143 AUC after training: 0.8
User 127143 does not improve AUC. Reverting changes.
Training on augumented user 38658 11/50 current_auc = 0.8
User 38658 AUC after training: 0.8
User 38658 does not improve AUC. Reverting changes.
Training on augumented user 70009 12/50 current_auc = 0.8
User 70009 AUC after training: 0.8
User 70009 does not improve AUC. Reverting changes.
Training on augumented user 28341 13/50 current_auc = 0.8
User 28341 AUC after training: 0.8
User 28341 does not improve AUC. Reverting changes.
Training on augumented user 133606 14/50 current_auc = 0.8
User 133606 AUC after training: 0.7
User 133606 does not improve AUC. Reverting changes.
Training on augumented user 24621 15/50 current_auc = 0.8
User 24621 AUC after training: 0.8
User 24621 does not improve AUC. Reverting changes.
Training on augumented user 66308 16/50 current_auc = 0.8
User 66308 AUC after training: 0.7
User 66308 does not improve AUC. Reverting changes.
Training on augumented user 4796 17/50 current_auc = 0.8
User 4796 AUC after training: 0.8
User 4796 does not improve AUC. Reverting changes.
Training on augumented user 21864 18/50 current_auc = 0.8
User 21864 AUC after training: 0.8
User 21864 does not improve AUC. Reverting changes.
Training on augumented user 90699 19/50 current_auc = 0.8
User 90699 AUC after training: 0.8
User 90699 does not improve AUC. Reverting changes.
Training on augumented user 75800 20/50 current_auc = 0.8
User 75800 AUC after training: 0.8
User 75800 does not improve AUC. Reverting changes.
Training on augumented user 66539 21/50 current_auc = 0.8
User 66539 AUC after training: 0.7
User 66539 does not improve AUC. Reverting changes.
Training on augumented user 45100 22/50 current_auc = 0.8
User 45100 AUC after training: 0.8
User 45100 does not improve AUC. Reverting changes.
Training on augumented user 86710 23/50 current_auc = 0.8
User 86710 AUC after training: 0.8
User 86710 does not improve AUC. Reverting changes.
Training on augumented user 95238 24/50 current_auc = 0.8
User 95238 AUC after training: 0.8
User 95238 does not improve AUC. Reverting changes.
Training on augumented user 123541 25/50 current_auc = 0.8
User 123541 AUC after training: 0.8
User 123541 does not improve AUC. Reverting changes.
Training on augumented user 48459 26/50 current_auc = 0.8
User 48459 AUC after training: 0.8
User 48459 does not improve AUC. Reverting changes.
Training on augumented user 41581 27/50 current_auc = 0.8
User 41581 AUC after training: 0.8
User 41581 does not improve AUC. Reverting changes.
Training on augumented user 82599 28/50 current_auc = 0.8
User 82599 AUC after training: 0.7
User 82599 does not improve AUC. Reverting changes.
Training on augumented user 114327 29/50 current_auc = 0.8
User 114327 AUC after training: 0.8
User 114327 does not improve AUC. Reverting changes.
Training on augumented user 118771 30/50 current_auc = 0.8
User 118771 AUC after training: 0.8
User 118771 does not improve AUC. Reverting changes.
Training on augumented user 118300 31/50 current_auc = 0.8
User 118300 AUC after training: 0.8
User 118300 does not improve AUC. Reverting changes.
Training on augumented user 112065 32/50 current_auc = 0.8
User 112065 AUC after training: 0.8
User 112065 does not improve AUC. Reverting changes.
Training on augumented user 2110 33/50 current_auc = 0.8
User 2110 AUC after training: 0.8
User 2110 does not improve AUC. Reverting changes.
Training on augumented user 116584 34/50 current_auc = 0.8
User 116584 AUC after training: 0.8
User 116584 does not improve AUC. Reverting changes.
Training on augumented user 51605 35/50 current_auc = 0.8
User 51605 AUC after training: 0.8
User 51605 does not improve AUC. Reverting changes.
Training on augumented user 120286 36/50 current_auc = 0.8
User 120286 AUC after training: 0.8
User 120286 does not improve AUC. Reverting changes.
Training on augumented user 75625 37/50 current_auc = 0.8
User 75625 AUC after training: 0.8
User 75625 does not improve AUC. Reverting changes.
Training on augumented user 27865 38/50 current_auc = 0.8
User 27865 AUC after training: 0.8
User 27865 does not improve AUC. Reverting changes.
Training on augumented user 21609 39/50 current_auc = 0.8
User 21609 AUC after training: 0.7
User 21609 does not improve AUC. Reverting changes.
Training on augumented user 103514 40/50 current_auc = 0.8
User 103514 AUC after training: 0.7
User 103514 does not improve AUC. Reverting changes.
Training on augumented user 40012 41/50 current_auc = 0.8
User 40012 AUC after training: 0.8
User 40012 does not improve AUC. Reverting changes.
Training on augumented user 124140 42/50 current_auc = 0.8
User 124140 AUC after training: 0.8
User 124140 does not improve AUC. Reverting changes.
Training on augumented user 77316 43/50 current_auc = 0.8
User 77316 AUC after training: 0.8
User 77316 does not improve AUC. Reverting changes.
Training on augumented user 40147 44/50 current_auc = 0.8
User 40147 AUC after training: 0.8
User 40147 does not improve AUC. Reverting changes.
Training on augumented user 5970 45/50 current_auc = 0.8
User 5970 AUC after training: 0.8
User 5970 does not improve AUC. Reverting changes.
Training on augumented user 9980 46/50 current_auc = 0.8
User 9980 AUC after training: 0.8
User 9980 does not improve AUC. Reverting changes.
Training on augumented user 66986 47/50 current_auc = 0.8
User 66986 AUC after training: 0.8
User 66986 does not improve AUC. Reverting changes.
Training on augumented user 62934 48/50 current_auc = 0.8
User 62934 AUC after training: 0.8
User 62934 does not improve AUC. Reverting changes.
Training on augumented user 55198 49/50 current_auc = 0.8
User 55198 AUC after training: 0.7
User 55198 does not improve AUC. Reverting changes.
[2024-12-02 17:58:57.570726] start test user 110359 39/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:58:58.179165] start test user 110359 39/567 recall augumented users by random, augumented_users = [34148, 68694, 76159, 54175, 75797, 21695, 127228, 42290, 52504, 122061, 17582, 111779, 30919, 31114, 31336, 77044, 1783, 103284, 65473, 73485, 36776, 1214, 105569, 67478, 50816, 24204, 28172, 54425, 58279, 96997, 131423, 53849, 115307, 133719, 52163, 118038, 113002, 41384, 109668, 112636, 64159, 137430, 51350, 86197, 124871, 112341, 49271, 112061, 51827, 113262]
[2024-12-02 17:58:58.196752] user = 110359 Cloud 39/567
[2024-12-02 17:58:58.216056] user = 110359 Local 39/567
[2024-12-02 17:58:58.345244] user = 110359 Local+ 39/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:59:01.069811] user = 110359 MPDA- 39/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6296296296296297
Training on augumented user 34148 0/50 current_auc = 0.6296296296296297
User 34148 AUC after training: 0.6342592592592593
User 34148 improves AUC. Keeping the model.
Training on augumented user 68694 1/50 current_auc = 0.6342592592592593
User 68694 AUC after training: 0.6342592592592593
User 68694 does not improve AUC. Reverting changes.
Training on augumented user 76159 2/50 current_auc = 0.6342592592592593
User 76159 AUC after training: 0.6296296296296297
User 76159 does not improve AUC. Reverting changes.
Training on augumented user 54175 3/50 current_auc = 0.6342592592592593
User 54175 AUC after training: 0.6342592592592593
User 54175 does not improve AUC. Reverting changes.
Training on augumented user 75797 4/50 current_auc = 0.6342592592592593
User 75797 AUC after training: 0.625
User 75797 does not improve AUC. Reverting changes.
Training on augumented user 21695 5/50 current_auc = 0.6342592592592593
User 21695 AUC after training: 0.6296296296296297
User 21695 does not improve AUC. Reverting changes.
Training on augumented user 127228 6/50 current_auc = 0.6342592592592593
User 127228 AUC after training: 0.6342592592592593
User 127228 does not improve AUC. Reverting changes.
Training on augumented user 42290 7/50 current_auc = 0.6342592592592593
User 42290 AUC after training: 0.6342592592592593
User 42290 does not improve AUC. Reverting changes.
Training on augumented user 52504 8/50 current_auc = 0.6342592592592593
User 52504 AUC after training: 0.6342592592592593
User 52504 does not improve AUC. Reverting changes.
Training on augumented user 122061 9/50 current_auc = 0.6342592592592593
User 122061 AUC after training: 0.6342592592592593
User 122061 does not improve AUC. Reverting changes.
Training on augumented user 17582 10/50 current_auc = 0.6342592592592593
User 17582 AUC after training: 0.6342592592592593
User 17582 does not improve AUC. Reverting changes.
Training on augumented user 111779 11/50 current_auc = 0.6342592592592593
User 111779 AUC after training: 0.6388888888888888
User 111779 improves AUC. Keeping the model.
Training on augumented user 30919 12/50 current_auc = 0.6388888888888888
User 30919 AUC after training: 0.6388888888888888
User 30919 does not improve AUC. Reverting changes.
Training on augumented user 31114 13/50 current_auc = 0.6388888888888888
User 31114 AUC after training: 0.6388888888888888
User 31114 does not improve AUC. Reverting changes.
Training on augumented user 31336 14/50 current_auc = 0.6388888888888888
User 31336 AUC after training: 0.6342592592592593
User 31336 does not improve AUC. Reverting changes.
Training on augumented user 77044 15/50 current_auc = 0.6388888888888888
User 77044 AUC after training: 0.6388888888888888
User 77044 does not improve AUC. Reverting changes.
Training on augumented user 1783 16/50 current_auc = 0.6388888888888888
User 1783 AUC after training: 0.6342592592592593
User 1783 does not improve AUC. Reverting changes.
Training on augumented user 103284 17/50 current_auc = 0.6388888888888888
User 103284 AUC after training: 0.6296296296296297
User 103284 does not improve AUC. Reverting changes.
Training on augumented user 65473 18/50 current_auc = 0.6388888888888888
User 65473 AUC after training: 0.6342592592592593
User 65473 does not improve AUC. Reverting changes.
Training on augumented user 73485 19/50 current_auc = 0.6388888888888888
User 73485 AUC after training: 0.6342592592592593
User 73485 does not improve AUC. Reverting changes.
Training on augumented user 36776 20/50 current_auc = 0.6388888888888888
User 36776 AUC after training: 0.6435185185185186
User 36776 improves AUC. Keeping the model.
Training on augumented user 1214 21/50 current_auc = 0.6435185185185186
User 1214 AUC after training: 0.6342592592592593
User 1214 does not improve AUC. Reverting changes.
Training on augumented user 105569 22/50 current_auc = 0.6435185185185186
User 105569 AUC after training: 0.6435185185185186
User 105569 does not improve AUC. Reverting changes.
Training on augumented user 67478 23/50 current_auc = 0.6435185185185186
User 67478 AUC after training: 0.6388888888888888
User 67478 does not improve AUC. Reverting changes.
Training on augumented user 50816 24/50 current_auc = 0.6435185185185186
User 50816 AUC after training: 0.6435185185185186
User 50816 does not improve AUC. Reverting changes.
Training on augumented user 24204 25/50 current_auc = 0.6435185185185186
User 24204 AUC after training: 0.6435185185185186
User 24204 does not improve AUC. Reverting changes.
Training on augumented user 28172 26/50 current_auc = 0.6435185185185186
User 28172 AUC after training: 0.6435185185185186
User 28172 does not improve AUC. Reverting changes.
Training on augumented user 54425 27/50 current_auc = 0.6435185185185186
User 54425 AUC after training: 0.6435185185185186
User 54425 does not improve AUC. Reverting changes.
Training on augumented user 58279 28/50 current_auc = 0.6435185185185186
User 58279 AUC after training: 0.6388888888888888
User 58279 does not improve AUC. Reverting changes.
Training on augumented user 96997 29/50 current_auc = 0.6435185185185186
User 96997 AUC after training: 0.6296296296296297
User 96997 does not improve AUC. Reverting changes.
Training on augumented user 131423 30/50 current_auc = 0.6435185185185186
User 131423 AUC after training: 0.6342592592592593
User 131423 does not improve AUC. Reverting changes.
Training on augumented user 53849 31/50 current_auc = 0.6435185185185186
User 53849 AUC after training: 0.6435185185185186
User 53849 does not improve AUC. Reverting changes.
Training on augumented user 115307 32/50 current_auc = 0.6435185185185186
User 115307 AUC after training: 0.6435185185185186
User 115307 does not improve AUC. Reverting changes.
Training on augumented user 133719 33/50 current_auc = 0.6435185185185186
User 133719 AUC after training: 0.6296296296296297
User 133719 does not improve AUC. Reverting changes.
Training on augumented user 52163 34/50 current_auc = 0.6435185185185186
User 52163 AUC after training: 0.6435185185185186
User 52163 does not improve AUC. Reverting changes.
Training on augumented user 118038 35/50 current_auc = 0.6435185185185186
User 118038 AUC after training: 0.6435185185185186
User 118038 does not improve AUC. Reverting changes.
Training on augumented user 113002 36/50 current_auc = 0.6435185185185186
User 113002 AUC after training: 0.6435185185185186
User 113002 does not improve AUC. Reverting changes.
Training on augumented user 41384 37/50 current_auc = 0.6435185185185186
User 41384 AUC after training: 0.6388888888888888
User 41384 does not improve AUC. Reverting changes.
Training on augumented user 109668 38/50 current_auc = 0.6435185185185186
User 109668 AUC after training: 0.6435185185185186
User 109668 does not improve AUC. Reverting changes.
Training on augumented user 112636 39/50 current_auc = 0.6435185185185186
User 112636 AUC after training: 0.6435185185185186
User 112636 does not improve AUC. Reverting changes.
Training on augumented user 64159 40/50 current_auc = 0.6435185185185186
User 64159 AUC after training: 0.6435185185185186
User 64159 does not improve AUC. Reverting changes.
Training on augumented user 137430 41/50 current_auc = 0.6435185185185186
User 137430 AUC after training: 0.6435185185185186
User 137430 does not improve AUC. Reverting changes.
Training on augumented user 51350 42/50 current_auc = 0.6435185185185186
User 51350 AUC after training: 0.6435185185185186
User 51350 does not improve AUC. Reverting changes.
Training on augumented user 86197 43/50 current_auc = 0.6435185185185186
User 86197 AUC after training: 0.6435185185185186
User 86197 does not improve AUC. Reverting changes.
Training on augumented user 124871 44/50 current_auc = 0.6435185185185186
User 124871 AUC after training: 0.6435185185185186
User 124871 does not improve AUC. Reverting changes.
Training on augumented user 112341 45/50 current_auc = 0.6435185185185186
User 112341 AUC after training: 0.6435185185185186
User 112341 does not improve AUC. Reverting changes.
Training on augumented user 49271 46/50 current_auc = 0.6435185185185186
User 49271 AUC after training: 0.6435185185185186
User 49271 does not improve AUC. Reverting changes.
Training on augumented user 112061 47/50 current_auc = 0.6435185185185186
User 112061 AUC after training: 0.6435185185185186
User 112061 does not improve AUC. Reverting changes.
Training on augumented user 51827 48/50 current_auc = 0.6435185185185186
User 51827 AUC after training: 0.6435185185185186
User 51827 does not improve AUC. Reverting changes.
Training on augumented user 113262 49/50 current_auc = 0.6435185185185186
User 113262 AUC after training: 0.6342592592592593
User 113262 does not improve AUC. Reverting changes.
[2024-12-02 17:59:26.454526] start test user 110392 40/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:59:27.350450] start test user 110392 40/567 recall augumented users by random, augumented_users = [69901, 123819, 58113, 102803, 108398, 134217, 57646, 25587, 11779, 96799, 131063, 117956, 20620, 19814, 64144, 27695, 39322, 123409, 15231, 51391, 8023, 74459, 87287, 131942, 72885, 33974, 91328, 33577, 109769, 69393, 65469, 41482, 73837, 27365, 113156, 81569, 66215, 69304, 82549, 29832, 7178, 86476, 2678, 22995, 111689, 78621, 96796, 130791, 38598, 20271]
[2024-12-02 17:59:27.369723] user = 110392 Cloud 40/567
[2024-12-02 17:59:27.395296] user = 110392 Local 40/567
[2024-12-02 17:59:27.540202] user = 110392 Local+ 40/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:59:30.344912] user = 110392 MPDA- 40/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.72864430695756
Training on augumented user 69901 0/50 current_auc = 0.72864430695756
User 69901 AUC after training: 0.7288613915119939
User 69901 improves AUC. Keeping the model.
Training on augumented user 123819 1/50 current_auc = 0.7288613915119939
User 123819 AUC after training: 0.7274503419081731
User 123819 does not improve AUC. Reverting changes.
Training on augumented user 58113 2/50 current_auc = 0.7288613915119939
User 58113 AUC after training: 0.7289699337892108
User 58113 improves AUC. Keeping the model.
Training on augumented user 102803 3/50 current_auc = 0.7289699337892108
User 102803 AUC after training: 0.7288613915119938
User 102803 does not improve AUC. Reverting changes.
Training on augumented user 108398 4/50 current_auc = 0.7289699337892108
User 108398 AUC after training: 0.7287528492347769
User 108398 does not improve AUC. Reverting changes.
Training on augumented user 134217 5/50 current_auc = 0.7289699337892108
User 134217 AUC after training: 0.7291870183436447
User 134217 improves AUC. Keeping the model.
Training on augumented user 57646 6/50 current_auc = 0.7291870183436447
User 57646 AUC after training: 0.7288613915119938
User 57646 does not improve AUC. Reverting changes.
Training on augumented user 25587 7/50 current_auc = 0.7291870183436447
User 25587 AUC after training: 0.728427222403126
User 25587 does not improve AUC. Reverting changes.
Training on augumented user 11779 8/50 current_auc = 0.7291870183436447
User 11779 AUC after training: 0.7291870183436449
User 11779 improves AUC. Keeping the model.
Training on augumented user 96799 9/50 current_auc = 0.7291870183436449
User 96799 AUC after training: 0.7290784760664277
User 96799 does not improve AUC. Reverting changes.
Training on augumented user 131063 10/50 current_auc = 0.7291870183436449
User 131063 AUC after training: 0.728318680125909
User 131063 does not improve AUC. Reverting changes.
Training on augumented user 117956 11/50 current_auc = 0.7291870183436449
User 117956 AUC after training: 0.7289699337892109
User 117956 does not improve AUC. Reverting changes.
Training on augumented user 20620 12/50 current_auc = 0.7291870183436449
User 20620 AUC after training: 0.7286443069575599
User 20620 does not improve AUC. Reverting changes.
Training on augumented user 19814 13/50 current_auc = 0.7291870183436449
User 19814 AUC after training: 0.7287528492347769
User 19814 does not improve AUC. Reverting changes.
Training on augumented user 64144 14/50 current_auc = 0.7291870183436449
User 64144 AUC after training: 0.7295126451752958
User 64144 improves AUC. Keeping the model.
Training on augumented user 27695 15/50 current_auc = 0.7295126451752958
User 27695 AUC after training: 0.7274503419081731
User 27695 does not improve AUC. Reverting changes.
Training on augumented user 39322 16/50 current_auc = 0.7295126451752958
User 39322 AUC after training: 0.7302724411158146
User 39322 improves AUC. Keeping the model.
Training on augumented user 123409 17/50 current_auc = 0.7302724411158146
User 123409 AUC after training: 0.7299468142841636
User 123409 does not improve AUC. Reverting changes.
Training on augumented user 15231 18/50 current_auc = 0.7302724411158146
User 15231 AUC after training: 0.7297297297297297
User 15231 does not improve AUC. Reverting changes.
Training on augumented user 51391 19/50 current_auc = 0.7302724411158146
User 51391 AUC after training: 0.728535764680343
User 51391 does not improve AUC. Reverting changes.
Training on augumented user 8023 20/50 current_auc = 0.7302724411158146
User 8023 AUC after training: 0.7294041028980788
User 8023 does not improve AUC. Reverting changes.
Training on augumented user 74459 21/50 current_auc = 0.7302724411158146
User 74459 AUC after training: 0.7287528492347769
User 74459 does not improve AUC. Reverting changes.
Training on augumented user 87287 22/50 current_auc = 0.7302724411158146
User 87287 AUC after training: 0.728210137848692
User 87287 does not improve AUC. Reverting changes.
Training on augumented user 131942 23/50 current_auc = 0.7302724411158146
User 131942 AUC after training: 0.7291870183436449
User 131942 does not improve AUC. Reverting changes.
Training on augumented user 72885 24/50 current_auc = 0.7302724411158146
User 72885 AUC after training: 0.7294041028980788
User 72885 does not improve AUC. Reverting changes.
Training on augumented user 33974 25/50 current_auc = 0.7302724411158146
User 33974 AUC after training: 0.728101595571475
User 33974 does not improve AUC. Reverting changes.
Training on augumented user 91328 26/50 current_auc = 0.7302724411158146
User 91328 AUC after training: 0.7301638988385977
User 91328 does not improve AUC. Reverting changes.
Training on augumented user 33577 27/50 current_auc = 0.7302724411158146
User 33577 AUC after training: 0.7301638988385977
User 33577 does not improve AUC. Reverting changes.
Training on augumented user 109769 28/50 current_auc = 0.7302724411158146
User 109769 AUC after training: 0.7288613915119938
User 109769 does not improve AUC. Reverting changes.
Training on augumented user 69393 29/50 current_auc = 0.7302724411158146
User 69393 AUC after training: 0.7294041028980788
User 69393 does not improve AUC. Reverting changes.
Training on augumented user 65469 30/50 current_auc = 0.7302724411158146
User 65469 AUC after training: 0.7302724411158146
User 65469 does not improve AUC. Reverting changes.
Training on augumented user 41482 31/50 current_auc = 0.7302724411158146
User 41482 AUC after training: 0.72864430695756
User 41482 does not improve AUC. Reverting changes.
Training on augumented user 73837 32/50 current_auc = 0.7302724411158146
User 73837 AUC after training: 0.7302724411158146
User 73837 does not improve AUC. Reverting changes.
Training on augumented user 27365 33/50 current_auc = 0.7302724411158146
User 27365 AUC after training: 0.7285357646803429
User 27365 does not improve AUC. Reverting changes.
Training on augumented user 113156 34/50 current_auc = 0.7302724411158146
User 113156 AUC after training: 0.7301638988385976
User 113156 does not improve AUC. Reverting changes.
Training on augumented user 81569 35/50 current_auc = 0.7302724411158146
User 81569 AUC after training: 0.7262563768587865
User 81569 does not improve AUC. Reverting changes.
Training on augumented user 66215 36/50 current_auc = 0.7302724411158146
User 66215 AUC after training: 0.7294041028980788
User 66215 does not improve AUC. Reverting changes.
Training on augumented user 69304 37/50 current_auc = 0.7302724411158146
User 69304 AUC after training: 0.7291870183436449
User 69304 does not improve AUC. Reverting changes.
Training on augumented user 82549 38/50 current_auc = 0.7302724411158146
User 82549 AUC after training: 0.7299468142841637
User 82549 does not improve AUC. Reverting changes.
Training on augumented user 29832 39/50 current_auc = 0.7302724411158146
User 29832 AUC after training: 0.7302724411158146
User 29832 does not improve AUC. Reverting changes.
Training on augumented user 7178 40/50 current_auc = 0.7302724411158146
User 7178 AUC after training: 0.7297297297297297
User 7178 does not improve AUC. Reverting changes.
Training on augumented user 86476 41/50 current_auc = 0.7302724411158146
User 86476 AUC after training: 0.7297297297297297
User 86476 does not improve AUC. Reverting changes.
Training on augumented user 2678 42/50 current_auc = 0.7302724411158146
User 2678 AUC after training: 0.7289699337892109
User 2678 does not improve AUC. Reverting changes.
Training on augumented user 22995 43/50 current_auc = 0.7302724411158146
User 22995 AUC after training: 0.7297297297297297
User 22995 does not improve AUC. Reverting changes.
Training on augumented user 111689 44/50 current_auc = 0.7302724411158146
User 111689 AUC after training: 0.7300553565613807
User 111689 does not improve AUC. Reverting changes.
Training on augumented user 78621 45/50 current_auc = 0.7302724411158146
User 78621 AUC after training: 0.7300553565613807
User 78621 does not improve AUC. Reverting changes.
Training on augumented user 96796 46/50 current_auc = 0.7302724411158146
User 96796 AUC after training: 0.7273417996309562
User 96796 does not improve AUC. Reverting changes.
Training on augumented user 130791 47/50 current_auc = 0.7302724411158146
User 130791 AUC after training: 0.7292955606208618
User 130791 does not improve AUC. Reverting changes.
Training on augumented user 38598 48/50 current_auc = 0.7302724411158146
User 38598 AUC after training: 0.7300553565613807
User 38598 does not improve AUC. Reverting changes.
Training on augumented user 20271 49/50 current_auc = 0.7302724411158146
User 20271 AUC after training: 0.7299468142841636
User 20271 does not improve AUC. Reverting changes.
[2024-12-02 17:59:54.673784] start test user 110395 41/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:59:55.098061] start test user 110395 41/567 recall augumented users by random, augumented_users = [49942, 117839, 54701, 8855, 5098, 46472, 80255, 104800, 68528, 48525, 11431, 19503, 62018, 110112, 53279, 105702, 19027, 32458, 78237, 69067, 69620, 107273, 24635, 88643, 76789, 103779, 27416, 37333, 27998, 98608, 124607, 117872, 14261, 65504, 125070, 101460, 112807, 22230, 6183, 108215, 102421, 27160, 121642, 28766, 24680, 33821, 52018, 1574, 100663, 2506]
[2024-12-02 17:59:55.113245] user = 110395 Cloud 41/567
[2024-12-02 17:59:55.123779] user = 110395 Local 41/567
[2024-12-02 17:59:55.150771] user = 110395 Local+ 41/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:59:56.884244] user = 110395 MPDA- 41/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5333333333333333
Training on augumented user 49942 0/50 current_auc = 0.5333333333333333
User 49942 AUC after training: 0.5416666666666667
User 49942 improves AUC. Keeping the model.
Training on augumented user 117839 1/50 current_auc = 0.5416666666666667
User 117839 AUC after training: 0.5416666666666666
User 117839 does not improve AUC. Reverting changes.
Training on augumented user 54701 2/50 current_auc = 0.5416666666666667
User 54701 AUC after training: 0.5416666666666667
User 54701 does not improve AUC. Reverting changes.
Training on augumented user 8855 3/50 current_auc = 0.5416666666666667
User 8855 AUC after training: 0.55
User 8855 improves AUC. Keeping the model.
Training on augumented user 5098 4/50 current_auc = 0.55
User 5098 AUC after training: 0.5333333333333334
User 5098 does not improve AUC. Reverting changes.
Training on augumented user 46472 5/50 current_auc = 0.55
User 46472 AUC after training: 0.5416666666666666
User 46472 does not improve AUC. Reverting changes.
Training on augumented user 80255 6/50 current_auc = 0.55
User 80255 AUC after training: 0.5416666666666667
User 80255 does not improve AUC. Reverting changes.
Training on augumented user 104800 7/50 current_auc = 0.55
User 104800 AUC after training: 0.5416666666666667
User 104800 does not improve AUC. Reverting changes.
Training on augumented user 68528 8/50 current_auc = 0.55
User 68528 AUC after training: 0.5416666666666666
User 68528 does not improve AUC. Reverting changes.
Training on augumented user 48525 9/50 current_auc = 0.55
User 48525 AUC after training: 0.5416666666666667
User 48525 does not improve AUC. Reverting changes.
Training on augumented user 11431 10/50 current_auc = 0.55
User 11431 AUC after training: 0.5416666666666666
User 11431 does not improve AUC. Reverting changes.
Training on augumented user 19503 11/50 current_auc = 0.55
User 19503 AUC after training: 0.5416666666666666
User 19503 does not improve AUC. Reverting changes.
Training on augumented user 62018 12/50 current_auc = 0.55
User 62018 AUC after training: 0.55
User 62018 does not improve AUC. Reverting changes.
Training on augumented user 110112 13/50 current_auc = 0.55
User 110112 AUC after training: 0.5416666666666667
User 110112 does not improve AUC. Reverting changes.
Training on augumented user 53279 14/50 current_auc = 0.55
User 53279 AUC after training: 0.5416666666666666
User 53279 does not improve AUC. Reverting changes.
Training on augumented user 105702 15/50 current_auc = 0.55
User 105702 AUC after training: 0.55
User 105702 does not improve AUC. Reverting changes.
Training on augumented user 19027 16/50 current_auc = 0.55
User 19027 AUC after training: 0.5416666666666667
User 19027 does not improve AUC. Reverting changes.
Training on augumented user 32458 17/50 current_auc = 0.55
User 32458 AUC after training: 0.5416666666666667
User 32458 does not improve AUC. Reverting changes.
Training on augumented user 78237 18/50 current_auc = 0.55
User 78237 AUC after training: 0.55
User 78237 does not improve AUC. Reverting changes.
Training on augumented user 69067 19/50 current_auc = 0.55
User 69067 AUC after training: 0.5416666666666667
User 69067 does not improve AUC. Reverting changes.
Training on augumented user 69620 20/50 current_auc = 0.55
User 69620 AUC after training: 0.55
User 69620 does not improve AUC. Reverting changes.
Training on augumented user 107273 21/50 current_auc = 0.55
User 107273 AUC after training: 0.5416666666666667
User 107273 does not improve AUC. Reverting changes.
Training on augumented user 24635 22/50 current_auc = 0.55
User 24635 AUC after training: 0.5416666666666666
User 24635 does not improve AUC. Reverting changes.
Training on augumented user 88643 23/50 current_auc = 0.55
User 88643 AUC after training: 0.525
User 88643 does not improve AUC. Reverting changes.
Training on augumented user 76789 24/50 current_auc = 0.55
User 76789 AUC after training: 0.525
User 76789 does not improve AUC. Reverting changes.
Training on augumented user 103779 25/50 current_auc = 0.55
User 103779 AUC after training: 0.5416666666666667
User 103779 does not improve AUC. Reverting changes.
Training on augumented user 27416 26/50 current_auc = 0.55
User 27416 AUC after training: 0.5416666666666667
User 27416 does not improve AUC. Reverting changes.
Training on augumented user 37333 27/50 current_auc = 0.55
User 37333 AUC after training: 0.5416666666666667
User 37333 does not improve AUC. Reverting changes.
Training on augumented user 27998 28/50 current_auc = 0.55
User 27998 AUC after training: 0.55
User 27998 does not improve AUC. Reverting changes.
Training on augumented user 98608 29/50 current_auc = 0.55
User 98608 AUC after training: 0.5416666666666667
User 98608 does not improve AUC. Reverting changes.
Training on augumented user 124607 30/50 current_auc = 0.55
User 124607 AUC after training: 0.5416666666666666
User 124607 does not improve AUC. Reverting changes.
Training on augumented user 117872 31/50 current_auc = 0.55
User 117872 AUC after training: 0.5416666666666666
User 117872 does not improve AUC. Reverting changes.
Training on augumented user 14261 32/50 current_auc = 0.55
User 14261 AUC after training: 0.5416666666666667
User 14261 does not improve AUC. Reverting changes.
Training on augumented user 65504 33/50 current_auc = 0.55
User 65504 AUC after training: 0.5416666666666666
User 65504 does not improve AUC. Reverting changes.
Training on augumented user 125070 34/50 current_auc = 0.55
User 125070 AUC after training: 0.5166666666666667
User 125070 does not improve AUC. Reverting changes.
Training on augumented user 101460 35/50 current_auc = 0.55
User 101460 AUC after training: 0.55
User 101460 does not improve AUC. Reverting changes.
Training on augumented user 112807 36/50 current_auc = 0.55
User 112807 AUC after training: 0.5416666666666667
User 112807 does not improve AUC. Reverting changes.
Training on augumented user 22230 37/50 current_auc = 0.55
User 22230 AUC after training: 0.55
User 22230 does not improve AUC. Reverting changes.
Training on augumented user 6183 38/50 current_auc = 0.55
User 6183 AUC after training: 0.55
User 6183 does not improve AUC. Reverting changes.
Training on augumented user 108215 39/50 current_auc = 0.55
User 108215 AUC after training: 0.5416666666666667
User 108215 does not improve AUC. Reverting changes.
Training on augumented user 102421 40/50 current_auc = 0.55
User 102421 AUC after training: 0.55
User 102421 does not improve AUC. Reverting changes.
Training on augumented user 27160 41/50 current_auc = 0.55
User 27160 AUC after training: 0.5333333333333333
User 27160 does not improve AUC. Reverting changes.
Training on augumented user 121642 42/50 current_auc = 0.55
User 121642 AUC after training: 0.5416666666666666
User 121642 does not improve AUC. Reverting changes.
Training on augumented user 28766 43/50 current_auc = 0.55
User 28766 AUC after training: 0.5416666666666667
User 28766 does not improve AUC. Reverting changes.
Training on augumented user 24680 44/50 current_auc = 0.55
User 24680 AUC after training: 0.5333333333333333
User 24680 does not improve AUC. Reverting changes.
Training on augumented user 33821 45/50 current_auc = 0.55
User 33821 AUC after training: 0.5416666666666666
User 33821 does not improve AUC. Reverting changes.
Training on augumented user 52018 46/50 current_auc = 0.55
User 52018 AUC after training: 0.5416666666666667
User 52018 does not improve AUC. Reverting changes.
Training on augumented user 1574 47/50 current_auc = 0.55
User 1574 AUC after training: 0.5416666666666666
User 1574 does not improve AUC. Reverting changes.
Training on augumented user 100663 48/50 current_auc = 0.55
User 100663 AUC after training: 0.5416666666666667
User 100663 does not improve AUC. Reverting changes.
Training on augumented user 2506 49/50 current_auc = 0.55
User 2506 AUC after training: 0.55
User 2506 does not improve AUC. Reverting changes.
[2024-12-02 18:00:23.259934] start test user 110447 42/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:00:23.687477] start test user 110447 42/567 recall augumented users by random, augumented_users = [74997, 89320, 16639, 101494, 14623, 128735, 57622, 27962, 8507, 129696, 117836, 93496, 44172, 92897, 77551, 48073, 86680, 68106, 18309, 80556, 110181, 39427, 59080, 87730, 31260, 122787, 59001, 82116, 71282, 105759, 118359, 89885, 21763, 125882, 81514, 135392, 25509, 121766, 47713, 111215, 64669, 61704, 32643, 97150, 125670, 10344, 72422, 76189, 114848, 1863]
[2024-12-02 18:00:23.703413] user = 110447 Cloud 42/567
[2024-12-02 18:00:23.716712] user = 110447 Local 42/567
[2024-12-02 18:00:23.811901] user = 110447 Local+ 42/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:00:25.872158] user = 110447 MPDA- 42/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7477022058823529
Training on augumented user 74997 0/50 current_auc = 0.7477022058823529
User 74997 AUC after training: 0.7486213235294117
User 74997 improves AUC. Keeping the model.
Training on augumented user 89320 1/50 current_auc = 0.7486213235294117
User 89320 AUC after training: 0.7440257352941176
User 89320 does not improve AUC. Reverting changes.
Training on augumented user 16639 2/50 current_auc = 0.7486213235294117
User 16639 AUC after training: 0.7495404411764706
User 16639 improves AUC. Keeping the model.
Training on augumented user 101494 3/50 current_auc = 0.7495404411764706
User 101494 AUC after training: 0.7490808823529412
User 101494 does not improve AUC. Reverting changes.
Training on augumented user 14623 4/50 current_auc = 0.7495404411764706
User 14623 AUC after training: 0.7490808823529412
User 14623 does not improve AUC. Reverting changes.
Training on augumented user 128735 5/50 current_auc = 0.7495404411764706
User 128735 AUC after training: 0.7504595588235294
User 128735 improves AUC. Keeping the model.
Training on augumented user 57622 6/50 current_auc = 0.7504595588235294
User 57622 AUC after training: 0.7504595588235294
User 57622 does not improve AUC. Reverting changes.
Training on augumented user 27962 7/50 current_auc = 0.7504595588235294
User 27962 AUC after training: 0.7504595588235294
User 27962 does not improve AUC. Reverting changes.
Training on augumented user 8507 8/50 current_auc = 0.7504595588235294
User 8507 AUC after training: 0.75
User 8507 does not improve AUC. Reverting changes.
Training on augumented user 129696 9/50 current_auc = 0.7504595588235294
User 129696 AUC after training: 0.7504595588235294
User 129696 does not improve AUC. Reverting changes.
Training on augumented user 117836 10/50 current_auc = 0.7504595588235294
User 117836 AUC after training: 0.7509191176470588
User 117836 improves AUC. Keeping the model.
Training on augumented user 93496 11/50 current_auc = 0.7509191176470588
User 93496 AUC after training: 0.7490808823529411
User 93496 does not improve AUC. Reverting changes.
Training on augumented user 44172 12/50 current_auc = 0.7509191176470588
User 44172 AUC after training: 0.7509191176470589
User 44172 improves AUC. Keeping the model.
Training on augumented user 92897 13/50 current_auc = 0.7509191176470589
User 92897 AUC after training: 0.7504595588235294
User 92897 does not improve AUC. Reverting changes.
Training on augumented user 77551 14/50 current_auc = 0.7509191176470589
User 77551 AUC after training: 0.75
User 77551 does not improve AUC. Reverting changes.
Training on augumented user 48073 15/50 current_auc = 0.7509191176470589
User 48073 AUC after training: 0.7504595588235294
User 48073 does not improve AUC. Reverting changes.
Training on augumented user 86680 16/50 current_auc = 0.7509191176470589
User 86680 AUC after training: 0.7509191176470589
User 86680 does not improve AUC. Reverting changes.
Training on augumented user 68106 17/50 current_auc = 0.7509191176470589
User 68106 AUC after training: 0.75
User 68106 does not improve AUC. Reverting changes.
Training on augumented user 18309 18/50 current_auc = 0.7509191176470589
User 18309 AUC after training: 0.7509191176470589
User 18309 does not improve AUC. Reverting changes.
Training on augumented user 80556 19/50 current_auc = 0.7509191176470589
User 80556 AUC after training: 0.7509191176470589
User 80556 does not improve AUC. Reverting changes.
Training on augumented user 110181 20/50 current_auc = 0.7509191176470589
User 110181 AUC after training: 0.7518382352941176
User 110181 improves AUC. Keeping the model.
Training on augumented user 39427 21/50 current_auc = 0.7518382352941176
User 39427 AUC after training: 0.7518382352941176
User 39427 does not improve AUC. Reverting changes.
Training on augumented user 59080 22/50 current_auc = 0.7518382352941176
User 59080 AUC after training: 0.7518382352941176
User 59080 does not improve AUC. Reverting changes.
Training on augumented user 87730 23/50 current_auc = 0.7518382352941176
User 87730 AUC after training: 0.7504595588235294
User 87730 does not improve AUC. Reverting changes.
Training on augumented user 31260 24/50 current_auc = 0.7518382352941176
User 31260 AUC after training: 0.7522977941176471
User 31260 improves AUC. Keeping the model.
Training on augumented user 122787 25/50 current_auc = 0.7522977941176471
User 122787 AUC after training: 0.7522977941176471
User 122787 does not improve AUC. Reverting changes.
Training on augumented user 59001 26/50 current_auc = 0.7522977941176471
User 59001 AUC after training: 0.7518382352941176
User 59001 does not improve AUC. Reverting changes.
Training on augumented user 82116 27/50 current_auc = 0.7522977941176471
User 82116 AUC after training: 0.7513786764705882
User 82116 does not improve AUC. Reverting changes.
Training on augumented user 71282 28/50 current_auc = 0.7522977941176471
User 71282 AUC after training: 0.7518382352941176
User 71282 does not improve AUC. Reverting changes.
Training on augumented user 105759 29/50 current_auc = 0.7522977941176471
User 105759 AUC after training: 0.7536764705882353
User 105759 improves AUC. Keeping the model.
Training on augumented user 118359 30/50 current_auc = 0.7536764705882353
User 118359 AUC after training: 0.7532169117647058
User 118359 does not improve AUC. Reverting changes.
Training on augumented user 89885 31/50 current_auc = 0.7536764705882353
User 89885 AUC after training: 0.7518382352941176
User 89885 does not improve AUC. Reverting changes.
Training on augumented user 21763 32/50 current_auc = 0.7536764705882353
User 21763 AUC after training: 0.7472426470588235
User 21763 does not improve AUC. Reverting changes.
Training on augumented user 125882 33/50 current_auc = 0.7536764705882353
User 125882 AUC after training: 0.7532169117647058
User 125882 does not improve AUC. Reverting changes.
Training on augumented user 81514 34/50 current_auc = 0.7536764705882353
User 81514 AUC after training: 0.7532169117647058
User 81514 does not improve AUC. Reverting changes.
Training on augumented user 135392 35/50 current_auc = 0.7536764705882353
User 135392 AUC after training: 0.7518382352941175
User 135392 does not improve AUC. Reverting changes.
Training on augumented user 25509 36/50 current_auc = 0.7536764705882353
User 25509 AUC after training: 0.7532169117647058
User 25509 does not improve AUC. Reverting changes.
Training on augumented user 121766 37/50 current_auc = 0.7536764705882353
User 121766 AUC after training: 0.7532169117647058
User 121766 does not improve AUC. Reverting changes.
Training on augumented user 47713 38/50 current_auc = 0.7536764705882353
User 47713 AUC after training: 0.7532169117647058
User 47713 does not improve AUC. Reverting changes.
Training on augumented user 111215 39/50 current_auc = 0.7536764705882353
User 111215 AUC after training: 0.7527573529411764
User 111215 does not improve AUC. Reverting changes.
Training on augumented user 64669 40/50 current_auc = 0.7536764705882353
User 64669 AUC after training: 0.7532169117647058
User 64669 does not improve AUC. Reverting changes.
Training on augumented user 61704 41/50 current_auc = 0.7536764705882353
User 61704 AUC after training: 0.7532169117647058
User 61704 does not improve AUC. Reverting changes.
Training on augumented user 32643 42/50 current_auc = 0.7536764705882353
User 32643 AUC after training: 0.7527573529411765
User 32643 does not improve AUC. Reverting changes.
Training on augumented user 97150 43/50 current_auc = 0.7536764705882353
User 97150 AUC after training: 0.7532169117647058
User 97150 does not improve AUC. Reverting changes.
Training on augumented user 125670 44/50 current_auc = 0.7536764705882353
User 125670 AUC after training: 0.7527573529411765
User 125670 does not improve AUC. Reverting changes.
Training on augumented user 10344 45/50 current_auc = 0.7536764705882353
User 10344 AUC after training: 0.7532169117647058
User 10344 does not improve AUC. Reverting changes.
Training on augumented user 72422 46/50 current_auc = 0.7536764705882353
User 72422 AUC after training: 0.7522977941176471
User 72422 does not improve AUC. Reverting changes.
Training on augumented user 76189 47/50 current_auc = 0.7536764705882353
User 76189 AUC after training: 0.7527573529411765
User 76189 does not improve AUC. Reverting changes.
Training on augumented user 114848 48/50 current_auc = 0.7536764705882353
User 114848 AUC after training: 0.7536764705882353
User 114848 does not improve AUC. Reverting changes.
Training on augumented user 1863 49/50 current_auc = 0.7536764705882353
User 1863 AUC after training: 0.7532169117647058
User 1863 does not improve AUC. Reverting changes.
[2024-12-02 18:00:58.666888] start test user 110496 43/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:00:59.459569] start test user 110496 43/567 recall augumented users by random, augumented_users = [25204, 59686, 97132, 47434, 65653, 3299, 84416, 17772, 65129, 11107, 138462, 24155, 6479, 68912, 49628, 2988, 97089, 117721, 25273, 59503, 88023, 108547, 87947, 109658, 85945, 3944, 112343, 63893, 130884, 102943, 36203, 99754, 105400, 50268, 128317, 71004, 74754, 35217, 43014, 66659, 100139, 8394, 53439, 32276, 23898, 18582, 87352, 49614, 135710, 16901]
[2024-12-02 18:00:59.474581] user = 110496 Cloud 43/567
[2024-12-02 18:00:59.492948] user = 110496 Local 43/567
[2024-12-02 18:00:59.594756] user = 110496 Local+ 43/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:01:02.502108] user = 110496 MPDA- 43/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7667388949079089
Training on augumented user 25204 0/50 current_auc = 0.7667388949079089
User 25204 AUC after training: 0.766955579631636
User 25204 improves AUC. Keeping the model.
Training on augumented user 59686 1/50 current_auc = 0.766955579631636
User 59686 AUC after training: 0.7668472372697724
User 59686 does not improve AUC. Reverting changes.
Training on augumented user 97132 2/50 current_auc = 0.766955579631636
User 97132 AUC after training: 0.7668472372697724
User 97132 does not improve AUC. Reverting changes.
Training on augumented user 47434 3/50 current_auc = 0.766955579631636
User 47434 AUC after training: 0.7680390032502709
User 47434 improves AUC. Keeping the model.
Training on augumented user 65653 4/50 current_auc = 0.7680390032502709
User 65653 AUC after training: 0.7673889490790898
User 65653 does not improve AUC. Reverting changes.
Training on augumented user 3299 5/50 current_auc = 0.7680390032502709
User 3299 AUC after training: 0.7678223185265439
User 3299 does not improve AUC. Reverting changes.
Training on augumented user 84416 6/50 current_auc = 0.7680390032502709
User 84416 AUC after training: 0.7678223185265439
User 84416 does not improve AUC. Reverting changes.
Training on augumented user 17772 7/50 current_auc = 0.7680390032502709
User 17772 AUC after training: 0.7673889490790898
User 17772 does not improve AUC. Reverting changes.
Training on augumented user 65129 8/50 current_auc = 0.7680390032502709
User 65129 AUC after training: 0.7689057421451787
User 65129 improves AUC. Keeping the model.
Training on augumented user 11107 9/50 current_auc = 0.7689057421451787
User 11107 AUC after training: 0.7696641386782231
User 11107 improves AUC. Keeping the model.
Training on augumented user 138462 10/50 current_auc = 0.7696641386782231
User 138462 AUC after training: 0.7694474539544962
User 138462 does not improve AUC. Reverting changes.
Training on augumented user 24155 11/50 current_auc = 0.7696641386782231
User 24155 AUC after training: 0.7693391115926327
User 24155 does not improve AUC. Reverting changes.
Training on augumented user 6479 12/50 current_auc = 0.7696641386782231
User 6479 AUC after training: 0.7683640303358613
User 6479 does not improve AUC. Reverting changes.
Training on augumented user 68912 13/50 current_auc = 0.7696641386782231
User 68912 AUC after training: 0.7696641386782231
User 68912 does not improve AUC. Reverting changes.
Training on augumented user 49628 14/50 current_auc = 0.7696641386782231
User 49628 AUC after training: 0.7694474539544962
User 49628 does not improve AUC. Reverting changes.
Training on augumented user 2988 15/50 current_auc = 0.7696641386782231
User 2988 AUC after training: 0.7709642470205851
User 2988 improves AUC. Keeping the model.
Training on augumented user 97089 16/50 current_auc = 0.7709642470205851
User 97089 AUC after training: 0.771397616468039
User 97089 improves AUC. Keeping the model.
Training on augumented user 117721 17/50 current_auc = 0.771397616468039
User 117721 AUC after training: 0.7702058504875406
User 117721 does not improve AUC. Reverting changes.
Training on augumented user 25273 18/50 current_auc = 0.771397616468039
User 25273 AUC after training: 0.7698808234019502
User 25273 does not improve AUC. Reverting changes.
Training on augumented user 59503 19/50 current_auc = 0.771397616468039
User 59503 AUC after training: 0.7703141928494041
User 59503 does not improve AUC. Reverting changes.
Training on augumented user 88023 20/50 current_auc = 0.771397616468039
User 88023 AUC after training: 0.7698808234019502
User 88023 does not improve AUC. Reverting changes.
Training on augumented user 108547 21/50 current_auc = 0.771397616468039
User 108547 AUC after training: 0.7703141928494041
User 108547 does not improve AUC. Reverting changes.
Training on augumented user 87947 22/50 current_auc = 0.771397616468039
User 87947 AUC after training: 0.7703141928494041
User 87947 does not improve AUC. Reverting changes.
Training on augumented user 109658 23/50 current_auc = 0.771397616468039
User 109658 AUC after training: 0.7709642470205851
User 109658 does not improve AUC. Reverting changes.
Training on augumented user 85945 24/50 current_auc = 0.771397616468039
User 85945 AUC after training: 0.7709642470205851
User 85945 does not improve AUC. Reverting changes.
Training on augumented user 3944 25/50 current_auc = 0.771397616468039
User 3944 AUC after training: 0.7703141928494041
User 3944 does not improve AUC. Reverting changes.
Training on augumented user 112343 26/50 current_auc = 0.771397616468039
User 112343 AUC after training: 0.7700975081256771
User 112343 does not improve AUC. Reverting changes.
Training on augumented user 63893 27/50 current_auc = 0.771397616468039
User 63893 AUC after training: 0.7709642470205851
User 63893 does not improve AUC. Reverting changes.
Training on augumented user 130884 28/50 current_auc = 0.771397616468039
User 130884 AUC after training: 0.7713976164680391
User 130884 improves AUC. Keeping the model.
Training on augumented user 102943 29/50 current_auc = 0.7713976164680391
User 102943 AUC after training: 0.771397616468039
User 102943 does not improve AUC. Reverting changes.
Training on augumented user 36203 30/50 current_auc = 0.7713976164680391
User 36203 AUC after training: 0.7709642470205851
User 36203 does not improve AUC. Reverting changes.
Training on augumented user 99754 31/50 current_auc = 0.7713976164680391
User 99754 AUC after training: 0.7698808234019502
User 99754 does not improve AUC. Reverting changes.
Training on augumented user 105400 32/50 current_auc = 0.7713976164680391
User 105400 AUC after training: 0.7705308775731311
User 105400 does not improve AUC. Reverting changes.
Training on augumented user 50268 33/50 current_auc = 0.7713976164680391
User 50268 AUC after training: 0.7709642470205851
User 50268 does not improve AUC. Reverting changes.
Training on augumented user 128317 34/50 current_auc = 0.7713976164680391
User 128317 AUC after training: 0.771180931744312
User 128317 does not improve AUC. Reverting changes.
Training on augumented user 71004 35/50 current_auc = 0.7713976164680391
User 71004 AUC after training: 0.7709642470205851
User 71004 does not improve AUC. Reverting changes.
Training on augumented user 74754 36/50 current_auc = 0.7713976164680391
User 74754 AUC after training: 0.7713976164680391
User 74754 does not improve AUC. Reverting changes.
Training on augumented user 35217 37/50 current_auc = 0.7713976164680391
User 35217 AUC after training: 0.7709642470205851
User 35217 does not improve AUC. Reverting changes.
Training on augumented user 43014 38/50 current_auc = 0.7713976164680391
User 43014 AUC after training: 0.7705308775731311
User 43014 does not improve AUC. Reverting changes.
Training on augumented user 66659 39/50 current_auc = 0.7713976164680391
User 66659 AUC after training: 0.771180931744312
User 66659 does not improve AUC. Reverting changes.
Training on augumented user 100139 40/50 current_auc = 0.7713976164680391
User 100139 AUC after training: 0.7705308775731311
User 100139 does not improve AUC. Reverting changes.
Training on augumented user 8394 41/50 current_auc = 0.7713976164680391
User 8394 AUC after training: 0.771180931744312
User 8394 does not improve AUC. Reverting changes.
Training on augumented user 53439 42/50 current_auc = 0.7713976164680391
User 53439 AUC after training: 0.771180931744312
User 53439 does not improve AUC. Reverting changes.
Training on augumented user 32276 43/50 current_auc = 0.7713976164680391
User 32276 AUC after training: 0.771397616468039
User 32276 does not improve AUC. Reverting changes.
Training on augumented user 23898 44/50 current_auc = 0.7713976164680391
User 23898 AUC after training: 0.771397616468039
User 23898 does not improve AUC. Reverting changes.
Training on augumented user 18582 45/50 current_auc = 0.7713976164680391
User 18582 AUC after training: 0.7709642470205851
User 18582 does not improve AUC. Reverting changes.
Training on augumented user 87352 46/50 current_auc = 0.7713976164680391
User 87352 AUC after training: 0.771180931744312
User 87352 does not improve AUC. Reverting changes.
Training on augumented user 49614 47/50 current_auc = 0.7713976164680391
User 49614 AUC after training: 0.7705308775731311
User 49614 does not improve AUC. Reverting changes.
Training on augumented user 135710 48/50 current_auc = 0.7713976164680391
User 135710 AUC after training: 0.7713976164680391
User 135710 does not improve AUC. Reverting changes.
Training on augumented user 16901 49/50 current_auc = 0.7713976164680391
User 16901 AUC after training: 0.771397616468039
User 16901 does not improve AUC. Reverting changes.
[2024-12-02 18:01:32.467250] start test user 110507 44/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:01:33.105993] start test user 110507 44/567 recall augumented users by random, augumented_users = [106578, 3897, 83072, 125305, 39898, 23747, 2610, 12515, 74347, 98888, 89489, 80384, 106213, 2998, 3244, 113606, 124894, 109910, 23846, 26954, 8698, 9276, 121216, 42434, 9487, 8636, 110399, 17600, 11924, 24589, 15707, 42150, 122026, 129855, 18994, 34972, 8292, 78638, 23741, 32113, 3390, 125281, 55956, 129602, 44401, 45223, 37248, 103449, 19485, 107093]
[2024-12-02 18:01:33.121425] user = 110507 Cloud 44/567
[2024-12-02 18:01:33.147853] user = 110507 Local 44/567
[2024-12-02 18:01:33.182281] user = 110507 Local+ 44/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:01:35.006986] user = 110507 MPDA- 44/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.719889705882353
Training on augumented user 106578 0/50 current_auc = 0.719889705882353
User 106578 AUC after training: 0.7191544117647058
User 106578 does not improve AUC. Reverting changes.
Training on augumented user 3897 1/50 current_auc = 0.719889705882353
User 3897 AUC after training: 0.7188970588235294
User 3897 does not improve AUC. Reverting changes.
Training on augumented user 83072 2/50 current_auc = 0.719889705882353
User 83072 AUC after training: 0.7194117647058824
User 83072 does not improve AUC. Reverting changes.
Training on augumented user 125305 3/50 current_auc = 0.719889705882353
User 125305 AUC after training: 0.7194852941176471
User 125305 does not improve AUC. Reverting changes.
Training on augumented user 39898 4/50 current_auc = 0.719889705882353
User 39898 AUC after training: 0.7173161764705882
User 39898 does not improve AUC. Reverting changes.
Training on augumented user 23747 5/50 current_auc = 0.719889705882353
User 23747 AUC after training: 0.7198897058823529
User 23747 does not improve AUC. Reverting changes.
Training on augumented user 2610 6/50 current_auc = 0.719889705882353
User 2610 AUC after training: 0.7199999999999999
User 2610 improves AUC. Keeping the model.
Training on augumented user 12515 7/50 current_auc = 0.7199999999999999
User 12515 AUC after training: 0.7195955882352941
User 12515 does not improve AUC. Reverting changes.
Training on augumented user 74347 8/50 current_auc = 0.7199999999999999
User 74347 AUC after training: 0.7200735294117648
User 74347 improves AUC. Keeping the model.
Training on augumented user 98888 9/50 current_auc = 0.7200735294117648
User 98888 AUC after training: 0.7195220588235294
User 98888 does not improve AUC. Reverting changes.
Training on augumented user 89489 10/50 current_auc = 0.7200735294117648
User 89489 AUC after training: 0.7203676470588235
User 89489 improves AUC. Keeping the model.
Training on augumented user 80384 11/50 current_auc = 0.7203676470588235
User 80384 AUC after training: 0.7198897058823529
User 80384 does not improve AUC. Reverting changes.
Training on augumented user 106213 12/50 current_auc = 0.7203676470588235
User 106213 AUC after training: 0.7190073529411765
User 106213 does not improve AUC. Reverting changes.
Training on augumented user 2998 13/50 current_auc = 0.7203676470588235
User 2998 AUC after training: 0.7194485294117647
User 2998 does not improve AUC. Reverting changes.
Training on augumented user 3244 14/50 current_auc = 0.7203676470588235
User 3244 AUC after training: 0.7199264705882353
User 3244 does not improve AUC. Reverting changes.
Training on augumented user 113606 15/50 current_auc = 0.7203676470588235
User 113606 AUC after training: 0.7202941176470588
User 113606 does not improve AUC. Reverting changes.
Training on augumented user 124894 16/50 current_auc = 0.7203676470588235
User 124894 AUC after training: 0.7198897058823528
User 124894 does not improve AUC. Reverting changes.
Training on augumented user 109910 17/50 current_auc = 0.7203676470588235
User 109910 AUC after training: 0.71875
User 109910 does not improve AUC. Reverting changes.
Training on augumented user 23846 18/50 current_auc = 0.7203676470588235
User 23846 AUC after training: 0.7200735294117646
User 23846 does not improve AUC. Reverting changes.
Training on augumented user 26954 19/50 current_auc = 0.7203676470588235
User 26954 AUC after training: 0.719375
User 26954 does not improve AUC. Reverting changes.
Training on augumented user 8698 20/50 current_auc = 0.7203676470588235
User 8698 AUC after training: 0.7194852941176471
User 8698 does not improve AUC. Reverting changes.
Training on augumented user 9276 21/50 current_auc = 0.7203676470588235
User 9276 AUC after training: 0.7198161764705882
User 9276 does not improve AUC. Reverting changes.
Training on augumented user 121216 22/50 current_auc = 0.7203676470588235
User 121216 AUC after training: 0.7200367647058824
User 121216 does not improve AUC. Reverting changes.
Training on augumented user 42434 23/50 current_auc = 0.7203676470588235
User 42434 AUC after training: 0.7187867647058823
User 42434 does not improve AUC. Reverting changes.
Training on augumented user 9487 24/50 current_auc = 0.7203676470588235
User 9487 AUC after training: 0.719889705882353
User 9487 does not improve AUC. Reverting changes.
Training on augumented user 8636 25/50 current_auc = 0.7203676470588235
User 8636 AUC after training: 0.7172242647058824
User 8636 does not improve AUC. Reverting changes.
Training on augumented user 110399 26/50 current_auc = 0.7203676470588235
User 110399 AUC after training: 0.72
User 110399 does not improve AUC. Reverting changes.
Training on augumented user 17600 27/50 current_auc = 0.7203676470588235
User 17600 AUC after training: 0.7188970588235295
User 17600 does not improve AUC. Reverting changes.
Training on augumented user 11924 28/50 current_auc = 0.7203676470588235
User 11924 AUC after training: 0.7173529411764706
User 11924 does not improve AUC. Reverting changes.
Training on augumented user 24589 29/50 current_auc = 0.7203676470588235
User 24589 AUC after training: 0.7198161764705882
User 24589 does not improve AUC. Reverting changes.
Training on augumented user 15707 30/50 current_auc = 0.7203676470588235
User 15707 AUC after training: 0.7204411764705881
User 15707 improves AUC. Keeping the model.
Training on augumented user 42150 31/50 current_auc = 0.7204411764705881
User 42150 AUC after training: 0.7202205882352941
User 42150 does not improve AUC. Reverting changes.
Training on augumented user 122026 32/50 current_auc = 0.7204411764705881
User 122026 AUC after training: 0.7204044117647058
User 122026 does not improve AUC. Reverting changes.
Training on augumented user 129855 33/50 current_auc = 0.7204411764705881
User 129855 AUC after training: 0.720110294117647
User 129855 does not improve AUC. Reverting changes.
Training on augumented user 18994 34/50 current_auc = 0.7204411764705881
User 18994 AUC after training: 0.720110294117647
User 18994 does not improve AUC. Reverting changes.
Training on augumented user 34972 35/50 current_auc = 0.7204411764705881
User 34972 AUC after training: 0.7198161764705883
User 34972 does not improve AUC. Reverting changes.
Training on augumented user 8292 36/50 current_auc = 0.7204411764705881
User 8292 AUC after training: 0.7183823529411764
User 8292 does not improve AUC. Reverting changes.
Training on augumented user 78638 37/50 current_auc = 0.7204411764705881
User 78638 AUC after training: 0.7200367647058823
User 78638 does not improve AUC. Reverting changes.
Training on augumented user 23741 38/50 current_auc = 0.7204411764705881
User 23741 AUC after training: 0.7193014705882353
User 23741 does not improve AUC. Reverting changes.
Training on augumented user 32113 39/50 current_auc = 0.7204411764705881
User 32113 AUC after training: 0.7199264705882353
User 32113 does not improve AUC. Reverting changes.
Training on augumented user 3390 40/50 current_auc = 0.7204411764705881
User 3390 AUC after training: 0.7196323529411766
User 3390 does not improve AUC. Reverting changes.
Training on augumented user 125281 41/50 current_auc = 0.7204411764705881
User 125281 AUC after training: 0.7197426470588235
User 125281 does not improve AUC. Reverting changes.
Training on augumented user 55956 42/50 current_auc = 0.7204411764705881
User 55956 AUC after training: 0.7178125
User 55956 does not improve AUC. Reverting changes.
Training on augumented user 129602 43/50 current_auc = 0.7204411764705881
User 129602 AUC after training: 0.7178860294117647
User 129602 does not improve AUC. Reverting changes.
Training on augumented user 44401 44/50 current_auc = 0.7204411764705881
User 44401 AUC after training: 0.720294117647059
User 44401 does not improve AUC. Reverting changes.
Training on augumented user 45223 45/50 current_auc = 0.7204411764705881
User 45223 AUC after training: 0.7194852941176472
User 45223 does not improve AUC. Reverting changes.
Training on augumented user 37248 46/50 current_auc = 0.7204411764705881
User 37248 AUC after training: 0.7203676470588236
User 37248 does not improve AUC. Reverting changes.
Training on augumented user 103449 47/50 current_auc = 0.7204411764705881
User 103449 AUC after training: 0.7195588235294117
User 103449 does not improve AUC. Reverting changes.
Training on augumented user 19485 48/50 current_auc = 0.7204411764705881
User 19485 AUC after training: 0.7197058823529412
User 19485 does not improve AUC. Reverting changes.
Training on augumented user 107093 49/50 current_auc = 0.7204411764705881
User 107093 AUC after training: 0.7190624999999999
User 107093 does not improve AUC. Reverting changes.
[2024-12-02 18:02:09.498460] start test user 110512 45/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:02:10.220149] start test user 110512 45/567 recall augumented users by random, augumented_users = [112037, 95848, 32418, 24748, 100442, 10163, 40710, 35697, 80938, 71223, 96510, 12556, 91160, 27338, 129893, 28870, 21789, 77117, 72556, 27384, 135753, 131265, 79883, 84418, 35112, 38371, 76924, 98469, 4543, 67333, 57805, 30218, 27080, 34656, 45226, 77855, 98388, 87311, 24161, 24485, 63308, 94302, 51693, 49431, 2822, 115937, 13734, 114558, 8263, 97576]
[2024-12-02 18:02:10.238630] user = 110512 Cloud 45/567
[2024-12-02 18:02:10.259691] user = 110512 Local 45/567
[2024-12-02 18:02:10.375353] user = 110512 Local+ 45/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:02:13.450173] user = 110512 MPDA- 45/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.609746835443038
Training on augumented user 112037 0/50 current_auc = 0.609746835443038
User 112037 AUC after training: 0.6094936708860759
User 112037 does not improve AUC. Reverting changes.
Training on augumented user 95848 1/50 current_auc = 0.609746835443038
User 95848 AUC after training: 0.609493670886076
User 95848 does not improve AUC. Reverting changes.
Training on augumented user 32418 2/50 current_auc = 0.609746835443038
User 32418 AUC after training: 0.609493670886076
User 32418 does not improve AUC. Reverting changes.
Training on augumented user 24748 3/50 current_auc = 0.609746835443038
User 24748 AUC after training: 0.6096202531645569
User 24748 does not improve AUC. Reverting changes.
Training on augumented user 100442 4/50 current_auc = 0.609746835443038
User 100442 AUC after training: 0.609493670886076
User 100442 does not improve AUC. Reverting changes.
Training on augumented user 10163 5/50 current_auc = 0.609746835443038
User 10163 AUC after training: 0.6094936708860759
User 10163 does not improve AUC. Reverting changes.
Training on augumented user 40710 6/50 current_auc = 0.609746835443038
User 40710 AUC after training: 0.6094936708860759
User 40710 does not improve AUC. Reverting changes.
Training on augumented user 35697 7/50 current_auc = 0.609746835443038
User 35697 AUC after training: 0.6089873417721519
User 35697 does not improve AUC. Reverting changes.
Training on augumented user 80938 8/50 current_auc = 0.609746835443038
User 80938 AUC after training: 0.609240506329114
User 80938 does not improve AUC. Reverting changes.
Training on augumented user 71223 9/50 current_auc = 0.609746835443038
User 71223 AUC after training: 0.6089873417721519
User 71223 does not improve AUC. Reverting changes.
Training on augumented user 96510 10/50 current_auc = 0.609746835443038
User 96510 AUC after training: 0.6096202531645569
User 96510 does not improve AUC. Reverting changes.
Training on augumented user 12556 11/50 current_auc = 0.609746835443038
User 12556 AUC after training: 0.6092405063291139
User 12556 does not improve AUC. Reverting changes.
Training on augumented user 91160 12/50 current_auc = 0.609746835443038
User 91160 AUC after training: 0.610126582278481
User 91160 improves AUC. Keeping the model.
Training on augumented user 27338 13/50 current_auc = 0.610126582278481
User 27338 AUC after training: 0.609240506329114
User 27338 does not improve AUC. Reverting changes.
Training on augumented user 129893 14/50 current_auc = 0.610126582278481
User 129893 AUC after training: 0.610632911392405
User 129893 improves AUC. Keeping the model.
Training on augumented user 28870 15/50 current_auc = 0.610632911392405
User 28870 AUC after training: 0.609873417721519
User 28870 does not improve AUC. Reverting changes.
Training on augumented user 21789 16/50 current_auc = 0.610632911392405
User 21789 AUC after training: 0.609240506329114
User 21789 does not improve AUC. Reverting changes.
Training on augumented user 77117 17/50 current_auc = 0.610632911392405
User 77117 AUC after training: 0.610632911392405
User 77117 does not improve AUC. Reverting changes.
Training on augumented user 72556 18/50 current_auc = 0.610632911392405
User 72556 AUC after training: 0.610759493670886
User 72556 improves AUC. Keeping the model.
Training on augumented user 27384 19/50 current_auc = 0.610759493670886
User 27384 AUC after training: 0.610253164556962
User 27384 does not improve AUC. Reverting changes.
Training on augumented user 135753 20/50 current_auc = 0.610759493670886
User 135753 AUC after training: 0.6117721518987342
User 135753 improves AUC. Keeping the model.
Training on augumented user 131265 21/50 current_auc = 0.6117721518987342
User 131265 AUC after training: 0.6112658227848101
User 131265 does not improve AUC. Reverting changes.
Training on augumented user 79883 22/50 current_auc = 0.6117721518987342
User 79883 AUC after training: 0.6120253164556961
User 79883 improves AUC. Keeping the model.
Training on augumented user 84418 23/50 current_auc = 0.6120253164556961
User 84418 AUC after training: 0.6117721518987342
User 84418 does not improve AUC. Reverting changes.
Training on augumented user 35112 24/50 current_auc = 0.6120253164556961
User 35112 AUC after training: 0.610632911392405
User 35112 does not improve AUC. Reverting changes.
Training on augumented user 38371 25/50 current_auc = 0.6120253164556961
User 38371 AUC after training: 0.6112658227848101
User 38371 does not improve AUC. Reverting changes.
Training on augumented user 76924 26/50 current_auc = 0.6120253164556961
User 76924 AUC after training: 0.6110126582278481
User 76924 does not improve AUC. Reverting changes.
Training on augumented user 98469 27/50 current_auc = 0.6120253164556961
User 98469 AUC after training: 0.6112658227848101
User 98469 does not improve AUC. Reverting changes.
Training on augumented user 4543 28/50 current_auc = 0.6120253164556961
User 4543 AUC after training: 0.6122784810126582
User 4543 improves AUC. Keeping the model.
Training on augumented user 67333 29/50 current_auc = 0.6122784810126582
User 67333 AUC after training: 0.6110126582278481
User 67333 does not improve AUC. Reverting changes.
Training on augumented user 57805 30/50 current_auc = 0.6122784810126582
User 57805 AUC after training: 0.610379746835443
User 57805 does not improve AUC. Reverting changes.
Training on augumented user 30218 31/50 current_auc = 0.6122784810126582
User 30218 AUC after training: 0.609873417721519
User 30218 does not improve AUC. Reverting changes.
Training on augumented user 27080 32/50 current_auc = 0.6122784810126582
User 27080 AUC after training: 0.6117721518987342
User 27080 does not improve AUC. Reverting changes.
Training on augumented user 34656 33/50 current_auc = 0.6122784810126582
User 34656 AUC after training: 0.609873417721519
User 34656 does not improve AUC. Reverting changes.
Training on augumented user 45226 34/50 current_auc = 0.6122784810126582
User 45226 AUC after training: 0.6117721518987341
User 45226 does not improve AUC. Reverting changes.
Training on augumented user 77855 35/50 current_auc = 0.6122784810126582
User 77855 AUC after training: 0.6122784810126582
User 77855 does not improve AUC. Reverting changes.
Training on augumented user 98388 36/50 current_auc = 0.6122784810126582
User 98388 AUC after training: 0.6112658227848101
User 98388 does not improve AUC. Reverting changes.
Training on augumented user 87311 37/50 current_auc = 0.6122784810126582
User 87311 AUC after training: 0.6115189873417721
User 87311 does not improve AUC. Reverting changes.
Training on augumented user 24161 38/50 current_auc = 0.6122784810126582
User 24161 AUC after training: 0.6115189873417721
User 24161 does not improve AUC. Reverting changes.
Training on augumented user 24485 39/50 current_auc = 0.6122784810126582
User 24485 AUC after training: 0.6120253164556961
User 24485 does not improve AUC. Reverting changes.
Training on augumented user 63308 40/50 current_auc = 0.6122784810126582
User 63308 AUC after training: 0.6110126582278481
User 63308 does not improve AUC. Reverting changes.
Training on augumented user 94302 41/50 current_auc = 0.6122784810126582
User 94302 AUC after training: 0.61
User 94302 does not improve AUC. Reverting changes.
Training on augumented user 51693 42/50 current_auc = 0.6122784810126582
User 51693 AUC after training: 0.6124050632911393
User 51693 improves AUC. Keeping the model.
Training on augumented user 49431 43/50 current_auc = 0.6124050632911393
User 49431 AUC after training: 0.6118987341772152
User 49431 does not improve AUC. Reverting changes.
Training on augumented user 2822 44/50 current_auc = 0.6124050632911393
User 2822 AUC after training: 0.6105063291139241
User 2822 does not improve AUC. Reverting changes.
Training on augumented user 115937 45/50 current_auc = 0.6124050632911393
User 115937 AUC after training: 0.6113924050632912
User 115937 does not improve AUC. Reverting changes.
Training on augumented user 13734 46/50 current_auc = 0.6124050632911393
User 13734 AUC after training: 0.6121518987341772
User 13734 does not improve AUC. Reverting changes.
Training on augumented user 114558 47/50 current_auc = 0.6124050632911393
User 114558 AUC after training: 0.6121518987341772
User 114558 does not improve AUC. Reverting changes.
Training on augumented user 8263 48/50 current_auc = 0.6124050632911393
User 8263 AUC after training: 0.6112658227848101
User 8263 does not improve AUC. Reverting changes.
Training on augumented user 97576 49/50 current_auc = 0.6124050632911393
User 97576 AUC after training: 0.6121518987341772
User 97576 does not improve AUC. Reverting changes.
[2024-12-02 18:02:41.899010] start test user 110515 46/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:02:42.314713] start test user 110515 46/567 recall augumented users by random, augumented_users = [60665, 42255, 119273, 130151, 6526, 107369, 130525, 31179, 37972, 27497, 119151, 13229, 128576, 136624, 133583, 75275, 33134, 22351, 122867, 37537, 96191, 50342, 62686, 118251, 25209, 100493, 131007, 18797, 70731, 94741, 74521, 27455, 64854, 131005, 81488, 26315, 21153, 75229, 129206, 138026, 27661, 84205, 21702, 46797, 73831, 61523, 92520, 102870, 121555, 11824]
[2024-12-02 18:02:42.329590] user = 110515 Cloud 46/567
[2024-12-02 18:02:42.338853] user = 110515 Local 46/567
[2024-12-02 18:02:42.377694] user = 110515 Local+ 46/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:02:44.597309] user = 110515 MPDA- 46/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 1.0
Training on augumented user 60665 0/50 current_auc = 1.0
User 60665 AUC after training: 1.0
User 60665 does not improve AUC. Reverting changes.
Training on augumented user 42255 1/50 current_auc = 1.0
User 42255 AUC after training: 1.0
User 42255 does not improve AUC. Reverting changes.
Training on augumented user 119273 2/50 current_auc = 1.0
User 119273 AUC after training: 1.0
User 119273 does not improve AUC. Reverting changes.
Training on augumented user 130151 3/50 current_auc = 1.0
User 130151 AUC after training: 1.0
User 130151 does not improve AUC. Reverting changes.
Training on augumented user 6526 4/50 current_auc = 1.0
User 6526 AUC after training: 1.0
User 6526 does not improve AUC. Reverting changes.
Training on augumented user 107369 5/50 current_auc = 1.0
User 107369 AUC after training: 1.0
User 107369 does not improve AUC. Reverting changes.
Training on augumented user 130525 6/50 current_auc = 1.0
User 130525 AUC after training: 1.0
User 130525 does not improve AUC. Reverting changes.
Training on augumented user 31179 7/50 current_auc = 1.0
User 31179 AUC after training: 1.0
User 31179 does not improve AUC. Reverting changes.
Training on augumented user 37972 8/50 current_auc = 1.0
User 37972 AUC after training: 1.0
User 37972 does not improve AUC. Reverting changes.
Training on augumented user 27497 9/50 current_auc = 1.0
User 27497 AUC after training: 1.0
User 27497 does not improve AUC. Reverting changes.
Training on augumented user 119151 10/50 current_auc = 1.0
User 119151 AUC after training: 1.0
User 119151 does not improve AUC. Reverting changes.
Training on augumented user 13229 11/50 current_auc = 1.0
User 13229 AUC after training: 1.0
User 13229 does not improve AUC. Reverting changes.
Training on augumented user 128576 12/50 current_auc = 1.0
User 128576 AUC after training: 1.0
User 128576 does not improve AUC. Reverting changes.
Training on augumented user 136624 13/50 current_auc = 1.0
User 136624 AUC after training: 1.0
User 136624 does not improve AUC. Reverting changes.
Training on augumented user 133583 14/50 current_auc = 1.0
User 133583 AUC after training: 1.0
User 133583 does not improve AUC. Reverting changes.
Training on augumented user 75275 15/50 current_auc = 1.0
User 75275 AUC after training: 1.0
User 75275 does not improve AUC. Reverting changes.
Training on augumented user 33134 16/50 current_auc = 1.0
User 33134 AUC after training: 1.0
User 33134 does not improve AUC. Reverting changes.
Training on augumented user 22351 17/50 current_auc = 1.0
User 22351 AUC after training: 1.0
User 22351 does not improve AUC. Reverting changes.
Training on augumented user 122867 18/50 current_auc = 1.0
User 122867 AUC after training: 1.0
User 122867 does not improve AUC. Reverting changes.
Training on augumented user 37537 19/50 current_auc = 1.0
User 37537 AUC after training: 1.0
User 37537 does not improve AUC. Reverting changes.
Training on augumented user 96191 20/50 current_auc = 1.0
User 96191 AUC after training: 1.0
User 96191 does not improve AUC. Reverting changes.
Training on augumented user 50342 21/50 current_auc = 1.0
User 50342 AUC after training: 0.9642857142857143
User 50342 does not improve AUC. Reverting changes.
Training on augumented user 62686 22/50 current_auc = 1.0
User 62686 AUC after training: 1.0
User 62686 does not improve AUC. Reverting changes.
Training on augumented user 118251 23/50 current_auc = 1.0
User 118251 AUC after training: 1.0
User 118251 does not improve AUC. Reverting changes.
Training on augumented user 25209 24/50 current_auc = 1.0
User 25209 AUC after training: 1.0
User 25209 does not improve AUC. Reverting changes.
Training on augumented user 100493 25/50 current_auc = 1.0
User 100493 AUC after training: 1.0
User 100493 does not improve AUC. Reverting changes.
Training on augumented user 131007 26/50 current_auc = 1.0
User 131007 AUC after training: 1.0
User 131007 does not improve AUC. Reverting changes.
Training on augumented user 18797 27/50 current_auc = 1.0
User 18797 AUC after training: 1.0
User 18797 does not improve AUC. Reverting changes.
Training on augumented user 70731 28/50 current_auc = 1.0
User 70731 AUC after training: 1.0
User 70731 does not improve AUC. Reverting changes.
Training on augumented user 94741 29/50 current_auc = 1.0
User 94741 AUC after training: 1.0
User 94741 does not improve AUC. Reverting changes.
Training on augumented user 74521 30/50 current_auc = 1.0
User 74521 AUC after training: 1.0
User 74521 does not improve AUC. Reverting changes.
Training on augumented user 27455 31/50 current_auc = 1.0
User 27455 AUC after training: 1.0
User 27455 does not improve AUC. Reverting changes.
Training on augumented user 64854 32/50 current_auc = 1.0
User 64854 AUC after training: 1.0
User 64854 does not improve AUC. Reverting changes.
Training on augumented user 131005 33/50 current_auc = 1.0
User 131005 AUC after training: 0.9642857142857143
User 131005 does not improve AUC. Reverting changes.
Training on augumented user 81488 34/50 current_auc = 1.0
User 81488 AUC after training: 1.0
User 81488 does not improve AUC. Reverting changes.
Training on augumented user 26315 35/50 current_auc = 1.0
User 26315 AUC after training: 1.0
User 26315 does not improve AUC. Reverting changes.
Training on augumented user 21153 36/50 current_auc = 1.0
User 21153 AUC after training: 1.0
User 21153 does not improve AUC. Reverting changes.
Training on augumented user 75229 37/50 current_auc = 1.0
User 75229 AUC after training: 1.0
User 75229 does not improve AUC. Reverting changes.
Training on augumented user 129206 38/50 current_auc = 1.0
User 129206 AUC after training: 1.0
User 129206 does not improve AUC. Reverting changes.
Training on augumented user 138026 39/50 current_auc = 1.0
User 138026 AUC after training: 1.0
User 138026 does not improve AUC. Reverting changes.
Training on augumented user 27661 40/50 current_auc = 1.0
User 27661 AUC after training: 1.0
User 27661 does not improve AUC. Reverting changes.
Training on augumented user 84205 41/50 current_auc = 1.0
User 84205 AUC after training: 1.0
User 84205 does not improve AUC. Reverting changes.
Training on augumented user 21702 42/50 current_auc = 1.0
User 21702 AUC after training: 1.0
User 21702 does not improve AUC. Reverting changes.
Training on augumented user 46797 43/50 current_auc = 1.0
User 46797 AUC after training: 1.0
User 46797 does not improve AUC. Reverting changes.
Training on augumented user 73831 44/50 current_auc = 1.0
User 73831 AUC after training: 1.0
User 73831 does not improve AUC. Reverting changes.
Training on augumented user 61523 45/50 current_auc = 1.0
User 61523 AUC after training: 1.0
User 61523 does not improve AUC. Reverting changes.
Training on augumented user 92520 46/50 current_auc = 1.0
User 92520 AUC after training: 1.0
User 92520 does not improve AUC. Reverting changes.
Training on augumented user 102870 47/50 current_auc = 1.0
User 102870 AUC after training: 1.0
User 102870 does not improve AUC. Reverting changes.
Training on augumented user 121555 48/50 current_auc = 1.0
User 121555 AUC after training: 1.0
User 121555 does not improve AUC. Reverting changes.
Training on augumented user 11824 49/50 current_auc = 1.0
User 11824 AUC after training: 1.0
User 11824 does not improve AUC. Reverting changes.
[2024-12-02 18:03:13.657586] start test user 110542 47/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:03:14.452994] start test user 110542 47/567 recall augumented users by random, augumented_users = [54575, 109216, 44024, 76604, 117116, 47757, 125766, 13976, 73242, 36899, 79073, 22788, 94731, 115924, 62470, 98105, 34260, 32581, 3930, 83777, 44683, 105435, 87020, 102064, 23253, 51199, 66888, 94237, 16718, 23742, 71512, 14408, 134110, 119429, 136370, 40319, 41954, 137606, 137162, 1508, 34719, 95211, 129462, 90898, 22650, 114626, 66879, 74971, 125527, 11031]
[2024-12-02 18:03:14.467934] user = 110542 Cloud 47/567
[2024-12-02 18:03:14.482719] user = 110542 Local 47/567
[2024-12-02 18:03:14.534928] user = 110542 Local+ 47/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:03:17.099980] user = 110542 MPDA- 47/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6658163265306122
Training on augumented user 54575 0/50 current_auc = 0.6658163265306122
User 54575 AUC after training: 0.6643990929705216
User 54575 does not improve AUC. Reverting changes.
Training on augumented user 109216 1/50 current_auc = 0.6658163265306122
User 109216 AUC after training: 0.6658163265306122
User 109216 does not improve AUC. Reverting changes.
Training on augumented user 44024 2/50 current_auc = 0.6658163265306122
User 44024 AUC after training: 0.6652494331065759
User 44024 does not improve AUC. Reverting changes.
Training on augumented user 76604 3/50 current_auc = 0.6658163265306122
User 76604 AUC after training: 0.6658163265306122
User 76604 does not improve AUC. Reverting changes.
Training on augumented user 117116 4/50 current_auc = 0.6658163265306122
User 117116 AUC after training: 0.6658163265306122
User 117116 does not improve AUC. Reverting changes.
Training on augumented user 47757 5/50 current_auc = 0.6658163265306122
User 47757 AUC after training: 0.6652494331065759
User 47757 does not improve AUC. Reverting changes.
Training on augumented user 125766 6/50 current_auc = 0.6658163265306122
User 125766 AUC after training: 0.6652494331065759
User 125766 does not improve AUC. Reverting changes.
Training on augumented user 13976 7/50 current_auc = 0.6658163265306122
User 13976 AUC after training: 0.6666666666666666
User 13976 improves AUC. Keeping the model.
Training on augumented user 73242 8/50 current_auc = 0.6666666666666666
User 73242 AUC after training: 0.6675170068027211
User 73242 improves AUC. Keeping the model.
Training on augumented user 36899 9/50 current_auc = 0.6675170068027211
User 36899 AUC after training: 0.6685090702947845
User 36899 improves AUC. Keeping the model.
Training on augumented user 79073 10/50 current_auc = 0.6685090702947845
User 79073 AUC after training: 0.6697845804988662
User 79073 improves AUC. Keeping the model.
Training on augumented user 22788 11/50 current_auc = 0.6697845804988662
User 22788 AUC after training: 0.6686507936507937
User 22788 does not improve AUC. Reverting changes.
Training on augumented user 94731 12/50 current_auc = 0.6697845804988662
User 94731 AUC after training: 0.6697845804988662
User 94731 does not improve AUC. Reverting changes.
Training on augumented user 115924 13/50 current_auc = 0.6697845804988662
User 115924 AUC after training: 0.6703514739229025
User 115924 improves AUC. Keeping the model.
Training on augumented user 62470 14/50 current_auc = 0.6703514739229025
User 62470 AUC after training: 0.6697845804988661
User 62470 does not improve AUC. Reverting changes.
Training on augumented user 98105 15/50 current_auc = 0.6703514739229025
User 98105 AUC after training: 0.6683673469387755
User 98105 does not improve AUC. Reverting changes.
Training on augumented user 34260 16/50 current_auc = 0.6703514739229025
User 34260 AUC after training: 0.66921768707483
User 34260 does not improve AUC. Reverting changes.
Training on augumented user 32581 17/50 current_auc = 0.6703514739229025
User 32581 AUC after training: 0.671485260770975
User 32581 improves AUC. Keeping the model.
Training on augumented user 3930 18/50 current_auc = 0.671485260770975
User 3930 AUC after training: 0.6695011337868481
User 3930 does not improve AUC. Reverting changes.
Training on augumented user 83777 19/50 current_auc = 0.671485260770975
User 83777 AUC after training: 0.6706349206349206
User 83777 does not improve AUC. Reverting changes.
Training on augumented user 44683 20/50 current_auc = 0.671485260770975
User 44683 AUC after training: 0.6709183673469388
User 44683 does not improve AUC. Reverting changes.
Training on augumented user 105435 21/50 current_auc = 0.671485260770975
User 105435 AUC after training: 0.6720521541950114
User 105435 improves AUC. Keeping the model.
Training on augumented user 87020 22/50 current_auc = 0.6720521541950114
User 87020 AUC after training: 0.671201814058957
User 87020 does not improve AUC. Reverting changes.
Training on augumented user 102064 23/50 current_auc = 0.6720521541950114
User 102064 AUC after training: 0.6706349206349206
User 102064 does not improve AUC. Reverting changes.
Training on augumented user 23253 24/50 current_auc = 0.6720521541950114
User 23253 AUC after training: 0.6726190476190477
User 23253 improves AUC. Keeping the model.
Training on augumented user 51199 25/50 current_auc = 0.6726190476190477
User 51199 AUC after training: 0.6617063492063492
User 51199 does not improve AUC. Reverting changes.
Training on augumented user 66888 26/50 current_auc = 0.6726190476190477
User 66888 AUC after training: 0.6723356009070295
User 66888 does not improve AUC. Reverting changes.
Training on augumented user 94237 27/50 current_auc = 0.6726190476190477
User 94237 AUC after training: 0.6704931972789115
User 94237 does not improve AUC. Reverting changes.
Training on augumented user 16718 28/50 current_auc = 0.6726190476190477
User 16718 AUC after training: 0.671485260770975
User 16718 does not improve AUC. Reverting changes.
Training on augumented user 23742 29/50 current_auc = 0.6726190476190477
User 23742 AUC after training: 0.6689342403628118
User 23742 does not improve AUC. Reverting changes.
Training on augumented user 71512 30/50 current_auc = 0.6726190476190477
User 71512 AUC after training: 0.6704931972789117
User 71512 does not improve AUC. Reverting changes.
Training on augumented user 14408 31/50 current_auc = 0.6726190476190477
User 14408 AUC after training: 0.6707766439909297
User 14408 does not improve AUC. Reverting changes.
Training on augumented user 134110 32/50 current_auc = 0.6726190476190477
User 134110 AUC after training: 0.6704931972789115
User 134110 does not improve AUC. Reverting changes.
Training on augumented user 119429 33/50 current_auc = 0.6726190476190477
User 119429 AUC after training: 0.6643990929705216
User 119429 does not improve AUC. Reverting changes.
Training on augumented user 136370 34/50 current_auc = 0.6726190476190477
User 136370 AUC after training: 0.6662414965986394
User 136370 does not improve AUC. Reverting changes.
Training on augumented user 40319 35/50 current_auc = 0.6726190476190477
User 40319 AUC after training: 0.6655328798185941
User 40319 does not improve AUC. Reverting changes.
Training on augumented user 41954 36/50 current_auc = 0.6726190476190477
User 41954 AUC after training: 0.6686507936507937
User 41954 does not improve AUC. Reverting changes.
Training on augumented user 137606 37/50 current_auc = 0.6726190476190477
User 137606 AUC after training: 0.6729024943310657
User 137606 improves AUC. Keeping the model.
Training on augumented user 137162 38/50 current_auc = 0.6729024943310657
User 137162 AUC after training: 0.6704931972789115
User 137162 does not improve AUC. Reverting changes.
Training on augumented user 1508 39/50 current_auc = 0.6729024943310657
User 1508 AUC after training: 0.6699263038548753
User 1508 does not improve AUC. Reverting changes.
Training on augumented user 34719 40/50 current_auc = 0.6729024943310657
User 34719 AUC after training: 0.6729024943310656
User 34719 does not improve AUC. Reverting changes.
Training on augumented user 95211 41/50 current_auc = 0.6729024943310657
User 95211 AUC after training: 0.6713435374149659
User 95211 does not improve AUC. Reverting changes.
Training on augumented user 129462 42/50 current_auc = 0.6729024943310657
User 129462 AUC after training: 0.6726190476190476
User 129462 does not improve AUC. Reverting changes.
Training on augumented user 90898 43/50 current_auc = 0.6729024943310657
User 90898 AUC after training: 0.6729024943310657
User 90898 does not improve AUC. Reverting changes.
Training on augumented user 22650 44/50 current_auc = 0.6729024943310657
User 22650 AUC after training: 0.6712018140589568
User 22650 does not improve AUC. Reverting changes.
Training on augumented user 114626 45/50 current_auc = 0.6729024943310657
User 114626 AUC after training: 0.6707766439909297
User 114626 does not improve AUC. Reverting changes.
Training on augumented user 66879 46/50 current_auc = 0.6729024943310657
User 66879 AUC after training: 0.6729024943310657
User 66879 does not improve AUC. Reverting changes.
Training on augumented user 74971 47/50 current_auc = 0.6729024943310657
User 74971 AUC after training: 0.6707766439909297
User 74971 does not improve AUC. Reverting changes.
Training on augumented user 125527 48/50 current_auc = 0.6729024943310657
User 125527 AUC after training: 0.6710600907029478
User 125527 does not improve AUC. Reverting changes.
Training on augumented user 11031 49/50 current_auc = 0.6729024943310657
User 11031 AUC after training: 0.6707766439909297
User 11031 does not improve AUC. Reverting changes.
[2024-12-02 18:03:41.489960] start test user 110576 48/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:03:41.914362] start test user 110576 48/567 recall augumented users by random, augumented_users = [11016, 128898, 129710, 80134, 27589, 128742, 21372, 78034, 46284, 50247, 11106, 22523, 76431, 11916, 81074, 104825, 47524, 106482, 98398, 36978, 34986, 56956, 32026, 10361, 34482, 66369, 18353, 60116, 44106, 21693, 109625, 93111, 67810, 133071, 121472, 79407, 134355, 125631, 10277, 86522, 134413, 12949, 107760, 34784, 48620, 88133, 64584, 79153, 117470, 35439]
[2024-12-02 18:03:41.929015] user = 110576 Cloud 48/567
[2024-12-02 18:03:41.958907] user = 110576 Local 48/567
[2024-12-02 18:03:41.996362] user = 110576 Local+ 48/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:03:44.361023] user = 110576 MPDA- 48/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7036173898696585
Training on augumented user 11016 0/50 current_auc = 0.7036173898696585
User 11016 AUC after training: 0.702936809107408
User 11016 does not improve AUC. Reverting changes.
Training on augumented user 128898 1/50 current_auc = 0.7036173898696585
User 128898 AUC after training: 0.7026480778749382
User 128898 does not improve AUC. Reverting changes.
Training on augumented user 129710 2/50 current_auc = 0.7036173898696585
User 129710 AUC after training: 0.7039061211021282
User 129710 improves AUC. Keeping the model.
Training on augumented user 80134 3/50 current_auc = 0.7039061211021282
User 80134 AUC after training: 0.704153605015674
User 80134 improves AUC. Keeping the model.
Training on augumented user 27589 4/50 current_auc = 0.704153605015674
User 27589 AUC after training: 0.7040711103778254
User 27589 does not improve AUC. Reverting changes.
Training on augumented user 128742 5/50 current_auc = 0.704153605015674
User 128742 AUC after training: 0.7041536050156738
User 128742 does not improve AUC. Reverting changes.
Training on augumented user 21372 6/50 current_auc = 0.704153605015674
User 21372 AUC after training: 0.7047929384590002
User 21372 improves AUC. Keeping the model.
Training on augumented user 78034 7/50 current_auc = 0.7047929384590002
User 78034 AUC after training: 0.7050816696914701
User 78034 improves AUC. Keeping the model.
Training on augumented user 46284 8/50 current_auc = 0.7050816696914701
User 46284 AUC after training: 0.7025655832370896
User 46284 does not improve AUC. Reverting changes.
Training on augumented user 50247 9/50 current_auc = 0.7050816696914701
User 50247 AUC after training: 0.7045042072265304
User 50247 does not improve AUC. Reverting changes.
Training on augumented user 11106 10/50 current_auc = 0.7050816696914701
User 11106 AUC after training: 0.7043392179508332
User 11106 does not improve AUC. Reverting changes.
Training on augumented user 22523 11/50 current_auc = 0.7050816696914701
User 22523 AUC after training: 0.7041329813562118
User 22523 does not improve AUC. Reverting changes.
Training on augumented user 76431 12/50 current_auc = 0.7050816696914701
User 76431 AUC after training: 0.7033080349777265
User 76431 does not improve AUC. Reverting changes.
Training on augumented user 11916 13/50 current_auc = 0.7050816696914701
User 11916 AUC after training: 0.7024830885992412
User 11916 does not improve AUC. Reverting changes.
Training on augumented user 81074 14/50 current_auc = 0.7050816696914701
User 81074 AUC after training: 0.7036586371885827
User 81074 does not improve AUC. Reverting changes.
Training on augumented user 104825 15/50 current_auc = 0.7050816696914701
User 104825 AUC after training: 0.7042154759940604
User 104825 does not improve AUC. Reverting changes.
Training on augumented user 47524 16/50 current_auc = 0.7050816696914701
User 47524 AUC after training: 0.704318594291371
User 47524 does not improve AUC. Reverting changes.
Training on augumented user 106482 17/50 current_auc = 0.7050816696914701
User 106482 AUC after training: 0.7040504867183632
User 106482 does not improve AUC. Reverting changes.
Training on augumented user 98398 18/50 current_auc = 0.7050816696914701
User 98398 AUC after training: 0.7032667876588021
User 98398 does not improve AUC. Reverting changes.
Training on augumented user 36978 19/50 current_auc = 0.7050816696914701
User 36978 AUC after training: 0.7042567233129846
User 36978 does not improve AUC. Reverting changes.
Training on augumented user 34986 20/50 current_auc = 0.7050816696914701
User 34986 AUC after training: 0.7049166804157729
User 34986 does not improve AUC. Reverting changes.
Training on augumented user 56956 21/50 current_auc = 0.7050816696914701
User 56956 AUC after training: 0.7040711103778254
User 56956 does not improve AUC. Reverting changes.
Training on augumented user 32026 22/50 current_auc = 0.7050816696914701
User 32026 AUC after training: 0.7030605510641807
User 32026 does not improve AUC. Reverting changes.
Training on augumented user 10361 23/50 current_auc = 0.7050816696914701
User 10361 AUC after training: 0.7049579277346973
User 10361 does not improve AUC. Reverting changes.
Training on augumented user 34482 24/50 current_auc = 0.7050816696914701
User 34482 AUC after training: 0.7039267447615905
User 34482 does not improve AUC. Reverting changes.
Training on augumented user 66369 25/50 current_auc = 0.7050816696914701
User 66369 AUC after training: 0.7034936479128857
User 66369 does not improve AUC. Reverting changes.
Training on augumented user 18353 26/50 current_auc = 0.7050816696914701
User 18353 AUC after training: 0.7020087444316119
User 18353 does not improve AUC. Reverting changes.
Training on augumented user 60116 27/50 current_auc = 0.7050816696914701
User 60116 AUC after training: 0.7045867018643788
User 60116 does not improve AUC. Reverting changes.
Training on augumented user 44106 28/50 current_auc = 0.7050816696914701
User 44106 AUC after training: 0.7041123576967496
User 44106 does not improve AUC. Reverting changes.
Training on augumented user 21693 29/50 current_auc = 0.7050816696914701
User 21693 AUC after training: 0.7047104438211517
User 21693 does not improve AUC. Reverting changes.
Training on augumented user 109625 30/50 current_auc = 0.7050816696914701
User 109625 AUC after training: 0.7042154759940604
User 109625 does not improve AUC. Reverting changes.
Training on augumented user 93111 31/50 current_auc = 0.7050816696914701
User 93111 AUC after training: 0.7037823791453555
User 93111 does not improve AUC. Reverting changes.
Training on augumented user 67810 32/50 current_auc = 0.7050816696914701
User 67810 AUC after training: 0.7043598416102954
User 67810 does not improve AUC. Reverting changes.
Training on augumented user 133071 33/50 current_auc = 0.7050816696914701
User 133071 AUC after training: 0.7048341857779243
User 133071 does not improve AUC. Reverting changes.
Training on augumented user 121472 34/50 current_auc = 0.7050816696914701
User 121472 AUC after training: 0.7037617554858935
User 121472 does not improve AUC. Reverting changes.
Training on augumented user 79407 35/50 current_auc = 0.7050816696914701
User 79407 AUC after training: 0.7035967662101963
User 79407 does not improve AUC. Reverting changes.
Training on augumented user 134355 36/50 current_auc = 0.7050816696914701
User 134355 AUC after training: 0.7031430457020293
User 134355 does not improve AUC. Reverting changes.
Training on augumented user 125631 37/50 current_auc = 0.7050816696914701
User 125631 AUC after training: 0.7053291536050157
User 125631 improves AUC. Keeping the model.
Training on augumented user 10277 38/50 current_auc = 0.7053291536050157
User 10277 AUC after training: 0.7039267447615906
User 10277 does not improve AUC. Reverting changes.
Training on augumented user 86522 39/50 current_auc = 0.7053291536050157
User 86522 AUC after training: 0.7045867018643788
User 86522 does not improve AUC. Reverting changes.
Training on augumented user 134413 40/50 current_auc = 0.7053291536050157
User 134413 AUC after training: 0.7035967662101963
User 134413 does not improve AUC. Reverting changes.
Training on augumented user 12949 41/50 current_auc = 0.7053291536050157
User 12949 AUC after training: 0.7038854974426663
User 12949 does not improve AUC. Reverting changes.
Training on augumented user 107760 42/50 current_auc = 0.7053291536050157
User 107760 AUC after training: 0.7031017983831052
User 107760 does not improve AUC. Reverting changes.
Training on augumented user 34784 43/50 current_auc = 0.7053291536050157
User 34784 AUC after training: 0.7050816696914701
User 34784 does not improve AUC. Reverting changes.
Training on augumented user 48620 44/50 current_auc = 0.7053291536050157
User 48620 AUC after training: 0.7057828741131826
User 48620 improves AUC. Keeping the model.
Training on augumented user 88133 45/50 current_auc = 0.7057828741131826
User 88133 AUC after training: 0.7035967662101963
User 88133 does not improve AUC. Reverting changes.
Training on augumented user 64584 46/50 current_auc = 0.7057828741131826
User 64584 AUC after training: 0.7037205081669691
User 64584 does not improve AUC. Reverting changes.
Training on augumented user 79153 47/50 current_auc = 0.7057828741131826
User 79153 AUC after training: 0.7035555188912721
User 79153 does not improve AUC. Reverting changes.
Training on augumented user 117470 48/50 current_auc = 0.7057828741131826
User 117470 AUC after training: 0.7037617554858935
User 117470 does not improve AUC. Reverting changes.
Training on augumented user 35439 49/50 current_auc = 0.7057828741131826
User 35439 AUC after training: 0.7006269592476488
User 35439 does not improve AUC. Reverting changes.
[2024-12-02 18:04:11.500037] start test user 110578 49/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:04:11.998531] start test user 110578 49/567 recall augumented users by random, augumented_users = [85233, 138357, 93928, 84979, 18046, 66105, 85779, 15481, 52948, 133301, 125313, 126707, 38566, 112283, 109388, 136890, 27714, 44639, 24946, 124689, 110434, 129305, 128629, 85158, 106360, 4695, 12278, 134897, 81266, 38576, 60014, 12119, 6999, 71550, 95317, 89966, 26785, 118999, 92944, 31167, 3810, 41032, 101072, 55102, 117279, 45020, 100672, 1044, 53258, 69111]
[2024-12-02 18:04:12.014173] user = 110578 Cloud 49/567
[2024-12-02 18:04:12.027070] user = 110578 Local 49/567
[2024-12-02 18:04:12.124035] user = 110578 Local+ 49/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:04:15.586735] user = 110578 MPDA- 49/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8467391304347827
Training on augumented user 85233 0/50 current_auc = 0.8467391304347827
User 85233 AUC after training: 0.8472826086956522
User 85233 improves AUC. Keeping the model.
Training on augumented user 138357 1/50 current_auc = 0.8472826086956522
User 138357 AUC after training: 0.8472826086956522
User 138357 does not improve AUC. Reverting changes.
Training on augumented user 93928 2/50 current_auc = 0.8472826086956522
User 93928 AUC after training: 0.8456521739130435
User 93928 does not improve AUC. Reverting changes.
Training on augumented user 84979 3/50 current_auc = 0.8472826086956522
User 84979 AUC after training: 0.8472826086956522
User 84979 does not improve AUC. Reverting changes.
Training on augumented user 18046 4/50 current_auc = 0.8472826086956522
User 18046 AUC after training: 0.8472826086956522
User 18046 does not improve AUC. Reverting changes.
Training on augumented user 66105 5/50 current_auc = 0.8472826086956522
User 66105 AUC after training: 0.8467391304347827
User 66105 does not improve AUC. Reverting changes.
Training on augumented user 85779 6/50 current_auc = 0.8472826086956522
User 85779 AUC after training: 0.8472826086956522
User 85779 does not improve AUC. Reverting changes.
Training on augumented user 15481 7/50 current_auc = 0.8472826086956522
User 15481 AUC after training: 0.8472826086956522
User 15481 does not improve AUC. Reverting changes.
Training on augumented user 52948 8/50 current_auc = 0.8472826086956522
User 52948 AUC after training: 0.8472826086956522
User 52948 does not improve AUC. Reverting changes.
Training on augumented user 133301 9/50 current_auc = 0.8472826086956522
User 133301 AUC after training: 0.8467391304347827
User 133301 does not improve AUC. Reverting changes.
Training on augumented user 125313 10/50 current_auc = 0.8472826086956522
User 125313 AUC after training: 0.8472826086956522
User 125313 does not improve AUC. Reverting changes.
Training on augumented user 126707 11/50 current_auc = 0.8472826086956522
User 126707 AUC after training: 0.8451086956521738
User 126707 does not improve AUC. Reverting changes.
Training on augumented user 38566 12/50 current_auc = 0.8472826086956522
User 38566 AUC after training: 0.8461956521739131
User 38566 does not improve AUC. Reverting changes.
Training on augumented user 112283 13/50 current_auc = 0.8472826086956522
User 112283 AUC after training: 0.8451086956521738
User 112283 does not improve AUC. Reverting changes.
Training on augumented user 109388 14/50 current_auc = 0.8472826086956522
User 109388 AUC after training: 0.846195652173913
User 109388 does not improve AUC. Reverting changes.
Training on augumented user 136890 15/50 current_auc = 0.8472826086956522
User 136890 AUC after training: 0.8467391304347827
User 136890 does not improve AUC. Reverting changes.
Training on augumented user 27714 16/50 current_auc = 0.8472826086956522
User 27714 AUC after training: 0.8472826086956522
User 27714 does not improve AUC. Reverting changes.
Training on augumented user 44639 17/50 current_auc = 0.8472826086956522
User 44639 AUC after training: 0.8472826086956522
User 44639 does not improve AUC. Reverting changes.
Training on augumented user 24946 18/50 current_auc = 0.8472826086956522
User 24946 AUC after training: 0.8472826086956522
User 24946 does not improve AUC. Reverting changes.
Training on augumented user 124689 19/50 current_auc = 0.8472826086956522
User 124689 AUC after training: 0.8472826086956522
User 124689 does not improve AUC. Reverting changes.
Training on augumented user 110434 20/50 current_auc = 0.8472826086956522
User 110434 AUC after training: 0.8472826086956522
User 110434 does not improve AUC. Reverting changes.
Training on augumented user 129305 21/50 current_auc = 0.8472826086956522
User 129305 AUC after training: 0.8451086956521738
User 129305 does not improve AUC. Reverting changes.
Training on augumented user 128629 22/50 current_auc = 0.8472826086956522
User 128629 AUC after training: 0.8472826086956522
User 128629 does not improve AUC. Reverting changes.
Training on augumented user 85158 23/50 current_auc = 0.8472826086956522
User 85158 AUC after training: 0.8472826086956522
User 85158 does not improve AUC. Reverting changes.
Training on augumented user 106360 24/50 current_auc = 0.8472826086956522
User 106360 AUC after training: 0.8472826086956522
User 106360 does not improve AUC. Reverting changes.
Training on augumented user 4695 25/50 current_auc = 0.8472826086956522
User 4695 AUC after training: 0.8472826086956522
User 4695 does not improve AUC. Reverting changes.
Training on augumented user 12278 26/50 current_auc = 0.8472826086956522
User 12278 AUC after training: 0.8483695652173913
User 12278 improves AUC. Keeping the model.
Training on augumented user 134897 27/50 current_auc = 0.8483695652173913
User 134897 AUC after training: 0.8483695652173913
User 134897 does not improve AUC. Reverting changes.
Training on augumented user 81266 28/50 current_auc = 0.8483695652173913
User 81266 AUC after training: 0.8467391304347827
User 81266 does not improve AUC. Reverting changes.
Training on augumented user 38576 29/50 current_auc = 0.8483695652173913
User 38576 AUC after training: 0.8478260869565217
User 38576 does not improve AUC. Reverting changes.
Training on augumented user 60014 30/50 current_auc = 0.8483695652173913
User 60014 AUC after training: 0.8483695652173913
User 60014 does not improve AUC. Reverting changes.
Training on augumented user 12119 31/50 current_auc = 0.8483695652173913
User 12119 AUC after training: 0.8472826086956522
User 12119 does not improve AUC. Reverting changes.
Training on augumented user 6999 32/50 current_auc = 0.8483695652173913
User 6999 AUC after training: 0.8483695652173913
User 6999 does not improve AUC. Reverting changes.
Training on augumented user 71550 33/50 current_auc = 0.8483695652173913
User 71550 AUC after training: 0.8472826086956522
User 71550 does not improve AUC. Reverting changes.
Training on augumented user 95317 34/50 current_auc = 0.8483695652173913
User 95317 AUC after training: 0.8472826086956522
User 95317 does not improve AUC. Reverting changes.
Training on augumented user 89966 35/50 current_auc = 0.8483695652173913
User 89966 AUC after training: 0.8472826086956522
User 89966 does not improve AUC. Reverting changes.
Training on augumented user 26785 36/50 current_auc = 0.8483695652173913
User 26785 AUC after training: 0.8483695652173913
User 26785 does not improve AUC. Reverting changes.
Training on augumented user 118999 37/50 current_auc = 0.8483695652173913
User 118999 AUC after training: 0.8478260869565217
User 118999 does not improve AUC. Reverting changes.
Training on augumented user 92944 38/50 current_auc = 0.8483695652173913
User 92944 AUC after training: 0.8472826086956522
User 92944 does not improve AUC. Reverting changes.
Training on augumented user 31167 39/50 current_auc = 0.8483695652173913
User 31167 AUC after training: 0.8483695652173913
User 31167 does not improve AUC. Reverting changes.
Training on augumented user 3810 40/50 current_auc = 0.8483695652173913
User 3810 AUC after training: 0.8472826086956522
User 3810 does not improve AUC. Reverting changes.
Training on augumented user 41032 41/50 current_auc = 0.8483695652173913
User 41032 AUC after training: 0.8467391304347827
User 41032 does not improve AUC. Reverting changes.
Training on augumented user 101072 42/50 current_auc = 0.8483695652173913
User 101072 AUC after training: 0.8472826086956522
User 101072 does not improve AUC. Reverting changes.
Training on augumented user 55102 43/50 current_auc = 0.8483695652173913
User 55102 AUC after training: 0.8483695652173913
User 55102 does not improve AUC. Reverting changes.
Training on augumented user 117279 44/50 current_auc = 0.8483695652173913
User 117279 AUC after training: 0.8478260869565217
User 117279 does not improve AUC. Reverting changes.
Training on augumented user 45020 45/50 current_auc = 0.8483695652173913
User 45020 AUC after training: 0.8472826086956522
User 45020 does not improve AUC. Reverting changes.
Training on augumented user 100672 46/50 current_auc = 0.8483695652173913
User 100672 AUC after training: 0.8472826086956522
User 100672 does not improve AUC. Reverting changes.
Training on augumented user 1044 47/50 current_auc = 0.8483695652173913
User 1044 AUC after training: 0.8472826086956522
User 1044 does not improve AUC. Reverting changes.
Training on augumented user 53258 48/50 current_auc = 0.8483695652173913
User 53258 AUC after training: 0.8456521739130435
User 53258 does not improve AUC. Reverting changes.
Training on augumented user 69111 49/50 current_auc = 0.8483695652173913
User 69111 AUC after training: 0.8478260869565217
User 69111 does not improve AUC. Reverting changes.
[2024-12-02 18:04:45.081585] start test user 110609 50/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:04:45.817553] start test user 110609 50/567 recall augumented users by random, augumented_users = [103985, 110281, 132630, 61597, 59956, 49495, 86477, 28787, 29333, 50381, 136292, 76691, 2498, 91717, 107025, 87911, 124911, 31813, 21093, 102464, 81754, 32994, 84528, 70843, 44521, 4716, 127925, 128845, 32113, 60844, 49579, 64142, 108259, 124544, 45196, 90268, 87182, 123702, 68430, 1186, 136027, 90431, 10154, 112583, 117697, 111757, 119422, 87015, 83016, 48757]
[2024-12-02 18:04:45.845090] user = 110609 Cloud 50/567
[2024-12-02 18:04:45.867506] user = 110609 Local 50/567
[2024-12-02 18:04:46.017498] user = 110609 Local+ 50/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:04:48.917543] user = 110609 MPDA- 50/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6571428571428571
Training on augumented user 103985 0/50 current_auc = 0.6571428571428571
User 103985 AUC after training: 0.6571428571428571
User 103985 does not improve AUC. Reverting changes.
Training on augumented user 110281 1/50 current_auc = 0.6571428571428571
User 110281 AUC after training: 0.6571428571428571
User 110281 does not improve AUC. Reverting changes.
Training on augumented user 132630 2/50 current_auc = 0.6571428571428571
User 132630 AUC after training: 0.6571428571428571
User 132630 does not improve AUC. Reverting changes.
Training on augumented user 61597 3/50 current_auc = 0.6571428571428571
User 61597 AUC after training: 0.6571428571428571
User 61597 does not improve AUC. Reverting changes.
Training on augumented user 59956 4/50 current_auc = 0.6571428571428571
User 59956 AUC after training: 0.6571428571428571
User 59956 does not improve AUC. Reverting changes.
Training on augumented user 49495 5/50 current_auc = 0.6571428571428571
User 49495 AUC after training: 0.6571428571428571
User 49495 does not improve AUC. Reverting changes.
Training on augumented user 86477 6/50 current_auc = 0.6571428571428571
User 86477 AUC after training: 0.6571428571428571
User 86477 does not improve AUC. Reverting changes.
Training on augumented user 28787 7/50 current_auc = 0.6571428571428571
User 28787 AUC after training: 0.6571428571428571
User 28787 does not improve AUC. Reverting changes.
Training on augumented user 29333 8/50 current_auc = 0.6571428571428571
User 29333 AUC after training: 0.6571428571428571
User 29333 does not improve AUC. Reverting changes.
Training on augumented user 50381 9/50 current_auc = 0.6571428571428571
User 50381 AUC after training: 0.6571428571428571
User 50381 does not improve AUC. Reverting changes.
Training on augumented user 136292 10/50 current_auc = 0.6571428571428571
User 136292 AUC after training: 0.6571428571428571
User 136292 does not improve AUC. Reverting changes.
Training on augumented user 76691 11/50 current_auc = 0.6571428571428571
User 76691 AUC after training: 0.6571428571428571
User 76691 does not improve AUC. Reverting changes.
Training on augumented user 2498 12/50 current_auc = 0.6571428571428571
User 2498 AUC after training: 0.6571428571428571
User 2498 does not improve AUC. Reverting changes.
Training on augumented user 91717 13/50 current_auc = 0.6571428571428571
User 91717 AUC after training: 0.6571428571428571
User 91717 does not improve AUC. Reverting changes.
Training on augumented user 107025 14/50 current_auc = 0.6571428571428571
User 107025 AUC after training: 0.6571428571428571
User 107025 does not improve AUC. Reverting changes.
Training on augumented user 87911 15/50 current_auc = 0.6571428571428571
User 87911 AUC after training: 0.6571428571428571
User 87911 does not improve AUC. Reverting changes.
Training on augumented user 124911 16/50 current_auc = 0.6571428571428571
User 124911 AUC after training: 0.6571428571428571
User 124911 does not improve AUC. Reverting changes.
Training on augumented user 31813 17/50 current_auc = 0.6571428571428571
User 31813 AUC after training: 0.6571428571428571
User 31813 does not improve AUC. Reverting changes.
Training on augumented user 21093 18/50 current_auc = 0.6571428571428571
User 21093 AUC after training: 0.6571428571428571
User 21093 does not improve AUC. Reverting changes.
Training on augumented user 102464 19/50 current_auc = 0.6571428571428571
User 102464 AUC after training: 0.6571428571428571
User 102464 does not improve AUC. Reverting changes.
Training on augumented user 81754 20/50 current_auc = 0.6571428571428571
User 81754 AUC after training: 0.6571428571428571
User 81754 does not improve AUC. Reverting changes.
Training on augumented user 32994 21/50 current_auc = 0.6571428571428571
User 32994 AUC after training: 0.6571428571428571
User 32994 does not improve AUC. Reverting changes.
Training on augumented user 84528 22/50 current_auc = 0.6571428571428571
User 84528 AUC after training: 0.6571428571428571
User 84528 does not improve AUC. Reverting changes.
Training on augumented user 70843 23/50 current_auc = 0.6571428571428571
User 70843 AUC after training: 0.6571428571428571
User 70843 does not improve AUC. Reverting changes.
Training on augumented user 44521 24/50 current_auc = 0.6571428571428571
User 44521 AUC after training: 0.6571428571428571
User 44521 does not improve AUC. Reverting changes.
Training on augumented user 4716 25/50 current_auc = 0.6571428571428571
User 4716 AUC after training: 0.6571428571428571
User 4716 does not improve AUC. Reverting changes.
Training on augumented user 127925 26/50 current_auc = 0.6571428571428571
User 127925 AUC after training: 0.6571428571428571
User 127925 does not improve AUC. Reverting changes.
Training on augumented user 128845 27/50 current_auc = 0.6571428571428571
User 128845 AUC after training: 0.6571428571428571
User 128845 does not improve AUC. Reverting changes.
Training on augumented user 32113 28/50 current_auc = 0.6571428571428571
User 32113 AUC after training: 0.6571428571428571
User 32113 does not improve AUC. Reverting changes.
Training on augumented user 60844 29/50 current_auc = 0.6571428571428571
User 60844 AUC after training: 0.6571428571428571
User 60844 does not improve AUC. Reverting changes.
Training on augumented user 49579 30/50 current_auc = 0.6571428571428571
User 49579 AUC after training: 0.6571428571428571
User 49579 does not improve AUC. Reverting changes.
Training on augumented user 64142 31/50 current_auc = 0.6571428571428571
User 64142 AUC after training: 0.6571428571428571
User 64142 does not improve AUC. Reverting changes.
Training on augumented user 108259 32/50 current_auc = 0.6571428571428571
User 108259 AUC after training: 0.6571428571428571
User 108259 does not improve AUC. Reverting changes.
Training on augumented user 124544 33/50 current_auc = 0.6571428571428571
User 124544 AUC after training: 0.6571428571428571
User 124544 does not improve AUC. Reverting changes.
Training on augumented user 45196 34/50 current_auc = 0.6571428571428571
User 45196 AUC after training: 0.6571428571428571
User 45196 does not improve AUC. Reverting changes.
Training on augumented user 90268 35/50 current_auc = 0.6571428571428571
User 90268 AUC after training: 0.6571428571428571
User 90268 does not improve AUC. Reverting changes.
Training on augumented user 87182 36/50 current_auc = 0.6571428571428571
User 87182 AUC after training: 0.6571428571428571
User 87182 does not improve AUC. Reverting changes.
Training on augumented user 123702 37/50 current_auc = 0.6571428571428571
User 123702 AUC after training: 0.6571428571428571
User 123702 does not improve AUC. Reverting changes.
Training on augumented user 68430 38/50 current_auc = 0.6571428571428571
User 68430 AUC after training: 0.6571428571428571
User 68430 does not improve AUC. Reverting changes.
Training on augumented user 1186 39/50 current_auc = 0.6571428571428571
User 1186 AUC after training: 0.6571428571428571
User 1186 does not improve AUC. Reverting changes.
Training on augumented user 136027 40/50 current_auc = 0.6571428571428571
User 136027 AUC after training: 0.6571428571428571
User 136027 does not improve AUC. Reverting changes.
Training on augumented user 90431 41/50 current_auc = 0.6571428571428571
User 90431 AUC after training: 0.6571428571428571
User 90431 does not improve AUC. Reverting changes.
Training on augumented user 10154 42/50 current_auc = 0.6571428571428571
User 10154 AUC after training: 0.6571428571428571
User 10154 does not improve AUC. Reverting changes.
Training on augumented user 112583 43/50 current_auc = 0.6571428571428571
User 112583 AUC after training: 0.6571428571428571
User 112583 does not improve AUC. Reverting changes.
Training on augumented user 117697 44/50 current_auc = 0.6571428571428571
User 117697 AUC after training: 0.6571428571428571
User 117697 does not improve AUC. Reverting changes.
Training on augumented user 111757 45/50 current_auc = 0.6571428571428571
User 111757 AUC after training: 0.6571428571428571
User 111757 does not improve AUC. Reverting changes.
Training on augumented user 119422 46/50 current_auc = 0.6571428571428571
User 119422 AUC after training: 0.6571428571428571
User 119422 does not improve AUC. Reverting changes.
Training on augumented user 87015 47/50 current_auc = 0.6571428571428571
User 87015 AUC after training: 0.6571428571428571
User 87015 does not improve AUC. Reverting changes.
Training on augumented user 83016 48/50 current_auc = 0.6571428571428571
User 83016 AUC after training: 0.6571428571428571
User 83016 does not improve AUC. Reverting changes.
Training on augumented user 48757 49/50 current_auc = 0.6571428571428571
User 48757 AUC after training: 0.6571428571428571
User 48757 does not improve AUC. Reverting changes.
[2024-12-02 18:05:17.482084] start test user 110627 51/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:05:18.106827] start test user 110627 51/567 recall augumented users by random, augumented_users = [23543, 118042, 84769, 127952, 17838, 74257, 38977, 109022, 13735, 79044, 49584, 123416, 34129, 32510, 69446, 73369, 45494, 123146, 76758, 55635, 119273, 118047, 55872, 126577, 44513, 87796, 21084, 59800, 92009, 99343, 123739, 94337, 14564, 66725, 93602, 129893, 43095, 133103, 21919, 37108, 28162, 6516, 61937, 66529, 27574, 100185, 13799, 91198, 52742, 22769]
[2024-12-02 18:05:18.121616] user = 110627 Cloud 51/567
[2024-12-02 18:05:18.131895] user = 110627 Local 51/567
[2024-12-02 18:05:18.179929] user = 110627 Local+ 51/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:05:20.420741] user = 110627 MPDA- 51/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 1.0
Training on augumented user 23543 0/50 current_auc = 1.0
User 23543 AUC after training: 1.0
User 23543 does not improve AUC. Reverting changes.
Training on augumented user 118042 1/50 current_auc = 1.0
User 118042 AUC after training: 1.0
User 118042 does not improve AUC. Reverting changes.
Training on augumented user 84769 2/50 current_auc = 1.0
User 84769 AUC after training: 1.0
User 84769 does not improve AUC. Reverting changes.
Training on augumented user 127952 3/50 current_auc = 1.0
User 127952 AUC after training: 1.0
User 127952 does not improve AUC. Reverting changes.
Training on augumented user 17838 4/50 current_auc = 1.0
User 17838 AUC after training: 1.0
User 17838 does not improve AUC. Reverting changes.
Training on augumented user 74257 5/50 current_auc = 1.0
User 74257 AUC after training: 1.0
User 74257 does not improve AUC. Reverting changes.
Training on augumented user 38977 6/50 current_auc = 1.0
User 38977 AUC after training: 1.0
User 38977 does not improve AUC. Reverting changes.
Training on augumented user 109022 7/50 current_auc = 1.0
User 109022 AUC after training: 1.0
User 109022 does not improve AUC. Reverting changes.
Training on augumented user 13735 8/50 current_auc = 1.0
User 13735 AUC after training: 1.0
User 13735 does not improve AUC. Reverting changes.
Training on augumented user 79044 9/50 current_auc = 1.0
User 79044 AUC after training: 1.0
User 79044 does not improve AUC. Reverting changes.
Training on augumented user 49584 10/50 current_auc = 1.0
User 49584 AUC after training: 1.0
User 49584 does not improve AUC. Reverting changes.
Training on augumented user 123416 11/50 current_auc = 1.0
User 123416 AUC after training: 1.0
User 123416 does not improve AUC. Reverting changes.
Training on augumented user 34129 12/50 current_auc = 1.0
User 34129 AUC after training: 1.0
User 34129 does not improve AUC. Reverting changes.
Training on augumented user 32510 13/50 current_auc = 1.0
User 32510 AUC after training: 1.0
User 32510 does not improve AUC. Reverting changes.
Training on augumented user 69446 14/50 current_auc = 1.0
User 69446 AUC after training: 1.0
User 69446 does not improve AUC. Reverting changes.
Training on augumented user 73369 15/50 current_auc = 1.0
User 73369 AUC after training: 1.0
User 73369 does not improve AUC. Reverting changes.
Training on augumented user 45494 16/50 current_auc = 1.0
User 45494 AUC after training: 1.0
User 45494 does not improve AUC. Reverting changes.
Training on augumented user 123146 17/50 current_auc = 1.0
User 123146 AUC after training: 1.0
User 123146 does not improve AUC. Reverting changes.
Training on augumented user 76758 18/50 current_auc = 1.0
User 76758 AUC after training: 1.0
User 76758 does not improve AUC. Reverting changes.
Training on augumented user 55635 19/50 current_auc = 1.0
User 55635 AUC after training: 1.0
User 55635 does not improve AUC. Reverting changes.
Training on augumented user 119273 20/50 current_auc = 1.0
User 119273 AUC after training: 1.0
User 119273 does not improve AUC. Reverting changes.
Training on augumented user 118047 21/50 current_auc = 1.0
User 118047 AUC after training: 1.0
User 118047 does not improve AUC. Reverting changes.
Training on augumented user 55872 22/50 current_auc = 1.0
User 55872 AUC after training: 1.0
User 55872 does not improve AUC. Reverting changes.
Training on augumented user 126577 23/50 current_auc = 1.0
User 126577 AUC after training: 1.0
User 126577 does not improve AUC. Reverting changes.
Training on augumented user 44513 24/50 current_auc = 1.0
User 44513 AUC after training: 1.0
User 44513 does not improve AUC. Reverting changes.
Training on augumented user 87796 25/50 current_auc = 1.0
User 87796 AUC after training: 1.0
User 87796 does not improve AUC. Reverting changes.
Training on augumented user 21084 26/50 current_auc = 1.0
User 21084 AUC after training: 1.0
User 21084 does not improve AUC. Reverting changes.
Training on augumented user 59800 27/50 current_auc = 1.0
User 59800 AUC after training: 1.0
User 59800 does not improve AUC. Reverting changes.
Training on augumented user 92009 28/50 current_auc = 1.0
User 92009 AUC after training: 1.0
User 92009 does not improve AUC. Reverting changes.
Training on augumented user 99343 29/50 current_auc = 1.0
User 99343 AUC after training: 1.0
User 99343 does not improve AUC. Reverting changes.
Training on augumented user 123739 30/50 current_auc = 1.0
User 123739 AUC after training: 1.0
User 123739 does not improve AUC. Reverting changes.
Training on augumented user 94337 31/50 current_auc = 1.0
User 94337 AUC after training: 1.0
User 94337 does not improve AUC. Reverting changes.
Training on augumented user 14564 32/50 current_auc = 1.0
User 14564 AUC after training: 1.0
User 14564 does not improve AUC. Reverting changes.
Training on augumented user 66725 33/50 current_auc = 1.0
User 66725 AUC after training: 1.0
User 66725 does not improve AUC. Reverting changes.
Training on augumented user 93602 34/50 current_auc = 1.0
User 93602 AUC after training: 1.0
User 93602 does not improve AUC. Reverting changes.
Training on augumented user 129893 35/50 current_auc = 1.0
User 129893 AUC after training: 1.0
User 129893 does not improve AUC. Reverting changes.
Training on augumented user 43095 36/50 current_auc = 1.0
User 43095 AUC after training: 1.0
User 43095 does not improve AUC. Reverting changes.
Training on augumented user 133103 37/50 current_auc = 1.0
User 133103 AUC after training: 1.0
User 133103 does not improve AUC. Reverting changes.
Training on augumented user 21919 38/50 current_auc = 1.0
User 21919 AUC after training: 1.0
User 21919 does not improve AUC. Reverting changes.
Training on augumented user 37108 39/50 current_auc = 1.0
User 37108 AUC after training: 1.0
User 37108 does not improve AUC. Reverting changes.
Training on augumented user 28162 40/50 current_auc = 1.0
User 28162 AUC after training: 1.0
User 28162 does not improve AUC. Reverting changes.
Training on augumented user 6516 41/50 current_auc = 1.0
User 6516 AUC after training: 1.0
User 6516 does not improve AUC. Reverting changes.
Training on augumented user 61937 42/50 current_auc = 1.0
User 61937 AUC after training: 1.0
User 61937 does not improve AUC. Reverting changes.
Training on augumented user 66529 43/50 current_auc = 1.0
User 66529 AUC after training: 1.0
User 66529 does not improve AUC. Reverting changes.
Training on augumented user 27574 44/50 current_auc = 1.0
User 27574 AUC after training: 1.0
User 27574 does not improve AUC. Reverting changes.
Training on augumented user 100185 45/50 current_auc = 1.0
User 100185 AUC after training: 1.0
User 100185 does not improve AUC. Reverting changes.
Training on augumented user 13799 46/50 current_auc = 1.0
User 13799 AUC after training: 1.0
User 13799 does not improve AUC. Reverting changes.
Training on augumented user 91198 47/50 current_auc = 1.0
User 91198 AUC after training: 1.0
User 91198 does not improve AUC. Reverting changes.
Training on augumented user 52742 48/50 current_auc = 1.0
User 52742 AUC after training: 1.0
User 52742 does not improve AUC. Reverting changes.
Training on augumented user 22769 49/50 current_auc = 1.0
User 22769 AUC after training: 1.0
User 22769 does not improve AUC. Reverting changes.
[2024-12-02 18:05:47.471200] start test user 110656 52/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:05:48.115789] start test user 110656 52/567 recall augumented users by random, augumented_users = [30102, 124458, 73282, 94505, 72358, 57960, 107206, 1356, 61469, 115313, 116296, 125569, 106997, 131358, 39447, 4151, 15064, 78714, 45824, 70536, 79550, 29151, 87613, 44802, 99163, 7266, 96490, 69738, 61716, 71238, 72625, 78710, 48945, 45078, 76856, 7877, 77002, 42086, 82340, 108936, 70595, 98231, 6966, 53351, 85815, 53677, 77202, 100440, 129948, 102964]
[2024-12-02 18:05:48.166097] user = 110656 Cloud 52/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:05:48.211067] user = 110656 Local 52/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:05:48.668551] user = 110656 Local+ 52/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:05:51.679990] user = 110656 MPDA- 52/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 30102 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30102 AUC after training: 0.5
User 30102 does not improve AUC. Reverting changes.
Training on augumented user 124458 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124458 AUC after training: 0.5
User 124458 does not improve AUC. Reverting changes.
Training on augumented user 73282 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73282 AUC after training: 0.5
User 73282 does not improve AUC. Reverting changes.
Training on augumented user 94505 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94505 AUC after training: 0.5
User 94505 does not improve AUC. Reverting changes.
Training on augumented user 72358 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72358 AUC after training: 0.5
User 72358 does not improve AUC. Reverting changes.
Training on augumented user 57960 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57960 AUC after training: 0.5
User 57960 does not improve AUC. Reverting changes.
Training on augumented user 107206 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107206 AUC after training: 0.5
User 107206 does not improve AUC. Reverting changes.
Training on augumented user 1356 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1356 AUC after training: 0.5
User 1356 does not improve AUC. Reverting changes.
Training on augumented user 61469 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61469 AUC after training: 0.5
User 61469 does not improve AUC. Reverting changes.
Training on augumented user 115313 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115313 AUC after training: 0.5
User 115313 does not improve AUC. Reverting changes.
Training on augumented user 116296 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116296 AUC after training: 0.5
User 116296 does not improve AUC. Reverting changes.
Training on augumented user 125569 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 125569 AUC after training: 0.5
User 125569 does not improve AUC. Reverting changes.
Training on augumented user 106997 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106997 AUC after training: 0.5
User 106997 does not improve AUC. Reverting changes.
Training on augumented user 131358 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131358 AUC after training: 0.5
User 131358 does not improve AUC. Reverting changes.
Training on augumented user 39447 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 39447 AUC after training: 0.5
User 39447 does not improve AUC. Reverting changes.
Training on augumented user 4151 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4151 AUC after training: 0.5
User 4151 does not improve AUC. Reverting changes.
Training on augumented user 15064 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15064 AUC after training: 0.5
User 15064 does not improve AUC. Reverting changes.
Training on augumented user 78714 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 78714 AUC after training: 0.5
User 78714 does not improve AUC. Reverting changes.
Training on augumented user 45824 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45824 AUC after training: 0.5
User 45824 does not improve AUC. Reverting changes.
Training on augumented user 70536 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70536 AUC after training: 0.5
User 70536 does not improve AUC. Reverting changes.
Training on augumented user 79550 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79550 AUC after training: 0.5
User 79550 does not improve AUC. Reverting changes.
Training on augumented user 29151 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29151 AUC after training: 0.5
User 29151 does not improve AUC. Reverting changes.
Training on augumented user 87613 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87613 AUC after training: 0.5
User 87613 does not improve AUC. Reverting changes.
Training on augumented user 44802 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44802 AUC after training: 0.5
User 44802 does not improve AUC. Reverting changes.
Training on augumented user 99163 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99163 AUC after training: 0.5
User 99163 does not improve AUC. Reverting changes.
Training on augumented user 7266 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7266 AUC after training: 0.5
User 7266 does not improve AUC. Reverting changes.
Training on augumented user 96490 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96490 AUC after training: 0.5
User 96490 does not improve AUC. Reverting changes.
Training on augumented user 69738 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 69738 AUC after training: 0.5
User 69738 does not improve AUC. Reverting changes.
Training on augumented user 61716 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61716 AUC after training: 0.5
User 61716 does not improve AUC. Reverting changes.
Training on augumented user 71238 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71238 AUC after training: 0.5
User 71238 does not improve AUC. Reverting changes.
Training on augumented user 72625 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72625 AUC after training: 0.5
User 72625 does not improve AUC. Reverting changes.
Training on augumented user 78710 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 78710 AUC after training: 0.5
User 78710 does not improve AUC. Reverting changes.
Training on augumented user 48945 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48945 AUC after training: 0.5
User 48945 does not improve AUC. Reverting changes.
Training on augumented user 45078 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45078 AUC after training: 0.5
User 45078 does not improve AUC. Reverting changes.
Training on augumented user 76856 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76856 AUC after training: 0.5
User 76856 does not improve AUC. Reverting changes.
Training on augumented user 7877 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7877 AUC after training: 0.5
User 7877 does not improve AUC. Reverting changes.
Training on augumented user 77002 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77002 AUC after training: 0.5
User 77002 does not improve AUC. Reverting changes.
Training on augumented user 42086 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42086 AUC after training: 0.5
User 42086 does not improve AUC. Reverting changes.
Training on augumented user 82340 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82340 AUC after training: 0.5
User 82340 does not improve AUC. Reverting changes.
Training on augumented user 108936 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108936 AUC after training: 0.5
User 108936 does not improve AUC. Reverting changes.
Training on augumented user 70595 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70595 AUC after training: 0.5
User 70595 does not improve AUC. Reverting changes.
Training on augumented user 98231 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98231 AUC after training: 0.5
User 98231 does not improve AUC. Reverting changes.
Training on augumented user 6966 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6966 AUC after training: 0.5
User 6966 does not improve AUC. Reverting changes.
Training on augumented user 53351 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53351 AUC after training: 0.5
User 53351 does not improve AUC. Reverting changes.
Training on augumented user 85815 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85815 AUC after training: 0.5
User 85815 does not improve AUC. Reverting changes.
Training on augumented user 53677 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53677 AUC after training: 0.5
User 53677 does not improve AUC. Reverting changes.
Training on augumented user 77202 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77202 AUC after training: 0.5
User 77202 does not improve AUC. Reverting changes.
Training on augumented user 100440 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100440 AUC after training: 0.5
User 100440 does not improve AUC. Reverting changes.
Training on augumented user 129948 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129948 AUC after training: 0.5
User 129948 does not improve AUC. Reverting changes.
Training on augumented user 102964 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102964 AUC after training: 0.5
User 102964 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:06:23.894357] start test user 110661 53/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:06:24.502336] start test user 110661 53/567 recall augumented users by random, augumented_users = [38912, 44755, 120140, 132094, 118789, 61373, 114485, 137701, 29792, 36940, 44171, 109074, 107022, 50722, 114184, 107206, 25663, 61284, 65293, 59093, 118024, 28894, 58406, 137483, 62345, 63699, 78932, 35283, 66623, 83909, 125900, 32273, 80739, 6578, 11805, 120977, 102488, 30716, 115664, 11833, 8584, 107258, 138088, 42775, 25273, 133366, 60510, 90963, 722, 87706]
[2024-12-02 18:06:24.516695] user = 110661 Cloud 53/567
[2024-12-02 18:06:24.527233] user = 110661 Local 53/567
[2024-12-02 18:06:24.545898] user = 110661 Local+ 53/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:06:27.440389] user = 110661 MPDA- 53/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4880952380952381
Training on augumented user 38912 0/50 current_auc = 0.4880952380952381
User 38912 AUC after training: 0.4880952380952381
User 38912 does not improve AUC. Reverting changes.
Training on augumented user 44755 1/50 current_auc = 0.4880952380952381
User 44755 AUC after training: 0.4880952380952381
User 44755 does not improve AUC. Reverting changes.
Training on augumented user 120140 2/50 current_auc = 0.4880952380952381
User 120140 AUC after training: 0.4880952380952381
User 120140 does not improve AUC. Reverting changes.
Training on augumented user 132094 3/50 current_auc = 0.4880952380952381
User 132094 AUC after training: 0.4880952380952381
User 132094 does not improve AUC. Reverting changes.
Training on augumented user 118789 4/50 current_auc = 0.4880952380952381
User 118789 AUC after training: 0.4880952380952381
User 118789 does not improve AUC. Reverting changes.
Training on augumented user 61373 5/50 current_auc = 0.4880952380952381
User 61373 AUC after training: 0.4880952380952381
User 61373 does not improve AUC. Reverting changes.
Training on augumented user 114485 6/50 current_auc = 0.4880952380952381
User 114485 AUC after training: 0.4880952380952381
User 114485 does not improve AUC. Reverting changes.
Training on augumented user 137701 7/50 current_auc = 0.4880952380952381
User 137701 AUC after training: 0.4880952380952381
User 137701 does not improve AUC. Reverting changes.
Training on augumented user 29792 8/50 current_auc = 0.4880952380952381
User 29792 AUC after training: 0.4880952380952381
User 29792 does not improve AUC. Reverting changes.
Training on augumented user 36940 9/50 current_auc = 0.4880952380952381
User 36940 AUC after training: 0.4880952380952381
User 36940 does not improve AUC. Reverting changes.
Training on augumented user 44171 10/50 current_auc = 0.4880952380952381
User 44171 AUC after training: 0.4880952380952381
User 44171 does not improve AUC. Reverting changes.
Training on augumented user 109074 11/50 current_auc = 0.4880952380952381
User 109074 AUC after training: 0.4880952380952381
User 109074 does not improve AUC. Reverting changes.
Training on augumented user 107022 12/50 current_auc = 0.4880952380952381
User 107022 AUC after training: 0.4880952380952381
User 107022 does not improve AUC. Reverting changes.
Training on augumented user 50722 13/50 current_auc = 0.4880952380952381
User 50722 AUC after training: 0.4880952380952381
User 50722 does not improve AUC. Reverting changes.
Training on augumented user 114184 14/50 current_auc = 0.4880952380952381
User 114184 AUC after training: 0.4880952380952381
User 114184 does not improve AUC. Reverting changes.
Training on augumented user 107206 15/50 current_auc = 0.4880952380952381
User 107206 AUC after training: 0.4880952380952381
User 107206 does not improve AUC. Reverting changes.
Training on augumented user 25663 16/50 current_auc = 0.4880952380952381
User 25663 AUC after training: 0.4880952380952381
User 25663 does not improve AUC. Reverting changes.
Training on augumented user 61284 17/50 current_auc = 0.4880952380952381
User 61284 AUC after training: 0.4880952380952381
User 61284 does not improve AUC. Reverting changes.
Training on augumented user 65293 18/50 current_auc = 0.4880952380952381
User 65293 AUC after training: 0.4880952380952381
User 65293 does not improve AUC. Reverting changes.
Training on augumented user 59093 19/50 current_auc = 0.4880952380952381
User 59093 AUC after training: 0.4880952380952381
User 59093 does not improve AUC. Reverting changes.
Training on augumented user 118024 20/50 current_auc = 0.4880952380952381
User 118024 AUC after training: 0.4880952380952381
User 118024 does not improve AUC. Reverting changes.
Training on augumented user 28894 21/50 current_auc = 0.4880952380952381
User 28894 AUC after training: 0.4880952380952381
User 28894 does not improve AUC. Reverting changes.
Training on augumented user 58406 22/50 current_auc = 0.4880952380952381
User 58406 AUC after training: 0.4880952380952381
User 58406 does not improve AUC. Reverting changes.
Training on augumented user 137483 23/50 current_auc = 0.4880952380952381
User 137483 AUC after training: 0.4880952380952381
User 137483 does not improve AUC. Reverting changes.
Training on augumented user 62345 24/50 current_auc = 0.4880952380952381
User 62345 AUC after training: 0.4880952380952381
User 62345 does not improve AUC. Reverting changes.
Training on augumented user 63699 25/50 current_auc = 0.4880952380952381
User 63699 AUC after training: 0.4880952380952381
User 63699 does not improve AUC. Reverting changes.
Training on augumented user 78932 26/50 current_auc = 0.4880952380952381
User 78932 AUC after training: 0.4880952380952381
User 78932 does not improve AUC. Reverting changes.
Training on augumented user 35283 27/50 current_auc = 0.4880952380952381
User 35283 AUC after training: 0.4880952380952381
User 35283 does not improve AUC. Reverting changes.
Training on augumented user 66623 28/50 current_auc = 0.4880952380952381
User 66623 AUC after training: 0.4880952380952381
User 66623 does not improve AUC. Reverting changes.
Training on augumented user 83909 29/50 current_auc = 0.4880952380952381
User 83909 AUC after training: 0.4880952380952381
User 83909 does not improve AUC. Reverting changes.
Training on augumented user 125900 30/50 current_auc = 0.4880952380952381
User 125900 AUC after training: 0.4880952380952381
User 125900 does not improve AUC. Reverting changes.
Training on augumented user 32273 31/50 current_auc = 0.4880952380952381
User 32273 AUC after training: 0.4880952380952381
User 32273 does not improve AUC. Reverting changes.
Training on augumented user 80739 32/50 current_auc = 0.4880952380952381
User 80739 AUC after training: 0.4880952380952381
User 80739 does not improve AUC. Reverting changes.
Training on augumented user 6578 33/50 current_auc = 0.4880952380952381
User 6578 AUC after training: 0.4880952380952381
User 6578 does not improve AUC. Reverting changes.
Training on augumented user 11805 34/50 current_auc = 0.4880952380952381
User 11805 AUC after training: 0.4880952380952381
User 11805 does not improve AUC. Reverting changes.
Training on augumented user 120977 35/50 current_auc = 0.4880952380952381
User 120977 AUC after training: 0.4880952380952381
User 120977 does not improve AUC. Reverting changes.
Training on augumented user 102488 36/50 current_auc = 0.4880952380952381
User 102488 AUC after training: 0.4880952380952381
User 102488 does not improve AUC. Reverting changes.
Training on augumented user 30716 37/50 current_auc = 0.4880952380952381
User 30716 AUC after training: 0.4880952380952381
User 30716 does not improve AUC. Reverting changes.
Training on augumented user 115664 38/50 current_auc = 0.4880952380952381
User 115664 AUC after training: 0.4880952380952381
User 115664 does not improve AUC. Reverting changes.
Training on augumented user 11833 39/50 current_auc = 0.4880952380952381
User 11833 AUC after training: 0.4880952380952381
User 11833 does not improve AUC. Reverting changes.
Training on augumented user 8584 40/50 current_auc = 0.4880952380952381
User 8584 AUC after training: 0.4880952380952381
User 8584 does not improve AUC. Reverting changes.
Training on augumented user 107258 41/50 current_auc = 0.4880952380952381
User 107258 AUC after training: 0.4880952380952381
User 107258 does not improve AUC. Reverting changes.
Training on augumented user 138088 42/50 current_auc = 0.4880952380952381
User 138088 AUC after training: 0.4880952380952381
User 138088 does not improve AUC. Reverting changes.
Training on augumented user 42775 43/50 current_auc = 0.4880952380952381
User 42775 AUC after training: 0.4880952380952381
User 42775 does not improve AUC. Reverting changes.
Training on augumented user 25273 44/50 current_auc = 0.4880952380952381
User 25273 AUC after training: 0.4880952380952381
User 25273 does not improve AUC. Reverting changes.
Training on augumented user 133366 45/50 current_auc = 0.4880952380952381
User 133366 AUC after training: 0.4880952380952381
User 133366 does not improve AUC. Reverting changes.
Training on augumented user 60510 46/50 current_auc = 0.4880952380952381
User 60510 AUC after training: 0.4880952380952381
User 60510 does not improve AUC. Reverting changes.
Training on augumented user 90963 47/50 current_auc = 0.4880952380952381
User 90963 AUC after training: 0.4880952380952381
User 90963 does not improve AUC. Reverting changes.
Training on augumented user 722 48/50 current_auc = 0.4880952380952381
User 722 AUC after training: 0.4880952380952381
User 722 does not improve AUC. Reverting changes.
Training on augumented user 87706 49/50 current_auc = 0.4880952380952381
User 87706 AUC after training: 0.4880952380952381
User 87706 does not improve AUC. Reverting changes.
[2024-12-02 18:06:58.237851] start test user 110669 54/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:06:58.789583] start test user 110669 54/567 recall augumented users by random, augumented_users = [15849, 32002, 1797, 67094, 78221, 101735, 103333, 67679, 54037, 21132, 94295, 43809, 85718, 34700, 41270, 72045, 82183, 77821, 51629, 34805, 132128, 100898, 136629, 101495, 19506, 83860, 3794, 134914, 22597, 46679, 133571, 35026, 115755, 10129, 104999, 99358, 134588, 38466, 49269, 84962, 51318, 24622, 109216, 105244, 86564, 134663, 57393, 16504, 68923, 1039]
[2024-12-02 18:06:58.805202] user = 110669 Cloud 54/567
[2024-12-02 18:06:58.825127] user = 110669 Local 54/567
[2024-12-02 18:06:58.863733] user = 110669 Local+ 54/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:07:01.236316] user = 110669 MPDA- 54/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6026530612244898
Training on augumented user 15849 0/50 current_auc = 0.6026530612244898
User 15849 AUC after training: 0.6017346938775511
User 15849 does not improve AUC. Reverting changes.
Training on augumented user 32002 1/50 current_auc = 0.6026530612244898
User 32002 AUC after training: 0.6023469387755103
User 32002 does not improve AUC. Reverting changes.
Training on augumented user 1797 2/50 current_auc = 0.6026530612244898
User 1797 AUC after training: 0.6021428571428572
User 1797 does not improve AUC. Reverting changes.
Training on augumented user 67094 3/50 current_auc = 0.6026530612244898
User 67094 AUC after training: 0.601938775510204
User 67094 does not improve AUC. Reverting changes.
Training on augumented user 78221 4/50 current_auc = 0.6026530612244898
User 78221 AUC after training: 0.6020408163265306
User 78221 does not improve AUC. Reverting changes.
Training on augumented user 101735 5/50 current_auc = 0.6026530612244898
User 101735 AUC after training: 0.6027551020408164
User 101735 improves AUC. Keeping the model.
Training on augumented user 103333 6/50 current_auc = 0.6027551020408164
User 103333 AUC after training: 0.6023469387755102
User 103333 does not improve AUC. Reverting changes.
Training on augumented user 67679 7/50 current_auc = 0.6027551020408164
User 67679 AUC after training: 0.6027551020408163
User 67679 does not improve AUC. Reverting changes.
Training on augumented user 54037 8/50 current_auc = 0.6027551020408164
User 54037 AUC after training: 0.6025510204081633
User 54037 does not improve AUC. Reverting changes.
Training on augumented user 21132 9/50 current_auc = 0.6027551020408164
User 21132 AUC after training: 0.6018367346938776
User 21132 does not improve AUC. Reverting changes.
Training on augumented user 94295 10/50 current_auc = 0.6027551020408164
User 94295 AUC after training: 0.6023469387755103
User 94295 does not improve AUC. Reverting changes.
Training on augumented user 43809 11/50 current_auc = 0.6027551020408164
User 43809 AUC after training: 0.6025510204081633
User 43809 does not improve AUC. Reverting changes.
Training on augumented user 85718 12/50 current_auc = 0.6027551020408164
User 85718 AUC after training: 0.6021428571428572
User 85718 does not improve AUC. Reverting changes.
Training on augumented user 34700 13/50 current_auc = 0.6027551020408164
User 34700 AUC after training: 0.6034183673469388
User 34700 improves AUC. Keeping the model.
Training on augumented user 41270 14/50 current_auc = 0.6034183673469388
User 41270 AUC after training: 0.6031632653061224
User 41270 does not improve AUC. Reverting changes.
Training on augumented user 72045 15/50 current_auc = 0.6034183673469388
User 72045 AUC after training: 0.6033163265306123
User 72045 does not improve AUC. Reverting changes.
Training on augumented user 82183 16/50 current_auc = 0.6034183673469388
User 82183 AUC after training: 0.6028571428571429
User 82183 does not improve AUC. Reverting changes.
Training on augumented user 77821 17/50 current_auc = 0.6034183673469388
User 77821 AUC after training: 0.6035204081632654
User 77821 improves AUC. Keeping the model.
Training on augumented user 51629 18/50 current_auc = 0.6035204081632654
User 51629 AUC after training: 0.6029081632653062
User 51629 does not improve AUC. Reverting changes.
Training on augumented user 34805 19/50 current_auc = 0.6035204081632654
User 34805 AUC after training: 0.6029591836734695
User 34805 does not improve AUC. Reverting changes.
Training on augumented user 132128 20/50 current_auc = 0.6035204081632654
User 132128 AUC after training: 0.603265306122449
User 132128 does not improve AUC. Reverting changes.
Training on augumented user 100898 21/50 current_auc = 0.6035204081632654
User 100898 AUC after training: 0.6035204081632654
User 100898 does not improve AUC. Reverting changes.
Training on augumented user 136629 22/50 current_auc = 0.6035204081632654
User 136629 AUC after training: 0.6043877551020408
User 136629 improves AUC. Keeping the model.
Training on augumented user 101495 23/50 current_auc = 0.6043877551020408
User 101495 AUC after training: 0.6034693877551021
User 101495 does not improve AUC. Reverting changes.
Training on augumented user 19506 24/50 current_auc = 0.6043877551020408
User 19506 AUC after training: 0.603265306122449
User 19506 does not improve AUC. Reverting changes.
Training on augumented user 83860 25/50 current_auc = 0.6043877551020408
User 83860 AUC after training: 0.6036734693877551
User 83860 does not improve AUC. Reverting changes.
Training on augumented user 3794 26/50 current_auc = 0.6043877551020408
User 3794 AUC after training: 0.6037755102040816
User 3794 does not improve AUC. Reverting changes.
Training on augumented user 134914 27/50 current_auc = 0.6043877551020408
User 134914 AUC after training: 0.6040816326530611
User 134914 does not improve AUC. Reverting changes.
Training on augumented user 22597 28/50 current_auc = 0.6043877551020408
User 22597 AUC after training: 0.6040816326530611
User 22597 does not improve AUC. Reverting changes.
Training on augumented user 46679 29/50 current_auc = 0.6043877551020408
User 46679 AUC after training: 0.6032142857142858
User 46679 does not improve AUC. Reverting changes.
Training on augumented user 133571 30/50 current_auc = 0.6043877551020408
User 133571 AUC after training: 0.6044897959183673
User 133571 improves AUC. Keeping the model.
Training on augumented user 35026 31/50 current_auc = 0.6044897959183673
User 35026 AUC after training: 0.6041836734693878
User 35026 does not improve AUC. Reverting changes.
Training on augumented user 115755 32/50 current_auc = 0.6044897959183673
User 115755 AUC after training: 0.6041836734693877
User 115755 does not improve AUC. Reverting changes.
Training on augumented user 10129 33/50 current_auc = 0.6044897959183673
User 10129 AUC after training: 0.6030612244897959
User 10129 does not improve AUC. Reverting changes.
Training on augumented user 104999 34/50 current_auc = 0.6044897959183673
User 104999 AUC after training: 0.6041836734693877
User 104999 does not improve AUC. Reverting changes.
Training on augumented user 99358 35/50 current_auc = 0.6044897959183673
User 99358 AUC after training: 0.6032142857142857
User 99358 does not improve AUC. Reverting changes.
Training on augumented user 134588 36/50 current_auc = 0.6044897959183673
User 134588 AUC after training: 0.6041836734693877
User 134588 does not improve AUC. Reverting changes.
Training on augumented user 38466 37/50 current_auc = 0.6044897959183673
User 38466 AUC after training: 0.6040306122448981
User 38466 does not improve AUC. Reverting changes.
Training on augumented user 49269 38/50 current_auc = 0.6044897959183673
User 49269 AUC after training: 0.6045918367346939
User 49269 improves AUC. Keeping the model.
Training on augumented user 84962 39/50 current_auc = 0.6045918367346939
User 84962 AUC after training: 0.6038265306122449
User 84962 does not improve AUC. Reverting changes.
Training on augumented user 51318 40/50 current_auc = 0.6045918367346939
User 51318 AUC after training: 0.6041836734693877
User 51318 does not improve AUC. Reverting changes.
Training on augumented user 24622 41/50 current_auc = 0.6045918367346939
User 24622 AUC after training: 0.6041836734693877
User 24622 does not improve AUC. Reverting changes.
Training on augumented user 109216 42/50 current_auc = 0.6045918367346939
User 109216 AUC after training: 0.6045408163265307
User 109216 does not improve AUC. Reverting changes.
Training on augumented user 105244 43/50 current_auc = 0.6045918367346939
User 105244 AUC after training: 0.6041326530612245
User 105244 does not improve AUC. Reverting changes.
Training on augumented user 86564 44/50 current_auc = 0.6045918367346939
User 86564 AUC after training: 0.6039795918367347
User 86564 does not improve AUC. Reverting changes.
Training on augumented user 134663 45/50 current_auc = 0.6045918367346939
User 134663 AUC after training: 0.6041326530612244
User 134663 does not improve AUC. Reverting changes.
Training on augumented user 57393 46/50 current_auc = 0.6045918367346939
User 57393 AUC after training: 0.6048469387755102
User 57393 improves AUC. Keeping the model.
Training on augumented user 16504 47/50 current_auc = 0.6048469387755102
User 16504 AUC after training: 0.6043367346938776
User 16504 does not improve AUC. Reverting changes.
Training on augumented user 68923 48/50 current_auc = 0.6048469387755102
User 68923 AUC after training: 0.6049489795918368
User 68923 improves AUC. Keeping the model.
Training on augumented user 1039 49/50 current_auc = 0.6049489795918368
User 1039 AUC after training: 0.6050510204081633
User 1039 improves AUC. Keeping the model.
[2024-12-02 18:07:30.442377] start test user 110681 55/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:07:30.883203] start test user 110681 55/567 recall augumented users by random, augumented_users = [74356, 11274, 67463, 76599, 48, 48641, 103748, 23799, 96475, 99116, 120292, 80710, 100413, 42440, 53574, 43979, 96220, 130122, 116278, 83648, 96056, 28877, 121448, 46523, 71214, 124611, 13256, 97243, 100506, 60376, 2964, 52895, 91754, 138093, 56757, 3558, 66054, 61595, 128251, 122975, 95212, 26868, 101051, 121225, 54685, 113762, 121057, 14019, 22378, 90468]
[2024-12-02 18:07:30.897673] user = 110681 Cloud 55/567
[2024-12-02 18:07:30.906459] user = 110681 Local 55/567
[2024-12-02 18:07:30.938666] user = 110681 Local+ 55/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:07:33.104710] user = 110681 MPDA- 55/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.0
Training on augumented user 74356 0/50 current_auc = 0.0
User 74356 AUC after training: 0.0
User 74356 does not improve AUC. Reverting changes.
Training on augumented user 11274 1/50 current_auc = 0.0
User 11274 AUC after training: 0.0
User 11274 does not improve AUC. Reverting changes.
Training on augumented user 67463 2/50 current_auc = 0.0
User 67463 AUC after training: 0.0
User 67463 does not improve AUC. Reverting changes.
Training on augumented user 76599 3/50 current_auc = 0.0
User 76599 AUC after training: 0.0
User 76599 does not improve AUC. Reverting changes.
Training on augumented user 48 4/50 current_auc = 0.0
User 48 AUC after training: 0.0
User 48 does not improve AUC. Reverting changes.
Training on augumented user 48641 5/50 current_auc = 0.0
User 48641 AUC after training: 0.0
User 48641 does not improve AUC. Reverting changes.
Training on augumented user 103748 6/50 current_auc = 0.0
User 103748 AUC after training: 0.0
User 103748 does not improve AUC. Reverting changes.
Training on augumented user 23799 7/50 current_auc = 0.0
User 23799 AUC after training: 0.0
User 23799 does not improve AUC. Reverting changes.
Training on augumented user 96475 8/50 current_auc = 0.0
User 96475 AUC after training: 0.0
User 96475 does not improve AUC. Reverting changes.
Training on augumented user 99116 9/50 current_auc = 0.0
User 99116 AUC after training: 0.0
User 99116 does not improve AUC. Reverting changes.
Training on augumented user 120292 10/50 current_auc = 0.0
User 120292 AUC after training: 0.0
User 120292 does not improve AUC. Reverting changes.
Training on augumented user 80710 11/50 current_auc = 0.0
User 80710 AUC after training: 0.0
User 80710 does not improve AUC. Reverting changes.
Training on augumented user 100413 12/50 current_auc = 0.0
User 100413 AUC after training: 0.0
User 100413 does not improve AUC. Reverting changes.
Training on augumented user 42440 13/50 current_auc = 0.0
User 42440 AUC after training: 0.0
User 42440 does not improve AUC. Reverting changes.
Training on augumented user 53574 14/50 current_auc = 0.0
User 53574 AUC after training: 0.0
User 53574 does not improve AUC. Reverting changes.
Training on augumented user 43979 15/50 current_auc = 0.0
User 43979 AUC after training: 0.0
User 43979 does not improve AUC. Reverting changes.
Training on augumented user 96220 16/50 current_auc = 0.0
User 96220 AUC after training: 0.0
User 96220 does not improve AUC. Reverting changes.
Training on augumented user 130122 17/50 current_auc = 0.0
User 130122 AUC after training: 0.0
User 130122 does not improve AUC. Reverting changes.
Training on augumented user 116278 18/50 current_auc = 0.0
User 116278 AUC after training: 0.0
User 116278 does not improve AUC. Reverting changes.
Training on augumented user 83648 19/50 current_auc = 0.0
User 83648 AUC after training: 0.0
User 83648 does not improve AUC. Reverting changes.
Training on augumented user 96056 20/50 current_auc = 0.0
User 96056 AUC after training: 0.0
User 96056 does not improve AUC. Reverting changes.
Training on augumented user 28877 21/50 current_auc = 0.0
User 28877 AUC after training: 0.0
User 28877 does not improve AUC. Reverting changes.
Training on augumented user 121448 22/50 current_auc = 0.0
User 121448 AUC after training: 0.0
User 121448 does not improve AUC. Reverting changes.
Training on augumented user 46523 23/50 current_auc = 0.0
User 46523 AUC after training: 0.0
User 46523 does not improve AUC. Reverting changes.
Training on augumented user 71214 24/50 current_auc = 0.0
User 71214 AUC after training: 0.0
User 71214 does not improve AUC. Reverting changes.
Training on augumented user 124611 25/50 current_auc = 0.0
User 124611 AUC after training: 0.0
User 124611 does not improve AUC. Reverting changes.
Training on augumented user 13256 26/50 current_auc = 0.0
User 13256 AUC after training: 0.0
User 13256 does not improve AUC. Reverting changes.
Training on augumented user 97243 27/50 current_auc = 0.0
User 97243 AUC after training: 0.0
User 97243 does not improve AUC. Reverting changes.
Training on augumented user 100506 28/50 current_auc = 0.0
User 100506 AUC after training: 0.0
User 100506 does not improve AUC. Reverting changes.
Training on augumented user 60376 29/50 current_auc = 0.0
User 60376 AUC after training: 0.0
User 60376 does not improve AUC. Reverting changes.
Training on augumented user 2964 30/50 current_auc = 0.0
User 2964 AUC after training: 0.0
User 2964 does not improve AUC. Reverting changes.
Training on augumented user 52895 31/50 current_auc = 0.0
User 52895 AUC after training: 0.0
User 52895 does not improve AUC. Reverting changes.
Training on augumented user 91754 32/50 current_auc = 0.0
User 91754 AUC after training: 0.0
User 91754 does not improve AUC. Reverting changes.
Training on augumented user 138093 33/50 current_auc = 0.0
User 138093 AUC after training: 0.0
User 138093 does not improve AUC. Reverting changes.
Training on augumented user 56757 34/50 current_auc = 0.0
User 56757 AUC after training: 0.0
User 56757 does not improve AUC. Reverting changes.
Training on augumented user 3558 35/50 current_auc = 0.0
User 3558 AUC after training: 0.0
User 3558 does not improve AUC. Reverting changes.
Training on augumented user 66054 36/50 current_auc = 0.0
User 66054 AUC after training: 0.0
User 66054 does not improve AUC. Reverting changes.
Training on augumented user 61595 37/50 current_auc = 0.0
User 61595 AUC after training: 0.0
User 61595 does not improve AUC. Reverting changes.
Training on augumented user 128251 38/50 current_auc = 0.0
User 128251 AUC after training: 0.0
User 128251 does not improve AUC. Reverting changes.
Training on augumented user 122975 39/50 current_auc = 0.0
User 122975 AUC after training: 0.0
User 122975 does not improve AUC. Reverting changes.
Training on augumented user 95212 40/50 current_auc = 0.0
User 95212 AUC after training: 0.0
User 95212 does not improve AUC. Reverting changes.
Training on augumented user 26868 41/50 current_auc = 0.0
User 26868 AUC after training: 0.0
User 26868 does not improve AUC. Reverting changes.
Training on augumented user 101051 42/50 current_auc = 0.0
User 101051 AUC after training: 0.0
User 101051 does not improve AUC. Reverting changes.
Training on augumented user 121225 43/50 current_auc = 0.0
User 121225 AUC after training: 0.0
User 121225 does not improve AUC. Reverting changes.
Training on augumented user 54685 44/50 current_auc = 0.0
User 54685 AUC after training: 0.0
User 54685 does not improve AUC. Reverting changes.
Training on augumented user 113762 45/50 current_auc = 0.0
User 113762 AUC after training: 0.0
User 113762 does not improve AUC. Reverting changes.
Training on augumented user 121057 46/50 current_auc = 0.0
User 121057 AUC after training: 0.0
User 121057 does not improve AUC. Reverting changes.
Training on augumented user 14019 47/50 current_auc = 0.0
User 14019 AUC after training: 0.0
User 14019 does not improve AUC. Reverting changes.
Training on augumented user 22378 48/50 current_auc = 0.0
User 22378 AUC after training: 0.0
User 22378 does not improve AUC. Reverting changes.
Training on augumented user 90468 49/50 current_auc = 0.0
User 90468 AUC after training: 0.0
User 90468 does not improve AUC. Reverting changes.
[2024-12-02 18:07:54.415056] start test user 110696 56/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:07:54.669157] start test user 110696 56/567 recall augumented users by random, augumented_users = [124043, 35160, 105649, 124191, 24695, 32581, 79354, 103788, 63955, 85396, 35388, 66960, 103589, 26405, 107590, 137814, 50519, 36650, 85122, 71832, 68697, 2700, 103932, 14747, 128435, 30910, 6740, 99958, 89826, 33859, 20603, 62275, 79787, 60233, 86815, 80252, 100397, 91743, 86486, 34738, 5623, 29547, 66248, 1337, 13840, 108472, 103541, 51832, 52434, 103285]
[2024-12-02 18:07:54.677689] user = 110696 Cloud 56/567
[2024-12-02 18:07:54.684302] user = 110696 Local 56/567
[2024-12-02 18:07:54.701076] user = 110696 Local+ 56/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:07:55.471167] user = 110696 MPDA- 56/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6856060606060606
Training on augumented user 124043 0/50 current_auc = 0.6856060606060606
User 124043 AUC after training: 0.6856060606060606
User 124043 does not improve AUC. Reverting changes.
Training on augumented user 35160 1/50 current_auc = 0.6856060606060606
User 35160 AUC after training: 0.6856060606060606
User 35160 does not improve AUC. Reverting changes.
Training on augumented user 105649 2/50 current_auc = 0.6856060606060606
User 105649 AUC after training: 0.6856060606060606
User 105649 does not improve AUC. Reverting changes.
Training on augumented user 124191 3/50 current_auc = 0.6856060606060606
User 124191 AUC after training: 0.6856060606060606
User 124191 does not improve AUC. Reverting changes.
Training on augumented user 24695 4/50 current_auc = 0.6856060606060606
User 24695 AUC after training: 0.6856060606060606
User 24695 does not improve AUC. Reverting changes.
Training on augumented user 32581 5/50 current_auc = 0.6856060606060606
User 32581 AUC after training: 0.6893939393939393
User 32581 improves AUC. Keeping the model.
Training on augumented user 79354 6/50 current_auc = 0.6893939393939393
User 79354 AUC after training: 0.6893939393939393
User 79354 does not improve AUC. Reverting changes.
Training on augumented user 103788 7/50 current_auc = 0.6893939393939393
User 103788 AUC after training: 0.6856060606060606
User 103788 does not improve AUC. Reverting changes.
Training on augumented user 63955 8/50 current_auc = 0.6893939393939393
User 63955 AUC after training: 0.6893939393939393
User 63955 does not improve AUC. Reverting changes.
Training on augumented user 85396 9/50 current_auc = 0.6893939393939393
User 85396 AUC after training: 0.6893939393939393
User 85396 does not improve AUC. Reverting changes.
Training on augumented user 35388 10/50 current_auc = 0.6893939393939393
User 35388 AUC after training: 0.6856060606060606
User 35388 does not improve AUC. Reverting changes.
Training on augumented user 66960 11/50 current_auc = 0.6893939393939393
User 66960 AUC after training: 0.6856060606060606
User 66960 does not improve AUC. Reverting changes.
Training on augumented user 103589 12/50 current_auc = 0.6893939393939393
User 103589 AUC after training: 0.6856060606060606
User 103589 does not improve AUC. Reverting changes.
Training on augumented user 26405 13/50 current_auc = 0.6893939393939393
User 26405 AUC after training: 0.6856060606060606
User 26405 does not improve AUC. Reverting changes.
Training on augumented user 107590 14/50 current_auc = 0.6893939393939393
User 107590 AUC after training: 0.6893939393939393
User 107590 does not improve AUC. Reverting changes.
Training on augumented user 137814 15/50 current_auc = 0.6893939393939393
User 137814 AUC after training: 0.6893939393939393
User 137814 does not improve AUC. Reverting changes.
Training on augumented user 50519 16/50 current_auc = 0.6893939393939393
User 50519 AUC after training: 0.6856060606060606
User 50519 does not improve AUC. Reverting changes.
Training on augumented user 36650 17/50 current_auc = 0.6893939393939393
User 36650 AUC after training: 0.6893939393939393
User 36650 does not improve AUC. Reverting changes.
Training on augumented user 85122 18/50 current_auc = 0.6893939393939393
User 85122 AUC after training: 0.6856060606060606
User 85122 does not improve AUC. Reverting changes.
Training on augumented user 71832 19/50 current_auc = 0.6893939393939393
User 71832 AUC after training: 0.6856060606060606
User 71832 does not improve AUC. Reverting changes.
Training on augumented user 68697 20/50 current_auc = 0.6893939393939393
User 68697 AUC after training: 0.6856060606060606
User 68697 does not improve AUC. Reverting changes.
Training on augumented user 2700 21/50 current_auc = 0.6893939393939393
User 2700 AUC after training: 0.6893939393939393
User 2700 does not improve AUC. Reverting changes.
Training on augumented user 103932 22/50 current_auc = 0.6893939393939393
User 103932 AUC after training: 0.6856060606060606
User 103932 does not improve AUC. Reverting changes.
Training on augumented user 14747 23/50 current_auc = 0.6893939393939393
User 14747 AUC after training: 0.6893939393939393
User 14747 does not improve AUC. Reverting changes.
Training on augumented user 128435 24/50 current_auc = 0.6893939393939393
User 128435 AUC after training: 0.6893939393939393
User 128435 does not improve AUC. Reverting changes.
Training on augumented user 30910 25/50 current_auc = 0.6893939393939393
User 30910 AUC after training: 0.6856060606060606
User 30910 does not improve AUC. Reverting changes.
Training on augumented user 6740 26/50 current_auc = 0.6893939393939393
User 6740 AUC after training: 0.6893939393939393
User 6740 does not improve AUC. Reverting changes.
Training on augumented user 99958 27/50 current_auc = 0.6893939393939393
User 99958 AUC after training: 0.6856060606060606
User 99958 does not improve AUC. Reverting changes.
Training on augumented user 89826 28/50 current_auc = 0.6893939393939393
User 89826 AUC after training: 0.6856060606060606
User 89826 does not improve AUC. Reverting changes.
Training on augumented user 33859 29/50 current_auc = 0.6893939393939393
User 33859 AUC after training: 0.6893939393939393
User 33859 does not improve AUC. Reverting changes.
Training on augumented user 20603 30/50 current_auc = 0.6893939393939393
User 20603 AUC after training: 0.6893939393939393
User 20603 does not improve AUC. Reverting changes.
Training on augumented user 62275 31/50 current_auc = 0.6893939393939393
User 62275 AUC after training: 0.6856060606060606
User 62275 does not improve AUC. Reverting changes.
Training on augumented user 79787 32/50 current_auc = 0.6893939393939393
User 79787 AUC after training: 0.6893939393939393
User 79787 does not improve AUC. Reverting changes.
Training on augumented user 60233 33/50 current_auc = 0.6893939393939393
User 60233 AUC after training: 0.6856060606060606
User 60233 does not improve AUC. Reverting changes.
Training on augumented user 86815 34/50 current_auc = 0.6893939393939393
User 86815 AUC after training: 0.6856060606060606
User 86815 does not improve AUC. Reverting changes.
Training on augumented user 80252 35/50 current_auc = 0.6893939393939393
User 80252 AUC after training: 0.6856060606060606
User 80252 does not improve AUC. Reverting changes.
Training on augumented user 100397 36/50 current_auc = 0.6893939393939393
User 100397 AUC after training: 0.6856060606060606
User 100397 does not improve AUC. Reverting changes.
Training on augumented user 91743 37/50 current_auc = 0.6893939393939393
User 91743 AUC after training: 0.6893939393939393
User 91743 does not improve AUC. Reverting changes.
Training on augumented user 86486 38/50 current_auc = 0.6893939393939393
User 86486 AUC after training: 0.6893939393939393
User 86486 does not improve AUC. Reverting changes.
Training on augumented user 34738 39/50 current_auc = 0.6893939393939393
User 34738 AUC after training: 0.6856060606060606
User 34738 does not improve AUC. Reverting changes.
Training on augumented user 5623 40/50 current_auc = 0.6893939393939393
User 5623 AUC after training: 0.6893939393939393
User 5623 does not improve AUC. Reverting changes.
Training on augumented user 29547 41/50 current_auc = 0.6893939393939393
User 29547 AUC after training: 0.6856060606060606
User 29547 does not improve AUC. Reverting changes.
Training on augumented user 66248 42/50 current_auc = 0.6893939393939393
User 66248 AUC after training: 0.6856060606060606
User 66248 does not improve AUC. Reverting changes.
Training on augumented user 1337 43/50 current_auc = 0.6893939393939393
User 1337 AUC after training: 0.6893939393939393
User 1337 does not improve AUC. Reverting changes.
Training on augumented user 13840 44/50 current_auc = 0.6893939393939393
User 13840 AUC after training: 0.6893939393939393
User 13840 does not improve AUC. Reverting changes.
Training on augumented user 108472 45/50 current_auc = 0.6893939393939393
User 108472 AUC after training: 0.6893939393939393
User 108472 does not improve AUC. Reverting changes.
Training on augumented user 103541 46/50 current_auc = 0.6893939393939393
User 103541 AUC after training: 0.6856060606060606
User 103541 does not improve AUC. Reverting changes.
Training on augumented user 51832 47/50 current_auc = 0.6893939393939393
User 51832 AUC after training: 0.6893939393939393
User 51832 does not improve AUC. Reverting changes.
Training on augumented user 52434 48/50 current_auc = 0.6893939393939393
User 52434 AUC after training: 0.6893939393939393
User 52434 does not improve AUC. Reverting changes.
Training on augumented user 103285 49/50 current_auc = 0.6893939393939393
User 103285 AUC after training: 0.6893939393939393
User 103285 does not improve AUC. Reverting changes.
[2024-12-02 18:08:18.523910] start test user 110706 57/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:08:19.194348] start test user 110706 57/567 recall augumented users by random, augumented_users = [106344, 22118, 72190, 29268, 61280, 96367, 112458, 6919, 107160, 67551, 2648, 17193, 40246, 34572, 122540, 13555, 101263, 110847, 119064, 83978, 69902, 89454, 136376, 14180, 47685, 120789, 1465, 28808, 22831, 8208, 53781, 29912, 75793, 66678, 42743, 5790, 34712, 55818, 117556, 132899, 105495, 58103, 120419, 77892, 105896, 137032, 30744, 44003, 75883, 114098]
[2024-12-02 18:08:19.216285] user = 110706 Cloud 57/567
[2024-12-02 18:08:19.280045] user = 110706 Local 57/567
[2024-12-02 18:08:19.658754] user = 110706 Local+ 57/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:08:22.593258] user = 110706 MPDA- 57/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7134683305862962
Training on augumented user 106344 0/50 current_auc = 0.7134683305862962
User 106344 AUC after training: 0.713327054391335
User 106344 does not improve AUC. Reverting changes.
Training on augumented user 22118 1/50 current_auc = 0.7134683305862962
User 22118 AUC after training: 0.7129738639039321
User 22118 does not improve AUC. Reverting changes.
Training on augumented user 72190 2/50 current_auc = 0.7134683305862962
User 72190 AUC after training: 0.7132799623263479
User 72190 does not improve AUC. Reverting changes.
Training on augumented user 29268 3/50 current_auc = 0.7134683305862962
User 29268 AUC after training: 0.7133741464563221
User 29268 does not improve AUC. Reverting changes.
Training on augumented user 61280 4/50 current_auc = 0.7134683305862962
User 61280 AUC after training: 0.7129032258064517
User 61280 does not improve AUC. Reverting changes.
Training on augumented user 96367 5/50 current_auc = 0.7134683305862962
User 96367 AUC after training: 0.7133741464563221
User 96367 does not improve AUC. Reverting changes.
Training on augumented user 112458 6/50 current_auc = 0.7134683305862962
User 112458 AUC after training: 0.7132093242288674
User 112458 does not improve AUC. Reverting changes.
Training on augumented user 6919 7/50 current_auc = 0.7134683305862962
User 6919 AUC after training: 0.7136802448787379
User 6919 improves AUC. Keeping the model.
Training on augumented user 107160 8/50 current_auc = 0.7136802448787379
User 107160 AUC after training: 0.7136802448787378
User 107160 does not improve AUC. Reverting changes.
Training on augumented user 67551 9/50 current_auc = 0.7136802448787379
User 67551 AUC after training: 0.714174711561102
User 67551 improves AUC. Keeping the model.
Training on augumented user 2648 10/50 current_auc = 0.714174711561102
User 2648 AUC after training: 0.7139627972686602
User 2648 does not improve AUC. Reverting changes.
Training on augumented user 17193 11/50 current_auc = 0.714174711561102
User 17193 AUC after training: 0.7143159877560631
User 17193 improves AUC. Keeping the model.
Training on augumented user 40246 12/50 current_auc = 0.7143159877560631
User 40246 AUC after training: 0.7139863433011537
User 40246 does not improve AUC. Reverting changes.
Training on augumented user 34572 13/50 current_auc = 0.7143159877560631
User 34572 AUC after training: 0.7139863433011537
User 34572 does not improve AUC. Reverting changes.
Training on augumented user 122540 14/50 current_auc = 0.7143159877560631
User 122540 AUC after training: 0.7138686131386861
User 122540 does not improve AUC. Reverting changes.
Training on augumented user 13555 15/50 current_auc = 0.7143159877560631
User 13555 AUC after training: 0.7141747115611019
User 13555 does not improve AUC. Reverting changes.
Training on augumented user 101263 16/50 current_auc = 0.7143159877560631
User 101263 AUC after training: 0.7141276194961149
User 101263 does not improve AUC. Reverting changes.
Training on augumented user 110847 17/50 current_auc = 0.7143159877560631
User 110847 AUC after training: 0.7152813750882976
User 110847 improves AUC. Keeping the model.
Training on augumented user 119064 18/50 current_auc = 0.7152813750882976
User 119064 AUC after training: 0.7149517306333883
User 119064 does not improve AUC. Reverting changes.
Training on augumented user 83978 19/50 current_auc = 0.7152813750882976
User 83978 AUC after training: 0.7152107369908169
User 83978 does not improve AUC. Reverting changes.
Training on augumented user 69902 20/50 current_auc = 0.7152813750882976
User 69902 AUC after training: 0.7150694607958559
User 69902 does not improve AUC. Reverting changes.
Training on augumented user 89454 21/50 current_auc = 0.7152813750882976
User 89454 AUC after training: 0.7155403814457264
User 89454 improves AUC. Keeping the model.
Training on augumented user 136376 22/50 current_auc = 0.7155403814457264
User 136376 AUC after training: 0.7147398163409465
User 136376 does not improve AUC. Reverting changes.
Training on augumented user 14180 23/50 current_auc = 0.7155403814457264
User 14180 AUC after training: 0.7149281846008947
User 14180 does not improve AUC. Reverting changes.
Training on augumented user 47685 24/50 current_auc = 0.7155403814457264
User 47685 AUC after training: 0.7158935719331292
User 47685 improves AUC. Keeping the model.
Training on augumented user 120789 25/50 current_auc = 0.7158935719331292
User 120789 AUC after training: 0.7157052036731811
User 120789 does not improve AUC. Reverting changes.
Training on augumented user 1465 26/50 current_auc = 0.7158935719331292
User 1465 AUC after training: 0.7157758417706617
User 1465 does not improve AUC. Reverting changes.
Training on augumented user 28808 27/50 current_auc = 0.7158935719331292
User 28808 AUC after training: 0.7159877560631034
User 28808 improves AUC. Keeping the model.
Training on augumented user 22831 28/50 current_auc = 0.7159877560631034
User 22831 AUC after training: 0.7160819401930776
User 22831 improves AUC. Keeping the model.
Training on augumented user 8208 29/50 current_auc = 0.7160819401930776
User 8208 AUC after training: 0.7162938544855192
User 8208 improves AUC. Keeping the model.
Training on augumented user 53781 30/50 current_auc = 0.7162938544855192
User 53781 AUC after training: 0.7164586767129738
User 53781 improves AUC. Keeping the model.
Training on augumented user 29912 31/50 current_auc = 0.7164586767129738
User 29912 AUC after training: 0.7163644925829997
User 29912 does not improve AUC. Reverting changes.
Training on augumented user 75793 32/50 current_auc = 0.7164586767129738
User 75793 AUC after training: 0.716505768777961
User 75793 improves AUC. Keeping the model.
Training on augumented user 66678 33/50 current_auc = 0.716505768777961
User 66678 AUC after training: 0.7171415116552862
User 66678 improves AUC. Keeping the model.
Training on augumented user 42743 34/50 current_auc = 0.7171415116552862
User 42743 AUC after training: 0.7173298799152342
User 42743 improves AUC. Keeping the model.
Training on augumented user 5790 35/50 current_auc = 0.7173298799152342
User 5790 AUC after training: 0.7168825052978574
User 5790 does not improve AUC. Reverting changes.
Training on augumented user 34712 36/50 current_auc = 0.7173298799152342
User 34712 AUC after training: 0.7169766894278314
User 34712 does not improve AUC. Reverting changes.
Training on augumented user 55818 37/50 current_auc = 0.7173298799152342
User 55818 AUC after training: 0.7173769719802214
User 55818 improves AUC. Keeping the model.
Training on augumented user 117556 38/50 current_auc = 0.7173769719802214
User 117556 AUC after training: 0.7173534259477279
User 117556 does not improve AUC. Reverting changes.
Training on augumented user 132899 39/50 current_auc = 0.7173769719802214
User 132899 AUC after training: 0.7172356957852601
User 132899 does not improve AUC. Reverting changes.
Training on augumented user 105495 40/50 current_auc = 0.7173769719802214
User 105495 AUC after training: 0.7171415116552862
User 105495 does not improve AUC. Reverting changes.
Training on augumented user 58103 41/50 current_auc = 0.7173769719802214
User 58103 AUC after training: 0.7170944195902991
User 58103 does not improve AUC. Reverting changes.
Training on augumented user 120419 42/50 current_auc = 0.7173769719802214
User 120419 AUC after training: 0.7174476100777019
User 120419 improves AUC. Keeping the model.
Training on augumented user 77892 43/50 current_auc = 0.7174476100777019
User 77892 AUC after training: 0.7173769719802213
User 77892 does not improve AUC. Reverting changes.
Training on augumented user 105896 44/50 current_auc = 0.7174476100777019
User 105896 AUC after training: 0.7174240640452084
User 105896 does not improve AUC. Reverting changes.
Training on augumented user 137032 45/50 current_auc = 0.7174476100777019
User 137032 AUC after training: 0.7178243465975983
User 137032 improves AUC. Keeping the model.
Training on augumented user 30744 46/50 current_auc = 0.7178243465975983
User 30744 AUC after training: 0.7184600894749235
User 30744 improves AUC. Keeping the model.
Training on augumented user 44003 47/50 current_auc = 0.7184600894749235
User 44003 AUC after training: 0.7183188132799624
User 44003 does not improve AUC. Reverting changes.
Training on augumented user 75883 48/50 current_auc = 0.7184600894749235
User 75883 AUC after training: 0.7184365434424299
User 75883 does not improve AUC. Reverting changes.
Training on augumented user 114098 49/50 current_auc = 0.7184600894749235
User 114098 AUC after training: 0.7185542736048977
User 114098 improves AUC. Keeping the model.
[2024-12-02 18:08:51.892102] start test user 110742 58/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:08:52.688855] start test user 110742 58/567 recall augumented users by random, augumented_users = [76560, 57498, 58768, 32644, 83502, 41405, 66221, 131791, 96416, 31711, 23498, 115771, 7284, 119339, 30674, 127475, 79931, 137899, 67190, 3440, 58, 110928, 28640, 18435, 76800, 63479, 115502, 70191, 82793, 87404, 100340, 132380, 90730, 91253, 131018, 121253, 104019, 97608, 73299, 62243, 45146, 33122, 72028, 121260, 91739, 88488, 41369, 3706, 65134, 103929]
[2024-12-02 18:08:52.704855] user = 110742 Cloud 58/567
[2024-12-02 18:08:52.746238] user = 110742 Local 58/567
[2024-12-02 18:08:52.790589] user = 110742 Local+ 58/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:08:55.576106] user = 110742 MPDA- 58/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.39999999999999997
Training on augumented user 76560 0/50 current_auc = 0.39999999999999997
User 76560 AUC after training: 0.39999999999999997
User 76560 does not improve AUC. Reverting changes.
Training on augumented user 57498 1/50 current_auc = 0.39999999999999997
User 57498 AUC after training: 0.39999999999999997
User 57498 does not improve AUC. Reverting changes.
Training on augumented user 58768 2/50 current_auc = 0.39999999999999997
User 58768 AUC after training: 0.39999999999999997
User 58768 does not improve AUC. Reverting changes.
Training on augumented user 32644 3/50 current_auc = 0.39999999999999997
User 32644 AUC after training: 0.39999999999999997
User 32644 does not improve AUC. Reverting changes.
Training on augumented user 83502 4/50 current_auc = 0.39999999999999997
User 83502 AUC after training: 0.39999999999999997
User 83502 does not improve AUC. Reverting changes.
Training on augumented user 41405 5/50 current_auc = 0.39999999999999997
User 41405 AUC after training: 0.39999999999999997
User 41405 does not improve AUC. Reverting changes.
Training on augumented user 66221 6/50 current_auc = 0.39999999999999997
User 66221 AUC after training: 0.39999999999999997
User 66221 does not improve AUC. Reverting changes.
Training on augumented user 131791 7/50 current_auc = 0.39999999999999997
User 131791 AUC after training: 0.39999999999999997
User 131791 does not improve AUC. Reverting changes.
Training on augumented user 96416 8/50 current_auc = 0.39999999999999997
User 96416 AUC after training: 0.39999999999999997
User 96416 does not improve AUC. Reverting changes.
Training on augumented user 31711 9/50 current_auc = 0.39999999999999997
User 31711 AUC after training: 0.39999999999999997
User 31711 does not improve AUC. Reverting changes.
Training on augumented user 23498 10/50 current_auc = 0.39999999999999997
User 23498 AUC after training: 0.39999999999999997
User 23498 does not improve AUC. Reverting changes.
Training on augumented user 115771 11/50 current_auc = 0.39999999999999997
User 115771 AUC after training: 0.39999999999999997
User 115771 does not improve AUC. Reverting changes.
Training on augumented user 7284 12/50 current_auc = 0.39999999999999997
User 7284 AUC after training: 0.39999999999999997
User 7284 does not improve AUC. Reverting changes.
Training on augumented user 119339 13/50 current_auc = 0.39999999999999997
User 119339 AUC after training: 0.39999999999999997
User 119339 does not improve AUC. Reverting changes.
Training on augumented user 30674 14/50 current_auc = 0.39999999999999997
User 30674 AUC after training: 0.39999999999999997
User 30674 does not improve AUC. Reverting changes.
Training on augumented user 127475 15/50 current_auc = 0.39999999999999997
User 127475 AUC after training: 0.39999999999999997
User 127475 does not improve AUC. Reverting changes.
Training on augumented user 79931 16/50 current_auc = 0.39999999999999997
User 79931 AUC after training: 0.39999999999999997
User 79931 does not improve AUC. Reverting changes.
Training on augumented user 137899 17/50 current_auc = 0.39999999999999997
User 137899 AUC after training: 0.39999999999999997
User 137899 does not improve AUC. Reverting changes.
Training on augumented user 67190 18/50 current_auc = 0.39999999999999997
User 67190 AUC after training: 0.39999999999999997
User 67190 does not improve AUC. Reverting changes.
Training on augumented user 3440 19/50 current_auc = 0.39999999999999997
User 3440 AUC after training: 0.39999999999999997
User 3440 does not improve AUC. Reverting changes.
Training on augumented user 58 20/50 current_auc = 0.39999999999999997
User 58 AUC after training: 0.39999999999999997
User 58 does not improve AUC. Reverting changes.
Training on augumented user 110928 21/50 current_auc = 0.39999999999999997
User 110928 AUC after training: 0.39999999999999997
User 110928 does not improve AUC. Reverting changes.
Training on augumented user 28640 22/50 current_auc = 0.39999999999999997
User 28640 AUC after training: 0.39999999999999997
User 28640 does not improve AUC. Reverting changes.
Training on augumented user 18435 23/50 current_auc = 0.39999999999999997
User 18435 AUC after training: 0.39999999999999997
User 18435 does not improve AUC. Reverting changes.
Training on augumented user 76800 24/50 current_auc = 0.39999999999999997
User 76800 AUC after training: 0.39999999999999997
User 76800 does not improve AUC. Reverting changes.
Training on augumented user 63479 25/50 current_auc = 0.39999999999999997
User 63479 AUC after training: 0.39999999999999997
User 63479 does not improve AUC. Reverting changes.
Training on augumented user 115502 26/50 current_auc = 0.39999999999999997
User 115502 AUC after training: 0.39999999999999997
User 115502 does not improve AUC. Reverting changes.
Training on augumented user 70191 27/50 current_auc = 0.39999999999999997
User 70191 AUC after training: 0.39999999999999997
User 70191 does not improve AUC. Reverting changes.
Training on augumented user 82793 28/50 current_auc = 0.39999999999999997
User 82793 AUC after training: 0.39999999999999997
User 82793 does not improve AUC. Reverting changes.
Training on augumented user 87404 29/50 current_auc = 0.39999999999999997
User 87404 AUC after training: 0.39999999999999997
User 87404 does not improve AUC. Reverting changes.
Training on augumented user 100340 30/50 current_auc = 0.39999999999999997
User 100340 AUC after training: 0.39999999999999997
User 100340 does not improve AUC. Reverting changes.
Training on augumented user 132380 31/50 current_auc = 0.39999999999999997
User 132380 AUC after training: 0.39999999999999997
User 132380 does not improve AUC. Reverting changes.
Training on augumented user 90730 32/50 current_auc = 0.39999999999999997
User 90730 AUC after training: 0.39999999999999997
User 90730 does not improve AUC. Reverting changes.
Training on augumented user 91253 33/50 current_auc = 0.39999999999999997
User 91253 AUC after training: 0.39999999999999997
User 91253 does not improve AUC. Reverting changes.
Training on augumented user 131018 34/50 current_auc = 0.39999999999999997
User 131018 AUC after training: 0.39999999999999997
User 131018 does not improve AUC. Reverting changes.
Training on augumented user 121253 35/50 current_auc = 0.39999999999999997
User 121253 AUC after training: 0.39999999999999997
User 121253 does not improve AUC. Reverting changes.
Training on augumented user 104019 36/50 current_auc = 0.39999999999999997
User 104019 AUC after training: 0.39999999999999997
User 104019 does not improve AUC. Reverting changes.
Training on augumented user 97608 37/50 current_auc = 0.39999999999999997
User 97608 AUC after training: 0.39999999999999997
User 97608 does not improve AUC. Reverting changes.
Training on augumented user 73299 38/50 current_auc = 0.39999999999999997
User 73299 AUC after training: 0.39999999999999997
User 73299 does not improve AUC. Reverting changes.
Training on augumented user 62243 39/50 current_auc = 0.39999999999999997
User 62243 AUC after training: 0.39999999999999997
User 62243 does not improve AUC. Reverting changes.
Training on augumented user 45146 40/50 current_auc = 0.39999999999999997
User 45146 AUC after training: 0.39999999999999997
User 45146 does not improve AUC. Reverting changes.
Training on augumented user 33122 41/50 current_auc = 0.39999999999999997
User 33122 AUC after training: 0.39999999999999997
User 33122 does not improve AUC. Reverting changes.
Training on augumented user 72028 42/50 current_auc = 0.39999999999999997
User 72028 AUC after training: 0.39999999999999997
User 72028 does not improve AUC. Reverting changes.
Training on augumented user 121260 43/50 current_auc = 0.39999999999999997
User 121260 AUC after training: 0.39999999999999997
User 121260 does not improve AUC. Reverting changes.
Training on augumented user 91739 44/50 current_auc = 0.39999999999999997
User 91739 AUC after training: 0.39999999999999997
User 91739 does not improve AUC. Reverting changes.
Training on augumented user 88488 45/50 current_auc = 0.39999999999999997
User 88488 AUC after training: 0.39999999999999997
User 88488 does not improve AUC. Reverting changes.
Training on augumented user 41369 46/50 current_auc = 0.39999999999999997
User 41369 AUC after training: 0.39999999999999997
User 41369 does not improve AUC. Reverting changes.
Training on augumented user 3706 47/50 current_auc = 0.39999999999999997
User 3706 AUC after training: 0.39999999999999997
User 3706 does not improve AUC. Reverting changes.
Training on augumented user 65134 48/50 current_auc = 0.39999999999999997
User 65134 AUC after training: 0.39999999999999997
User 65134 does not improve AUC. Reverting changes.
Training on augumented user 103929 49/50 current_auc = 0.39999999999999997
User 103929 AUC after training: 0.39999999999999997
User 103929 does not improve AUC. Reverting changes.
[2024-12-02 18:09:26.498236] start test user 110758 59/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:09:26.921800] start test user 110758 59/567 recall augumented users by random, augumented_users = [74960, 109284, 12507, 129991, 124900, 100184, 86448, 119960, 115059, 43231, 35845, 111277, 45669, 95444, 123341, 98696, 36032, 36395, 81528, 38169, 8448, 118656, 57588, 41012, 26798, 16070, 55006, 119349, 57416, 119496, 103520, 29532, 35564, 131853, 2352, 114484, 26603, 77191, 68406, 15484, 53486, 16576, 95873, 21525, 74137, 78246, 35799, 54754, 68608, 71096]
[2024-12-02 18:09:26.939688] user = 110758 Cloud 59/567
[2024-12-02 18:09:26.957647] user = 110758 Local 59/567
[2024-12-02 18:09:27.295251] user = 110758 Local+ 59/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:09:30.387378] user = 110758 MPDA- 59/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6388229710488846
Training on augumented user 74960 0/50 current_auc = 0.6388229710488846
User 74960 AUC after training: 0.6395348837209303
User 74960 improves AUC. Keeping the model.
Training on augumented user 109284 1/50 current_auc = 0.6395348837209303
User 109284 AUC after training: 0.6402467963929758
User 109284 improves AUC. Keeping the model.
Training on augumented user 12507 2/50 current_auc = 0.6402467963929758
User 12507 AUC after training: 0.6406027527289986
User 12507 improves AUC. Keeping the model.
Training on augumented user 129991 3/50 current_auc = 0.6406027527289986
User 129991 AUC after training: 0.639297579496915
User 129991 does not improve AUC. Reverting changes.
Training on augumented user 124900 4/50 current_auc = 0.6406027527289986
User 124900 AUC after training: 0.6407214048410061
User 124900 improves AUC. Keeping the model.
Training on augumented user 100184 5/50 current_auc = 0.6407214048410061
User 100184 AUC after training: 0.6413146654010442
User 100184 improves AUC. Keeping the model.
Training on augumented user 86448 6/50 current_auc = 0.6413146654010442
User 86448 AUC after training: 0.6403654485049834
User 86448 does not improve AUC. Reverting changes.
Training on augumented user 119960 7/50 current_auc = 0.6413146654010442
User 119960 AUC after training: 0.641077361177029
User 119960 does not improve AUC. Reverting changes.
Training on augumented user 115059 8/50 current_auc = 0.6413146654010442
User 115059 AUC after training: 0.6406027527289986
User 115059 does not improve AUC. Reverting changes.
Training on augumented user 43231 9/50 current_auc = 0.6413146654010442
User 43231 AUC after training: 0.6411960132890365
User 43231 does not improve AUC. Reverting changes.
Training on augumented user 35845 10/50 current_auc = 0.6413146654010442
User 35845 AUC after training: 0.6403654485049834
User 35845 does not improve AUC. Reverting changes.
Training on augumented user 111277 11/50 current_auc = 0.6413146654010442
User 111277 AUC after training: 0.641077361177029
User 111277 does not improve AUC. Reverting changes.
Training on augumented user 45669 12/50 current_auc = 0.6413146654010442
User 45669 AUC after training: 0.6395348837209303
User 45669 does not improve AUC. Reverting changes.
Training on augumented user 95444 13/50 current_auc = 0.6413146654010442
User 95444 AUC after training: 0.6406027527289986
User 95444 does not improve AUC. Reverting changes.
Training on augumented user 123341 14/50 current_auc = 0.6413146654010442
User 123341 AUC after training: 0.6415519696250593
User 123341 improves AUC. Keeping the model.
Training on augumented user 98696 15/50 current_auc = 0.6415519696250593
User 98696 AUC after training: 0.6375177978168012
User 98696 does not improve AUC. Reverting changes.
Training on augumented user 36032 16/50 current_auc = 0.6415519696250593
User 36032 AUC after training: 0.6414333175130518
User 36032 does not improve AUC. Reverting changes.
Training on augumented user 36395 17/50 current_auc = 0.6415519696250593
User 36395 AUC after training: 0.6422638822971048
User 36395 improves AUC. Keeping the model.
Training on augumented user 81528 18/50 current_auc = 0.6422638822971048
User 81528 AUC after training: 0.6396535358329378
User 81528 does not improve AUC. Reverting changes.
Training on augumented user 38169 19/50 current_auc = 0.6422638822971048
User 38169 AUC after training: 0.6421452301850973
User 38169 does not improve AUC. Reverting changes.
Training on augumented user 8448 20/50 current_auc = 0.6422638822971048
User 8448 AUC after training: 0.642263882297105
User 8448 improves AUC. Keeping the model.
Training on augumented user 118656 21/50 current_auc = 0.642263882297105
User 118656 AUC after training: 0.6422638822971048
User 118656 does not improve AUC. Reverting changes.
Training on augumented user 57588 22/50 current_auc = 0.642263882297105
User 57588 AUC after training: 0.6428571428571428
User 57588 improves AUC. Keeping the model.
Training on augumented user 41012 23/50 current_auc = 0.6428571428571428
User 41012 AUC after training: 0.6425011865211201
User 41012 does not improve AUC. Reverting changes.
Training on augumented user 26798 24/50 current_auc = 0.6428571428571428
User 26798 AUC after training: 0.6426198386331277
User 26798 does not improve AUC. Reverting changes.
Training on augumented user 16070 25/50 current_auc = 0.6428571428571428
User 16070 AUC after training: 0.643094447081158
User 16070 improves AUC. Keeping the model.
Training on augumented user 55006 26/50 current_auc = 0.643094447081158
User 55006 AUC after training: 0.6427384907451352
User 55006 does not improve AUC. Reverting changes.
Training on augumented user 119349 27/50 current_auc = 0.643094447081158
User 119349 AUC after training: 0.6430944470811581
User 119349 improves AUC. Keeping the model.
Training on augumented user 57416 28/50 current_auc = 0.6430944470811581
User 57416 AUC after training: 0.6432130991931657
User 57416 improves AUC. Keeping the model.
Training on augumented user 119496 29/50 current_auc = 0.6432130991931657
User 119496 AUC after training: 0.6435690555291884
User 119496 improves AUC. Keeping the model.
Training on augumented user 103520 30/50 current_auc = 0.6435690555291884
User 103520 AUC after training: 0.6435690555291884
User 103520 does not improve AUC. Reverting changes.
Training on augumented user 29532 31/50 current_auc = 0.6435690555291884
User 29532 AUC after training: 0.6440436639772188
User 29532 improves AUC. Keeping the model.
Training on augumented user 35564 32/50 current_auc = 0.6440436639772188
User 35564 AUC after training: 0.6435690555291884
User 35564 does not improve AUC. Reverting changes.
Training on augumented user 131853 33/50 current_auc = 0.6440436639772188
User 131853 AUC after training: 0.6438063597532035
User 131853 does not improve AUC. Reverting changes.
Training on augumented user 2352 34/50 current_auc = 0.6440436639772188
User 2352 AUC after training: 0.6434504034171808
User 2352 does not improve AUC. Reverting changes.
Training on augumented user 114484 35/50 current_auc = 0.6440436639772188
User 114484 AUC after training: 0.6434504034171808
User 114484 does not improve AUC. Reverting changes.
Training on augumented user 26603 36/50 current_auc = 0.6440436639772188
User 26603 AUC after training: 0.644280968201234
User 26603 improves AUC. Keeping the model.
Training on augumented user 77191 37/50 current_auc = 0.644280968201234
User 77191 AUC after training: 0.6428571428571428
User 77191 does not improve AUC. Reverting changes.
Training on augumented user 68406 38/50 current_auc = 0.644280968201234
User 68406 AUC after training: 0.6443996203132416
User 68406 improves AUC. Keeping the model.
Training on augumented user 15484 39/50 current_auc = 0.6443996203132416
User 15484 AUC after training: 0.6446369245372567
User 15484 improves AUC. Keeping the model.
Training on augumented user 53486 40/50 current_auc = 0.6446369245372567
User 53486 AUC after training: 0.6434504034171808
User 53486 does not improve AUC. Reverting changes.
Training on augumented user 16576 41/50 current_auc = 0.6446369245372567
User 16576 AUC after training: 0.6443996203132416
User 16576 does not improve AUC. Reverting changes.
Training on augumented user 95873 42/50 current_auc = 0.6446369245372567
User 95873 AUC after training: 0.6454674893213099
User 95873 improves AUC. Keeping the model.
Training on augumented user 21525 43/50 current_auc = 0.6454674893213099
User 21525 AUC after training: 0.6414333175130518
User 21525 does not improve AUC. Reverting changes.
Training on augumented user 74137 44/50 current_auc = 0.6454674893213099
User 74137 AUC after training: 0.6445182724252492
User 74137 does not improve AUC. Reverting changes.
Training on augumented user 78246 45/50 current_auc = 0.6454674893213099
User 78246 AUC after training: 0.6449928808732796
User 78246 does not improve AUC. Reverting changes.
Training on augumented user 35799 46/50 current_auc = 0.6454674893213099
User 35799 AUC after training: 0.6458234456573327
User 35799 improves AUC. Keeping the model.
Training on augumented user 54754 47/50 current_auc = 0.6458234456573327
User 54754 AUC after training: 0.6454674893213099
User 54754 does not improve AUC. Reverting changes.
Training on augumented user 68608 48/50 current_auc = 0.6458234456573327
User 68608 AUC after training: 0.6460607498813479
User 68608 improves AUC. Keeping the model.
Training on augumented user 71096 49/50 current_auc = 0.6460607498813479
User 71096 AUC after training: 0.6442809682012339
User 71096 does not improve AUC. Reverting changes.
[2024-12-02 18:10:02.250109] start test user 110770 60/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:10:02.879550] start test user 110770 60/567 recall augumented users by random, augumented_users = [111725, 111201, 100297, 134644, 107541, 7691, 25298, 37462, 33567, 84619, 23061, 106389, 82022, 53971, 33109, 37314, 21830, 7878, 70118, 103693, 118062, 30042, 74382, 17393, 107191, 52434, 126627, 9534, 121431, 89886, 128625, 37649, 26330, 46230, 41382, 6515, 61270, 99711, 101373, 39748, 137846, 13516, 117022, 14846, 44080, 136357, 50854, 75966, 110067, 90134]
[2024-12-02 18:10:02.935403] user = 110770 Cloud 60/567
[2024-12-02 18:10:02.952449] user = 110770 Local 60/567
[2024-12-02 18:10:03.070502] user = 110770 Local+ 60/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:10:06.245305] user = 110770 MPDA- 60/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4875
Training on augumented user 111725 0/50 current_auc = 0.4875
User 111725 AUC after training: 0.4875
User 111725 does not improve AUC. Reverting changes.
Training on augumented user 111201 1/50 current_auc = 0.4875
User 111201 AUC after training: 0.4875
User 111201 does not improve AUC. Reverting changes.
Training on augumented user 100297 2/50 current_auc = 0.4875
User 100297 AUC after training: 0.5
User 100297 improves AUC. Keeping the model.
Training on augumented user 134644 3/50 current_auc = 0.5
User 134644 AUC after training: 0.4875
User 134644 does not improve AUC. Reverting changes.
Training on augumented user 107541 4/50 current_auc = 0.5
User 107541 AUC after training: 0.5
User 107541 does not improve AUC. Reverting changes.
Training on augumented user 7691 5/50 current_auc = 0.5
User 7691 AUC after training: 0.5
User 7691 does not improve AUC. Reverting changes.
Training on augumented user 25298 6/50 current_auc = 0.5
User 25298 AUC after training: 0.5
User 25298 does not improve AUC. Reverting changes.
Training on augumented user 37462 7/50 current_auc = 0.5
User 37462 AUC after training: 0.5
User 37462 does not improve AUC. Reverting changes.
Training on augumented user 33567 8/50 current_auc = 0.5
User 33567 AUC after training: 0.4875
User 33567 does not improve AUC. Reverting changes.
Training on augumented user 84619 9/50 current_auc = 0.5
User 84619 AUC after training: 0.4875
User 84619 does not improve AUC. Reverting changes.
Training on augumented user 23061 10/50 current_auc = 0.5
User 23061 AUC after training: 0.4875
User 23061 does not improve AUC. Reverting changes.
Training on augumented user 106389 11/50 current_auc = 0.5
User 106389 AUC after training: 0.5
User 106389 does not improve AUC. Reverting changes.
Training on augumented user 82022 12/50 current_auc = 0.5
User 82022 AUC after training: 0.4875
User 82022 does not improve AUC. Reverting changes.
Training on augumented user 53971 13/50 current_auc = 0.5
User 53971 AUC after training: 0.4875
User 53971 does not improve AUC. Reverting changes.
Training on augumented user 33109 14/50 current_auc = 0.5
User 33109 AUC after training: 0.5
User 33109 does not improve AUC. Reverting changes.
Training on augumented user 37314 15/50 current_auc = 0.5
User 37314 AUC after training: 0.5
User 37314 does not improve AUC. Reverting changes.
Training on augumented user 21830 16/50 current_auc = 0.5
User 21830 AUC after training: 0.4875
User 21830 does not improve AUC. Reverting changes.
Training on augumented user 7878 17/50 current_auc = 0.5
User 7878 AUC after training: 0.5
User 7878 does not improve AUC. Reverting changes.
Training on augumented user 70118 18/50 current_auc = 0.5
User 70118 AUC after training: 0.4875
User 70118 does not improve AUC. Reverting changes.
Training on augumented user 103693 19/50 current_auc = 0.5
User 103693 AUC after training: 0.5
User 103693 does not improve AUC. Reverting changes.
Training on augumented user 118062 20/50 current_auc = 0.5
User 118062 AUC after training: 0.4875
User 118062 does not improve AUC. Reverting changes.
Training on augumented user 30042 21/50 current_auc = 0.5
User 30042 AUC after training: 0.5
User 30042 does not improve AUC. Reverting changes.
Training on augumented user 74382 22/50 current_auc = 0.5
User 74382 AUC after training: 0.4875
User 74382 does not improve AUC. Reverting changes.
Training on augumented user 17393 23/50 current_auc = 0.5
User 17393 AUC after training: 0.5
User 17393 does not improve AUC. Reverting changes.
Training on augumented user 107191 24/50 current_auc = 0.5
User 107191 AUC after training: 0.5
User 107191 does not improve AUC. Reverting changes.
Training on augumented user 52434 25/50 current_auc = 0.5
User 52434 AUC after training: 0.5
User 52434 does not improve AUC. Reverting changes.
Training on augumented user 126627 26/50 current_auc = 0.5
User 126627 AUC after training: 0.4875
User 126627 does not improve AUC. Reverting changes.
Training on augumented user 9534 27/50 current_auc = 0.5
User 9534 AUC after training: 0.5
User 9534 does not improve AUC. Reverting changes.
Training on augumented user 121431 28/50 current_auc = 0.5
User 121431 AUC after training: 0.5
User 121431 does not improve AUC. Reverting changes.
Training on augumented user 89886 29/50 current_auc = 0.5
User 89886 AUC after training: 0.5
User 89886 does not improve AUC. Reverting changes.
Training on augumented user 128625 30/50 current_auc = 0.5
User 128625 AUC after training: 0.4875
User 128625 does not improve AUC. Reverting changes.
Training on augumented user 37649 31/50 current_auc = 0.5
User 37649 AUC after training: 0.5
User 37649 does not improve AUC. Reverting changes.
Training on augumented user 26330 32/50 current_auc = 0.5
User 26330 AUC after training: 0.5
User 26330 does not improve AUC. Reverting changes.
Training on augumented user 46230 33/50 current_auc = 0.5
User 46230 AUC after training: 0.5
User 46230 does not improve AUC. Reverting changes.
Training on augumented user 41382 34/50 current_auc = 0.5
User 41382 AUC after training: 0.4875
User 41382 does not improve AUC. Reverting changes.
Training on augumented user 6515 35/50 current_auc = 0.5
User 6515 AUC after training: 0.5
User 6515 does not improve AUC. Reverting changes.
Training on augumented user 61270 36/50 current_auc = 0.5
User 61270 AUC after training: 0.5
User 61270 does not improve AUC. Reverting changes.
Training on augumented user 99711 37/50 current_auc = 0.5
User 99711 AUC after training: 0.4875
User 99711 does not improve AUC. Reverting changes.
Training on augumented user 101373 38/50 current_auc = 0.5
User 101373 AUC after training: 0.5
User 101373 does not improve AUC. Reverting changes.
Training on augumented user 39748 39/50 current_auc = 0.5
User 39748 AUC after training: 0.5
User 39748 does not improve AUC. Reverting changes.
Training on augumented user 137846 40/50 current_auc = 0.5
User 137846 AUC after training: 0.4875
User 137846 does not improve AUC. Reverting changes.
Training on augumented user 13516 41/50 current_auc = 0.5
User 13516 AUC after training: 0.5
User 13516 does not improve AUC. Reverting changes.
Training on augumented user 117022 42/50 current_auc = 0.5
User 117022 AUC after training: 0.5
User 117022 does not improve AUC. Reverting changes.
Training on augumented user 14846 43/50 current_auc = 0.5
User 14846 AUC after training: 0.4875
User 14846 does not improve AUC. Reverting changes.
Training on augumented user 44080 44/50 current_auc = 0.5
User 44080 AUC after training: 0.5
User 44080 does not improve AUC. Reverting changes.
Training on augumented user 136357 45/50 current_auc = 0.5
User 136357 AUC after training: 0.5
User 136357 does not improve AUC. Reverting changes.
Training on augumented user 50854 46/50 current_auc = 0.5
User 50854 AUC after training: 0.5
User 50854 does not improve AUC. Reverting changes.
Training on augumented user 75966 47/50 current_auc = 0.5
User 75966 AUC after training: 0.4875
User 75966 does not improve AUC. Reverting changes.
Training on augumented user 110067 48/50 current_auc = 0.5
User 110067 AUC after training: 0.5
User 110067 does not improve AUC. Reverting changes.
Training on augumented user 90134 49/50 current_auc = 0.5
User 90134 AUC after training: 0.5
User 90134 does not improve AUC. Reverting changes.
[2024-12-02 18:10:33.135850] start test user 110826 61/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:10:33.761530] start test user 110826 61/567 recall augumented users by random, augumented_users = [118317, 100485, 74891, 30008, 116561, 22360, 110038, 45721, 107517, 15632, 79511, 101928, 61316, 5941, 85166, 111310, 10676, 126315, 92208, 75954, 70845, 15410, 66319, 78027, 1632, 53211, 23018, 113490, 100551, 46012, 26162, 36256, 98158, 33016, 77691, 93089, 102804, 20409, 60527, 90585, 120915, 8052, 77571, 577, 70398, 104690, 75328, 107289, 9876, 24658]
[2024-12-02 18:10:33.778894] user = 110826 Cloud 61/567
[2024-12-02 18:10:33.791741] user = 110826 Local 61/567
[2024-12-02 18:10:34.187628] user = 110826 Local+ 61/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:10:36.776972] user = 110826 MPDA- 61/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.49142857142857144
Training on augumented user 118317 0/50 current_auc = 0.49142857142857144
User 118317 AUC after training: 0.49142857142857144
User 118317 does not improve AUC. Reverting changes.
Training on augumented user 100485 1/50 current_auc = 0.49142857142857144
User 100485 AUC after training: 0.49428571428571433
User 100485 improves AUC. Keeping the model.
Training on augumented user 74891 2/50 current_auc = 0.49428571428571433
User 74891 AUC after training: 0.4928571428571429
User 74891 does not improve AUC. Reverting changes.
Training on augumented user 30008 3/50 current_auc = 0.49428571428571433
User 30008 AUC after training: 0.49428571428571433
User 30008 does not improve AUC. Reverting changes.
Training on augumented user 116561 4/50 current_auc = 0.49428571428571433
User 116561 AUC after training: 0.49428571428571433
User 116561 does not improve AUC. Reverting changes.
Training on augumented user 22360 5/50 current_auc = 0.49428571428571433
User 22360 AUC after training: 0.49428571428571433
User 22360 does not improve AUC. Reverting changes.
Training on augumented user 110038 6/50 current_auc = 0.49428571428571433
User 110038 AUC after training: 0.49428571428571433
User 110038 does not improve AUC. Reverting changes.
Training on augumented user 45721 7/50 current_auc = 0.49428571428571433
User 45721 AUC after training: 0.4957142857142858
User 45721 improves AUC. Keeping the model.
Training on augumented user 107517 8/50 current_auc = 0.4957142857142858
User 107517 AUC after training: 0.4957142857142858
User 107517 does not improve AUC. Reverting changes.
Training on augumented user 15632 9/50 current_auc = 0.4957142857142858
User 15632 AUC after training: 0.4957142857142858
User 15632 does not improve AUC. Reverting changes.
Training on augumented user 79511 10/50 current_auc = 0.4957142857142858
User 79511 AUC after training: 0.4942857142857143
User 79511 does not improve AUC. Reverting changes.
Training on augumented user 101928 11/50 current_auc = 0.4957142857142858
User 101928 AUC after training: 0.4957142857142858
User 101928 does not improve AUC. Reverting changes.
Training on augumented user 61316 12/50 current_auc = 0.4957142857142858
User 61316 AUC after training: 0.4942857142857143
User 61316 does not improve AUC. Reverting changes.
Training on augumented user 5941 13/50 current_auc = 0.4957142857142858
User 5941 AUC after training: 0.4957142857142858
User 5941 does not improve AUC. Reverting changes.
Training on augumented user 85166 14/50 current_auc = 0.4957142857142858
User 85166 AUC after training: 0.49142857142857144
User 85166 does not improve AUC. Reverting changes.
Training on augumented user 111310 15/50 current_auc = 0.4957142857142858
User 111310 AUC after training: 0.4957142857142858
User 111310 does not improve AUC. Reverting changes.
Training on augumented user 10676 16/50 current_auc = 0.4957142857142858
User 10676 AUC after training: 0.4942857142857143
User 10676 does not improve AUC. Reverting changes.
Training on augumented user 126315 17/50 current_auc = 0.4957142857142858
User 126315 AUC after training: 0.4957142857142858
User 126315 does not improve AUC. Reverting changes.
Training on augumented user 92208 18/50 current_auc = 0.4957142857142858
User 92208 AUC after training: 0.4942857142857143
User 92208 does not improve AUC. Reverting changes.
Training on augumented user 75954 19/50 current_auc = 0.4957142857142858
User 75954 AUC after training: 0.4957142857142858
User 75954 does not improve AUC. Reverting changes.
Training on augumented user 70845 20/50 current_auc = 0.4957142857142858
User 70845 AUC after training: 0.4942857142857143
User 70845 does not improve AUC. Reverting changes.
Training on augumented user 15410 21/50 current_auc = 0.4957142857142858
User 15410 AUC after training: 0.4957142857142858
User 15410 does not improve AUC. Reverting changes.
Training on augumented user 66319 22/50 current_auc = 0.4957142857142858
User 66319 AUC after training: 0.4957142857142858
User 66319 does not improve AUC. Reverting changes.
Training on augumented user 78027 23/50 current_auc = 0.4957142857142858
User 78027 AUC after training: 0.4957142857142858
User 78027 does not improve AUC. Reverting changes.
Training on augumented user 1632 24/50 current_auc = 0.4957142857142858
User 1632 AUC after training: 0.4957142857142858
User 1632 does not improve AUC. Reverting changes.
Training on augumented user 53211 25/50 current_auc = 0.4957142857142858
User 53211 AUC after training: 0.4957142857142858
User 53211 does not improve AUC. Reverting changes.
Training on augumented user 23018 26/50 current_auc = 0.4957142857142858
User 23018 AUC after training: 0.4957142857142858
User 23018 does not improve AUC. Reverting changes.
Training on augumented user 113490 27/50 current_auc = 0.4957142857142858
User 113490 AUC after training: 0.4957142857142858
User 113490 does not improve AUC. Reverting changes.
Training on augumented user 100551 28/50 current_auc = 0.4957142857142858
User 100551 AUC after training: 0.4957142857142858
User 100551 does not improve AUC. Reverting changes.
Training on augumented user 46012 29/50 current_auc = 0.4957142857142858
User 46012 AUC after training: 0.4957142857142858
User 46012 does not improve AUC. Reverting changes.
Training on augumented user 26162 30/50 current_auc = 0.4957142857142858
User 26162 AUC after training: 0.49
User 26162 does not improve AUC. Reverting changes.
Training on augumented user 36256 31/50 current_auc = 0.4957142857142858
User 36256 AUC after training: 0.4942857142857143
User 36256 does not improve AUC. Reverting changes.
Training on augumented user 98158 32/50 current_auc = 0.4957142857142858
User 98158 AUC after training: 0.4957142857142858
User 98158 does not improve AUC. Reverting changes.
Training on augumented user 33016 33/50 current_auc = 0.4957142857142858
User 33016 AUC after training: 0.4957142857142858
User 33016 does not improve AUC. Reverting changes.
Training on augumented user 77691 34/50 current_auc = 0.4957142857142858
User 77691 AUC after training: 0.4957142857142858
User 77691 does not improve AUC. Reverting changes.
Training on augumented user 93089 35/50 current_auc = 0.4957142857142858
User 93089 AUC after training: 0.49142857142857144
User 93089 does not improve AUC. Reverting changes.
Training on augumented user 102804 36/50 current_auc = 0.4957142857142858
User 102804 AUC after training: 0.4957142857142858
User 102804 does not improve AUC. Reverting changes.
Training on augumented user 20409 37/50 current_auc = 0.4957142857142858
User 20409 AUC after training: 0.4957142857142858
User 20409 does not improve AUC. Reverting changes.
Training on augumented user 60527 38/50 current_auc = 0.4957142857142858
User 60527 AUC after training: 0.49428571428571433
User 60527 does not improve AUC. Reverting changes.
Training on augumented user 90585 39/50 current_auc = 0.4957142857142858
User 90585 AUC after training: 0.4957142857142858
User 90585 does not improve AUC. Reverting changes.
Training on augumented user 120915 40/50 current_auc = 0.4957142857142858
User 120915 AUC after training: 0.4942857142857143
User 120915 does not improve AUC. Reverting changes.
Training on augumented user 8052 41/50 current_auc = 0.4957142857142858
User 8052 AUC after training: 0.4957142857142858
User 8052 does not improve AUC. Reverting changes.
Training on augumented user 77571 42/50 current_auc = 0.4957142857142858
User 77571 AUC after training: 0.49428571428571433
User 77571 does not improve AUC. Reverting changes.
Training on augumented user 577 43/50 current_auc = 0.4957142857142858
User 577 AUC after training: 0.4942857142857143
User 577 does not improve AUC. Reverting changes.
Training on augumented user 70398 44/50 current_auc = 0.4957142857142858
User 70398 AUC after training: 0.4957142857142858
User 70398 does not improve AUC. Reverting changes.
Training on augumented user 104690 45/50 current_auc = 0.4957142857142858
User 104690 AUC after training: 0.4942857142857143
User 104690 does not improve AUC. Reverting changes.
Training on augumented user 75328 46/50 current_auc = 0.4957142857142858
User 75328 AUC after training: 0.49142857142857144
User 75328 does not improve AUC. Reverting changes.
Training on augumented user 107289 47/50 current_auc = 0.4957142857142858
User 107289 AUC after training: 0.4957142857142858
User 107289 does not improve AUC. Reverting changes.
Training on augumented user 9876 48/50 current_auc = 0.4957142857142858
User 9876 AUC after training: 0.4957142857142858
User 9876 does not improve AUC. Reverting changes.
Training on augumented user 24658 49/50 current_auc = 0.4957142857142858
User 24658 AUC after training: 0.4942857142857143
User 24658 does not improve AUC. Reverting changes.
[2024-12-02 18:11:05.068543] start test user 110846 62/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:11:05.794985] start test user 110846 62/567 recall augumented users by random, augumented_users = [85002, 33515, 77877, 65221, 97501, 17995, 22016, 508, 92422, 112729, 117549, 71440, 70536, 7771, 4210, 43835, 84670, 114338, 52187, 78556, 29604, 104984, 128244, 73749, 110199, 104110, 25252, 51407, 111684, 101768, 135183, 99378, 127021, 105868, 5507, 126107, 34987, 117930, 56388, 5384, 90667, 17267, 138357, 51497, 88568, 68713, 36270, 106864, 115895, 120849]
[2024-12-02 18:11:05.811981] user = 110846 Cloud 62/567
[2024-12-02 18:11:05.829209] user = 110846 Local 62/567
[2024-12-02 18:11:06.192416] user = 110846 Local+ 62/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:11:08.966650] user = 110846 MPDA- 62/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5877192982456141
Training on augumented user 85002 0/50 current_auc = 0.5877192982456141
User 85002 AUC after training: 0.5921052631578947
User 85002 improves AUC. Keeping the model.
Training on augumented user 33515 1/50 current_auc = 0.5921052631578947
User 33515 AUC after training: 0.5833333333333334
User 33515 does not improve AUC. Reverting changes.
Training on augumented user 77877 2/50 current_auc = 0.5921052631578947
User 77877 AUC after training: 0.5921052631578947
User 77877 does not improve AUC. Reverting changes.
Training on augumented user 65221 3/50 current_auc = 0.5921052631578947
User 65221 AUC after training: 0.5921052631578947
User 65221 does not improve AUC. Reverting changes.
Training on augumented user 97501 4/50 current_auc = 0.5921052631578947
User 97501 AUC after training: 0.5877192982456141
User 97501 does not improve AUC. Reverting changes.
Training on augumented user 17995 5/50 current_auc = 0.5921052631578947
User 17995 AUC after training: 0.5921052631578947
User 17995 does not improve AUC. Reverting changes.
Training on augumented user 22016 6/50 current_auc = 0.5921052631578947
User 22016 AUC after training: 0.5921052631578947
User 22016 does not improve AUC. Reverting changes.
Training on augumented user 508 7/50 current_auc = 0.5921052631578947
User 508 AUC after training: 0.5921052631578947
User 508 does not improve AUC. Reverting changes.
Training on augumented user 92422 8/50 current_auc = 0.5921052631578947
User 92422 AUC after training: 0.5921052631578947
User 92422 does not improve AUC. Reverting changes.
Training on augumented user 112729 9/50 current_auc = 0.5921052631578947
User 112729 AUC after training: 0.5921052631578947
User 112729 does not improve AUC. Reverting changes.
Training on augumented user 117549 10/50 current_auc = 0.5921052631578947
User 117549 AUC after training: 0.5921052631578947
User 117549 does not improve AUC. Reverting changes.
Training on augumented user 71440 11/50 current_auc = 0.5921052631578947
User 71440 AUC after training: 0.5877192982456141
User 71440 does not improve AUC. Reverting changes.
Training on augumented user 70536 12/50 current_auc = 0.5921052631578947
User 70536 AUC after training: 0.5877192982456141
User 70536 does not improve AUC. Reverting changes.
Training on augumented user 7771 13/50 current_auc = 0.5921052631578947
User 7771 AUC after training: 0.5833333333333334
User 7771 does not improve AUC. Reverting changes.
Training on augumented user 4210 14/50 current_auc = 0.5921052631578947
User 4210 AUC after training: 0.5877192982456141
User 4210 does not improve AUC. Reverting changes.
Training on augumented user 43835 15/50 current_auc = 0.5921052631578947
User 43835 AUC after training: 0.5877192982456141
User 43835 does not improve AUC. Reverting changes.
Training on augumented user 84670 16/50 current_auc = 0.5921052631578947
User 84670 AUC after training: 0.5921052631578947
User 84670 does not improve AUC. Reverting changes.
Training on augumented user 114338 17/50 current_auc = 0.5921052631578947
User 114338 AUC after training: 0.5921052631578947
User 114338 does not improve AUC. Reverting changes.
Training on augumented user 52187 18/50 current_auc = 0.5921052631578947
User 52187 AUC after training: 0.5921052631578947
User 52187 does not improve AUC. Reverting changes.
Training on augumented user 78556 19/50 current_auc = 0.5921052631578947
User 78556 AUC after training: 0.5921052631578947
User 78556 does not improve AUC. Reverting changes.
Training on augumented user 29604 20/50 current_auc = 0.5921052631578947
User 29604 AUC after training: 0.5877192982456141
User 29604 does not improve AUC. Reverting changes.
Training on augumented user 104984 21/50 current_auc = 0.5921052631578947
User 104984 AUC after training: 0.5877192982456141
User 104984 does not improve AUC. Reverting changes.
Training on augumented user 128244 22/50 current_auc = 0.5921052631578947
User 128244 AUC after training: 0.5877192982456141
User 128244 does not improve AUC. Reverting changes.
Training on augumented user 73749 23/50 current_auc = 0.5921052631578947
User 73749 AUC after training: 0.5921052631578947
User 73749 does not improve AUC. Reverting changes.
Training on augumented user 110199 24/50 current_auc = 0.5921052631578947
User 110199 AUC after training: 0.5877192982456141
User 110199 does not improve AUC. Reverting changes.
Training on augumented user 104110 25/50 current_auc = 0.5921052631578947
User 104110 AUC after training: 0.5921052631578947
User 104110 does not improve AUC. Reverting changes.
Training on augumented user 25252 26/50 current_auc = 0.5921052631578947
User 25252 AUC after training: 0.5877192982456141
User 25252 does not improve AUC. Reverting changes.
Training on augumented user 51407 27/50 current_auc = 0.5921052631578947
User 51407 AUC after training: 0.5921052631578947
User 51407 does not improve AUC. Reverting changes.
Training on augumented user 111684 28/50 current_auc = 0.5921052631578947
User 111684 AUC after training: 0.5921052631578947
User 111684 does not improve AUC. Reverting changes.
Training on augumented user 101768 29/50 current_auc = 0.5921052631578947
User 101768 AUC after training: 0.5921052631578947
User 101768 does not improve AUC. Reverting changes.
Training on augumented user 135183 30/50 current_auc = 0.5921052631578947
User 135183 AUC after training: 0.5833333333333334
User 135183 does not improve AUC. Reverting changes.
Training on augumented user 99378 31/50 current_auc = 0.5921052631578947
User 99378 AUC after training: 0.5877192982456141
User 99378 does not improve AUC. Reverting changes.
Training on augumented user 127021 32/50 current_auc = 0.5921052631578947
User 127021 AUC after training: 0.5921052631578947
User 127021 does not improve AUC. Reverting changes.
Training on augumented user 105868 33/50 current_auc = 0.5921052631578947
User 105868 AUC after training: 0.5877192982456141
User 105868 does not improve AUC. Reverting changes.
Training on augumented user 5507 34/50 current_auc = 0.5921052631578947
User 5507 AUC after training: 0.5921052631578947
User 5507 does not improve AUC. Reverting changes.
Training on augumented user 126107 35/50 current_auc = 0.5921052631578947
User 126107 AUC after training: 0.5921052631578947
User 126107 does not improve AUC. Reverting changes.
Training on augumented user 34987 36/50 current_auc = 0.5921052631578947
User 34987 AUC after training: 0.5877192982456141
User 34987 does not improve AUC. Reverting changes.
Training on augumented user 117930 37/50 current_auc = 0.5921052631578947
User 117930 AUC after training: 0.5921052631578947
User 117930 does not improve AUC. Reverting changes.
Training on augumented user 56388 38/50 current_auc = 0.5921052631578947
User 56388 AUC after training: 0.5921052631578947
User 56388 does not improve AUC. Reverting changes.
Training on augumented user 5384 39/50 current_auc = 0.5921052631578947
User 5384 AUC after training: 0.5789473684210527
User 5384 does not improve AUC. Reverting changes.
Training on augumented user 90667 40/50 current_auc = 0.5921052631578947
User 90667 AUC after training: 0.5921052631578947
User 90667 does not improve AUC. Reverting changes.
Training on augumented user 17267 41/50 current_auc = 0.5921052631578947
User 17267 AUC after training: 0.5921052631578947
User 17267 does not improve AUC. Reverting changes.
Training on augumented user 138357 42/50 current_auc = 0.5921052631578947
User 138357 AUC after training: 0.5921052631578947
User 138357 does not improve AUC. Reverting changes.
Training on augumented user 51497 43/50 current_auc = 0.5921052631578947
User 51497 AUC after training: 0.5921052631578947
User 51497 does not improve AUC. Reverting changes.
Training on augumented user 88568 44/50 current_auc = 0.5921052631578947
User 88568 AUC after training: 0.5921052631578947
User 88568 does not improve AUC. Reverting changes.
Training on augumented user 68713 45/50 current_auc = 0.5921052631578947
User 68713 AUC after training: 0.5921052631578947
User 68713 does not improve AUC. Reverting changes.
Training on augumented user 36270 46/50 current_auc = 0.5921052631578947
User 36270 AUC after training: 0.5833333333333334
User 36270 does not improve AUC. Reverting changes.
Training on augumented user 106864 47/50 current_auc = 0.5921052631578947
User 106864 AUC after training: 0.5877192982456141
User 106864 does not improve AUC. Reverting changes.
Training on augumented user 115895 48/50 current_auc = 0.5921052631578947
User 115895 AUC after training: 0.5921052631578947
User 115895 does not improve AUC. Reverting changes.
Training on augumented user 120849 49/50 current_auc = 0.5921052631578947
User 120849 AUC after training: 0.5833333333333334
User 120849 does not improve AUC. Reverting changes.
[2024-12-02 18:11:41.294889] start test user 110847 63/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:11:41.727832] start test user 110847 63/567 recall augumented users by random, augumented_users = [46099, 16526, 136066, 133525, 103758, 66028, 118591, 107806, 95119, 66546, 60086, 22659, 96789, 101966, 83207, 133328, 74302, 16199, 81244, 84600, 129930, 114528, 61266, 101754, 101869, 83240, 39634, 14169, 28208, 389, 114799, 136400, 49200, 16509, 85865, 102571, 129910, 75606, 65452, 16091, 94369, 97113, 97614, 102487, 55642, 76505, 34866, 2919, 111831, 65705]
[2024-12-02 18:11:41.745657] user = 110847 Cloud 63/567
[2024-12-02 18:11:41.775664] user = 110847 Local 63/567
[2024-12-02 18:11:42.097266] user = 110847 Local+ 63/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:11:44.288770] user = 110847 MPDA- 63/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8690866365716406
Training on augumented user 46099 0/50 current_auc = 0.8690866365716406
User 46099 AUC after training: 0.868839280192938
User 46099 does not improve AUC. Reverting changes.
Training on augumented user 16526 1/50 current_auc = 0.8690866365716406
User 16526 AUC after training: 0.868653762908911
User 16526 does not improve AUC. Reverting changes.
Training on augumented user 136066 2/50 current_auc = 0.8690866365716406
User 136066 AUC after training: 0.8687774410982624
User 136066 does not improve AUC. Reverting changes.
Training on augumented user 133525 3/50 current_auc = 0.8690866365716406
User 133525 AUC after training: 0.8687774410982623
User 133525 does not improve AUC. Reverting changes.
Training on augumented user 103758 4/50 current_auc = 0.8690866365716406
User 103758 AUC after training: 0.8685919238142353
User 103758 does not improve AUC. Reverting changes.
Training on augumented user 66028 5/50 current_auc = 0.8690866365716406
User 66028 AUC after training: 0.8687774410982623
User 66028 does not improve AUC. Reverting changes.
Training on augumented user 118591 6/50 current_auc = 0.8690866365716406
User 118591 AUC after training: 0.8684064065302084
User 118591 does not improve AUC. Reverting changes.
Training on augumented user 107806 7/50 current_auc = 0.8690866365716406
User 107806 AUC after training: 0.8682827283408571
User 107806 does not improve AUC. Reverting changes.
Training on augumented user 95119 8/50 current_auc = 0.8690866365716406
User 95119 AUC after training: 0.8689629583822893
User 95119 does not improve AUC. Reverting changes.
Training on augumented user 66546 9/50 current_auc = 0.8690866365716406
User 66546 AUC after training: 0.8690247974769649
User 66546 does not improve AUC. Reverting changes.
Training on augumented user 60086 10/50 current_auc = 0.8690866365716406
User 60086 AUC after training: 0.8676643373941005
User 60086 does not improve AUC. Reverting changes.
Training on augumented user 22659 11/50 current_auc = 0.8690866365716406
User 22659 AUC after training: 0.8692721538556676
User 22659 improves AUC. Keeping the model.
Training on augumented user 96789 12/50 current_auc = 0.8692721538556676
User 96789 AUC after training: 0.8691484756663163
User 96789 does not improve AUC. Reverting changes.
Training on augumented user 101966 13/50 current_auc = 0.8692721538556676
User 101966 AUC after training: 0.8691484756663163
User 101966 does not improve AUC. Reverting changes.
Training on augumented user 83207 14/50 current_auc = 0.8692721538556676
User 83207 AUC after training: 0.8694576711396945
User 83207 improves AUC. Keeping the model.
Training on augumented user 133328 15/50 current_auc = 0.8694576711396945
User 133328 AUC after training: 0.8689011192876137
User 133328 does not improve AUC. Reverting changes.
Training on augumented user 74302 16/50 current_auc = 0.8694576711396945
User 74302 AUC after training: 0.8687774410982624
User 74302 does not improve AUC. Reverting changes.
Training on augumented user 16199 17/50 current_auc = 0.8694576711396945
User 16199 AUC after training: 0.8695813493290458
User 16199 improves AUC. Keeping the model.
Training on augumented user 81244 18/50 current_auc = 0.8695813493290458
User 81244 AUC after training: 0.869210314760992
User 81244 does not improve AUC. Reverting changes.
Training on augumented user 84600 19/50 current_auc = 0.8695813493290458
User 84600 AUC after training: 0.8687156020035867
User 84600 does not improve AUC. Reverting changes.
Training on augumented user 129930 20/50 current_auc = 0.8695813493290458
User 129930 AUC after training: 0.8689011192876137
User 129930 does not improve AUC. Reverting changes.
Training on augumented user 114528 21/50 current_auc = 0.8695813493290458
User 114528 AUC after training: 0.8696431884237215
User 114528 improves AUC. Keeping the model.
Training on augumented user 61266 22/50 current_auc = 0.8696431884237215
User 61266 AUC after training: 0.8695813493290458
User 61266 does not improve AUC. Reverting changes.
Training on augumented user 101754 23/50 current_auc = 0.8696431884237215
User 101754 AUC after training: 0.869210314760992
User 101754 does not improve AUC. Reverting changes.
Training on augumented user 101869 24/50 current_auc = 0.8696431884237215
User 101869 AUC after training: 0.8693339929503432
User 101869 does not improve AUC. Reverting changes.
Training on augumented user 83240 25/50 current_auc = 0.8696431884237215
User 83240 AUC after training: 0.8697050275183971
User 83240 improves AUC. Keeping the model.
Training on augumented user 39634 26/50 current_auc = 0.8697050275183971
User 39634 AUC after training: 0.8693339929503432
User 39634 does not improve AUC. Reverting changes.
Training on augumented user 14169 27/50 current_auc = 0.8697050275183971
User 14169 AUC after training: 0.8694576711396946
User 14169 does not improve AUC. Reverting changes.
Training on augumented user 28208 28/50 current_auc = 0.8697050275183971
User 28208 AUC after training: 0.8693958320450188
User 28208 does not improve AUC. Reverting changes.
Training on augumented user 389 29/50 current_auc = 0.8697050275183971
User 389 AUC after training: 0.8689011192876137
User 389 does not improve AUC. Reverting changes.
Training on augumented user 114799 30/50 current_auc = 0.8697050275183971
User 114799 AUC after training: 0.8691484756663163
User 114799 does not improve AUC. Reverting changes.
Training on augumented user 136400 31/50 current_auc = 0.8697050275183971
User 136400 AUC after training: 0.8693958320450188
User 136400 does not improve AUC. Reverting changes.
Training on augumented user 49200 32/50 current_auc = 0.8697050275183971
User 49200 AUC after training: 0.8693958320450188
User 49200 does not improve AUC. Reverting changes.
Training on augumented user 16509 33/50 current_auc = 0.8697050275183971
User 16509 AUC after training: 0.8692721538556676
User 16509 does not improve AUC. Reverting changes.
Training on augumented user 85865 34/50 current_auc = 0.8697050275183971
User 85865 AUC after training: 0.8696431884237215
User 85865 does not improve AUC. Reverting changes.
Training on augumented user 102571 35/50 current_auc = 0.8697050275183971
User 102571 AUC after training: 0.8693339929503432
User 102571 does not improve AUC. Reverting changes.
Training on augumented user 129910 36/50 current_auc = 0.8697050275183971
User 129910 AUC after training: 0.8696431884237215
User 129910 does not improve AUC. Reverting changes.
Training on augumented user 75606 37/50 current_auc = 0.8697050275183971
User 75606 AUC after training: 0.8692721538556676
User 75606 does not improve AUC. Reverting changes.
Training on augumented user 65452 38/50 current_auc = 0.8697050275183971
User 65452 AUC after training: 0.8693339929503432
User 65452 does not improve AUC. Reverting changes.
Training on augumented user 16091 39/50 current_auc = 0.8697050275183971
User 16091 AUC after training: 0.8693339929503432
User 16091 does not improve AUC. Reverting changes.
Training on augumented user 94369 40/50 current_auc = 0.8697050275183971
User 94369 AUC after training: 0.8689011192876137
User 94369 does not improve AUC. Reverting changes.
Training on augumented user 97113 41/50 current_auc = 0.8697050275183971
User 97113 AUC after training: 0.8695813493290458
User 97113 does not improve AUC. Reverting changes.
Training on augumented user 97614 42/50 current_auc = 0.8697050275183971
User 97614 AUC after training: 0.8697050275183972
User 97614 improves AUC. Keeping the model.
Training on augumented user 102487 43/50 current_auc = 0.8697050275183972
User 102487 AUC after training: 0.8693339929503432
User 102487 does not improve AUC. Reverting changes.
Training on augumented user 55642 44/50 current_auc = 0.8697050275183972
User 55642 AUC after training: 0.8700142229917753
User 55642 improves AUC. Keeping the model.
Training on augumented user 76505 45/50 current_auc = 0.8700142229917753
User 76505 AUC after training: 0.8698905448024241
User 76505 does not improve AUC. Reverting changes.
Training on augumented user 34866 46/50 current_auc = 0.8700142229917753
User 34866 AUC after training: 0.8693339929503432
User 34866 does not improve AUC. Reverting changes.
Training on augumented user 2919 47/50 current_auc = 0.8700142229917753
User 2919 AUC after training: 0.8708799703172345
User 2919 improves AUC. Keeping the model.
Training on augumented user 111831 48/50 current_auc = 0.8708799703172345
User 111831 AUC after training: 0.8710036485065858
User 111831 improves AUC. Keeping the model.
Training on augumented user 65705 49/50 current_auc = 0.8710036485065858
User 65705 AUC after training: 0.870447096654505
User 65705 does not improve AUC. Reverting changes.
[2024-12-02 18:12:07.842723] start test user 110858 64/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:12:08.490585] start test user 110858 64/567 recall augumented users by random, augumented_users = [21056, 134674, 126792, 47105, 115273, 24079, 117499, 82952, 123711, 60852, 730, 94099, 125788, 119900, 57824, 112449, 26397, 75585, 35276, 118943, 21555, 32885, 127480, 127488, 129042, 32714, 72533, 113949, 45475, 42498, 57581, 2737, 115167, 40409, 52673, 127829, 42121, 94726, 39297, 86604, 67772, 42271, 34863, 96140, 39992, 34783, 93723, 122217, 102967, 131036]
[2024-12-02 18:12:08.553382] user = 110858 Cloud 64/567
[2024-12-02 18:12:08.633153] user = 110858 Local 64/567
[2024-12-02 18:12:08.971965] user = 110858 Local+ 64/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:12:10.593672] user = 110858 MPDA- 64/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6627832796646211
Training on augumented user 21056 0/50 current_auc = 0.6627832796646211
User 21056 AUC after training: 0.6629047937298742
User 21056 improves AUC. Keeping the model.
Training on augumented user 134674 1/50 current_auc = 0.6629047937298742
User 134674 AUC after training: 0.6626465763412115
User 134674 does not improve AUC. Reverting changes.
Training on augumented user 126792 2/50 current_auc = 0.6629047937298742
User 126792 AUC after training: 0.6626617655993681
User 126792 does not improve AUC. Reverting changes.
Training on augumented user 47105 3/50 current_auc = 0.6629047937298742
User 47105 AUC after training: 0.6628440366972478
User 47105 does not improve AUC. Reverting changes.
Training on augumented user 115273 4/50 current_auc = 0.6629047937298742
User 115273 AUC after training: 0.6626921441156813
User 115273 does not improve AUC. Reverting changes.
Training on augumented user 24079 5/50 current_auc = 0.6629047937298742
User 24079 AUC after training: 0.6629351722461875
User 24079 improves AUC. Keeping the model.
Training on augumented user 117499 6/50 current_auc = 0.6629351722461875
User 117499 AUC after training: 0.6629655507625007
User 117499 improves AUC. Keeping the model.
Training on augumented user 82952 7/50 current_auc = 0.6629655507625007
User 82952 AUC after training: 0.662995929278814
User 82952 improves AUC. Keeping the model.
Training on augumented user 123711 8/50 current_auc = 0.662995929278814
User 123711 AUC after training: 0.6628971991007959
User 123711 does not improve AUC. Reverting changes.
Training on augumented user 60852 9/50 current_auc = 0.662995929278814
User 60852 AUC after training: 0.6628896044717175
User 60852 does not improve AUC. Reverting changes.
Training on augumented user 730 10/50 current_auc = 0.662995929278814
User 730 AUC after training: 0.6629503615043442
User 730 does not improve AUC. Reverting changes.
Training on augumented user 94099 11/50 current_auc = 0.662995929278814
User 94099 AUC after training: 0.6628136581809345
User 94099 does not improve AUC. Reverting changes.
Training on augumented user 125788 12/50 current_auc = 0.662995929278814
User 125788 AUC after training: 0.6630718755695971
User 125788 improves AUC. Keeping the model.
Training on augumented user 119900 13/50 current_auc = 0.6630718755695971
User 119900 AUC after training: 0.6629807400206575
User 119900 does not improve AUC. Reverting changes.
Training on augumented user 57824 14/50 current_auc = 0.6630718755695971
User 57824 AUC after training: 0.6630111185369707
User 57824 does not improve AUC. Reverting changes.
Training on augumented user 112449 15/50 current_auc = 0.6630718755695971
User 112449 AUC after training: 0.662752901148308
User 112449 does not improve AUC. Reverting changes.
Training on augumented user 26397 16/50 current_auc = 0.6630718755695971
User 26397 AUC after training: 0.6629047937298742
User 26397 does not improve AUC. Reverting changes.
Training on augumented user 75585 17/50 current_auc = 0.6630718755695971
User 75585 AUC after training: 0.6628592259554043
User 75585 does not improve AUC. Reverting changes.
Training on augumented user 35276 18/50 current_auc = 0.6630718755695971
User 35276 AUC after training: 0.6629199829880309
User 35276 does not improve AUC. Reverting changes.
Training on augumented user 118943 19/50 current_auc = 0.6630718755695971
User 118943 AUC after training: 0.6628288474390911
User 118943 does not improve AUC. Reverting changes.
Training on augumented user 21555 20/50 current_auc = 0.6630718755695971
User 21555 AUC after training: 0.6628440366972477
User 21555 does not improve AUC. Reverting changes.
Training on augumented user 32885 21/50 current_auc = 0.6630718755695971
User 32885 AUC after training: 0.6629199829880308
User 32885 does not improve AUC. Reverting changes.
Training on augumented user 127480 22/50 current_auc = 0.6630718755695971
User 127480 AUC after training: 0.6629959292788141
User 127480 does not improve AUC. Reverting changes.
Training on augumented user 127488 23/50 current_auc = 0.6630718755695971
User 127488 AUC after training: 0.6629655507625009
User 127488 does not improve AUC. Reverting changes.
Training on augumented user 129042 24/50 current_auc = 0.6630718755695971
User 129042 AUC after training: 0.6626161978248982
User 129042 does not improve AUC. Reverting changes.
Training on augumented user 32714 25/50 current_auc = 0.6630718755695971
User 32714 AUC after training: 0.6630566863114407
User 32714 does not improve AUC. Reverting changes.
Training on augumented user 72533 26/50 current_auc = 0.6630718755695971
User 72533 AUC after training: 0.6630870648277538
User 72533 improves AUC. Keeping the model.
Training on augumented user 113949 27/50 current_auc = 0.6630870648277538
User 113949 AUC after training: 0.66328452518379
User 113949 improves AUC. Keeping the model.
Training on augumented user 45475 28/50 current_auc = 0.66328452518379
User 45475 AUC after training: 0.6631782003766935
User 45475 does not improve AUC. Reverting changes.
Training on augumented user 42498 29/50 current_auc = 0.66328452518379
User 42498 AUC after training: 0.6631022540859104
User 42498 does not improve AUC. Reverting changes.
Training on augumented user 57581 30/50 current_auc = 0.66328452518379
User 57581 AUC after training: 0.6630111185369707
User 57581 does not improve AUC. Reverting changes.
Training on augumented user 2737 31/50 current_auc = 0.66328452518379
User 2737 AUC after training: 0.6632085788930069
User 2737 does not improve AUC. Reverting changes.
Training on augumented user 115167 32/50 current_auc = 0.66328452518379
User 115167 AUC after training: 0.6629047937298743
User 115167 does not improve AUC. Reverting changes.
Training on augumented user 40409 33/50 current_auc = 0.66328452518379
User 40409 AUC after training: 0.6631478218603803
User 40409 does not improve AUC. Reverting changes.
Training on augumented user 52673 34/50 current_auc = 0.66328452518379
User 52673 AUC after training: 0.6632997144419467
User 52673 improves AUC. Keeping the model.
Training on augumented user 127829 35/50 current_auc = 0.6632997144419467
User 127829 AUC after training: 0.66328452518379
User 127829 does not improve AUC. Reverting changes.
Training on augumented user 42121 36/50 current_auc = 0.6632997144419467
User 42121 AUC after training: 0.6633756607327299
User 42121 improves AUC. Keeping the model.
Training on augumented user 94726 37/50 current_auc = 0.6633756607327299
User 94726 AUC after training: 0.6630718755695972
User 94726 does not improve AUC. Reverting changes.
Training on augumented user 39297 38/50 current_auc = 0.6633756607327299
User 39297 AUC after training: 0.6635275533142961
User 39297 improves AUC. Keeping the model.
Training on augumented user 86604 39/50 current_auc = 0.6635275533142961
User 86604 AUC after training: 0.6630718755695972
User 86604 does not improve AUC. Reverting changes.
Training on augumented user 67772 40/50 current_auc = 0.6635275533142961
User 67772 AUC after training: 0.6636338781213926
User 67772 improves AUC. Keeping the model.
Training on augumented user 42271 41/50 current_auc = 0.6636338781213926
User 42271 AUC after training: 0.6636034996050793
User 42271 does not improve AUC. Reverting changes.
Training on augumented user 34863 42/50 current_auc = 0.6636338781213926
User 34863 AUC after training: 0.6627529011483079
User 34863 does not improve AUC. Reverting changes.
Training on augumented user 96140 43/50 current_auc = 0.6636338781213926
User 96140 AUC after training: 0.6637553921866455
User 96140 improves AUC. Keeping the model.
Training on augumented user 39992 44/50 current_auc = 0.6637553921866455
User 39992 AUC after training: 0.6635579318306094
User 39992 does not improve AUC. Reverting changes.
Training on augumented user 34783 45/50 current_auc = 0.6637553921866455
User 34783 AUC after training: 0.6634212285071996
User 34783 does not improve AUC. Reverting changes.
Training on augumented user 93723 46/50 current_auc = 0.6637553921866455
User 93723 AUC after training: 0.6639224740263685
User 93723 improves AUC. Keeping the model.
Training on augumented user 122217 47/50 current_auc = 0.6639224740263685
User 122217 AUC after training: 0.6640591773497783
User 122217 improves AUC. Keeping the model.
Training on augumented user 102967 48/50 current_auc = 0.6640591773497783
User 102967 AUC after training: 0.6635123640561396
User 102967 does not improve AUC. Reverting changes.
Training on augumented user 131036 49/50 current_auc = 0.6640591773497783
User 131036 AUC after training: 0.6638465277355854
User 131036 does not improve AUC. Reverting changes.
[2024-12-02 18:12:36.691988] start test user 110868 65/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:12:37.429554] start test user 110868 65/567 recall augumented users by random, augumented_users = [22042, 60254, 53162, 58352, 3554, 92660, 36404, 44078, 88752, 81977, 55601, 94378, 23774, 83734, 110820, 10870, 122715, 95670, 92493, 62495, 2514, 13634, 51417, 63272, 13331, 136271, 58916, 127034, 112026, 34065, 87607, 11903, 62960, 15310, 84597, 111291, 117681, 5426, 104943, 130969, 45260, 28357, 55000, 38521, 108775, 18812, 58774, 87275, 46786, 52679]
[2024-12-02 18:12:37.464148] user = 110868 Cloud 65/567
[2024-12-02 18:12:37.479809] user = 110868 Local 65/567
[2024-12-02 18:12:37.527227] user = 110868 Local+ 65/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:12:39.551138] user = 110868 MPDA- 65/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4587289992695398
Training on augumented user 22042 0/50 current_auc = 0.4587289992695398
User 22042 AUC after training: 0.45872899926953975
User 22042 does not improve AUC. Reverting changes.
Training on augumented user 60254 1/50 current_auc = 0.4587289992695398
User 60254 AUC after training: 0.45982468955441924
User 60254 improves AUC. Keeping the model.
Training on augumented user 53162 2/50 current_auc = 0.45982468955441924
User 53162 AUC after training: 0.46092037983929873
User 53162 improves AUC. Keeping the model.
Training on augumented user 58352 3/50 current_auc = 0.46092037983929873
User 58352 AUC after training: 0.4601899196493791
User 58352 does not improve AUC. Reverting changes.
Training on augumented user 3554 4/50 current_auc = 0.46092037983929873
User 3554 AUC after training: 0.4620160701241782
User 3554 improves AUC. Keeping the model.
Training on augumented user 92660 5/50 current_auc = 0.4620160701241782
User 92660 AUC after training: 0.46092037983929873
User 92660 does not improve AUC. Reverting changes.
Training on augumented user 36404 6/50 current_auc = 0.4620160701241782
User 36404 AUC after training: 0.46128560993425854
User 36404 does not improve AUC. Reverting changes.
Training on augumented user 44078 7/50 current_auc = 0.4620160701241782
User 44078 AUC after training: 0.46219868517165813
User 44078 improves AUC. Keeping the model.
Training on augumented user 88752 8/50 current_auc = 0.46219868517165813
User 88752 AUC after training: 0.4618334550766983
User 88752 does not improve AUC. Reverting changes.
Training on augumented user 81977 9/50 current_auc = 0.46219868517165813
User 81977 AUC after training: 0.46420745069393715
User 81977 improves AUC. Keeping the model.
Training on augumented user 55601 10/50 current_auc = 0.46420745069393715
User 55601 AUC after training: 0.4631117604090577
User 55601 does not improve AUC. Reverting changes.
Training on augumented user 94378 11/50 current_auc = 0.46420745069393715
User 94378 AUC after training: 0.46603360116873627
User 94378 improves AUC. Keeping the model.
Training on augumented user 23774 12/50 current_auc = 0.46603360116873627
User 23774 AUC after training: 0.46603360116873627
User 23774 does not improve AUC. Reverting changes.
Training on augumented user 83734 13/50 current_auc = 0.46603360116873627
User 83734 AUC after training: 0.46603360116873627
User 83734 does not improve AUC. Reverting changes.
Training on augumented user 110820 14/50 current_auc = 0.46603360116873627
User 110820 AUC after training: 0.4638422205989773
User 110820 does not improve AUC. Reverting changes.
Training on augumented user 10870 15/50 current_auc = 0.46603360116873627
User 10870 AUC after training: 0.4649379108838568
User 10870 does not improve AUC. Reverting changes.
Training on augumented user 122715 16/50 current_auc = 0.46603360116873627
User 122715 AUC after training: 0.4656683710737764
User 122715 does not improve AUC. Reverting changes.
Training on augumented user 95670 17/50 current_auc = 0.46603360116873627
User 95670 AUC after training: 0.46420745069393715
User 95670 does not improve AUC. Reverting changes.
Training on augumented user 92493 18/50 current_auc = 0.46603360116873627
User 92493 AUC after training: 0.46238130021913804
User 92493 does not improve AUC. Reverting changes.
Training on augumented user 62495 19/50 current_auc = 0.46603360116873627
User 62495 AUC after training: 0.46566837107377645
User 62495 does not improve AUC. Reverting changes.
Training on augumented user 2514 20/50 current_auc = 0.46603360116873627
User 2514 AUC after training: 0.4627465303140978
User 2514 does not improve AUC. Reverting changes.
Training on augumented user 13634 21/50 current_auc = 0.46603360116873627
User 13634 AUC after training: 0.4631117604090577
User 13634 does not improve AUC. Reverting changes.
Training on augumented user 51417 22/50 current_auc = 0.46603360116873627
User 51417 AUC after training: 0.4634769905040175
User 51417 does not improve AUC. Reverting changes.
Training on augumented user 63272 23/50 current_auc = 0.46603360116873627
User 63272 AUC after training: 0.46311176040905766
User 63272 does not improve AUC. Reverting changes.
Training on augumented user 13331 24/50 current_auc = 0.46603360116873627
User 13331 AUC after training: 0.4663988312636961
User 13331 improves AUC. Keeping the model.
Training on augumented user 136271 25/50 current_auc = 0.4663988312636961
User 136271 AUC after training: 0.46530314097881664
User 136271 does not improve AUC. Reverting changes.
Training on augumented user 58916 26/50 current_auc = 0.4663988312636961
User 58916 AUC after training: 0.4649379108838568
User 58916 does not improve AUC. Reverting changes.
Training on augumented user 127034 27/50 current_auc = 0.4663988312636961
User 127034 AUC after training: 0.4663988312636961
User 127034 does not improve AUC. Reverting changes.
Training on augumented user 112026 28/50 current_auc = 0.4663988312636961
User 112026 AUC after training: 0.46420745069393715
User 112026 does not improve AUC. Reverting changes.
Training on augumented user 34065 29/50 current_auc = 0.4663988312636961
User 34065 AUC after training: 0.46274653031409785
User 34065 does not improve AUC. Reverting changes.
Training on augumented user 87607 30/50 current_auc = 0.4663988312636961
User 87607 AUC after training: 0.4649379108838568
User 87607 does not improve AUC. Reverting changes.
Training on augumented user 11903 31/50 current_auc = 0.4663988312636961
User 11903 AUC after training: 0.46530314097881664
User 11903 does not improve AUC. Reverting changes.
Training on augumented user 62960 32/50 current_auc = 0.4663988312636961
User 62960 AUC after training: 0.46420745069393715
User 62960 does not improve AUC. Reverting changes.
Training on augumented user 15310 33/50 current_auc = 0.4663988312636961
User 15310 AUC after training: 0.46895544192841493
User 15310 improves AUC. Keeping the model.
Training on augumented user 84597 34/50 current_auc = 0.46895544192841493
User 84597 AUC after training: 0.46822498173849525
User 84597 does not improve AUC. Reverting changes.
Training on augumented user 111291 35/50 current_auc = 0.46895544192841493
User 111291 AUC after training: 0.46822498173849525
User 111291 does not improve AUC. Reverting changes.
Training on augumented user 117681 36/50 current_auc = 0.46895544192841493
User 117681 AUC after training: 0.4682249817384952
User 117681 does not improve AUC. Reverting changes.
Training on augumented user 5426 37/50 current_auc = 0.46895544192841493
User 5426 AUC after training: 0.46859021183345506
User 5426 does not improve AUC. Reverting changes.
Training on augumented user 104943 38/50 current_auc = 0.46895544192841493
User 104943 AUC after training: 0.46457268078889696
User 104943 does not improve AUC. Reverting changes.
Training on augumented user 130969 39/50 current_auc = 0.46895544192841493
User 130969 AUC after training: 0.4689554419284149
User 130969 does not improve AUC. Reverting changes.
Training on augumented user 45260 40/50 current_auc = 0.46895544192841493
User 45260 AUC after training: 0.46530314097881664
User 45260 does not improve AUC. Reverting changes.
Training on augumented user 28357 41/50 current_auc = 0.46895544192841493
User 28357 AUC after training: 0.46712929145361576
User 28357 does not improve AUC. Reverting changes.
Training on augumented user 55000 42/50 current_auc = 0.46895544192841493
User 55000 AUC after training: 0.4682249817384952
User 55000 does not improve AUC. Reverting changes.
Training on augumented user 38521 43/50 current_auc = 0.46895544192841493
User 38521 AUC after training: 0.4678597516435354
User 38521 does not improve AUC. Reverting changes.
Training on augumented user 108775 44/50 current_auc = 0.46895544192841493
User 108775 AUC after training: 0.46749452154857557
User 108775 does not improve AUC. Reverting changes.
Training on augumented user 18812 45/50 current_auc = 0.46895544192841493
User 18812 AUC after training: 0.46895544192841493
User 18812 does not improve AUC. Reverting changes.
Training on augumented user 58774 46/50 current_auc = 0.46895544192841493
User 58774 AUC after training: 0.4696859021183345
User 58774 improves AUC. Keeping the model.
Training on augumented user 87275 47/50 current_auc = 0.4696859021183345
User 87275 AUC after training: 0.4693206720233747
User 87275 does not improve AUC. Reverting changes.
Training on augumented user 46786 48/50 current_auc = 0.4696859021183345
User 46786 AUC after training: 0.4689554419284149
User 46786 does not improve AUC. Reverting changes.
Training on augumented user 52679 49/50 current_auc = 0.4696859021183345
User 52679 AUC after training: 0.4689554419284149
User 52679 does not improve AUC. Reverting changes.
[2024-12-02 18:13:05.029072] start test user 110869 66/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:13:05.484329] start test user 110869 66/567 recall augumented users by random, augumented_users = [86727, 62750, 18806, 45933, 111823, 96282, 113925, 102806, 81075, 36225, 105136, 125333, 20736, 37305, 10267, 35045, 82331, 38838, 22206, 12238, 71551, 87683, 129677, 75190, 47594, 46674, 121304, 76257, 101149, 97009, 6645, 55345, 104079, 121826, 10867, 44619, 57796, 66585, 9271, 116415, 129829, 121391, 26903, 7542, 74961, 31006, 115876, 31520, 75826, 114198]
[2024-12-02 18:13:05.499489] user = 110869 Cloud 66/567
[2024-12-02 18:13:05.519793] user = 110869 Local 66/567
[2024-12-02 18:13:05.602567] user = 110869 Local+ 66/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:13:08.464570] user = 110869 MPDA- 66/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 86727 0/50 current_auc = 0.5
User 86727 AUC after training: 0.5
User 86727 does not improve AUC. Reverting changes.
Training on augumented user 62750 1/50 current_auc = 0.5
User 62750 AUC after training: 0.5
User 62750 does not improve AUC. Reverting changes.
Training on augumented user 18806 2/50 current_auc = 0.5
User 18806 AUC after training: 0.5
User 18806 does not improve AUC. Reverting changes.
Training on augumented user 45933 3/50 current_auc = 0.5
User 45933 AUC after training: 0.5
User 45933 does not improve AUC. Reverting changes.
Training on augumented user 111823 4/50 current_auc = 0.5
User 111823 AUC after training: 0.5
User 111823 does not improve AUC. Reverting changes.
Training on augumented user 96282 5/50 current_auc = 0.5
User 96282 AUC after training: 0.5
User 96282 does not improve AUC. Reverting changes.
Training on augumented user 113925 6/50 current_auc = 0.5
User 113925 AUC after training: 0.5
User 113925 does not improve AUC. Reverting changes.
Training on augumented user 102806 7/50 current_auc = 0.5
User 102806 AUC after training: 0.5
User 102806 does not improve AUC. Reverting changes.
Training on augumented user 81075 8/50 current_auc = 0.5
User 81075 AUC after training: 0.5
User 81075 does not improve AUC. Reverting changes.
Training on augumented user 36225 9/50 current_auc = 0.5
User 36225 AUC after training: 0.5
User 36225 does not improve AUC. Reverting changes.
Training on augumented user 105136 10/50 current_auc = 0.5
User 105136 AUC after training: 0.5
User 105136 does not improve AUC. Reverting changes.
Training on augumented user 125333 11/50 current_auc = 0.5
User 125333 AUC after training: 0.5
User 125333 does not improve AUC. Reverting changes.
Training on augumented user 20736 12/50 current_auc = 0.5
User 20736 AUC after training: 0.5
User 20736 does not improve AUC. Reverting changes.
Training on augumented user 37305 13/50 current_auc = 0.5
User 37305 AUC after training: 0.5
User 37305 does not improve AUC. Reverting changes.
Training on augumented user 10267 14/50 current_auc = 0.5
User 10267 AUC after training: 0.5
User 10267 does not improve AUC. Reverting changes.
Training on augumented user 35045 15/50 current_auc = 0.5
User 35045 AUC after training: 0.5
User 35045 does not improve AUC. Reverting changes.
Training on augumented user 82331 16/50 current_auc = 0.5
User 82331 AUC after training: 0.5
User 82331 does not improve AUC. Reverting changes.
Training on augumented user 38838 17/50 current_auc = 0.5
User 38838 AUC after training: 0.5
User 38838 does not improve AUC. Reverting changes.
Training on augumented user 22206 18/50 current_auc = 0.5
User 22206 AUC after training: 0.5
User 22206 does not improve AUC. Reverting changes.
Training on augumented user 12238 19/50 current_auc = 0.5
User 12238 AUC after training: 0.5
User 12238 does not improve AUC. Reverting changes.
Training on augumented user 71551 20/50 current_auc = 0.5
User 71551 AUC after training: 0.5
User 71551 does not improve AUC. Reverting changes.
Training on augumented user 87683 21/50 current_auc = 0.5
User 87683 AUC after training: 0.5
User 87683 does not improve AUC. Reverting changes.
Training on augumented user 129677 22/50 current_auc = 0.5
User 129677 AUC after training: 0.5
User 129677 does not improve AUC. Reverting changes.
Training on augumented user 75190 23/50 current_auc = 0.5
User 75190 AUC after training: 0.5
User 75190 does not improve AUC. Reverting changes.
Training on augumented user 47594 24/50 current_auc = 0.5
User 47594 AUC after training: 0.5
User 47594 does not improve AUC. Reverting changes.
Training on augumented user 46674 25/50 current_auc = 0.5
User 46674 AUC after training: 0.5
User 46674 does not improve AUC. Reverting changes.
Training on augumented user 121304 26/50 current_auc = 0.5
User 121304 AUC after training: 0.5
User 121304 does not improve AUC. Reverting changes.
Training on augumented user 76257 27/50 current_auc = 0.5
User 76257 AUC after training: 0.5
User 76257 does not improve AUC. Reverting changes.
Training on augumented user 101149 28/50 current_auc = 0.5
User 101149 AUC after training: 0.5
User 101149 does not improve AUC. Reverting changes.
Training on augumented user 97009 29/50 current_auc = 0.5
User 97009 AUC after training: 0.5
User 97009 does not improve AUC. Reverting changes.
Training on augumented user 6645 30/50 current_auc = 0.5
User 6645 AUC after training: 0.5
User 6645 does not improve AUC. Reverting changes.
Training on augumented user 55345 31/50 current_auc = 0.5
User 55345 AUC after training: 0.5
User 55345 does not improve AUC. Reverting changes.
Training on augumented user 104079 32/50 current_auc = 0.5
User 104079 AUC after training: 0.5
User 104079 does not improve AUC. Reverting changes.
Training on augumented user 121826 33/50 current_auc = 0.5
User 121826 AUC after training: 0.5
User 121826 does not improve AUC. Reverting changes.
Training on augumented user 10867 34/50 current_auc = 0.5
User 10867 AUC after training: 0.5
User 10867 does not improve AUC. Reverting changes.
Training on augumented user 44619 35/50 current_auc = 0.5
User 44619 AUC after training: 0.5
User 44619 does not improve AUC. Reverting changes.
Training on augumented user 57796 36/50 current_auc = 0.5
User 57796 AUC after training: 0.5
User 57796 does not improve AUC. Reverting changes.
Training on augumented user 66585 37/50 current_auc = 0.5
User 66585 AUC after training: 0.5
User 66585 does not improve AUC. Reverting changes.
Training on augumented user 9271 38/50 current_auc = 0.5
User 9271 AUC after training: 0.5
User 9271 does not improve AUC. Reverting changes.
Training on augumented user 116415 39/50 current_auc = 0.5
User 116415 AUC after training: 0.5
User 116415 does not improve AUC. Reverting changes.
Training on augumented user 129829 40/50 current_auc = 0.5
User 129829 AUC after training: 0.5
User 129829 does not improve AUC. Reverting changes.
Training on augumented user 121391 41/50 current_auc = 0.5
User 121391 AUC after training: 0.5
User 121391 does not improve AUC. Reverting changes.
Training on augumented user 26903 42/50 current_auc = 0.5
User 26903 AUC after training: 0.5
User 26903 does not improve AUC. Reverting changes.
Training on augumented user 7542 43/50 current_auc = 0.5
User 7542 AUC after training: 0.5
User 7542 does not improve AUC. Reverting changes.
Training on augumented user 74961 44/50 current_auc = 0.5
User 74961 AUC after training: 0.5
User 74961 does not improve AUC. Reverting changes.
Training on augumented user 31006 45/50 current_auc = 0.5
User 31006 AUC after training: 0.5
User 31006 does not improve AUC. Reverting changes.
Training on augumented user 115876 46/50 current_auc = 0.5
User 115876 AUC after training: 0.5
User 115876 does not improve AUC. Reverting changes.
Training on augumented user 31520 47/50 current_auc = 0.5
User 31520 AUC after training: 0.5
User 31520 does not improve AUC. Reverting changes.
Training on augumented user 75826 48/50 current_auc = 0.5
User 75826 AUC after training: 0.5
User 75826 does not improve AUC. Reverting changes.
Training on augumented user 114198 49/50 current_auc = 0.5
User 114198 AUC after training: 0.5
User 114198 does not improve AUC. Reverting changes.
[2024-12-02 18:13:39.144638] start test user 110899 67/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:13:39.712737] start test user 110899 67/567 recall augumented users by random, augumented_users = [22916, 117916, 18795, 84264, 119517, 29017, 53619, 30772, 17480, 126049, 71386, 99852, 58763, 3873, 49815, 1916, 40052, 119467, 65965, 72393, 103676, 84163, 24924, 52157, 113245, 83489, 28340, 20490, 88308, 84273, 75329, 120594, 100035, 55549, 81857, 39461, 13011, 9195, 119281, 32103, 75598, 87242, 109613, 43540, 68638, 12006, 96717, 68535, 83749, 130104]
[2024-12-02 18:13:39.771006] user = 110899 Cloud 67/567
[2024-12-02 18:13:39.799900] user = 110899 Local 67/567
[2024-12-02 18:13:39.877843] user = 110899 Local+ 67/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:13:42.779156] user = 110899 MPDA- 67/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.0
Training on augumented user 22916 0/50 current_auc = 0.0
User 22916 AUC after training: 0.0
User 22916 does not improve AUC. Reverting changes.
Training on augumented user 117916 1/50 current_auc = 0.0
User 117916 AUC after training: 0.0
User 117916 does not improve AUC. Reverting changes.
Training on augumented user 18795 2/50 current_auc = 0.0
User 18795 AUC after training: 0.0
User 18795 does not improve AUC. Reverting changes.
Training on augumented user 84264 3/50 current_auc = 0.0
User 84264 AUC after training: 0.0
User 84264 does not improve AUC. Reverting changes.
Training on augumented user 119517 4/50 current_auc = 0.0
User 119517 AUC after training: 0.0
User 119517 does not improve AUC. Reverting changes.
Training on augumented user 29017 5/50 current_auc = 0.0
User 29017 AUC after training: 0.0
User 29017 does not improve AUC. Reverting changes.
Training on augumented user 53619 6/50 current_auc = 0.0
User 53619 AUC after training: 0.0
User 53619 does not improve AUC. Reverting changes.
Training on augumented user 30772 7/50 current_auc = 0.0
User 30772 AUC after training: 0.0
User 30772 does not improve AUC. Reverting changes.
Training on augumented user 17480 8/50 current_auc = 0.0
User 17480 AUC after training: 0.0
User 17480 does not improve AUC. Reverting changes.
Training on augumented user 126049 9/50 current_auc = 0.0
User 126049 AUC after training: 0.0
User 126049 does not improve AUC. Reverting changes.
Training on augumented user 71386 10/50 current_auc = 0.0
User 71386 AUC after training: 0.0
User 71386 does not improve AUC. Reverting changes.
Training on augumented user 99852 11/50 current_auc = 0.0
User 99852 AUC after training: 0.0
User 99852 does not improve AUC. Reverting changes.
Training on augumented user 58763 12/50 current_auc = 0.0
User 58763 AUC after training: 0.0
User 58763 does not improve AUC. Reverting changes.
Training on augumented user 3873 13/50 current_auc = 0.0
User 3873 AUC after training: 0.0
User 3873 does not improve AUC. Reverting changes.
Training on augumented user 49815 14/50 current_auc = 0.0
User 49815 AUC after training: 0.0
User 49815 does not improve AUC. Reverting changes.
Training on augumented user 1916 15/50 current_auc = 0.0
User 1916 AUC after training: 0.0
User 1916 does not improve AUC. Reverting changes.
Training on augumented user 40052 16/50 current_auc = 0.0
User 40052 AUC after training: 0.0
User 40052 does not improve AUC. Reverting changes.
Training on augumented user 119467 17/50 current_auc = 0.0
User 119467 AUC after training: 0.0
User 119467 does not improve AUC. Reverting changes.
Training on augumented user 65965 18/50 current_auc = 0.0
User 65965 AUC after training: 0.0
User 65965 does not improve AUC. Reverting changes.
Training on augumented user 72393 19/50 current_auc = 0.0
User 72393 AUC after training: 0.0
User 72393 does not improve AUC. Reverting changes.
Training on augumented user 103676 20/50 current_auc = 0.0
User 103676 AUC after training: 0.0
User 103676 does not improve AUC. Reverting changes.
Training on augumented user 84163 21/50 current_auc = 0.0
User 84163 AUC after training: 0.0
User 84163 does not improve AUC. Reverting changes.
Training on augumented user 24924 22/50 current_auc = 0.0
User 24924 AUC after training: 0.0
User 24924 does not improve AUC. Reverting changes.
Training on augumented user 52157 23/50 current_auc = 0.0
User 52157 AUC after training: 0.0
User 52157 does not improve AUC. Reverting changes.
Training on augumented user 113245 24/50 current_auc = 0.0
User 113245 AUC after training: 0.0
User 113245 does not improve AUC. Reverting changes.
Training on augumented user 83489 25/50 current_auc = 0.0
User 83489 AUC after training: 0.0
User 83489 does not improve AUC. Reverting changes.
Training on augumented user 28340 26/50 current_auc = 0.0
User 28340 AUC after training: 0.0
User 28340 does not improve AUC. Reverting changes.
Training on augumented user 20490 27/50 current_auc = 0.0
User 20490 AUC after training: 0.0
User 20490 does not improve AUC. Reverting changes.
Training on augumented user 88308 28/50 current_auc = 0.0
User 88308 AUC after training: 0.0
User 88308 does not improve AUC. Reverting changes.
Training on augumented user 84273 29/50 current_auc = 0.0
User 84273 AUC after training: 0.0
User 84273 does not improve AUC. Reverting changes.
Training on augumented user 75329 30/50 current_auc = 0.0
User 75329 AUC after training: 0.0
User 75329 does not improve AUC. Reverting changes.
Training on augumented user 120594 31/50 current_auc = 0.0
User 120594 AUC after training: 0.0
User 120594 does not improve AUC. Reverting changes.
Training on augumented user 100035 32/50 current_auc = 0.0
User 100035 AUC after training: 0.0
User 100035 does not improve AUC. Reverting changes.
Training on augumented user 55549 33/50 current_auc = 0.0
User 55549 AUC after training: 0.0
User 55549 does not improve AUC. Reverting changes.
Training on augumented user 81857 34/50 current_auc = 0.0
User 81857 AUC after training: 0.0
User 81857 does not improve AUC. Reverting changes.
Training on augumented user 39461 35/50 current_auc = 0.0
User 39461 AUC after training: 0.0
User 39461 does not improve AUC. Reverting changes.
Training on augumented user 13011 36/50 current_auc = 0.0
User 13011 AUC after training: 0.0
User 13011 does not improve AUC. Reverting changes.
Training on augumented user 9195 37/50 current_auc = 0.0
User 9195 AUC after training: 0.0
User 9195 does not improve AUC. Reverting changes.
Training on augumented user 119281 38/50 current_auc = 0.0
User 119281 AUC after training: 0.0
User 119281 does not improve AUC. Reverting changes.
Training on augumented user 32103 39/50 current_auc = 0.0
User 32103 AUC after training: 0.0
User 32103 does not improve AUC. Reverting changes.
Training on augumented user 75598 40/50 current_auc = 0.0
User 75598 AUC after training: 0.0
User 75598 does not improve AUC. Reverting changes.
Training on augumented user 87242 41/50 current_auc = 0.0
User 87242 AUC after training: 0.0
User 87242 does not improve AUC. Reverting changes.
Training on augumented user 109613 42/50 current_auc = 0.0
User 109613 AUC after training: 0.0
User 109613 does not improve AUC. Reverting changes.
Training on augumented user 43540 43/50 current_auc = 0.0
User 43540 AUC after training: 0.0
User 43540 does not improve AUC. Reverting changes.
Training on augumented user 68638 44/50 current_auc = 0.0
User 68638 AUC after training: 0.0
User 68638 does not improve AUC. Reverting changes.
Training on augumented user 12006 45/50 current_auc = 0.0
User 12006 AUC after training: 0.0
User 12006 does not improve AUC. Reverting changes.
Training on augumented user 96717 46/50 current_auc = 0.0
User 96717 AUC after training: 0.0
User 96717 does not improve AUC. Reverting changes.
Training on augumented user 68535 47/50 current_auc = 0.0
User 68535 AUC after training: 0.0
User 68535 does not improve AUC. Reverting changes.
Training on augumented user 83749 48/50 current_auc = 0.0
User 83749 AUC after training: 0.0
User 83749 does not improve AUC. Reverting changes.
Training on augumented user 130104 49/50 current_auc = 0.0
User 130104 AUC after training: 0.0
User 130104 does not improve AUC. Reverting changes.
[2024-12-02 18:14:08.724084] start test user 110901 68/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:14:09.407067] start test user 110901 68/567 recall augumented users by random, augumented_users = [105501, 28506, 32029, 29412, 135366, 75073, 108307, 45863, 135905, 7768, 69501, 101621, 13183, 32596, 82950, 8102, 11169, 111021, 28678, 5101, 55027, 8669, 97340, 116585, 129153, 103107, 113787, 119033, 25209, 13018, 86177, 113921, 8160, 131847, 31149, 27636, 112258, 97864, 85398, 127556, 62819, 73910, 98752, 43512, 12937, 39157, 7570, 114469, 73431, 54901]
[2024-12-02 18:14:09.460291] user = 110901 Cloud 68/567
[2024-12-02 18:14:09.491966] user = 110901 Local 68/567
[2024-12-02 18:14:09.553739] user = 110901 Local+ 68/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:14:12.085035] user = 110901 MPDA- 68/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8125213821416354
Training on augumented user 105501 0/50 current_auc = 0.8125213821416354
User 105501 AUC after training: 0.8135477249401302
User 105501 improves AUC. Keeping the model.
Training on augumented user 28506 1/50 current_auc = 0.8135477249401302
User 28506 AUC after training: 0.8132056106739652
User 28506 does not improve AUC. Reverting changes.
Training on augumented user 32029 2/50 current_auc = 0.8135477249401302
User 32029 AUC after training: 0.8142319534724599
User 32029 improves AUC. Keeping the model.
Training on augumented user 29412 3/50 current_auc = 0.8142319534724599
User 29412 AUC after training: 0.8142319534724598
User 29412 does not improve AUC. Reverting changes.
Training on augumented user 135366 4/50 current_auc = 0.8142319534724599
User 135366 AUC after training: 0.813205610673965
User 135366 does not improve AUC. Reverting changes.
Training on augumented user 75073 5/50 current_auc = 0.8142319534724599
User 75073 AUC after training: 0.813889839206295
User 75073 does not improve AUC. Reverting changes.
Training on augumented user 108307 6/50 current_auc = 0.8142319534724599
User 108307 AUC after training: 0.8159425248032843
User 108307 improves AUC. Keeping the model.
Training on augumented user 45863 7/50 current_auc = 0.8159425248032843
User 45863 AUC after training: 0.8156004105371194
User 45863 does not improve AUC. Reverting changes.
Training on augumented user 135905 8/50 current_auc = 0.8159425248032843
User 135905 AUC after training: 0.8152582962709545
User 135905 does not improve AUC. Reverting changes.
Training on augumented user 7768 9/50 current_auc = 0.8159425248032843
User 7768 AUC after training: 0.8159425248032843
User 7768 does not improve AUC. Reverting changes.
Training on augumented user 69501 10/50 current_auc = 0.8159425248032843
User 69501 AUC after training: 0.8159425248032843
User 69501 does not improve AUC. Reverting changes.
Training on augumented user 101621 11/50 current_auc = 0.8159425248032843
User 101621 AUC after training: 0.8156004105371194
User 101621 does not improve AUC. Reverting changes.
Training on augumented user 13183 12/50 current_auc = 0.8159425248032843
User 13183 AUC after training: 0.8162846390694491
User 13183 improves AUC. Keeping the model.
Training on augumented user 32596 13/50 current_auc = 0.8162846390694491
User 32596 AUC after training: 0.8145740677386247
User 32596 does not improve AUC. Reverting changes.
Training on augumented user 82950 14/50 current_auc = 0.8162846390694491
User 82950 AUC after training: 0.8152582962709545
User 82950 does not improve AUC. Reverting changes.
Training on augumented user 8102 15/50 current_auc = 0.8162846390694491
User 8102 AUC after training: 0.8156004105371194
User 8102 does not improve AUC. Reverting changes.
Training on augumented user 11169 16/50 current_auc = 0.8162846390694491
User 11169 AUC after training: 0.8159425248032843
User 11169 does not improve AUC. Reverting changes.
Training on augumented user 111021 17/50 current_auc = 0.8162846390694491
User 111021 AUC after training: 0.8149161820047895
User 111021 does not improve AUC. Reverting changes.
Training on augumented user 28678 18/50 current_auc = 0.8162846390694491
User 28678 AUC after training: 0.8166267533356141
User 28678 improves AUC. Keeping the model.
Training on augumented user 5101 19/50 current_auc = 0.8166267533356141
User 5101 AUC after training: 0.8142319534724598
User 5101 does not improve AUC. Reverting changes.
Training on augumented user 55027 20/50 current_auc = 0.8166267533356141
User 55027 AUC after training: 0.8159425248032843
User 55027 does not improve AUC. Reverting changes.
Training on augumented user 8669 21/50 current_auc = 0.8166267533356141
User 8669 AUC after training: 0.8152582962709546
User 8669 does not improve AUC. Reverting changes.
Training on augumented user 97340 22/50 current_auc = 0.8166267533356141
User 97340 AUC after training: 0.8169688676017789
User 97340 improves AUC. Keeping the model.
Training on augumented user 116585 23/50 current_auc = 0.8169688676017789
User 116585 AUC after training: 0.8162846390694493
User 116585 does not improve AUC. Reverting changes.
Training on augumented user 129153 24/50 current_auc = 0.8169688676017789
User 129153 AUC after training: 0.8159425248032842
User 129153 does not improve AUC. Reverting changes.
Training on augumented user 103107 25/50 current_auc = 0.8169688676017789
User 103107 AUC after training: 0.816968867601779
User 103107 improves AUC. Keeping the model.
Training on augumented user 113787 26/50 current_auc = 0.816968867601779
User 113787 AUC after training: 0.816968867601779
User 113787 does not improve AUC. Reverting changes.
Training on augumented user 119033 27/50 current_auc = 0.816968867601779
User 119033 AUC after training: 0.816968867601779
User 119033 does not improve AUC. Reverting changes.
Training on augumented user 25209 28/50 current_auc = 0.816968867601779
User 25209 AUC after training: 0.8169688676017791
User 25209 improves AUC. Keeping the model.
Training on augumented user 13018 29/50 current_auc = 0.8169688676017791
User 13018 AUC after training: 0.8179952104002737
User 13018 improves AUC. Keeping the model.
Training on augumented user 86177 30/50 current_auc = 0.8179952104002737
User 86177 AUC after training: 0.8186794389326035
User 86177 improves AUC. Keeping the model.
Training on augumented user 113921 31/50 current_auc = 0.8186794389326035
User 113921 AUC after training: 0.8183373246664386
User 113921 does not improve AUC. Reverting changes.
Training on augumented user 8160 32/50 current_auc = 0.8186794389326035
User 8160 AUC after training: 0.8190215531987685
User 8160 improves AUC. Keeping the model.
Training on augumented user 131847 33/50 current_auc = 0.8190215531987685
User 131847 AUC after training: 0.8179952104002738
User 131847 does not improve AUC. Reverting changes.
Training on augumented user 31149 34/50 current_auc = 0.8190215531987685
User 31149 AUC after training: 0.8179952104002737
User 31149 does not improve AUC. Reverting changes.
Training on augumented user 27636 35/50 current_auc = 0.8190215531987685
User 27636 AUC after training: 0.8162846390694491
User 27636 does not improve AUC. Reverting changes.
Training on augumented user 112258 36/50 current_auc = 0.8190215531987685
User 112258 AUC after training: 0.8179952104002738
User 112258 does not improve AUC. Reverting changes.
Training on augumented user 97864 37/50 current_auc = 0.8190215531987685
User 97864 AUC after training: 0.8190215531987685
User 97864 does not improve AUC. Reverting changes.
Training on augumented user 85398 38/50 current_auc = 0.8190215531987685
User 85398 AUC after training: 0.8183373246664386
User 85398 does not improve AUC. Reverting changes.
Training on augumented user 127556 39/50 current_auc = 0.8190215531987685
User 127556 AUC after training: 0.8183373246664386
User 127556 does not improve AUC. Reverting changes.
Training on augumented user 62819 40/50 current_auc = 0.8190215531987685
User 62819 AUC after training: 0.8193636674649333
User 62819 improves AUC. Keeping the model.
Training on augumented user 73910 41/50 current_auc = 0.8193636674649333
User 73910 AUC after training: 0.8186794389326035
User 73910 does not improve AUC. Reverting changes.
Training on augumented user 98752 42/50 current_auc = 0.8193636674649333
User 98752 AUC after training: 0.8186794389326035
User 98752 does not improve AUC. Reverting changes.
Training on augumented user 43512 43/50 current_auc = 0.8193636674649333
User 43512 AUC after training: 0.8152582962709545
User 43512 does not improve AUC. Reverting changes.
Training on augumented user 12937 44/50 current_auc = 0.8193636674649333
User 12937 AUC after training: 0.8183373246664386
User 12937 does not improve AUC. Reverting changes.
Training on augumented user 39157 45/50 current_auc = 0.8193636674649333
User 39157 AUC after training: 0.8186794389326035
User 39157 does not improve AUC. Reverting changes.
Training on augumented user 7570 46/50 current_auc = 0.8193636674649333
User 7570 AUC after training: 0.8166267533356141
User 7570 does not improve AUC. Reverting changes.
Training on augumented user 114469 47/50 current_auc = 0.8193636674649333
User 114469 AUC after training: 0.8186794389326035
User 114469 does not improve AUC. Reverting changes.
Training on augumented user 73431 48/50 current_auc = 0.8193636674649333
User 73431 AUC after training: 0.8193636674649333
User 73431 does not improve AUC. Reverting changes.
Training on augumented user 54901 49/50 current_auc = 0.8193636674649333
User 54901 AUC after training: 0.8186794389326035
User 54901 does not improve AUC. Reverting changes.
[2024-12-02 18:14:40.666462] start test user 110906 69/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:14:41.125045] start test user 110906 69/567 recall augumented users by random, augumented_users = [23855, 29132, 86846, 112450, 137646, 89406, 92554, 22453, 54407, 122748, 63454, 119144, 96535, 22671, 12581, 96383, 11840, 55083, 90201, 131396, 10180, 13148, 85343, 5144, 84482, 11674, 77089, 4535, 115973, 4116, 14519, 45756, 119325, 91356, 28182, 46622, 106522, 90577, 27607, 54106, 43112, 88334, 109354, 66915, 74809, 36296, 51669, 37060, 108156, 111695]
[2024-12-02 18:14:41.147840] user = 110906 Cloud 69/567
[2024-12-02 18:14:41.188785] user = 110906 Local 69/567
[2024-12-02 18:14:41.272064] user = 110906 Local+ 69/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:14:43.650993] user = 110906 MPDA- 69/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7205000000000001
Training on augumented user 23855 0/50 current_auc = 0.7205000000000001
User 23855 AUC after training: 0.7204
User 23855 does not improve AUC. Reverting changes.
Training on augumented user 29132 1/50 current_auc = 0.7205000000000001
User 29132 AUC after training: 0.7199
User 29132 does not improve AUC. Reverting changes.
Training on augumented user 86846 2/50 current_auc = 0.7205000000000001
User 86846 AUC after training: 0.7207
User 86846 improves AUC. Keeping the model.
Training on augumented user 112450 3/50 current_auc = 0.7207
User 112450 AUC after training: 0.72025
User 112450 does not improve AUC. Reverting changes.
Training on augumented user 137646 4/50 current_auc = 0.7207
User 137646 AUC after training: 0.7204
User 137646 does not improve AUC. Reverting changes.
Training on augumented user 89406 5/50 current_auc = 0.7207
User 89406 AUC after training: 0.721
User 89406 improves AUC. Keeping the model.
Training on augumented user 92554 6/50 current_auc = 0.721
User 92554 AUC after training: 0.7213499999999999
User 92554 improves AUC. Keeping the model.
Training on augumented user 22453 7/50 current_auc = 0.7213499999999999
User 22453 AUC after training: 0.72155
User 22453 improves AUC. Keeping the model.
Training on augumented user 54407 8/50 current_auc = 0.72155
User 54407 AUC after training: 0.7219
User 54407 improves AUC. Keeping the model.
Training on augumented user 122748 9/50 current_auc = 0.7219
User 122748 AUC after training: 0.7217000000000001
User 122748 does not improve AUC. Reverting changes.
Training on augumented user 63454 10/50 current_auc = 0.7219
User 63454 AUC after training: 0.7219
User 63454 does not improve AUC. Reverting changes.
Training on augumented user 119144 11/50 current_auc = 0.7219
User 119144 AUC after training: 0.7216999999999999
User 119144 does not improve AUC. Reverting changes.
Training on augumented user 96535 12/50 current_auc = 0.7219
User 96535 AUC after training: 0.7216
User 96535 does not improve AUC. Reverting changes.
Training on augumented user 22671 13/50 current_auc = 0.7219
User 22671 AUC after training: 0.7217000000000001
User 22671 does not improve AUC. Reverting changes.
Training on augumented user 12581 14/50 current_auc = 0.7219
User 12581 AUC after training: 0.7214499999999999
User 12581 does not improve AUC. Reverting changes.
Training on augumented user 96383 15/50 current_auc = 0.7219
User 96383 AUC after training: 0.7216
User 96383 does not improve AUC. Reverting changes.
Training on augumented user 11840 16/50 current_auc = 0.7219
User 11840 AUC after training: 0.72135
User 11840 does not improve AUC. Reverting changes.
Training on augumented user 55083 17/50 current_auc = 0.7219
User 55083 AUC after training: 0.7216
User 55083 does not improve AUC. Reverting changes.
Training on augumented user 90201 18/50 current_auc = 0.7219
User 90201 AUC after training: 0.7211000000000001
User 90201 does not improve AUC. Reverting changes.
Training on augumented user 131396 19/50 current_auc = 0.7219
User 131396 AUC after training: 0.7209
User 131396 does not improve AUC. Reverting changes.
Training on augumented user 10180 20/50 current_auc = 0.7219
User 10180 AUC after training: 0.7217
User 10180 does not improve AUC. Reverting changes.
Training on augumented user 13148 21/50 current_auc = 0.7219
User 13148 AUC after training: 0.7198
User 13148 does not improve AUC. Reverting changes.
Training on augumented user 85343 22/50 current_auc = 0.7219
User 85343 AUC after training: 0.72115
User 85343 does not improve AUC. Reverting changes.
Training on augumented user 5144 23/50 current_auc = 0.7219
User 5144 AUC after training: 0.7216999999999999
User 5144 does not improve AUC. Reverting changes.
Training on augumented user 84482 24/50 current_auc = 0.7219
User 84482 AUC after training: 0.7211
User 84482 does not improve AUC. Reverting changes.
Training on augumented user 11674 25/50 current_auc = 0.7219
User 11674 AUC after training: 0.7212000000000002
User 11674 does not improve AUC. Reverting changes.
Training on augumented user 77089 26/50 current_auc = 0.7219
User 77089 AUC after training: 0.722
User 77089 improves AUC. Keeping the model.
Training on augumented user 4535 27/50 current_auc = 0.722
User 4535 AUC after training: 0.7220500000000001
User 4535 improves AUC. Keeping the model.
Training on augumented user 115973 28/50 current_auc = 0.7220500000000001
User 115973 AUC after training: 0.72175
User 115973 does not improve AUC. Reverting changes.
Training on augumented user 4116 29/50 current_auc = 0.7220500000000001
User 4116 AUC after training: 0.7223
User 4116 improves AUC. Keeping the model.
Training on augumented user 14519 30/50 current_auc = 0.7223
User 14519 AUC after training: 0.7217
User 14519 does not improve AUC. Reverting changes.
Training on augumented user 45756 31/50 current_auc = 0.7223
User 45756 AUC after training: 0.7224999999999999
User 45756 improves AUC. Keeping the model.
Training on augumented user 119325 32/50 current_auc = 0.7224999999999999
User 119325 AUC after training: 0.7222000000000001
User 119325 does not improve AUC. Reverting changes.
Training on augumented user 91356 33/50 current_auc = 0.7224999999999999
User 91356 AUC after training: 0.7212000000000001
User 91356 does not improve AUC. Reverting changes.
Training on augumented user 28182 34/50 current_auc = 0.7224999999999999
User 28182 AUC after training: 0.7226
User 28182 improves AUC. Keeping the model.
Training on augumented user 46622 35/50 current_auc = 0.7226
User 46622 AUC after training: 0.7222999999999999
User 46622 does not improve AUC. Reverting changes.
Training on augumented user 106522 36/50 current_auc = 0.7226
User 106522 AUC after training: 0.72235
User 106522 does not improve AUC. Reverting changes.
Training on augumented user 90577 37/50 current_auc = 0.7226
User 90577 AUC after training: 0.7224
User 90577 does not improve AUC. Reverting changes.
Training on augumented user 27607 38/50 current_auc = 0.7226
User 27607 AUC after training: 0.72195
User 27607 does not improve AUC. Reverting changes.
Training on augumented user 54106 39/50 current_auc = 0.7226
User 54106 AUC after training: 0.7227
User 54106 improves AUC. Keeping the model.
Training on augumented user 43112 40/50 current_auc = 0.7227
User 43112 AUC after training: 0.7229
User 43112 improves AUC. Keeping the model.
Training on augumented user 88334 41/50 current_auc = 0.7229
User 88334 AUC after training: 0.7226
User 88334 does not improve AUC. Reverting changes.
Training on augumented user 109354 42/50 current_auc = 0.7229
User 109354 AUC after training: 0.7214
User 109354 does not improve AUC. Reverting changes.
Training on augumented user 66915 43/50 current_auc = 0.7229
User 66915 AUC after training: 0.7229000000000001
User 66915 improves AUC. Keeping the model.
Training on augumented user 74809 44/50 current_auc = 0.7229000000000001
User 74809 AUC after training: 0.7226
User 74809 does not improve AUC. Reverting changes.
Training on augumented user 36296 45/50 current_auc = 0.7229000000000001
User 36296 AUC after training: 0.72275
User 36296 does not improve AUC. Reverting changes.
Training on augumented user 51669 46/50 current_auc = 0.7229000000000001
User 51669 AUC after training: 0.7232999999999999
User 51669 improves AUC. Keeping the model.
Training on augumented user 37060 47/50 current_auc = 0.7232999999999999
User 37060 AUC after training: 0.7228
User 37060 does not improve AUC. Reverting changes.
Training on augumented user 108156 48/50 current_auc = 0.7232999999999999
User 108156 AUC after training: 0.7229000000000001
User 108156 does not improve AUC. Reverting changes.
Training on augumented user 111695 49/50 current_auc = 0.7232999999999999
User 111695 AUC after training: 0.7228
User 111695 does not improve AUC. Reverting changes.
[2024-12-02 18:15:11.268957] start test user 110917 70/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:15:11.755033] start test user 110917 70/567 recall augumented users by random, augumented_users = [2043, 91572, 135410, 93453, 60419, 106752, 4379, 95678, 113851, 114259, 100123, 103898, 98509, 28639, 33040, 93378, 39017, 116888, 33041, 56877, 2350, 58155, 120615, 82686, 97554, 55294, 124725, 40964, 85655, 226, 4629, 45620, 81924, 28228, 58298, 12251, 114115, 100753, 54028, 92782, 20069, 37532, 74568, 46767, 108334, 53488, 129979, 103040, 129516, 79121]
[2024-12-02 18:15:11.776136] user = 110917 Cloud 70/567
[2024-12-02 18:15:11.796702] user = 110917 Local 70/567
[2024-12-02 18:15:11.891746] user = 110917 Local+ 70/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:15:13.799097] user = 110917 MPDA- 70/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5666666666666667
Training on augumented user 2043 0/50 current_auc = 0.5666666666666667
User 2043 AUC after training: 0.5666666666666667
User 2043 does not improve AUC. Reverting changes.
Training on augumented user 91572 1/50 current_auc = 0.5666666666666667
User 91572 AUC after training: 0.5733333333333334
User 91572 improves AUC. Keeping the model.
Training on augumented user 135410 2/50 current_auc = 0.5733333333333334
User 135410 AUC after training: 0.5733333333333334
User 135410 does not improve AUC. Reverting changes.
Training on augumented user 93453 3/50 current_auc = 0.5733333333333334
User 93453 AUC after training: 0.5733333333333334
User 93453 does not improve AUC. Reverting changes.
Training on augumented user 60419 4/50 current_auc = 0.5733333333333334
User 60419 AUC after training: 0.5733333333333334
User 60419 does not improve AUC. Reverting changes.
Training on augumented user 106752 5/50 current_auc = 0.5733333333333334
User 106752 AUC after training: 0.5733333333333334
User 106752 does not improve AUC. Reverting changes.
Training on augumented user 4379 6/50 current_auc = 0.5733333333333334
User 4379 AUC after training: 0.5733333333333334
User 4379 does not improve AUC. Reverting changes.
Training on augumented user 95678 7/50 current_auc = 0.5733333333333334
User 95678 AUC after training: 0.5733333333333334
User 95678 does not improve AUC. Reverting changes.
Training on augumented user 113851 8/50 current_auc = 0.5733333333333334
User 113851 AUC after training: 0.5733333333333334
User 113851 does not improve AUC. Reverting changes.
Training on augumented user 114259 9/50 current_auc = 0.5733333333333334
User 114259 AUC after training: 0.5733333333333334
User 114259 does not improve AUC. Reverting changes.
Training on augumented user 100123 10/50 current_auc = 0.5733333333333334
User 100123 AUC after training: 0.5733333333333334
User 100123 does not improve AUC. Reverting changes.
Training on augumented user 103898 11/50 current_auc = 0.5733333333333334
User 103898 AUC after training: 0.5800000000000001
User 103898 improves AUC. Keeping the model.
Training on augumented user 98509 12/50 current_auc = 0.5800000000000001
User 98509 AUC after training: 0.5866666666666667
User 98509 improves AUC. Keeping the model.
Training on augumented user 28639 13/50 current_auc = 0.5866666666666667
User 28639 AUC after training: 0.5800000000000001
User 28639 does not improve AUC. Reverting changes.
Training on augumented user 33040 14/50 current_auc = 0.5866666666666667
User 33040 AUC after training: 0.5866666666666667
User 33040 does not improve AUC. Reverting changes.
Training on augumented user 93378 15/50 current_auc = 0.5866666666666667
User 93378 AUC after training: 0.5800000000000001
User 93378 does not improve AUC. Reverting changes.
Training on augumented user 39017 16/50 current_auc = 0.5866666666666667
User 39017 AUC after training: 0.5866666666666667
User 39017 does not improve AUC. Reverting changes.
Training on augumented user 116888 17/50 current_auc = 0.5866666666666667
User 116888 AUC after training: 0.5866666666666667
User 116888 does not improve AUC. Reverting changes.
Training on augumented user 33041 18/50 current_auc = 0.5866666666666667
User 33041 AUC after training: 0.5800000000000001
User 33041 does not improve AUC. Reverting changes.
Training on augumented user 56877 19/50 current_auc = 0.5866666666666667
User 56877 AUC after training: 0.5800000000000001
User 56877 does not improve AUC. Reverting changes.
Training on augumented user 2350 20/50 current_auc = 0.5866666666666667
User 2350 AUC after training: 0.5666666666666667
User 2350 does not improve AUC. Reverting changes.
Training on augumented user 58155 21/50 current_auc = 0.5866666666666667
User 58155 AUC after training: 0.5766666666666667
User 58155 does not improve AUC. Reverting changes.
Training on augumented user 120615 22/50 current_auc = 0.5866666666666667
User 120615 AUC after training: 0.5800000000000001
User 120615 does not improve AUC. Reverting changes.
Training on augumented user 82686 23/50 current_auc = 0.5866666666666667
User 82686 AUC after training: 0.5866666666666667
User 82686 does not improve AUC. Reverting changes.
Training on augumented user 97554 24/50 current_auc = 0.5866666666666667
User 97554 AUC after training: 0.5866666666666667
User 97554 does not improve AUC. Reverting changes.
Training on augumented user 55294 25/50 current_auc = 0.5866666666666667
User 55294 AUC after training: 0.5800000000000001
User 55294 does not improve AUC. Reverting changes.
Training on augumented user 124725 26/50 current_auc = 0.5866666666666667
User 124725 AUC after training: 0.5733333333333334
User 124725 does not improve AUC. Reverting changes.
Training on augumented user 40964 27/50 current_auc = 0.5866666666666667
User 40964 AUC after training: 0.5866666666666667
User 40964 does not improve AUC. Reverting changes.
Training on augumented user 85655 28/50 current_auc = 0.5866666666666667
User 85655 AUC after training: 0.5733333333333334
User 85655 does not improve AUC. Reverting changes.
Training on augumented user 226 29/50 current_auc = 0.5866666666666667
User 226 AUC after training: 0.5800000000000001
User 226 does not improve AUC. Reverting changes.
Training on augumented user 4629 30/50 current_auc = 0.5866666666666667
User 4629 AUC after training: 0.5800000000000001
User 4629 does not improve AUC. Reverting changes.
Training on augumented user 45620 31/50 current_auc = 0.5866666666666667
User 45620 AUC after training: 0.5866666666666667
User 45620 does not improve AUC. Reverting changes.
Training on augumented user 81924 32/50 current_auc = 0.5866666666666667
User 81924 AUC after training: 0.5866666666666667
User 81924 does not improve AUC. Reverting changes.
Training on augumented user 28228 33/50 current_auc = 0.5866666666666667
User 28228 AUC after training: 0.5800000000000001
User 28228 does not improve AUC. Reverting changes.
Training on augumented user 58298 34/50 current_auc = 0.5866666666666667
User 58298 AUC after training: 0.5866666666666667
User 58298 does not improve AUC. Reverting changes.
Training on augumented user 12251 35/50 current_auc = 0.5866666666666667
User 12251 AUC after training: 0.5800000000000001
User 12251 does not improve AUC. Reverting changes.
Training on augumented user 114115 36/50 current_auc = 0.5866666666666667
User 114115 AUC after training: 0.5800000000000001
User 114115 does not improve AUC. Reverting changes.
Training on augumented user 100753 37/50 current_auc = 0.5866666666666667
User 100753 AUC after training: 0.5800000000000001
User 100753 does not improve AUC. Reverting changes.
Training on augumented user 54028 38/50 current_auc = 0.5866666666666667
User 54028 AUC after training: 0.5866666666666667
User 54028 does not improve AUC. Reverting changes.
Training on augumented user 92782 39/50 current_auc = 0.5866666666666667
User 92782 AUC after training: 0.5800000000000001
User 92782 does not improve AUC. Reverting changes.
Training on augumented user 20069 40/50 current_auc = 0.5866666666666667
User 20069 AUC after training: 0.5800000000000001
User 20069 does not improve AUC. Reverting changes.
Training on augumented user 37532 41/50 current_auc = 0.5866666666666667
User 37532 AUC after training: 0.5800000000000001
User 37532 does not improve AUC. Reverting changes.
Training on augumented user 74568 42/50 current_auc = 0.5866666666666667
User 74568 AUC after training: 0.5866666666666667
User 74568 does not improve AUC. Reverting changes.
Training on augumented user 46767 43/50 current_auc = 0.5866666666666667
User 46767 AUC after training: 0.5800000000000001
User 46767 does not improve AUC. Reverting changes.
Training on augumented user 108334 44/50 current_auc = 0.5866666666666667
User 108334 AUC after training: 0.5800000000000001
User 108334 does not improve AUC. Reverting changes.
Training on augumented user 53488 45/50 current_auc = 0.5866666666666667
User 53488 AUC after training: 0.5800000000000001
User 53488 does not improve AUC. Reverting changes.
Training on augumented user 129979 46/50 current_auc = 0.5866666666666667
User 129979 AUC after training: 0.5800000000000001
User 129979 does not improve AUC. Reverting changes.
Training on augumented user 103040 47/50 current_auc = 0.5866666666666667
User 103040 AUC after training: 0.5866666666666667
User 103040 does not improve AUC. Reverting changes.
Training on augumented user 129516 48/50 current_auc = 0.5866666666666667
User 129516 AUC after training: 0.5866666666666667
User 129516 does not improve AUC. Reverting changes.
Training on augumented user 79121 49/50 current_auc = 0.5866666666666667
User 79121 AUC after training: 0.5866666666666667
User 79121 does not improve AUC. Reverting changes.
[2024-12-02 18:15:41.780255] start test user 110970 71/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:15:42.219392] start test user 110970 71/567 recall augumented users by random, augumented_users = [85618, 62943, 117782, 72347, 109753, 14107, 58164, 15650, 43283, 71201, 111934, 8268, 20812, 22706, 135360, 41279, 132923, 60330, 23934, 7536, 6289, 100820, 49999, 31857, 40849, 33983, 27146, 137634, 109487, 134406, 137429, 64986, 65118, 52899, 38430, 11090, 14765, 114431, 61186, 59272, 76905, 92225, 10294, 64332, 110519, 37102, 84139, 64736, 67475, 1131]
[2024-12-02 18:15:42.233799] user = 110970 Cloud 71/567
[2024-12-02 18:15:42.243931] user = 110970 Local 71/567
[2024-12-02 18:15:42.276812] user = 110970 Local+ 71/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:15:44.996610] user = 110970 MPDA- 71/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5584415584415585
Training on augumented user 85618 0/50 current_auc = 0.5584415584415585
User 85618 AUC after training: 0.5584415584415585
User 85618 does not improve AUC. Reverting changes.
Training on augumented user 62943 1/50 current_auc = 0.5584415584415585
User 62943 AUC after training: 0.5649350649350648
User 62943 improves AUC. Keeping the model.
Training on augumented user 117782 2/50 current_auc = 0.5649350649350648
User 117782 AUC after training: 0.5649350649350648
User 117782 does not improve AUC. Reverting changes.
Training on augumented user 72347 3/50 current_auc = 0.5649350649350648
User 72347 AUC after training: 0.564935064935065
User 72347 improves AUC. Keeping the model.
Training on augumented user 109753 4/50 current_auc = 0.564935064935065
User 109753 AUC after training: 0.5714285714285714
User 109753 improves AUC. Keeping the model.
Training on augumented user 14107 5/50 current_auc = 0.5714285714285714
User 14107 AUC after training: 0.5714285714285714
User 14107 does not improve AUC. Reverting changes.
Training on augumented user 58164 6/50 current_auc = 0.5714285714285714
User 58164 AUC after training: 0.564935064935065
User 58164 does not improve AUC. Reverting changes.
Training on augumented user 15650 7/50 current_auc = 0.5714285714285714
User 15650 AUC after training: 0.5714285714285714
User 15650 does not improve AUC. Reverting changes.
Training on augumented user 43283 8/50 current_auc = 0.5714285714285714
User 43283 AUC after training: 0.5714285714285714
User 43283 does not improve AUC. Reverting changes.
Training on augumented user 71201 9/50 current_auc = 0.5714285714285714
User 71201 AUC after training: 0.564935064935065
User 71201 does not improve AUC. Reverting changes.
Training on augumented user 111934 10/50 current_auc = 0.5714285714285714
User 111934 AUC after training: 0.5714285714285714
User 111934 does not improve AUC. Reverting changes.
Training on augumented user 8268 11/50 current_auc = 0.5714285714285714
User 8268 AUC after training: 0.5714285714285714
User 8268 does not improve AUC. Reverting changes.
Training on augumented user 20812 12/50 current_auc = 0.5714285714285714
User 20812 AUC after training: 0.5714285714285714
User 20812 does not improve AUC. Reverting changes.
Training on augumented user 22706 13/50 current_auc = 0.5714285714285714
User 22706 AUC after training: 0.5714285714285714
User 22706 does not improve AUC. Reverting changes.
Training on augumented user 135360 14/50 current_auc = 0.5714285714285714
User 135360 AUC after training: 0.564935064935065
User 135360 does not improve AUC. Reverting changes.
Training on augumented user 41279 15/50 current_auc = 0.5714285714285714
User 41279 AUC after training: 0.5714285714285714
User 41279 does not improve AUC. Reverting changes.
Training on augumented user 132923 16/50 current_auc = 0.5714285714285714
User 132923 AUC after training: 0.5714285714285714
User 132923 does not improve AUC. Reverting changes.
Training on augumented user 60330 17/50 current_auc = 0.5714285714285714
User 60330 AUC after training: 0.5714285714285714
User 60330 does not improve AUC. Reverting changes.
Training on augumented user 23934 18/50 current_auc = 0.5714285714285714
User 23934 AUC after training: 0.564935064935065
User 23934 does not improve AUC. Reverting changes.
Training on augumented user 7536 19/50 current_auc = 0.5714285714285714
User 7536 AUC after training: 0.5714285714285714
User 7536 does not improve AUC. Reverting changes.
Training on augumented user 6289 20/50 current_auc = 0.5714285714285714
User 6289 AUC after training: 0.5584415584415584
User 6289 does not improve AUC. Reverting changes.
Training on augumented user 100820 21/50 current_auc = 0.5714285714285714
User 100820 AUC after training: 0.564935064935065
User 100820 does not improve AUC. Reverting changes.
Training on augumented user 49999 22/50 current_auc = 0.5714285714285714
User 49999 AUC after training: 0.577922077922078
User 49999 improves AUC. Keeping the model.
Training on augumented user 31857 23/50 current_auc = 0.577922077922078
User 31857 AUC after training: 0.577922077922078
User 31857 does not improve AUC. Reverting changes.
Training on augumented user 40849 24/50 current_auc = 0.577922077922078
User 40849 AUC after training: 0.577922077922078
User 40849 does not improve AUC. Reverting changes.
Training on augumented user 33983 25/50 current_auc = 0.577922077922078
User 33983 AUC after training: 0.577922077922078
User 33983 does not improve AUC. Reverting changes.
Training on augumented user 27146 26/50 current_auc = 0.577922077922078
User 27146 AUC after training: 0.577922077922078
User 27146 does not improve AUC. Reverting changes.
Training on augumented user 137634 27/50 current_auc = 0.577922077922078
User 137634 AUC after training: 0.577922077922078
User 137634 does not improve AUC. Reverting changes.
Training on augumented user 109487 28/50 current_auc = 0.577922077922078
User 109487 AUC after training: 0.577922077922078
User 109487 does not improve AUC. Reverting changes.
Training on augumented user 134406 29/50 current_auc = 0.577922077922078
User 134406 AUC after training: 0.577922077922078
User 134406 does not improve AUC. Reverting changes.
Training on augumented user 137429 30/50 current_auc = 0.577922077922078
User 137429 AUC after training: 0.577922077922078
User 137429 does not improve AUC. Reverting changes.
Training on augumented user 64986 31/50 current_auc = 0.577922077922078
User 64986 AUC after training: 0.577922077922078
User 64986 does not improve AUC. Reverting changes.
Training on augumented user 65118 32/50 current_auc = 0.577922077922078
User 65118 AUC after training: 0.577922077922078
User 65118 does not improve AUC. Reverting changes.
Training on augumented user 52899 33/50 current_auc = 0.577922077922078
User 52899 AUC after training: 0.577922077922078
User 52899 does not improve AUC. Reverting changes.
Training on augumented user 38430 34/50 current_auc = 0.577922077922078
User 38430 AUC after training: 0.577922077922078
User 38430 does not improve AUC. Reverting changes.
Training on augumented user 11090 35/50 current_auc = 0.577922077922078
User 11090 AUC after training: 0.577922077922078
User 11090 does not improve AUC. Reverting changes.
Training on augumented user 14765 36/50 current_auc = 0.577922077922078
User 14765 AUC after training: 0.577922077922078
User 14765 does not improve AUC. Reverting changes.
Training on augumented user 114431 37/50 current_auc = 0.577922077922078
User 114431 AUC after training: 0.577922077922078
User 114431 does not improve AUC. Reverting changes.
Training on augumented user 61186 38/50 current_auc = 0.577922077922078
User 61186 AUC after training: 0.577922077922078
User 61186 does not improve AUC. Reverting changes.
Training on augumented user 59272 39/50 current_auc = 0.577922077922078
User 59272 AUC after training: 0.577922077922078
User 59272 does not improve AUC. Reverting changes.
Training on augumented user 76905 40/50 current_auc = 0.577922077922078
User 76905 AUC after training: 0.577922077922078
User 76905 does not improve AUC. Reverting changes.
Training on augumented user 92225 41/50 current_auc = 0.577922077922078
User 92225 AUC after training: 0.577922077922078
User 92225 does not improve AUC. Reverting changes.
Training on augumented user 10294 42/50 current_auc = 0.577922077922078
User 10294 AUC after training: 0.577922077922078
User 10294 does not improve AUC. Reverting changes.
Training on augumented user 64332 43/50 current_auc = 0.577922077922078
User 64332 AUC after training: 0.577922077922078
User 64332 does not improve AUC. Reverting changes.
Training on augumented user 110519 44/50 current_auc = 0.577922077922078
User 110519 AUC after training: 0.577922077922078
User 110519 does not improve AUC. Reverting changes.
Training on augumented user 37102 45/50 current_auc = 0.577922077922078
User 37102 AUC after training: 0.577922077922078
User 37102 does not improve AUC. Reverting changes.
Training on augumented user 84139 46/50 current_auc = 0.577922077922078
User 84139 AUC after training: 0.577922077922078
User 84139 does not improve AUC. Reverting changes.
Training on augumented user 64736 47/50 current_auc = 0.577922077922078
User 64736 AUC after training: 0.577922077922078
User 64736 does not improve AUC. Reverting changes.
Training on augumented user 67475 48/50 current_auc = 0.577922077922078
User 67475 AUC after training: 0.577922077922078
User 67475 does not improve AUC. Reverting changes.
Training on augumented user 1131 49/50 current_auc = 0.577922077922078
User 1131 AUC after training: 0.577922077922078
User 1131 does not improve AUC. Reverting changes.
[2024-12-02 18:16:12.096645] start test user 110991 72/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:16:12.765943] start test user 110991 72/567 recall augumented users by random, augumented_users = [5170, 97536, 73141, 27747, 122116, 69014, 111940, 101264, 65848, 10708, 12531, 128597, 63673, 86704, 58131, 11909, 104817, 97602, 110743, 66091, 18370, 89299, 21276, 136525, 89679, 34669, 119711, 30298, 56791, 110752, 86368, 103060, 47223, 17450, 106950, 52103, 69488, 105496, 27873, 135587, 120401, 119143, 105384, 116871, 70824, 5716, 65815, 26432, 97635, 44976]
[2024-12-02 18:16:12.796104] user = 110991 Cloud 72/567
[2024-12-02 18:16:12.820655] user = 110991 Local 72/567
[2024-12-02 18:16:13.141590] user = 110991 Local+ 72/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:16:15.327130] user = 110991 MPDA- 72/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6317934782608695
Training on augumented user 5170 0/50 current_auc = 0.6317934782608695
User 5170 AUC after training: 0.631340579710145
User 5170 does not improve AUC. Reverting changes.
Training on augumented user 97536 1/50 current_auc = 0.6317934782608695
User 97536 AUC after training: 0.6317934782608695
User 97536 does not improve AUC. Reverting changes.
Training on augumented user 73141 2/50 current_auc = 0.6317934782608695
User 73141 AUC after training: 0.6317934782608696
User 73141 improves AUC. Keeping the model.
Training on augumented user 27747 3/50 current_auc = 0.6317934782608696
User 27747 AUC after training: 0.6326992753623188
User 27747 improves AUC. Keeping the model.
Training on augumented user 122116 4/50 current_auc = 0.6326992753623188
User 122116 AUC after training: 0.6320199275362319
User 122116 does not improve AUC. Reverting changes.
Training on augumented user 69014 5/50 current_auc = 0.6326992753623188
User 69014 AUC after training: 0.6329257246376812
User 69014 improves AUC. Keeping the model.
Training on augumented user 111940 6/50 current_auc = 0.6329257246376812
User 111940 AUC after training: 0.6329257246376812
User 111940 does not improve AUC. Reverting changes.
Training on augumented user 101264 7/50 current_auc = 0.6329257246376812
User 101264 AUC after training: 0.6329257246376812
User 101264 does not improve AUC. Reverting changes.
Training on augumented user 65848 8/50 current_auc = 0.6329257246376812
User 65848 AUC after training: 0.6324728260869565
User 65848 does not improve AUC. Reverting changes.
Training on augumented user 10708 9/50 current_auc = 0.6329257246376812
User 10708 AUC after training: 0.6331521739130435
User 10708 improves AUC. Keeping the model.
Training on augumented user 12531 10/50 current_auc = 0.6331521739130435
User 12531 AUC after training: 0.6326992753623187
User 12531 does not improve AUC. Reverting changes.
Training on augumented user 128597 11/50 current_auc = 0.6331521739130435
User 128597 AUC after training: 0.6329257246376812
User 128597 does not improve AUC. Reverting changes.
Training on augumented user 63673 12/50 current_auc = 0.6331521739130435
User 63673 AUC after training: 0.6333786231884058
User 63673 improves AUC. Keeping the model.
Training on augumented user 86704 13/50 current_auc = 0.6333786231884058
User 86704 AUC after training: 0.6324728260869565
User 86704 does not improve AUC. Reverting changes.
Training on augumented user 58131 14/50 current_auc = 0.6333786231884058
User 58131 AUC after training: 0.6324728260869565
User 58131 does not improve AUC. Reverting changes.
Training on augumented user 11909 15/50 current_auc = 0.6333786231884058
User 11909 AUC after training: 0.6340579710144928
User 11909 improves AUC. Keeping the model.
Training on augumented user 104817 16/50 current_auc = 0.6340579710144928
User 104817 AUC after training: 0.6338315217391304
User 104817 does not improve AUC. Reverting changes.
Training on augumented user 97602 17/50 current_auc = 0.6340579710144928
User 97602 AUC after training: 0.6312273550724637
User 97602 does not improve AUC. Reverting changes.
Training on augumented user 110743 18/50 current_auc = 0.6340579710144928
User 110743 AUC after training: 0.6340579710144929
User 110743 improves AUC. Keeping the model.
Training on augumented user 66091 19/50 current_auc = 0.6340579710144929
User 66091 AUC after training: 0.6333786231884058
User 66091 does not improve AUC. Reverting changes.
Training on augumented user 18370 20/50 current_auc = 0.6340579710144929
User 18370 AUC after training: 0.6342844202898551
User 18370 improves AUC. Keeping the model.
Training on augumented user 89299 21/50 current_auc = 0.6342844202898551
User 89299 AUC after training: 0.6324728260869565
User 89299 does not improve AUC. Reverting changes.
Training on augumented user 21276 22/50 current_auc = 0.6342844202898551
User 21276 AUC after training: 0.6331521739130435
User 21276 does not improve AUC. Reverting changes.
Training on augumented user 136525 23/50 current_auc = 0.6342844202898551
User 136525 AUC after training: 0.6338315217391304
User 136525 does not improve AUC. Reverting changes.
Training on augumented user 89679 24/50 current_auc = 0.6342844202898551
User 89679 AUC after training: 0.6340579710144928
User 89679 does not improve AUC. Reverting changes.
Training on augumented user 34669 25/50 current_auc = 0.6342844202898551
User 34669 AUC after training: 0.6338315217391304
User 34669 does not improve AUC. Reverting changes.
Training on augumented user 119711 26/50 current_auc = 0.6342844202898551
User 119711 AUC after training: 0.6331521739130435
User 119711 does not improve AUC. Reverting changes.
Training on augumented user 30298 27/50 current_auc = 0.6342844202898551
User 30298 AUC after training: 0.6333786231884058
User 30298 does not improve AUC. Reverting changes.
Training on augumented user 56791 28/50 current_auc = 0.6342844202898551
User 56791 AUC after training: 0.6333786231884058
User 56791 does not improve AUC. Reverting changes.
Training on augumented user 110752 29/50 current_auc = 0.6342844202898551
User 110752 AUC after training: 0.6329257246376812
User 110752 does not improve AUC. Reverting changes.
Training on augumented user 86368 30/50 current_auc = 0.6342844202898551
User 86368 AUC after training: 0.6338315217391304
User 86368 does not improve AUC. Reverting changes.
Training on augumented user 103060 31/50 current_auc = 0.6342844202898551
User 103060 AUC after training: 0.6324728260869564
User 103060 does not improve AUC. Reverting changes.
Training on augumented user 47223 32/50 current_auc = 0.6342844202898551
User 47223 AUC after training: 0.6336050724637681
User 47223 does not improve AUC. Reverting changes.
Training on augumented user 17450 33/50 current_auc = 0.6342844202898551
User 17450 AUC after training: 0.6328124999999999
User 17450 does not improve AUC. Reverting changes.
Training on augumented user 106950 34/50 current_auc = 0.6342844202898551
User 106950 AUC after training: 0.6338315217391304
User 106950 does not improve AUC. Reverting changes.
Training on augumented user 52103 35/50 current_auc = 0.6342844202898551
User 52103 AUC after training: 0.6320199275362319
User 52103 does not improve AUC. Reverting changes.
Training on augumented user 69488 36/50 current_auc = 0.6342844202898551
User 69488 AUC after training: 0.6331521739130435
User 69488 does not improve AUC. Reverting changes.
Training on augumented user 105496 37/50 current_auc = 0.6342844202898551
User 105496 AUC after training: 0.6331521739130435
User 105496 does not improve AUC. Reverting changes.
Training on augumented user 27873 38/50 current_auc = 0.6342844202898551
User 27873 AUC after training: 0.6334918478260869
User 27873 does not improve AUC. Reverting changes.
Training on augumented user 135587 39/50 current_auc = 0.6342844202898551
User 135587 AUC after training: 0.634284420289855
User 135587 does not improve AUC. Reverting changes.
Training on augumented user 120401 40/50 current_auc = 0.6342844202898551
User 120401 AUC after training: 0.6333786231884058
User 120401 does not improve AUC. Reverting changes.
Training on augumented user 119143 41/50 current_auc = 0.6342844202898551
User 119143 AUC after training: 0.6333786231884058
User 119143 does not improve AUC. Reverting changes.
Training on augumented user 105384 42/50 current_auc = 0.6342844202898551
User 105384 AUC after training: 0.6322463768115941
User 105384 does not improve AUC. Reverting changes.
Training on augumented user 116871 43/50 current_auc = 0.6342844202898551
User 116871 AUC after training: 0.6333786231884058
User 116871 does not improve AUC. Reverting changes.
Training on augumented user 70824 44/50 current_auc = 0.6342844202898551
User 70824 AUC after training: 0.6331521739130435
User 70824 does not improve AUC. Reverting changes.
Training on augumented user 5716 45/50 current_auc = 0.6342844202898551
User 5716 AUC after training: 0.6333786231884058
User 5716 does not improve AUC. Reverting changes.
Training on augumented user 65815 46/50 current_auc = 0.6342844202898551
User 65815 AUC after training: 0.6333786231884058
User 65815 does not improve AUC. Reverting changes.
Training on augumented user 26432 47/50 current_auc = 0.6342844202898551
User 26432 AUC after training: 0.6336050724637681
User 26432 does not improve AUC. Reverting changes.
Training on augumented user 97635 48/50 current_auc = 0.6342844202898551
User 97635 AUC after training: 0.6331521739130435
User 97635 does not improve AUC. Reverting changes.
Training on augumented user 44976 49/50 current_auc = 0.6342844202898551
User 44976 AUC after training: 0.6326992753623187
User 44976 does not improve AUC. Reverting changes.
[2024-12-02 18:16:47.358138] start test user 111038 73/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:16:48.005490] start test user 111038 73/567 recall augumented users by random, augumented_users = [108695, 40210, 26854, 129794, 86417, 32182, 58605, 43989, 94748, 60600, 87974, 24347, 64997, 74999, 34368, 110634, 114733, 23082, 103676, 56797, 15967, 37730, 85318, 77916, 92282, 109289, 81679, 111600, 85931, 57677, 58471, 53483, 34222, 86758, 70031, 138282, 69733, 128055, 118651, 131785, 44921, 92062, 22020, 73113, 35286, 128974, 18574, 73004, 59348, 80107]
[2024-12-02 18:16:48.020940] user = 111038 Cloud 73/567
[2024-12-02 18:16:48.034597] user = 111038 Local 73/567
[2024-12-02 18:16:48.111473] user = 111038 Local+ 73/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:16:50.047083] user = 111038 MPDA- 73/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7049335863377609
Training on augumented user 108695 0/50 current_auc = 0.7049335863377609
User 108695 AUC after training: 0.7020872865275142
User 108695 does not improve AUC. Reverting changes.
Training on augumented user 40210 1/50 current_auc = 0.7049335863377609
User 40210 AUC after training: 0.7049335863377609
User 40210 does not improve AUC. Reverting changes.
Training on augumented user 26854 2/50 current_auc = 0.7049335863377609
User 26854 AUC after training: 0.7020872865275142
User 26854 does not improve AUC. Reverting changes.
Training on augumented user 129794 3/50 current_auc = 0.7049335863377609
User 129794 AUC after training: 0.7049335863377609
User 129794 does not improve AUC. Reverting changes.
Training on augumented user 86417 4/50 current_auc = 0.7049335863377609
User 86417 AUC after training: 0.7030360531309299
User 86417 does not improve AUC. Reverting changes.
Training on augumented user 32182 5/50 current_auc = 0.7049335863377609
User 32182 AUC after training: 0.7068311195445919
User 32182 improves AUC. Keeping the model.
Training on augumented user 58605 6/50 current_auc = 0.7068311195445919
User 58605 AUC after training: 0.7049335863377609
User 58605 does not improve AUC. Reverting changes.
Training on augumented user 43989 7/50 current_auc = 0.7068311195445919
User 43989 AUC after training: 0.7054079696394686
User 43989 does not improve AUC. Reverting changes.
Training on augumented user 94748 8/50 current_auc = 0.7068311195445919
User 94748 AUC after training: 0.7049335863377609
User 94748 does not improve AUC. Reverting changes.
Training on augumented user 60600 9/50 current_auc = 0.7068311195445919
User 60600 AUC after training: 0.7058823529411764
User 60600 does not improve AUC. Reverting changes.
Training on augumented user 87974 10/50 current_auc = 0.7068311195445919
User 87974 AUC after training: 0.706831119544592
User 87974 improves AUC. Keeping the model.
Training on augumented user 24347 11/50 current_auc = 0.706831119544592
User 24347 AUC after training: 0.7077798861480076
User 24347 improves AUC. Keeping the model.
Training on augumented user 64997 12/50 current_auc = 0.7077798861480076
User 64997 AUC after training: 0.7049335863377609
User 64997 does not improve AUC. Reverting changes.
Training on augumented user 74999 13/50 current_auc = 0.7077798861480076
User 74999 AUC after training: 0.7049335863377608
User 74999 does not improve AUC. Reverting changes.
Training on augumented user 34368 14/50 current_auc = 0.7077798861480076
User 34368 AUC after training: 0.706831119544592
User 34368 does not improve AUC. Reverting changes.
Training on augumented user 110634 15/50 current_auc = 0.7077798861480076
User 110634 AUC after training: 0.7049335863377609
User 110634 does not improve AUC. Reverting changes.
Training on augumented user 114733 16/50 current_auc = 0.7077798861480076
User 114733 AUC after training: 0.7096774193548387
User 114733 improves AUC. Keeping the model.
Training on augumented user 23082 17/50 current_auc = 0.7096774193548387
User 23082 AUC after training: 0.7077798861480076
User 23082 does not improve AUC. Reverting changes.
Training on augumented user 103676 18/50 current_auc = 0.7096774193548387
User 103676 AUC after training: 0.7035104364326377
User 103676 does not improve AUC. Reverting changes.
Training on augumented user 56797 19/50 current_auc = 0.7096774193548387
User 56797 AUC after training: 0.7049335863377609
User 56797 does not improve AUC. Reverting changes.
Training on augumented user 15967 20/50 current_auc = 0.7096774193548387
User 15967 AUC after training: 0.7058823529411764
User 15967 does not improve AUC. Reverting changes.
Training on augumented user 37730 21/50 current_auc = 0.7096774193548387
User 37730 AUC after training: 0.7087286527514232
User 37730 does not improve AUC. Reverting changes.
Training on augumented user 85318 22/50 current_auc = 0.7096774193548387
User 85318 AUC after training: 0.7077798861480076
User 85318 does not improve AUC. Reverting changes.
Training on augumented user 77916 23/50 current_auc = 0.7096774193548387
User 77916 AUC after training: 0.7087286527514232
User 77916 does not improve AUC. Reverting changes.
Training on augumented user 92282 24/50 current_auc = 0.7096774193548387
User 92282 AUC after training: 0.7077798861480076
User 92282 does not improve AUC. Reverting changes.
Training on augumented user 109289 25/50 current_auc = 0.7096774193548387
User 109289 AUC after training: 0.7082542694497153
User 109289 does not improve AUC. Reverting changes.
Training on augumented user 81679 26/50 current_auc = 0.7096774193548387
User 81679 AUC after training: 0.7049335863377608
User 81679 does not improve AUC. Reverting changes.
Training on augumented user 111600 27/50 current_auc = 0.7096774193548387
User 111600 AUC after training: 0.708728652751423
User 111600 does not improve AUC. Reverting changes.
Training on augumented user 85931 28/50 current_auc = 0.7096774193548387
User 85931 AUC after training: 0.7077798861480076
User 85931 does not improve AUC. Reverting changes.
Training on augumented user 57677 29/50 current_auc = 0.7096774193548387
User 57677 AUC after training: 0.7096774193548386
User 57677 does not improve AUC. Reverting changes.
Training on augumented user 58471 30/50 current_auc = 0.7096774193548387
User 58471 AUC after training: 0.7049335863377608
User 58471 does not improve AUC. Reverting changes.
Training on augumented user 53483 31/50 current_auc = 0.7096774193548387
User 53483 AUC after training: 0.708728652751423
User 53483 does not improve AUC. Reverting changes.
Training on augumented user 34222 32/50 current_auc = 0.7096774193548387
User 34222 AUC after training: 0.706831119544592
User 34222 does not improve AUC. Reverting changes.
Training on augumented user 86758 33/50 current_auc = 0.7096774193548387
User 86758 AUC after training: 0.7049335863377608
User 86758 does not improve AUC. Reverting changes.
Training on augumented user 70031 34/50 current_auc = 0.7096774193548387
User 70031 AUC after training: 0.7096774193548387
User 70031 does not improve AUC. Reverting changes.
Training on augumented user 138282 35/50 current_auc = 0.7096774193548387
User 138282 AUC after training: 0.7058823529411765
User 138282 does not improve AUC. Reverting changes.
Training on augumented user 69733 36/50 current_auc = 0.7096774193548387
User 69733 AUC after training: 0.706831119544592
User 69733 does not improve AUC. Reverting changes.
Training on augumented user 128055 37/50 current_auc = 0.7096774193548387
User 128055 AUC after training: 0.7049335863377608
User 128055 does not improve AUC. Reverting changes.
Training on augumented user 118651 38/50 current_auc = 0.7096774193548387
User 118651 AUC after training: 0.7058823529411765
User 118651 does not improve AUC. Reverting changes.
Training on augumented user 131785 39/50 current_auc = 0.7096774193548387
User 131785 AUC after training: 0.708728652751423
User 131785 does not improve AUC. Reverting changes.
Training on augumented user 44921 40/50 current_auc = 0.7096774193548387
User 44921 AUC after training: 0.7058823529411764
User 44921 does not improve AUC. Reverting changes.
Training on augumented user 92062 41/50 current_auc = 0.7096774193548387
User 92062 AUC after training: 0.7087286527514232
User 92062 does not improve AUC. Reverting changes.
Training on augumented user 22020 42/50 current_auc = 0.7096774193548387
User 22020 AUC after training: 0.7039848197343453
User 22020 does not improve AUC. Reverting changes.
Training on augumented user 73113 43/50 current_auc = 0.7096774193548387
User 73113 AUC after training: 0.7058823529411764
User 73113 does not improve AUC. Reverting changes.
Training on augumented user 35286 44/50 current_auc = 0.7096774193548387
User 35286 AUC after training: 0.706831119544592
User 35286 does not improve AUC. Reverting changes.
Training on augumented user 128974 45/50 current_auc = 0.7096774193548387
User 128974 AUC after training: 0.7039848197343453
User 128974 does not improve AUC. Reverting changes.
Training on augumented user 18574 46/50 current_auc = 0.7096774193548387
User 18574 AUC after training: 0.706831119544592
User 18574 does not improve AUC. Reverting changes.
Training on augumented user 73004 47/50 current_auc = 0.7096774193548387
User 73004 AUC after training: 0.6992409867172675
User 73004 does not improve AUC. Reverting changes.
Training on augumented user 59348 48/50 current_auc = 0.7096774193548387
User 59348 AUC after training: 0.7039848197343452
User 59348 does not improve AUC. Reverting changes.
Training on augumented user 80107 49/50 current_auc = 0.7096774193548387
User 80107 AUC after training: 0.706831119544592
User 80107 does not improve AUC. Reverting changes.
[2024-12-02 18:17:14.934553] start test user 111053 74/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:17:15.363218] start test user 111053 74/567 recall augumented users by random, augumented_users = [62292, 23408, 68609, 43773, 80550, 106570, 44177, 129991, 122734, 133941, 119089, 57813, 121390, 57126, 57539, 137895, 44220, 108394, 123648, 43988, 88307, 116180, 136586, 23126, 126467, 4138, 74320, 114995, 18837, 13370, 20305, 15757, 87715, 21009, 65315, 44192, 93695, 136007, 29915, 3782, 122785, 134702, 31353, 23726, 68964, 60295, 135585, 5304, 117930, 59443]
[2024-12-02 18:17:15.378414] user = 111053 Cloud 74/567
[2024-12-02 18:17:15.395749] user = 111053 Local 74/567
[2024-12-02 18:17:15.442920] user = 111053 Local+ 74/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:17:17.710366] user = 111053 MPDA- 74/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7236464833867431
Training on augumented user 62292 0/50 current_auc = 0.7236464833867431
User 62292 AUC after training: 0.7241524709057177
User 62292 improves AUC. Keeping the model.
Training on augumented user 23408 1/50 current_auc = 0.7241524709057177
User 23408 AUC after training: 0.7236464833867431
User 23408 does not improve AUC. Reverting changes.
Training on augumented user 68609 2/50 current_auc = 0.7241524709057177
User 68609 AUC after training: 0.7228031708551189
User 68609 does not improve AUC. Reverting changes.
Training on augumented user 43773 3/50 current_auc = 0.7241524709057177
User 43773 AUC after training: 0.7241524709057175
User 43773 does not improve AUC. Reverting changes.
Training on augumented user 80550 4/50 current_auc = 0.7241524709057177
User 80550 AUC after training: 0.7255017709563164
User 80550 improves AUC. Keeping the model.
Training on augumented user 106570 5/50 current_auc = 0.7255017709563164
User 106570 AUC after training: 0.7233091583740936
User 106570 does not improve AUC. Reverting changes.
Training on augumented user 44177 6/50 current_auc = 0.7255017709563164
User 44177 AUC after training: 0.7248271209310171
User 44177 does not improve AUC. Reverting changes.
Training on augumented user 129991 7/50 current_auc = 0.7255017709563164
User 129991 AUC after training: 0.7241524709057177
User 129991 does not improve AUC. Reverting changes.
Training on augumented user 122734 8/50 current_auc = 0.7255017709563164
User 122734 AUC after training: 0.7251644459436667
User 122734 does not improve AUC. Reverting changes.
Training on augumented user 133941 9/50 current_auc = 0.7255017709563164
User 133941 AUC after training: 0.7260920897284533
User 133941 improves AUC. Keeping the model.
Training on augumented user 119089 10/50 current_auc = 0.7260920897284533
User 119089 AUC after training: 0.7259234272221284
User 119089 does not improve AUC. Reverting changes.
Training on augumented user 57813 11/50 current_auc = 0.7260920897284533
User 57813 AUC after training: 0.7250801146905043
User 57813 does not improve AUC. Reverting changes.
Training on augumented user 121390 12/50 current_auc = 0.7260920897284533
User 121390 AUC after training: 0.7255861022094788
User 121390 does not improve AUC. Reverting changes.
Training on augumented user 57126 13/50 current_auc = 0.7260920897284533
User 57126 AUC after training: 0.7265980772474279
User 57126 improves AUC. Keeping the model.
Training on augumented user 57539 14/50 current_auc = 0.7265980772474279
User 57539 AUC after training: 0.7257547647158037
User 57539 does not improve AUC. Reverting changes.
Training on augumented user 137895 15/50 current_auc = 0.7265980772474279
User 137895 AUC after training: 0.7252487771968291
User 137895 does not improve AUC. Reverting changes.
Training on augumented user 44220 16/50 current_auc = 0.7265980772474279
User 44220 AUC after training: 0.7278630460448642
User 44220 improves AUC. Keeping the model.
Training on augumented user 108394 17/50 current_auc = 0.7278630460448642
User 108394 AUC after training: 0.7287063585764885
User 108394 improves AUC. Keeping the model.
Training on augumented user 123648 18/50 current_auc = 0.7287063585764885
User 123648 AUC after training: 0.7290436835891381
User 123648 improves AUC. Keeping the model.
Training on augumented user 43988 19/50 current_auc = 0.7290436835891381
User 43988 AUC after training: 0.7295496711081126
User 43988 improves AUC. Keeping the model.
Training on augumented user 88307 20/50 current_auc = 0.7295496711081126
User 88307 AUC after training: 0.7280317085511891
User 88307 does not improve AUC. Reverting changes.
Training on augumented user 116180 21/50 current_auc = 0.7295496711081126
User 116180 AUC after training: 0.7297183336144375
User 116180 improves AUC. Keeping the model.
Training on augumented user 136586 22/50 current_auc = 0.7297183336144375
User 136586 AUC after training: 0.7275257210322146
User 136586 does not improve AUC. Reverting changes.
Training on augumented user 23126 23/50 current_auc = 0.7297183336144375
User 23126 AUC after training: 0.7300556586270872
User 23126 improves AUC. Keeping the model.
Training on augumented user 126467 24/50 current_auc = 0.7300556586270872
User 126467 AUC after training: 0.7239838083993928
User 126467 does not improve AUC. Reverting changes.
Training on augumented user 4138 25/50 current_auc = 0.7300556586270872
User 4138 AUC after training: 0.7303929836397368
User 4138 improves AUC. Keeping the model.
Training on augumented user 74320 26/50 current_auc = 0.7303929836397368
User 74320 AUC after training: 0.7300556586270872
User 74320 does not improve AUC. Reverting changes.
Training on augumented user 114995 27/50 current_auc = 0.7303929836397368
User 114995 AUC after training: 0.7290436835891381
User 114995 does not improve AUC. Reverting changes.
Training on augumented user 18837 28/50 current_auc = 0.7303929836397368
User 18837 AUC after training: 0.7303929836397368
User 18837 does not improve AUC. Reverting changes.
Training on augumented user 13370 29/50 current_auc = 0.7303929836397368
User 13370 AUC after training: 0.728031708551189
User 13370 does not improve AUC. Reverting changes.
Training on augumented user 20305 30/50 current_auc = 0.7303929836397368
User 20305 AUC after training: 0.7302243211334121
User 20305 does not improve AUC. Reverting changes.
Training on augumented user 15757 31/50 current_auc = 0.7303929836397368
User 15757 AUC after training: 0.7293810086017879
User 15757 does not improve AUC. Reverting changes.
Training on augumented user 87715 32/50 current_auc = 0.7303929836397368
User 87715 AUC after training: 0.7300556586270872
User 87715 does not improve AUC. Reverting changes.
Training on augumented user 21009 33/50 current_auc = 0.7303929836397368
User 21009 AUC after training: 0.7297183336144375
User 21009 does not improve AUC. Reverting changes.
Training on augumented user 65315 34/50 current_auc = 0.7303929836397368
User 65315 AUC after training: 0.728031708551189
User 65315 does not improve AUC. Reverting changes.
Training on augumented user 44192 35/50 current_auc = 0.7303929836397368
User 44192 AUC after training: 0.7293810086017879
User 44192 does not improve AUC. Reverting changes.
Training on augumented user 93695 36/50 current_auc = 0.7303929836397368
User 93695 AUC after training: 0.7303929836397368
User 93695 does not improve AUC. Reverting changes.
Training on augumented user 136007 37/50 current_auc = 0.7303929836397368
User 136007 AUC after training: 0.7312362961713611
User 136007 improves AUC. Keeping the model.
Training on augumented user 29915 38/50 current_auc = 0.7312362961713611
User 29915 AUC after training: 0.7300556586270872
User 29915 does not improve AUC. Reverting changes.
Training on augumented user 3782 39/50 current_auc = 0.7312362961713611
User 3782 AUC after training: 0.7307303086523865
User 3782 does not improve AUC. Reverting changes.
Training on augumented user 122785 40/50 current_auc = 0.7312362961713611
User 122785 AUC after training: 0.7288750210828133
User 122785 does not improve AUC. Reverting changes.
Training on augumented user 134702 41/50 current_auc = 0.7312362961713611
User 134702 AUC after training: 0.7307303086523865
User 134702 does not improve AUC. Reverting changes.
Training on augumented user 31353 42/50 current_auc = 0.7312362961713611
User 31353 AUC after training: 0.7307303086523865
User 31353 does not improve AUC. Reverting changes.
Training on augumented user 23726 43/50 current_auc = 0.7312362961713611
User 23726 AUC after training: 0.7312362961713611
User 23726 does not improve AUC. Reverting changes.
Training on augumented user 68964 44/50 current_auc = 0.7312362961713611
User 68964 AUC after training: 0.7288750210828133
User 68964 does not improve AUC. Reverting changes.
Training on augumented user 60295 45/50 current_auc = 0.7312362961713611
User 60295 AUC after training: 0.7308989711587114
User 60295 does not improve AUC. Reverting changes.
Training on augumented user 135585 46/50 current_auc = 0.7312362961713611
User 135585 AUC after training: 0.7308989711587114
User 135585 does not improve AUC. Reverting changes.
Training on augumented user 5304 47/50 current_auc = 0.7312362961713611
User 5304 AUC after training: 0.7298869961207624
User 5304 does not improve AUC. Reverting changes.
Training on augumented user 117930 48/50 current_auc = 0.7312362961713611
User 117930 AUC after training: 0.7293810086017879
User 117930 does not improve AUC. Reverting changes.
Training on augumented user 59443 49/50 current_auc = 0.7312362961713611
User 59443 AUC after training: 0.7263450834879406
User 59443 does not improve AUC. Reverting changes.
[2024-12-02 18:17:45.670493] start test user 111122 75/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:17:46.407295] start test user 111122 75/567 recall augumented users by random, augumented_users = [19537, 10716, 29798, 96390, 11806, 114703, 107524, 134554, 50852, 10611, 10307, 67283, 136089, 27261, 47524, 54982, 45247, 33414, 48093, 4339, 85282, 43094, 70482, 51829, 136327, 57043, 37238, 122591, 62101, 109852, 62107, 88071, 112300, 63813, 128672, 44772, 29539, 20561, 99248, 99075, 19267, 9093, 69958, 60180, 52147, 53594, 71265, 15673, 2579, 105964]
[2024-12-02 18:17:46.424640] user = 111122 Cloud 75/567
[2024-12-02 18:17:46.446530] user = 111122 Local 75/567
[2024-12-02 18:17:46.481377] user = 111122 Local+ 75/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:17:49.092065] user = 111122 MPDA- 75/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7435412728418399
Training on augumented user 19537 0/50 current_auc = 0.7435412728418399
User 19537 AUC after training: 0.7438563327032136
User 19537 improves AUC. Keeping the model.
Training on augumented user 10716 1/50 current_auc = 0.7438563327032136
User 10716 AUC after training: 0.745431632010082
User 10716 improves AUC. Keeping the model.
Training on augumented user 29798 2/50 current_auc = 0.745431632010082
User 29798 AUC after training: 0.745431632010082
User 29798 does not improve AUC. Reverting changes.
Training on augumented user 96390 3/50 current_auc = 0.745431632010082
User 96390 AUC after training: 0.7444864524259609
User 96390 does not improve AUC. Reverting changes.
Training on augumented user 11806 4/50 current_auc = 0.745431632010082
User 11806 AUC after training: 0.7451165721487083
User 11806 does not improve AUC. Reverting changes.
Training on augumented user 114703 5/50 current_auc = 0.745431632010082
User 114703 AUC after training: 0.7457466918714556
User 114703 improves AUC. Keeping the model.
Training on augumented user 107524 6/50 current_auc = 0.7457466918714556
User 107524 AUC after training: 0.7454316320100819
User 107524 does not improve AUC. Reverting changes.
Training on augumented user 134554 7/50 current_auc = 0.7457466918714556
User 134554 AUC after training: 0.7451165721487083
User 134554 does not improve AUC. Reverting changes.
Training on augumented user 50852 8/50 current_auc = 0.7457466918714556
User 50852 AUC after training: 0.7479521109010712
User 50852 improves AUC. Keeping the model.
Training on augumented user 10611 9/50 current_auc = 0.7479521109010712
User 10611 AUC after training: 0.7460617517328292
User 10611 does not improve AUC. Reverting changes.
Training on augumented user 10307 10/50 current_auc = 0.7479521109010712
User 10307 AUC after training: 0.745431632010082
User 10307 does not improve AUC. Reverting changes.
Training on augumented user 67283 11/50 current_auc = 0.7479521109010712
User 67283 AUC after training: 0.7460617517328292
User 67283 does not improve AUC. Reverting changes.
Training on augumented user 136089 12/50 current_auc = 0.7479521109010712
User 136089 AUC after training: 0.7457466918714556
User 136089 does not improve AUC. Reverting changes.
Training on augumented user 27261 13/50 current_auc = 0.7479521109010712
User 27261 AUC after training: 0.7463768115942029
User 27261 does not improve AUC. Reverting changes.
Training on augumented user 47524 14/50 current_auc = 0.7479521109010712
User 47524 AUC after training: 0.7452741020793952
User 47524 does not improve AUC. Reverting changes.
Training on augumented user 54982 15/50 current_auc = 0.7479521109010712
User 54982 AUC after training: 0.7451165721487083
User 54982 does not improve AUC. Reverting changes.
Training on augumented user 45247 16/50 current_auc = 0.7479521109010712
User 45247 AUC after training: 0.7482671707624449
User 45247 improves AUC. Keeping the model.
Training on augumented user 33414 17/50 current_auc = 0.7482671707624449
User 33414 AUC after training: 0.748109640831758
User 33414 does not improve AUC. Reverting changes.
Training on augumented user 48093 18/50 current_auc = 0.7482671707624449
User 48093 AUC after training: 0.7470069313169503
User 48093 does not improve AUC. Reverting changes.
Training on augumented user 4339 19/50 current_auc = 0.7482671707624449
User 4339 AUC after training: 0.7466918714555766
User 4339 does not improve AUC. Reverting changes.
Training on augumented user 85282 20/50 current_auc = 0.7482671707624449
User 85282 AUC after training: 0.7477945809703843
User 85282 does not improve AUC. Reverting changes.
Training on augumented user 43094 21/50 current_auc = 0.7482671707624449
User 43094 AUC after training: 0.7463768115942029
User 43094 does not improve AUC. Reverting changes.
Training on augumented user 70482 22/50 current_auc = 0.7482671707624449
User 70482 AUC after training: 0.7454316320100819
User 70482 does not improve AUC. Reverting changes.
Training on augumented user 51829 23/50 current_auc = 0.7482671707624449
User 51829 AUC after training: 0.7470069313169502
User 51829 does not improve AUC. Reverting changes.
Training on augumented user 136327 24/50 current_auc = 0.7482671707624449
User 136327 AUC after training: 0.745431632010082
User 136327 does not improve AUC. Reverting changes.
Training on augumented user 57043 25/50 current_auc = 0.7482671707624449
User 57043 AUC after training: 0.7474795211090107
User 57043 does not improve AUC. Reverting changes.
Training on augumented user 37238 26/50 current_auc = 0.7482671707624449
User 37238 AUC after training: 0.7468494013862634
User 37238 does not improve AUC. Reverting changes.
Training on augumented user 122591 27/50 current_auc = 0.7482671707624449
User 122591 AUC after training: 0.7474795211090107
User 122591 does not improve AUC. Reverting changes.
Training on augumented user 62101 28/50 current_auc = 0.7482671707624449
User 62101 AUC after training: 0.7460617517328293
User 62101 does not improve AUC. Reverting changes.
Training on augumented user 109852 29/50 current_auc = 0.7482671707624449
User 109852 AUC after training: 0.746219281663516
User 109852 does not improve AUC. Reverting changes.
Training on augumented user 62107 30/50 current_auc = 0.7482671707624449
User 62107 AUC after training: 0.7471644612476371
User 62107 does not improve AUC. Reverting changes.
Training on augumented user 88071 31/50 current_auc = 0.7482671707624449
User 88071 AUC after training: 0.7468494013862634
User 88071 does not improve AUC. Reverting changes.
Training on augumented user 112300 32/50 current_auc = 0.7482671707624449
User 112300 AUC after training: 0.7457466918714556
User 112300 does not improve AUC. Reverting changes.
Training on augumented user 63813 33/50 current_auc = 0.7482671707624449
User 63813 AUC after training: 0.7471644612476371
User 63813 does not improve AUC. Reverting changes.
Training on augumented user 128672 34/50 current_auc = 0.7482671707624449
User 128672 AUC after training: 0.7465343415248898
User 128672 does not improve AUC. Reverting changes.
Training on augumented user 44772 35/50 current_auc = 0.7482671707624449
User 44772 AUC after training: 0.7463768115942029
User 44772 does not improve AUC. Reverting changes.
Training on augumented user 29539 36/50 current_auc = 0.7482671707624449
User 29539 AUC after training: 0.7477945809703843
User 29539 does not improve AUC. Reverting changes.
Training on augumented user 20561 37/50 current_auc = 0.7482671707624449
User 20561 AUC after training: 0.7457466918714556
User 20561 does not improve AUC. Reverting changes.
Training on augumented user 99248 38/50 current_auc = 0.7482671707624449
User 99248 AUC after training: 0.7465343415248897
User 99248 does not improve AUC. Reverting changes.
Training on augumented user 99075 39/50 current_auc = 0.7482671707624449
User 99075 AUC after training: 0.7471644612476371
User 99075 does not improve AUC. Reverting changes.
Training on augumented user 19267 40/50 current_auc = 0.7482671707624449
User 19267 AUC after training: 0.7476370510396976
User 19267 does not improve AUC. Reverting changes.
Training on augumented user 9093 41/50 current_auc = 0.7482671707624449
User 9093 AUC after training: 0.7481096408317581
User 9093 does not improve AUC. Reverting changes.
Training on augumented user 69958 42/50 current_auc = 0.7482671707624449
User 69958 AUC after training: 0.7470069313169502
User 69958 does not improve AUC. Reverting changes.
Training on augumented user 60180 43/50 current_auc = 0.7482671707624449
User 60180 AUC after training: 0.7474795211090107
User 60180 does not improve AUC. Reverting changes.
Training on augumented user 52147 44/50 current_auc = 0.7482671707624449
User 52147 AUC after training: 0.746376811594203
User 52147 does not improve AUC. Reverting changes.
Training on augumented user 53594 45/50 current_auc = 0.7482671707624449
User 53594 AUC after training: 0.7419659735349717
User 53594 does not improve AUC. Reverting changes.
Training on augumented user 71265 46/50 current_auc = 0.7482671707624449
User 71265 AUC after training: 0.7451165721487083
User 71265 does not improve AUC. Reverting changes.
Training on augumented user 15673 47/50 current_auc = 0.7482671707624449
User 15673 AUC after training: 0.7460617517328292
User 15673 does not improve AUC. Reverting changes.
Training on augumented user 2579 48/50 current_auc = 0.7482671707624449
User 2579 AUC after training: 0.7463768115942029
User 2579 does not improve AUC. Reverting changes.
Training on augumented user 105964 49/50 current_auc = 0.7482671707624449
User 105964 AUC after training: 0.7460617517328293
User 105964 does not improve AUC. Reverting changes.
[2024-12-02 18:18:20.513606] start test user 111139 76/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:18:20.975912] start test user 111139 76/567 recall augumented users by random, augumented_users = [40803, 19869, 89366, 81851, 42182, 39276, 133771, 26563, 22892, 99775, 7123, 134863, 115616, 95782, 7165, 46603, 93536, 19040, 33995, 115199, 135692, 131440, 37812, 55943, 87943, 58313, 47921, 103257, 7850, 132978, 91547, 25925, 111581, 32429, 106720, 52921, 46824, 63033, 116553, 129478, 53897, 36514, 36347, 85421, 72220, 84643, 32648, 136450, 136164, 85720]
[2024-12-02 18:18:20.992801] user = 111139 Cloud 76/567
[2024-12-02 18:18:21.034445] user = 111139 Local 76/567
[2024-12-02 18:18:21.409010] user = 111139 Local+ 76/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:18:23.753703] user = 111139 MPDA- 76/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6883174603174604
Training on augumented user 40803 0/50 current_auc = 0.6883174603174604
User 40803 AUC after training: 0.6880000000000001
User 40803 does not improve AUC. Reverting changes.
Training on augumented user 19869 1/50 current_auc = 0.6883174603174604
User 19869 AUC after training: 0.6880000000000001
User 19869 does not improve AUC. Reverting changes.
Training on augumented user 89366 2/50 current_auc = 0.6883174603174604
User 89366 AUC after training: 0.688952380952381
User 89366 improves AUC. Keeping the model.
Training on augumented user 81851 3/50 current_auc = 0.688952380952381
User 81851 AUC after training: 0.689015873015873
User 81851 improves AUC. Keeping the model.
Training on augumented user 42182 4/50 current_auc = 0.689015873015873
User 42182 AUC after training: 0.689015873015873
User 42182 does not improve AUC. Reverting changes.
Training on augumented user 39276 5/50 current_auc = 0.689015873015873
User 39276 AUC after training: 0.6899047619047619
User 39276 improves AUC. Keeping the model.
Training on augumented user 133771 6/50 current_auc = 0.6899047619047619
User 133771 AUC after training: 0.6893333333333332
User 133771 does not improve AUC. Reverting changes.
Training on augumented user 26563 7/50 current_auc = 0.6899047619047619
User 26563 AUC after training: 0.6895873015873016
User 26563 does not improve AUC. Reverting changes.
Training on augumented user 22892 8/50 current_auc = 0.6899047619047619
User 22892 AUC after training: 0.688063492063492
User 22892 does not improve AUC. Reverting changes.
Training on augumented user 99775 9/50 current_auc = 0.6899047619047619
User 99775 AUC after training: 0.6892698412698413
User 99775 does not improve AUC. Reverting changes.
Training on augumented user 7123 10/50 current_auc = 0.6899047619047619
User 7123 AUC after training: 0.6891428571428572
User 7123 does not improve AUC. Reverting changes.
Training on augumented user 134863 11/50 current_auc = 0.6899047619047619
User 134863 AUC after training: 0.6893333333333334
User 134863 does not improve AUC. Reverting changes.
Training on augumented user 115616 12/50 current_auc = 0.6899047619047619
User 115616 AUC after training: 0.6895238095238095
User 115616 does not improve AUC. Reverting changes.
Training on augumented user 95782 13/50 current_auc = 0.6899047619047619
User 95782 AUC after training: 0.6884444444444445
User 95782 does not improve AUC. Reverting changes.
Training on augumented user 7165 14/50 current_auc = 0.6899047619047619
User 7165 AUC after training: 0.6864761904761905
User 7165 does not improve AUC. Reverting changes.
Training on augumented user 46603 15/50 current_auc = 0.6899047619047619
User 46603 AUC after training: 0.6902857142857142
User 46603 improves AUC. Keeping the model.
Training on augumented user 93536 16/50 current_auc = 0.6902857142857142
User 93536 AUC after training: 0.6888253968253968
User 93536 does not improve AUC. Reverting changes.
Training on augumented user 19040 17/50 current_auc = 0.6902857142857142
User 19040 AUC after training: 0.688952380952381
User 19040 does not improve AUC. Reverting changes.
Training on augumented user 33995 18/50 current_auc = 0.6902857142857142
User 33995 AUC after training: 0.6906666666666667
User 33995 improves AUC. Keeping the model.
Training on augumented user 115199 19/50 current_auc = 0.6906666666666667
User 115199 AUC after training: 0.6915555555555556
User 115199 improves AUC. Keeping the model.
Training on augumented user 135692 20/50 current_auc = 0.6915555555555556
User 135692 AUC after training: 0.6898412698412699
User 135692 does not improve AUC. Reverting changes.
Training on augumented user 131440 21/50 current_auc = 0.6915555555555556
User 131440 AUC after training: 0.6914920634920636
User 131440 does not improve AUC. Reverting changes.
Training on augumented user 37812 22/50 current_auc = 0.6915555555555556
User 37812 AUC after training: 0.691111111111111
User 37812 does not improve AUC. Reverting changes.
Training on augumented user 55943 23/50 current_auc = 0.6915555555555556
User 55943 AUC after training: 0.6908571428571428
User 55943 does not improve AUC. Reverting changes.
Training on augumented user 87943 24/50 current_auc = 0.6915555555555556
User 87943 AUC after training: 0.6912380952380953
User 87943 does not improve AUC. Reverting changes.
Training on augumented user 58313 25/50 current_auc = 0.6915555555555556
User 58313 AUC after training: 0.6905396825396826
User 58313 does not improve AUC. Reverting changes.
Training on augumented user 47921 26/50 current_auc = 0.6915555555555556
User 47921 AUC after training: 0.6915555555555556
User 47921 does not improve AUC. Reverting changes.
Training on augumented user 103257 27/50 current_auc = 0.6915555555555556
User 103257 AUC after training: 0.6911111111111111
User 103257 does not improve AUC. Reverting changes.
Training on augumented user 7850 28/50 current_auc = 0.6915555555555556
User 7850 AUC after training: 0.6914285714285714
User 7850 does not improve AUC. Reverting changes.
Training on augumented user 132978 29/50 current_auc = 0.6915555555555556
User 132978 AUC after training: 0.689968253968254
User 132978 does not improve AUC. Reverting changes.
Training on augumented user 91547 30/50 current_auc = 0.6915555555555556
User 91547 AUC after training: 0.6904126984126984
User 91547 does not improve AUC. Reverting changes.
Training on augumented user 25925 31/50 current_auc = 0.6915555555555556
User 25925 AUC after training: 0.691047619047619
User 25925 does not improve AUC. Reverting changes.
Training on augumented user 111581 32/50 current_auc = 0.6915555555555556
User 111581 AUC after training: 0.6914920634920635
User 111581 does not improve AUC. Reverting changes.
Training on augumented user 32429 33/50 current_auc = 0.6915555555555556
User 32429 AUC after training: 0.6914285714285714
User 32429 does not improve AUC. Reverting changes.
Training on augumented user 106720 34/50 current_auc = 0.6915555555555556
User 106720 AUC after training: 0.6907301587301587
User 106720 does not improve AUC. Reverting changes.
Training on augumented user 52921 35/50 current_auc = 0.6915555555555556
User 52921 AUC after training: 0.6911746031746032
User 52921 does not improve AUC. Reverting changes.
Training on augumented user 46824 36/50 current_auc = 0.6915555555555556
User 46824 AUC after training: 0.6918730158730159
User 46824 improves AUC. Keeping the model.
Training on augumented user 63033 37/50 current_auc = 0.6918730158730159
User 63033 AUC after training: 0.6914920634920635
User 63033 does not improve AUC. Reverting changes.
Training on augumented user 116553 38/50 current_auc = 0.6918730158730159
User 116553 AUC after training: 0.6914920634920635
User 116553 does not improve AUC. Reverting changes.
Training on augumented user 129478 39/50 current_auc = 0.6918730158730159
User 129478 AUC after training: 0.6915555555555556
User 129478 does not improve AUC. Reverting changes.
Training on augumented user 53897 40/50 current_auc = 0.6918730158730159
User 53897 AUC after training: 0.6916825396825397
User 53897 does not improve AUC. Reverting changes.
Training on augumented user 36514 41/50 current_auc = 0.6918730158730159
User 36514 AUC after training: 0.6918730158730159
User 36514 does not improve AUC. Reverting changes.
Training on augumented user 36347 42/50 current_auc = 0.6918730158730159
User 36347 AUC after training: 0.6911111111111111
User 36347 does not improve AUC. Reverting changes.
Training on augumented user 85421 43/50 current_auc = 0.6918730158730159
User 85421 AUC after training: 0.6913015873015873
User 85421 does not improve AUC. Reverting changes.
Training on augumented user 72220 44/50 current_auc = 0.6918730158730159
User 72220 AUC after training: 0.6916190476190475
User 72220 does not improve AUC. Reverting changes.
Training on augumented user 84643 45/50 current_auc = 0.6918730158730159
User 84643 AUC after training: 0.6911111111111111
User 84643 does not improve AUC. Reverting changes.
Training on augumented user 32648 46/50 current_auc = 0.6918730158730159
User 32648 AUC after training: 0.6915555555555555
User 32648 does not improve AUC. Reverting changes.
Training on augumented user 136450 47/50 current_auc = 0.6918730158730159
User 136450 AUC after training: 0.6914285714285714
User 136450 does not improve AUC. Reverting changes.
Training on augumented user 136164 48/50 current_auc = 0.6918730158730159
User 136164 AUC after training: 0.6904761904761905
User 136164 does not improve AUC. Reverting changes.
Training on augumented user 85720 49/50 current_auc = 0.6918730158730159
User 85720 AUC after training: 0.6911111111111111
User 85720 does not improve AUC. Reverting changes.
[2024-12-02 18:18:53.164679] start test user 111149 77/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:18:53.713654] start test user 111149 77/567 recall augumented users by random, augumented_users = [58447, 6386, 48356, 19731, 111098, 111668, 138225, 25368, 28687, 30523, 15989, 1119, 5782, 134415, 135651, 112635, 38705, 31062, 8820, 92194, 121945, 29363, 34972, 7938, 18347, 45205, 76805, 59231, 93788, 32822, 106056, 68552, 74226, 73044, 40518, 95543, 53715, 310, 76915, 66544, 26420, 97861, 36163, 77568, 78054, 19704, 101599, 67180, 125703, 26748]
[2024-12-02 18:18:53.729263] user = 111149 Cloud 77/567
[2024-12-02 18:18:53.764438] user = 111149 Local 77/567
[2024-12-02 18:18:53.998970] user = 111149 Local+ 77/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:18:56.209469] user = 111149 MPDA- 77/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7350000000000001
Training on augumented user 58447 0/50 current_auc = 0.7350000000000001
User 58447 AUC after training: 0.7350000000000001
User 58447 does not improve AUC. Reverting changes.
Training on augumented user 6386 1/50 current_auc = 0.7350000000000001
User 6386 AUC after training: 0.7350000000000001
User 6386 does not improve AUC. Reverting changes.
Training on augumented user 48356 2/50 current_auc = 0.7350000000000001
User 48356 AUC after training: 0.7350000000000001
User 48356 does not improve AUC. Reverting changes.
Training on augumented user 19731 3/50 current_auc = 0.7350000000000001
User 19731 AUC after training: 0.7350000000000001
User 19731 does not improve AUC. Reverting changes.
Training on augumented user 111098 4/50 current_auc = 0.7350000000000001
User 111098 AUC after training: 0.7350000000000001
User 111098 does not improve AUC. Reverting changes.
Training on augumented user 111668 5/50 current_auc = 0.7350000000000001
User 111668 AUC after training: 0.7350000000000001
User 111668 does not improve AUC. Reverting changes.
Training on augumented user 138225 6/50 current_auc = 0.7350000000000001
User 138225 AUC after training: 0.7350000000000001
User 138225 does not improve AUC. Reverting changes.
Training on augumented user 25368 7/50 current_auc = 0.7350000000000001
User 25368 AUC after training: 0.7350000000000001
User 25368 does not improve AUC. Reverting changes.
Training on augumented user 28687 8/50 current_auc = 0.7350000000000001
User 28687 AUC after training: 0.7350000000000001
User 28687 does not improve AUC. Reverting changes.
Training on augumented user 30523 9/50 current_auc = 0.7350000000000001
User 30523 AUC after training: 0.7350000000000001
User 30523 does not improve AUC. Reverting changes.
Training on augumented user 15989 10/50 current_auc = 0.7350000000000001
User 15989 AUC after training: 0.7350000000000001
User 15989 does not improve AUC. Reverting changes.
Training on augumented user 1119 11/50 current_auc = 0.7350000000000001
User 1119 AUC after training: 0.7350000000000001
User 1119 does not improve AUC. Reverting changes.
Training on augumented user 5782 12/50 current_auc = 0.7350000000000001
User 5782 AUC after training: 0.7350000000000001
User 5782 does not improve AUC. Reverting changes.
Training on augumented user 134415 13/50 current_auc = 0.7350000000000001
User 134415 AUC after training: 0.7350000000000001
User 134415 does not improve AUC. Reverting changes.
Training on augumented user 135651 14/50 current_auc = 0.7350000000000001
User 135651 AUC after training: 0.7350000000000001
User 135651 does not improve AUC. Reverting changes.
Training on augumented user 112635 15/50 current_auc = 0.7350000000000001
User 112635 AUC after training: 0.7350000000000001
User 112635 does not improve AUC. Reverting changes.
Training on augumented user 38705 16/50 current_auc = 0.7350000000000001
User 38705 AUC after training: 0.7350000000000001
User 38705 does not improve AUC. Reverting changes.
Training on augumented user 31062 17/50 current_auc = 0.7350000000000001
User 31062 AUC after training: 0.7350000000000001
User 31062 does not improve AUC. Reverting changes.
Training on augumented user 8820 18/50 current_auc = 0.7350000000000001
User 8820 AUC after training: 0.7350000000000001
User 8820 does not improve AUC. Reverting changes.
Training on augumented user 92194 19/50 current_auc = 0.7350000000000001
User 92194 AUC after training: 0.7383333333333333
User 92194 improves AUC. Keeping the model.
Training on augumented user 121945 20/50 current_auc = 0.7383333333333333
User 121945 AUC after training: 0.7383333333333333
User 121945 does not improve AUC. Reverting changes.
Training on augumented user 29363 21/50 current_auc = 0.7383333333333333
User 29363 AUC after training: 0.7375
User 29363 does not improve AUC. Reverting changes.
Training on augumented user 34972 22/50 current_auc = 0.7383333333333333
User 34972 AUC after training: 0.7383333333333333
User 34972 does not improve AUC. Reverting changes.
Training on augumented user 7938 23/50 current_auc = 0.7383333333333333
User 7938 AUC after training: 0.7383333333333333
User 7938 does not improve AUC. Reverting changes.
Training on augumented user 18347 24/50 current_auc = 0.7383333333333333
User 18347 AUC after training: 0.7383333333333333
User 18347 does not improve AUC. Reverting changes.
Training on augumented user 45205 25/50 current_auc = 0.7383333333333333
User 45205 AUC after training: 0.7383333333333333
User 45205 does not improve AUC. Reverting changes.
Training on augumented user 76805 26/50 current_auc = 0.7383333333333333
User 76805 AUC after training: 0.7383333333333333
User 76805 does not improve AUC. Reverting changes.
Training on augumented user 59231 27/50 current_auc = 0.7383333333333333
User 59231 AUC after training: 0.7383333333333333
User 59231 does not improve AUC. Reverting changes.
Training on augumented user 93788 28/50 current_auc = 0.7383333333333333
User 93788 AUC after training: 0.7383333333333333
User 93788 does not improve AUC. Reverting changes.
Training on augumented user 32822 29/50 current_auc = 0.7383333333333333
User 32822 AUC after training: 0.7383333333333333
User 32822 does not improve AUC. Reverting changes.
Training on augumented user 106056 30/50 current_auc = 0.7383333333333333
User 106056 AUC after training: 0.7383333333333333
User 106056 does not improve AUC. Reverting changes.
Training on augumented user 68552 31/50 current_auc = 0.7383333333333333
User 68552 AUC after training: 0.7383333333333333
User 68552 does not improve AUC. Reverting changes.
Training on augumented user 74226 32/50 current_auc = 0.7383333333333333
User 74226 AUC after training: 0.7383333333333333
User 74226 does not improve AUC. Reverting changes.
Training on augumented user 73044 33/50 current_auc = 0.7383333333333333
User 73044 AUC after training: 0.7383333333333333
User 73044 does not improve AUC. Reverting changes.
Training on augumented user 40518 34/50 current_auc = 0.7383333333333333
User 40518 AUC after training: 0.7366666666666667
User 40518 does not improve AUC. Reverting changes.
Training on augumented user 95543 35/50 current_auc = 0.7383333333333333
User 95543 AUC after training: 0.7383333333333333
User 95543 does not improve AUC. Reverting changes.
Training on augumented user 53715 36/50 current_auc = 0.7383333333333333
User 53715 AUC after training: 0.7383333333333333
User 53715 does not improve AUC. Reverting changes.
Training on augumented user 310 37/50 current_auc = 0.7383333333333333
User 310 AUC after training: 0.7383333333333333
User 310 does not improve AUC. Reverting changes.
Training on augumented user 76915 38/50 current_auc = 0.7383333333333333
User 76915 AUC after training: 0.7383333333333333
User 76915 does not improve AUC. Reverting changes.
Training on augumented user 66544 39/50 current_auc = 0.7383333333333333
User 66544 AUC after training: 0.74
User 66544 improves AUC. Keeping the model.
Training on augumented user 26420 40/50 current_auc = 0.74
User 26420 AUC after training: 0.735
User 26420 does not improve AUC. Reverting changes.
Training on augumented user 97861 41/50 current_auc = 0.74
User 97861 AUC after training: 0.74
User 97861 does not improve AUC. Reverting changes.
Training on augumented user 36163 42/50 current_auc = 0.74
User 36163 AUC after training: 0.7383333333333333
User 36163 does not improve AUC. Reverting changes.
Training on augumented user 77568 43/50 current_auc = 0.74
User 77568 AUC after training: 0.7383333333333333
User 77568 does not improve AUC. Reverting changes.
Training on augumented user 78054 44/50 current_auc = 0.74
User 78054 AUC after training: 0.7383333333333333
User 78054 does not improve AUC. Reverting changes.
Training on augumented user 19704 45/50 current_auc = 0.74
User 19704 AUC after training: 0.74
User 19704 does not improve AUC. Reverting changes.
Training on augumented user 101599 46/50 current_auc = 0.74
User 101599 AUC after training: 0.7383333333333333
User 101599 does not improve AUC. Reverting changes.
Training on augumented user 67180 47/50 current_auc = 0.74
User 67180 AUC after training: 0.7383333333333333
User 67180 does not improve AUC. Reverting changes.
Training on augumented user 125703 48/50 current_auc = 0.74
User 125703 AUC after training: 0.74
User 125703 does not improve AUC. Reverting changes.
Training on augumented user 26748 49/50 current_auc = 0.74
User 26748 AUC after training: 0.74
User 26748 does not improve AUC. Reverting changes.
[2024-12-02 18:19:24.086467] start test user 111162 78/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:19:24.571099] start test user 111162 78/567 recall augumented users by random, augumented_users = [25033, 85267, 74331, 4427, 76461, 62273, 127753, 117487, 104237, 63167, 81084, 66454, 126503, 47106, 36294, 23638, 121027, 125449, 68307, 13119, 26401, 60041, 29694, 90394, 16267, 6845, 117357, 76078, 101520, 62253, 34669, 72316, 96211, 63680, 128290, 89714, 25205, 12911, 124226, 86179, 93930, 132968, 71718, 95743, 61264, 36708, 58084, 100766, 35108, 78258]
[2024-12-02 18:19:24.586361] user = 111162 Cloud 78/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:19:24.593835] user = 111162 Local 78/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:19:24.667219] user = 111162 Local+ 78/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:19:27.589351] user = 111162 MPDA- 78/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 25033 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25033 AUC after training: 0.5
User 25033 does not improve AUC. Reverting changes.
Training on augumented user 85267 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85267 AUC after training: 0.5
User 85267 does not improve AUC. Reverting changes.
Training on augumented user 74331 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74331 AUC after training: 0.5
User 74331 does not improve AUC. Reverting changes.
Training on augumented user 4427 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4427 AUC after training: 0.5
User 4427 does not improve AUC. Reverting changes.
Training on augumented user 76461 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76461 AUC after training: 0.5
User 76461 does not improve AUC. Reverting changes.
Training on augumented user 62273 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62273 AUC after training: 0.5
User 62273 does not improve AUC. Reverting changes.
Training on augumented user 127753 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127753 AUC after training: 0.5
User 127753 does not improve AUC. Reverting changes.
Training on augumented user 117487 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117487 AUC after training: 0.5
User 117487 does not improve AUC. Reverting changes.
Training on augumented user 104237 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104237 AUC after training: 0.5
User 104237 does not improve AUC. Reverting changes.
Training on augumented user 63167 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63167 AUC after training: 0.5
User 63167 does not improve AUC. Reverting changes.
Training on augumented user 81084 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81084 AUC after training: 0.5
User 81084 does not improve AUC. Reverting changes.
Training on augumented user 66454 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66454 AUC after training: 0.5
User 66454 does not improve AUC. Reverting changes.
Training on augumented user 126503 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126503 AUC after training: 0.5
User 126503 does not improve AUC. Reverting changes.
Training on augumented user 47106 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47106 AUC after training: 0.5
User 47106 does not improve AUC. Reverting changes.
Training on augumented user 36294 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36294 AUC after training: 0.5
User 36294 does not improve AUC. Reverting changes.
Training on augumented user 23638 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23638 AUC after training: 0.5
User 23638 does not improve AUC. Reverting changes.
Training on augumented user 121027 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121027 AUC after training: 0.5
User 121027 does not improve AUC. Reverting changes.
Training on augumented user 125449 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 125449 AUC after training: 0.5
User 125449 does not improve AUC. Reverting changes.
Training on augumented user 68307 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68307 AUC after training: 0.5
User 68307 does not improve AUC. Reverting changes.
Training on augumented user 13119 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13119 AUC after training: 0.5
User 13119 does not improve AUC. Reverting changes.
Training on augumented user 26401 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26401 AUC after training: 0.5
User 26401 does not improve AUC. Reverting changes.
Training on augumented user 60041 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60041 AUC after training: 0.5
User 60041 does not improve AUC. Reverting changes.
Training on augumented user 29694 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29694 AUC after training: 0.5
User 29694 does not improve AUC. Reverting changes.
Training on augumented user 90394 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90394 AUC after training: 0.5
User 90394 does not improve AUC. Reverting changes.
Training on augumented user 16267 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16267 AUC after training: 0.5
User 16267 does not improve AUC. Reverting changes.
Training on augumented user 6845 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6845 AUC after training: 0.5
User 6845 does not improve AUC. Reverting changes.
Training on augumented user 117357 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117357 AUC after training: 0.5
User 117357 does not improve AUC. Reverting changes.
Training on augumented user 76078 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76078 AUC after training: 0.5
User 76078 does not improve AUC. Reverting changes.
Training on augumented user 101520 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101520 AUC after training: 0.5
User 101520 does not improve AUC. Reverting changes.
Training on augumented user 62253 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62253 AUC after training: 0.5
User 62253 does not improve AUC. Reverting changes.
Training on augumented user 34669 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 34669 AUC after training: 0.5
User 34669 does not improve AUC. Reverting changes.
Training on augumented user 72316 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72316 AUC after training: 0.5
User 72316 does not improve AUC. Reverting changes.
Training on augumented user 96211 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96211 AUC after training: 0.5
User 96211 does not improve AUC. Reverting changes.
Training on augumented user 63680 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63680 AUC after training: 0.5
User 63680 does not improve AUC. Reverting changes.
Training on augumented user 128290 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128290 AUC after training: 0.5
User 128290 does not improve AUC. Reverting changes.
Training on augumented user 89714 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89714 AUC after training: 0.5
User 89714 does not improve AUC. Reverting changes.
Training on augumented user 25205 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25205 AUC after training: 0.5
User 25205 does not improve AUC. Reverting changes.
Training on augumented user 12911 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12911 AUC after training: 0.5
User 12911 does not improve AUC. Reverting changes.
Training on augumented user 124226 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124226 AUC after training: 0.5
User 124226 does not improve AUC. Reverting changes.
Training on augumented user 86179 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86179 AUC after training: 0.5
User 86179 does not improve AUC. Reverting changes.
Training on augumented user 93930 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93930 AUC after training: 0.5
User 93930 does not improve AUC. Reverting changes.
Training on augumented user 132968 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132968 AUC after training: 0.5
User 132968 does not improve AUC. Reverting changes.
Training on augumented user 71718 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71718 AUC after training: 0.5
User 71718 does not improve AUC. Reverting changes.
Training on augumented user 95743 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95743 AUC after training: 0.5
User 95743 does not improve AUC. Reverting changes.
Training on augumented user 61264 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61264 AUC after training: 0.5
User 61264 does not improve AUC. Reverting changes.
Training on augumented user 36708 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36708 AUC after training: 0.5
User 36708 does not improve AUC. Reverting changes.
Training on augumented user 58084 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58084 AUC after training: 0.5
User 58084 does not improve AUC. Reverting changes.
Training on augumented user 100766 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100766 AUC after training: 0.5
User 100766 does not improve AUC. Reverting changes.
Training on augumented user 35108 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35108 AUC after training: 0.5
User 35108 does not improve AUC. Reverting changes.
Training on augumented user 78258 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 78258 AUC after training: 0.5
User 78258 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:19:58.094273] start test user 111193 79/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:19:58.596283] start test user 111193 79/567 recall augumented users by random, augumented_users = [34221, 50025, 105689, 77475, 116538, 73922, 37259, 138018, 101924, 25707, 53070, 89908, 123226, 93224, 106374, 39130, 119300, 84188, 849, 114609, 123864, 40485, 29312, 21769, 123492, 94397, 31846, 14781, 92403, 110463, 103862, 56549, 37242, 79483, 31375, 65853, 83717, 69570, 115808, 4676, 9246, 31647, 71013, 133849, 98254, 124793, 123849, 36997, 126357, 56108]
[2024-12-02 18:19:58.620376] user = 111193 Cloud 79/567
[2024-12-02 18:19:58.677041] user = 111193 Local 79/567
[2024-12-02 18:19:58.764037] user = 111193 Local+ 79/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:20:01.148857] user = 111193 MPDA- 79/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7715975544922913
Training on augumented user 34221 0/50 current_auc = 0.7715975544922913
User 34221 AUC after training: 0.7711057947900054
User 34221 does not improve AUC. Reverting changes.
Training on augumented user 50025 1/50 current_auc = 0.7715975544922913
User 50025 AUC after training: 0.7714646464646465
User 50025 does not improve AUC. Reverting changes.
Training on augumented user 105689 2/50 current_auc = 0.7715975544922913
User 105689 AUC after training: 0.7714646464646464
User 105689 does not improve AUC. Reverting changes.
Training on augumented user 77475 3/50 current_auc = 0.7715975544922913
User 77475 AUC after training: 0.7713849016480596
User 77475 does not improve AUC. Reverting changes.
Training on augumented user 116538 4/50 current_auc = 0.7715975544922913
User 116538 AUC after training: 0.7716241360978203
User 116538 improves AUC. Keeping the model.
Training on augumented user 73922 5/50 current_auc = 0.7716241360978203
User 73922 AUC after training: 0.7713849016480595
User 73922 does not improve AUC. Reverting changes.
Training on augumented user 37259 6/50 current_auc = 0.7716241360978203
User 37259 AUC after training: 0.7717038809144073
User 37259 improves AUC. Keeping the model.
Training on augumented user 138018 7/50 current_auc = 0.7717038809144073
User 138018 AUC after training: 0.771451355661882
User 138018 does not improve AUC. Reverting changes.
Training on augumented user 101924 8/50 current_auc = 0.7717038809144073
User 101924 AUC after training: 0.7715045188729399
User 101924 does not improve AUC. Reverting changes.
Training on augumented user 25707 9/50 current_auc = 0.7717038809144073
User 25707 AUC after training: 0.7711988304093568
User 25707 does not improve AUC. Reverting changes.
Training on augumented user 53070 10/50 current_auc = 0.7717038809144073
User 53070 AUC after training: 0.7713583200425307
User 53070 does not improve AUC. Reverting changes.
Training on augumented user 89908 11/50 current_auc = 0.7717038809144073
User 89908 AUC after training: 0.7715443912812335
User 89908 does not improve AUC. Reverting changes.
Training on augumented user 123226 12/50 current_auc = 0.7717038809144073
User 123226 AUC after training: 0.771610845295056
User 123226 does not improve AUC. Reverting changes.
Training on augumented user 93224 13/50 current_auc = 0.7717038809144073
User 93224 AUC after training: 0.7711988304093568
User 93224 does not improve AUC. Reverting changes.
Training on augumented user 106374 14/50 current_auc = 0.7717038809144073
User 106374 AUC after training: 0.7717304625199363
User 106374 improves AUC. Keeping the model.
Training on augumented user 39130 15/50 current_auc = 0.7717304625199363
User 39130 AUC after training: 0.7717038809144072
User 39130 does not improve AUC. Reverting changes.
Training on augumented user 119300 16/50 current_auc = 0.7717304625199363
User 119300 AUC after training: 0.7717304625199362
User 119300 does not improve AUC. Reverting changes.
Training on augumented user 84188 17/50 current_auc = 0.7717304625199363
User 84188 AUC after training: 0.7712918660287081
User 84188 does not improve AUC. Reverting changes.
Training on augumented user 849 18/50 current_auc = 0.7717304625199363
User 849 AUC after training: 0.7713450292397661
User 849 does not improve AUC. Reverting changes.
Training on augumented user 114609 19/50 current_auc = 0.7717304625199363
User 114609 AUC after training: 0.7713450292397661
User 114609 does not improve AUC. Reverting changes.
Training on augumented user 123864 20/50 current_auc = 0.7717304625199363
User 123864 AUC after training: 0.7708532695374801
User 123864 does not improve AUC. Reverting changes.
Training on augumented user 40485 21/50 current_auc = 0.7717304625199363
User 40485 AUC after training: 0.7711589580010633
User 40485 does not improve AUC. Reverting changes.
Training on augumented user 29312 22/50 current_auc = 0.7717304625199363
User 29312 AUC after training: 0.7713981924508241
User 29312 does not improve AUC. Reverting changes.
Training on augumented user 21769 23/50 current_auc = 0.7717304625199363
User 21769 AUC after training: 0.7714646464646465
User 21769 does not improve AUC. Reverting changes.
Training on augumented user 123492 24/50 current_auc = 0.7717304625199363
User 123492 AUC after training: 0.770800106326422
User 123492 does not improve AUC. Reverting changes.
Training on augumented user 94397 25/50 current_auc = 0.7717304625199363
User 94397 AUC after training: 0.7716241360978204
User 94397 does not improve AUC. Reverting changes.
Training on augumented user 31846 26/50 current_auc = 0.7717304625199363
User 31846 AUC after training: 0.771943115364168
User 31846 improves AUC. Keeping the model.
Training on augumented user 14781 27/50 current_auc = 0.771943115364168
User 14781 AUC after training: 0.7716772993088783
User 14781 does not improve AUC. Reverting changes.
Training on augumented user 92403 28/50 current_auc = 0.771943115364168
User 92403 AUC after training: 0.771477937267411
User 92403 does not improve AUC. Reverting changes.
Training on augumented user 110463 29/50 current_auc = 0.771943115364168
User 110463 AUC after training: 0.7712387028176502
User 110463 does not improve AUC. Reverting changes.
Training on augumented user 103862 30/50 current_auc = 0.771943115364168
User 103862 AUC after training: 0.771637426900585
User 103862 does not improve AUC. Reverting changes.
Training on augumented user 56549 31/50 current_auc = 0.771943115364168
User 56549 AUC after training: 0.7712652844231791
User 56549 does not improve AUC. Reverting changes.
Training on augumented user 37242 32/50 current_auc = 0.771943115364168
User 37242 AUC after training: 0.7715178096757044
User 37242 does not improve AUC. Reverting changes.
Training on augumented user 79483 33/50 current_auc = 0.771943115364168
User 79483 AUC after training: 0.7717836257309941
User 79483 does not improve AUC. Reverting changes.
Training on augumented user 31375 34/50 current_auc = 0.771943115364168
User 31375 AUC after training: 0.770959595959596
User 31375 does not improve AUC. Reverting changes.
Training on augumented user 65853 35/50 current_auc = 0.771943115364168
User 65853 AUC after training: 0.7710659223817118
User 65853 does not improve AUC. Reverting changes.
Training on augumented user 83717 36/50 current_auc = 0.771943115364168
User 83717 AUC after training: 0.7715045188729398
User 83717 does not improve AUC. Reverting changes.
Training on augumented user 69570 37/50 current_auc = 0.771943115364168
User 69570 AUC after training: 0.7718234981392876
User 69570 does not improve AUC. Reverting changes.
Training on augumented user 115808 38/50 current_auc = 0.771943115364168
User 115808 AUC after training: 0.7715443912812334
User 115808 does not improve AUC. Reverting changes.
Training on augumented user 4676 39/50 current_auc = 0.771943115364168
User 4676 AUC after training: 0.7716640085061138
User 4676 does not improve AUC. Reverting changes.
Training on augumented user 9246 40/50 current_auc = 0.771943115364168
User 9246 AUC after training: 0.7715045188729399
User 9246 does not improve AUC. Reverting changes.
Training on augumented user 31647 41/50 current_auc = 0.771943115364168
User 31647 AUC after training: 0.7718500797448167
User 31647 does not improve AUC. Reverting changes.
Training on augumented user 71013 42/50 current_auc = 0.771943115364168
User 71013 AUC after training: 0.7719564061669325
User 71013 improves AUC. Keeping the model.
Training on augumented user 133849 43/50 current_auc = 0.7719564061669325
User 133849 AUC after training: 0.7717038809144072
User 133849 does not improve AUC. Reverting changes.
Training on augumented user 98254 44/50 current_auc = 0.7719564061669325
User 98254 AUC after training: 0.771424774056353
User 98254 does not improve AUC. Reverting changes.
Training on augumented user 124793 45/50 current_auc = 0.7719564061669325
User 124793 AUC after training: 0.771916533758639
User 124793 does not improve AUC. Reverting changes.
Training on augumented user 123849 46/50 current_auc = 0.7719564061669325
User 123849 AUC after training: 0.7719298245614036
User 123849 does not improve AUC. Reverting changes.
Training on augumented user 36997 47/50 current_auc = 0.7719564061669325
User 36997 AUC after training: 0.7717703349282297
User 36997 does not improve AUC. Reverting changes.
Training on augumented user 126357 48/50 current_auc = 0.7719564061669325
User 126357 AUC after training: 0.7719298245614036
User 126357 does not improve AUC. Reverting changes.
Training on augumented user 56108 49/50 current_auc = 0.7719564061669325
User 56108 AUC after training: 0.7720361509835194
User 56108 improves AUC. Keeping the model.
[2024-12-02 18:20:33.447127] start test user 111202 80/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:20:34.201579] start test user 111202 80/567 recall augumented users by random, augumented_users = [69328, 112928, 114612, 70039, 84423, 13919, 117318, 87232, 73458, 6009, 18501, 133347, 49913, 72042, 125959, 82412, 93289, 89170, 104945, 31657, 6742, 50257, 28853, 45749, 90330, 43511, 106734, 10110, 116672, 111014, 55887, 75527, 82386, 6631, 104174, 117279, 32282, 133635, 101942, 42208, 73908, 112190, 27463, 75162, 12569, 97402, 100607, 64934, 71196, 40811]
[2024-12-02 18:20:34.218415] user = 111202 Cloud 80/567
[2024-12-02 18:20:34.268985] user = 111202 Local 80/567
[2024-12-02 18:20:34.389953] user = 111202 Local+ 80/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:20:36.755490] user = 111202 MPDA- 80/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7668715247292948
Training on augumented user 69328 0/50 current_auc = 0.7668715247292948
User 69328 AUC after training: 0.7667544629792216
User 69328 does not improve AUC. Reverting changes.
Training on augumented user 112928 1/50 current_auc = 0.7668715247292948
User 112928 AUC after training: 0.766832504145937
User 112928 does not improve AUC. Reverting changes.
Training on augumented user 114612 2/50 current_auc = 0.7668715247292948
User 114612 AUC after training: 0.7669593210418496
User 114612 improves AUC. Keeping the model.
Training on augumented user 70039 3/50 current_auc = 0.7669593210418496
User 70039 AUC after training: 0.7671251585211198
User 70039 improves AUC. Keeping the model.
Training on augumented user 84423 4/50 current_auc = 0.7671251585211198
User 84423 AUC after training: 0.7672227099795141
User 84423 improves AUC. Keeping the model.
Training on augumented user 13919 5/50 current_auc = 0.7672227099795141
User 13919 AUC after training: 0.767261730562872
User 13919 improves AUC. Keeping the model.
Training on augumented user 117318 6/50 current_auc = 0.767261730562872
User 117318 AUC after training: 0.7673983026046239
User 117318 improves AUC. Keeping the model.
Training on augumented user 87232 7/50 current_auc = 0.7673983026046239
User 87232 AUC after training: 0.7674958540630182
User 87232 improves AUC. Keeping the model.
Training on augumented user 73458 8/50 current_auc = 0.7674958540630182
User 73458 AUC after training: 0.7676324261047702
User 73458 improves AUC. Keeping the model.
Training on augumented user 6009 9/50 current_auc = 0.7676324261047702
User 6009 AUC after training: 0.7674373231879816
User 6009 does not improve AUC. Reverting changes.
Training on augumented user 18501 10/50 current_auc = 0.7676324261047702
User 18501 AUC after training: 0.7675348746463759
User 18501 does not improve AUC. Reverting changes.
Training on augumented user 133347 11/50 current_auc = 0.7676324261047702
User 133347 AUC after training: 0.767515364354697
User 133347 does not improve AUC. Reverting changes.
Training on augumented user 49913 12/50 current_auc = 0.7676324261047702
User 49913 AUC after training: 0.7673202614379084
User 49913 does not improve AUC. Reverting changes.
Training on augumented user 72042 13/50 current_auc = 0.7676324261047702
User 72042 AUC after training: 0.7675934055214125
User 72042 does not improve AUC. Reverting changes.
Training on augumented user 125959 14/50 current_auc = 0.7676324261047702
User 125959 AUC after training: 0.7674958540630183
User 125959 does not improve AUC. Reverting changes.
Training on augumented user 82412 15/50 current_auc = 0.7676324261047702
User 82412 AUC after training: 0.7674178128963027
User 82412 does not improve AUC. Reverting changes.
Training on augumented user 93289 16/50 current_auc = 0.7676324261047702
User 93289 AUC after training: 0.767515364354697
User 93289 does not improve AUC. Reverting changes.
Training on augumented user 89170 17/50 current_auc = 0.7676324261047702
User 89170 AUC after training: 0.7676324261047703
User 89170 improves AUC. Keeping the model.
Training on augumented user 104945 18/50 current_auc = 0.7676324261047703
User 104945 AUC after training: 0.7675738952297336
User 104945 does not improve AUC. Reverting changes.
Training on augumented user 31657 19/50 current_auc = 0.7676324261047703
User 31657 AUC after training: 0.7675738952297337
User 31657 does not improve AUC. Reverting changes.
Training on augumented user 6742 20/50 current_auc = 0.7676324261047703
User 6742 AUC after training: 0.7675543849380547
User 6742 does not improve AUC. Reverting changes.
Training on augumented user 50257 21/50 current_auc = 0.7676324261047703
User 50257 AUC after training: 0.7675348746463759
User 50257 does not improve AUC. Reverting changes.
Training on augumented user 28853 22/50 current_auc = 0.7676324261047703
User 28853 AUC after training: 0.7674373231879816
User 28853 does not improve AUC. Reverting changes.
Training on augumented user 45749 23/50 current_auc = 0.7676324261047703
User 45749 AUC after training: 0.7673983026046239
User 45749 does not improve AUC. Reverting changes.
Training on augumented user 90330 24/50 current_auc = 0.7676324261047703
User 90330 AUC after training: 0.7673007511462298
User 90330 does not improve AUC. Reverting changes.
Training on augumented user 43511 25/50 current_auc = 0.7676324261047703
User 43511 AUC after training: 0.7675934055214124
User 43511 does not improve AUC. Reverting changes.
Training on augumented user 106734 26/50 current_auc = 0.7676324261047703
User 106734 AUC after training: 0.7676714466881279
User 106734 improves AUC. Keeping the model.
Training on augumented user 10110 27/50 current_auc = 0.7676714466881279
User 10110 AUC after training: 0.7678470393132377
User 10110 improves AUC. Keeping the model.
Training on augumented user 116672 28/50 current_auc = 0.7678470393132377
User 116672 AUC after training: 0.7677494878548434
User 116672 does not improve AUC. Reverting changes.
Training on augumented user 111014 29/50 current_auc = 0.7678470393132377
User 111014 AUC after training: 0.7678665496049165
User 111014 improves AUC. Keeping the model.
Training on augumented user 55887 30/50 current_auc = 0.7678665496049165
User 55887 AUC after training: 0.7674178128963027
User 55887 does not improve AUC. Reverting changes.
Training on augumented user 75527 31/50 current_auc = 0.7678665496049165
User 75527 AUC after training: 0.7677104672714858
User 75527 does not improve AUC. Reverting changes.
Training on augumented user 82386 32/50 current_auc = 0.7678665496049165
User 82386 AUC after training: 0.7679250804799531
User 82386 improves AUC. Keeping the model.
Training on augumented user 6631 33/50 current_auc = 0.7679250804799531
User 6631 AUC after training: 0.7678275290215588
User 6631 does not improve AUC. Reverting changes.
Training on augumented user 104174 34/50 current_auc = 0.7679250804799531
User 104174 AUC after training: 0.7675348746463759
User 104174 does not improve AUC. Reverting changes.
Training on augumented user 117279 35/50 current_auc = 0.7679250804799531
User 117279 AUC after training: 0.7673983026046238
User 117279 does not improve AUC. Reverting changes.
Training on augumented user 32282 36/50 current_auc = 0.7679250804799531
User 32282 AUC after training: 0.7678665496049166
User 32282 does not improve AUC. Reverting changes.
Training on augumented user 133635 37/50 current_auc = 0.7679250804799531
User 133635 AUC after training: 0.7674763437713393
User 133635 does not improve AUC. Reverting changes.
Training on augumented user 101942 38/50 current_auc = 0.7679250804799531
User 101942 AUC after training: 0.7675934055214124
User 101942 does not improve AUC. Reverting changes.
Training on augumented user 42208 39/50 current_auc = 0.7679250804799531
User 42208 AUC after training: 0.7677689981465223
User 42208 does not improve AUC. Reverting changes.
Training on augumented user 73908 40/50 current_auc = 0.7679250804799531
User 73908 AUC after training: 0.7675934055214126
User 73908 does not improve AUC. Reverting changes.
Training on augumented user 112190 41/50 current_auc = 0.7679250804799531
User 112190 AUC after training: 0.7676519363964489
User 112190 does not improve AUC. Reverting changes.
Training on augumented user 27463 42/50 current_auc = 0.7679250804799531
User 27463 AUC after training: 0.7670080967710468
User 27463 does not improve AUC. Reverting changes.
Training on augumented user 75162 43/50 current_auc = 0.7679250804799531
User 75162 AUC after training: 0.7673983026046239
User 75162 does not improve AUC. Reverting changes.
Training on augumented user 12569 44/50 current_auc = 0.7679250804799531
User 12569 AUC after training: 0.7675934055214125
User 12569 does not improve AUC. Reverting changes.
Training on augumented user 97402 45/50 current_auc = 0.7679250804799531
User 97402 AUC after training: 0.7676714466881279
User 97402 does not improve AUC. Reverting changes.
Training on augumented user 100607 46/50 current_auc = 0.7679250804799531
User 100607 AUC after training: 0.7675934055214126
User 100607 does not improve AUC. Reverting changes.
Training on augumented user 64934 47/50 current_auc = 0.7679250804799531
User 64934 AUC after training: 0.7676129158130914
User 64934 does not improve AUC. Reverting changes.
Training on augumented user 71196 48/50 current_auc = 0.7679250804799531
User 71196 AUC after training: 0.7675348746463759
User 71196 does not improve AUC. Reverting changes.
Training on augumented user 40811 49/50 current_auc = 0.7679250804799531
User 40811 AUC after training: 0.7678470393132377
User 40811 does not improve AUC. Reverting changes.
[2024-12-02 18:21:07.040652] start test user 111235 81/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:21:07.698262] start test user 111235 81/567 recall augumented users by random, augumented_users = [102518, 98130, 42384, 105893, 69117, 29625, 38593, 121401, 5047, 69645, 31414, 64845, 65257, 11470, 108352, 36259, 115770, 57152, 136768, 24048, 50482, 31432, 2354, 2867, 67151, 31502, 112039, 26377, 128739, 135491, 9000, 112082, 14200, 53968, 134314, 84675, 104526, 32607, 91141, 38920, 120149, 66709, 69670, 118510, 59561, 106022, 14794, 109782, 128424, 128283]
[2024-12-02 18:21:07.738369] user = 111235 Cloud 81/567
[2024-12-02 18:21:07.770705] user = 111235 Local 81/567
[2024-12-02 18:21:07.815104] user = 111235 Local+ 81/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:21:10.736549] user = 111235 MPDA- 81/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6984126984126985
Training on augumented user 102518 0/50 current_auc = 0.6984126984126985
User 102518 AUC after training: 0.6984126984126985
User 102518 does not improve AUC. Reverting changes.
Training on augumented user 98130 1/50 current_auc = 0.6984126984126985
User 98130 AUC after training: 0.6984126984126985
User 98130 does not improve AUC. Reverting changes.
Training on augumented user 42384 2/50 current_auc = 0.6984126984126985
User 42384 AUC after training: 0.6984126984126985
User 42384 does not improve AUC. Reverting changes.
Training on augumented user 105893 3/50 current_auc = 0.6984126984126985
User 105893 AUC after training: 0.6984126984126985
User 105893 does not improve AUC. Reverting changes.
Training on augumented user 69117 4/50 current_auc = 0.6984126984126985
User 69117 AUC after training: 0.6984126984126984
User 69117 does not improve AUC. Reverting changes.
Training on augumented user 29625 5/50 current_auc = 0.6984126984126985
User 29625 AUC after training: 0.6984126984126985
User 29625 does not improve AUC. Reverting changes.
Training on augumented user 38593 6/50 current_auc = 0.6984126984126985
User 38593 AUC after training: 0.6984126984126985
User 38593 does not improve AUC. Reverting changes.
Training on augumented user 121401 7/50 current_auc = 0.6984126984126985
User 121401 AUC after training: 0.6944444444444444
User 121401 does not improve AUC. Reverting changes.
Training on augumented user 5047 8/50 current_auc = 0.6984126984126985
User 5047 AUC after training: 0.6984126984126985
User 5047 does not improve AUC. Reverting changes.
Training on augumented user 69645 9/50 current_auc = 0.6984126984126985
User 69645 AUC after training: 0.7023809523809524
User 69645 improves AUC. Keeping the model.
Training on augumented user 31414 10/50 current_auc = 0.7023809523809524
User 31414 AUC after training: 0.6944444444444444
User 31414 does not improve AUC. Reverting changes.
Training on augumented user 64845 11/50 current_auc = 0.7023809523809524
User 64845 AUC after training: 0.7023809523809524
User 64845 does not improve AUC. Reverting changes.
Training on augumented user 65257 12/50 current_auc = 0.7023809523809524
User 65257 AUC after training: 0.7023809523809524
User 65257 does not improve AUC. Reverting changes.
Training on augumented user 11470 13/50 current_auc = 0.7023809523809524
User 11470 AUC after training: 0.7023809523809524
User 11470 does not improve AUC. Reverting changes.
Training on augumented user 108352 14/50 current_auc = 0.7023809523809524
User 108352 AUC after training: 0.7023809523809524
User 108352 does not improve AUC. Reverting changes.
Training on augumented user 36259 15/50 current_auc = 0.7023809523809524
User 36259 AUC after training: 0.7023809523809524
User 36259 does not improve AUC. Reverting changes.
Training on augumented user 115770 16/50 current_auc = 0.7023809523809524
User 115770 AUC after training: 0.7023809523809524
User 115770 does not improve AUC. Reverting changes.
Training on augumented user 57152 17/50 current_auc = 0.7023809523809524
User 57152 AUC after training: 0.7023809523809524
User 57152 does not improve AUC. Reverting changes.
Training on augumented user 136768 18/50 current_auc = 0.7023809523809524
User 136768 AUC after training: 0.7023809523809524
User 136768 does not improve AUC. Reverting changes.
Training on augumented user 24048 19/50 current_auc = 0.7023809523809524
User 24048 AUC after training: 0.7023809523809524
User 24048 does not improve AUC. Reverting changes.
Training on augumented user 50482 20/50 current_auc = 0.7023809523809524
User 50482 AUC after training: 0.7023809523809524
User 50482 does not improve AUC. Reverting changes.
Training on augumented user 31432 21/50 current_auc = 0.7023809523809524
User 31432 AUC after training: 0.7023809523809524
User 31432 does not improve AUC. Reverting changes.
Training on augumented user 2354 22/50 current_auc = 0.7023809523809524
User 2354 AUC after training: 0.7023809523809524
User 2354 does not improve AUC. Reverting changes.
Training on augumented user 2867 23/50 current_auc = 0.7023809523809524
User 2867 AUC after training: 0.7023809523809524
User 2867 does not improve AUC. Reverting changes.
Training on augumented user 67151 24/50 current_auc = 0.7023809523809524
User 67151 AUC after training: 0.7023809523809524
User 67151 does not improve AUC. Reverting changes.
Training on augumented user 31502 25/50 current_auc = 0.7023809523809524
User 31502 AUC after training: 0.7023809523809524
User 31502 does not improve AUC. Reverting changes.
Training on augumented user 112039 26/50 current_auc = 0.7023809523809524
User 112039 AUC after training: 0.7023809523809524
User 112039 does not improve AUC. Reverting changes.
Training on augumented user 26377 27/50 current_auc = 0.7023809523809524
User 26377 AUC after training: 0.7023809523809524
User 26377 does not improve AUC. Reverting changes.
Training on augumented user 128739 28/50 current_auc = 0.7023809523809524
User 128739 AUC after training: 0.6984126984126985
User 128739 does not improve AUC. Reverting changes.
Training on augumented user 135491 29/50 current_auc = 0.7023809523809524
User 135491 AUC after training: 0.7023809523809524
User 135491 does not improve AUC. Reverting changes.
Training on augumented user 9000 30/50 current_auc = 0.7023809523809524
User 9000 AUC after training: 0.7023809523809524
User 9000 does not improve AUC. Reverting changes.
Training on augumented user 112082 31/50 current_auc = 0.7023809523809524
User 112082 AUC after training: 0.6984126984126985
User 112082 does not improve AUC. Reverting changes.
Training on augumented user 14200 32/50 current_auc = 0.7023809523809524
User 14200 AUC after training: 0.7023809523809524
User 14200 does not improve AUC. Reverting changes.
Training on augumented user 53968 33/50 current_auc = 0.7023809523809524
User 53968 AUC after training: 0.7023809523809524
User 53968 does not improve AUC. Reverting changes.
Training on augumented user 134314 34/50 current_auc = 0.7023809523809524
User 134314 AUC after training: 0.7023809523809524
User 134314 does not improve AUC. Reverting changes.
Training on augumented user 84675 35/50 current_auc = 0.7023809523809524
User 84675 AUC after training: 0.7023809523809524
User 84675 does not improve AUC. Reverting changes.
Training on augumented user 104526 36/50 current_auc = 0.7023809523809524
User 104526 AUC after training: 0.7023809523809524
User 104526 does not improve AUC. Reverting changes.
Training on augumented user 32607 37/50 current_auc = 0.7023809523809524
User 32607 AUC after training: 0.6984126984126985
User 32607 does not improve AUC. Reverting changes.
Training on augumented user 91141 38/50 current_auc = 0.7023809523809524
User 91141 AUC after training: 0.7023809523809524
User 91141 does not improve AUC. Reverting changes.
Training on augumented user 38920 39/50 current_auc = 0.7023809523809524
User 38920 AUC after training: 0.7023809523809524
User 38920 does not improve AUC. Reverting changes.
Training on augumented user 120149 40/50 current_auc = 0.7023809523809524
User 120149 AUC after training: 0.7023809523809524
User 120149 does not improve AUC. Reverting changes.
Training on augumented user 66709 41/50 current_auc = 0.7023809523809524
User 66709 AUC after training: 0.7023809523809524
User 66709 does not improve AUC. Reverting changes.
Training on augumented user 69670 42/50 current_auc = 0.7023809523809524
User 69670 AUC after training: 0.7023809523809524
User 69670 does not improve AUC. Reverting changes.
Training on augumented user 118510 43/50 current_auc = 0.7023809523809524
User 118510 AUC after training: 0.6944444444444445
User 118510 does not improve AUC. Reverting changes.
Training on augumented user 59561 44/50 current_auc = 0.7023809523809524
User 59561 AUC after training: 0.7023809523809524
User 59561 does not improve AUC. Reverting changes.
Training on augumented user 106022 45/50 current_auc = 0.7023809523809524
User 106022 AUC after training: 0.7023809523809524
User 106022 does not improve AUC. Reverting changes.
Training on augumented user 14794 46/50 current_auc = 0.7023809523809524
User 14794 AUC after training: 0.6984126984126985
User 14794 does not improve AUC. Reverting changes.
Training on augumented user 109782 47/50 current_auc = 0.7023809523809524
User 109782 AUC after training: 0.7023809523809524
User 109782 does not improve AUC. Reverting changes.
Training on augumented user 128424 48/50 current_auc = 0.7023809523809524
User 128424 AUC after training: 0.7023809523809524
User 128424 does not improve AUC. Reverting changes.
Training on augumented user 128283 49/50 current_auc = 0.7023809523809524
User 128283 AUC after training: 0.7023809523809524
User 128283 does not improve AUC. Reverting changes.
[2024-12-02 18:21:40.053802] start test user 111266 82/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:21:40.495091] start test user 111266 82/567 recall augumented users by random, augumented_users = [37547, 92156, 59398, 114105, 20820, 77943, 26061, 28827, 60491, 51586, 105433, 100437, 43311, 120136, 75801, 102556, 47757, 12128, 83998, 16936, 103880, 76353, 38431, 99899, 76528, 106150, 105097, 42665, 125441, 112351, 62504, 67404, 130075, 61891, 38220, 111183, 102289, 6476, 109000, 76784, 98046, 39139, 50676, 42071, 102420, 133690, 32753, 90997, 49249, 12712]
[2024-12-02 18:21:40.510331] user = 111266 Cloud 82/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:21:40.527651] user = 111266 Local 82/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:21:40.550894] user = 111266 Local+ 82/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:21:43.159519] user = 111266 MPDA- 82/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 37547 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37547 AUC after training: 0.5
User 37547 does not improve AUC. Reverting changes.
Training on augumented user 92156 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92156 AUC after training: 0.5
User 92156 does not improve AUC. Reverting changes.
Training on augumented user 59398 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59398 AUC after training: 0.5
User 59398 does not improve AUC. Reverting changes.
Training on augumented user 114105 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114105 AUC after training: 0.5
User 114105 does not improve AUC. Reverting changes.
Training on augumented user 20820 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20820 AUC after training: 0.5
User 20820 does not improve AUC. Reverting changes.
Training on augumented user 77943 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77943 AUC after training: 0.5
User 77943 does not improve AUC. Reverting changes.
Training on augumented user 26061 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26061 AUC after training: 0.5
User 26061 does not improve AUC. Reverting changes.
Training on augumented user 28827 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28827 AUC after training: 0.5
User 28827 does not improve AUC. Reverting changes.
Training on augumented user 60491 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60491 AUC after training: 0.5
User 60491 does not improve AUC. Reverting changes.
Training on augumented user 51586 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51586 AUC after training: 0.5
User 51586 does not improve AUC. Reverting changes.
Training on augumented user 105433 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105433 AUC after training: 0.5
User 105433 does not improve AUC. Reverting changes.
Training on augumented user 100437 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100437 AUC after training: 0.5
User 100437 does not improve AUC. Reverting changes.
Training on augumented user 43311 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43311 AUC after training: 0.5
User 43311 does not improve AUC. Reverting changes.
Training on augumented user 120136 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120136 AUC after training: 0.5
User 120136 does not improve AUC. Reverting changes.
Training on augumented user 75801 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75801 AUC after training: 0.5
User 75801 does not improve AUC. Reverting changes.
Training on augumented user 102556 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102556 AUC after training: 0.5
User 102556 does not improve AUC. Reverting changes.
Training on augumented user 47757 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47757 AUC after training: 0.5
User 47757 does not improve AUC. Reverting changes.
Training on augumented user 12128 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12128 AUC after training: 0.5
User 12128 does not improve AUC. Reverting changes.
Training on augumented user 83998 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83998 AUC after training: 0.5
User 83998 does not improve AUC. Reverting changes.
Training on augumented user 16936 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16936 AUC after training: 0.5
User 16936 does not improve AUC. Reverting changes.
Training on augumented user 103880 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103880 AUC after training: 0.5
User 103880 does not improve AUC. Reverting changes.
Training on augumented user 76353 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76353 AUC after training: 0.5
User 76353 does not improve AUC. Reverting changes.
Training on augumented user 38431 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38431 AUC after training: 0.5
User 38431 does not improve AUC. Reverting changes.
Training on augumented user 99899 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99899 AUC after training: 0.5
User 99899 does not improve AUC. Reverting changes.
Training on augumented user 76528 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76528 AUC after training: 0.5
User 76528 does not improve AUC. Reverting changes.
Training on augumented user 106150 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106150 AUC after training: 0.5
User 106150 does not improve AUC. Reverting changes.
Training on augumented user 105097 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105097 AUC after training: 0.5
User 105097 does not improve AUC. Reverting changes.
Training on augumented user 42665 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42665 AUC after training: 0.5
User 42665 does not improve AUC. Reverting changes.
Training on augumented user 125441 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 125441 AUC after training: 0.5
User 125441 does not improve AUC. Reverting changes.
Training on augumented user 112351 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112351 AUC after training: 0.5
User 112351 does not improve AUC. Reverting changes.
Training on augumented user 62504 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62504 AUC after training: 0.5
User 62504 does not improve AUC. Reverting changes.
Training on augumented user 67404 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67404 AUC after training: 0.5
User 67404 does not improve AUC. Reverting changes.
Training on augumented user 130075 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130075 AUC after training: 0.5
User 130075 does not improve AUC. Reverting changes.
Training on augumented user 61891 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61891 AUC after training: 0.5
User 61891 does not improve AUC. Reverting changes.
Training on augumented user 38220 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38220 AUC after training: 0.5
User 38220 does not improve AUC. Reverting changes.
Training on augumented user 111183 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111183 AUC after training: 0.5
User 111183 does not improve AUC. Reverting changes.
Training on augumented user 102289 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102289 AUC after training: 0.5
User 102289 does not improve AUC. Reverting changes.
Training on augumented user 6476 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6476 AUC after training: 0.5
User 6476 does not improve AUC. Reverting changes.
Training on augumented user 109000 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109000 AUC after training: 0.5
User 109000 does not improve AUC. Reverting changes.
Training on augumented user 76784 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76784 AUC after training: 0.5
User 76784 does not improve AUC. Reverting changes.
Training on augumented user 98046 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98046 AUC after training: 0.5
User 98046 does not improve AUC. Reverting changes.
Training on augumented user 39139 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 39139 AUC after training: 0.5
User 39139 does not improve AUC. Reverting changes.
Training on augumented user 50676 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50676 AUC after training: 0.5
User 50676 does not improve AUC. Reverting changes.
Training on augumented user 42071 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42071 AUC after training: 0.5
User 42071 does not improve AUC. Reverting changes.
Training on augumented user 102420 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102420 AUC after training: 0.5
User 102420 does not improve AUC. Reverting changes.
Training on augumented user 133690 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133690 AUC after training: 0.5
User 133690 does not improve AUC. Reverting changes.
Training on augumented user 32753 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32753 AUC after training: 0.5
User 32753 does not improve AUC. Reverting changes.
Training on augumented user 90997 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90997 AUC after training: 0.5
User 90997 does not improve AUC. Reverting changes.
Training on augumented user 49249 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49249 AUC after training: 0.5
User 49249 does not improve AUC. Reverting changes.
Training on augumented user 12712 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12712 AUC after training: 0.5
User 12712 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:22:06.654362] start test user 111277 83/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:22:07.061157] start test user 111277 83/567 recall augumented users by random, augumented_users = [61217, 58099, 118660, 19973, 63022, 132434, 40709, 89004, 43540, 79264, 103575, 22715, 109882, 20267, 120708, 93604, 73607, 84756, 14956, 67783, 72765, 9857, 42211, 1430, 15342, 84520, 114504, 22207, 88886, 92317, 41312, 104011, 116031, 50884, 62590, 15939, 95225, 75157, 23927, 121371, 21129, 13243, 93340, 43868, 127134, 106723, 70889, 79808, 98761, 102635]
[2024-12-02 18:22:07.076867] user = 111277 Cloud 83/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:22:07.092493] user = 111277 Local 83/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:22:07.134008] user = 111277 Local+ 83/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:22:08.762861] user = 111277 MPDA- 83/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 61217 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61217 AUC after training: 0.5
User 61217 does not improve AUC. Reverting changes.
Training on augumented user 58099 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58099 AUC after training: 0.5
User 58099 does not improve AUC. Reverting changes.
Training on augumented user 118660 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118660 AUC after training: 0.5
User 118660 does not improve AUC. Reverting changes.
Training on augumented user 19973 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19973 AUC after training: 0.5
User 19973 does not improve AUC. Reverting changes.
Training on augumented user 63022 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63022 AUC after training: 0.5
User 63022 does not improve AUC. Reverting changes.
Training on augumented user 132434 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132434 AUC after training: 0.5
User 132434 does not improve AUC. Reverting changes.
Training on augumented user 40709 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40709 AUC after training: 0.5
User 40709 does not improve AUC. Reverting changes.
Training on augumented user 89004 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89004 AUC after training: 0.5
User 89004 does not improve AUC. Reverting changes.
Training on augumented user 43540 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43540 AUC after training: 0.5
User 43540 does not improve AUC. Reverting changes.
Training on augumented user 79264 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79264 AUC after training: 0.5
User 79264 does not improve AUC. Reverting changes.
Training on augumented user 103575 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103575 AUC after training: 0.5
User 103575 does not improve AUC. Reverting changes.
Training on augumented user 22715 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22715 AUC after training: 0.5
User 22715 does not improve AUC. Reverting changes.
Training on augumented user 109882 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109882 AUC after training: 0.5
User 109882 does not improve AUC. Reverting changes.
Training on augumented user 20267 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20267 AUC after training: 0.5
User 20267 does not improve AUC. Reverting changes.
Training on augumented user 120708 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120708 AUC after training: 0.5
User 120708 does not improve AUC. Reverting changes.
Training on augumented user 93604 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93604 AUC after training: 0.5
User 93604 does not improve AUC. Reverting changes.
Training on augumented user 73607 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73607 AUC after training: 0.5
User 73607 does not improve AUC. Reverting changes.
Training on augumented user 84756 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84756 AUC after training: 0.5
User 84756 does not improve AUC. Reverting changes.
Training on augumented user 14956 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14956 AUC after training: 0.5
User 14956 does not improve AUC. Reverting changes.
Training on augumented user 67783 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67783 AUC after training: 0.5
User 67783 does not improve AUC. Reverting changes.
Training on augumented user 72765 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72765 AUC after training: 0.5
User 72765 does not improve AUC. Reverting changes.
Training on augumented user 9857 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9857 AUC after training: 0.5
User 9857 does not improve AUC. Reverting changes.
Training on augumented user 42211 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42211 AUC after training: 0.5
User 42211 does not improve AUC. Reverting changes.
Training on augumented user 1430 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1430 AUC after training: 0.5
User 1430 does not improve AUC. Reverting changes.
Training on augumented user 15342 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15342 AUC after training: 0.5
User 15342 does not improve AUC. Reverting changes.
Training on augumented user 84520 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84520 AUC after training: 0.5
User 84520 does not improve AUC. Reverting changes.
Training on augumented user 114504 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114504 AUC after training: 0.5
User 114504 does not improve AUC. Reverting changes.
Training on augumented user 22207 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22207 AUC after training: 0.5
User 22207 does not improve AUC. Reverting changes.
Training on augumented user 88886 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88886 AUC after training: 0.5
User 88886 does not improve AUC. Reverting changes.
Training on augumented user 92317 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92317 AUC after training: 0.5
User 92317 does not improve AUC. Reverting changes.
Training on augumented user 41312 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41312 AUC after training: 0.5
User 41312 does not improve AUC. Reverting changes.
Training on augumented user 104011 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104011 AUC after training: 0.5
User 104011 does not improve AUC. Reverting changes.
Training on augumented user 116031 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116031 AUC after training: 0.5
User 116031 does not improve AUC. Reverting changes.
Training on augumented user 50884 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50884 AUC after training: 0.5
User 50884 does not improve AUC. Reverting changes.
Training on augumented user 62590 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62590 AUC after training: 0.5
User 62590 does not improve AUC. Reverting changes.
Training on augumented user 15939 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15939 AUC after training: 0.5
User 15939 does not improve AUC. Reverting changes.
Training on augumented user 95225 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95225 AUC after training: 0.5
User 95225 does not improve AUC. Reverting changes.
Training on augumented user 75157 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75157 AUC after training: 0.5
User 75157 does not improve AUC. Reverting changes.
Training on augumented user 23927 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23927 AUC after training: 0.5
User 23927 does not improve AUC. Reverting changes.
Training on augumented user 121371 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121371 AUC after training: 0.5
User 121371 does not improve AUC. Reverting changes.
Training on augumented user 21129 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21129 AUC after training: 0.5
User 21129 does not improve AUC. Reverting changes.
Training on augumented user 13243 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13243 AUC after training: 0.5
User 13243 does not improve AUC. Reverting changes.
Training on augumented user 93340 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93340 AUC after training: 0.5
User 93340 does not improve AUC. Reverting changes.
Training on augumented user 43868 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43868 AUC after training: 0.5
User 43868 does not improve AUC. Reverting changes.
Training on augumented user 127134 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127134 AUC after training: 0.5
User 127134 does not improve AUC. Reverting changes.
Training on augumented user 106723 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106723 AUC after training: 0.5
User 106723 does not improve AUC. Reverting changes.
Training on augumented user 70889 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70889 AUC after training: 0.5
User 70889 does not improve AUC. Reverting changes.
Training on augumented user 79808 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79808 AUC after training: 0.5
User 79808 does not improve AUC. Reverting changes.
Training on augumented user 98761 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98761 AUC after training: 0.5
User 98761 does not improve AUC. Reverting changes.
Training on augumented user 102635 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102635 AUC after training: 0.5
User 102635 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:22:38.050447] start test user 111321 84/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:22:38.518348] start test user 111321 84/567 recall augumented users by random, augumented_users = [18305, 92395, 81597, 33394, 44449, 92583, 129890, 74977, 138152, 91319, 71066, 36172, 118731, 70627, 127581, 128109, 136521, 12026, 78258, 117464, 3616, 50553, 56452, 92169, 44281, 43461, 35830, 137028, 107933, 17839, 4500, 66569, 82400, 34468, 6617, 34224, 19022, 10919, 1681, 38392, 2250, 32577, 127722, 103025, 88241, 129164, 77188, 125016, 113498, 122386]
[2024-12-02 18:22:38.533904] user = 111321 Cloud 84/567
[2024-12-02 18:22:38.555848] user = 111321 Local 84/567
[2024-12-02 18:22:38.665434] user = 111321 Local+ 84/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:22:41.436238] user = 111321 MPDA- 84/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5862101313320826
Training on augumented user 18305 0/50 current_auc = 0.5862101313320826
User 18305 AUC after training: 0.5863977485928705
User 18305 improves AUC. Keeping the model.
Training on augumented user 92395 1/50 current_auc = 0.5863977485928705
User 92395 AUC after training: 0.5852720450281426
User 92395 does not improve AUC. Reverting changes.
Training on augumented user 81597 2/50 current_auc = 0.5863977485928705
User 81597 AUC after training: 0.5863977485928705
User 81597 does not improve AUC. Reverting changes.
Training on augumented user 33394 3/50 current_auc = 0.5863977485928705
User 33394 AUC after training: 0.5862101313320827
User 33394 does not improve AUC. Reverting changes.
Training on augumented user 44449 4/50 current_auc = 0.5863977485928705
User 44449 AUC after training: 0.5863977485928705
User 44449 does not improve AUC. Reverting changes.
Training on augumented user 92583 5/50 current_auc = 0.5863977485928705
User 92583 AUC after training: 0.5864915572232645
User 92583 improves AUC. Keeping the model.
Training on augumented user 129890 6/50 current_auc = 0.5864915572232645
User 129890 AUC after training: 0.5865853658536585
User 129890 improves AUC. Keeping the model.
Training on augumented user 74977 7/50 current_auc = 0.5865853658536585
User 74977 AUC after training: 0.5858348968105065
User 74977 does not improve AUC. Reverting changes.
Training on augumented user 138152 8/50 current_auc = 0.5865853658536585
User 138152 AUC after training: 0.5857410881801126
User 138152 does not improve AUC. Reverting changes.
Training on augumented user 91319 9/50 current_auc = 0.5865853658536585
User 91319 AUC after training: 0.5883677298311445
User 91319 improves AUC. Keeping the model.
Training on augumented user 71066 10/50 current_auc = 0.5883677298311445
User 71066 AUC after training: 0.5879924953095684
User 71066 does not improve AUC. Reverting changes.
Training on augumented user 36172 11/50 current_auc = 0.5883677298311445
User 36172 AUC after training: 0.5878986866791744
User 36172 does not improve AUC. Reverting changes.
Training on augumented user 118731 12/50 current_auc = 0.5883677298311445
User 118731 AUC after training: 0.5882739212007504
User 118731 does not improve AUC. Reverting changes.
Training on augumented user 70627 13/50 current_auc = 0.5883677298311445
User 70627 AUC after training: 0.5891181988742964
User 70627 improves AUC. Keeping the model.
Training on augumented user 127581 14/50 current_auc = 0.5891181988742964
User 127581 AUC after training: 0.5887429643527204
User 127581 does not improve AUC. Reverting changes.
Training on augumented user 128109 15/50 current_auc = 0.5891181988742964
User 128109 AUC after training: 0.5885553470919325
User 128109 does not improve AUC. Reverting changes.
Training on augumented user 136521 16/50 current_auc = 0.5891181988742964
User 136521 AUC after training: 0.5868667917448405
User 136521 does not improve AUC. Reverting changes.
Training on augumented user 12026 17/50 current_auc = 0.5891181988742964
User 12026 AUC after training: 0.5814258911819887
User 12026 does not improve AUC. Reverting changes.
Training on augumented user 78258 18/50 current_auc = 0.5891181988742964
User 78258 AUC after training: 0.5893058161350844
User 78258 improves AUC. Keeping the model.
Training on augumented user 117464 19/50 current_auc = 0.5893058161350844
User 117464 AUC after training: 0.5885553470919325
User 117464 does not improve AUC. Reverting changes.
Training on augumented user 3616 20/50 current_auc = 0.5893058161350844
User 3616 AUC after training: 0.5889305816135084
User 3616 does not improve AUC. Reverting changes.
Training on augumented user 50553 21/50 current_auc = 0.5893058161350844
User 50553 AUC after training: 0.5883677298311445
User 50553 does not improve AUC. Reverting changes.
Training on augumented user 56452 22/50 current_auc = 0.5893058161350844
User 56452 AUC after training: 0.5885553470919325
User 56452 does not improve AUC. Reverting changes.
Training on augumented user 92169 23/50 current_auc = 0.5893058161350844
User 92169 AUC after training: 0.5893058161350844
User 92169 does not improve AUC. Reverting changes.
Training on augumented user 44281 24/50 current_auc = 0.5893058161350844
User 44281 AUC after training: 0.5898686679174483
User 44281 improves AUC. Keeping the model.
Training on augumented user 43461 25/50 current_auc = 0.5898686679174483
User 43461 AUC after training: 0.5891181988742964
User 43461 does not improve AUC. Reverting changes.
Training on augumented user 35830 26/50 current_auc = 0.5898686679174483
User 35830 AUC after training: 0.5883677298311444
User 35830 does not improve AUC. Reverting changes.
Training on augumented user 137028 27/50 current_auc = 0.5898686679174483
User 137028 AUC after training: 0.5888367729831143
User 137028 does not improve AUC. Reverting changes.
Training on augumented user 107933 28/50 current_auc = 0.5898686679174483
User 107933 AUC after training: 0.5895872420262663
User 107933 does not improve AUC. Reverting changes.
Training on augumented user 17839 29/50 current_auc = 0.5898686679174483
User 17839 AUC after training: 0.5896810506566604
User 17839 does not improve AUC. Reverting changes.
Training on augumented user 4500 30/50 current_auc = 0.5898686679174483
User 4500 AUC after training: 0.5876172607879925
User 4500 does not improve AUC. Reverting changes.
Training on augumented user 66569 31/50 current_auc = 0.5898686679174483
User 66569 AUC after training: 0.5890243902439023
User 66569 does not improve AUC. Reverting changes.
Training on augumented user 82400 32/50 current_auc = 0.5898686679174483
User 82400 AUC after training: 0.5892120075046904
User 82400 does not improve AUC. Reverting changes.
Training on augumented user 34468 33/50 current_auc = 0.5898686679174483
User 34468 AUC after training: 0.5887429643527204
User 34468 does not improve AUC. Reverting changes.
Training on augumented user 6617 34/50 current_auc = 0.5898686679174483
User 6617 AUC after training: 0.5893058161350844
User 6617 does not improve AUC. Reverting changes.
Training on augumented user 34224 35/50 current_auc = 0.5898686679174483
User 34224 AUC after training: 0.5943714821763602
User 34224 improves AUC. Keeping the model.
Training on augumented user 19022 36/50 current_auc = 0.5943714821763602
User 19022 AUC after training: 0.5934333958724203
User 19022 does not improve AUC. Reverting changes.
Training on augumented user 10919 37/50 current_auc = 0.5943714821763602
User 10919 AUC after training: 0.5938086303939962
User 10919 does not improve AUC. Reverting changes.
Training on augumented user 1681 38/50 current_auc = 0.5943714821763602
User 1681 AUC after training: 0.5936210131332083
User 1681 does not improve AUC. Reverting changes.
Training on augumented user 38392 39/50 current_auc = 0.5943714821763602
User 38392 AUC after training: 0.5947467166979362
User 38392 improves AUC. Keeping the model.
Training on augumented user 2250 40/50 current_auc = 0.5947467166979362
User 2250 AUC after training: 0.5938086303939962
User 2250 does not improve AUC. Reverting changes.
Training on augumented user 32577 41/50 current_auc = 0.5947467166979362
User 32577 AUC after training: 0.5958724202626642
User 32577 improves AUC. Keeping the model.
Training on augumented user 127722 42/50 current_auc = 0.5958724202626642
User 127722 AUC after training: 0.5938086303939962
User 127722 does not improve AUC. Reverting changes.
Training on augumented user 103025 43/50 current_auc = 0.5958724202626642
User 103025 AUC after training: 0.5951219512195122
User 103025 does not improve AUC. Reverting changes.
Training on augumented user 88241 44/50 current_auc = 0.5958724202626642
User 88241 AUC after training: 0.5956848030018762
User 88241 does not improve AUC. Reverting changes.
Training on augumented user 129164 45/50 current_auc = 0.5958724202626642
User 129164 AUC after training: 0.5956848030018762
User 129164 does not improve AUC. Reverting changes.
Training on augumented user 77188 46/50 current_auc = 0.5958724202626642
User 77188 AUC after training: 0.5960600375234522
User 77188 improves AUC. Keeping the model.
Training on augumented user 125016 47/50 current_auc = 0.5960600375234522
User 125016 AUC after training: 0.5969043151969982
User 125016 improves AUC. Keeping the model.
Training on augumented user 113498 48/50 current_auc = 0.5969043151969982
User 113498 AUC after training: 0.5951219512195122
User 113498 does not improve AUC. Reverting changes.
Training on augumented user 122386 49/50 current_auc = 0.5969043151969982
User 122386 AUC after training: 0.5965290806754222
User 122386 does not improve AUC. Reverting changes.
[2024-12-02 18:23:11.141984] start test user 111323 85/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:23:11.687468] start test user 111323 85/567 recall augumented users by random, augumented_users = [48944, 37412, 29670, 61220, 51030, 117944, 134483, 107876, 10232, 137493, 28630, 88247, 39557, 102244, 98881, 119029, 45463, 133093, 70340, 121003, 129666, 8060, 123111, 68449, 52392, 74655, 28861, 93241, 123349, 114671, 127276, 89917, 21515, 63285, 16768, 83578, 127861, 83518, 133643, 121078, 133894, 3023, 118918, 129231, 76801, 62780, 8934, 82277, 45780, 115368]
[2024-12-02 18:23:11.700277] user = 111323 Cloud 85/567
[2024-12-02 18:23:11.708220] user = 111323 Local 85/567
[2024-12-02 18:23:11.736800] user = 111323 Local+ 85/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:23:14.630096] user = 111323 MPDA- 85/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 1.0
Training on augumented user 48944 0/50 current_auc = 1.0
User 48944 AUC after training: 1.0
User 48944 does not improve AUC. Reverting changes.
Training on augumented user 37412 1/50 current_auc = 1.0
User 37412 AUC after training: 1.0
User 37412 does not improve AUC. Reverting changes.
Training on augumented user 29670 2/50 current_auc = 1.0
User 29670 AUC after training: 1.0
User 29670 does not improve AUC. Reverting changes.
Training on augumented user 61220 3/50 current_auc = 1.0
User 61220 AUC after training: 1.0
User 61220 does not improve AUC. Reverting changes.
Training on augumented user 51030 4/50 current_auc = 1.0
User 51030 AUC after training: 1.0
User 51030 does not improve AUC. Reverting changes.
Training on augumented user 117944 5/50 current_auc = 1.0
User 117944 AUC after training: 1.0
User 117944 does not improve AUC. Reverting changes.
Training on augumented user 134483 6/50 current_auc = 1.0
User 134483 AUC after training: 1.0
User 134483 does not improve AUC. Reverting changes.
Training on augumented user 107876 7/50 current_auc = 1.0
User 107876 AUC after training: 1.0
User 107876 does not improve AUC. Reverting changes.
Training on augumented user 10232 8/50 current_auc = 1.0
User 10232 AUC after training: 1.0
User 10232 does not improve AUC. Reverting changes.
Training on augumented user 137493 9/50 current_auc = 1.0
User 137493 AUC after training: 1.0
User 137493 does not improve AUC. Reverting changes.
Training on augumented user 28630 10/50 current_auc = 1.0
User 28630 AUC after training: 1.0
User 28630 does not improve AUC. Reverting changes.
Training on augumented user 88247 11/50 current_auc = 1.0
User 88247 AUC after training: 1.0
User 88247 does not improve AUC. Reverting changes.
Training on augumented user 39557 12/50 current_auc = 1.0
User 39557 AUC after training: 1.0
User 39557 does not improve AUC. Reverting changes.
Training on augumented user 102244 13/50 current_auc = 1.0
User 102244 AUC after training: 1.0
User 102244 does not improve AUC. Reverting changes.
Training on augumented user 98881 14/50 current_auc = 1.0
User 98881 AUC after training: 1.0
User 98881 does not improve AUC. Reverting changes.
Training on augumented user 119029 15/50 current_auc = 1.0
User 119029 AUC after training: 1.0
User 119029 does not improve AUC. Reverting changes.
Training on augumented user 45463 16/50 current_auc = 1.0
User 45463 AUC after training: 1.0
User 45463 does not improve AUC. Reverting changes.
Training on augumented user 133093 17/50 current_auc = 1.0
User 133093 AUC after training: 1.0
User 133093 does not improve AUC. Reverting changes.
Training on augumented user 70340 18/50 current_auc = 1.0
User 70340 AUC after training: 1.0
User 70340 does not improve AUC. Reverting changes.
Training on augumented user 121003 19/50 current_auc = 1.0
User 121003 AUC after training: 1.0
User 121003 does not improve AUC. Reverting changes.
Training on augumented user 129666 20/50 current_auc = 1.0
User 129666 AUC after training: 1.0
User 129666 does not improve AUC. Reverting changes.
Training on augumented user 8060 21/50 current_auc = 1.0
User 8060 AUC after training: 1.0
User 8060 does not improve AUC. Reverting changes.
Training on augumented user 123111 22/50 current_auc = 1.0
User 123111 AUC after training: 1.0
User 123111 does not improve AUC. Reverting changes.
Training on augumented user 68449 23/50 current_auc = 1.0
User 68449 AUC after training: 1.0
User 68449 does not improve AUC. Reverting changes.
Training on augumented user 52392 24/50 current_auc = 1.0
User 52392 AUC after training: 1.0
User 52392 does not improve AUC. Reverting changes.
Training on augumented user 74655 25/50 current_auc = 1.0
User 74655 AUC after training: 1.0
User 74655 does not improve AUC. Reverting changes.
Training on augumented user 28861 26/50 current_auc = 1.0
User 28861 AUC after training: 1.0
User 28861 does not improve AUC. Reverting changes.
Training on augumented user 93241 27/50 current_auc = 1.0
User 93241 AUC after training: 1.0
User 93241 does not improve AUC. Reverting changes.
Training on augumented user 123349 28/50 current_auc = 1.0
User 123349 AUC after training: 1.0
User 123349 does not improve AUC. Reverting changes.
Training on augumented user 114671 29/50 current_auc = 1.0
User 114671 AUC after training: 1.0
User 114671 does not improve AUC. Reverting changes.
Training on augumented user 127276 30/50 current_auc = 1.0
User 127276 AUC after training: 1.0
User 127276 does not improve AUC. Reverting changes.
Training on augumented user 89917 31/50 current_auc = 1.0
User 89917 AUC after training: 1.0
User 89917 does not improve AUC. Reverting changes.
Training on augumented user 21515 32/50 current_auc = 1.0
User 21515 AUC after training: 1.0
User 21515 does not improve AUC. Reverting changes.
Training on augumented user 63285 33/50 current_auc = 1.0
User 63285 AUC after training: 1.0
User 63285 does not improve AUC. Reverting changes.
Training on augumented user 16768 34/50 current_auc = 1.0
User 16768 AUC after training: 1.0
User 16768 does not improve AUC. Reverting changes.
Training on augumented user 83578 35/50 current_auc = 1.0
User 83578 AUC after training: 1.0
User 83578 does not improve AUC. Reverting changes.
Training on augumented user 127861 36/50 current_auc = 1.0
User 127861 AUC after training: 1.0
User 127861 does not improve AUC. Reverting changes.
Training on augumented user 83518 37/50 current_auc = 1.0
User 83518 AUC after training: 1.0
User 83518 does not improve AUC. Reverting changes.
Training on augumented user 133643 38/50 current_auc = 1.0
User 133643 AUC after training: 1.0
User 133643 does not improve AUC. Reverting changes.
Training on augumented user 121078 39/50 current_auc = 1.0
User 121078 AUC after training: 1.0
User 121078 does not improve AUC. Reverting changes.
Training on augumented user 133894 40/50 current_auc = 1.0
User 133894 AUC after training: 1.0
User 133894 does not improve AUC. Reverting changes.
Training on augumented user 3023 41/50 current_auc = 1.0
User 3023 AUC after training: 1.0
User 3023 does not improve AUC. Reverting changes.
Training on augumented user 118918 42/50 current_auc = 1.0
User 118918 AUC after training: 1.0
User 118918 does not improve AUC. Reverting changes.
Training on augumented user 129231 43/50 current_auc = 1.0
User 129231 AUC after training: 1.0
User 129231 does not improve AUC. Reverting changes.
Training on augumented user 76801 44/50 current_auc = 1.0
User 76801 AUC after training: 1.0
User 76801 does not improve AUC. Reverting changes.
Training on augumented user 62780 45/50 current_auc = 1.0
User 62780 AUC after training: 1.0
User 62780 does not improve AUC. Reverting changes.
Training on augumented user 8934 46/50 current_auc = 1.0
User 8934 AUC after training: 1.0
User 8934 does not improve AUC. Reverting changes.
Training on augumented user 82277 47/50 current_auc = 1.0
User 82277 AUC after training: 1.0
User 82277 does not improve AUC. Reverting changes.
Training on augumented user 45780 48/50 current_auc = 1.0
User 45780 AUC after training: 1.0
User 45780 does not improve AUC. Reverting changes.
Training on augumented user 115368 49/50 current_auc = 1.0
User 115368 AUC after training: 1.0
User 115368 does not improve AUC. Reverting changes.
[2024-12-02 18:23:45.071108] start test user 111333 86/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:23:45.477621] start test user 111333 86/567 recall augumented users by random, augumented_users = [93232, 46708, 4442, 61825, 69452, 87489, 130694, 85045, 49045, 119830, 67338, 56371, 53578, 122628, 97560, 126044, 61330, 96456, 83301, 39199, 32923, 69506, 96203, 114883, 67303, 64496, 76181, 11049, 32186, 6198, 67883, 45852, 134139, 10002, 72770, 19485, 17230, 106960, 115858, 37838, 37785, 51377, 60652, 2988, 43930, 19890, 80032, 96688, 11094, 65112]
[2024-12-02 18:23:45.493121] user = 111333 Cloud 86/567
[2024-12-02 18:23:45.521130] user = 111333 Local 86/567
[2024-12-02 18:23:45.591610] user = 111333 Local+ 86/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:23:47.880472] user = 111333 MPDA- 86/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5175039169604387
Training on augumented user 93232 0/50 current_auc = 0.5175039169604387
User 93232 AUC after training: 0.5175039169604387
User 93232 does not improve AUC. Reverting changes.
Training on augumented user 46708 1/50 current_auc = 0.5175039169604387
User 46708 AUC after training: 0.5177732079905993
User 46708 improves AUC. Keeping the model.
Training on augumented user 4442 2/50 current_auc = 0.5177732079905993
User 4442 AUC after training: 0.5189482961222092
User 4442 improves AUC. Keeping the model.
Training on augumented user 61825 3/50 current_auc = 0.5189482961222092
User 61825 AUC after training: 0.5188993341167255
User 61825 does not improve AUC. Reverting changes.
Training on augumented user 69452 4/50 current_auc = 0.5189482961222092
User 69452 AUC after training: 0.5190951821386603
User 69452 improves AUC. Keeping the model.
Training on augumented user 87489 5/50 current_auc = 0.5190951821386603
User 87489 AUC after training: 0.5193889541715629
User 87489 improves AUC. Keeping the model.
Training on augumented user 130694 6/50 current_auc = 0.5193889541715629
User 130694 AUC after training: 0.519927536231884
User 130694 improves AUC. Keeping the model.
Training on augumented user 85045 7/50 current_auc = 0.519927536231884
User 85045 AUC after training: 0.5195358401880141
User 85045 does not improve AUC. Reverting changes.
Training on augumented user 49045 8/50 current_auc = 0.519927536231884
User 49045 AUC after training: 0.519927536231884
User 49045 does not improve AUC. Reverting changes.
Training on augumented user 119830 9/50 current_auc = 0.519927536231884
User 119830 AUC after training: 0.5194379161770466
User 119830 does not improve AUC. Reverting changes.
Training on augumented user 67338 10/50 current_auc = 0.519927536231884
User 67338 AUC after training: 0.5196827262044653
User 67338 does not improve AUC. Reverting changes.
Training on augumented user 56371 11/50 current_auc = 0.519927536231884
User 56371 AUC after training: 0.519927536231884
User 56371 does not improve AUC. Reverting changes.
Training on augumented user 53578 12/50 current_auc = 0.519927536231884
User 53578 AUC after training: 0.5189727771249509
User 53578 does not improve AUC. Reverting changes.
Training on augumented user 122628 13/50 current_auc = 0.519927536231884
User 122628 AUC after training: 0.5197316882099491
User 122628 does not improve AUC. Reverting changes.
Training on augumented user 97560 14/50 current_auc = 0.519927536231884
User 97560 AUC after training: 0.5200744222483353
User 97560 improves AUC. Keeping the model.
Training on augumented user 126044 15/50 current_auc = 0.5200744222483353
User 126044 AUC after training: 0.5196827262044653
User 126044 does not improve AUC. Reverting changes.
Training on augumented user 61330 16/50 current_auc = 0.5200744222483353
User 61330 AUC after training: 0.5194379161770466
User 61330 does not improve AUC. Reverting changes.
Training on augumented user 96456 17/50 current_auc = 0.5200744222483353
User 96456 AUC after training: 0.5198540932236585
User 96456 does not improve AUC. Reverting changes.
Training on augumented user 83301 18/50 current_auc = 0.5200744222483353
User 83301 AUC after training: 0.5196827262044653
User 83301 does not improve AUC. Reverting changes.
Training on augumented user 39199 19/50 current_auc = 0.5200744222483353
User 39199 AUC after training: 0.5200499412455935
User 39199 does not improve AUC. Reverting changes.
Training on augumented user 32923 20/50 current_auc = 0.5200744222483353
User 32923 AUC after training: 0.5191441441441441
User 32923 does not improve AUC. Reverting changes.
Training on augumented user 69506 21/50 current_auc = 0.5200744222483353
User 69506 AUC after training: 0.5198785742264004
User 69506 does not improve AUC. Reverting changes.
Training on augumented user 96203 22/50 current_auc = 0.5200744222483353
User 96203 AUC after training: 0.5198296122209166
User 96203 does not improve AUC. Reverting changes.
Training on augumented user 114883 23/50 current_auc = 0.5200744222483353
User 114883 AUC after training: 0.5198051312181747
User 114883 does not improve AUC. Reverting changes.
Training on augumented user 67303 24/50 current_auc = 0.5200744222483353
User 67303 AUC after training: 0.5205885233059145
User 67303 improves AUC. Keeping the model.
Training on augumented user 64496 25/50 current_auc = 0.5205885233059145
User 64496 AUC after training: 0.5207354093223658
User 64496 improves AUC. Keeping the model.
Training on augumented user 76181 26/50 current_auc = 0.5207354093223658
User 76181 AUC after training: 0.520319232275754
User 76181 does not improve AUC. Reverting changes.
Training on augumented user 11049 27/50 current_auc = 0.5207354093223658
User 11049 AUC after training: 0.5201723462593029
User 11049 does not improve AUC. Reverting changes.
Training on augumented user 32186 28/50 current_auc = 0.5207354093223658
User 32186 AUC after training: 0.5206130043086565
User 32186 does not improve AUC. Reverting changes.
Training on augumented user 6198 29/50 current_auc = 0.5207354093223658
User 6198 AUC after training: 0.5204416372894634
User 6198 does not improve AUC. Reverting changes.
Training on augumented user 67883 30/50 current_auc = 0.5207354093223658
User 67883 AUC after training: 0.5202947512730122
User 67883 does not improve AUC. Reverting changes.
Training on augumented user 45852 31/50 current_auc = 0.5207354093223658
User 45852 AUC after training: 0.5200744222483353
User 45852 does not improve AUC. Reverting changes.
Training on augumented user 134139 32/50 current_auc = 0.5207354093223658
User 134139 AUC after training: 0.5206619663141403
User 134139 does not improve AUC. Reverting changes.
Training on augumented user 10002 33/50 current_auc = 0.5207354093223658
User 10002 AUC after training: 0.5204171562867215
User 10002 does not improve AUC. Reverting changes.
Training on augumented user 72770 34/50 current_auc = 0.5207354093223658
User 72770 AUC after training: 0.5205395613004309
User 72770 does not improve AUC. Reverting changes.
Training on augumented user 19485 35/50 current_auc = 0.5207354093223658
User 19485 AUC after training: 0.5209312573443009
User 19485 improves AUC. Keeping the model.
Training on augumented user 17230 36/50 current_auc = 0.5209312573443009
User 17230 AUC after training: 0.5204171562867215
User 17230 does not improve AUC. Reverting changes.
Training on augumented user 106960 37/50 current_auc = 0.5209312573443009
User 106960 AUC after training: 0.520710928319624
User 106960 does not improve AUC. Reverting changes.
Training on augumented user 115858 38/50 current_auc = 0.5209312573443009
User 115858 AUC after training: 0.5203437132784959
User 115858 does not improve AUC. Reverting changes.
Training on augumented user 37838 39/50 current_auc = 0.5209312573443009
User 37838 AUC after training: 0.5205395613004309
User 37838 does not improve AUC. Reverting changes.
Training on augumented user 37785 40/50 current_auc = 0.5209312573443009
User 37785 AUC after training: 0.5205885233059145
User 37785 does not improve AUC. Reverting changes.
Training on augumented user 51377 41/50 current_auc = 0.5209312573443009
User 51377 AUC after training: 0.5203437132784958
User 51377 does not improve AUC. Reverting changes.
Training on augumented user 60652 42/50 current_auc = 0.5209312573443009
User 60652 AUC after training: 0.520882295338817
User 60652 does not improve AUC. Reverting changes.
Training on augumented user 2988 43/50 current_auc = 0.5209312573443009
User 2988 AUC after training: 0.520515080297689
User 2988 does not improve AUC. Reverting changes.
Training on augumented user 43930 44/50 current_auc = 0.5209312573443009
User 43930 AUC after training: 0.5207354093223658
User 43930 does not improve AUC. Reverting changes.
Training on augumented user 19890 45/50 current_auc = 0.5209312573443009
User 19890 AUC after training: 0.5205885233059147
User 19890 does not improve AUC. Reverting changes.
Training on augumented user 80032 46/50 current_auc = 0.5209312573443009
User 80032 AUC after training: 0.5206374853113983
User 80032 does not improve AUC. Reverting changes.
Training on augumented user 96688 47/50 current_auc = 0.5209312573443009
User 96688 AUC after training: 0.5203437132784959
User 96688 does not improve AUC. Reverting changes.
Training on augumented user 11094 48/50 current_auc = 0.5209312573443009
User 11094 AUC after training: 0.5206864473168821
User 11094 does not improve AUC. Reverting changes.
Training on augumented user 65112 49/50 current_auc = 0.5209312573443009
User 65112 AUC after training: 0.5206619663141403
User 65112 does not improve AUC. Reverting changes.
[2024-12-02 18:24:16.858171] start test user 111354 87/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:24:17.758231] start test user 111354 87/567 recall augumented users by random, augumented_users = [9923, 108611, 78297, 68300, 25418, 28140, 79201, 41103, 53612, 32182, 92328, 50166, 103600, 19602, 119967, 134178, 14974, 96970, 134930, 73796, 137099, 20835, 69973, 54721, 95911, 25784, 71311, 82827, 104559, 93220, 81033, 65804, 21981, 126425, 128457, 65694, 46925, 122590, 46461, 118157, 29787, 115117, 76062, 41295, 67744, 123663, 133790, 118466, 46833, 45075]
[2024-12-02 18:24:17.795232] user = 111354 Cloud 87/567
[2024-12-02 18:24:17.820599] user = 111354 Local 87/567
[2024-12-02 18:24:17.938710] user = 111354 Local+ 87/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:24:20.338330] user = 111354 MPDA- 87/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7222222222222222
Training on augumented user 9923 0/50 current_auc = 0.7222222222222222
User 9923 AUC after training: 0.7222222222222222
User 9923 does not improve AUC. Reverting changes.
Training on augumented user 108611 1/50 current_auc = 0.7222222222222222
User 108611 AUC after training: 0.7222222222222222
User 108611 does not improve AUC. Reverting changes.
Training on augumented user 78297 2/50 current_auc = 0.7222222222222222
User 78297 AUC after training: 0.75
User 78297 improves AUC. Keeping the model.
Training on augumented user 68300 3/50 current_auc = 0.75
User 68300 AUC after training: 0.75
User 68300 does not improve AUC. Reverting changes.
Training on augumented user 25418 4/50 current_auc = 0.75
User 25418 AUC after training: 0.75
User 25418 does not improve AUC. Reverting changes.
Training on augumented user 28140 5/50 current_auc = 0.75
User 28140 AUC after training: 0.75
User 28140 does not improve AUC. Reverting changes.
Training on augumented user 79201 6/50 current_auc = 0.75
User 79201 AUC after training: 0.7222222222222222
User 79201 does not improve AUC. Reverting changes.
Training on augumented user 41103 7/50 current_auc = 0.75
User 41103 AUC after training: 0.75
User 41103 does not improve AUC. Reverting changes.
Training on augumented user 53612 8/50 current_auc = 0.75
User 53612 AUC after training: 0.75
User 53612 does not improve AUC. Reverting changes.
Training on augumented user 32182 9/50 current_auc = 0.75
User 32182 AUC after training: 0.75
User 32182 does not improve AUC. Reverting changes.
Training on augumented user 92328 10/50 current_auc = 0.75
User 92328 AUC after training: 0.6944444444444444
User 92328 does not improve AUC. Reverting changes.
Training on augumented user 50166 11/50 current_auc = 0.75
User 50166 AUC after training: 0.6944444444444444
User 50166 does not improve AUC. Reverting changes.
Training on augumented user 103600 12/50 current_auc = 0.75
User 103600 AUC after training: 0.75
User 103600 does not improve AUC. Reverting changes.
Training on augumented user 19602 13/50 current_auc = 0.75
User 19602 AUC after training: 0.6944444444444444
User 19602 does not improve AUC. Reverting changes.
Training on augumented user 119967 14/50 current_auc = 0.75
User 119967 AUC after training: 0.75
User 119967 does not improve AUC. Reverting changes.
Training on augumented user 134178 15/50 current_auc = 0.75
User 134178 AUC after training: 0.75
User 134178 does not improve AUC. Reverting changes.
Training on augumented user 14974 16/50 current_auc = 0.75
User 14974 AUC after training: 0.7222222222222222
User 14974 does not improve AUC. Reverting changes.
Training on augumented user 96970 17/50 current_auc = 0.75
User 96970 AUC after training: 0.75
User 96970 does not improve AUC. Reverting changes.
Training on augumented user 134930 18/50 current_auc = 0.75
User 134930 AUC after training: 0.75
User 134930 does not improve AUC. Reverting changes.
Training on augumented user 73796 19/50 current_auc = 0.75
User 73796 AUC after training: 0.75
User 73796 does not improve AUC. Reverting changes.
Training on augumented user 137099 20/50 current_auc = 0.75
User 137099 AUC after training: 0.75
User 137099 does not improve AUC. Reverting changes.
Training on augumented user 20835 21/50 current_auc = 0.75
User 20835 AUC after training: 0.75
User 20835 does not improve AUC. Reverting changes.
Training on augumented user 69973 22/50 current_auc = 0.75
User 69973 AUC after training: 0.75
User 69973 does not improve AUC. Reverting changes.
Training on augumented user 54721 23/50 current_auc = 0.75
User 54721 AUC after training: 0.75
User 54721 does not improve AUC. Reverting changes.
Training on augumented user 95911 24/50 current_auc = 0.75
User 95911 AUC after training: 0.75
User 95911 does not improve AUC. Reverting changes.
Training on augumented user 25784 25/50 current_auc = 0.75
User 25784 AUC after training: 0.75
User 25784 does not improve AUC. Reverting changes.
Training on augumented user 71311 26/50 current_auc = 0.75
User 71311 AUC after training: 0.75
User 71311 does not improve AUC. Reverting changes.
Training on augumented user 82827 27/50 current_auc = 0.75
User 82827 AUC after training: 0.7222222222222222
User 82827 does not improve AUC. Reverting changes.
Training on augumented user 104559 28/50 current_auc = 0.75
User 104559 AUC after training: 0.75
User 104559 does not improve AUC. Reverting changes.
Training on augumented user 93220 29/50 current_auc = 0.75
User 93220 AUC after training: 0.75
User 93220 does not improve AUC. Reverting changes.
Training on augumented user 81033 30/50 current_auc = 0.75
User 81033 AUC after training: 0.75
User 81033 does not improve AUC. Reverting changes.
Training on augumented user 65804 31/50 current_auc = 0.75
User 65804 AUC after training: 0.75
User 65804 does not improve AUC. Reverting changes.
Training on augumented user 21981 32/50 current_auc = 0.75
User 21981 AUC after training: 0.75
User 21981 does not improve AUC. Reverting changes.
Training on augumented user 126425 33/50 current_auc = 0.75
User 126425 AUC after training: 0.75
User 126425 does not improve AUC. Reverting changes.
Training on augumented user 128457 34/50 current_auc = 0.75
User 128457 AUC after training: 0.75
User 128457 does not improve AUC. Reverting changes.
Training on augumented user 65694 35/50 current_auc = 0.75
User 65694 AUC after training: 0.6944444444444444
User 65694 does not improve AUC. Reverting changes.
Training on augumented user 46925 36/50 current_auc = 0.75
User 46925 AUC after training: 0.6944444444444444
User 46925 does not improve AUC. Reverting changes.
Training on augumented user 122590 37/50 current_auc = 0.75
User 122590 AUC after training: 0.75
User 122590 does not improve AUC. Reverting changes.
Training on augumented user 46461 38/50 current_auc = 0.75
User 46461 AUC after training: 0.7222222222222222
User 46461 does not improve AUC. Reverting changes.
Training on augumented user 118157 39/50 current_auc = 0.75
User 118157 AUC after training: 0.75
User 118157 does not improve AUC. Reverting changes.
Training on augumented user 29787 40/50 current_auc = 0.75
User 29787 AUC after training: 0.75
User 29787 does not improve AUC. Reverting changes.
Training on augumented user 115117 41/50 current_auc = 0.75
User 115117 AUC after training: 0.75
User 115117 does not improve AUC. Reverting changes.
Training on augumented user 76062 42/50 current_auc = 0.75
User 76062 AUC after training: 0.75
User 76062 does not improve AUC. Reverting changes.
Training on augumented user 41295 43/50 current_auc = 0.75
User 41295 AUC after training: 0.75
User 41295 does not improve AUC. Reverting changes.
Training on augumented user 67744 44/50 current_auc = 0.75
User 67744 AUC after training: 0.75
User 67744 does not improve AUC. Reverting changes.
Training on augumented user 123663 45/50 current_auc = 0.75
User 123663 AUC after training: 0.75
User 123663 does not improve AUC. Reverting changes.
Training on augumented user 133790 46/50 current_auc = 0.75
User 133790 AUC after training: 0.75
User 133790 does not improve AUC. Reverting changes.
Training on augumented user 118466 47/50 current_auc = 0.75
User 118466 AUC after training: 0.7222222222222222
User 118466 does not improve AUC. Reverting changes.
Training on augumented user 46833 48/50 current_auc = 0.75
User 46833 AUC after training: 0.75
User 46833 does not improve AUC. Reverting changes.
Training on augumented user 45075 49/50 current_auc = 0.75
User 45075 AUC after training: 0.75
User 45075 does not improve AUC. Reverting changes.
[2024-12-02 18:24:51.098299] start test user 111373 88/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:24:51.690543] start test user 111373 88/567 recall augumented users by random, augumented_users = [66759, 63558, 79211, 132938, 97199, 22888, 28327, 85379, 123356, 88787, 20579, 24865, 30080, 93623, 22816, 106613, 12222, 137326, 48765, 62169, 78742, 96572, 9463, 32510, 75709, 119034, 89924, 86992, 97796, 48210, 72399, 78897, 103664, 84662, 2284, 107386, 92805, 38858, 41856, 85477, 28491, 66440, 111251, 12390, 86741, 137112, 64728, 80462, 85083, 69236]
[2024-12-02 18:24:51.709563] user = 111373 Cloud 88/567
[2024-12-02 18:24:51.763795] user = 111373 Local 88/567
[2024-12-02 18:24:51.976824] user = 111373 Local+ 88/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:24:54.561745] user = 111373 MPDA- 88/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6325244034707158
Training on augumented user 66759 0/50 current_auc = 0.6325244034707158
User 66759 AUC after training: 0.6324490841166547
User 66759 does not improve AUC. Reverting changes.
Training on augumented user 63558 1/50 current_auc = 0.6325244034707158
User 63558 AUC after training: 0.6307092070378404
User 63558 does not improve AUC. Reverting changes.
Training on augumented user 79211 2/50 current_auc = 0.6325244034707158
User 79211 AUC after training: 0.6320574234755364
User 79211 does not improve AUC. Reverting changes.
Training on augumented user 132938 3/50 current_auc = 0.6325244034707158
User 132938 AUC after training: 0.6322833815377199
User 132938 does not improve AUC. Reverting changes.
Training on augumented user 97199 4/50 current_auc = 0.6325244034707158
User 97199 AUC after training: 0.6320724873463485
User 97199 does not improve AUC. Reverting changes.
Training on augumented user 22888 5/50 current_auc = 0.6325244034707158
User 22888 AUC after training: 0.6336993853940709
User 22888 improves AUC. Keeping the model.
Training on augumented user 28327 6/50 current_auc = 0.6336993853940709
User 28327 AUC after training: 0.6339253434562545
User 28327 improves AUC. Keeping the model.
Training on augumented user 85379 7/50 current_auc = 0.6339253434562545
User 85379 AUC after training: 0.6341061099060015
User 85379 improves AUC. Keeping the model.
Training on augumented user 123356 8/50 current_auc = 0.6341061099060015
User 123356 AUC after training: 0.6338801518438177
User 123356 does not improve AUC. Reverting changes.
Training on augumented user 88787 9/50 current_auc = 0.6341061099060015
User 88787 AUC after training: 0.6334131718486383
User 88787 does not improve AUC. Reverting changes.
Training on augumented user 20579 10/50 current_auc = 0.6341061099060015
User 20579 AUC after training: 0.632976319595083
User 20579 does not improve AUC. Reverting changes.
Training on augumented user 24865 11/50 current_auc = 0.6341061099060015
User 24865 AUC after training: 0.6339404073270667
User 24865 does not improve AUC. Reverting changes.
Training on augumented user 30080 12/50 current_auc = 0.6341061099060015
User 30080 AUC after training: 0.6336843215232586
User 30080 does not improve AUC. Reverting changes.
Training on augumented user 93623 13/50 current_auc = 0.6341061099060015
User 93623 AUC after training: 0.6339855989395036
User 93623 does not improve AUC. Reverting changes.
Training on augumented user 22816 14/50 current_auc = 0.6341061099060015
User 22816 AUC after training: 0.6338650879730056
User 22816 does not improve AUC. Reverting changes.
Training on augumented user 106613 15/50 current_auc = 0.6341061099060015
User 106613 AUC after training: 0.6340458544227524
User 106613 does not improve AUC. Reverting changes.
Training on augumented user 12222 16/50 current_auc = 0.6341061099060015
User 12222 AUC after training: 0.6340458544227524
User 12222 does not improve AUC. Reverting changes.
Training on augumented user 137326 17/50 current_auc = 0.6341061099060015
User 137326 AUC after training: 0.6341814292600626
User 137326 improves AUC. Keeping the model.
Training on augumented user 48765 18/50 current_auc = 0.6341814292600626
User 48765 AUC after training: 0.6342266208724995
User 48765 improves AUC. Keeping the model.
Training on augumented user 62169 19/50 current_auc = 0.6342266208724995
User 62169 AUC after training: 0.6344676428054953
User 62169 improves AUC. Keeping the model.
Training on augumented user 78742 20/50 current_auc = 0.6344676428054953
User 78742 AUC after training: 0.6342115570016872
User 78742 does not improve AUC. Reverting changes.
Training on augumented user 96572 21/50 current_auc = 0.6344676428054953
User 96572 AUC after training: 0.6340609182935648
User 96572 does not improve AUC. Reverting changes.
Training on augumented user 9463 22/50 current_auc = 0.6344676428054953
User 9463 AUC after training: 0.6348141118341768
User 9463 improves AUC. Keeping the model.
Training on augumented user 32510 23/50 current_auc = 0.6348141118341768
User 32510 AUC after training: 0.634573089901181
User 32510 does not improve AUC. Reverting changes.
Training on augumented user 75709 24/50 current_auc = 0.6348141118341768
User 75709 AUC after training: 0.6352359002169197
User 75709 improves AUC. Keeping the model.
Training on augumented user 119034 25/50 current_auc = 0.6352359002169197
User 119034 AUC after training: 0.6351530489274524
User 119034 does not improve AUC. Reverting changes.
Training on augumented user 89924 26/50 current_auc = 0.6352359002169197
User 89924 AUC after training: 0.6333830441070137
User 89924 does not improve AUC. Reverting changes.
Training on augumented user 86992 27/50 current_auc = 0.6352359002169197
User 86992 AUC after training: 0.6349044950590503
User 86992 does not improve AUC. Reverting changes.
Training on augumented user 97796 28/50 current_auc = 0.6352359002169197
User 97796 AUC after training: 0.635311219570981
User 97796 improves AUC. Keeping the model.
Training on augumented user 48210 29/50 current_auc = 0.635311219570981
User 48210 AUC after training: 0.6348291757049892
User 48210 does not improve AUC. Reverting changes.
Training on augumented user 72399 30/50 current_auc = 0.635311219570981
User 72399 AUC after training: 0.6351304531212341
User 72399 does not improve AUC. Reverting changes.
Training on augumented user 78897 31/50 current_auc = 0.635311219570981
User 78897 AUC after training: 0.6358384550494096
User 78897 improves AUC. Keeping the model.
Training on augumented user 103664 32/50 current_auc = 0.6358384550494096
User 103664 AUC after training: 0.6361246685948422
User 103664 improves AUC. Keeping the model.
Training on augumented user 84662 33/50 current_auc = 0.6361246685948422
User 84662 AUC after training: 0.6368326705230176
User 84662 improves AUC. Keeping the model.
Training on augumented user 2284 34/50 current_auc = 0.6368326705230176
User 2284 AUC after training: 0.6358987105326586
User 2284 does not improve AUC. Reverting changes.
Training on augumented user 107386 35/50 current_auc = 0.6368326705230176
User 107386 AUC after training: 0.6360116895637503
User 107386 does not improve AUC. Reverting changes.
Training on augumented user 92805 36/50 current_auc = 0.6368326705230176
User 92805 AUC after training: 0.6368853940708605
User 92805 improves AUC. Keeping the model.
Training on augumented user 38858 37/50 current_auc = 0.6368853940708605
User 38858 AUC after training: 0.6367272234273318
User 38858 does not improve AUC. Reverting changes.
Training on augumented user 41856 38/50 current_auc = 0.6368853940708605
User 41856 AUC after training: 0.63698330923114
User 41856 improves AUC. Keeping the model.
Training on augumented user 85477 39/50 current_auc = 0.63698330923114
User 85477 AUC after training: 0.6373297782598216
User 85477 improves AUC. Keeping the model.
Training on augumented user 28491 40/50 current_auc = 0.6373297782598216
User 28491 AUC after training: 0.637412629549289
User 28491 improves AUC. Keeping the model.
Training on augumented user 66440 41/50 current_auc = 0.637412629549289
User 66440 AUC after training: 0.6370134369727645
User 66440 does not improve AUC. Reverting changes.
Training on augumented user 111251 42/50 current_auc = 0.637412629549289
User 111251 AUC after training: 0.6369381176187033
User 111251 does not improve AUC. Reverting changes.
Training on augumented user 12390 43/50 current_auc = 0.637412629549289
User 12390 AUC after training: 0.6369833092311401
User 12390 does not improve AUC. Reverting changes.
Training on augumented user 86741 44/50 current_auc = 0.637412629549289
User 86741 AUC after training: 0.632961255724271
User 86741 does not improve AUC. Reverting changes.
Training on augumented user 137112 45/50 current_auc = 0.637412629549289
User 137112 AUC after training: 0.636923053747891
User 137112 does not improve AUC. Reverting changes.
Training on augumented user 64728 46/50 current_auc = 0.637412629549289
User 64728 AUC after training: 0.6366519040732708
User 64728 does not improve AUC. Reverting changes.
Training on augumented user 80462 47/50 current_auc = 0.637412629549289
User 80462 AUC after training: 0.6347086647384912
User 80462 does not improve AUC. Reverting changes.
Training on augumented user 85083 48/50 current_auc = 0.637412629549289
User 85083 AUC after training: 0.6374502892263196
User 85083 improves AUC. Keeping the model.
Training on augumented user 69236 49/50 current_auc = 0.6374502892263196
User 69236 AUC after training: 0.6324867437936852
User 69236 does not improve AUC. Reverting changes.
[2024-12-02 18:25:22.004467] start test user 111386 89/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:25:22.567933] start test user 111386 89/567 recall augumented users by random, augumented_users = [4940, 20826, 19658, 39802, 86415, 105081, 66472, 64121, 97204, 71774, 92044, 85103, 82981, 6242, 23681, 16172, 111849, 126374, 82392, 136976, 70043, 92967, 115748, 83243, 73575, 125342, 105136, 42074, 60390, 22467, 3232, 64484, 62416, 26711, 88681, 98391, 53235, 129335, 82222, 62991, 88688, 36040, 117932, 12139, 77630, 57544, 3123, 2507, 75598, 94444]
[2024-12-02 18:25:22.584049] user = 111386 Cloud 89/567
[2024-12-02 18:25:22.607390] user = 111386 Local 89/567
[2024-12-02 18:25:22.698627] user = 111386 Local+ 89/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:25:25.380231] user = 111386 MPDA- 89/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.43429298864081467
Training on augumented user 4940 0/50 current_auc = 0.43429298864081467
User 4940 AUC after training: 0.4352722287504896
User 4940 improves AUC. Keeping the model.
Training on augumented user 20826 1/50 current_auc = 0.4352722287504896
User 20826 AUC after training: 0.4353701527614571
User 20826 improves AUC. Keeping the model.
Training on augumented user 19658 2/50 current_auc = 0.4353701527614571
User 19658 AUC after training: 0.43497845671758717
User 19658 does not improve AUC. Reverting changes.
Training on augumented user 39802 3/50 current_auc = 0.4353701527614571
User 39802 AUC after training: 0.43566392479435956
User 39802 improves AUC. Keeping the model.
Training on augumented user 86415 4/50 current_auc = 0.43566392479435956
User 86415 AUC after training: 0.4357618488053271
User 86415 improves AUC. Keeping the model.
Training on augumented user 105081 5/50 current_auc = 0.4357618488053271
User 105081 AUC after training: 0.4379161770466118
User 105081 improves AUC. Keeping the model.
Training on augumented user 66472 6/50 current_auc = 0.4379161770466118
User 66472 AUC after training: 0.4383078730904818
User 66472 improves AUC. Keeping the model.
Training on augumented user 64121 7/50 current_auc = 0.4383078730904818
User 64121 AUC after training: 0.43791617704661184
User 64121 does not improve AUC. Reverting changes.
Training on augumented user 97204 8/50 current_auc = 0.4383078730904818
User 97204 AUC after training: 0.4379161770466118
User 97204 does not improve AUC. Reverting changes.
Training on augumented user 71774 9/50 current_auc = 0.4383078730904818
User 71774 AUC after training: 0.4381120250685468
User 71774 does not improve AUC. Reverting changes.
Training on augumented user 92044 10/50 current_auc = 0.4383078730904818
User 92044 AUC after training: 0.4383078730904818
User 92044 does not improve AUC. Reverting changes.
Training on augumented user 85103 11/50 current_auc = 0.4383078730904818
User 85103 AUC after training: 0.4383078730904818
User 85103 does not improve AUC. Reverting changes.
Training on augumented user 82981 12/50 current_auc = 0.4383078730904818
User 82981 AUC after training: 0.44056012534273403
User 82981 improves AUC. Keeping the model.
Training on augumented user 6242 13/50 current_auc = 0.44056012534273403
User 6242 AUC after training: 0.440168429298864
User 6242 does not improve AUC. Reverting changes.
Training on augumented user 23681 14/50 current_auc = 0.44056012534273403
User 23681 AUC after training: 0.4386995691343517
User 23681 does not improve AUC. Reverting changes.
Training on augumented user 16172 15/50 current_auc = 0.44056012534273403
User 16172 AUC after training: 0.43997258127692906
User 16172 does not improve AUC. Reverting changes.
Training on augumented user 111849 16/50 current_auc = 0.44056012534273403
User 111849 AUC after training: 0.4403642773207991
User 111849 does not improve AUC. Reverting changes.
Training on augumented user 126374 17/50 current_auc = 0.44056012534273403
User 126374 AUC after training: 0.43958088523305916
User 126374 does not improve AUC. Reverting changes.
Training on augumented user 82392 18/50 current_auc = 0.44056012534273403
User 82392 AUC after training: 0.4404622013317665
User 82392 does not improve AUC. Reverting changes.
Training on augumented user 136976 19/50 current_auc = 0.44056012534273403
User 136976 AUC after training: 0.4396788092440267
User 136976 does not improve AUC. Reverting changes.
Training on augumented user 70043 20/50 current_auc = 0.44056012534273403
User 70043 AUC after training: 0.4400705052878966
User 70043 does not improve AUC. Reverting changes.
Training on augumented user 92967 21/50 current_auc = 0.44056012534273403
User 92967 AUC after training: 0.43958088523305916
User 92967 does not improve AUC. Reverting changes.
Training on augumented user 115748 22/50 current_auc = 0.44056012534273403
User 115748 AUC after training: 0.4400705052878966
User 115748 does not improve AUC. Reverting changes.
Training on augumented user 83243 23/50 current_auc = 0.44056012534273403
User 83243 AUC after training: 0.44026635330983155
User 83243 does not improve AUC. Reverting changes.
Training on augumented user 73575 24/50 current_auc = 0.44056012534273403
User 73575 AUC after training: 0.440168429298864
User 73575 does not improve AUC. Reverting changes.
Training on augumented user 125342 25/50 current_auc = 0.44056012534273403
User 125342 AUC after training: 0.4392871132001567
User 125342 does not improve AUC. Reverting changes.
Training on augumented user 105136 26/50 current_auc = 0.44056012534273403
User 105136 AUC after training: 0.44056012534273403
User 105136 does not improve AUC. Reverting changes.
Training on augumented user 42074 27/50 current_auc = 0.44056012534273403
User 42074 AUC after training: 0.44026635330983155
User 42074 does not improve AUC. Reverting changes.
Training on augumented user 60390 28/50 current_auc = 0.44056012534273403
User 60390 AUC after training: 0.44026635330983155
User 60390 does not improve AUC. Reverting changes.
Training on augumented user 22467 29/50 current_auc = 0.44056012534273403
User 22467 AUC after training: 0.4403642773207991
User 22467 does not improve AUC. Reverting changes.
Training on augumented user 3232 30/50 current_auc = 0.44056012534273403
User 3232 AUC after training: 0.4400705052878966
User 3232 does not improve AUC. Reverting changes.
Training on augumented user 64484 31/50 current_auc = 0.44056012534273403
User 64484 AUC after training: 0.4404622013317665
User 64484 does not improve AUC. Reverting changes.
Training on augumented user 62416 32/50 current_auc = 0.44056012534273403
User 62416 AUC after training: 0.440755973364669
User 62416 improves AUC. Keeping the model.
Training on augumented user 26711 33/50 current_auc = 0.440755973364669
User 26711 AUC after training: 0.4400705052878966
User 26711 does not improve AUC. Reverting changes.
Training on augumented user 88681 34/50 current_auc = 0.440755973364669
User 88681 AUC after training: 0.4403642773207991
User 88681 does not improve AUC. Reverting changes.
Training on augumented user 98391 35/50 current_auc = 0.440755973364669
User 98391 AUC after training: 0.43987465726596164
User 98391 does not improve AUC. Reverting changes.
Training on augumented user 53235 36/50 current_auc = 0.440755973364669
User 53235 AUC after training: 0.43958088523305916
User 53235 does not improve AUC. Reverting changes.
Training on augumented user 129335 37/50 current_auc = 0.440755973364669
User 129335 AUC after training: 0.44016842929886413
User 129335 does not improve AUC. Reverting changes.
Training on augumented user 82222 38/50 current_auc = 0.440755973364669
User 82222 AUC after training: 0.4400705052878966
User 82222 does not improve AUC. Reverting changes.
Training on augumented user 62991 39/50 current_auc = 0.440755973364669
User 62991 AUC after training: 0.44016842929886413
User 62991 does not improve AUC. Reverting changes.
Training on augumented user 88688 40/50 current_auc = 0.440755973364669
User 88688 AUC after training: 0.4386995691343517
User 88688 does not improve AUC. Reverting changes.
Training on augumented user 36040 41/50 current_auc = 0.440755973364669
User 36040 AUC after training: 0.43958088523305916
User 36040 does not improve AUC. Reverting changes.
Training on augumented user 117932 42/50 current_auc = 0.440755973364669
User 117932 AUC after training: 0.44016842929886413
User 117932 does not improve AUC. Reverting changes.
Training on augumented user 12139 43/50 current_auc = 0.440755973364669
User 12139 AUC after training: 0.43948296122209163
User 12139 does not improve AUC. Reverting changes.
Training on augumented user 77630 44/50 current_auc = 0.440755973364669
User 77630 AUC after training: 0.43889541715628666
User 77630 does not improve AUC. Reverting changes.
Training on augumented user 57544 45/50 current_auc = 0.440755973364669
User 57544 AUC after training: 0.44016842929886413
User 57544 does not improve AUC. Reverting changes.
Training on augumented user 3123 46/50 current_auc = 0.440755973364669
User 3123 AUC after training: 0.44026635330983155
User 3123 does not improve AUC. Reverting changes.
Training on augumented user 2507 47/50 current_auc = 0.440755973364669
User 2507 AUC after training: 0.4390912651782217
User 2507 does not improve AUC. Reverting changes.
Training on augumented user 75598 48/50 current_auc = 0.440755973364669
User 75598 AUC after training: 0.43918918918918914
User 75598 does not improve AUC. Reverting changes.
Training on augumented user 94444 49/50 current_auc = 0.440755973364669
User 94444 AUC after training: 0.4403642773207991
User 94444 does not improve AUC. Reverting changes.
[2024-12-02 18:25:53.412626] start test user 111414 90/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:25:53.843348] start test user 111414 90/567 recall augumented users by random, augumented_users = [90047, 39264, 110482, 56103, 128436, 81324, 115027, 55158, 78085, 132019, 131249, 49434, 63531, 88431, 125848, 93067, 91760, 45241, 81298, 126211, 91485, 101157, 82737, 103612, 89945, 70107, 86434, 51755, 60977, 26845, 131790, 38249, 105986, 3191, 27945, 23474, 40648, 123770, 15836, 64388, 121351, 52637, 98198, 86874, 23153, 17181, 29265, 26041, 57257, 23760]
[2024-12-02 18:25:53.858269] user = 111414 Cloud 90/567
[2024-12-02 18:25:53.869498] user = 111414 Local 90/567
[2024-12-02 18:25:53.906136] user = 111414 Local+ 90/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:25:55.295226] user = 111414 MPDA- 90/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5714285714285714
Training on augumented user 90047 0/50 current_auc = 0.5714285714285714
User 90047 AUC after training: 0.5714285714285714
User 90047 does not improve AUC. Reverting changes.
Training on augumented user 39264 1/50 current_auc = 0.5714285714285714
User 39264 AUC after training: 0.5714285714285714
User 39264 does not improve AUC. Reverting changes.
Training on augumented user 110482 2/50 current_auc = 0.5714285714285714
User 110482 AUC after training: 0.5714285714285714
User 110482 does not improve AUC. Reverting changes.
Training on augumented user 56103 3/50 current_auc = 0.5714285714285714
User 56103 AUC after training: 0.5714285714285714
User 56103 does not improve AUC. Reverting changes.
Training on augumented user 128436 4/50 current_auc = 0.5714285714285714
User 128436 AUC after training: 0.5714285714285714
User 128436 does not improve AUC. Reverting changes.
Training on augumented user 81324 5/50 current_auc = 0.5714285714285714
User 81324 AUC after training: 0.5714285714285714
User 81324 does not improve AUC. Reverting changes.
Training on augumented user 115027 6/50 current_auc = 0.5714285714285714
User 115027 AUC after training: 0.5714285714285714
User 115027 does not improve AUC. Reverting changes.
Training on augumented user 55158 7/50 current_auc = 0.5714285714285714
User 55158 AUC after training: 0.5714285714285714
User 55158 does not improve AUC. Reverting changes.
Training on augumented user 78085 8/50 current_auc = 0.5714285714285714
User 78085 AUC after training: 0.5714285714285714
User 78085 does not improve AUC. Reverting changes.
Training on augumented user 132019 9/50 current_auc = 0.5714285714285714
User 132019 AUC after training: 0.5714285714285714
User 132019 does not improve AUC. Reverting changes.
Training on augumented user 131249 10/50 current_auc = 0.5714285714285714
User 131249 AUC after training: 0.5714285714285714
User 131249 does not improve AUC. Reverting changes.
Training on augumented user 49434 11/50 current_auc = 0.5714285714285714
User 49434 AUC after training: 0.5714285714285714
User 49434 does not improve AUC. Reverting changes.
Training on augumented user 63531 12/50 current_auc = 0.5714285714285714
User 63531 AUC after training: 0.5714285714285714
User 63531 does not improve AUC. Reverting changes.
Training on augumented user 88431 13/50 current_auc = 0.5714285714285714
User 88431 AUC after training: 0.5714285714285714
User 88431 does not improve AUC. Reverting changes.
Training on augumented user 125848 14/50 current_auc = 0.5714285714285714
User 125848 AUC after training: 0.5714285714285714
User 125848 does not improve AUC. Reverting changes.
Training on augumented user 93067 15/50 current_auc = 0.5714285714285714
User 93067 AUC after training: 0.5714285714285714
User 93067 does not improve AUC. Reverting changes.
Training on augumented user 91760 16/50 current_auc = 0.5714285714285714
User 91760 AUC after training: 0.5714285714285714
User 91760 does not improve AUC. Reverting changes.
Training on augumented user 45241 17/50 current_auc = 0.5714285714285714
User 45241 AUC after training: 0.5714285714285714
User 45241 does not improve AUC. Reverting changes.
Training on augumented user 81298 18/50 current_auc = 0.5714285714285714
User 81298 AUC after training: 0.5714285714285714
User 81298 does not improve AUC. Reverting changes.
Training on augumented user 126211 19/50 current_auc = 0.5714285714285714
User 126211 AUC after training: 0.5714285714285714
User 126211 does not improve AUC. Reverting changes.
Training on augumented user 91485 20/50 current_auc = 0.5714285714285714
User 91485 AUC after training: 0.5714285714285714
User 91485 does not improve AUC. Reverting changes.
Training on augumented user 101157 21/50 current_auc = 0.5714285714285714
User 101157 AUC after training: 0.5714285714285714
User 101157 does not improve AUC. Reverting changes.
Training on augumented user 82737 22/50 current_auc = 0.5714285714285714
User 82737 AUC after training: 0.5714285714285714
User 82737 does not improve AUC. Reverting changes.
Training on augumented user 103612 23/50 current_auc = 0.5714285714285714
User 103612 AUC after training: 0.5714285714285714
User 103612 does not improve AUC. Reverting changes.
Training on augumented user 89945 24/50 current_auc = 0.5714285714285714
User 89945 AUC after training: 0.5714285714285714
User 89945 does not improve AUC. Reverting changes.
Training on augumented user 70107 25/50 current_auc = 0.5714285714285714
User 70107 AUC after training: 0.5714285714285714
User 70107 does not improve AUC. Reverting changes.
Training on augumented user 86434 26/50 current_auc = 0.5714285714285714
User 86434 AUC after training: 0.5714285714285714
User 86434 does not improve AUC. Reverting changes.
Training on augumented user 51755 27/50 current_auc = 0.5714285714285714
User 51755 AUC after training: 0.5714285714285714
User 51755 does not improve AUC. Reverting changes.
Training on augumented user 60977 28/50 current_auc = 0.5714285714285714
User 60977 AUC after training: 0.5714285714285714
User 60977 does not improve AUC. Reverting changes.
Training on augumented user 26845 29/50 current_auc = 0.5714285714285714
User 26845 AUC after training: 0.5714285714285714
User 26845 does not improve AUC. Reverting changes.
Training on augumented user 131790 30/50 current_auc = 0.5714285714285714
User 131790 AUC after training: 0.5714285714285714
User 131790 does not improve AUC. Reverting changes.
Training on augumented user 38249 31/50 current_auc = 0.5714285714285714
User 38249 AUC after training: 0.5714285714285714
User 38249 does not improve AUC. Reverting changes.
Training on augumented user 105986 32/50 current_auc = 0.5714285714285714
User 105986 AUC after training: 0.5714285714285714
User 105986 does not improve AUC. Reverting changes.
Training on augumented user 3191 33/50 current_auc = 0.5714285714285714
User 3191 AUC after training: 0.5714285714285714
User 3191 does not improve AUC. Reverting changes.
Training on augumented user 27945 34/50 current_auc = 0.5714285714285714
User 27945 AUC after training: 0.5714285714285714
User 27945 does not improve AUC. Reverting changes.
Training on augumented user 23474 35/50 current_auc = 0.5714285714285714
User 23474 AUC after training: 0.5714285714285714
User 23474 does not improve AUC. Reverting changes.
Training on augumented user 40648 36/50 current_auc = 0.5714285714285714
User 40648 AUC after training: 0.5714285714285714
User 40648 does not improve AUC. Reverting changes.
Training on augumented user 123770 37/50 current_auc = 0.5714285714285714
User 123770 AUC after training: 0.5714285714285714
User 123770 does not improve AUC. Reverting changes.
Training on augumented user 15836 38/50 current_auc = 0.5714285714285714
User 15836 AUC after training: 0.5714285714285714
User 15836 does not improve AUC. Reverting changes.
Training on augumented user 64388 39/50 current_auc = 0.5714285714285714
User 64388 AUC after training: 0.5714285714285714
User 64388 does not improve AUC. Reverting changes.
Training on augumented user 121351 40/50 current_auc = 0.5714285714285714
User 121351 AUC after training: 0.5714285714285714
User 121351 does not improve AUC. Reverting changes.
Training on augumented user 52637 41/50 current_auc = 0.5714285714285714
User 52637 AUC after training: 0.5714285714285714
User 52637 does not improve AUC. Reverting changes.
Training on augumented user 98198 42/50 current_auc = 0.5714285714285714
User 98198 AUC after training: 0.5714285714285714
User 98198 does not improve AUC. Reverting changes.
Training on augumented user 86874 43/50 current_auc = 0.5714285714285714
User 86874 AUC after training: 0.5714285714285714
User 86874 does not improve AUC. Reverting changes.
Training on augumented user 23153 44/50 current_auc = 0.5714285714285714
User 23153 AUC after training: 0.5714285714285714
User 23153 does not improve AUC. Reverting changes.
Training on augumented user 17181 45/50 current_auc = 0.5714285714285714
User 17181 AUC after training: 0.5714285714285714
User 17181 does not improve AUC. Reverting changes.
Training on augumented user 29265 46/50 current_auc = 0.5714285714285714
User 29265 AUC after training: 0.5714285714285714
User 29265 does not improve AUC. Reverting changes.
Training on augumented user 26041 47/50 current_auc = 0.5714285714285714
User 26041 AUC after training: 0.5714285714285714
User 26041 does not improve AUC. Reverting changes.
Training on augumented user 57257 48/50 current_auc = 0.5714285714285714
User 57257 AUC after training: 0.5714285714285714
User 57257 does not improve AUC. Reverting changes.
Training on augumented user 23760 49/50 current_auc = 0.5714285714285714
User 23760 AUC after training: 0.5714285714285714
User 23760 does not improve AUC. Reverting changes.
[2024-12-02 18:26:28.573659] start test user 111433 91/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:26:28.980996] start test user 111433 91/567 recall augumented users by random, augumented_users = [80668, 40214, 95753, 26321, 128186, 37284, 27908, 52763, 2669, 4927, 58554, 46052, 124366, 106139, 30863, 60936, 104099, 6106, 120379, 61906, 3322, 104665, 95122, 15066, 82104, 45343, 108288, 107923, 84475, 87020, 112710, 45900, 27350, 38562, 78554, 62320, 19057, 72477, 28454, 51077, 57558, 112166, 98797, 57203, 57893, 16776, 115919, 6789, 88820, 127369]
[2024-12-02 18:26:28.996924] user = 111433 Cloud 91/567
[2024-12-02 18:26:29.010677] user = 111433 Local 91/567
[2024-12-02 18:26:29.048119] user = 111433 Local+ 91/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:26:32.529310] user = 111433 MPDA- 91/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.49857142857142855
Training on augumented user 80668 0/50 current_auc = 0.49857142857142855
User 80668 AUC after training: 0.5028571428571429
User 80668 improves AUC. Keeping the model.
Training on augumented user 40214 1/50 current_auc = 0.5028571428571429
User 40214 AUC after training: 0.5021428571428571
User 40214 does not improve AUC. Reverting changes.
Training on augumented user 95753 2/50 current_auc = 0.5028571428571429
User 95753 AUC after training: 0.5021428571428571
User 95753 does not improve AUC. Reverting changes.
Training on augumented user 26321 3/50 current_auc = 0.5028571428571429
User 26321 AUC after training: 0.5014285714285714
User 26321 does not improve AUC. Reverting changes.
Training on augumented user 128186 4/50 current_auc = 0.5028571428571429
User 128186 AUC after training: 0.5028571428571429
User 128186 does not improve AUC. Reverting changes.
Training on augumented user 37284 5/50 current_auc = 0.5028571428571429
User 37284 AUC after training: 0.5007142857142857
User 37284 does not improve AUC. Reverting changes.
Training on augumented user 27908 6/50 current_auc = 0.5028571428571429
User 27908 AUC after training: 0.5028571428571429
User 27908 does not improve AUC. Reverting changes.
Training on augumented user 52763 7/50 current_auc = 0.5028571428571429
User 52763 AUC after training: 0.5028571428571429
User 52763 does not improve AUC. Reverting changes.
Training on augumented user 2669 8/50 current_auc = 0.5028571428571429
User 2669 AUC after training: 0.49785714285714283
User 2669 does not improve AUC. Reverting changes.
Training on augumented user 4927 9/50 current_auc = 0.5028571428571429
User 4927 AUC after training: 0.5014285714285714
User 4927 does not improve AUC. Reverting changes.
Training on augumented user 58554 10/50 current_auc = 0.5028571428571429
User 58554 AUC after training: 0.5028571428571428
User 58554 does not improve AUC. Reverting changes.
Training on augumented user 46052 11/50 current_auc = 0.5028571428571429
User 46052 AUC after training: 0.5035714285714286
User 46052 improves AUC. Keeping the model.
Training on augumented user 124366 12/50 current_auc = 0.5035714285714286
User 124366 AUC after training: 0.5035714285714286
User 124366 does not improve AUC. Reverting changes.
Training on augumented user 106139 13/50 current_auc = 0.5035714285714286
User 106139 AUC after training: 0.5007142857142857
User 106139 does not improve AUC. Reverting changes.
Training on augumented user 30863 14/50 current_auc = 0.5035714285714286
User 30863 AUC after training: 0.5021428571428571
User 30863 does not improve AUC. Reverting changes.
Training on augumented user 60936 15/50 current_auc = 0.5035714285714286
User 60936 AUC after training: 0.5014285714285714
User 60936 does not improve AUC. Reverting changes.
Training on augumented user 104099 16/50 current_auc = 0.5035714285714286
User 104099 AUC after training: 0.5021428571428571
User 104099 does not improve AUC. Reverting changes.
Training on augumented user 6106 17/50 current_auc = 0.5035714285714286
User 6106 AUC after training: 0.5028571428571429
User 6106 does not improve AUC. Reverting changes.
Training on augumented user 120379 18/50 current_auc = 0.5035714285714286
User 120379 AUC after training: 0.5010714285714286
User 120379 does not improve AUC. Reverting changes.
Training on augumented user 61906 19/50 current_auc = 0.5035714285714286
User 61906 AUC after training: 0.5028571428571428
User 61906 does not improve AUC. Reverting changes.
Training on augumented user 3322 20/50 current_auc = 0.5035714285714286
User 3322 AUC after training: 0.5035714285714286
User 3322 does not improve AUC. Reverting changes.
Training on augumented user 104665 21/50 current_auc = 0.5035714285714286
User 104665 AUC after training: 0.49857142857142855
User 104665 does not improve AUC. Reverting changes.
Training on augumented user 95122 22/50 current_auc = 0.5035714285714286
User 95122 AUC after training: 0.5021428571428572
User 95122 does not improve AUC. Reverting changes.
Training on augumented user 15066 23/50 current_auc = 0.5035714285714286
User 15066 AUC after training: 0.5035714285714286
User 15066 does not improve AUC. Reverting changes.
Training on augumented user 82104 24/50 current_auc = 0.5035714285714286
User 82104 AUC after training: 0.5007142857142858
User 82104 does not improve AUC. Reverting changes.
Training on augumented user 45343 25/50 current_auc = 0.5035714285714286
User 45343 AUC after training: 0.5035714285714286
User 45343 does not improve AUC. Reverting changes.
Training on augumented user 108288 26/50 current_auc = 0.5035714285714286
User 108288 AUC after training: 0.5028571428571429
User 108288 does not improve AUC. Reverting changes.
Training on augumented user 107923 27/50 current_auc = 0.5035714285714286
User 107923 AUC after training: 0.5028571428571429
User 107923 does not improve AUC. Reverting changes.
Training on augumented user 84475 28/50 current_auc = 0.5035714285714286
User 84475 AUC after training: 0.5028571428571429
User 84475 does not improve AUC. Reverting changes.
Training on augumented user 87020 29/50 current_auc = 0.5035714285714286
User 87020 AUC after training: 0.5035714285714286
User 87020 does not improve AUC. Reverting changes.
Training on augumented user 112710 30/50 current_auc = 0.5035714285714286
User 112710 AUC after training: 0.5028571428571428
User 112710 does not improve AUC. Reverting changes.
Training on augumented user 45900 31/50 current_auc = 0.5035714285714286
User 45900 AUC after training: 0.5042857142857143
User 45900 improves AUC. Keeping the model.
Training on augumented user 27350 32/50 current_auc = 0.5042857142857143
User 27350 AUC after training: 0.5028571428571429
User 27350 does not improve AUC. Reverting changes.
Training on augumented user 38562 33/50 current_auc = 0.5042857142857143
User 38562 AUC after training: 0.5028571428571429
User 38562 does not improve AUC. Reverting changes.
Training on augumented user 78554 34/50 current_auc = 0.5042857142857143
User 78554 AUC after training: 0.5035714285714286
User 78554 does not improve AUC. Reverting changes.
Training on augumented user 62320 35/50 current_auc = 0.5042857142857143
User 62320 AUC after training: 0.5042857142857143
User 62320 does not improve AUC. Reverting changes.
Training on augumented user 19057 36/50 current_auc = 0.5042857142857143
User 19057 AUC after training: 0.5057142857142857
User 19057 improves AUC. Keeping the model.
Training on augumented user 72477 37/50 current_auc = 0.5057142857142857
User 72477 AUC after training: 0.505
User 72477 does not improve AUC. Reverting changes.
Training on augumented user 28454 38/50 current_auc = 0.5057142857142857
User 28454 AUC after training: 0.5057142857142857
User 28454 does not improve AUC. Reverting changes.
Training on augumented user 51077 39/50 current_auc = 0.5057142857142857
User 51077 AUC after training: 0.505
User 51077 does not improve AUC. Reverting changes.
Training on augumented user 57558 40/50 current_auc = 0.5057142857142857
User 57558 AUC after training: 0.5028571428571429
User 57558 does not improve AUC. Reverting changes.
Training on augumented user 112166 41/50 current_auc = 0.5057142857142857
User 112166 AUC after training: 0.5028571428571429
User 112166 does not improve AUC. Reverting changes.
Training on augumented user 98797 42/50 current_auc = 0.5057142857142857
User 98797 AUC after training: 0.5057142857142857
User 98797 does not improve AUC. Reverting changes.
Training on augumented user 57203 43/50 current_auc = 0.5057142857142857
User 57203 AUC after training: 0.5057142857142858
User 57203 improves AUC. Keeping the model.
Training on augumented user 57893 44/50 current_auc = 0.5057142857142858
User 57893 AUC after training: 0.5057142857142857
User 57893 does not improve AUC. Reverting changes.
Training on augumented user 16776 45/50 current_auc = 0.5057142857142858
User 16776 AUC after training: 0.5042857142857143
User 16776 does not improve AUC. Reverting changes.
Training on augumented user 115919 46/50 current_auc = 0.5057142857142858
User 115919 AUC after training: 0.5042857142857142
User 115919 does not improve AUC. Reverting changes.
Training on augumented user 6789 47/50 current_auc = 0.5057142857142858
User 6789 AUC after training: 0.5021428571428571
User 6789 does not improve AUC. Reverting changes.
Training on augumented user 88820 48/50 current_auc = 0.5057142857142858
User 88820 AUC after training: 0.4992857142857143
User 88820 does not improve AUC. Reverting changes.
Training on augumented user 127369 49/50 current_auc = 0.5057142857142858
User 127369 AUC after training: 0.505
User 127369 does not improve AUC. Reverting changes.
[2024-12-02 18:27:04.105498] start test user 111485 92/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:27:04.682509] start test user 111485 92/567 recall augumented users by random, augumented_users = [57965, 36710, 133192, 120707, 107131, 51819, 44627, 64933, 68248, 30505, 49167, 136229, 28789, 78440, 119391, 128274, 35347, 119463, 19288, 21202, 48949, 62713, 124598, 14639, 67618, 68466, 120387, 2141, 97330, 73977, 23327, 118084, 65683, 19996, 14596, 47912, 98333, 52155, 127966, 76111, 44413, 97708, 121356, 86184, 44119, 11892, 93121, 71292, 93885, 93108]
[2024-12-02 18:27:04.698620] user = 111485 Cloud 92/567
[2024-12-02 18:27:04.709207] user = 111485 Local 92/567
[2024-12-02 18:27:04.804732] user = 111485 Local+ 92/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:27:06.642856] user = 111485 MPDA- 92/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.581081081081081
Training on augumented user 57965 0/50 current_auc = 0.581081081081081
User 57965 AUC after training: 0.5831600831600832
User 57965 improves AUC. Keeping the model.
Training on augumented user 36710 1/50 current_auc = 0.5831600831600832
User 36710 AUC after training: 0.581081081081081
User 36710 does not improve AUC. Reverting changes.
Training on augumented user 133192 2/50 current_auc = 0.5831600831600832
User 133192 AUC after training: 0.5821205821205822
User 133192 does not improve AUC. Reverting changes.
Training on augumented user 120707 3/50 current_auc = 0.5831600831600832
User 120707 AUC after training: 0.58004158004158
User 120707 does not improve AUC. Reverting changes.
Training on augumented user 107131 4/50 current_auc = 0.5831600831600832
User 107131 AUC after training: 0.5779625779625779
User 107131 does not improve AUC. Reverting changes.
Training on augumented user 51819 5/50 current_auc = 0.5831600831600832
User 51819 AUC after training: 0.5831600831600832
User 51819 does not improve AUC. Reverting changes.
Training on augumented user 44627 6/50 current_auc = 0.5831600831600832
User 44627 AUC after training: 0.581081081081081
User 44627 does not improve AUC. Reverting changes.
Training on augumented user 64933 7/50 current_auc = 0.5831600831600832
User 64933 AUC after training: 0.581081081081081
User 64933 does not improve AUC. Reverting changes.
Training on augumented user 68248 8/50 current_auc = 0.5831600831600832
User 68248 AUC after training: 0.5769230769230769
User 68248 does not improve AUC. Reverting changes.
Training on augumented user 30505 9/50 current_auc = 0.5831600831600832
User 30505 AUC after training: 0.5821205821205822
User 30505 does not improve AUC. Reverting changes.
Training on augumented user 49167 10/50 current_auc = 0.5831600831600832
User 49167 AUC after training: 0.581081081081081
User 49167 does not improve AUC. Reverting changes.
Training on augumented user 136229 11/50 current_auc = 0.5831600831600832
User 136229 AUC after training: 0.58004158004158
User 136229 does not improve AUC. Reverting changes.
Training on augumented user 28789 12/50 current_auc = 0.5831600831600832
User 28789 AUC after training: 0.579002079002079
User 28789 does not improve AUC. Reverting changes.
Training on augumented user 78440 13/50 current_auc = 0.5831600831600832
User 78440 AUC after training: 0.5821205821205822
User 78440 does not improve AUC. Reverting changes.
Training on augumented user 119391 14/50 current_auc = 0.5831600831600832
User 119391 AUC after training: 0.579002079002079
User 119391 does not improve AUC. Reverting changes.
Training on augumented user 128274 15/50 current_auc = 0.5831600831600832
User 128274 AUC after training: 0.5831600831600832
User 128274 does not improve AUC. Reverting changes.
Training on augumented user 35347 16/50 current_auc = 0.5831600831600832
User 35347 AUC after training: 0.581081081081081
User 35347 does not improve AUC. Reverting changes.
Training on augumented user 119463 17/50 current_auc = 0.5831600831600832
User 119463 AUC after training: 0.58004158004158
User 119463 does not improve AUC. Reverting changes.
Training on augumented user 19288 18/50 current_auc = 0.5831600831600832
User 19288 AUC after training: 0.582120582120582
User 19288 does not improve AUC. Reverting changes.
Training on augumented user 21202 19/50 current_auc = 0.5831600831600832
User 21202 AUC after training: 0.579002079002079
User 21202 does not improve AUC. Reverting changes.
Training on augumented user 48949 20/50 current_auc = 0.5831600831600832
User 48949 AUC after training: 0.5821205821205822
User 48949 does not improve AUC. Reverting changes.
Training on augumented user 62713 21/50 current_auc = 0.5831600831600832
User 62713 AUC after training: 0.5821205821205822
User 62713 does not improve AUC. Reverting changes.
Training on augumented user 124598 22/50 current_auc = 0.5831600831600832
User 124598 AUC after training: 0.58004158004158
User 124598 does not improve AUC. Reverting changes.
Training on augumented user 14639 23/50 current_auc = 0.5831600831600832
User 14639 AUC after training: 0.5821205821205822
User 14639 does not improve AUC. Reverting changes.
Training on augumented user 67618 24/50 current_auc = 0.5831600831600832
User 67618 AUC after training: 0.581081081081081
User 67618 does not improve AUC. Reverting changes.
Training on augumented user 68466 25/50 current_auc = 0.5831600831600832
User 68466 AUC after training: 0.5821205821205822
User 68466 does not improve AUC. Reverting changes.
Training on augumented user 120387 26/50 current_auc = 0.5831600831600832
User 120387 AUC after training: 0.58004158004158
User 120387 does not improve AUC. Reverting changes.
Training on augumented user 2141 27/50 current_auc = 0.5831600831600832
User 2141 AUC after training: 0.5831600831600832
User 2141 does not improve AUC. Reverting changes.
Training on augumented user 97330 28/50 current_auc = 0.5831600831600832
User 97330 AUC after training: 0.581081081081081
User 97330 does not improve AUC. Reverting changes.
Training on augumented user 73977 29/50 current_auc = 0.5831600831600832
User 73977 AUC after training: 0.58004158004158
User 73977 does not improve AUC. Reverting changes.
Training on augumented user 23327 30/50 current_auc = 0.5831600831600832
User 23327 AUC after training: 0.5831600831600832
User 23327 does not improve AUC. Reverting changes.
Training on augumented user 118084 31/50 current_auc = 0.5831600831600832
User 118084 AUC after training: 0.581081081081081
User 118084 does not improve AUC. Reverting changes.
Training on augumented user 65683 32/50 current_auc = 0.5831600831600832
User 65683 AUC after training: 0.581081081081081
User 65683 does not improve AUC. Reverting changes.
Training on augumented user 19996 33/50 current_auc = 0.5831600831600832
User 19996 AUC after training: 0.579002079002079
User 19996 does not improve AUC. Reverting changes.
Training on augumented user 14596 34/50 current_auc = 0.5831600831600832
User 14596 AUC after training: 0.581081081081081
User 14596 does not improve AUC. Reverting changes.
Training on augumented user 47912 35/50 current_auc = 0.5831600831600832
User 47912 AUC after training: 0.58004158004158
User 47912 does not improve AUC. Reverting changes.
Training on augumented user 98333 36/50 current_auc = 0.5831600831600832
User 98333 AUC after training: 0.581081081081081
User 98333 does not improve AUC. Reverting changes.
Training on augumented user 52155 37/50 current_auc = 0.5831600831600832
User 52155 AUC after training: 0.5831600831600832
User 52155 does not improve AUC. Reverting changes.
Training on augumented user 127966 38/50 current_auc = 0.5831600831600832
User 127966 AUC after training: 0.58004158004158
User 127966 does not improve AUC. Reverting changes.
Training on augumented user 76111 39/50 current_auc = 0.5831600831600832
User 76111 AUC after training: 0.5821205821205822
User 76111 does not improve AUC. Reverting changes.
Training on augumented user 44413 40/50 current_auc = 0.5831600831600832
User 44413 AUC after training: 0.581081081081081
User 44413 does not improve AUC. Reverting changes.
Training on augumented user 97708 41/50 current_auc = 0.5831600831600832
User 97708 AUC after training: 0.579002079002079
User 97708 does not improve AUC. Reverting changes.
Training on augumented user 121356 42/50 current_auc = 0.5831600831600832
User 121356 AUC after training: 0.581081081081081
User 121356 does not improve AUC. Reverting changes.
Training on augumented user 86184 43/50 current_auc = 0.5831600831600832
User 86184 AUC after training: 0.5821205821205822
User 86184 does not improve AUC. Reverting changes.
Training on augumented user 44119 44/50 current_auc = 0.5831600831600832
User 44119 AUC after training: 0.581081081081081
User 44119 does not improve AUC. Reverting changes.
Training on augumented user 11892 45/50 current_auc = 0.5831600831600832
User 11892 AUC after training: 0.58004158004158
User 11892 does not improve AUC. Reverting changes.
Training on augumented user 93121 46/50 current_auc = 0.5831600831600832
User 93121 AUC after training: 0.581081081081081
User 93121 does not improve AUC. Reverting changes.
Training on augumented user 71292 47/50 current_auc = 0.5831600831600832
User 71292 AUC after training: 0.581081081081081
User 71292 does not improve AUC. Reverting changes.
Training on augumented user 93885 48/50 current_auc = 0.5831600831600832
User 93885 AUC after training: 0.581081081081081
User 93885 does not improve AUC. Reverting changes.
Training on augumented user 93108 49/50 current_auc = 0.5831600831600832
User 93108 AUC after training: 0.579002079002079
User 93108 does not improve AUC. Reverting changes.
[2024-12-02 18:27:33.120434] start test user 111522 93/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:27:33.544139] start test user 111522 93/567 recall augumented users by random, augumented_users = [75079, 118880, 68000, 50728, 102769, 33334, 32034, 53288, 91976, 130572, 55897, 15507, 8430, 45826, 86350, 52970, 26566, 127447, 103885, 14235, 58419, 22465, 17374, 77048, 118690, 54490, 78278, 79013, 16713, 94204, 69231, 114176, 58391, 7730, 10774, 112427, 35429, 54467, 54637, 131590, 82139, 71367, 59585, 130661, 75645, 92184, 57247, 30719, 22090, 35090]
[2024-12-02 18:27:33.559697] user = 111522 Cloud 93/567
[2024-12-02 18:27:33.571225] user = 111522 Local 93/567
[2024-12-02 18:27:33.614482] user = 111522 Local+ 93/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:27:35.862239] user = 111522 MPDA- 93/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6666666666666667
Training on augumented user 75079 0/50 current_auc = 0.6666666666666667
User 75079 AUC after training: 0.6627450980392157
User 75079 does not improve AUC. Reverting changes.
Training on augumented user 118880 1/50 current_auc = 0.6666666666666667
User 118880 AUC after training: 0.6666666666666667
User 118880 does not improve AUC. Reverting changes.
Training on augumented user 68000 2/50 current_auc = 0.6666666666666667
User 68000 AUC after training: 0.6627450980392157
User 68000 does not improve AUC. Reverting changes.
Training on augumented user 50728 3/50 current_auc = 0.6666666666666667
User 50728 AUC after training: 0.6666666666666667
User 50728 does not improve AUC. Reverting changes.
Training on augumented user 102769 4/50 current_auc = 0.6666666666666667
User 102769 AUC after training: 0.6627450980392157
User 102769 does not improve AUC. Reverting changes.
Training on augumented user 33334 5/50 current_auc = 0.6666666666666667
User 33334 AUC after training: 0.6666666666666667
User 33334 does not improve AUC. Reverting changes.
Training on augumented user 32034 6/50 current_auc = 0.6666666666666667
User 32034 AUC after training: 0.6666666666666667
User 32034 does not improve AUC. Reverting changes.
Training on augumented user 53288 7/50 current_auc = 0.6666666666666667
User 53288 AUC after training: 0.6647058823529411
User 53288 does not improve AUC. Reverting changes.
Training on augumented user 91976 8/50 current_auc = 0.6666666666666667
User 91976 AUC after training: 0.6666666666666667
User 91976 does not improve AUC. Reverting changes.
Training on augumented user 130572 9/50 current_auc = 0.6666666666666667
User 130572 AUC after training: 0.6666666666666667
User 130572 does not improve AUC. Reverting changes.
Training on augumented user 55897 10/50 current_auc = 0.6666666666666667
User 55897 AUC after training: 0.6666666666666667
User 55897 does not improve AUC. Reverting changes.
Training on augumented user 15507 11/50 current_auc = 0.6666666666666667
User 15507 AUC after training: 0.6666666666666667
User 15507 does not improve AUC. Reverting changes.
Training on augumented user 8430 12/50 current_auc = 0.6666666666666667
User 8430 AUC after training: 0.6627450980392157
User 8430 does not improve AUC. Reverting changes.
Training on augumented user 45826 13/50 current_auc = 0.6666666666666667
User 45826 AUC after training: 0.6666666666666667
User 45826 does not improve AUC. Reverting changes.
Training on augumented user 86350 14/50 current_auc = 0.6666666666666667
User 86350 AUC after training: 0.6666666666666667
User 86350 does not improve AUC. Reverting changes.
Training on augumented user 52970 15/50 current_auc = 0.6666666666666667
User 52970 AUC after training: 0.6666666666666667
User 52970 does not improve AUC. Reverting changes.
Training on augumented user 26566 16/50 current_auc = 0.6666666666666667
User 26566 AUC after training: 0.6666666666666667
User 26566 does not improve AUC. Reverting changes.
Training on augumented user 127447 17/50 current_auc = 0.6666666666666667
User 127447 AUC after training: 0.6627450980392157
User 127447 does not improve AUC. Reverting changes.
Training on augumented user 103885 18/50 current_auc = 0.6666666666666667
User 103885 AUC after training: 0.6666666666666667
User 103885 does not improve AUC. Reverting changes.
Training on augumented user 14235 19/50 current_auc = 0.6666666666666667
User 14235 AUC after training: 0.6647058823529411
User 14235 does not improve AUC. Reverting changes.
Training on augumented user 58419 20/50 current_auc = 0.6666666666666667
User 58419 AUC after training: 0.6647058823529411
User 58419 does not improve AUC. Reverting changes.
Training on augumented user 22465 21/50 current_auc = 0.6666666666666667
User 22465 AUC after training: 0.6647058823529411
User 22465 does not improve AUC. Reverting changes.
Training on augumented user 17374 22/50 current_auc = 0.6666666666666667
User 17374 AUC after training: 0.6666666666666667
User 17374 does not improve AUC. Reverting changes.
Training on augumented user 77048 23/50 current_auc = 0.6666666666666667
User 77048 AUC after training: 0.6666666666666667
User 77048 does not improve AUC. Reverting changes.
Training on augumented user 118690 24/50 current_auc = 0.6666666666666667
User 118690 AUC after training: 0.6627450980392157
User 118690 does not improve AUC. Reverting changes.
Training on augumented user 54490 25/50 current_auc = 0.6666666666666667
User 54490 AUC after training: 0.6647058823529411
User 54490 does not improve AUC. Reverting changes.
Training on augumented user 78278 26/50 current_auc = 0.6666666666666667
User 78278 AUC after training: 0.6666666666666667
User 78278 does not improve AUC. Reverting changes.
Training on augumented user 79013 27/50 current_auc = 0.6666666666666667
User 79013 AUC after training: 0.6666666666666667
User 79013 does not improve AUC. Reverting changes.
Training on augumented user 16713 28/50 current_auc = 0.6666666666666667
User 16713 AUC after training: 0.6647058823529411
User 16713 does not improve AUC. Reverting changes.
Training on augumented user 94204 29/50 current_auc = 0.6666666666666667
User 94204 AUC after training: 0.6647058823529411
User 94204 does not improve AUC. Reverting changes.
Training on augumented user 69231 30/50 current_auc = 0.6666666666666667
User 69231 AUC after training: 0.6666666666666667
User 69231 does not improve AUC. Reverting changes.
Training on augumented user 114176 31/50 current_auc = 0.6666666666666667
User 114176 AUC after training: 0.6666666666666667
User 114176 does not improve AUC. Reverting changes.
Training on augumented user 58391 32/50 current_auc = 0.6666666666666667
User 58391 AUC after training: 0.6666666666666667
User 58391 does not improve AUC. Reverting changes.
Training on augumented user 7730 33/50 current_auc = 0.6666666666666667
User 7730 AUC after training: 0.6666666666666667
User 7730 does not improve AUC. Reverting changes.
Training on augumented user 10774 34/50 current_auc = 0.6666666666666667
User 10774 AUC after training: 0.6647058823529411
User 10774 does not improve AUC. Reverting changes.
Training on augumented user 112427 35/50 current_auc = 0.6666666666666667
User 112427 AUC after training: 0.6666666666666667
User 112427 does not improve AUC. Reverting changes.
Training on augumented user 35429 36/50 current_auc = 0.6666666666666667
User 35429 AUC after training: 0.6666666666666667
User 35429 does not improve AUC. Reverting changes.
Training on augumented user 54467 37/50 current_auc = 0.6666666666666667
User 54467 AUC after training: 0.6666666666666667
User 54467 does not improve AUC. Reverting changes.
Training on augumented user 54637 38/50 current_auc = 0.6666666666666667
User 54637 AUC after training: 0.6666666666666667
User 54637 does not improve AUC. Reverting changes.
Training on augumented user 131590 39/50 current_auc = 0.6666666666666667
User 131590 AUC after training: 0.6666666666666667
User 131590 does not improve AUC. Reverting changes.
Training on augumented user 82139 40/50 current_auc = 0.6666666666666667
User 82139 AUC after training: 0.6666666666666667
User 82139 does not improve AUC. Reverting changes.
Training on augumented user 71367 41/50 current_auc = 0.6666666666666667
User 71367 AUC after training: 0.6647058823529411
User 71367 does not improve AUC. Reverting changes.
Training on augumented user 59585 42/50 current_auc = 0.6666666666666667
User 59585 AUC after training: 0.6647058823529411
User 59585 does not improve AUC. Reverting changes.
Training on augumented user 130661 43/50 current_auc = 0.6666666666666667
User 130661 AUC after training: 0.6666666666666667
User 130661 does not improve AUC. Reverting changes.
Training on augumented user 75645 44/50 current_auc = 0.6666666666666667
User 75645 AUC after training: 0.6666666666666667
User 75645 does not improve AUC. Reverting changes.
Training on augumented user 92184 45/50 current_auc = 0.6666666666666667
User 92184 AUC after training: 0.6666666666666666
User 92184 does not improve AUC. Reverting changes.
Training on augumented user 57247 46/50 current_auc = 0.6666666666666667
User 57247 AUC after training: 0.6666666666666667
User 57247 does not improve AUC. Reverting changes.
Training on augumented user 30719 47/50 current_auc = 0.6666666666666667
User 30719 AUC after training: 0.6666666666666666
User 30719 does not improve AUC. Reverting changes.
Training on augumented user 22090 48/50 current_auc = 0.6666666666666667
User 22090 AUC after training: 0.6647058823529411
User 22090 does not improve AUC. Reverting changes.
Training on augumented user 35090 49/50 current_auc = 0.6666666666666667
User 35090 AUC after training: 0.6666666666666667
User 35090 does not improve AUC. Reverting changes.
[2024-12-02 18:28:04.869931] start test user 111549 94/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:28:05.643934] start test user 111549 94/567 recall augumented users by random, augumented_users = [46683, 18646, 62318, 97602, 135172, 17801, 135034, 101575, 135261, 57476, 37510, 66451, 74204, 64796, 85703, 55161, 96690, 127380, 18947, 136911, 107975, 7072, 40565, 54346, 84144, 111895, 110042, 95778, 47547, 67818, 137723, 103283, 24394, 23716, 46482, 30739, 126149, 125888, 133324, 33481, 128552, 54925, 75341, 101826, 97852, 39424, 42047, 39697, 26037, 105258]
[2024-12-02 18:28:05.666854] user = 111549 Cloud 94/567
[2024-12-02 18:28:05.734361] user = 111549 Local 94/567
[2024-12-02 18:28:06.357785] user = 111549 Local+ 94/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:28:08.897276] user = 111549 MPDA- 94/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5035477053140097
Training on augumented user 46683 0/50 current_auc = 0.5035477053140097
User 46683 AUC after training: 0.5032910628019324
User 46683 does not improve AUC. Reverting changes.
Training on augumented user 18646 1/50 current_auc = 0.5035477053140097
User 18646 AUC after training: 0.5034420289855073
User 18646 does not improve AUC. Reverting changes.
Training on augumented user 62318 2/50 current_auc = 0.5035477053140097
User 62318 AUC after training: 0.5040609903381642
User 62318 improves AUC. Keeping the model.
Training on augumented user 97602 3/50 current_auc = 0.5040609903381642
User 97602 AUC after training: 0.5012832125603864
User 97602 does not improve AUC. Reverting changes.
Training on augumented user 135172 4/50 current_auc = 0.5040609903381642
User 135172 AUC after training: 0.5046346618357488
User 135172 improves AUC. Keeping the model.
Training on augumented user 17801 5/50 current_auc = 0.5046346618357488
User 17801 AUC after training: 0.5040609903381643
User 17801 does not improve AUC. Reverting changes.
Training on augumented user 135034 6/50 current_auc = 0.5046346618357488
User 135034 AUC after training: 0.5044082125603865
User 135034 does not improve AUC. Reverting changes.
Training on augumented user 101575 7/50 current_auc = 0.5046346618357488
User 101575 AUC after training: 0.5046422101449275
User 101575 improves AUC. Keeping the model.
Training on augumented user 135261 8/50 current_auc = 0.5046422101449275
User 135261 AUC after training: 0.5043327294685991
User 135261 does not improve AUC. Reverting changes.
Training on augumented user 57476 9/50 current_auc = 0.5046422101449275
User 57476 AUC after training: 0.5049214975845411
User 57476 improves AUC. Keeping the model.
Training on augumented user 37510 10/50 current_auc = 0.5049214975845411
User 37510 AUC after training: 0.5050724637681159
User 37510 improves AUC. Keeping the model.
Training on augumented user 66451 11/50 current_auc = 0.5050724637681159
User 66451 AUC after training: 0.5045591787439614
User 66451 does not improve AUC. Reverting changes.
Training on augumented user 74204 12/50 current_auc = 0.5050724637681159
User 74204 AUC after training: 0.5050724637681159
User 74204 does not improve AUC. Reverting changes.
Training on augumented user 64796 13/50 current_auc = 0.5050724637681159
User 64796 AUC after training: 0.5052083333333333
User 64796 improves AUC. Keeping the model.
Training on augumented user 85703 14/50 current_auc = 0.5052083333333333
User 85703 AUC after training: 0.5044082125603865
User 85703 does not improve AUC. Reverting changes.
Training on augumented user 55161 15/50 current_auc = 0.5052083333333333
User 55161 AUC after training: 0.504362922705314
User 55161 does not improve AUC. Reverting changes.
Training on augumented user 96690 16/50 current_auc = 0.5052083333333333
User 96690 AUC after training: 0.5052083333333334
User 96690 improves AUC. Keeping the model.
Training on augumented user 127380 17/50 current_auc = 0.5052083333333334
User 127380 AUC after training: 0.5048158212560386
User 127380 does not improve AUC. Reverting changes.
Training on augumented user 18947 18/50 current_auc = 0.5052083333333334
User 18947 AUC after training: 0.5047856280193236
User 18947 does not improve AUC. Reverting changes.
Training on augumented user 136911 19/50 current_auc = 0.5052083333333334
User 136911 AUC after training: 0.5049969806763286
User 136911 does not improve AUC. Reverting changes.
Training on augumented user 107975 20/50 current_auc = 0.5052083333333334
User 107975 AUC after training: 0.5051328502415459
User 107975 does not improve AUC. Reverting changes.
Training on augumented user 7072 21/50 current_auc = 0.5052083333333334
User 7072 AUC after training: 0.5050573671497585
User 7072 does not improve AUC. Reverting changes.
Training on augumented user 40565 22/50 current_auc = 0.5052083333333334
User 40565 AUC after training: 0.5049365942028985
User 40565 does not improve AUC. Reverting changes.
Training on augumented user 54346 23/50 current_auc = 0.5052083333333334
User 54346 AUC after training: 0.5052536231884057
User 54346 improves AUC. Keeping the model.
Training on augumented user 84144 24/50 current_auc = 0.5052536231884057
User 84144 AUC after training: 0.5053291062801932
User 84144 improves AUC. Keeping the model.
Training on augumented user 111895 25/50 current_auc = 0.5053291062801932
User 111895 AUC after training: 0.5053140096618358
User 111895 does not improve AUC. Reverting changes.
Training on augumented user 110042 26/50 current_auc = 0.5053291062801932
User 110042 AUC after training: 0.5042270531400966
User 110042 does not improve AUC. Reverting changes.
Training on augumented user 95778 27/50 current_auc = 0.5053291062801932
User 95778 AUC after training: 0.5051026570048309
User 95778 does not improve AUC. Reverting changes.
Training on augumented user 47547 28/50 current_auc = 0.5053291062801932
User 47547 AUC after training: 0.5051932367149758
User 47547 does not improve AUC. Reverting changes.
Training on augumented user 67818 29/50 current_auc = 0.5053291062801932
User 67818 AUC after training: 0.5051630434782609
User 67818 does not improve AUC. Reverting changes.
Training on augumented user 137723 30/50 current_auc = 0.5053291062801932
User 137723 AUC after training: 0.5054498792270532
User 137723 improves AUC. Keeping the model.
Training on augumented user 103283 31/50 current_auc = 0.5054498792270532
User 103283 AUC after training: 0.5053894927536232
User 103283 does not improve AUC. Reverting changes.
Training on augumented user 24394 32/50 current_auc = 0.5054498792270532
User 24394 AUC after training: 0.5053592995169082
User 24394 does not improve AUC. Reverting changes.
Training on augumented user 23716 33/50 current_auc = 0.5054498792270532
User 23716 AUC after training: 0.5053592995169082
User 23716 does not improve AUC. Reverting changes.
Training on augumented user 46482 34/50 current_auc = 0.5054498792270532
User 46482 AUC after training: 0.5054800724637681
User 46482 improves AUC. Keeping the model.
Training on augumented user 30739 35/50 current_auc = 0.5054800724637681
User 30739 AUC after training: 0.5051479468599034
User 30739 does not improve AUC. Reverting changes.
Training on augumented user 126149 36/50 current_auc = 0.5054800724637681
User 126149 AUC after training: 0.5048460144927536
User 126149 does not improve AUC. Reverting changes.
Training on augumented user 125888 37/50 current_auc = 0.5054800724637681
User 125888 AUC after training: 0.5054498792270532
User 125888 does not improve AUC. Reverting changes.
Training on augumented user 133324 38/50 current_auc = 0.5054800724637681
User 133324 AUC after training: 0.5056159420289854
User 133324 improves AUC. Keeping the model.
Training on augumented user 33481 39/50 current_auc = 0.5056159420289854
User 33481 AUC after training: 0.5053442028985508
User 33481 does not improve AUC. Reverting changes.
Training on augumented user 128552 40/50 current_auc = 0.5056159420289854
User 128552 AUC after training: 0.5067330917874396
User 128552 improves AUC. Keeping the model.
Training on augumented user 54925 41/50 current_auc = 0.5067330917874396
User 54925 AUC after training: 0.5063405797101449
User 54925 does not improve AUC. Reverting changes.
Training on augumented user 75341 42/50 current_auc = 0.5067330917874396
User 75341 AUC after training: 0.5065066425120773
User 75341 does not improve AUC. Reverting changes.
Training on augumented user 101826 43/50 current_auc = 0.5067330917874396
User 101826 AUC after training: 0.5069746376811595
User 101826 improves AUC. Keeping the model.
Training on augumented user 97852 44/50 current_auc = 0.5069746376811595
User 97852 AUC after training: 0.5069142512077295
User 97852 does not improve AUC. Reverting changes.
Training on augumented user 39424 45/50 current_auc = 0.5069746376811595
User 39424 AUC after training: 0.5069142512077295
User 39424 does not improve AUC. Reverting changes.
Training on augumented user 42047 46/50 current_auc = 0.5069746376811595
User 42047 AUC after training: 0.5070652173913044
User 42047 improves AUC. Keeping the model.
Training on augumented user 39697 47/50 current_auc = 0.5070652173913044
User 39697 AUC after training: 0.5069444444444444
User 39697 does not improve AUC. Reverting changes.
Training on augumented user 26037 48/50 current_auc = 0.5070652173913044
User 26037 AUC after training: 0.5068840579710145
User 26037 does not improve AUC. Reverting changes.
Training on augumented user 105258 49/50 current_auc = 0.5070652173913044
User 105258 AUC after training: 0.5067632850241546
User 105258 does not improve AUC. Reverting changes.
[2024-12-02 18:28:40.221551] start test user 111650 95/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:28:40.756773] start test user 111650 95/567 recall augumented users by random, augumented_users = [66915, 87911, 66950, 23306, 11647, 12858, 122543, 46184, 107384, 43816, 22426, 129754, 70931, 135175, 102669, 97748, 100038, 52332, 126959, 35205, 15109, 88139, 20366, 85695, 104301, 13788, 58461, 127554, 80095, 38093, 116094, 49432, 24461, 58564, 85960, 45133, 49571, 67922, 46690, 67560, 44126, 125825, 5374, 15708, 109657, 25753, 134072, 109686, 2183, 137938]
[2024-12-02 18:28:40.775258] user = 111650 Cloud 95/567
[2024-12-02 18:28:40.817578] user = 111650 Local 95/567
[2024-12-02 18:28:41.019725] user = 111650 Local+ 95/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:28:43.691390] user = 111650 MPDA- 95/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5146121669801522
Training on augumented user 66915 0/50 current_auc = 0.5146121669801522
User 66915 AUC after training: 0.514275287049774
User 66915 does not improve AUC. Reverting changes.
Training on augumented user 87911 1/50 current_auc = 0.5146121669801522
User 87911 AUC after training: 0.5144577636787288
User 87911 does not improve AUC. Reverting changes.
Training on augumented user 66950 2/50 current_auc = 0.5146121669801522
User 66950 AUC after training: 0.5151174868757193
User 66950 improves AUC. Keeping the model.
Training on augumented user 23306 3/50 current_auc = 0.5151174868757193
User 23306 AUC after training: 0.514219140394711
User 23306 does not improve AUC. Reverting changes.
Training on augumented user 11647 4/50 current_auc = 0.5151174868757193
User 11647 AUC after training: 0.5144998736700261
User 11647 does not improve AUC. Reverting changes.
Training on augumented user 12858 5/50 current_auc = 0.5151174868757193
User 12858 AUC after training: 0.5146402403076836
User 12858 does not improve AUC. Reverting changes.
Training on augumented user 122543 6/50 current_auc = 0.5151174868757193
User 122543 AUC after training: 0.5148086802728727
User 122543 does not improve AUC. Reverting changes.
Training on augumented user 46184 7/50 current_auc = 0.5151174868757193
User 46184 AUC after training: 0.5135032705426574
User 46184 does not improve AUC. Reverting changes.
Training on augumented user 107384 8/50 current_auc = 0.5151174868757193
User 107384 AUC after training: 0.5134471238875944
User 107384 does not improve AUC. Reverting changes.
Training on augumented user 43816 9/50 current_auc = 0.5151174868757193
User 43816 AUC after training: 0.516577299907358
User 43816 improves AUC. Keeping the model.
Training on augumented user 22426 10/50 current_auc = 0.516577299907358
User 22426 AUC after training: 0.5167738132000786
User 22426 improves AUC. Keeping the model.
Training on augumented user 129754 11/50 current_auc = 0.5167738132000786
User 129754 AUC after training: 0.5161842733219169
User 129754 does not improve AUC. Reverting changes.
Training on augumented user 70931 12/50 current_auc = 0.5167738132000786
User 70931 AUC after training: 0.5145981303163863
User 70931 does not improve AUC. Reverting changes.
Training on augumented user 135175 13/50 current_auc = 0.5167738132000786
User 135175 AUC after training: 0.5156228067712866
User 135175 does not improve AUC. Reverting changes.
Training on augumented user 102669 14/50 current_auc = 0.5167738132000786
User 102669 AUC after training: 0.5185143595070324
User 102669 improves AUC. Keeping the model.
Training on augumented user 97748 15/50 current_auc = 0.5185143595070324
User 97748 AUC after training: 0.5184582128519694
User 97748 does not improve AUC. Reverting changes.
Training on augumented user 100038 16/50 current_auc = 0.5185143595070324
User 100038 AUC after training: 0.5178265629825103
User 100038 does not improve AUC. Reverting changes.
Training on augumented user 52332 17/50 current_auc = 0.5185143595070324
User 52332 AUC after training: 0.5181494062491228
User 52332 does not improve AUC. Reverting changes.
Training on augumented user 126959 18/50 current_auc = 0.5185143595070324
User 126959 AUC after training: 0.5186827994722214
User 126959 improves AUC. Keeping the model.
Training on augumented user 35205 19/50 current_auc = 0.5186827994722214
User 35205 AUC after training: 0.5183178462143118
User 35205 does not improve AUC. Reverting changes.
Training on augumented user 15109 20/50 current_auc = 0.5186827994722214
User 15109 AUC after training: 0.518247662895483
User 15109 does not improve AUC. Reverting changes.
Training on augumented user 88139 21/50 current_auc = 0.5186827994722214
User 88139 AUC after training: 0.5192442660228517
User 88139 improves AUC. Keeping the model.
Training on augumented user 20366 22/50 current_auc = 0.5192442660228517
User 20366 AUC after training: 0.5204233457791753
User 20366 improves AUC. Keeping the model.
Training on augumented user 85695 23/50 current_auc = 0.5204233457791753
User 85695 AUC after training: 0.5194688526431037
User 85695 does not improve AUC. Reverting changes.
Training on augumented user 104301 24/50 current_auc = 0.5204233457791753
User 104301 AUC after training: 0.5202549058139861
User 104301 does not improve AUC. Reverting changes.
Training on augumented user 13788 25/50 current_auc = 0.5204233457791753
User 13788 AUC after training: 0.5180651862665282
User 13788 does not improve AUC. Reverting changes.
Training on augumented user 58461 26/50 current_auc = 0.5204233457791753
User 58461 AUC after training: 0.5188652761011763
User 58461 does not improve AUC. Reverting changes.
Training on augumented user 127554 27/50 current_auc = 0.5204233457791753
User 127554 AUC after training: 0.5201145391763285
User 127554 does not improve AUC. Reverting changes.
Training on augumented user 80095 28/50 current_auc = 0.5204233457791753
User 80095 AUC after training: 0.5166194098986553
User 80095 does not improve AUC. Reverting changes.
Training on augumented user 38093 29/50 current_auc = 0.5204233457791753
User 38093 AUC after training: 0.5205075657617697
User 38093 improves AUC. Keeping the model.
Training on augumented user 116094 30/50 current_auc = 0.5205075657617697
User 116094 AUC after training: 0.5207181157182561
User 116094 improves AUC. Keeping the model.
Training on augumented user 49432 31/50 current_auc = 0.5207181157182561
User 49432 AUC after training: 0.524058841694506
User 49432 improves AUC. Keeping the model.
Training on augumented user 24461 32/50 current_auc = 0.524058841694506
User 24461 AUC after training: 0.5235254484714074
User 24461 does not improve AUC. Reverting changes.
Training on augumented user 58564 33/50 current_auc = 0.524058841694506
User 58564 AUC after training: 0.5251817747957664
User 58564 improves AUC. Keeping the model.
Training on augumented user 85960 34/50 current_auc = 0.5251817747957664
User 85960 AUC after training: 0.5254905813986132
User 85960 improves AUC. Keeping the model.
Training on augumented user 45133 35/50 current_auc = 0.5254905813986132
User 45133 AUC after training: 0.5220937087673002
User 45133 does not improve AUC. Reverting changes.
Training on augumented user 49571 36/50 current_auc = 0.5254905813986132
User 49571 AUC after training: 0.5257151680188652
User 49571 improves AUC. Keeping the model.
Training on augumented user 67922 37/50 current_auc = 0.5257151680188652
User 67922 AUC after training: 0.5266415878274052
User 67922 improves AUC. Keeping the model.
Training on augumented user 46690 38/50 current_auc = 0.5266415878274052
User 46690 AUC after training: 0.5261643412593695
User 46690 does not improve AUC. Reverting changes.
Training on augumented user 67560 39/50 current_auc = 0.5266415878274052
User 67560 AUC after training: 0.5270346144128464
User 67560 improves AUC. Keeping the model.
Training on augumented user 44126 40/50 current_auc = 0.5270346144128464
User 44126 AUC after training: 0.5257432413463967
User 44126 does not improve AUC. Reverting changes.
Training on augumented user 125825 41/50 current_auc = 0.5270346144128464
User 125825 AUC after training: 0.5270626877403779
User 125825 improves AUC. Keeping the model.
Training on augumented user 5374 42/50 current_auc = 0.5270626877403779
User 5374 AUC after training: 0.5266135144998736
User 5374 does not improve AUC. Reverting changes.
Training on augumented user 15708 43/50 current_auc = 0.5270626877403779
User 15708 AUC after training: 0.5263889278796215
User 15708 does not improve AUC. Reverting changes.
Training on augumented user 109657 44/50 current_auc = 0.5270626877403779
User 109657 AUC after training: 0.5275399343084135
User 109657 improves AUC. Keeping the model.
Training on augumented user 25753 45/50 current_auc = 0.5275399343084135
User 25753 AUC after training: 0.5277645209286657
User 25753 improves AUC. Keeping the model.
Training on augumented user 134072 46/50 current_auc = 0.5277645209286657
User 134072 AUC after training: 0.5246624182364336
User 134072 does not improve AUC. Reverting changes.
Training on augumented user 109686 47/50 current_auc = 0.5277645209286657
User 109686 AUC after training: 0.5271188343954408
User 109686 does not improve AUC. Reverting changes.
Training on augumented user 2183 48/50 current_auc = 0.5277645209286657
User 2183 AUC after training: 0.5277925942561972
User 2183 improves AUC. Keeping the model.
Training on augumented user 137938 49/50 current_auc = 0.5277925942561972
User 137938 AUC after training: 0.5274978243171162
User 137938 does not improve AUC. Reverting changes.
[2024-12-02 18:29:08.034834] start test user 111660 96/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:29:08.467992] start test user 111660 96/567 recall augumented users by random, augumented_users = [91794, 106449, 64606, 18849, 25254, 20944, 127479, 15173, 95968, 3183, 8414, 125311, 116020, 92940, 25957, 35642, 59290, 45030, 13536, 128409, 75642, 16981, 133885, 73007, 56079, 24628, 16323, 8940, 74581, 85049, 67430, 24171, 45133, 97788, 115787, 96826, 124432, 43985, 12562, 10608, 136011, 12805, 71005, 113065, 43679, 20095, 17990, 91040, 97161, 64457]
[2024-12-02 18:29:08.482753] user = 111660 Cloud 96/567
[2024-12-02 18:29:08.492320] user = 111660 Local 96/567
[2024-12-02 18:29:08.544113] user = 111660 Local+ 96/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:29:11.093773] user = 111660 MPDA- 96/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5833333333333333
Training on augumented user 91794 0/50 current_auc = 0.5833333333333333
User 91794 AUC after training: 0.5833333333333333
User 91794 does not improve AUC. Reverting changes.
Training on augumented user 106449 1/50 current_auc = 0.5833333333333333
User 106449 AUC after training: 0.5833333333333333
User 106449 does not improve AUC. Reverting changes.
Training on augumented user 64606 2/50 current_auc = 0.5833333333333333
User 64606 AUC after training: 0.5833333333333333
User 64606 does not improve AUC. Reverting changes.
Training on augumented user 18849 3/50 current_auc = 0.5833333333333333
User 18849 AUC after training: 0.5833333333333333
User 18849 does not improve AUC. Reverting changes.
Training on augumented user 25254 4/50 current_auc = 0.5833333333333333
User 25254 AUC after training: 0.5833333333333333
User 25254 does not improve AUC. Reverting changes.
Training on augumented user 20944 5/50 current_auc = 0.5833333333333333
User 20944 AUC after training: 0.5833333333333333
User 20944 does not improve AUC. Reverting changes.
Training on augumented user 127479 6/50 current_auc = 0.5833333333333333
User 127479 AUC after training: 0.5833333333333333
User 127479 does not improve AUC. Reverting changes.
Training on augumented user 15173 7/50 current_auc = 0.5833333333333333
User 15173 AUC after training: 0.5833333333333333
User 15173 does not improve AUC. Reverting changes.
Training on augumented user 95968 8/50 current_auc = 0.5833333333333333
User 95968 AUC after training: 0.5833333333333333
User 95968 does not improve AUC. Reverting changes.
Training on augumented user 3183 9/50 current_auc = 0.5833333333333333
User 3183 AUC after training: 0.5833333333333333
User 3183 does not improve AUC. Reverting changes.
Training on augumented user 8414 10/50 current_auc = 0.5833333333333333
User 8414 AUC after training: 0.5833333333333333
User 8414 does not improve AUC. Reverting changes.
Training on augumented user 125311 11/50 current_auc = 0.5833333333333333
User 125311 AUC after training: 0.5833333333333333
User 125311 does not improve AUC. Reverting changes.
Training on augumented user 116020 12/50 current_auc = 0.5833333333333333
User 116020 AUC after training: 0.5833333333333333
User 116020 does not improve AUC. Reverting changes.
Training on augumented user 92940 13/50 current_auc = 0.5833333333333333
User 92940 AUC after training: 0.5833333333333333
User 92940 does not improve AUC. Reverting changes.
Training on augumented user 25957 14/50 current_auc = 0.5833333333333333
User 25957 AUC after training: 0.5833333333333333
User 25957 does not improve AUC. Reverting changes.
Training on augumented user 35642 15/50 current_auc = 0.5833333333333333
User 35642 AUC after training: 0.5833333333333333
User 35642 does not improve AUC. Reverting changes.
Training on augumented user 59290 16/50 current_auc = 0.5833333333333333
User 59290 AUC after training: 0.5833333333333333
User 59290 does not improve AUC. Reverting changes.
Training on augumented user 45030 17/50 current_auc = 0.5833333333333333
User 45030 AUC after training: 0.5833333333333333
User 45030 does not improve AUC. Reverting changes.
Training on augumented user 13536 18/50 current_auc = 0.5833333333333333
User 13536 AUC after training: 0.5833333333333333
User 13536 does not improve AUC. Reverting changes.
Training on augumented user 128409 19/50 current_auc = 0.5833333333333333
User 128409 AUC after training: 0.5833333333333333
User 128409 does not improve AUC. Reverting changes.
Training on augumented user 75642 20/50 current_auc = 0.5833333333333333
User 75642 AUC after training: 0.5555555555555556
User 75642 does not improve AUC. Reverting changes.
Training on augumented user 16981 21/50 current_auc = 0.5833333333333333
User 16981 AUC after training: 0.5833333333333333
User 16981 does not improve AUC. Reverting changes.
Training on augumented user 133885 22/50 current_auc = 0.5833333333333333
User 133885 AUC after training: 0.5833333333333333
User 133885 does not improve AUC. Reverting changes.
Training on augumented user 73007 23/50 current_auc = 0.5833333333333333
User 73007 AUC after training: 0.5833333333333333
User 73007 does not improve AUC. Reverting changes.
Training on augumented user 56079 24/50 current_auc = 0.5833333333333333
User 56079 AUC after training: 0.5833333333333333
User 56079 does not improve AUC. Reverting changes.
Training on augumented user 24628 25/50 current_auc = 0.5833333333333333
User 24628 AUC after training: 0.5833333333333333
User 24628 does not improve AUC. Reverting changes.
Training on augumented user 16323 26/50 current_auc = 0.5833333333333333
User 16323 AUC after training: 0.5833333333333333
User 16323 does not improve AUC. Reverting changes.
Training on augumented user 8940 27/50 current_auc = 0.5833333333333333
User 8940 AUC after training: 0.5833333333333333
User 8940 does not improve AUC. Reverting changes.
Training on augumented user 74581 28/50 current_auc = 0.5833333333333333
User 74581 AUC after training: 0.5833333333333333
User 74581 does not improve AUC. Reverting changes.
Training on augumented user 85049 29/50 current_auc = 0.5833333333333333
User 85049 AUC after training: 0.5833333333333333
User 85049 does not improve AUC. Reverting changes.
Training on augumented user 67430 30/50 current_auc = 0.5833333333333333
User 67430 AUC after training: 0.5833333333333333
User 67430 does not improve AUC. Reverting changes.
Training on augumented user 24171 31/50 current_auc = 0.5833333333333333
User 24171 AUC after training: 0.5833333333333333
User 24171 does not improve AUC. Reverting changes.
Training on augumented user 45133 32/50 current_auc = 0.5833333333333333
User 45133 AUC after training: 0.5833333333333333
User 45133 does not improve AUC. Reverting changes.
Training on augumented user 97788 33/50 current_auc = 0.5833333333333333
User 97788 AUC after training: 0.5833333333333333
User 97788 does not improve AUC. Reverting changes.
Training on augumented user 115787 34/50 current_auc = 0.5833333333333333
User 115787 AUC after training: 0.5833333333333333
User 115787 does not improve AUC. Reverting changes.
Training on augumented user 96826 35/50 current_auc = 0.5833333333333333
User 96826 AUC after training: 0.5833333333333333
User 96826 does not improve AUC. Reverting changes.
Training on augumented user 124432 36/50 current_auc = 0.5833333333333333
User 124432 AUC after training: 0.5833333333333333
User 124432 does not improve AUC. Reverting changes.
Training on augumented user 43985 37/50 current_auc = 0.5833333333333333
User 43985 AUC after training: 0.5833333333333333
User 43985 does not improve AUC. Reverting changes.
Training on augumented user 12562 38/50 current_auc = 0.5833333333333333
User 12562 AUC after training: 0.5833333333333333
User 12562 does not improve AUC. Reverting changes.
Training on augumented user 10608 39/50 current_auc = 0.5833333333333333
User 10608 AUC after training: 0.5833333333333333
User 10608 does not improve AUC. Reverting changes.
Training on augumented user 136011 40/50 current_auc = 0.5833333333333333
User 136011 AUC after training: 0.5833333333333333
User 136011 does not improve AUC. Reverting changes.
Training on augumented user 12805 41/50 current_auc = 0.5833333333333333
User 12805 AUC after training: 0.5833333333333333
User 12805 does not improve AUC. Reverting changes.
Training on augumented user 71005 42/50 current_auc = 0.5833333333333333
User 71005 AUC after training: 0.5555555555555556
User 71005 does not improve AUC. Reverting changes.
Training on augumented user 113065 43/50 current_auc = 0.5833333333333333
User 113065 AUC after training: 0.5833333333333333
User 113065 does not improve AUC. Reverting changes.
Training on augumented user 43679 44/50 current_auc = 0.5833333333333333
User 43679 AUC after training: 0.5833333333333333
User 43679 does not improve AUC. Reverting changes.
Training on augumented user 20095 45/50 current_auc = 0.5833333333333333
User 20095 AUC after training: 0.5833333333333333
User 20095 does not improve AUC. Reverting changes.
Training on augumented user 17990 46/50 current_auc = 0.5833333333333333
User 17990 AUC after training: 0.5833333333333333
User 17990 does not improve AUC. Reverting changes.
Training on augumented user 91040 47/50 current_auc = 0.5833333333333333
User 91040 AUC after training: 0.5833333333333333
User 91040 does not improve AUC. Reverting changes.
Training on augumented user 97161 48/50 current_auc = 0.5833333333333333
User 97161 AUC after training: 0.5833333333333333
User 97161 does not improve AUC. Reverting changes.
Training on augumented user 64457 49/50 current_auc = 0.5833333333333333
User 64457 AUC after training: 0.5833333333333333
User 64457 does not improve AUC. Reverting changes.
[2024-12-02 18:29:41.978277] start test user 111671 97/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:29:42.448744] start test user 111671 97/567 recall augumented users by random, augumented_users = [13414, 14427, 127448, 33663, 89527, 126724, 102170, 83094, 8035, 128579, 97201, 65502, 112485, 86408, 94421, 83927, 42535, 44098, 9718, 129578, 105048, 59196, 75004, 23172, 94292, 130371, 16475, 11365, 19442, 100469, 10335, 97638, 11080, 102415, 50609, 66208, 137176, 138363, 39474, 79891, 116545, 131997, 110299, 6989, 88800, 48245, 298, 109975, 107630, 43106]
[2024-12-02 18:29:42.464608] user = 111671 Cloud 97/567
[2024-12-02 18:29:42.486032] user = 111671 Local 97/567
[2024-12-02 18:29:42.555509] user = 111671 Local+ 97/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:29:44.939379] user = 111671 MPDA- 97/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7143847967818006
Training on augumented user 13414 0/50 current_auc = 0.7143847967818006
User 13414 AUC after training: 0.7143847967818006
User 13414 does not improve AUC. Reverting changes.
Training on augumented user 14427 1/50 current_auc = 0.7143847967818006
User 14427 AUC after training: 0.7154945207379664
User 14427 improves AUC. Keeping the model.
Training on augumented user 127448 2/50 current_auc = 0.7154945207379664
User 127448 AUC after training: 0.714662227770842
User 127448 does not improve AUC. Reverting changes.
Training on augumented user 33663 3/50 current_auc = 0.7154945207379664
User 33663 AUC after training: 0.7156332362324872
User 33663 improves AUC. Keeping the model.
Training on augumented user 89527 4/50 current_auc = 0.7156332362324872
User 89527 AUC after training: 0.7150783742544042
User 89527 does not improve AUC. Reverting changes.
Training on augumented user 126724 5/50 current_auc = 0.7156332362324872
User 126724 AUC after training: 0.7159106672215286
User 126724 improves AUC. Keeping the model.
Training on augumented user 102170 6/50 current_auc = 0.7159106672215286
User 102170 AUC after training: 0.7156332362324872
User 102170 does not improve AUC. Reverting changes.
Training on augumented user 83094 7/50 current_auc = 0.7159106672215286
User 83094 AUC after training: 0.7150783742544042
User 83094 does not improve AUC. Reverting changes.
Training on augumented user 8035 8/50 current_auc = 0.7159106672215286
User 8035 AUC after training: 0.7149396587598834
User 8035 does not improve AUC. Reverting changes.
Training on augumented user 128579 9/50 current_auc = 0.7159106672215286
User 128579 AUC after training: 0.7154945207379664
User 128579 does not improve AUC. Reverting changes.
Training on augumented user 97201 10/50 current_auc = 0.7159106672215286
User 97201 AUC after training: 0.7149396587598835
User 97201 does not improve AUC. Reverting changes.
Training on augumented user 65502 11/50 current_auc = 0.7159106672215286
User 65502 AUC after training: 0.7157719517270078
User 65502 does not improve AUC. Reverting changes.
Training on augumented user 112485 12/50 current_auc = 0.7159106672215286
User 112485 AUC after training: 0.7154945207379665
User 112485 does not improve AUC. Reverting changes.
Training on augumented user 86408 13/50 current_auc = 0.7159106672215286
User 86408 AUC after training: 0.7150783742544043
User 86408 does not improve AUC. Reverting changes.
Training on augumented user 94421 14/50 current_auc = 0.7159106672215286
User 94421 AUC after training: 0.7159106672215286
User 94421 does not improve AUC. Reverting changes.
Training on augumented user 83927 15/50 current_auc = 0.7159106672215286
User 83927 AUC after training: 0.7154945207379665
User 83927 does not improve AUC. Reverting changes.
Training on augumented user 42535 16/50 current_auc = 0.7159106672215286
User 42535 AUC after training: 0.7150783742544042
User 42535 does not improve AUC. Reverting changes.
Training on augumented user 44098 17/50 current_auc = 0.7159106672215286
User 44098 AUC after training: 0.7156332362324871
User 44098 does not improve AUC. Reverting changes.
Training on augumented user 9718 18/50 current_auc = 0.7159106672215286
User 9718 AUC after training: 0.7146622277708421
User 9718 does not improve AUC. Reverting changes.
Training on augumented user 129578 19/50 current_auc = 0.7159106672215286
User 129578 AUC after training: 0.7156332362324873
User 129578 does not improve AUC. Reverting changes.
Training on augumented user 105048 20/50 current_auc = 0.7159106672215286
User 105048 AUC after training: 0.7153558052434458
User 105048 does not improve AUC. Reverting changes.
Training on augumented user 59196 21/50 current_auc = 0.7159106672215286
User 59196 AUC after training: 0.7159106672215285
User 59196 does not improve AUC. Reverting changes.
Training on augumented user 75004 22/50 current_auc = 0.7159106672215286
User 75004 AUC after training: 0.7159106672215287
User 75004 improves AUC. Keeping the model.
Training on augumented user 23172 23/50 current_auc = 0.7159106672215287
User 23172 AUC after training: 0.7150783742544042
User 23172 does not improve AUC. Reverting changes.
Training on augumented user 94292 24/50 current_auc = 0.7159106672215287
User 94292 AUC after training: 0.7161880982105702
User 94292 improves AUC. Keeping the model.
Training on augumented user 130371 25/50 current_auc = 0.7161880982105702
User 130371 AUC after training: 0.7154945207379664
User 130371 does not improve AUC. Reverting changes.
Training on augumented user 16475 26/50 current_auc = 0.7161880982105702
User 16475 AUC after training: 0.7160493827160492
User 16475 does not improve AUC. Reverting changes.
Training on augumented user 11365 27/50 current_auc = 0.7161880982105702
User 11365 AUC after training: 0.7159106672215286
User 11365 does not improve AUC. Reverting changes.
Training on augumented user 19442 28/50 current_auc = 0.7161880982105702
User 19442 AUC after training: 0.7157719517270078
User 19442 does not improve AUC. Reverting changes.
Training on augumented user 100469 29/50 current_auc = 0.7161880982105702
User 100469 AUC after training: 0.715217089748925
User 100469 does not improve AUC. Reverting changes.
Training on augumented user 10335 30/50 current_auc = 0.7161880982105702
User 10335 AUC after training: 0.7159106672215286
User 10335 does not improve AUC. Reverting changes.
Training on augumented user 97638 31/50 current_auc = 0.7161880982105702
User 97638 AUC after training: 0.7163268137050909
User 97638 improves AUC. Keeping the model.
Training on augumented user 11080 32/50 current_auc = 0.7163268137050909
User 11080 AUC after training: 0.7160493827160492
User 11080 does not improve AUC. Reverting changes.
Training on augumented user 102415 33/50 current_auc = 0.7163268137050909
User 102415 AUC after training: 0.7157719517270079
User 102415 does not improve AUC. Reverting changes.
Training on augumented user 50609 34/50 current_auc = 0.7163268137050909
User 50609 AUC after training: 0.7160493827160493
User 50609 does not improve AUC. Reverting changes.
Training on augumented user 66208 35/50 current_auc = 0.7163268137050909
User 66208 AUC after training: 0.7153558052434457
User 66208 does not improve AUC. Reverting changes.
Training on augumented user 137176 36/50 current_auc = 0.7163268137050909
User 137176 AUC after training: 0.7156332362324871
User 137176 does not improve AUC. Reverting changes.
Training on augumented user 138363 37/50 current_auc = 0.7163268137050909
User 138363 AUC after training: 0.7159106672215286
User 138363 does not improve AUC. Reverting changes.
Training on augumented user 39474 38/50 current_auc = 0.7163268137050909
User 39474 AUC after training: 0.716326813705091
User 39474 improves AUC. Keeping the model.
Training on augumented user 79891 39/50 current_auc = 0.716326813705091
User 79891 AUC after training: 0.7163268137050909
User 79891 does not improve AUC. Reverting changes.
Training on augumented user 116545 40/50 current_auc = 0.716326813705091
User 116545 AUC after training: 0.7159106672215286
User 116545 does not improve AUC. Reverting changes.
Training on augumented user 131997 41/50 current_auc = 0.716326813705091
User 131997 AUC after training: 0.7163268137050909
User 131997 does not improve AUC. Reverting changes.
Training on augumented user 110299 42/50 current_auc = 0.716326813705091
User 110299 AUC after training: 0.7156332362324872
User 110299 does not improve AUC. Reverting changes.
Training on augumented user 6989 43/50 current_auc = 0.716326813705091
User 6989 AUC after training: 0.7153558052434457
User 6989 does not improve AUC. Reverting changes.
Training on augumented user 88800 44/50 current_auc = 0.716326813705091
User 88800 AUC after training: 0.7160493827160495
User 88800 does not improve AUC. Reverting changes.
Training on augumented user 48245 45/50 current_auc = 0.716326813705091
User 48245 AUC after training: 0.7156332362324871
User 48245 does not improve AUC. Reverting changes.
Training on augumented user 298 46/50 current_auc = 0.716326813705091
User 298 AUC after training: 0.714662227770842
User 298 does not improve AUC. Reverting changes.
Training on augumented user 109975 47/50 current_auc = 0.716326813705091
User 109975 AUC after training: 0.7166042446941323
User 109975 improves AUC. Keeping the model.
Training on augumented user 107630 48/50 current_auc = 0.7166042446941323
User 107630 AUC after training: 0.7161880982105702
User 107630 does not improve AUC. Reverting changes.
Training on augumented user 43106 49/50 current_auc = 0.7166042446941323
User 43106 AUC after training: 0.7159106672215285
User 43106 does not improve AUC. Reverting changes.
[2024-12-02 18:30:18.406595] start test user 111727 98/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:30:18.870497] start test user 111727 98/567 recall augumented users by random, augumented_users = [118630, 91674, 95378, 47611, 75568, 110044, 31770, 34481, 42902, 47090, 130411, 49901, 69141, 67004, 98662, 73208, 112530, 135194, 7975, 28853, 51731, 105074, 94227, 67731, 44560, 84144, 7217, 85133, 39210, 138091, 48936, 9788, 99644, 92808, 73107, 41443, 30698, 52158, 104908, 99570, 43995, 38157, 123315, 5686, 121249, 120987, 79147, 74586, 72380, 33716]
[2024-12-02 18:30:18.884209] user = 111727 Cloud 98/567
[2024-12-02 18:30:18.895156] user = 111727 Local 98/567
[2024-12-02 18:30:18.936536] user = 111727 Local+ 98/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:30:21.964487] user = 111727 MPDA- 98/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5555555555555555
Training on augumented user 118630 0/50 current_auc = 0.5555555555555555
User 118630 AUC after training: 0.5555555555555555
User 118630 does not improve AUC. Reverting changes.
Training on augumented user 91674 1/50 current_auc = 0.5555555555555555
User 91674 AUC after training: 0.5555555555555555
User 91674 does not improve AUC. Reverting changes.
Training on augumented user 95378 2/50 current_auc = 0.5555555555555555
User 95378 AUC after training: 0.5555555555555555
User 95378 does not improve AUC. Reverting changes.
Training on augumented user 47611 3/50 current_auc = 0.5555555555555555
User 47611 AUC after training: 0.5625
User 47611 improves AUC. Keeping the model.
Training on augumented user 75568 4/50 current_auc = 0.5625
User 75568 AUC after training: 0.5607638888888888
User 75568 does not improve AUC. Reverting changes.
Training on augumented user 110044 5/50 current_auc = 0.5625
User 110044 AUC after training: 0.5607638888888888
User 110044 does not improve AUC. Reverting changes.
Training on augumented user 31770 6/50 current_auc = 0.5625
User 31770 AUC after training: 0.5590277777777778
User 31770 does not improve AUC. Reverting changes.
Training on augumented user 34481 7/50 current_auc = 0.5625
User 34481 AUC after training: 0.5607638888888888
User 34481 does not improve AUC. Reverting changes.
Training on augumented user 42902 8/50 current_auc = 0.5625
User 42902 AUC after training: 0.5572916666666666
User 42902 does not improve AUC. Reverting changes.
Training on augumented user 47090 9/50 current_auc = 0.5625
User 47090 AUC after training: 0.5590277777777778
User 47090 does not improve AUC. Reverting changes.
Training on augumented user 130411 10/50 current_auc = 0.5625
User 130411 AUC after training: 0.5590277777777778
User 130411 does not improve AUC. Reverting changes.
Training on augumented user 49901 11/50 current_auc = 0.5625
User 49901 AUC after training: 0.5607638888888888
User 49901 does not improve AUC. Reverting changes.
Training on augumented user 69141 12/50 current_auc = 0.5625
User 69141 AUC after training: 0.5590277777777778
User 69141 does not improve AUC. Reverting changes.
Training on augumented user 67004 13/50 current_auc = 0.5625
User 67004 AUC after training: 0.5590277777777778
User 67004 does not improve AUC. Reverting changes.
Training on augumented user 98662 14/50 current_auc = 0.5625
User 98662 AUC after training: 0.5503472222222222
User 98662 does not improve AUC. Reverting changes.
Training on augumented user 73208 15/50 current_auc = 0.5625
User 73208 AUC after training: 0.5590277777777778
User 73208 does not improve AUC. Reverting changes.
Training on augumented user 112530 16/50 current_auc = 0.5625
User 112530 AUC after training: 0.5607638888888888
User 112530 does not improve AUC. Reverting changes.
Training on augumented user 135194 17/50 current_auc = 0.5625
User 135194 AUC after training: 0.5503472222222222
User 135194 does not improve AUC. Reverting changes.
Training on augumented user 7975 18/50 current_auc = 0.5625
User 7975 AUC after training: 0.5590277777777778
User 7975 does not improve AUC. Reverting changes.
Training on augumented user 28853 19/50 current_auc = 0.5625
User 28853 AUC after training: 0.5607638888888888
User 28853 does not improve AUC. Reverting changes.
Training on augumented user 51731 20/50 current_auc = 0.5625
User 51731 AUC after training: 0.5625
User 51731 does not improve AUC. Reverting changes.
Training on augumented user 105074 21/50 current_auc = 0.5625
User 105074 AUC after training: 0.5607638888888888
User 105074 does not improve AUC. Reverting changes.
Training on augumented user 94227 22/50 current_auc = 0.5625
User 94227 AUC after training: 0.5590277777777778
User 94227 does not improve AUC. Reverting changes.
Training on augumented user 67731 23/50 current_auc = 0.5625
User 67731 AUC after training: 0.5590277777777778
User 67731 does not improve AUC. Reverting changes.
Training on augumented user 44560 24/50 current_auc = 0.5625
User 44560 AUC after training: 0.5590277777777778
User 44560 does not improve AUC. Reverting changes.
Training on augumented user 84144 25/50 current_auc = 0.5625
User 84144 AUC after training: 0.5625
User 84144 does not improve AUC. Reverting changes.
Training on augumented user 7217 26/50 current_auc = 0.5625
User 7217 AUC after training: 0.5607638888888888
User 7217 does not improve AUC. Reverting changes.
Training on augumented user 85133 27/50 current_auc = 0.5625
User 85133 AUC after training: 0.5625
User 85133 does not improve AUC. Reverting changes.
Training on augumented user 39210 28/50 current_auc = 0.5625
User 39210 AUC after training: 0.5625
User 39210 does not improve AUC. Reverting changes.
Training on augumented user 138091 29/50 current_auc = 0.5625
User 138091 AUC after training: 0.5607638888888888
User 138091 does not improve AUC. Reverting changes.
Training on augumented user 48936 30/50 current_auc = 0.5625
User 48936 AUC after training: 0.5607638888888888
User 48936 does not improve AUC. Reverting changes.
Training on augumented user 9788 31/50 current_auc = 0.5625
User 9788 AUC after training: 0.5555555555555555
User 9788 does not improve AUC. Reverting changes.
Training on augumented user 99644 32/50 current_auc = 0.5625
User 99644 AUC after training: 0.5607638888888888
User 99644 does not improve AUC. Reverting changes.
Training on augumented user 92808 33/50 current_auc = 0.5625
User 92808 AUC after training: 0.5590277777777778
User 92808 does not improve AUC. Reverting changes.
Training on augumented user 73107 34/50 current_auc = 0.5625
User 73107 AUC after training: 0.5538194444444444
User 73107 does not improve AUC. Reverting changes.
Training on augumented user 41443 35/50 current_auc = 0.5625
User 41443 AUC after training: 0.5590277777777778
User 41443 does not improve AUC. Reverting changes.
Training on augumented user 30698 36/50 current_auc = 0.5625
User 30698 AUC after training: 0.5590277777777778
User 30698 does not improve AUC. Reverting changes.
Training on augumented user 52158 37/50 current_auc = 0.5625
User 52158 AUC after training: 0.5625
User 52158 does not improve AUC. Reverting changes.
Training on augumented user 104908 38/50 current_auc = 0.5625
User 104908 AUC after training: 0.5607638888888888
User 104908 does not improve AUC. Reverting changes.
Training on augumented user 99570 39/50 current_auc = 0.5625
User 99570 AUC after training: 0.5572916666666666
User 99570 does not improve AUC. Reverting changes.
Training on augumented user 43995 40/50 current_auc = 0.5625
User 43995 AUC after training: 0.5607638888888888
User 43995 does not improve AUC. Reverting changes.
Training on augumented user 38157 41/50 current_auc = 0.5625
User 38157 AUC after training: 0.5572916666666666
User 38157 does not improve AUC. Reverting changes.
Training on augumented user 123315 42/50 current_auc = 0.5625
User 123315 AUC after training: 0.5555555555555555
User 123315 does not improve AUC. Reverting changes.
Training on augumented user 5686 43/50 current_auc = 0.5625
User 5686 AUC after training: 0.5590277777777778
User 5686 does not improve AUC. Reverting changes.
Training on augumented user 121249 44/50 current_auc = 0.5625
User 121249 AUC after training: 0.5590277777777778
User 121249 does not improve AUC. Reverting changes.
Training on augumented user 120987 45/50 current_auc = 0.5625
User 120987 AUC after training: 0.5607638888888888
User 120987 does not improve AUC. Reverting changes.
Training on augumented user 79147 46/50 current_auc = 0.5625
User 79147 AUC after training: 0.5590277777777778
User 79147 does not improve AUC. Reverting changes.
Training on augumented user 74586 47/50 current_auc = 0.5625
User 74586 AUC after training: 0.5607638888888888
User 74586 does not improve AUC. Reverting changes.
Training on augumented user 72380 48/50 current_auc = 0.5625
User 72380 AUC after training: 0.5625
User 72380 does not improve AUC. Reverting changes.
Training on augumented user 33716 49/50 current_auc = 0.5625
User 33716 AUC after training: 0.5607638888888888
User 33716 does not improve AUC. Reverting changes.
[2024-12-02 18:30:52.826478] start test user 111758 99/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:30:53.289722] start test user 111758 99/567 recall augumented users by random, augumented_users = [1310, 117667, 65870, 114500, 18652, 87078, 111517, 114057, 89080, 66547, 53325, 33220, 108311, 13805, 4240, 53412, 29964, 16634, 111867, 115841, 56679, 7326, 35940, 31091, 72221, 37418, 119489, 69540, 89919, 110561, 9025, 108057, 103751, 82883, 45950, 1793, 43910, 46848, 47000, 43023, 52374, 23495, 57872, 107484, 35991, 58344, 108219, 97463, 15203, 43024]
[2024-12-02 18:30:53.304270] user = 111758 Cloud 99/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:30:53.311592] user = 111758 Local 99/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:30:53.362370] user = 111758 Local+ 99/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:30:56.621680] user = 111758 MPDA- 99/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 1310 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1310 AUC after training: 0.5
User 1310 does not improve AUC. Reverting changes.
Training on augumented user 117667 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117667 AUC after training: 0.5
User 117667 does not improve AUC. Reverting changes.
Training on augumented user 65870 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 65870 AUC after training: 0.5
User 65870 does not improve AUC. Reverting changes.
Training on augumented user 114500 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114500 AUC after training: 0.5
User 114500 does not improve AUC. Reverting changes.
Training on augumented user 18652 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18652 AUC after training: 0.5
User 18652 does not improve AUC. Reverting changes.
Training on augumented user 87078 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87078 AUC after training: 0.5
User 87078 does not improve AUC. Reverting changes.
Training on augumented user 111517 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111517 AUC after training: 0.5
User 111517 does not improve AUC. Reverting changes.
Training on augumented user 114057 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114057 AUC after training: 0.5
User 114057 does not improve AUC. Reverting changes.
Training on augumented user 89080 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89080 AUC after training: 0.5
User 89080 does not improve AUC. Reverting changes.
Training on augumented user 66547 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66547 AUC after training: 0.5
User 66547 does not improve AUC. Reverting changes.
Training on augumented user 53325 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53325 AUC after training: 0.5
User 53325 does not improve AUC. Reverting changes.
Training on augumented user 33220 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33220 AUC after training: 0.5
User 33220 does not improve AUC. Reverting changes.
Training on augumented user 108311 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108311 AUC after training: 0.5
User 108311 does not improve AUC. Reverting changes.
Training on augumented user 13805 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13805 AUC after training: 0.5
User 13805 does not improve AUC. Reverting changes.
Training on augumented user 4240 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4240 AUC after training: 0.5
User 4240 does not improve AUC. Reverting changes.
Training on augumented user 53412 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53412 AUC after training: 0.5
User 53412 does not improve AUC. Reverting changes.
Training on augumented user 29964 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29964 AUC after training: 0.5
User 29964 does not improve AUC. Reverting changes.
Training on augumented user 16634 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16634 AUC after training: 0.5
User 16634 does not improve AUC. Reverting changes.
Training on augumented user 111867 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111867 AUC after training: 0.5
User 111867 does not improve AUC. Reverting changes.
Training on augumented user 115841 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115841 AUC after training: 0.5
User 115841 does not improve AUC. Reverting changes.
Training on augumented user 56679 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56679 AUC after training: 0.5
User 56679 does not improve AUC. Reverting changes.
Training on augumented user 7326 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7326 AUC after training: 0.5
User 7326 does not improve AUC. Reverting changes.
Training on augumented user 35940 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35940 AUC after training: 0.5
User 35940 does not improve AUC. Reverting changes.
Training on augumented user 31091 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 31091 AUC after training: 0.5
User 31091 does not improve AUC. Reverting changes.
Training on augumented user 72221 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72221 AUC after training: 0.5
User 72221 does not improve AUC. Reverting changes.
Training on augumented user 37418 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37418 AUC after training: 0.5
User 37418 does not improve AUC. Reverting changes.
Training on augumented user 119489 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 119489 AUC after training: 0.5
User 119489 does not improve AUC. Reverting changes.
Training on augumented user 69540 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 69540 AUC after training: 0.5
User 69540 does not improve AUC. Reverting changes.
Training on augumented user 89919 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89919 AUC after training: 0.5
User 89919 does not improve AUC. Reverting changes.
Training on augumented user 110561 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110561 AUC after training: 0.5
User 110561 does not improve AUC. Reverting changes.
Training on augumented user 9025 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9025 AUC after training: 0.5
User 9025 does not improve AUC. Reverting changes.
Training on augumented user 108057 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108057 AUC after training: 0.5
User 108057 does not improve AUC. Reverting changes.
Training on augumented user 103751 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103751 AUC after training: 0.5
User 103751 does not improve AUC. Reverting changes.
Training on augumented user 82883 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82883 AUC after training: 0.5
User 82883 does not improve AUC. Reverting changes.
Training on augumented user 45950 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45950 AUC after training: 0.5
User 45950 does not improve AUC. Reverting changes.
Training on augumented user 1793 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1793 AUC after training: 0.5
User 1793 does not improve AUC. Reverting changes.
Training on augumented user 43910 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43910 AUC after training: 0.5
User 43910 does not improve AUC. Reverting changes.
Training on augumented user 46848 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 46848 AUC after training: 0.5
User 46848 does not improve AUC. Reverting changes.
Training on augumented user 47000 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47000 AUC after training: 0.5
User 47000 does not improve AUC. Reverting changes.
Training on augumented user 43023 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43023 AUC after training: 0.5
User 43023 does not improve AUC. Reverting changes.
Training on augumented user 52374 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 52374 AUC after training: 0.5
User 52374 does not improve AUC. Reverting changes.
Training on augumented user 23495 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23495 AUC after training: 0.5
User 23495 does not improve AUC. Reverting changes.
Training on augumented user 57872 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57872 AUC after training: 0.5
User 57872 does not improve AUC. Reverting changes.
Training on augumented user 107484 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107484 AUC after training: 0.5
User 107484 does not improve AUC. Reverting changes.
Training on augumented user 35991 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35991 AUC after training: 0.5
User 35991 does not improve AUC. Reverting changes.
Training on augumented user 58344 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58344 AUC after training: 0.5
User 58344 does not improve AUC. Reverting changes.
Training on augumented user 108219 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108219 AUC after training: 0.5
User 108219 does not improve AUC. Reverting changes.
Training on augumented user 97463 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97463 AUC after training: 0.5
User 97463 does not improve AUC. Reverting changes.
Training on augumented user 15203 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15203 AUC after training: 0.5
User 15203 does not improve AUC. Reverting changes.
Training on augumented user 43024 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43024 AUC after training: 0.5
User 43024 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:31:26.723498] start test user 111773 100/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:31:27.545867] start test user 111773 100/567 recall augumented users by random, augumented_users = [124617, 130830, 83817, 41294, 133117, 102526, 100029, 3842, 105128, 17988, 7970, 46509, 14762, 132336, 55105, 69758, 65969, 5615, 138095, 101010, 44623, 40312, 64602, 16875, 44545, 66479, 9423, 6395, 19705, 103210, 84490, 27107, 59492, 36486, 69576, 50092, 79547, 82476, 6992, 77970, 113032, 86417, 117945, 70182, 93869, 87400, 13907, 102385, 45782, 136107]
[2024-12-02 18:31:27.591053] user = 111773 Cloud 100/567
[2024-12-02 18:31:27.622208] user = 111773 Local 100/567
[2024-12-02 18:31:27.672869] user = 111773 Local+ 100/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:31:29.696327] user = 111773 MPDA- 100/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 1.0
Training on augumented user 124617 0/50 current_auc = 1.0
User 124617 AUC after training: 1.0
User 124617 does not improve AUC. Reverting changes.
Training on augumented user 130830 1/50 current_auc = 1.0
User 130830 AUC after training: 1.0
User 130830 does not improve AUC. Reverting changes.
Training on augumented user 83817 2/50 current_auc = 1.0
User 83817 AUC after training: 1.0
User 83817 does not improve AUC. Reverting changes.
Training on augumented user 41294 3/50 current_auc = 1.0
User 41294 AUC after training: 1.0
User 41294 does not improve AUC. Reverting changes.
Training on augumented user 133117 4/50 current_auc = 1.0
User 133117 AUC after training: 1.0
User 133117 does not improve AUC. Reverting changes.
Training on augumented user 102526 5/50 current_auc = 1.0
User 102526 AUC after training: 1.0
User 102526 does not improve AUC. Reverting changes.
Training on augumented user 100029 6/50 current_auc = 1.0
User 100029 AUC after training: 1.0
User 100029 does not improve AUC. Reverting changes.
Training on augumented user 3842 7/50 current_auc = 1.0
User 3842 AUC after training: 1.0
User 3842 does not improve AUC. Reverting changes.
Training on augumented user 105128 8/50 current_auc = 1.0
User 105128 AUC after training: 1.0
User 105128 does not improve AUC. Reverting changes.
Training on augumented user 17988 9/50 current_auc = 1.0
User 17988 AUC after training: 1.0
User 17988 does not improve AUC. Reverting changes.
Training on augumented user 7970 10/50 current_auc = 1.0
User 7970 AUC after training: 1.0
User 7970 does not improve AUC. Reverting changes.
Training on augumented user 46509 11/50 current_auc = 1.0
User 46509 AUC after training: 1.0
User 46509 does not improve AUC. Reverting changes.
Training on augumented user 14762 12/50 current_auc = 1.0
User 14762 AUC after training: 1.0
User 14762 does not improve AUC. Reverting changes.
Training on augumented user 132336 13/50 current_auc = 1.0
User 132336 AUC after training: 1.0
User 132336 does not improve AUC. Reverting changes.
Training on augumented user 55105 14/50 current_auc = 1.0
User 55105 AUC after training: 1.0
User 55105 does not improve AUC. Reverting changes.
Training on augumented user 69758 15/50 current_auc = 1.0
User 69758 AUC after training: 1.0
User 69758 does not improve AUC. Reverting changes.
Training on augumented user 65969 16/50 current_auc = 1.0
User 65969 AUC after training: 1.0
User 65969 does not improve AUC. Reverting changes.
Training on augumented user 5615 17/50 current_auc = 1.0
User 5615 AUC after training: 1.0
User 5615 does not improve AUC. Reverting changes.
Training on augumented user 138095 18/50 current_auc = 1.0
User 138095 AUC after training: 1.0
User 138095 does not improve AUC. Reverting changes.
Training on augumented user 101010 19/50 current_auc = 1.0
User 101010 AUC after training: 1.0
User 101010 does not improve AUC. Reverting changes.
Training on augumented user 44623 20/50 current_auc = 1.0
User 44623 AUC after training: 1.0
User 44623 does not improve AUC. Reverting changes.
Training on augumented user 40312 21/50 current_auc = 1.0
User 40312 AUC after training: 1.0
User 40312 does not improve AUC. Reverting changes.
Training on augumented user 64602 22/50 current_auc = 1.0
User 64602 AUC after training: 1.0
User 64602 does not improve AUC. Reverting changes.
Training on augumented user 16875 23/50 current_auc = 1.0
User 16875 AUC after training: 1.0
User 16875 does not improve AUC. Reverting changes.
Training on augumented user 44545 24/50 current_auc = 1.0
User 44545 AUC after training: 1.0
User 44545 does not improve AUC. Reverting changes.
Training on augumented user 66479 25/50 current_auc = 1.0
User 66479 AUC after training: 1.0
User 66479 does not improve AUC. Reverting changes.
Training on augumented user 9423 26/50 current_auc = 1.0
User 9423 AUC after training: 1.0
User 9423 does not improve AUC. Reverting changes.
Training on augumented user 6395 27/50 current_auc = 1.0
User 6395 AUC after training: 1.0
User 6395 does not improve AUC. Reverting changes.
Training on augumented user 19705 28/50 current_auc = 1.0
User 19705 AUC after training: 1.0
User 19705 does not improve AUC. Reverting changes.
Training on augumented user 103210 29/50 current_auc = 1.0
User 103210 AUC after training: 1.0
User 103210 does not improve AUC. Reverting changes.
Training on augumented user 84490 30/50 current_auc = 1.0
User 84490 AUC after training: 1.0
User 84490 does not improve AUC. Reverting changes.
Training on augumented user 27107 31/50 current_auc = 1.0
User 27107 AUC after training: 1.0
User 27107 does not improve AUC. Reverting changes.
Training on augumented user 59492 32/50 current_auc = 1.0
User 59492 AUC after training: 1.0
User 59492 does not improve AUC. Reverting changes.
Training on augumented user 36486 33/50 current_auc = 1.0
User 36486 AUC after training: 1.0
User 36486 does not improve AUC. Reverting changes.
Training on augumented user 69576 34/50 current_auc = 1.0
User 69576 AUC after training: 1.0
User 69576 does not improve AUC. Reverting changes.
Training on augumented user 50092 35/50 current_auc = 1.0
User 50092 AUC after training: 1.0
User 50092 does not improve AUC. Reverting changes.
Training on augumented user 79547 36/50 current_auc = 1.0
User 79547 AUC after training: 1.0
User 79547 does not improve AUC. Reverting changes.
Training on augumented user 82476 37/50 current_auc = 1.0
User 82476 AUC after training: 1.0
User 82476 does not improve AUC. Reverting changes.
Training on augumented user 6992 38/50 current_auc = 1.0
User 6992 AUC after training: 1.0
User 6992 does not improve AUC. Reverting changes.
Training on augumented user 77970 39/50 current_auc = 1.0
User 77970 AUC after training: 1.0
User 77970 does not improve AUC. Reverting changes.
Training on augumented user 113032 40/50 current_auc = 1.0
User 113032 AUC after training: 1.0
User 113032 does not improve AUC. Reverting changes.
Training on augumented user 86417 41/50 current_auc = 1.0
User 86417 AUC after training: 1.0
User 86417 does not improve AUC. Reverting changes.
Training on augumented user 117945 42/50 current_auc = 1.0
User 117945 AUC after training: 1.0
User 117945 does not improve AUC. Reverting changes.
Training on augumented user 70182 43/50 current_auc = 1.0
User 70182 AUC after training: 1.0
User 70182 does not improve AUC. Reverting changes.
Training on augumented user 93869 44/50 current_auc = 1.0
User 93869 AUC after training: 1.0
User 93869 does not improve AUC. Reverting changes.
Training on augumented user 87400 45/50 current_auc = 1.0
User 87400 AUC after training: 1.0
User 87400 does not improve AUC. Reverting changes.
Training on augumented user 13907 46/50 current_auc = 1.0
User 13907 AUC after training: 1.0
User 13907 does not improve AUC. Reverting changes.
Training on augumented user 102385 47/50 current_auc = 1.0
User 102385 AUC after training: 1.0
User 102385 does not improve AUC. Reverting changes.
Training on augumented user 45782 48/50 current_auc = 1.0
User 45782 AUC after training: 1.0
User 45782 does not improve AUC. Reverting changes.
Training on augumented user 136107 49/50 current_auc = 1.0
User 136107 AUC after training: 1.0
User 136107 does not improve AUC. Reverting changes.
[2024-12-02 18:31:57.750096] start test user 111783 101/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:31:58.410425] start test user 111783 101/567 recall augumented users by random, augumented_users = [41719, 71558, 29850, 63200, 88638, 131688, 67478, 89833, 115666, 55343, 87884, 75682, 128974, 114819, 119903, 32546, 34511, 72792, 123714, 107567, 4646, 32766, 2011, 7409, 120055, 133481, 44912, 16927, 7446, 88619, 89215, 81988, 111805, 54152, 85375, 127945, 30699, 86923, 74483, 118679, 23689, 4056, 125255, 113266, 110919, 72975, 111527, 118808, 4024, 115155]
[2024-12-02 18:31:58.425814] user = 111783 Cloud 101/567
[2024-12-02 18:31:58.439619] user = 111783 Local 101/567
[2024-12-02 18:31:58.503081] user = 111783 Local+ 101/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:32:01.076345] user = 111783 MPDA- 101/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 41719 0/50 current_auc = 0.5
User 41719 AUC after training: 0.5
User 41719 does not improve AUC. Reverting changes.
Training on augumented user 71558 1/50 current_auc = 0.5
User 71558 AUC after training: 0.5
User 71558 does not improve AUC. Reverting changes.
Training on augumented user 29850 2/50 current_auc = 0.5
User 29850 AUC after training: 0.5
User 29850 does not improve AUC. Reverting changes.
Training on augumented user 63200 3/50 current_auc = 0.5
User 63200 AUC after training: 0.5
User 63200 does not improve AUC. Reverting changes.
Training on augumented user 88638 4/50 current_auc = 0.5
User 88638 AUC after training: 0.5
User 88638 does not improve AUC. Reverting changes.
Training on augumented user 131688 5/50 current_auc = 0.5
User 131688 AUC after training: 0.5
User 131688 does not improve AUC. Reverting changes.
Training on augumented user 67478 6/50 current_auc = 0.5
User 67478 AUC after training: 0.5
User 67478 does not improve AUC. Reverting changes.
Training on augumented user 89833 7/50 current_auc = 0.5
User 89833 AUC after training: 0.5
User 89833 does not improve AUC. Reverting changes.
Training on augumented user 115666 8/50 current_auc = 0.5
User 115666 AUC after training: 0.5
User 115666 does not improve AUC. Reverting changes.
Training on augumented user 55343 9/50 current_auc = 0.5
User 55343 AUC after training: 0.5
User 55343 does not improve AUC. Reverting changes.
Training on augumented user 87884 10/50 current_auc = 0.5
User 87884 AUC after training: 0.5
User 87884 does not improve AUC. Reverting changes.
Training on augumented user 75682 11/50 current_auc = 0.5
User 75682 AUC after training: 0.5
User 75682 does not improve AUC. Reverting changes.
Training on augumented user 128974 12/50 current_auc = 0.5
User 128974 AUC after training: 0.5
User 128974 does not improve AUC. Reverting changes.
Training on augumented user 114819 13/50 current_auc = 0.5
User 114819 AUC after training: 0.5
User 114819 does not improve AUC. Reverting changes.
Training on augumented user 119903 14/50 current_auc = 0.5
User 119903 AUC after training: 0.5
User 119903 does not improve AUC. Reverting changes.
Training on augumented user 32546 15/50 current_auc = 0.5
User 32546 AUC after training: 0.5
User 32546 does not improve AUC. Reverting changes.
Training on augumented user 34511 16/50 current_auc = 0.5
User 34511 AUC after training: 0.5
User 34511 does not improve AUC. Reverting changes.
Training on augumented user 72792 17/50 current_auc = 0.5
User 72792 AUC after training: 0.5
User 72792 does not improve AUC. Reverting changes.
Training on augumented user 123714 18/50 current_auc = 0.5
User 123714 AUC after training: 0.5
User 123714 does not improve AUC. Reverting changes.
Training on augumented user 107567 19/50 current_auc = 0.5
User 107567 AUC after training: 0.5
User 107567 does not improve AUC. Reverting changes.
Training on augumented user 4646 20/50 current_auc = 0.5
User 4646 AUC after training: 0.5
User 4646 does not improve AUC. Reverting changes.
Training on augumented user 32766 21/50 current_auc = 0.5
User 32766 AUC after training: 0.5
User 32766 does not improve AUC. Reverting changes.
Training on augumented user 2011 22/50 current_auc = 0.5
User 2011 AUC after training: 0.5
User 2011 does not improve AUC. Reverting changes.
Training on augumented user 7409 23/50 current_auc = 0.5
User 7409 AUC after training: 0.5
User 7409 does not improve AUC. Reverting changes.
Training on augumented user 120055 24/50 current_auc = 0.5
User 120055 AUC after training: 0.5
User 120055 does not improve AUC. Reverting changes.
Training on augumented user 133481 25/50 current_auc = 0.5
User 133481 AUC after training: 0.5
User 133481 does not improve AUC. Reverting changes.
Training on augumented user 44912 26/50 current_auc = 0.5
User 44912 AUC after training: 0.5
User 44912 does not improve AUC. Reverting changes.
Training on augumented user 16927 27/50 current_auc = 0.5
User 16927 AUC after training: 0.5
User 16927 does not improve AUC. Reverting changes.
Training on augumented user 7446 28/50 current_auc = 0.5
User 7446 AUC after training: 0.5
User 7446 does not improve AUC. Reverting changes.
Training on augumented user 88619 29/50 current_auc = 0.5
User 88619 AUC after training: 0.5
User 88619 does not improve AUC. Reverting changes.
Training on augumented user 89215 30/50 current_auc = 0.5
User 89215 AUC after training: 0.5
User 89215 does not improve AUC. Reverting changes.
Training on augumented user 81988 31/50 current_auc = 0.5
User 81988 AUC after training: 0.5
User 81988 does not improve AUC. Reverting changes.
Training on augumented user 111805 32/50 current_auc = 0.5
User 111805 AUC after training: 0.5
User 111805 does not improve AUC. Reverting changes.
Training on augumented user 54152 33/50 current_auc = 0.5
User 54152 AUC after training: 0.5
User 54152 does not improve AUC. Reverting changes.
Training on augumented user 85375 34/50 current_auc = 0.5
User 85375 AUC after training: 0.5
User 85375 does not improve AUC. Reverting changes.
Training on augumented user 127945 35/50 current_auc = 0.5
User 127945 AUC after training: 0.5
User 127945 does not improve AUC. Reverting changes.
Training on augumented user 30699 36/50 current_auc = 0.5
User 30699 AUC after training: 0.5
User 30699 does not improve AUC. Reverting changes.
Training on augumented user 86923 37/50 current_auc = 0.5
User 86923 AUC after training: 0.5
User 86923 does not improve AUC. Reverting changes.
Training on augumented user 74483 38/50 current_auc = 0.5
User 74483 AUC after training: 0.5
User 74483 does not improve AUC. Reverting changes.
Training on augumented user 118679 39/50 current_auc = 0.5
User 118679 AUC after training: 0.5
User 118679 does not improve AUC. Reverting changes.
Training on augumented user 23689 40/50 current_auc = 0.5
User 23689 AUC after training: 0.5
User 23689 does not improve AUC. Reverting changes.
Training on augumented user 4056 41/50 current_auc = 0.5
User 4056 AUC after training: 0.5
User 4056 does not improve AUC. Reverting changes.
Training on augumented user 125255 42/50 current_auc = 0.5
User 125255 AUC after training: 0.5
User 125255 does not improve AUC. Reverting changes.
Training on augumented user 113266 43/50 current_auc = 0.5
User 113266 AUC after training: 0.5
User 113266 does not improve AUC. Reverting changes.
Training on augumented user 110919 44/50 current_auc = 0.5
User 110919 AUC after training: 0.5
User 110919 does not improve AUC. Reverting changes.
Training on augumented user 72975 45/50 current_auc = 0.5
User 72975 AUC after training: 0.5
User 72975 does not improve AUC. Reverting changes.
Training on augumented user 111527 46/50 current_auc = 0.5
User 111527 AUC after training: 0.5
User 111527 does not improve AUC. Reverting changes.
Training on augumented user 118808 47/50 current_auc = 0.5
User 118808 AUC after training: 0.5
User 118808 does not improve AUC. Reverting changes.
Training on augumented user 4024 48/50 current_auc = 0.5
User 4024 AUC after training: 0.5
User 4024 does not improve AUC. Reverting changes.
Training on augumented user 115155 49/50 current_auc = 0.5
User 115155 AUC after training: 0.5
User 115155 does not improve AUC. Reverting changes.
[2024-12-02 18:32:29.467652] start test user 111827 102/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:32:30.035689] start test user 111827 102/567 recall augumented users by random, augumented_users = [137508, 37978, 60109, 5031, 89670, 130965, 9457, 62690, 71483, 23950, 136647, 73872, 74090, 21374, 116723, 19577, 73038, 101225, 26377, 15772, 9655, 82367, 86179, 49345, 11399, 68440, 60667, 63600, 98149, 68134, 100761, 67055, 74589, 61998, 93264, 95006, 111809, 89380, 37981, 46352, 76268, 106441, 109347, 83651, 11601, 38897, 51099, 63758, 77785, 70021]
[2024-12-02 18:32:30.053759] user = 111827 Cloud 102/567
[2024-12-02 18:32:30.088286] user = 111827 Local 102/567
[2024-12-02 18:32:30.248861] user = 111827 Local+ 102/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:32:32.594626] user = 111827 MPDA- 102/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7498598053768761
Training on augumented user 137508 0/50 current_auc = 0.7498598053768761
User 137508 AUC after training: 0.7512122711528946
User 137508 improves AUC. Keeping the model.
Training on augumented user 37978 1/50 current_auc = 0.7512122711528946
User 37978 AUC after training: 0.7504865578096651
User 37978 does not improve AUC. Reverting changes.
Training on augumented user 60109 2/50 current_auc = 0.7512122711528946
User 60109 AUC after training: 0.7505525317499588
User 60109 does not improve AUC. Reverting changes.
Training on augumented user 5031 3/50 current_auc = 0.7512122711528946
User 5031 AUC after training: 0.7515421408543626
User 5031 improves AUC. Keeping the model.
Training on augumented user 89670 4/50 current_auc = 0.7515421408543626
User 89670 AUC after training: 0.7512782450931881
User 89670 does not improve AUC. Reverting changes.
Training on augumented user 130965 5/50 current_auc = 0.7515421408543626
User 130965 AUC after training: 0.7509483753917203
User 130965 does not improve AUC. Reverting changes.
Training on augumented user 9457 6/50 current_auc = 0.7515421408543626
User 9457 AUC after training: 0.7509813623618671
User 9457 does not improve AUC. Reverting changes.
Training on augumented user 62690 7/50 current_auc = 0.7515421408543626
User 62690 AUC after training: 0.7506185056902525
User 62690 does not improve AUC. Reverting changes.
Training on augumented user 71483 8/50 current_auc = 0.7515421408543626
User 71483 AUC after training: 0.7508824014514266
User 71483 does not improve AUC. Reverting changes.
Training on augumented user 23950 9/50 current_auc = 0.7515421408543626
User 23950 AUC after training: 0.7520369454065644
User 23950 improves AUC. Keeping the model.
Training on augumented user 136647 10/50 current_auc = 0.7520369454065644
User 136647 AUC after training: 0.75177304964539
User 136647 does not improve AUC. Reverting changes.
Training on augumented user 73872 11/50 current_auc = 0.7520369454065644
User 73872 AUC after training: 0.7522348672274453
User 73872 improves AUC. Keeping the model.
Training on augumented user 74090 12/50 current_auc = 0.7522348672274453
User 74090 AUC after training: 0.7520039584364177
User 74090 does not improve AUC. Reverting changes.
Training on augumented user 21374 13/50 current_auc = 0.7522348672274453
User 21374 AUC after training: 0.7511792841827478
User 21374 does not improve AUC. Reverting changes.
Training on augumented user 116723 14/50 current_auc = 0.7522348672274453
User 116723 AUC after training: 0.7517400626752433
User 116723 does not improve AUC. Reverting changes.
Training on augumented user 19577 15/50 current_auc = 0.7522348672274453
User 19577 AUC after training: 0.7520039584364175
User 19577 does not improve AUC. Reverting changes.
Training on augumented user 73038 16/50 current_auc = 0.7522348672274453
User 73038 AUC after training: 0.7525977238990599
User 73038 improves AUC. Keeping the model.
Training on augumented user 101225 17/50 current_auc = 0.7525977238990599
User 101225 AUC after training: 0.7529605805706746
User 101225 improves AUC. Keeping the model.
Training on augumented user 26377 18/50 current_auc = 0.7529605805706746
User 26377 AUC after training: 0.7526966848095001
User 26377 does not improve AUC. Reverting changes.
Training on augumented user 15772 19/50 current_auc = 0.7529605805706746
User 15772 AUC after training: 0.7532079828467756
User 15772 improves AUC. Keeping the model.
Training on augumented user 9655 20/50 current_auc = 0.7532079828467756
User 9655 AUC after training: 0.7526142173841333
User 9655 does not improve AUC. Reverting changes.
Training on augumented user 82367 21/50 current_auc = 0.7532079828467756
User 82367 AUC after training: 0.7523833085931056
User 82367 does not improve AUC. Reverting changes.
Training on augumented user 86179 22/50 current_auc = 0.7532079828467756
User 86179 AUC after training: 0.7534223981527297
User 86179 improves AUC. Keeping the model.
Training on augumented user 49345 23/50 current_auc = 0.7534223981527297
User 49345 AUC after training: 0.7534553851228765
User 49345 improves AUC. Keeping the model.
Training on augumented user 11399 24/50 current_auc = 0.7534553851228765
User 11399 AUC after training: 0.7534553851228765
User 11399 does not improve AUC. Reverting changes.
Training on augumented user 68440 25/50 current_auc = 0.7534553851228765
User 68440 AUC after training: 0.7534223981527297
User 68440 does not improve AUC. Reverting changes.
Training on augumented user 60667 26/50 current_auc = 0.7534553851228765
User 60667 AUC after training: 0.7534059046676562
User 60667 does not improve AUC. Reverting changes.
Training on augumented user 63600 27/50 current_auc = 0.7534553851228765
User 63600 AUC after training: 0.753356424212436
User 63600 does not improve AUC. Reverting changes.
Training on augumented user 98149 28/50 current_auc = 0.7534553851228765
User 98149 AUC after training: 0.75352135906317
User 98149 improves AUC. Keeping the model.
Training on augumented user 68134 29/50 current_auc = 0.75352135906317
User 68134 AUC after training: 0.7528286326900874
User 68134 does not improve AUC. Reverting changes.
Training on augumented user 100761 30/50 current_auc = 0.75352135906317
User 100761 AUC after training: 0.7537192808840508
User 100761 improves AUC. Keeping the model.
Training on augumented user 67055 31/50 current_auc = 0.7537192808840508
User 67055 AUC after training: 0.7537522678541975
User 67055 improves AUC. Keeping the model.
Training on augumented user 74589 32/50 current_auc = 0.7537522678541975
User 74589 AUC after training: 0.7533894111825827
User 74589 does not improve AUC. Reverting changes.
Training on augumented user 61998 33/50 current_auc = 0.7537522678541975
User 61998 AUC after training: 0.7523668151080323
User 61998 does not improve AUC. Reverting changes.
Training on augumented user 93264 34/50 current_auc = 0.7537522678541975
User 93264 AUC after training: 0.7535873330034635
User 93264 does not improve AUC. Reverting changes.
Training on augumented user 95006 35/50 current_auc = 0.7537522678541975
User 95006 AUC after training: 0.7528616196602342
User 95006 does not improve AUC. Reverting changes.
Training on augumented user 111809 36/50 current_auc = 0.7537522678541975
User 111809 AUC after training: 0.7537192808840507
User 111809 does not improve AUC. Reverting changes.
Training on augumented user 89380 37/50 current_auc = 0.7537522678541975
User 89380 AUC after training: 0.7538842157347847
User 89380 improves AUC. Keeping the model.
Training on augumented user 37981 38/50 current_auc = 0.7538842157347847
User 37981 AUC after training: 0.7535543460333167
User 37981 does not improve AUC. Reverting changes.
Training on augumented user 46352 39/50 current_auc = 0.7538842157347847
User 46352 AUC after training: 0.7533894111825828
User 46352 does not improve AUC. Reverting changes.
Training on augumented user 76268 40/50 current_auc = 0.7538842157347847
User 76268 AUC after training: 0.7532574633019957
User 76268 does not improve AUC. Reverting changes.
Training on augumented user 106441 41/50 current_auc = 0.7538842157347847
User 106441 AUC after training: 0.7530265545109681
User 106441 does not improve AUC. Reverting changes.
Training on augumented user 109347 42/50 current_auc = 0.7538842157347847
User 109347 AUC after training: 0.7534223981527296
User 109347 does not improve AUC. Reverting changes.
Training on augumented user 83651 43/50 current_auc = 0.7538842157347847
User 83651 AUC after training: 0.7526636978393535
User 83651 does not improve AUC. Reverting changes.
Training on augumented user 11601 44/50 current_auc = 0.7538842157347847
User 11601 AUC after training: 0.7539501896750782
User 11601 improves AUC. Keeping the model.
Training on augumented user 38897 45/50 current_auc = 0.7539501896750782
User 38897 AUC after training: 0.7540821375556656
User 38897 improves AUC. Keeping the model.
Training on augumented user 51099 46/50 current_auc = 0.7540821375556656
User 51099 AUC after training: 0.7541481114959592
User 51099 improves AUC. Keeping the model.
Training on augumented user 63758 47/50 current_auc = 0.7541481114959592
User 63758 AUC after training: 0.754477981197427
User 63758 improves AUC. Keeping the model.
Training on augumented user 77785 48/50 current_auc = 0.754477981197427
User 77785 AUC after training: 0.7536533069437572
User 77785 does not improve AUC. Reverting changes.
Training on augumented user 70021 49/50 current_auc = 0.754477981197427
User 70021 AUC after training: 0.7543295398317665
User 70021 does not improve AUC. Reverting changes.
[2024-12-02 18:33:04.255876] start test user 111859 103/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:33:04.752875] start test user 111859 103/567 recall augumented users by random, augumented_users = [67460, 47438, 85336, 21597, 103552, 2025, 100629, 97375, 1664, 94983, 86205, 51133, 102043, 47656, 11062, 54045, 93487, 73147, 6024, 14643, 71489, 54136, 32744, 57889, 105880, 32825, 84054, 9328, 23058, 22425, 87101, 130766, 136497, 4494, 85121, 5388, 37668, 91248, 67991, 29850, 116134, 41274, 14550, 38702, 94686, 29344, 114241, 34365, 70921, 2396]
[2024-12-02 18:33:04.768623] user = 111859 Cloud 103/567
[2024-12-02 18:33:04.779255] user = 111859 Local 103/567
[2024-12-02 18:33:04.859951] user = 111859 Local+ 103/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:33:07.323700] user = 111859 MPDA- 103/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8513824884792626
Training on augumented user 67460 0/50 current_auc = 0.8513824884792626
User 67460 AUC after training: 0.8513824884792626
User 67460 does not improve AUC. Reverting changes.
Training on augumented user 47438 1/50 current_auc = 0.8513824884792626
User 47438 AUC after training: 0.8513824884792626
User 47438 does not improve AUC. Reverting changes.
Training on augumented user 85336 2/50 current_auc = 0.8513824884792626
User 85336 AUC after training: 0.8513824884792626
User 85336 does not improve AUC. Reverting changes.
Training on augumented user 21597 3/50 current_auc = 0.8513824884792626
User 21597 AUC after training: 0.8513824884792626
User 21597 does not improve AUC. Reverting changes.
Training on augumented user 103552 4/50 current_auc = 0.8513824884792626
User 103552 AUC after training: 0.8525345622119815
User 103552 improves AUC. Keeping the model.
Training on augumented user 2025 5/50 current_auc = 0.8525345622119815
User 2025 AUC after training: 0.8525345622119815
User 2025 does not improve AUC. Reverting changes.
Training on augumented user 100629 6/50 current_auc = 0.8525345622119815
User 100629 AUC after training: 0.8513824884792626
User 100629 does not improve AUC. Reverting changes.
Training on augumented user 97375 7/50 current_auc = 0.8525345622119815
User 97375 AUC after training: 0.8513824884792626
User 97375 does not improve AUC. Reverting changes.
Training on augumented user 1664 8/50 current_auc = 0.8525345622119815
User 1664 AUC after training: 0.8525345622119815
User 1664 does not improve AUC. Reverting changes.
Training on augumented user 94983 9/50 current_auc = 0.8525345622119815
User 94983 AUC after training: 0.8536866359447004
User 94983 improves AUC. Keeping the model.
Training on augumented user 86205 10/50 current_auc = 0.8536866359447004
User 86205 AUC after training: 0.8525345622119815
User 86205 does not improve AUC. Reverting changes.
Training on augumented user 51133 11/50 current_auc = 0.8536866359447004
User 51133 AUC after training: 0.8536866359447004
User 51133 does not improve AUC. Reverting changes.
Training on augumented user 102043 12/50 current_auc = 0.8536866359447004
User 102043 AUC after training: 0.8536866359447004
User 102043 does not improve AUC. Reverting changes.
Training on augumented user 47656 13/50 current_auc = 0.8536866359447004
User 47656 AUC after training: 0.8536866359447004
User 47656 does not improve AUC. Reverting changes.
Training on augumented user 11062 14/50 current_auc = 0.8536866359447004
User 11062 AUC after training: 0.8548387096774193
User 11062 improves AUC. Keeping the model.
Training on augumented user 54045 15/50 current_auc = 0.8548387096774193
User 54045 AUC after training: 0.8548387096774193
User 54045 does not improve AUC. Reverting changes.
Training on augumented user 93487 16/50 current_auc = 0.8548387096774193
User 93487 AUC after training: 0.8548387096774193
User 93487 does not improve AUC. Reverting changes.
Training on augumented user 73147 17/50 current_auc = 0.8548387096774193
User 73147 AUC after training: 0.8548387096774193
User 73147 does not improve AUC. Reverting changes.
Training on augumented user 6024 18/50 current_auc = 0.8548387096774193
User 6024 AUC after training: 0.8548387096774193
User 6024 does not improve AUC. Reverting changes.
Training on augumented user 14643 19/50 current_auc = 0.8548387096774193
User 14643 AUC after training: 0.8548387096774193
User 14643 does not improve AUC. Reverting changes.
Training on augumented user 71489 20/50 current_auc = 0.8548387096774193
User 71489 AUC after training: 0.8548387096774193
User 71489 does not improve AUC. Reverting changes.
Training on augumented user 54136 21/50 current_auc = 0.8548387096774193
User 54136 AUC after training: 0.8559907834101381
User 54136 improves AUC. Keeping the model.
Training on augumented user 32744 22/50 current_auc = 0.8559907834101381
User 32744 AUC after training: 0.8513824884792627
User 32744 does not improve AUC. Reverting changes.
Training on augumented user 57889 23/50 current_auc = 0.8559907834101381
User 57889 AUC after training: 0.8548387096774193
User 57889 does not improve AUC. Reverting changes.
Training on augumented user 105880 24/50 current_auc = 0.8559907834101381
User 105880 AUC after training: 0.8559907834101381
User 105880 does not improve AUC. Reverting changes.
Training on augumented user 32825 25/50 current_auc = 0.8559907834101381
User 32825 AUC after training: 0.8571428571428572
User 32825 improves AUC. Keeping the model.
Training on augumented user 84054 26/50 current_auc = 0.8571428571428572
User 84054 AUC after training: 0.8571428571428572
User 84054 does not improve AUC. Reverting changes.
Training on augumented user 9328 27/50 current_auc = 0.8571428571428572
User 9328 AUC after training: 0.8571428571428572
User 9328 does not improve AUC. Reverting changes.
Training on augumented user 23058 28/50 current_auc = 0.8571428571428572
User 23058 AUC after training: 0.8559907834101381
User 23058 does not improve AUC. Reverting changes.
Training on augumented user 22425 29/50 current_auc = 0.8571428571428572
User 22425 AUC after training: 0.8571428571428572
User 22425 does not improve AUC. Reverting changes.
Training on augumented user 87101 30/50 current_auc = 0.8571428571428572
User 87101 AUC after training: 0.8559907834101381
User 87101 does not improve AUC. Reverting changes.
Training on augumented user 130766 31/50 current_auc = 0.8571428571428572
User 130766 AUC after training: 0.8559907834101383
User 130766 does not improve AUC. Reverting changes.
Training on augumented user 136497 32/50 current_auc = 0.8571428571428572
User 136497 AUC after training: 0.8456221198156681
User 136497 does not improve AUC. Reverting changes.
Training on augumented user 4494 33/50 current_auc = 0.8571428571428572
User 4494 AUC after training: 0.8559907834101381
User 4494 does not improve AUC. Reverting changes.
Training on augumented user 85121 34/50 current_auc = 0.8571428571428572
User 85121 AUC after training: 0.8582949308755761
User 85121 improves AUC. Keeping the model.
Training on augumented user 5388 35/50 current_auc = 0.8582949308755761
User 5388 AUC after training: 0.8559907834101382
User 5388 does not improve AUC. Reverting changes.
Training on augumented user 37668 36/50 current_auc = 0.8582949308755761
User 37668 AUC after training: 0.8582949308755761
User 37668 does not improve AUC. Reverting changes.
Training on augumented user 91248 37/50 current_auc = 0.8582949308755761
User 91248 AUC after training: 0.8559907834101383
User 91248 does not improve AUC. Reverting changes.
Training on augumented user 67991 38/50 current_auc = 0.8582949308755761
User 67991 AUC after training: 0.8582949308755761
User 67991 does not improve AUC. Reverting changes.
Training on augumented user 29850 39/50 current_auc = 0.8582949308755761
User 29850 AUC after training: 0.8571428571428572
User 29850 does not improve AUC. Reverting changes.
Training on augumented user 116134 40/50 current_auc = 0.8582949308755761
User 116134 AUC after training: 0.8571428571428572
User 116134 does not improve AUC. Reverting changes.
Training on augumented user 41274 41/50 current_auc = 0.8582949308755761
User 41274 AUC after training: 0.8582949308755761
User 41274 does not improve AUC. Reverting changes.
Training on augumented user 14550 42/50 current_auc = 0.8582949308755761
User 14550 AUC after training: 0.8525345622119815
User 14550 does not improve AUC. Reverting changes.
Training on augumented user 38702 43/50 current_auc = 0.8582949308755761
User 38702 AUC after training: 0.8490783410138248
User 38702 does not improve AUC. Reverting changes.
Training on augumented user 94686 44/50 current_auc = 0.8582949308755761
User 94686 AUC after training: 0.8559907834101381
User 94686 does not improve AUC. Reverting changes.
Training on augumented user 29344 45/50 current_auc = 0.8582949308755761
User 29344 AUC after training: 0.8571428571428572
User 29344 does not improve AUC. Reverting changes.
Training on augumented user 114241 46/50 current_auc = 0.8582949308755761
User 114241 AUC after training: 0.8582949308755761
User 114241 does not improve AUC. Reverting changes.
Training on augumented user 34365 47/50 current_auc = 0.8582949308755761
User 34365 AUC after training: 0.8582949308755761
User 34365 does not improve AUC. Reverting changes.
Training on augumented user 70921 48/50 current_auc = 0.8582949308755761
User 70921 AUC after training: 0.8571428571428572
User 70921 does not improve AUC. Reverting changes.
Training on augumented user 2396 49/50 current_auc = 0.8582949308755761
User 2396 AUC after training: 0.8571428571428572
User 2396 does not improve AUC. Reverting changes.
[2024-12-02 18:33:37.848000] start test user 111873 104/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:33:38.421353] start test user 111873 104/567 recall augumented users by random, augumented_users = [79409, 105040, 100008, 60400, 71071, 71001, 38556, 68448, 4894, 89816, 132103, 105555, 78177, 94815, 75804, 125123, 81203, 88240, 98374, 63078, 69036, 55474, 24006, 122924, 110379, 104157, 39101, 10611, 1949, 20274, 134437, 18596, 134153, 123393, 124967, 134232, 111475, 8019, 71684, 125462, 87471, 130732, 121792, 41182, 125882, 41404, 73250, 55458, 119964, 108002]
[2024-12-02 18:33:38.436671] user = 111873 Cloud 104/567
[2024-12-02 18:33:38.445626] user = 111873 Local 104/567
[2024-12-02 18:33:38.507230] user = 111873 Local+ 104/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:33:41.217557] user = 111873 MPDA- 104/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 79409 0/50 current_auc = 0.5
User 79409 AUC after training: 0.5
User 79409 does not improve AUC. Reverting changes.
Training on augumented user 105040 1/50 current_auc = 0.5
User 105040 AUC after training: 0.5
User 105040 does not improve AUC. Reverting changes.
Training on augumented user 100008 2/50 current_auc = 0.5
User 100008 AUC after training: 0.5
User 100008 does not improve AUC. Reverting changes.
Training on augumented user 60400 3/50 current_auc = 0.5
User 60400 AUC after training: 0.5
User 60400 does not improve AUC. Reverting changes.
Training on augumented user 71071 4/50 current_auc = 0.5
User 71071 AUC after training: 0.5
User 71071 does not improve AUC. Reverting changes.
Training on augumented user 71001 5/50 current_auc = 0.5
User 71001 AUC after training: 0.5
User 71001 does not improve AUC. Reverting changes.
Training on augumented user 38556 6/50 current_auc = 0.5
User 38556 AUC after training: 0.5
User 38556 does not improve AUC. Reverting changes.
Training on augumented user 68448 7/50 current_auc = 0.5
User 68448 AUC after training: 0.5
User 68448 does not improve AUC. Reverting changes.
Training on augumented user 4894 8/50 current_auc = 0.5
User 4894 AUC after training: 0.5
User 4894 does not improve AUC. Reverting changes.
Training on augumented user 89816 9/50 current_auc = 0.5
User 89816 AUC after training: 0.5
User 89816 does not improve AUC. Reverting changes.
Training on augumented user 132103 10/50 current_auc = 0.5
User 132103 AUC after training: 0.5
User 132103 does not improve AUC. Reverting changes.
Training on augumented user 105555 11/50 current_auc = 0.5
User 105555 AUC after training: 0.5
User 105555 does not improve AUC. Reverting changes.
Training on augumented user 78177 12/50 current_auc = 0.5
User 78177 AUC after training: 0.5
User 78177 does not improve AUC. Reverting changes.
Training on augumented user 94815 13/50 current_auc = 0.5
User 94815 AUC after training: 0.5
User 94815 does not improve AUC. Reverting changes.
Training on augumented user 75804 14/50 current_auc = 0.5
User 75804 AUC after training: 0.5
User 75804 does not improve AUC. Reverting changes.
Training on augumented user 125123 15/50 current_auc = 0.5
User 125123 AUC after training: 0.5
User 125123 does not improve AUC. Reverting changes.
Training on augumented user 81203 16/50 current_auc = 0.5
User 81203 AUC after training: 0.5
User 81203 does not improve AUC. Reverting changes.
Training on augumented user 88240 17/50 current_auc = 0.5
User 88240 AUC after training: 0.5
User 88240 does not improve AUC. Reverting changes.
Training on augumented user 98374 18/50 current_auc = 0.5
User 98374 AUC after training: 0.5
User 98374 does not improve AUC. Reverting changes.
Training on augumented user 63078 19/50 current_auc = 0.5
User 63078 AUC after training: 0.5
User 63078 does not improve AUC. Reverting changes.
Training on augumented user 69036 20/50 current_auc = 0.5
User 69036 AUC after training: 0.5
User 69036 does not improve AUC. Reverting changes.
Training on augumented user 55474 21/50 current_auc = 0.5
User 55474 AUC after training: 0.5
User 55474 does not improve AUC. Reverting changes.
Training on augumented user 24006 22/50 current_auc = 0.5
User 24006 AUC after training: 0.5
User 24006 does not improve AUC. Reverting changes.
Training on augumented user 122924 23/50 current_auc = 0.5
User 122924 AUC after training: 0.5
User 122924 does not improve AUC. Reverting changes.
Training on augumented user 110379 24/50 current_auc = 0.5
User 110379 AUC after training: 0.5
User 110379 does not improve AUC. Reverting changes.
Training on augumented user 104157 25/50 current_auc = 0.5
User 104157 AUC after training: 0.5
User 104157 does not improve AUC. Reverting changes.
Training on augumented user 39101 26/50 current_auc = 0.5
User 39101 AUC after training: 0.5
User 39101 does not improve AUC. Reverting changes.
Training on augumented user 10611 27/50 current_auc = 0.5
User 10611 AUC after training: 0.5
User 10611 does not improve AUC. Reverting changes.
Training on augumented user 1949 28/50 current_auc = 0.5
User 1949 AUC after training: 0.5
User 1949 does not improve AUC. Reverting changes.
Training on augumented user 20274 29/50 current_auc = 0.5
User 20274 AUC after training: 0.5
User 20274 does not improve AUC. Reverting changes.
Training on augumented user 134437 30/50 current_auc = 0.5
User 134437 AUC after training: 0.5
User 134437 does not improve AUC. Reverting changes.
Training on augumented user 18596 31/50 current_auc = 0.5
User 18596 AUC after training: 0.5
User 18596 does not improve AUC. Reverting changes.
Training on augumented user 134153 32/50 current_auc = 0.5
User 134153 AUC after training: 0.5
User 134153 does not improve AUC. Reverting changes.
Training on augumented user 123393 33/50 current_auc = 0.5
User 123393 AUC after training: 0.5
User 123393 does not improve AUC. Reverting changes.
Training on augumented user 124967 34/50 current_auc = 0.5
User 124967 AUC after training: 0.5
User 124967 does not improve AUC. Reverting changes.
Training on augumented user 134232 35/50 current_auc = 0.5
User 134232 AUC after training: 0.5
User 134232 does not improve AUC. Reverting changes.
Training on augumented user 111475 36/50 current_auc = 0.5
User 111475 AUC after training: 0.5
User 111475 does not improve AUC. Reverting changes.
Training on augumented user 8019 37/50 current_auc = 0.5
User 8019 AUC after training: 0.5
User 8019 does not improve AUC. Reverting changes.
Training on augumented user 71684 38/50 current_auc = 0.5
User 71684 AUC after training: 0.5
User 71684 does not improve AUC. Reverting changes.
Training on augumented user 125462 39/50 current_auc = 0.5
User 125462 AUC after training: 0.5
User 125462 does not improve AUC. Reverting changes.
Training on augumented user 87471 40/50 current_auc = 0.5
User 87471 AUC after training: 0.5
User 87471 does not improve AUC. Reverting changes.
Training on augumented user 130732 41/50 current_auc = 0.5
User 130732 AUC after training: 0.5
User 130732 does not improve AUC. Reverting changes.
Training on augumented user 121792 42/50 current_auc = 0.5
User 121792 AUC after training: 0.5
User 121792 does not improve AUC. Reverting changes.
Training on augumented user 41182 43/50 current_auc = 0.5
User 41182 AUC after training: 0.5
User 41182 does not improve AUC. Reverting changes.
Training on augumented user 125882 44/50 current_auc = 0.5
User 125882 AUC after training: 0.5
User 125882 does not improve AUC. Reverting changes.
Training on augumented user 41404 45/50 current_auc = 0.5
User 41404 AUC after training: 0.5
User 41404 does not improve AUC. Reverting changes.
Training on augumented user 73250 46/50 current_auc = 0.5
User 73250 AUC after training: 0.5
User 73250 does not improve AUC. Reverting changes.
Training on augumented user 55458 47/50 current_auc = 0.5
User 55458 AUC after training: 0.5
User 55458 does not improve AUC. Reverting changes.
Training on augumented user 119964 48/50 current_auc = 0.5
User 119964 AUC after training: 0.5
User 119964 does not improve AUC. Reverting changes.
Training on augumented user 108002 49/50 current_auc = 0.5
User 108002 AUC after training: 0.5
User 108002 does not improve AUC. Reverting changes.
[2024-12-02 18:34:08.556193] start test user 111887 105/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:34:09.090097] start test user 111887 105/567 recall augumented users by random, augumented_users = [85419, 65287, 42581, 58461, 70146, 30195, 117899, 82825, 119004, 73051, 45942, 4820, 11881, 72083, 90820, 56103, 133267, 11866, 100182, 117594, 98492, 65407, 92961, 121236, 112707, 30114, 106756, 91110, 73342, 84960, 24642, 29134, 91601, 50072, 112015, 131268, 111148, 62923, 23743, 16299, 94770, 86347, 78705, 106342, 59940, 65967, 69025, 78525, 68257, 133646]
[2024-12-02 18:34:09.108703] user = 111887 Cloud 105/567
[2024-12-02 18:34:09.129869] user = 111887 Local 105/567
[2024-12-02 18:34:09.206547] user = 111887 Local+ 105/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:34:11.270237] user = 111887 MPDA- 105/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7467936261173728
Training on augumented user 85419 0/50 current_auc = 0.7467936261173728
User 85419 AUC after training: 0.7446560435289545
User 85419 does not improve AUC. Reverting changes.
Training on augumented user 65287 1/50 current_auc = 0.7467936261173728
User 65287 AUC after training: 0.7464049747376603
User 65287 does not improve AUC. Reverting changes.
Training on augumented user 42581 2/50 current_auc = 0.7467936261173728
User 42581 AUC after training: 0.7473766031869413
User 42581 improves AUC. Keeping the model.
Training on augumented user 58461 3/50 current_auc = 0.7473766031869413
User 58461 AUC after training: 0.7483482316362223
User 58461 improves AUC. Keeping the model.
Training on augumented user 70146 4/50 current_auc = 0.7483482316362223
User 70146 AUC after training: 0.7485425573260784
User 70146 improves AUC. Keeping the model.
Training on augumented user 30195 5/50 current_auc = 0.7485425573260784
User 30195 AUC after training: 0.7456276719782355
User 30195 does not improve AUC. Reverting changes.
Training on augumented user 117899 6/50 current_auc = 0.7485425573260784
User 117899 AUC after training: 0.7487368830159347
User 117899 improves AUC. Keeping the model.
Training on augumented user 82825 7/50 current_auc = 0.7487368830159347
User 82825 AUC after training: 0.7458219976680918
User 82825 does not improve AUC. Reverting changes.
Training on augumented user 119004 8/50 current_auc = 0.7487368830159347
User 119004 AUC after training: 0.7471822774970851
User 119004 does not improve AUC. Reverting changes.
Training on augumented user 73051 9/50 current_auc = 0.7487368830159347
User 73051 AUC after training: 0.7487368830159347
User 73051 does not improve AUC. Reverting changes.
Training on augumented user 45942 10/50 current_auc = 0.7487368830159347
User 45942 AUC after training: 0.7477652545666538
User 45942 does not improve AUC. Reverting changes.
Training on augumented user 4820 11/50 current_auc = 0.7487368830159347
User 4820 AUC after training: 0.7499028371550719
User 4820 improves AUC. Keeping the model.
Training on augumented user 11881 12/50 current_auc = 0.7499028371550719
User 11881 AUC after training: 0.7481539059463661
User 11881 does not improve AUC. Reverting changes.
Training on augumented user 72083 13/50 current_auc = 0.7499028371550719
User 72083 AUC after training: 0.7495141857753596
User 72083 does not improve AUC. Reverting changes.
Training on augumented user 90820 14/50 current_auc = 0.7499028371550719
User 90820 AUC after training: 0.7502914885347842
User 90820 improves AUC. Keeping the model.
Training on augumented user 56103 15/50 current_auc = 0.7502914885347842
User 56103 AUC after training: 0.7493198600855033
User 56103 does not improve AUC. Reverting changes.
Training on augumented user 133267 16/50 current_auc = 0.7502914885347842
User 133267 AUC after training: 0.7502914885347842
User 133267 does not improve AUC. Reverting changes.
Training on augumented user 11866 17/50 current_auc = 0.7502914885347842
User 11866 AUC after training: 0.7491255343956471
User 11866 does not improve AUC. Reverting changes.
Training on augumented user 100182 18/50 current_auc = 0.7502914885347842
User 100182 AUC after training: 0.7499028371550719
User 100182 does not improve AUC. Reverting changes.
Training on augumented user 117594 19/50 current_auc = 0.7502914885347842
User 117594 AUC after training: 0.7506801399144967
User 117594 improves AUC. Keeping the model.
Training on augumented user 98492 20/50 current_auc = 0.7506801399144967
User 98492 AUC after training: 0.7506801399144967
User 98492 does not improve AUC. Reverting changes.
Training on augumented user 65407 21/50 current_auc = 0.7506801399144967
User 65407 AUC after training: 0.7469879518072289
User 65407 does not improve AUC. Reverting changes.
Training on augumented user 92961 22/50 current_auc = 0.7506801399144967
User 92961 AUC after training: 0.7510687912942091
User 92961 improves AUC. Keeping the model.
Training on augumented user 121236 23/50 current_auc = 0.7510687912942091
User 121236 AUC after training: 0.74795958025651
User 121236 does not improve AUC. Reverting changes.
Training on augumented user 112707 24/50 current_auc = 0.7510687912942091
User 112707 AUC after training: 0.7504858142246404
User 112707 does not improve AUC. Reverting changes.
Training on augumented user 30114 25/50 current_auc = 0.7510687912942091
User 30114 AUC after training: 0.7506801399144967
User 30114 does not improve AUC. Reverting changes.
Training on augumented user 106756 26/50 current_auc = 0.7510687912942091
User 106756 AUC after training: 0.7471822774970851
User 106756 does not improve AUC. Reverting changes.
Training on augumented user 91110 27/50 current_auc = 0.7510687912942091
User 91110 AUC after training: 0.7510687912942091
User 91110 does not improve AUC. Reverting changes.
Training on augumented user 73342 28/50 current_auc = 0.7510687912942091
User 73342 AUC after training: 0.7508744656043529
User 73342 does not improve AUC. Reverting changes.
Training on augumented user 84960 29/50 current_auc = 0.7510687912942091
User 84960 AUC after training: 0.7508744656043529
User 84960 does not improve AUC. Reverting changes.
Training on augumented user 24642 30/50 current_auc = 0.7510687912942091
User 24642 AUC after training: 0.7475709288767975
User 24642 does not improve AUC. Reverting changes.
Training on augumented user 29134 31/50 current_auc = 0.7510687912942091
User 29134 AUC after training: 0.7504858142246404
User 29134 does not improve AUC. Reverting changes.
Training on augumented user 91601 32/50 current_auc = 0.7510687912942091
User 91601 AUC after training: 0.7502914885347842
User 91601 does not improve AUC. Reverting changes.
Training on augumented user 50072 33/50 current_auc = 0.7510687912942091
User 50072 AUC after training: 0.7508744656043529
User 50072 does not improve AUC. Reverting changes.
Training on augumented user 112015 34/50 current_auc = 0.7510687912942091
User 112015 AUC after training: 0.7514574426739216
User 112015 improves AUC. Keeping the model.
Training on augumented user 131268 35/50 current_auc = 0.7514574426739216
User 131268 AUC after training: 0.7512631169840653
User 131268 does not improve AUC. Reverting changes.
Training on augumented user 111148 36/50 current_auc = 0.7514574426739216
User 111148 AUC after training: 0.7508744656043529
User 111148 does not improve AUC. Reverting changes.
Training on augumented user 62923 37/50 current_auc = 0.7514574426739216
User 62923 AUC after training: 0.7512631169840653
User 62923 does not improve AUC. Reverting changes.
Training on augumented user 23743 38/50 current_auc = 0.7514574426739216
User 23743 AUC after training: 0.7508744656043529
User 23743 does not improve AUC. Reverting changes.
Training on augumented user 16299 39/50 current_auc = 0.7514574426739216
User 16299 AUC after training: 0.7504858142246406
User 16299 does not improve AUC. Reverting changes.
Training on augumented user 94770 40/50 current_auc = 0.7514574426739216
User 94770 AUC after training: 0.7510687912942091
User 94770 does not improve AUC. Reverting changes.
Training on augumented user 86347 41/50 current_auc = 0.7514574426739216
User 86347 AUC after training: 0.7502914885347843
User 86347 does not improve AUC. Reverting changes.
Training on augumented user 78705 42/50 current_auc = 0.7514574426739216
User 78705 AUC after training: 0.7500971628449281
User 78705 does not improve AUC. Reverting changes.
Training on augumented user 106342 43/50 current_auc = 0.7514574426739216
User 106342 AUC after training: 0.7506801399144967
User 106342 does not improve AUC. Reverting changes.
Training on augumented user 59940 44/50 current_auc = 0.7514574426739216
User 59940 AUC after training: 0.7464049747376602
User 59940 does not improve AUC. Reverting changes.
Training on augumented user 65967 45/50 current_auc = 0.7514574426739216
User 65967 AUC after training: 0.7493198600855033
User 65967 does not improve AUC. Reverting changes.
Training on augumented user 69025 46/50 current_auc = 0.7514574426739216
User 69025 AUC after training: 0.7491255343956471
User 69025 does not improve AUC. Reverting changes.
Training on augumented user 78525 47/50 current_auc = 0.7514574426739216
User 78525 AUC after training: 0.7512631169840653
User 78525 does not improve AUC. Reverting changes.
Training on augumented user 68257 48/50 current_auc = 0.7514574426739216
User 68257 AUC after training: 0.7504858142246404
User 68257 does not improve AUC. Reverting changes.
Training on augumented user 133646 49/50 current_auc = 0.7514574426739216
User 133646 AUC after training: 0.7522347454333462
User 133646 improves AUC. Keeping the model.
[2024-12-02 18:34:39.982865] start test user 111912 106/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:34:41.013864] start test user 111912 106/567 recall augumented users by random, augumented_users = [96773, 72587, 49764, 67281, 122406, 96016, 138432, 79596, 98730, 2614, 6007, 102978, 62719, 69170, 10013, 27050, 23688, 49556, 70779, 131696, 20156, 29705, 68409, 55420, 114553, 116196, 92130, 132772, 46766, 47858, 88327, 89293, 76012, 32968, 37351, 12828, 66107, 19347, 52108, 108372, 136509, 41804, 56768, 3771, 39258, 465, 114388, 23561, 38682, 27418]
[2024-12-02 18:34:41.070335] user = 111912 Cloud 106/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:34:41.085380] user = 111912 Local 106/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:34:41.462992] user = 111912 Local+ 106/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:34:44.083373] user = 111912 MPDA- 106/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 96773 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96773 AUC after training: 0.5
User 96773 does not improve AUC. Reverting changes.
Training on augumented user 72587 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72587 AUC after training: 0.5
User 72587 does not improve AUC. Reverting changes.
Training on augumented user 49764 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49764 AUC after training: 0.5
User 49764 does not improve AUC. Reverting changes.
Training on augumented user 67281 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67281 AUC after training: 0.5
User 67281 does not improve AUC. Reverting changes.
Training on augumented user 122406 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122406 AUC after training: 0.5
User 122406 does not improve AUC. Reverting changes.
Training on augumented user 96016 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96016 AUC after training: 0.5
User 96016 does not improve AUC. Reverting changes.
Training on augumented user 138432 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 138432 AUC after training: 0.5
User 138432 does not improve AUC. Reverting changes.
Training on augumented user 79596 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79596 AUC after training: 0.5
User 79596 does not improve AUC. Reverting changes.
Training on augumented user 98730 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98730 AUC after training: 0.5
User 98730 does not improve AUC. Reverting changes.
Training on augumented user 2614 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2614 AUC after training: 0.5
User 2614 does not improve AUC. Reverting changes.
Training on augumented user 6007 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6007 AUC after training: 0.5
User 6007 does not improve AUC. Reverting changes.
Training on augumented user 102978 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102978 AUC after training: 0.5
User 102978 does not improve AUC. Reverting changes.
Training on augumented user 62719 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62719 AUC after training: 0.5
User 62719 does not improve AUC. Reverting changes.
Training on augumented user 69170 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 69170 AUC after training: 0.5
User 69170 does not improve AUC. Reverting changes.
Training on augumented user 10013 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10013 AUC after training: 0.5
User 10013 does not improve AUC. Reverting changes.
Training on augumented user 27050 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27050 AUC after training: 0.5
User 27050 does not improve AUC. Reverting changes.
Training on augumented user 23688 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23688 AUC after training: 0.5
User 23688 does not improve AUC. Reverting changes.
Training on augumented user 49556 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49556 AUC after training: 0.5
User 49556 does not improve AUC. Reverting changes.
Training on augumented user 70779 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70779 AUC after training: 0.5
User 70779 does not improve AUC. Reverting changes.
Training on augumented user 131696 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131696 AUC after training: 0.5
User 131696 does not improve AUC. Reverting changes.
Training on augumented user 20156 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20156 AUC after training: 0.5
User 20156 does not improve AUC. Reverting changes.
Training on augumented user 29705 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29705 AUC after training: 0.5
User 29705 does not improve AUC. Reverting changes.
Training on augumented user 68409 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68409 AUC after training: 0.5
User 68409 does not improve AUC. Reverting changes.
Training on augumented user 55420 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55420 AUC after training: 0.5
User 55420 does not improve AUC. Reverting changes.
Training on augumented user 114553 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114553 AUC after training: 0.5
User 114553 does not improve AUC. Reverting changes.
Training on augumented user 116196 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116196 AUC after training: 0.5
User 116196 does not improve AUC. Reverting changes.
Training on augumented user 92130 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92130 AUC after training: 0.5
User 92130 does not improve AUC. Reverting changes.
Training on augumented user 132772 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132772 AUC after training: 0.5
User 132772 does not improve AUC. Reverting changes.
Training on augumented user 46766 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 46766 AUC after training: 0.5
User 46766 does not improve AUC. Reverting changes.
Training on augumented user 47858 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47858 AUC after training: 0.5
User 47858 does not improve AUC. Reverting changes.
Training on augumented user 88327 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88327 AUC after training: 0.5
User 88327 does not improve AUC. Reverting changes.
Training on augumented user 89293 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89293 AUC after training: 0.5
User 89293 does not improve AUC. Reverting changes.
Training on augumented user 76012 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76012 AUC after training: 0.5
User 76012 does not improve AUC. Reverting changes.
Training on augumented user 32968 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32968 AUC after training: 0.5
User 32968 does not improve AUC. Reverting changes.
Training on augumented user 37351 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37351 AUC after training: 0.5
User 37351 does not improve AUC. Reverting changes.
Training on augumented user 12828 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12828 AUC after training: 0.5
User 12828 does not improve AUC. Reverting changes.
Training on augumented user 66107 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66107 AUC after training: 0.5
User 66107 does not improve AUC. Reverting changes.
Training on augumented user 19347 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19347 AUC after training: 0.5
User 19347 does not improve AUC. Reverting changes.
Training on augumented user 52108 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 52108 AUC after training: 0.5
User 52108 does not improve AUC. Reverting changes.
Training on augumented user 108372 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108372 AUC after training: 0.5
User 108372 does not improve AUC. Reverting changes.
Training on augumented user 136509 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136509 AUC after training: 0.5
User 136509 does not improve AUC. Reverting changes.
Training on augumented user 41804 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41804 AUC after training: 0.5
User 41804 does not improve AUC. Reverting changes.
Training on augumented user 56768 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56768 AUC after training: 0.5
User 56768 does not improve AUC. Reverting changes.
Training on augumented user 3771 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3771 AUC after training: 0.5
User 3771 does not improve AUC. Reverting changes.
Training on augumented user 39258 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 39258 AUC after training: 0.5
User 39258 does not improve AUC. Reverting changes.
Training on augumented user 465 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 465 AUC after training: 0.5
User 465 does not improve AUC. Reverting changes.
Training on augumented user 114388 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114388 AUC after training: 0.5
User 114388 does not improve AUC. Reverting changes.
Training on augumented user 23561 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23561 AUC after training: 0.5
User 23561 does not improve AUC. Reverting changes.
Training on augumented user 38682 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38682 AUC after training: 0.5
User 38682 does not improve AUC. Reverting changes.
Training on augumented user 27418 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27418 AUC after training: 0.5
User 27418 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:35:10.671654] start test user 111933 107/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:35:11.597958] start test user 111933 107/567 recall augumented users by random, augumented_users = [12053, 15852, 36997, 49795, 1340, 47489, 44478, 113977, 99895, 125119, 79933, 20277, 88225, 67154, 76238, 39362, 30238, 135136, 62670, 64154, 52080, 35414, 39671, 110456, 62284, 52225, 119657, 45787, 25273, 84320, 15953, 4067, 125960, 14387, 8030, 39866, 66060, 108995, 24221, 131061, 112004, 77336, 75833, 112041, 111654, 138252, 117749, 117400, 4482, 120735]
[2024-12-02 18:35:11.616889] user = 111933 Cloud 107/567
[2024-12-02 18:35:11.631721] user = 111933 Local 107/567
[2024-12-02 18:35:11.795221] user = 111933 Local+ 107/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:35:15.027090] user = 111933 MPDA- 107/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5942249240121581
Training on augumented user 12053 0/50 current_auc = 0.5942249240121581
User 12053 AUC after training: 0.5942249240121581
User 12053 does not improve AUC. Reverting changes.
Training on augumented user 15852 1/50 current_auc = 0.5942249240121581
User 15852 AUC after training: 0.5942249240121581
User 15852 does not improve AUC. Reverting changes.
Training on augumented user 36997 2/50 current_auc = 0.5942249240121581
User 36997 AUC after training: 0.5957446808510638
User 36997 improves AUC. Keeping the model.
Training on augumented user 49795 3/50 current_auc = 0.5957446808510638
User 49795 AUC after training: 0.594224924012158
User 49795 does not improve AUC. Reverting changes.
Training on augumented user 1340 4/50 current_auc = 0.5957446808510638
User 1340 AUC after training: 0.5957446808510638
User 1340 does not improve AUC. Reverting changes.
Training on augumented user 47489 5/50 current_auc = 0.5957446808510638
User 47489 AUC after training: 0.5957446808510638
User 47489 does not improve AUC. Reverting changes.
Training on augumented user 44478 6/50 current_auc = 0.5957446808510638
User 44478 AUC after training: 0.5957446808510638
User 44478 does not improve AUC. Reverting changes.
Training on augumented user 113977 7/50 current_auc = 0.5957446808510638
User 113977 AUC after training: 0.594224924012158
User 113977 does not improve AUC. Reverting changes.
Training on augumented user 99895 8/50 current_auc = 0.5957446808510638
User 99895 AUC after training: 0.594224924012158
User 99895 does not improve AUC. Reverting changes.
Training on augumented user 125119 9/50 current_auc = 0.5957446808510638
User 125119 AUC after training: 0.5987841945288754
User 125119 improves AUC. Keeping the model.
Training on augumented user 79933 10/50 current_auc = 0.5987841945288754
User 79933 AUC after training: 0.5987841945288754
User 79933 does not improve AUC. Reverting changes.
Training on augumented user 20277 11/50 current_auc = 0.5987841945288754
User 20277 AUC after training: 0.6003039513677811
User 20277 improves AUC. Keeping the model.
Training on augumented user 88225 12/50 current_auc = 0.6003039513677811
User 88225 AUC after training: 0.6033434650455927
User 88225 improves AUC. Keeping the model.
Training on augumented user 67154 13/50 current_auc = 0.6033434650455927
User 67154 AUC after training: 0.6033434650455927
User 67154 does not improve AUC. Reverting changes.
Training on augumented user 76238 14/50 current_auc = 0.6033434650455927
User 76238 AUC after training: 0.6033434650455927
User 76238 does not improve AUC. Reverting changes.
Training on augumented user 39362 15/50 current_auc = 0.6033434650455927
User 39362 AUC after training: 0.6003039513677811
User 39362 does not improve AUC. Reverting changes.
Training on augumented user 30238 16/50 current_auc = 0.6033434650455927
User 30238 AUC after training: 0.6033434650455927
User 30238 does not improve AUC. Reverting changes.
Training on augumented user 135136 17/50 current_auc = 0.6033434650455927
User 135136 AUC after training: 0.601823708206687
User 135136 does not improve AUC. Reverting changes.
Training on augumented user 62670 18/50 current_auc = 0.6033434650455927
User 62670 AUC after training: 0.6033434650455927
User 62670 does not improve AUC. Reverting changes.
Training on augumented user 64154 19/50 current_auc = 0.6033434650455927
User 64154 AUC after training: 0.601823708206687
User 64154 does not improve AUC. Reverting changes.
Training on augumented user 52080 20/50 current_auc = 0.6033434650455927
User 52080 AUC after training: 0.6033434650455927
User 52080 does not improve AUC. Reverting changes.
Training on augumented user 35414 21/50 current_auc = 0.6033434650455927
User 35414 AUC after training: 0.6003039513677811
User 35414 does not improve AUC. Reverting changes.
Training on augumented user 39671 22/50 current_auc = 0.6033434650455927
User 39671 AUC after training: 0.6003039513677813
User 39671 does not improve AUC. Reverting changes.
Training on augumented user 110456 23/50 current_auc = 0.6033434650455927
User 110456 AUC after training: 0.601823708206687
User 110456 does not improve AUC. Reverting changes.
Training on augumented user 62284 24/50 current_auc = 0.6033434650455927
User 62284 AUC after training: 0.6003039513677811
User 62284 does not improve AUC. Reverting changes.
Training on augumented user 52225 25/50 current_auc = 0.6033434650455927
User 52225 AUC after training: 0.5957446808510638
User 52225 does not improve AUC. Reverting changes.
Training on augumented user 119657 26/50 current_auc = 0.6033434650455927
User 119657 AUC after training: 0.6033434650455927
User 119657 does not improve AUC. Reverting changes.
Training on augumented user 45787 27/50 current_auc = 0.6033434650455927
User 45787 AUC after training: 0.6033434650455927
User 45787 does not improve AUC. Reverting changes.
Training on augumented user 25273 28/50 current_auc = 0.6033434650455927
User 25273 AUC after training: 0.6003039513677811
User 25273 does not improve AUC. Reverting changes.
Training on augumented user 84320 29/50 current_auc = 0.6033434650455927
User 84320 AUC after training: 0.6003039513677811
User 84320 does not improve AUC. Reverting changes.
Training on augumented user 15953 30/50 current_auc = 0.6033434650455927
User 15953 AUC after training: 0.6033434650455927
User 15953 does not improve AUC. Reverting changes.
Training on augumented user 4067 31/50 current_auc = 0.6033434650455927
User 4067 AUC after training: 0.6003039513677813
User 4067 does not improve AUC. Reverting changes.
Training on augumented user 125960 32/50 current_auc = 0.6033434650455927
User 125960 AUC after training: 0.6033434650455927
User 125960 does not improve AUC. Reverting changes.
Training on augumented user 14387 33/50 current_auc = 0.6033434650455927
User 14387 AUC after training: 0.601823708206687
User 14387 does not improve AUC. Reverting changes.
Training on augumented user 8030 34/50 current_auc = 0.6033434650455927
User 8030 AUC after training: 0.6033434650455927
User 8030 does not improve AUC. Reverting changes.
Training on augumented user 39866 35/50 current_auc = 0.6033434650455927
User 39866 AUC after training: 0.6033434650455927
User 39866 does not improve AUC. Reverting changes.
Training on augumented user 66060 36/50 current_auc = 0.6033434650455927
User 66060 AUC after training: 0.594224924012158
User 66060 does not improve AUC. Reverting changes.
Training on augumented user 108995 37/50 current_auc = 0.6033434650455927
User 108995 AUC after training: 0.601823708206687
User 108995 does not improve AUC. Reverting changes.
Training on augumented user 24221 38/50 current_auc = 0.6033434650455927
User 24221 AUC after training: 0.6048632218844985
User 24221 improves AUC. Keeping the model.
Training on augumented user 131061 39/50 current_auc = 0.6048632218844985
User 131061 AUC after training: 0.6033434650455927
User 131061 does not improve AUC. Reverting changes.
Training on augumented user 112004 40/50 current_auc = 0.6048632218844985
User 112004 AUC after training: 0.6003039513677813
User 112004 does not improve AUC. Reverting changes.
Training on augumented user 77336 41/50 current_auc = 0.6048632218844985
User 77336 AUC after training: 0.6003039513677811
User 77336 does not improve AUC. Reverting changes.
Training on augumented user 75833 42/50 current_auc = 0.6048632218844985
User 75833 AUC after training: 0.6018237082066868
User 75833 does not improve AUC. Reverting changes.
Training on augumented user 112041 43/50 current_auc = 0.6048632218844985
User 112041 AUC after training: 0.6048632218844985
User 112041 does not improve AUC. Reverting changes.
Training on augumented user 111654 44/50 current_auc = 0.6048632218844985
User 111654 AUC after training: 0.6033434650455927
User 111654 does not improve AUC. Reverting changes.
Training on augumented user 138252 45/50 current_auc = 0.6048632218844985
User 138252 AUC after training: 0.6048632218844985
User 138252 does not improve AUC. Reverting changes.
Training on augumented user 117749 46/50 current_auc = 0.6048632218844985
User 117749 AUC after training: 0.6003039513677811
User 117749 does not improve AUC. Reverting changes.
Training on augumented user 117400 47/50 current_auc = 0.6048632218844985
User 117400 AUC after training: 0.601823708206687
User 117400 does not improve AUC. Reverting changes.
Training on augumented user 4482 48/50 current_auc = 0.6048632218844985
User 4482 AUC after training: 0.6033434650455927
User 4482 does not improve AUC. Reverting changes.
Training on augumented user 120735 49/50 current_auc = 0.6048632218844985
User 120735 AUC after training: 0.6003039513677811
User 120735 does not improve AUC. Reverting changes.
[2024-12-02 18:35:40.980699] start test user 111959 108/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:35:41.384535] start test user 111959 108/567 recall augumented users by random, augumented_users = [78435, 25878, 56076, 43062, 69639, 69143, 99296, 127533, 5329, 18952, 57678, 23820, 75566, 106327, 26429, 50140, 20469, 123061, 16744, 43445, 131782, 98839, 115102, 17459, 47049, 122536, 79140, 130014, 4738, 116185, 107300, 48205, 13114, 135003, 114638, 48620, 137449, 68501, 18226, 133605, 987, 32124, 123351, 117563, 54468, 77207, 1867, 136295, 4379, 110048]
[2024-12-02 18:35:41.401432] user = 111959 Cloud 108/567
[2024-12-02 18:35:41.420919] user = 111959 Local 108/567
[2024-12-02 18:35:41.614455] user = 111959 Local+ 108/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:35:44.024334] user = 111959 MPDA- 108/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7148314606741573
Training on augumented user 78435 0/50 current_auc = 0.7148314606741573
User 78435 AUC after training: 0.7150561797752809
User 78435 improves AUC. Keeping the model.
Training on augumented user 25878 1/50 current_auc = 0.7150561797752809
User 25878 AUC after training: 0.7155056179775281
User 25878 improves AUC. Keeping the model.
Training on augumented user 56076 2/50 current_auc = 0.7155056179775281
User 56076 AUC after training: 0.7141573033707865
User 56076 does not improve AUC. Reverting changes.
Training on augumented user 43062 3/50 current_auc = 0.7155056179775281
User 43062 AUC after training: 0.7155056179775281
User 43062 does not improve AUC. Reverting changes.
Training on augumented user 69639 4/50 current_auc = 0.7155056179775281
User 69639 AUC after training: 0.7146067415730337
User 69639 does not improve AUC. Reverting changes.
Training on augumented user 69143 5/50 current_auc = 0.7155056179775281
User 69143 AUC after training: 0.7159550561797753
User 69143 improves AUC. Keeping the model.
Training on augumented user 99296 6/50 current_auc = 0.7159550561797753
User 99296 AUC after training: 0.7164044943820224
User 99296 improves AUC. Keeping the model.
Training on augumented user 127533 7/50 current_auc = 0.7164044943820224
User 127533 AUC after training: 0.7170786516853932
User 127533 improves AUC. Keeping the model.
Training on augumented user 5329 8/50 current_auc = 0.7170786516853932
User 5329 AUC after training: 0.716629213483146
User 5329 does not improve AUC. Reverting changes.
Training on augumented user 18952 9/50 current_auc = 0.7170786516853932
User 18952 AUC after training: 0.7168539325842697
User 18952 does not improve AUC. Reverting changes.
Training on augumented user 57678 10/50 current_auc = 0.7170786516853932
User 57678 AUC after training: 0.7161797752808988
User 57678 does not improve AUC. Reverting changes.
Training on augumented user 23820 11/50 current_auc = 0.7170786516853932
User 23820 AUC after training: 0.7168539325842697
User 23820 does not improve AUC. Reverting changes.
Training on augumented user 75566 12/50 current_auc = 0.7170786516853932
User 75566 AUC after training: 0.7173033707865168
User 75566 improves AUC. Keeping the model.
Training on augumented user 106327 13/50 current_auc = 0.7173033707865168
User 106327 AUC after training: 0.716629213483146
User 106327 does not improve AUC. Reverting changes.
Training on augumented user 26429 14/50 current_auc = 0.7173033707865168
User 26429 AUC after training: 0.7146067415730337
User 26429 does not improve AUC. Reverting changes.
Training on augumented user 50140 15/50 current_auc = 0.7173033707865168
User 50140 AUC after training: 0.7164044943820225
User 50140 does not improve AUC. Reverting changes.
Training on augumented user 20469 16/50 current_auc = 0.7173033707865168
User 20469 AUC after training: 0.716629213483146
User 20469 does not improve AUC. Reverting changes.
Training on augumented user 123061 17/50 current_auc = 0.7173033707865168
User 123061 AUC after training: 0.7168539325842697
User 123061 does not improve AUC. Reverting changes.
Training on augumented user 16744 18/50 current_auc = 0.7173033707865168
User 16744 AUC after training: 0.7173033707865168
User 16744 does not improve AUC. Reverting changes.
Training on augumented user 43445 19/50 current_auc = 0.7173033707865168
User 43445 AUC after training: 0.7175280898876405
User 43445 improves AUC. Keeping the model.
Training on augumented user 131782 20/50 current_auc = 0.7175280898876405
User 131782 AUC after training: 0.7173033707865168
User 131782 does not improve AUC. Reverting changes.
Training on augumented user 98839 21/50 current_auc = 0.7175280898876405
User 98839 AUC after training: 0.717752808988764
User 98839 improves AUC. Keeping the model.
Training on augumented user 115102 22/50 current_auc = 0.717752808988764
User 115102 AUC after training: 0.7175280898876404
User 115102 does not improve AUC. Reverting changes.
Training on augumented user 17459 23/50 current_auc = 0.717752808988764
User 17459 AUC after training: 0.7182022471910112
User 17459 improves AUC. Keeping the model.
Training on augumented user 47049 24/50 current_auc = 0.7182022471910112
User 47049 AUC after training: 0.7182022471910112
User 47049 does not improve AUC. Reverting changes.
Training on augumented user 122536 25/50 current_auc = 0.7182022471910112
User 122536 AUC after training: 0.7173033707865168
User 122536 does not improve AUC. Reverting changes.
Training on augumented user 79140 26/50 current_auc = 0.7182022471910112
User 79140 AUC after training: 0.7179775280898877
User 79140 does not improve AUC. Reverting changes.
Training on augumented user 130014 27/50 current_auc = 0.7182022471910112
User 130014 AUC after training: 0.7164044943820225
User 130014 does not improve AUC. Reverting changes.
Training on augumented user 4738 28/50 current_auc = 0.7182022471910112
User 4738 AUC after training: 0.718876404494382
User 4738 improves AUC. Keeping the model.
Training on augumented user 116185 29/50 current_auc = 0.718876404494382
User 116185 AUC after training: 0.7184269662921348
User 116185 does not improve AUC. Reverting changes.
Training on augumented user 107300 30/50 current_auc = 0.718876404494382
User 107300 AUC after training: 0.7173033707865168
User 107300 does not improve AUC. Reverting changes.
Training on augumented user 48205 31/50 current_auc = 0.718876404494382
User 48205 AUC after training: 0.7191011235955056
User 48205 improves AUC. Keeping the model.
Training on augumented user 13114 32/50 current_auc = 0.7191011235955056
User 13114 AUC after training: 0.7193258426966292
User 13114 improves AUC. Keeping the model.
Training on augumented user 135003 33/50 current_auc = 0.7193258426966292
User 135003 AUC after training: 0.7186516853932584
User 135003 does not improve AUC. Reverting changes.
Training on augumented user 114638 34/50 current_auc = 0.7193258426966292
User 114638 AUC after training: 0.7186516853932583
User 114638 does not improve AUC. Reverting changes.
Training on augumented user 48620 35/50 current_auc = 0.7193258426966292
User 48620 AUC after training: 0.7191011235955057
User 48620 does not improve AUC. Reverting changes.
Training on augumented user 137449 36/50 current_auc = 0.7193258426966292
User 137449 AUC after training: 0.7175280898876404
User 137449 does not improve AUC. Reverting changes.
Training on augumented user 68501 37/50 current_auc = 0.7193258426966292
User 68501 AUC after training: 0.7161797752808989
User 68501 does not improve AUC. Reverting changes.
Training on augumented user 18226 38/50 current_auc = 0.7193258426966292
User 18226 AUC after training: 0.7175280898876404
User 18226 does not improve AUC. Reverting changes.
Training on augumented user 133605 39/50 current_auc = 0.7193258426966292
User 133605 AUC after training: 0.7195505617977528
User 133605 improves AUC. Keeping the model.
Training on augumented user 987 40/50 current_auc = 0.7195505617977528
User 987 AUC after training: 0.7191011235955056
User 987 does not improve AUC. Reverting changes.
Training on augumented user 32124 41/50 current_auc = 0.7195505617977528
User 32124 AUC after training: 0.7186516853932584
User 32124 does not improve AUC. Reverting changes.
Training on augumented user 123351 42/50 current_auc = 0.7195505617977528
User 123351 AUC after training: 0.718876404494382
User 123351 does not improve AUC. Reverting changes.
Training on augumented user 117563 43/50 current_auc = 0.7195505617977528
User 117563 AUC after training: 0.718876404494382
User 117563 does not improve AUC. Reverting changes.
Training on augumented user 54468 44/50 current_auc = 0.7195505617977528
User 54468 AUC after training: 0.7191011235955057
User 54468 does not improve AUC. Reverting changes.
Training on augumented user 77207 45/50 current_auc = 0.7195505617977528
User 77207 AUC after training: 0.7195505617977528
User 77207 does not improve AUC. Reverting changes.
Training on augumented user 1867 46/50 current_auc = 0.7195505617977528
User 1867 AUC after training: 0.7197752808988764
User 1867 improves AUC. Keeping the model.
Training on augumented user 136295 47/50 current_auc = 0.7197752808988764
User 136295 AUC after training: 0.7197752808988763
User 136295 does not improve AUC. Reverting changes.
Training on augumented user 4379 48/50 current_auc = 0.7197752808988764
User 4379 AUC after training: 0.7184269662921349
User 4379 does not improve AUC. Reverting changes.
Training on augumented user 110048 49/50 current_auc = 0.7197752808988764
User 110048 AUC after training: 0.7179775280898876
User 110048 does not improve AUC. Reverting changes.
[2024-12-02 18:36:13.071165] start test user 111982 109/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:36:13.820172] start test user 111982 109/567 recall augumented users by random, augumented_users = [82797, 113966, 133310, 58725, 68882, 98469, 18982, 133741, 19559, 128229, 33772, 6564, 70346, 105666, 105010, 75709, 15991, 18337, 109379, 35321, 116881, 134924, 35140, 130052, 68853, 52365, 91147, 110068, 61199, 27559, 52179, 99759, 34934, 106716, 44279, 121362, 92486, 11253, 85909, 55579, 49290, 108183, 76937, 85742, 50316, 8043, 57751, 42865, 120585, 61100]
[2024-12-02 18:36:13.843919] user = 111982 Cloud 109/567
[2024-12-02 18:36:13.939226] user = 111982 Local 109/567
[2024-12-02 18:36:14.205142] user = 111982 Local+ 109/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:36:16.916167] user = 111982 MPDA- 109/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6598417986213262
Training on augumented user 82797 0/50 current_auc = 0.6598417986213262
User 82797 AUC after training: 0.6599102996740791
User 82797 improves AUC. Keeping the model.
Training on augumented user 113966 1/50 current_auc = 0.6599102996740791
User 113966 AUC after training: 0.659924720948343
User 113966 improves AUC. Keeping the model.
Training on augumented user 133310 2/50 current_auc = 0.659924720948343
User 133310 AUC after training: 0.6599751954082663
User 133310 improves AUC. Keeping the model.
Training on augumented user 58725 3/50 current_auc = 0.6599751954082663
User 58725 AUC after training: 0.6601302241066019
User 58725 improves AUC. Keeping the model.
Training on augumented user 68882 4/50 current_auc = 0.6601302241066019
User 68882 AUC after training: 0.660624152750137
User 68882 improves AUC. Keeping the model.
Training on augumented user 98469 5/50 current_auc = 0.660624152750137
User 98469 AUC after training: 0.6603934123619162
User 98469 does not improve AUC. Reverting changes.
Training on augumented user 18982 6/50 current_auc = 0.660624152750137
User 18982 AUC after training: 0.660270831530674
User 18982 does not improve AUC. Reverting changes.
Training on augumented user 133741 7/50 current_auc = 0.660624152750137
User 133741 AUC after training: 0.6605232038302904
User 133741 does not improve AUC. Reverting changes.
Training on augumented user 19559 8/50 current_auc = 0.660624152750137
User 19559 AUC after training: 0.6604006229990481
User 19559 does not improve AUC. Reverting changes.
Training on augumented user 128229 9/50 current_auc = 0.660624152750137
User 128229 AUC after training: 0.6605051772374607
User 128229 does not improve AUC. Reverting changes.
Training on augumented user 33772 10/50 current_auc = 0.660624152750137
User 33772 AUC after training: 0.6604799400074991
User 33772 does not improve AUC. Reverting changes.
Training on augumented user 6564 11/50 current_auc = 0.660624152750137
User 6564 AUC after training: 0.6604799400074991
User 6564 does not improve AUC. Reverting changes.
Training on augumented user 70346 12/50 current_auc = 0.660624152750137
User 70346 AUC after training: 0.6597444550200456
User 70346 does not improve AUC. Reverting changes.
Training on augumented user 105666 13/50 current_auc = 0.660624152750137
User 105666 AUC after training: 0.6605232038302904
User 105666 does not improve AUC. Reverting changes.
Training on augumented user 105010 14/50 current_auc = 0.660624152750137
User 105010 AUC after training: 0.6604943612817629
User 105010 does not improve AUC. Reverting changes.
Training on augumented user 75709 15/50 current_auc = 0.660624152750137
User 75709 AUC after training: 0.6605808889273456
User 75709 does not improve AUC. Reverting changes.
Training on augumented user 15991 16/50 current_auc = 0.660624152750137
User 15991 AUC after training: 0.6604294655475758
User 15991 does not improve AUC. Reverting changes.
Training on augumented user 18337 17/50 current_auc = 0.660624152750137
User 18337 AUC after training: 0.6606529952986646
User 18337 improves AUC. Keeping the model.
Training on augumented user 109379 18/50 current_auc = 0.6606529952986646
User 109379 AUC after training: 0.6595461624989185
User 109379 does not improve AUC. Reverting changes.
Training on augumented user 35321 19/50 current_auc = 0.6606529952986646
User 35321 AUC after training: 0.6605376251045543
User 35321 does not improve AUC. Reverting changes.
Training on augumented user 116881 20/50 current_auc = 0.6606529952986646
User 116881 AUC after training: 0.6605087825560266
User 116881 does not improve AUC. Reverting changes.
Training on augumented user 134924 21/50 current_auc = 0.6606529952986646
User 134924 AUC after training: 0.6603177006720313
User 134924 does not improve AUC. Reverting changes.
Training on augumented user 35140 22/50 current_auc = 0.6606529952986646
User 35140 AUC after training: 0.6606566006172305
User 35140 improves AUC. Keeping the model.
Training on augumented user 130052 23/50 current_auc = 0.6606566006172305
User 130052 AUC after training: 0.6606674165729284
User 130052 improves AUC. Keeping the model.
Training on augumented user 68853 24/50 current_auc = 0.6606674165729284
User 68853 AUC after training: 0.6606782325286262
User 68853 improves AUC. Keeping the model.
Training on augumented user 52365 25/50 current_auc = 0.6606782325286262
User 52365 AUC after training: 0.6600112485939257
User 52365 does not improve AUC. Reverting changes.
Training on augumented user 91147 26/50 current_auc = 0.6606782325286262
User 91147 AUC after training: 0.6606457846615328
User 91147 does not improve AUC. Reverting changes.
Training on augumented user 110068 27/50 current_auc = 0.6606782325286262
User 110068 AUC after training: 0.6605051772374607
User 110068 does not improve AUC. Reverting changes.
Training on augumented user 61199 28/50 current_auc = 0.6606782325286262
User 61199 AUC after training: 0.660548441060252
User 61199 does not improve AUC. Reverting changes.
Training on augumented user 27559 29/50 current_auc = 0.6606782325286262
User 27559 AUC after training: 0.6606277580687029
User 27559 does not improve AUC. Reverting changes.
Training on augumented user 52179 30/50 current_auc = 0.6606782325286262
User 52179 AUC after training: 0.6605628623345158
User 52179 does not improve AUC. Reverting changes.
Training on augumented user 99759 31/50 current_auc = 0.6606782325286262
User 99759 AUC after training: 0.6601843038850914
User 99759 does not improve AUC. Reverting changes.
Training on augumented user 34934 32/50 current_auc = 0.6606782325286262
User 34934 AUC after training: 0.6605123878745927
User 34934 does not improve AUC. Reverting changes.
Training on augumented user 106716 33/50 current_auc = 0.6606782325286262
User 106716 AUC after training: 0.6605015719188947
User 106716 does not improve AUC. Reverting changes.
Training on augumented user 44279 34/50 current_auc = 0.6606782325286262
User 44279 AUC after training: 0.6605989155201754
User 44279 does not improve AUC. Reverting changes.
Training on augumented user 121362 35/50 current_auc = 0.6606782325286262
User 121362 AUC after training: 0.6604474921404055
User 121362 does not improve AUC. Reverting changes.
Training on augumented user 92486 36/50 current_auc = 0.6606782325286262
User 92486 AUC after training: 0.660696259121456
User 92486 improves AUC. Keeping the model.
Training on augumented user 11253 37/50 current_auc = 0.660696259121456
User 11253 AUC after training: 0.6609269995096766
User 11253 improves AUC. Keeping the model.
Training on augumented user 85909 38/50 current_auc = 0.6609269995096766
User 85909 AUC after training: 0.660768365492775
User 85909 does not improve AUC. Reverting changes.
Training on augumented user 55579 39/50 current_auc = 0.6609269995096766
User 55579 AUC after training: 0.6610063165181276
User 55579 improves AUC. Keeping the model.
Training on augumented user 49290 40/50 current_auc = 0.6610063165181276
User 49290 AUC after training: 0.6608693144126215
User 49290 does not improve AUC. Reverting changes.
Training on augumented user 108183 41/50 current_auc = 0.6610063165181276
User 108183 AUC after training: 0.6609558420582043
User 108183 does not improve AUC. Reverting changes.
Training on augumented user 76937 42/50 current_auc = 0.6610063165181276
User 76937 AUC after training: 0.6604727293703673
User 76937 does not improve AUC. Reverting changes.
Training on augumented user 85742 43/50 current_auc = 0.6610063165181276
User 85742 AUC after training: 0.6609846846067319
User 85742 does not improve AUC. Reverting changes.
Training on augumented user 50316 44/50 current_auc = 0.6610063165181276
User 50316 AUC after training: 0.6610567909780508
User 50316 improves AUC. Keeping the model.
Training on augumented user 8043 45/50 current_auc = 0.6610567909780508
User 8043 AUC after training: 0.6609991058809956
User 8043 does not improve AUC. Reverting changes.
Training on augumented user 57751 46/50 current_auc = 0.6610567909780508
User 57751 AUC after training: 0.6610784228894464
User 57751 improves AUC. Keeping the model.
Training on augumented user 42865 47/50 current_auc = 0.6610784228894464
User 42865 AUC after training: 0.661042369703787
User 42865 does not improve AUC. Reverting changes.
Training on augumented user 120585 48/50 current_auc = 0.6610784228894464
User 120585 AUC after training: 0.6610495803409189
User 120585 does not improve AUC. Reverting changes.
Training on augumented user 61100 49/50 current_auc = 0.6610784228894464
User 61100 AUC after training: 0.6598886677626834
User 61100 does not improve AUC. Reverting changes.
[2024-12-02 18:36:49.122084] start test user 112039 110/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:36:49.557086] start test user 112039 110/567 recall augumented users by random, augumented_users = [97800, 70725, 21611, 12220, 130751, 120650, 129191, 101407, 15207, 91944, 133643, 33136, 61000, 93149, 67123, 121120, 50552, 92097, 105740, 127752, 3280, 68782, 21867, 31944, 67730, 71516, 43267, 61688, 14774, 11701, 30684, 52772, 40284, 43840, 92368, 123755, 88769, 7525, 81592, 131831, 71797, 5002, 122169, 84279, 70194, 71399, 67167, 96623, 17146, 23332]
[2024-12-02 18:36:49.571605] user = 112039 Cloud 110/567
[2024-12-02 18:36:49.582730] user = 112039 Local 110/567
[2024-12-02 18:36:49.618037] user = 112039 Local+ 110/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:36:51.669684] user = 112039 MPDA- 110/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.588
Training on augumented user 97800 0/50 current_auc = 0.588
User 97800 AUC after training: 0.584
User 97800 does not improve AUC. Reverting changes.
Training on augumented user 70725 1/50 current_auc = 0.588
User 70725 AUC after training: 0.5860000000000001
User 70725 does not improve AUC. Reverting changes.
Training on augumented user 21611 2/50 current_auc = 0.588
User 21611 AUC after training: 0.582
User 21611 does not improve AUC. Reverting changes.
Training on augumented user 12220 3/50 current_auc = 0.588
User 12220 AUC after training: 0.588
User 12220 does not improve AUC. Reverting changes.
Training on augumented user 130751 4/50 current_auc = 0.588
User 130751 AUC after training: 0.586
User 130751 does not improve AUC. Reverting changes.
Training on augumented user 120650 5/50 current_auc = 0.588
User 120650 AUC after training: 0.5800000000000001
User 120650 does not improve AUC. Reverting changes.
Training on augumented user 129191 6/50 current_auc = 0.588
User 129191 AUC after training: 0.5820000000000001
User 129191 does not improve AUC. Reverting changes.
Training on augumented user 101407 7/50 current_auc = 0.588
User 101407 AUC after training: 0.5800000000000001
User 101407 does not improve AUC. Reverting changes.
Training on augumented user 15207 8/50 current_auc = 0.588
User 15207 AUC after training: 0.588
User 15207 does not improve AUC. Reverting changes.
Training on augumented user 91944 9/50 current_auc = 0.588
User 91944 AUC after training: 0.586
User 91944 does not improve AUC. Reverting changes.
Training on augumented user 133643 10/50 current_auc = 0.588
User 133643 AUC after training: 0.582
User 133643 does not improve AUC. Reverting changes.
Training on augumented user 33136 11/50 current_auc = 0.588
User 33136 AUC after training: 0.59
User 33136 improves AUC. Keeping the model.
Training on augumented user 61000 12/50 current_auc = 0.59
User 61000 AUC after training: 0.596
User 61000 improves AUC. Keeping the model.
Training on augumented user 93149 13/50 current_auc = 0.596
User 93149 AUC after training: 0.592
User 93149 does not improve AUC. Reverting changes.
Training on augumented user 67123 14/50 current_auc = 0.596
User 67123 AUC after training: 0.596
User 67123 does not improve AUC. Reverting changes.
Training on augumented user 121120 15/50 current_auc = 0.596
User 121120 AUC after training: 0.596
User 121120 does not improve AUC. Reverting changes.
Training on augumented user 50552 16/50 current_auc = 0.596
User 50552 AUC after training: 0.59
User 50552 does not improve AUC. Reverting changes.
Training on augumented user 92097 17/50 current_auc = 0.596
User 92097 AUC after training: 0.5940000000000001
User 92097 does not improve AUC. Reverting changes.
Training on augumented user 105740 18/50 current_auc = 0.596
User 105740 AUC after training: 0.596
User 105740 does not improve AUC. Reverting changes.
Training on augumented user 127752 19/50 current_auc = 0.596
User 127752 AUC after training: 0.5940000000000001
User 127752 does not improve AUC. Reverting changes.
Training on augumented user 3280 20/50 current_auc = 0.596
User 3280 AUC after training: 0.592
User 3280 does not improve AUC. Reverting changes.
Training on augumented user 68782 21/50 current_auc = 0.596
User 68782 AUC after training: 0.6
User 68782 improves AUC. Keeping the model.
Training on augumented user 21867 22/50 current_auc = 0.6
User 21867 AUC after training: 0.594
User 21867 does not improve AUC. Reverting changes.
Training on augumented user 31944 23/50 current_auc = 0.6
User 31944 AUC after training: 0.594
User 31944 does not improve AUC. Reverting changes.
Training on augumented user 67730 24/50 current_auc = 0.6
User 67730 AUC after training: 0.6
User 67730 does not improve AUC. Reverting changes.
Training on augumented user 71516 25/50 current_auc = 0.6
User 71516 AUC after training: 0.588
User 71516 does not improve AUC. Reverting changes.
Training on augumented user 43267 26/50 current_auc = 0.6
User 43267 AUC after training: 0.592
User 43267 does not improve AUC. Reverting changes.
Training on augumented user 61688 27/50 current_auc = 0.6
User 61688 AUC after training: 0.6
User 61688 does not improve AUC. Reverting changes.
Training on augumented user 14774 28/50 current_auc = 0.6
User 14774 AUC after training: 0.5940000000000001
User 14774 does not improve AUC. Reverting changes.
Training on augumented user 11701 29/50 current_auc = 0.6
User 11701 AUC after training: 0.6
User 11701 does not improve AUC. Reverting changes.
Training on augumented user 30684 30/50 current_auc = 0.6
User 30684 AUC after training: 0.596
User 30684 does not improve AUC. Reverting changes.
Training on augumented user 52772 31/50 current_auc = 0.6
User 52772 AUC after training: 0.596
User 52772 does not improve AUC. Reverting changes.
Training on augumented user 40284 32/50 current_auc = 0.6
User 40284 AUC after training: 0.596
User 40284 does not improve AUC. Reverting changes.
Training on augumented user 43840 33/50 current_auc = 0.6
User 43840 AUC after training: 0.596
User 43840 does not improve AUC. Reverting changes.
Training on augumented user 92368 34/50 current_auc = 0.6
User 92368 AUC after training: 0.598
User 92368 does not improve AUC. Reverting changes.
Training on augumented user 123755 35/50 current_auc = 0.6
User 123755 AUC after training: 0.594
User 123755 does not improve AUC. Reverting changes.
Training on augumented user 88769 36/50 current_auc = 0.6
User 88769 AUC after training: 0.594
User 88769 does not improve AUC. Reverting changes.
Training on augumented user 7525 37/50 current_auc = 0.6
User 7525 AUC after training: 0.598
User 7525 does not improve AUC. Reverting changes.
Training on augumented user 81592 38/50 current_auc = 0.6
User 81592 AUC after training: 0.596
User 81592 does not improve AUC. Reverting changes.
Training on augumented user 131831 39/50 current_auc = 0.6
User 131831 AUC after training: 0.598
User 131831 does not improve AUC. Reverting changes.
Training on augumented user 71797 40/50 current_auc = 0.6
User 71797 AUC after training: 0.594
User 71797 does not improve AUC. Reverting changes.
Training on augumented user 5002 41/50 current_auc = 0.6
User 5002 AUC after training: 0.59
User 5002 does not improve AUC. Reverting changes.
Training on augumented user 122169 42/50 current_auc = 0.6
User 122169 AUC after training: 0.582
User 122169 does not improve AUC. Reverting changes.
Training on augumented user 84279 43/50 current_auc = 0.6
User 84279 AUC after training: 0.598
User 84279 does not improve AUC. Reverting changes.
Training on augumented user 70194 44/50 current_auc = 0.6
User 70194 AUC after training: 0.598
User 70194 does not improve AUC. Reverting changes.
Training on augumented user 71399 45/50 current_auc = 0.6
User 71399 AUC after training: 0.596
User 71399 does not improve AUC. Reverting changes.
Training on augumented user 67167 46/50 current_auc = 0.6
User 67167 AUC after training: 0.596
User 67167 does not improve AUC. Reverting changes.
Training on augumented user 96623 47/50 current_auc = 0.6
User 96623 AUC after training: 0.598
User 96623 does not improve AUC. Reverting changes.
Training on augumented user 17146 48/50 current_auc = 0.6
User 17146 AUC after training: 0.598
User 17146 does not improve AUC. Reverting changes.
Training on augumented user 23332 49/50 current_auc = 0.6
User 23332 AUC after training: 0.598
User 23332 does not improve AUC. Reverting changes.
[2024-12-02 18:37:18.282761] start test user 112049 111/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:37:19.140980] start test user 112049 111/567 recall augumented users by random, augumented_users = [102437, 105562, 25413, 39451, 84549, 96217, 78852, 60862, 13777, 4525, 55236, 1247, 99625, 89629, 113093, 62665, 132949, 109907, 33800, 60128, 111939, 6781, 102676, 25057, 34200, 136340, 42652, 32385, 60930, 134455, 135824, 14464, 4254, 104231, 116483, 51119, 31276, 28198, 86108, 92664, 58325, 15386, 30562, 110453, 61556, 14697, 20235, 86812, 51907, 72292]
[2024-12-02 18:37:19.162081] user = 112049 Cloud 111/567
[2024-12-02 18:37:19.202460] user = 112049 Local 111/567
[2024-12-02 18:37:19.441371] user = 112049 Local+ 111/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:37:22.091654] user = 112049 MPDA- 111/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6516105146242133
Training on augumented user 102437 0/50 current_auc = 0.6516105146242133
User 102437 AUC after training: 0.6519807478711589
User 102437 improves AUC. Keeping the model.
Training on augumented user 105562 1/50 current_auc = 0.6519807478711589
User 105562 AUC after training: 0.6508700481303222
User 105562 does not improve AUC. Reverting changes.
Training on augumented user 25413 2/50 current_auc = 0.6519807478711589
User 25413 AUC after training: 0.6516105146242133
User 25413 does not improve AUC. Reverting changes.
Training on augumented user 39451 3/50 current_auc = 0.6519807478711589
User 39451 AUC after training: 0.6530914476119956
User 39451 improves AUC. Keeping the model.
Training on augumented user 84549 4/50 current_auc = 0.6530914476119956
User 84549 AUC after training: 0.6523509811181044
User 84549 does not improve AUC. Reverting changes.
Training on augumented user 96217 5/50 current_auc = 0.6530914476119956
User 96217 AUC after training: 0.6556830803406146
User 96217 improves AUC. Keeping the model.
Training on augumented user 78852 6/50 current_auc = 0.6556830803406146
User 78852 AUC after training: 0.6549426138467235
User 78852 does not improve AUC. Reverting changes.
Training on augumented user 60862 7/50 current_auc = 0.6556830803406146
User 60862 AUC after training: 0.6564235468345059
User 60862 improves AUC. Keeping the model.
Training on augumented user 13777 8/50 current_auc = 0.6564235468345059
User 13777 AUC after training: 0.6567937800814514
User 13777 improves AUC. Keeping the model.
Training on augumented user 4525 9/50 current_auc = 0.6567937800814514
User 4525 AUC after training: 0.6560533135875602
User 4525 does not improve AUC. Reverting changes.
Training on augumented user 55236 10/50 current_auc = 0.6567937800814514
User 55236 AUC after training: 0.6564235468345059
User 55236 does not improve AUC. Reverting changes.
Training on augumented user 1247 11/50 current_auc = 0.6567937800814514
User 1247 AUC after training: 0.6575342465753425
User 1247 improves AUC. Keeping the model.
Training on augumented user 99625 12/50 current_auc = 0.6575342465753425
User 99625 AUC after training: 0.6575342465753424
User 99625 does not improve AUC. Reverting changes.
Training on augumented user 89629 13/50 current_auc = 0.6575342465753425
User 89629 AUC after training: 0.6579044798222882
User 89629 improves AUC. Keeping the model.
Training on augumented user 113093 14/50 current_auc = 0.6579044798222882
User 113093 AUC after training: 0.6586449463161792
User 113093 improves AUC. Keeping the model.
Training on augumented user 62665 15/50 current_auc = 0.6586449463161792
User 62665 AUC after training: 0.6579044798222882
User 62665 does not improve AUC. Reverting changes.
Training on augumented user 132949 16/50 current_auc = 0.6586449463161792
User 132949 AUC after training: 0.6590151795631247
User 132949 improves AUC. Keeping the model.
Training on augumented user 109907 17/50 current_auc = 0.6590151795631247
User 109907 AUC after training: 0.6575342465753425
User 109907 does not improve AUC. Reverting changes.
Training on augumented user 33800 18/50 current_auc = 0.6590151795631247
User 33800 AUC after training: 0.6560533135875601
User 33800 does not improve AUC. Reverting changes.
Training on augumented user 60128 19/50 current_auc = 0.6590151795631247
User 60128 AUC after training: 0.6575342465753425
User 60128 does not improve AUC. Reverting changes.
Training on augumented user 111939 20/50 current_auc = 0.6590151795631247
User 111939 AUC after training: 0.6593854128100703
User 111939 improves AUC. Keeping the model.
Training on augumented user 6781 21/50 current_auc = 0.6593854128100703
User 6781 AUC after training: 0.6564235468345058
User 6781 does not improve AUC. Reverting changes.
Training on augumented user 102676 22/50 current_auc = 0.6593854128100703
User 102676 AUC after training: 0.6590151795631247
User 102676 does not improve AUC. Reverting changes.
Training on augumented user 25057 23/50 current_auc = 0.6593854128100703
User 25057 AUC after training: 0.6590151795631248
User 25057 does not improve AUC. Reverting changes.
Training on augumented user 34200 24/50 current_auc = 0.6593854128100703
User 34200 AUC after training: 0.6582747130692337
User 34200 does not improve AUC. Reverting changes.
Training on augumented user 136340 25/50 current_auc = 0.6593854128100703
User 136340 AUC after training: 0.6582747130692337
User 136340 does not improve AUC. Reverting changes.
Training on augumented user 42652 26/50 current_auc = 0.6593854128100703
User 42652 AUC after training: 0.6586449463161792
User 42652 does not improve AUC. Reverting changes.
Training on augumented user 32385 27/50 current_auc = 0.6593854128100703
User 32385 AUC after training: 0.6593854128100705
User 32385 improves AUC. Keeping the model.
Training on augumented user 60930 28/50 current_auc = 0.6593854128100705
User 60930 AUC after training: 0.6590151795631248
User 60930 does not improve AUC. Reverting changes.
Training on augumented user 134455 29/50 current_auc = 0.6593854128100705
User 134455 AUC after training: 0.6579044798222881
User 134455 does not improve AUC. Reverting changes.
Training on augumented user 135824 30/50 current_auc = 0.6593854128100705
User 135824 AUC after training: 0.6579044798222881
User 135824 does not improve AUC. Reverting changes.
Training on augumented user 14464 31/50 current_auc = 0.6593854128100705
User 14464 AUC after training: 0.6579044798222881
User 14464 does not improve AUC. Reverting changes.
Training on augumented user 4254 32/50 current_auc = 0.6593854128100705
User 4254 AUC after training: 0.6579044798222881
User 4254 does not improve AUC. Reverting changes.
Training on augumented user 104231 33/50 current_auc = 0.6593854128100705
User 104231 AUC after training: 0.6582747130692337
User 104231 does not improve AUC. Reverting changes.
Training on augumented user 116483 34/50 current_auc = 0.6593854128100705
User 116483 AUC after training: 0.659755646057016
User 116483 improves AUC. Keeping the model.
Training on augumented user 51119 35/50 current_auc = 0.659755646057016
User 51119 AUC after training: 0.6586449463161792
User 51119 does not improve AUC. Reverting changes.
Training on augumented user 31276 36/50 current_auc = 0.659755646057016
User 31276 AUC after training: 0.6560533135875601
User 31276 does not improve AUC. Reverting changes.
Training on augumented user 28198 37/50 current_auc = 0.659755646057016
User 28198 AUC after training: 0.6593854128100705
User 28198 does not improve AUC. Reverting changes.
Training on augumented user 86108 38/50 current_auc = 0.659755646057016
User 86108 AUC after training: 0.6601258793039615
User 86108 improves AUC. Keeping the model.
Training on augumented user 92664 39/50 current_auc = 0.6601258793039615
User 92664 AUC after training: 0.6608663457978528
User 92664 improves AUC. Keeping the model.
Training on augumented user 58325 40/50 current_auc = 0.6608663457978528
User 58325 AUC after training: 0.6604961125509071
User 58325 does not improve AUC. Reverting changes.
Training on augumented user 15386 41/50 current_auc = 0.6608663457978528
User 15386 AUC after training: 0.6612365790447983
User 15386 improves AUC. Keeping the model.
Training on augumented user 30562 42/50 current_auc = 0.6612365790447983
User 30562 AUC after training: 0.6586449463161792
User 30562 does not improve AUC. Reverting changes.
Training on augumented user 110453 43/50 current_auc = 0.6612365790447983
User 110453 AUC after training: 0.6608663457978528
User 110453 does not improve AUC. Reverting changes.
Training on augumented user 61556 44/50 current_auc = 0.6612365790447983
User 61556 AUC after training: 0.6612365790447983
User 61556 does not improve AUC. Reverting changes.
Training on augumented user 14697 45/50 current_auc = 0.6612365790447983
User 14697 AUC after training: 0.6627175120325806
User 14697 improves AUC. Keeping the model.
Training on augumented user 20235 46/50 current_auc = 0.6627175120325806
User 20235 AUC after training: 0.6579044798222881
User 20235 does not improve AUC. Reverting changes.
Training on augumented user 86812 47/50 current_auc = 0.6627175120325806
User 86812 AUC after training: 0.6619770455386893
User 86812 does not improve AUC. Reverting changes.
Training on augumented user 51907 48/50 current_auc = 0.6627175120325806
User 51907 AUC after training: 0.6582747130692337
User 51907 does not improve AUC. Reverting changes.
Training on augumented user 72292 49/50 current_auc = 0.6627175120325806
User 72292 AUC after training: 0.6619770455386894
User 72292 does not improve AUC. Reverting changes.
[2024-12-02 18:37:46.587517] start test user 112174 112/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:37:47.020391] start test user 112174 112/567 recall augumented users by random, augumented_users = [63434, 93240, 114207, 21222, 62236, 37243, 97803, 19583, 82745, 21383, 96922, 135363, 61518, 75741, 24105, 4444, 10760, 90824, 6715, 103571, 3876, 105888, 93722, 37041, 13100, 74899, 74527, 125625, 6487, 128257, 135357, 48468, 122491, 2218, 35930, 88181, 50267, 67344, 55549, 117662, 83490, 120928, 97892, 109906, 8911, 64319, 79037, 98561, 94899, 89686]
[2024-12-02 18:37:47.036037] user = 112174 Cloud 112/567
[2024-12-02 18:37:47.061897] user = 112174 Local 112/567
[2024-12-02 18:37:47.168252] user = 112174 Local+ 112/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:37:50.027682] user = 112174 MPDA- 112/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7080701754385965
Training on augumented user 63434 0/50 current_auc = 0.7080701754385965
User 63434 AUC after training: 0.7077631578947369
User 63434 does not improve AUC. Reverting changes.
Training on augumented user 93240 1/50 current_auc = 0.7080701754385965
User 93240 AUC after training: 0.7081140350877193
User 93240 improves AUC. Keeping the model.
Training on augumented user 114207 2/50 current_auc = 0.7081140350877193
User 114207 AUC after training: 0.7080701754385965
User 114207 does not improve AUC. Reverting changes.
Training on augumented user 21222 3/50 current_auc = 0.7081140350877193
User 21222 AUC after training: 0.7081140350877193
User 21222 does not improve AUC. Reverting changes.
Training on augumented user 62236 4/50 current_auc = 0.7081140350877193
User 62236 AUC after training: 0.7082894736842105
User 62236 improves AUC. Keeping the model.
Training on augumented user 37243 5/50 current_auc = 0.7082894736842105
User 37243 AUC after training: 0.707938596491228
User 37243 does not improve AUC. Reverting changes.
Training on augumented user 97803 6/50 current_auc = 0.7082894736842105
User 97803 AUC after training: 0.7080701754385964
User 97803 does not improve AUC. Reverting changes.
Training on augumented user 19583 7/50 current_auc = 0.7082894736842105
User 19583 AUC after training: 0.7077631578947369
User 19583 does not improve AUC. Reverting changes.
Training on augumented user 82745 8/50 current_auc = 0.7082894736842105
User 82745 AUC after training: 0.7085087719298246
User 82745 improves AUC. Keeping the model.
Training on augumented user 21383 9/50 current_auc = 0.7085087719298246
User 21383 AUC after training: 0.7083333333333334
User 21383 does not improve AUC. Reverting changes.
Training on augumented user 96922 10/50 current_auc = 0.7085087719298246
User 96922 AUC after training: 0.707938596491228
User 96922 does not improve AUC. Reverting changes.
Training on augumented user 135363 11/50 current_auc = 0.7085087719298246
User 135363 AUC after training: 0.7077192982456141
User 135363 does not improve AUC. Reverting changes.
Training on augumented user 61518 12/50 current_auc = 0.7085087719298246
User 61518 AUC after training: 0.7085087719298245
User 61518 does not improve AUC. Reverting changes.
Training on augumented user 75741 13/50 current_auc = 0.7085087719298246
User 75741 AUC after training: 0.7088157894736843
User 75741 improves AUC. Keeping the model.
Training on augumented user 24105 14/50 current_auc = 0.7088157894736843
User 24105 AUC after training: 0.708640350877193
User 24105 does not improve AUC. Reverting changes.
Training on augumented user 4444 15/50 current_auc = 0.7088157894736843
User 4444 AUC after training: 0.7084649122807017
User 4444 does not improve AUC. Reverting changes.
Training on augumented user 10760 16/50 current_auc = 0.7088157894736843
User 10760 AUC after training: 0.7084649122807017
User 10760 does not improve AUC. Reverting changes.
Training on augumented user 90824 17/50 current_auc = 0.7088157894736843
User 90824 AUC after training: 0.7082456140350877
User 90824 does not improve AUC. Reverting changes.
Training on augumented user 6715 18/50 current_auc = 0.7088157894736843
User 6715 AUC after training: 0.7080701754385965
User 6715 does not improve AUC. Reverting changes.
Training on augumented user 103571 19/50 current_auc = 0.7088157894736843
User 103571 AUC after training: 0.7087719298245614
User 103571 does not improve AUC. Reverting changes.
Training on augumented user 3876 20/50 current_auc = 0.7088157894736843
User 3876 AUC after training: 0.7083333333333334
User 3876 does not improve AUC. Reverting changes.
Training on augumented user 105888 21/50 current_auc = 0.7088157894736843
User 105888 AUC after training: 0.7085964912280701
User 105888 does not improve AUC. Reverting changes.
Training on augumented user 93722 22/50 current_auc = 0.7088157894736843
User 93722 AUC after training: 0.7087719298245614
User 93722 does not improve AUC. Reverting changes.
Training on augumented user 37041 23/50 current_auc = 0.7088157894736843
User 37041 AUC after training: 0.7091666666666666
User 37041 improves AUC. Keeping the model.
Training on augumented user 13100 24/50 current_auc = 0.7091666666666666
User 13100 AUC after training: 0.7089473684210527
User 13100 does not improve AUC. Reverting changes.
Training on augumented user 74899 25/50 current_auc = 0.7091666666666666
User 74899 AUC after training: 0.708859649122807
User 74899 does not improve AUC. Reverting changes.
Training on augumented user 74527 26/50 current_auc = 0.7091666666666666
User 74527 AUC after training: 0.7087280701754386
User 74527 does not improve AUC. Reverting changes.
Training on augumented user 125625 27/50 current_auc = 0.7091666666666666
User 125625 AUC after training: 0.7090350877192982
User 125625 does not improve AUC. Reverting changes.
Training on augumented user 6487 28/50 current_auc = 0.7091666666666666
User 6487 AUC after training: 0.709078947368421
User 6487 does not improve AUC. Reverting changes.
Training on augumented user 128257 29/50 current_auc = 0.7091666666666666
User 128257 AUC after training: 0.7085964912280702
User 128257 does not improve AUC. Reverting changes.
Training on augumented user 135357 30/50 current_auc = 0.7091666666666666
User 135357 AUC after training: 0.7089035087719298
User 135357 does not improve AUC. Reverting changes.
Training on augumented user 48468 31/50 current_auc = 0.7091666666666666
User 48468 AUC after training: 0.7089912280701754
User 48468 does not improve AUC. Reverting changes.
Training on augumented user 122491 32/50 current_auc = 0.7091666666666666
User 122491 AUC after training: 0.7086842105263158
User 122491 does not improve AUC. Reverting changes.
Training on augumented user 2218 33/50 current_auc = 0.7091666666666666
User 2218 AUC after training: 0.7088157894736843
User 2218 does not improve AUC. Reverting changes.
Training on augumented user 35930 34/50 current_auc = 0.7091666666666666
User 35930 AUC after training: 0.7080263157894737
User 35930 does not improve AUC. Reverting changes.
Training on augumented user 88181 35/50 current_auc = 0.7091666666666666
User 88181 AUC after training: 0.7079824561403508
User 88181 does not improve AUC. Reverting changes.
Training on augumented user 50267 36/50 current_auc = 0.7091666666666666
User 50267 AUC after training: 0.7089473684210527
User 50267 does not improve AUC. Reverting changes.
Training on augumented user 67344 37/50 current_auc = 0.7091666666666666
User 67344 AUC after training: 0.7088157894736842
User 67344 does not improve AUC. Reverting changes.
Training on augumented user 55549 38/50 current_auc = 0.7091666666666666
User 55549 AUC after training: 0.7092543859649123
User 55549 improves AUC. Keeping the model.
Training on augumented user 117662 39/50 current_auc = 0.7092543859649123
User 117662 AUC after training: 0.707938596491228
User 117662 does not improve AUC. Reverting changes.
Training on augumented user 83490 40/50 current_auc = 0.7092543859649123
User 83490 AUC after training: 0.7089473684210527
User 83490 does not improve AUC. Reverting changes.
Training on augumented user 120928 41/50 current_auc = 0.7092543859649123
User 120928 AUC after training: 0.7091228070175438
User 120928 does not improve AUC. Reverting changes.
Training on augumented user 97892 42/50 current_auc = 0.7092543859649123
User 97892 AUC after training: 0.7087719298245614
User 97892 does not improve AUC. Reverting changes.
Training on augumented user 109906 43/50 current_auc = 0.7092543859649123
User 109906 AUC after training: 0.708969298245614
User 109906 does not improve AUC. Reverting changes.
Training on augumented user 8911 44/50 current_auc = 0.7092543859649123
User 8911 AUC after training: 0.7086842105263158
User 8911 does not improve AUC. Reverting changes.
Training on augumented user 64319 45/50 current_auc = 0.7092543859649123
User 64319 AUC after training: 0.7087280701754386
User 64319 does not improve AUC. Reverting changes.
Training on augumented user 79037 46/50 current_auc = 0.7092543859649123
User 79037 AUC after training: 0.7085087719298245
User 79037 does not improve AUC. Reverting changes.
Training on augumented user 98561 47/50 current_auc = 0.7092543859649123
User 98561 AUC after training: 0.7089473684210527
User 98561 does not improve AUC. Reverting changes.
Training on augumented user 94899 48/50 current_auc = 0.7092543859649123
User 94899 AUC after training: 0.7087280701754386
User 94899 does not improve AUC. Reverting changes.
Training on augumented user 89686 49/50 current_auc = 0.7092543859649123
User 89686 AUC after training: 0.7090350877192982
User 89686 does not improve AUC. Reverting changes.
[2024-12-02 18:38:24.038047] start test user 112203 113/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:38:24.527632] start test user 112203 113/567 recall augumented users by random, augumented_users = [24601, 85889, 44871, 23921, 11258, 15619, 38917, 106065, 43267, 62827, 40020, 95946, 132225, 35081, 67550, 54825, 37345, 95098, 27182, 84813, 26988, 134550, 127609, 83463, 50009, 34250, 86899, 55456, 134340, 109895, 21349, 66541, 68711, 22468, 86684, 101402, 61742, 31174, 47386, 21982, 76604, 107774, 60572, 131373, 51546, 123418, 78156, 102021, 98269, 27123]
[2024-12-02 18:38:24.544301] user = 112203 Cloud 113/567
[2024-12-02 18:38:24.562806] user = 112203 Local 113/567
[2024-12-02 18:38:24.772576] user = 112203 Local+ 113/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:38:27.557293] user = 112203 MPDA- 113/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6459270364817591
Training on augumented user 24601 0/50 current_auc = 0.6459270364817591
User 24601 AUC after training: 0.6461769115442278
User 24601 improves AUC. Keeping the model.
Training on augumented user 85889 1/50 current_auc = 0.6461769115442278
User 85889 AUC after training: 0.6456771614192903
User 85889 does not improve AUC. Reverting changes.
Training on augumented user 44871 2/50 current_auc = 0.6461769115442278
User 44871 AUC after training: 0.645552223888056
User 44871 does not improve AUC. Reverting changes.
Training on augumented user 23921 3/50 current_auc = 0.6461769115442278
User 23921 AUC after training: 0.646551724137931
User 23921 improves AUC. Keeping the model.
Training on augumented user 11258 4/50 current_auc = 0.646551724137931
User 11258 AUC after training: 0.6460519740129935
User 11258 does not improve AUC. Reverting changes.
Training on augumented user 15619 5/50 current_auc = 0.646551724137931
User 15619 AUC after training: 0.6478010994502749
User 15619 improves AUC. Keeping the model.
Training on augumented user 38917 6/50 current_auc = 0.6478010994502749
User 38917 AUC after training: 0.6484257871064467
User 38917 improves AUC. Keeping the model.
Training on augumented user 106065 7/50 current_auc = 0.6484257871064467
User 106065 AUC after training: 0.6429285357321339
User 106065 does not improve AUC. Reverting changes.
Training on augumented user 43267 8/50 current_auc = 0.6484257871064467
User 43267 AUC after training: 0.6483008495752124
User 43267 does not improve AUC. Reverting changes.
Training on augumented user 62827 9/50 current_auc = 0.6484257871064467
User 62827 AUC after training: 0.648175912043978
User 62827 does not improve AUC. Reverting changes.
Training on augumented user 40020 10/50 current_auc = 0.6484257871064467
User 40020 AUC after training: 0.6440529735132433
User 40020 does not improve AUC. Reverting changes.
Training on augumented user 95946 11/50 current_auc = 0.6484257871064467
User 95946 AUC after training: 0.6479260369815092
User 95946 does not improve AUC. Reverting changes.
Training on augumented user 132225 12/50 current_auc = 0.6484257871064467
User 132225 AUC after training: 0.6478010994502749
User 132225 does not improve AUC. Reverting changes.
Training on augumented user 35081 13/50 current_auc = 0.6484257871064467
User 35081 AUC after training: 0.6478010994502749
User 35081 does not improve AUC. Reverting changes.
Training on augumented user 67550 14/50 current_auc = 0.6484257871064467
User 67550 AUC after training: 0.6483008495752123
User 67550 does not improve AUC. Reverting changes.
Training on augumented user 54825 15/50 current_auc = 0.6484257871064467
User 54825 AUC after training: 0.6469265367316341
User 54825 does not improve AUC. Reverting changes.
Training on augumented user 37345 16/50 current_auc = 0.6484257871064467
User 37345 AUC after training: 0.6466766616691654
User 37345 does not improve AUC. Reverting changes.
Training on augumented user 95098 17/50 current_auc = 0.6484257871064467
User 95098 AUC after training: 0.6478010994502749
User 95098 does not improve AUC. Reverting changes.
Training on augumented user 27182 18/50 current_auc = 0.6484257871064467
User 27182 AUC after training: 0.6489255372313844
User 27182 improves AUC. Keeping the model.
Training on augumented user 84813 19/50 current_auc = 0.6489255372313844
User 84813 AUC after training: 0.6488005997001499
User 84813 does not improve AUC. Reverting changes.
Training on augumented user 26988 20/50 current_auc = 0.6489255372313844
User 26988 AUC after training: 0.6483008495752124
User 26988 does not improve AUC. Reverting changes.
Training on augumented user 134550 21/50 current_auc = 0.6489255372313844
User 134550 AUC after training: 0.6483008495752124
User 134550 does not improve AUC. Reverting changes.
Training on augumented user 127609 22/50 current_auc = 0.6489255372313844
User 127609 AUC after training: 0.6490504747626187
User 127609 improves AUC. Keeping the model.
Training on augumented user 83463 23/50 current_auc = 0.6490504747626187
User 83463 AUC after training: 0.6486756621689156
User 83463 does not improve AUC. Reverting changes.
Training on augumented user 50009 24/50 current_auc = 0.6490504747626187
User 50009 AUC after training: 0.6489255372313844
User 50009 does not improve AUC. Reverting changes.
Training on augumented user 34250 25/50 current_auc = 0.6490504747626187
User 34250 AUC after training: 0.6479260369815092
User 34250 does not improve AUC. Reverting changes.
Training on augumented user 86899 26/50 current_auc = 0.6490504747626187
User 86899 AUC after training: 0.6478010994502749
User 86899 does not improve AUC. Reverting changes.
Training on augumented user 55456 27/50 current_auc = 0.6490504747626187
User 55456 AUC after training: 0.646551724137931
User 55456 does not improve AUC. Reverting changes.
Training on augumented user 134340 28/50 current_auc = 0.6490504747626187
User 134340 AUC after training: 0.6461769115442278
User 134340 does not improve AUC. Reverting changes.
Training on augumented user 109895 29/50 current_auc = 0.6490504747626187
User 109895 AUC after training: 0.6453023488255871
User 109895 does not improve AUC. Reverting changes.
Training on augumented user 21349 30/50 current_auc = 0.6490504747626187
User 21349 AUC after training: 0.643303348325837
User 21349 does not improve AUC. Reverting changes.
Training on augumented user 66541 31/50 current_auc = 0.6490504747626187
User 66541 AUC after training: 0.6485507246376812
User 66541 does not improve AUC. Reverting changes.
Training on augumented user 68711 32/50 current_auc = 0.6490504747626187
User 68711 AUC after training: 0.6489255372313844
User 68711 does not improve AUC. Reverting changes.
Training on augumented user 22468 33/50 current_auc = 0.6490504747626187
User 22468 AUC after training: 0.6484257871064468
User 22468 does not improve AUC. Reverting changes.
Training on augumented user 86684 34/50 current_auc = 0.6490504747626187
User 86684 AUC after training: 0.644927536231884
User 86684 does not improve AUC. Reverting changes.
Training on augumented user 101402 35/50 current_auc = 0.6490504747626187
User 101402 AUC after training: 0.6476761619190404
User 101402 does not improve AUC. Reverting changes.
Training on augumented user 61742 36/50 current_auc = 0.6490504747626187
User 61742 AUC after training: 0.6483008495752124
User 61742 does not improve AUC. Reverting changes.
Training on augumented user 31174 37/50 current_auc = 0.6490504747626187
User 31174 AUC after training: 0.6494252873563218
User 31174 improves AUC. Keeping the model.
Training on augumented user 47386 38/50 current_auc = 0.6494252873563218
User 47386 AUC after training: 0.6486756621689155
User 47386 does not improve AUC. Reverting changes.
Training on augumented user 21982 39/50 current_auc = 0.6494252873563218
User 21982 AUC after training: 0.6496751624187906
User 21982 improves AUC. Keeping the model.
Training on augumented user 76604 40/50 current_auc = 0.6496751624187906
User 76604 AUC after training: 0.6501749125437282
User 76604 improves AUC. Keeping the model.
Training on augumented user 107774 41/50 current_auc = 0.6501749125437282
User 107774 AUC after training: 0.6501749125437281
User 107774 does not improve AUC. Reverting changes.
Training on augumented user 60572 42/50 current_auc = 0.6501749125437282
User 60572 AUC after training: 0.6499250374812593
User 60572 does not improve AUC. Reverting changes.
Training on augumented user 131373 43/50 current_auc = 0.6501749125437282
User 131373 AUC after training: 0.649800099950025
User 131373 does not improve AUC. Reverting changes.
Training on augumented user 51546 44/50 current_auc = 0.6501749125437282
User 51546 AUC after training: 0.6494252873563218
User 51546 does not improve AUC. Reverting changes.
Training on augumented user 123418 45/50 current_auc = 0.6501749125437282
User 123418 AUC after training: 0.6490504747626187
User 123418 does not improve AUC. Reverting changes.
Training on augumented user 78156 46/50 current_auc = 0.6501749125437282
User 78156 AUC after training: 0.6495502248875562
User 78156 does not improve AUC. Reverting changes.
Training on augumented user 102021 47/50 current_auc = 0.6501749125437282
User 102021 AUC after training: 0.6500499750124937
User 102021 does not improve AUC. Reverting changes.
Training on augumented user 98269 48/50 current_auc = 0.6501749125437282
User 98269 AUC after training: 0.6500499750124937
User 98269 does not improve AUC. Reverting changes.
Training on augumented user 27123 49/50 current_auc = 0.6501749125437282
User 27123 AUC after training: 0.6495502248875563
User 27123 does not improve AUC. Reverting changes.
[2024-12-02 18:38:51.625671] start test user 112204 114/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:38:52.065500] start test user 112204 114/567 recall augumented users by random, augumented_users = [123513, 49526, 8704, 135738, 60356, 87592, 32872, 4622, 109405, 118570, 38029, 38648, 24963, 67183, 12026, 100133, 27624, 22400, 127024, 103627, 57561, 19836, 128236, 48490, 51956, 133296, 71197, 20026, 134061, 26506, 30264, 54420, 93409, 58650, 64693, 79613, 21322, 7828, 125313, 37326, 8343, 110011, 8762, 90120, 95780, 104793, 119978, 39264, 83260, 68348]
[2024-12-02 18:38:52.080539] user = 112204 Cloud 114/567
[2024-12-02 18:38:52.112455] user = 112204 Local 114/567
[2024-12-02 18:38:52.179307] user = 112204 Local+ 114/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:38:54.618748] user = 112204 MPDA- 114/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7151818978742056
Training on augumented user 123513 0/50 current_auc = 0.7151818978742056
User 123513 AUC after training: 0.7131273285119439
User 123513 does not improve AUC. Reverting changes.
Training on augumented user 49526 1/50 current_auc = 0.7151818978742056
User 49526 AUC after training: 0.7152092921323691
User 49526 improves AUC. Keeping the model.
Training on augumented user 8704 2/50 current_auc = 0.7152092921323691
User 8704 AUC after training: 0.7152914749068595
User 8704 improves AUC. Keeping the model.
Training on augumented user 135738 3/50 current_auc = 0.7152914749068595
User 135738 AUC after training: 0.7161680911680911
User 135738 improves AUC. Keeping the model.
Training on augumented user 60356 4/50 current_auc = 0.7161680911680911
User 60356 AUC after training: 0.7161133026517642
User 60356 does not improve AUC. Reverting changes.
Training on augumented user 87592 5/50 current_auc = 0.7161680911680911
User 87592 AUC after training: 0.716770764847688
User 87592 improves AUC. Keeping the model.
Training on augumented user 32872 6/50 current_auc = 0.716770764847688
User 32872 AUC after training: 0.7154010519395135
User 32872 does not improve AUC. Reverting changes.
Training on augumented user 4622 7/50 current_auc = 0.716770764847688
User 4622 AUC after training: 0.7181952662721893
User 4622 improves AUC. Keeping the model.
Training on augumented user 109405 8/50 current_auc = 0.7181952662721893
User 109405 AUC after training: 0.7193184308568923
User 109405 improves AUC. Keeping the model.
Training on augumented user 118570 9/50 current_auc = 0.7193184308568923
User 118570 AUC after training: 0.7183048433048432
User 118570 does not improve AUC. Reverting changes.
Training on augumented user 38029 10/50 current_auc = 0.7193184308568923
User 38029 AUC after training: 0.7203868069252685
User 38029 improves AUC. Keeping the model.
Training on augumented user 38648 11/50 current_auc = 0.7203868069252685
User 38648 AUC after training: 0.7212634231864999
User 38648 improves AUC. Keeping the model.
Training on augumented user 24963 12/50 current_auc = 0.7212634231864999
User 24963 AUC after training: 0.7196471619548542
User 24963 does not improve AUC. Reverting changes.
Training on augumented user 67183 13/50 current_auc = 0.7212634231864999
User 67183 AUC after training: 0.7214003944773175
User 67183 improves AUC. Keeping the model.
Training on augumented user 12026 14/50 current_auc = 0.7214003944773175
User 12026 AUC after training: 0.7244959456497918
User 12026 improves AUC. Keeping the model.
Training on augumented user 100133 15/50 current_auc = 0.7244959456497918
User 100133 AUC after training: 0.7246603111987728
User 100133 improves AUC. Keeping the model.
Training on augumented user 27624 16/50 current_auc = 0.7246603111987728
User 27624 AUC after training: 0.724112426035503
User 27624 does not improve AUC. Reverting changes.
Training on augumented user 22400 17/50 current_auc = 0.7246603111987728
User 22400 AUC after training: 0.7239754547446856
User 22400 does not improve AUC. Reverting changes.
Training on augumented user 127024 18/50 current_auc = 0.7246603111987728
User 127024 AUC after training: 0.725180802103879
User 127024 improves AUC. Keeping the model.
Training on augumented user 103627 19/50 current_auc = 0.725180802103879
User 103627 AUC after training: 0.7257012930089853
User 103627 improves AUC. Keeping the model.
Training on augumented user 57561 20/50 current_auc = 0.7257012930089853
User 57561 AUC after training: 0.7267696690773612
User 57561 improves AUC. Keeping the model.
Training on augumented user 19836 21/50 current_auc = 0.7267696690773612
User 19836 AUC after training: 0.7257012930089853
User 19836 does not improve AUC. Reverting changes.
Training on augumented user 128236 22/50 current_auc = 0.7267696690773612
User 128236 AUC after training: 0.7272079772079773
User 128236 improves AUC. Keeping the model.
Training on augumented user 48490 23/50 current_auc = 0.7272079772079773
User 48490 AUC after training: 0.7263861494630727
User 48490 does not improve AUC. Reverting changes.
Training on augumented user 51956 24/50 current_auc = 0.7272079772079773
User 51956 AUC after training: 0.7270710059171598
User 51956 does not improve AUC. Reverting changes.
Training on augumented user 133296 25/50 current_auc = 0.7272079772079773
User 133296 AUC after training: 0.7270162174008327
User 133296 does not improve AUC. Reverting changes.
Training on augumented user 71197 26/50 current_auc = 0.7272079772079773
User 71197 AUC after training: 0.7247150997150997
User 71197 does not improve AUC. Reverting changes.
Training on augumented user 20026 27/50 current_auc = 0.7272079772079773
User 20026 AUC after training: 0.7270436116589963
User 20026 does not improve AUC. Reverting changes.
Training on augumented user 134061 28/50 current_auc = 0.7272079772079773
User 134061 AUC after training: 0.7266600920447073
User 134061 does not improve AUC. Reverting changes.
Training on augumented user 26506 29/50 current_auc = 0.7272079772079773
User 26506 AUC after training: 0.7269340346263423
User 26506 does not improve AUC. Reverting changes.
Training on augumented user 30264 30/50 current_auc = 0.7272079772079773
User 30264 AUC after training: 0.7266874863028707
User 30264 does not improve AUC. Reverting changes.
Training on augumented user 54420 31/50 current_auc = 0.7272079772079773
User 54420 AUC after training: 0.727317554240631
User 54420 improves AUC. Keeping the model.
Training on augumented user 93409 32/50 current_auc = 0.727317554240631
User 93409 AUC after training: 0.7265779092702169
User 93409 does not improve AUC. Reverting changes.
Training on augumented user 58650 33/50 current_auc = 0.727317554240631
User 58650 AUC after training: 0.7238110891957046
User 58650 does not improve AUC. Reverting changes.
Training on augumented user 64693 34/50 current_auc = 0.727317554240631
User 64693 AUC after training: 0.7272627657243041
User 64693 does not improve AUC. Reverting changes.
Training on augumented user 79613 35/50 current_auc = 0.727317554240631
User 79613 AUC after training: 0.7278654394039008
User 79613 improves AUC. Keeping the model.
Training on augumented user 21322 36/50 current_auc = 0.7278654394039008
User 21322 AUC after training: 0.727536708305939
User 21322 does not improve AUC. Reverting changes.
Training on augumented user 7828 37/50 current_auc = 0.7278654394039008
User 7828 AUC after training: 0.7150723208415515
User 7828 does not improve AUC. Reverting changes.
Training on augumented user 125313 38/50 current_auc = 0.7278654394039008
User 125313 AUC after training: 0.7276188910804294
User 125313 does not improve AUC. Reverting changes.
Training on augumented user 37326 39/50 current_auc = 0.7278654394039008
User 37326 AUC after training: 0.7283037475345169
User 37326 improves AUC. Keeping the model.
Training on augumented user 8343 40/50 current_auc = 0.7283037475345169
User 8343 AUC after training: 0.7275093140477755
User 8343 does not improve AUC. Reverting changes.
Training on augumented user 110011 41/50 current_auc = 0.7283037475345169
User 110011 AUC after training: 0.7285776901161517
User 110011 improves AUC. Keeping the model.
Training on augumented user 8762 42/50 current_auc = 0.7285776901161517
User 8762 AUC after training: 0.7259204470742933
User 8762 does not improve AUC. Reverting changes.
Training on augumented user 90120 43/50 current_auc = 0.7285776901161517
User 90120 AUC after training: 0.7297830374753453
User 90120 improves AUC. Keeping the model.
Training on augumented user 95780 44/50 current_auc = 0.7297830374753453
User 95780 AUC after training: 0.7289338154722769
User 95780 does not improve AUC. Reverting changes.
Training on augumented user 104793 45/50 current_auc = 0.7297830374753453
User 104793 AUC after training: 0.7295638834100372
User 104793 does not improve AUC. Reverting changes.
Training on augumented user 119978 46/50 current_auc = 0.7297830374753453
User 119978 AUC after training: 0.7293173350865658
User 119978 does not improve AUC. Reverting changes.
Training on augumented user 39264 47/50 current_auc = 0.7297830374753453
User 39264 AUC after training: 0.7301939513477975
User 39264 improves AUC. Keeping the model.
Training on augumented user 83260 48/50 current_auc = 0.7301939513477975
User 83260 AUC after training: 0.7307418365110674
User 83260 improves AUC. Keeping the model.
Training on augumented user 68348 49/50 current_auc = 0.7307418365110674
User 68348 AUC after training: 0.7299200087661626
User 68348 does not improve AUC. Reverting changes.
[2024-12-02 18:39:26.087517] start test user 112217 115/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:39:26.851417] start test user 112217 115/567 recall augumented users by random, augumented_users = [61983, 134810, 41680, 99633, 93041, 49514, 94469, 49832, 31910, 124617, 63810, 94486, 14547, 128672, 28386, 128487, 81170, 64639, 63451, 113260, 52823, 118400, 3288, 97764, 133797, 117139, 38690, 33421, 100837, 79144, 41733, 32605, 11702, 91042, 130083, 103395, 25386, 11241, 115002, 84591, 34917, 45517, 49242, 121850, 126121, 31247, 97321, 76642, 27483, 21221]
[2024-12-02 18:39:26.875595] user = 112217 Cloud 115/567
[2024-12-02 18:39:26.899760] user = 112217 Local 115/567
[2024-12-02 18:39:26.980732] user = 112217 Local+ 115/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:39:29.335674] user = 112217 MPDA- 115/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 1.0
Training on augumented user 61983 0/50 current_auc = 1.0
User 61983 AUC after training: 1.0
User 61983 does not improve AUC. Reverting changes.
Training on augumented user 134810 1/50 current_auc = 1.0
User 134810 AUC after training: 1.0
User 134810 does not improve AUC. Reverting changes.
Training on augumented user 41680 2/50 current_auc = 1.0
User 41680 AUC after training: 1.0
User 41680 does not improve AUC. Reverting changes.
Training on augumented user 99633 3/50 current_auc = 1.0
User 99633 AUC after training: 1.0
User 99633 does not improve AUC. Reverting changes.
Training on augumented user 93041 4/50 current_auc = 1.0
User 93041 AUC after training: 1.0
User 93041 does not improve AUC. Reverting changes.
Training on augumented user 49514 5/50 current_auc = 1.0
User 49514 AUC after training: 1.0
User 49514 does not improve AUC. Reverting changes.
Training on augumented user 94469 6/50 current_auc = 1.0
User 94469 AUC after training: 1.0
User 94469 does not improve AUC. Reverting changes.
Training on augumented user 49832 7/50 current_auc = 1.0
User 49832 AUC after training: 1.0
User 49832 does not improve AUC. Reverting changes.
Training on augumented user 31910 8/50 current_auc = 1.0
User 31910 AUC after training: 1.0
User 31910 does not improve AUC. Reverting changes.
Training on augumented user 124617 9/50 current_auc = 1.0
User 124617 AUC after training: 1.0
User 124617 does not improve AUC. Reverting changes.
Training on augumented user 63810 10/50 current_auc = 1.0
User 63810 AUC after training: 1.0
User 63810 does not improve AUC. Reverting changes.
Training on augumented user 94486 11/50 current_auc = 1.0
User 94486 AUC after training: 1.0
User 94486 does not improve AUC. Reverting changes.
Training on augumented user 14547 12/50 current_auc = 1.0
User 14547 AUC after training: 1.0
User 14547 does not improve AUC. Reverting changes.
Training on augumented user 128672 13/50 current_auc = 1.0
User 128672 AUC after training: 1.0
User 128672 does not improve AUC. Reverting changes.
Training on augumented user 28386 14/50 current_auc = 1.0
User 28386 AUC after training: 1.0
User 28386 does not improve AUC. Reverting changes.
Training on augumented user 128487 15/50 current_auc = 1.0
User 128487 AUC after training: 1.0
User 128487 does not improve AUC. Reverting changes.
Training on augumented user 81170 16/50 current_auc = 1.0
User 81170 AUC after training: 1.0
User 81170 does not improve AUC. Reverting changes.
Training on augumented user 64639 17/50 current_auc = 1.0
User 64639 AUC after training: 1.0
User 64639 does not improve AUC. Reverting changes.
Training on augumented user 63451 18/50 current_auc = 1.0
User 63451 AUC after training: 1.0
User 63451 does not improve AUC. Reverting changes.
Training on augumented user 113260 19/50 current_auc = 1.0
User 113260 AUC after training: 1.0
User 113260 does not improve AUC. Reverting changes.
Training on augumented user 52823 20/50 current_auc = 1.0
User 52823 AUC after training: 1.0
User 52823 does not improve AUC. Reverting changes.
Training on augumented user 118400 21/50 current_auc = 1.0
User 118400 AUC after training: 1.0
User 118400 does not improve AUC. Reverting changes.
Training on augumented user 3288 22/50 current_auc = 1.0
User 3288 AUC after training: 1.0
User 3288 does not improve AUC. Reverting changes.
Training on augumented user 97764 23/50 current_auc = 1.0
User 97764 AUC after training: 1.0
User 97764 does not improve AUC. Reverting changes.
Training on augumented user 133797 24/50 current_auc = 1.0
User 133797 AUC after training: 1.0
User 133797 does not improve AUC. Reverting changes.
Training on augumented user 117139 25/50 current_auc = 1.0
User 117139 AUC after training: 1.0
User 117139 does not improve AUC. Reverting changes.
Training on augumented user 38690 26/50 current_auc = 1.0
User 38690 AUC after training: 1.0
User 38690 does not improve AUC. Reverting changes.
Training on augumented user 33421 27/50 current_auc = 1.0
User 33421 AUC after training: 1.0
User 33421 does not improve AUC. Reverting changes.
Training on augumented user 100837 28/50 current_auc = 1.0
User 100837 AUC after training: 1.0
User 100837 does not improve AUC. Reverting changes.
Training on augumented user 79144 29/50 current_auc = 1.0
User 79144 AUC after training: 1.0
User 79144 does not improve AUC. Reverting changes.
Training on augumented user 41733 30/50 current_auc = 1.0
User 41733 AUC after training: 1.0
User 41733 does not improve AUC. Reverting changes.
Training on augumented user 32605 31/50 current_auc = 1.0
User 32605 AUC after training: 1.0
User 32605 does not improve AUC. Reverting changes.
Training on augumented user 11702 32/50 current_auc = 1.0
User 11702 AUC after training: 1.0
User 11702 does not improve AUC. Reverting changes.
Training on augumented user 91042 33/50 current_auc = 1.0
User 91042 AUC after training: 1.0
User 91042 does not improve AUC. Reverting changes.
Training on augumented user 130083 34/50 current_auc = 1.0
User 130083 AUC after training: 1.0
User 130083 does not improve AUC. Reverting changes.
Training on augumented user 103395 35/50 current_auc = 1.0
User 103395 AUC after training: 1.0
User 103395 does not improve AUC. Reverting changes.
Training on augumented user 25386 36/50 current_auc = 1.0
User 25386 AUC after training: 1.0
User 25386 does not improve AUC. Reverting changes.
Training on augumented user 11241 37/50 current_auc = 1.0
User 11241 AUC after training: 1.0
User 11241 does not improve AUC. Reverting changes.
Training on augumented user 115002 38/50 current_auc = 1.0
User 115002 AUC after training: 1.0
User 115002 does not improve AUC. Reverting changes.
Training on augumented user 84591 39/50 current_auc = 1.0
User 84591 AUC after training: 1.0
User 84591 does not improve AUC. Reverting changes.
Training on augumented user 34917 40/50 current_auc = 1.0
User 34917 AUC after training: 1.0
User 34917 does not improve AUC. Reverting changes.
Training on augumented user 45517 41/50 current_auc = 1.0
User 45517 AUC after training: 1.0
User 45517 does not improve AUC. Reverting changes.
Training on augumented user 49242 42/50 current_auc = 1.0
User 49242 AUC after training: 1.0
User 49242 does not improve AUC. Reverting changes.
Training on augumented user 121850 43/50 current_auc = 1.0
User 121850 AUC after training: 1.0
User 121850 does not improve AUC. Reverting changes.
Training on augumented user 126121 44/50 current_auc = 1.0
User 126121 AUC after training: 1.0
User 126121 does not improve AUC. Reverting changes.
Training on augumented user 31247 45/50 current_auc = 1.0
User 31247 AUC after training: 1.0
User 31247 does not improve AUC. Reverting changes.
Training on augumented user 97321 46/50 current_auc = 1.0
User 97321 AUC after training: 1.0
User 97321 does not improve AUC. Reverting changes.
Training on augumented user 76642 47/50 current_auc = 1.0
User 76642 AUC after training: 1.0
User 76642 does not improve AUC. Reverting changes.
Training on augumented user 27483 48/50 current_auc = 1.0
User 27483 AUC after training: 1.0
User 27483 does not improve AUC. Reverting changes.
Training on augumented user 21221 49/50 current_auc = 1.0
User 21221 AUC after training: 1.0
User 21221 does not improve AUC. Reverting changes.
[2024-12-02 18:39:54.237665] start test user 112231 116/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:39:54.720123] start test user 112231 116/567 recall augumented users by random, augumented_users = [111134, 77053, 3918, 55553, 80054, 134108, 93306, 84073, 132982, 871, 73583, 60789, 112308, 48010, 104340, 10790, 54976, 80300, 95098, 26211, 67117, 31341, 119281, 33952, 41271, 83781, 26676, 34620, 114086, 7223, 22653, 96378, 113081, 93189, 98413, 94895, 36084, 81357, 18150, 60432, 121603, 34929, 99509, 106064, 69524, 27375, 101237, 54361, 137588, 99922]
[2024-12-02 18:39:54.735419] user = 112231 Cloud 116/567
[2024-12-02 18:39:54.790728] user = 112231 Local 116/567
[2024-12-02 18:39:54.843661] user = 112231 Local+ 116/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:39:58.148272] user = 112231 MPDA- 116/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6536082474226804
Training on augumented user 111134 0/50 current_auc = 0.6536082474226804
User 111134 AUC after training: 0.6536573392243494
User 111134 improves AUC. Keeping the model.
Training on augumented user 77053 1/50 current_auc = 0.6536573392243494
User 77053 AUC after training: 0.6533627884143348
User 77053 does not improve AUC. Reverting changes.
Training on augumented user 3918 2/50 current_auc = 0.6536573392243494
User 3918 AUC after training: 0.653853706431026
User 3918 improves AUC. Keeping the model.
Training on augumented user 55553 3/50 current_auc = 0.653853706431026
User 55553 AUC after training: 0.6540991654393716
User 55553 improves AUC. Keeping the model.
Training on augumented user 80054 4/50 current_auc = 0.6540991654393716
User 80054 AUC after training: 0.6543937162493864
User 80054 improves AUC. Keeping the model.
Training on augumented user 134108 5/50 current_auc = 0.6543937162493864
User 134108 AUC after training: 0.6533627884143348
User 134108 does not improve AUC. Reverting changes.
Training on augumented user 93306 6/50 current_auc = 0.6543937162493864
User 93306 AUC after training: 0.6544428080510555
User 93306 improves AUC. Keeping the model.
Training on augumented user 84073 7/50 current_auc = 0.6544428080510555
User 84073 AUC after training: 0.6540009818360334
User 84073 does not improve AUC. Reverting changes.
Training on augumented user 132982 8/50 current_auc = 0.6544428080510555
User 132982 AUC after training: 0.6539518900343643
User 132982 does not improve AUC. Reverting changes.
Training on augumented user 871 9/50 current_auc = 0.6544428080510555
User 871 AUC after training: 0.6545409916543937
User 871 improves AUC. Keeping the model.
Training on augumented user 73583 10/50 current_auc = 0.6545409916543937
User 73583 AUC after training: 0.6543446244477172
User 73583 does not improve AUC. Reverting changes.
Training on augumented user 60789 11/50 current_auc = 0.6545409916543937
User 60789 AUC after training: 0.6545409916543937
User 60789 does not improve AUC. Reverting changes.
Training on augumented user 112308 12/50 current_auc = 0.6545409916543937
User 112308 AUC after training: 0.6543446244477172
User 112308 does not improve AUC. Reverting changes.
Training on augumented user 48010 13/50 current_auc = 0.6545409916543937
User 48010 AUC after training: 0.653853706431026
User 48010 does not improve AUC. Reverting changes.
Training on augumented user 104340 14/50 current_auc = 0.6545409916543937
User 104340 AUC after training: 0.6548355424644084
User 104340 improves AUC. Keeping the model.
Training on augumented user 10790 15/50 current_auc = 0.6548355424644084
User 10790 AUC after training: 0.655081001472754
User 10790 improves AUC. Keeping the model.
Training on augumented user 54976 16/50 current_auc = 0.655081001472754
User 54976 AUC after training: 0.6544918998527246
User 54976 does not improve AUC. Reverting changes.
Training on augumented user 80300 17/50 current_auc = 0.655081001472754
User 80300 AUC after training: 0.6546882670594011
User 80300 does not improve AUC. Reverting changes.
Training on augumented user 95098 18/50 current_auc = 0.655081001472754
User 95098 AUC after training: 0.6548846342660776
User 95098 does not improve AUC. Reverting changes.
Training on augumented user 26211 19/50 current_auc = 0.655081001472754
User 26211 AUC after training: 0.6553264604810997
User 26211 improves AUC. Keeping the model.
Training on augumented user 67117 20/50 current_auc = 0.6553264604810997
User 67117 AUC after training: 0.6538046146293568
User 67117 does not improve AUC. Reverting changes.
Training on augumented user 31341 21/50 current_auc = 0.6553264604810997
User 31341 AUC after training: 0.6550319096710849
User 31341 does not improve AUC. Reverting changes.
Training on augumented user 119281 22/50 current_auc = 0.6553264604810997
User 119281 AUC after training: 0.6548355424644084
User 119281 does not improve AUC. Reverting changes.
Training on augumented user 33952 23/50 current_auc = 0.6553264604810997
User 33952 AUC after training: 0.6549828178694158
User 33952 does not improve AUC. Reverting changes.
Training on augumented user 41271 24/50 current_auc = 0.6553264604810997
User 41271 AUC after training: 0.6549337260677467
User 41271 does not improve AUC. Reverting changes.
Training on augumented user 83781 25/50 current_auc = 0.6553264604810997
User 83781 AUC after training: 0.6551791850760923
User 83781 does not improve AUC. Reverting changes.
Training on augumented user 26676 26/50 current_auc = 0.6553264604810997
User 26676 AUC after training: 0.6550319096710849
User 26676 does not improve AUC. Reverting changes.
Training on augumented user 34620 27/50 current_auc = 0.6553264604810997
User 34620 AUC after training: 0.6537064310260187
User 34620 does not improve AUC. Reverting changes.
Training on augumented user 114086 28/50 current_auc = 0.6553264604810997
User 114086 AUC after training: 0.6549337260677467
User 114086 does not improve AUC. Reverting changes.
Training on augumented user 7223 29/50 current_auc = 0.6553264604810997
User 7223 AUC after training: 0.6552282768777614
User 7223 does not improve AUC. Reverting changes.
Training on augumented user 22653 30/50 current_auc = 0.6553264604810997
User 22653 AUC after training: 0.6548355424644084
User 22653 does not improve AUC. Reverting changes.
Training on augumented user 96378 31/50 current_auc = 0.6553264604810997
User 96378 AUC after training: 0.6534118802160039
User 96378 does not improve AUC. Reverting changes.
Training on augumented user 113081 32/50 current_auc = 0.6553264604810997
User 113081 AUC after training: 0.6492881688757978
User 113081 does not improve AUC. Reverting changes.
Training on augumented user 93189 33/50 current_auc = 0.6553264604810997
User 93189 AUC after training: 0.6547373588610702
User 93189 does not improve AUC. Reverting changes.
Training on augumented user 98413 34/50 current_auc = 0.6553264604810997
User 98413 AUC after training: 0.6540009818360334
User 98413 does not improve AUC. Reverting changes.
Training on augumented user 94895 35/50 current_auc = 0.6553264604810997
User 94895 AUC after training: 0.6543446244477172
User 94895 does not improve AUC. Reverting changes.
Training on augumented user 36084 36/50 current_auc = 0.6553264604810997
User 36084 AUC after training: 0.6540991654393716
User 36084 does not improve AUC. Reverting changes.
Training on augumented user 81357 37/50 current_auc = 0.6553264604810997
User 81357 AUC after training: 0.6561119293078056
User 81357 improves AUC. Keeping the model.
Training on augumented user 18150 38/50 current_auc = 0.6561119293078056
User 18150 AUC after training: 0.6565046637211586
User 18150 improves AUC. Keeping the model.
Training on augumented user 60432 39/50 current_auc = 0.6565046637211586
User 60432 AUC after training: 0.6556701030927835
User 60432 does not improve AUC. Reverting changes.
Training on augumented user 121603 40/50 current_auc = 0.6565046637211586
User 121603 AUC after training: 0.6555719194894453
User 121603 does not improve AUC. Reverting changes.
Training on augumented user 34929 41/50 current_auc = 0.6565046637211586
User 34929 AUC after training: 0.6561610211094747
User 34929 does not improve AUC. Reverting changes.
Training on augumented user 99509 42/50 current_auc = 0.6565046637211586
User 99509 AUC after training: 0.6536573392243495
User 99509 does not improve AUC. Reverting changes.
Training on augumented user 106064 43/50 current_auc = 0.6565046637211586
User 106064 AUC after training: 0.656259204712813
User 106064 does not improve AUC. Reverting changes.
Training on augumented user 69524 44/50 current_auc = 0.6565046637211586
User 69524 AUC after training: 0.6551791850760923
User 69524 does not improve AUC. Reverting changes.
Training on augumented user 27375 45/50 current_auc = 0.6565046637211586
User 27375 AUC after training: 0.6545409916543937
User 27375 does not improve AUC. Reverting changes.
Training on augumented user 101237 46/50 current_auc = 0.6565046637211586
User 101237 AUC after training: 0.6560628375061365
User 101237 does not improve AUC. Reverting changes.
Training on augumented user 54361 47/50 current_auc = 0.6565046637211586
User 54361 AUC after training: 0.656701030927835
User 54361 improves AUC. Keeping the model.
Training on augumented user 137588 48/50 current_auc = 0.656701030927835
User 137588 AUC after training: 0.6557682866961217
User 137588 does not improve AUC. Reverting changes.
Training on augumented user 99922 49/50 current_auc = 0.656701030927835
User 99922 AUC after training: 0.656259204712813
User 99922 does not improve AUC. Reverting changes.
[2024-12-02 18:40:32.760926] start test user 112236 117/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:40:33.203820] start test user 112236 117/567 recall augumented users by random, augumented_users = [133353, 99823, 109601, 49988, 135343, 75965, 94732, 136910, 108092, 128328, 1049, 21644, 38681, 71666, 119275, 91058, 85658, 8303, 87566, 121250, 6312, 128238, 3656, 93979, 134279, 7936, 22434, 35620, 125401, 23850, 104799, 42803, 33706, 114500, 49288, 135545, 34518, 39064, 10615, 126413, 75473, 49874, 49536, 53360, 113757, 45882, 71589, 76214, 38764, 70575]
[2024-12-02 18:40:33.217979] user = 112236 Cloud 117/567
[2024-12-02 18:40:33.230913] user = 112236 Local 117/567
[2024-12-02 18:40:33.252492] user = 112236 Local+ 117/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:40:34.853566] user = 112236 MPDA- 117/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5367132867132867
Training on augumented user 133353 0/50 current_auc = 0.5367132867132867
User 133353 AUC after training: 0.5393356643356643
User 133353 improves AUC. Keeping the model.
Training on augumented user 99823 1/50 current_auc = 0.5393356643356643
User 99823 AUC after training: 0.5384615384615384
User 99823 does not improve AUC. Reverting changes.
Training on augumented user 109601 2/50 current_auc = 0.5393356643356643
User 109601 AUC after training: 0.5393356643356644
User 109601 improves AUC. Keeping the model.
Training on augumented user 49988 3/50 current_auc = 0.5393356643356644
User 49988 AUC after training: 0.5375874125874126
User 49988 does not improve AUC. Reverting changes.
Training on augumented user 135343 4/50 current_auc = 0.5393356643356644
User 135343 AUC after training: 0.5428321678321678
User 135343 improves AUC. Keeping the model.
Training on augumented user 75965 5/50 current_auc = 0.5428321678321678
User 75965 AUC after training: 0.5428321678321679
User 75965 improves AUC. Keeping the model.
Training on augumented user 94732 6/50 current_auc = 0.5428321678321679
User 94732 AUC after training: 0.541083916083916
User 94732 does not improve AUC. Reverting changes.
Training on augumented user 136910 7/50 current_auc = 0.5428321678321679
User 136910 AUC after training: 0.541083916083916
User 136910 does not improve AUC. Reverting changes.
Training on augumented user 108092 8/50 current_auc = 0.5428321678321679
User 108092 AUC after training: 0.5402097902097902
User 108092 does not improve AUC. Reverting changes.
Training on augumented user 128328 9/50 current_auc = 0.5428321678321679
User 128328 AUC after training: 0.5428321678321678
User 128328 does not improve AUC. Reverting changes.
Training on augumented user 1049 10/50 current_auc = 0.5428321678321679
User 1049 AUC after training: 0.541083916083916
User 1049 does not improve AUC. Reverting changes.
Training on augumented user 21644 11/50 current_auc = 0.5428321678321679
User 21644 AUC after training: 0.541083916083916
User 21644 does not improve AUC. Reverting changes.
Training on augumented user 38681 12/50 current_auc = 0.5428321678321679
User 38681 AUC after training: 0.5375874125874126
User 38681 does not improve AUC. Reverting changes.
Training on augumented user 71666 13/50 current_auc = 0.5428321678321679
User 71666 AUC after training: 0.5402097902097902
User 71666 does not improve AUC. Reverting changes.
Training on augumented user 119275 14/50 current_auc = 0.5428321678321679
User 119275 AUC after training: 0.541083916083916
User 119275 does not improve AUC. Reverting changes.
Training on augumented user 91058 15/50 current_auc = 0.5428321678321679
User 91058 AUC after training: 0.5402097902097902
User 91058 does not improve AUC. Reverting changes.
Training on augumented user 85658 16/50 current_auc = 0.5428321678321679
User 85658 AUC after training: 0.5402097902097902
User 85658 does not improve AUC. Reverting changes.
Training on augumented user 8303 17/50 current_auc = 0.5428321678321679
User 8303 AUC after training: 0.5419580419580419
User 8303 does not improve AUC. Reverting changes.
Training on augumented user 87566 18/50 current_auc = 0.5428321678321679
User 87566 AUC after training: 0.541083916083916
User 87566 does not improve AUC. Reverting changes.
Training on augumented user 121250 19/50 current_auc = 0.5428321678321679
User 121250 AUC after training: 0.5437062937062936
User 121250 improves AUC. Keeping the model.
Training on augumented user 6312 20/50 current_auc = 0.5437062937062936
User 6312 AUC after training: 0.541083916083916
User 6312 does not improve AUC. Reverting changes.
Training on augumented user 128238 21/50 current_auc = 0.5437062937062936
User 128238 AUC after training: 0.5410839160839161
User 128238 does not improve AUC. Reverting changes.
Training on augumented user 3656 22/50 current_auc = 0.5437062937062936
User 3656 AUC after training: 0.5428321678321678
User 3656 does not improve AUC. Reverting changes.
Training on augumented user 93979 23/50 current_auc = 0.5437062937062936
User 93979 AUC after training: 0.5402097902097902
User 93979 does not improve AUC. Reverting changes.
Training on augumented user 134279 24/50 current_auc = 0.5437062937062936
User 134279 AUC after training: 0.5437062937062936
User 134279 does not improve AUC. Reverting changes.
Training on augumented user 7936 25/50 current_auc = 0.5437062937062936
User 7936 AUC after training: 0.541083916083916
User 7936 does not improve AUC. Reverting changes.
Training on augumented user 22434 26/50 current_auc = 0.5437062937062936
User 22434 AUC after training: 0.5428321678321678
User 22434 does not improve AUC. Reverting changes.
Training on augumented user 35620 27/50 current_auc = 0.5437062937062936
User 35620 AUC after training: 0.5437062937062938
User 35620 improves AUC. Keeping the model.
Training on augumented user 125401 28/50 current_auc = 0.5437062937062938
User 125401 AUC after training: 0.5463286713286714
User 125401 improves AUC. Keeping the model.
Training on augumented user 23850 29/50 current_auc = 0.5463286713286714
User 23850 AUC after training: 0.5454545454545454
User 23850 does not improve AUC. Reverting changes.
Training on augumented user 104799 30/50 current_auc = 0.5463286713286714
User 104799 AUC after training: 0.541958041958042
User 104799 does not improve AUC. Reverting changes.
Training on augumented user 42803 31/50 current_auc = 0.5463286713286714
User 42803 AUC after training: 0.5384615384615384
User 42803 does not improve AUC. Reverting changes.
Training on augumented user 33706 32/50 current_auc = 0.5463286713286714
User 33706 AUC after training: 0.5428321678321678
User 33706 does not improve AUC. Reverting changes.
Training on augumented user 114500 33/50 current_auc = 0.5463286713286714
User 114500 AUC after training: 0.5463286713286714
User 114500 does not improve AUC. Reverting changes.
Training on augumented user 49288 34/50 current_auc = 0.5463286713286714
User 49288 AUC after training: 0.5463286713286714
User 49288 does not improve AUC. Reverting changes.
Training on augumented user 135545 35/50 current_auc = 0.5463286713286714
User 135545 AUC after training: 0.5428321678321678
User 135545 does not improve AUC. Reverting changes.
Training on augumented user 34518 36/50 current_auc = 0.5463286713286714
User 34518 AUC after training: 0.5393356643356644
User 34518 does not improve AUC. Reverting changes.
Training on augumented user 39064 37/50 current_auc = 0.5463286713286714
User 39064 AUC after training: 0.5402097902097902
User 39064 does not improve AUC. Reverting changes.
Training on augumented user 10615 38/50 current_auc = 0.5463286713286714
User 10615 AUC after training: 0.5402097902097902
User 10615 does not improve AUC. Reverting changes.
Training on augumented user 126413 39/50 current_auc = 0.5463286713286714
User 126413 AUC after training: 0.5437062937062936
User 126413 does not improve AUC. Reverting changes.
Training on augumented user 75473 40/50 current_auc = 0.5463286713286714
User 75473 AUC after training: 0.5445804195804196
User 75473 does not improve AUC. Reverting changes.
Training on augumented user 49874 41/50 current_auc = 0.5463286713286714
User 49874 AUC after training: 0.5428321678321678
User 49874 does not improve AUC. Reverting changes.
Training on augumented user 49536 42/50 current_auc = 0.5463286713286714
User 49536 AUC after training: 0.5454545454545454
User 49536 does not improve AUC. Reverting changes.
Training on augumented user 53360 43/50 current_auc = 0.5463286713286714
User 53360 AUC after training: 0.5375874125874126
User 53360 does not improve AUC. Reverting changes.
Training on augumented user 113757 44/50 current_auc = 0.5463286713286714
User 113757 AUC after training: 0.534965034965035
User 113757 does not improve AUC. Reverting changes.
Training on augumented user 45882 45/50 current_auc = 0.5463286713286714
User 45882 AUC after training: 0.5463286713286714
User 45882 does not improve AUC. Reverting changes.
Training on augumented user 71589 46/50 current_auc = 0.5463286713286714
User 71589 AUC after training: 0.5402097902097902
User 71589 does not improve AUC. Reverting changes.
Training on augumented user 76214 47/50 current_auc = 0.5463286713286714
User 76214 AUC after training: 0.5428321678321678
User 76214 does not improve AUC. Reverting changes.
Training on augumented user 38764 48/50 current_auc = 0.5463286713286714
User 38764 AUC after training: 0.5445804195804196
User 38764 does not improve AUC. Reverting changes.
Training on augumented user 70575 49/50 current_auc = 0.5463286713286714
User 70575 AUC after training: 0.5454545454545454
User 70575 does not improve AUC. Reverting changes.
[2024-12-02 18:41:06.618661] start test user 112237 118/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:41:07.317664] start test user 112237 118/567 recall augumented users by random, augumented_users = [78083, 16070, 99671, 88207, 109548, 79262, 23531, 11316, 48768, 137885, 76511, 45267, 11194, 1443, 3616, 61794, 7540, 112172, 37360, 99793, 135685, 14753, 90950, 102639, 135629, 111098, 24510, 104205, 31212, 69121, 11735, 65935, 117641, 121711, 99681, 89580, 34424, 83699, 30206, 14613, 25537, 39794, 75834, 76080, 53996, 33415, 88525, 78187, 45863, 12483]
[2024-12-02 18:41:07.335831] user = 112237 Cloud 118/567
[2024-12-02 18:41:07.381651] user = 112237 Local 118/567
[2024-12-02 18:41:07.475881] user = 112237 Local+ 118/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:41:10.201877] user = 112237 MPDA- 118/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6107410881801126
Training on augumented user 78083 0/50 current_auc = 0.6107410881801126
User 78083 AUC after training: 0.6113352095059412
User 78083 improves AUC. Keeping the model.
Training on augumented user 16070 1/50 current_auc = 0.6113352095059412
User 16070 AUC after training: 0.6114290181363352
User 16070 improves AUC. Keeping the model.
Training on augumented user 99671 2/50 current_auc = 0.6114290181363352
User 99671 AUC after training: 0.6111944965603502
User 99671 does not improve AUC. Reverting changes.
Training on augumented user 88207 3/50 current_auc = 0.6114290181363352
User 88207 AUC after training: 0.6116322701688556
User 88207 improves AUC. Keeping the model.
Training on augumented user 109548 4/50 current_auc = 0.6116322701688556
User 109548 AUC after training: 0.6115697310819262
User 109548 does not improve AUC. Reverting changes.
Training on augumented user 79262 5/50 current_auc = 0.6116322701688556
User 79262 AUC after training: 0.6117260787992496
User 79262 improves AUC. Keeping the model.
Training on augumented user 23531 6/50 current_auc = 0.6117260787992496
User 23531 AUC after training: 0.6116322701688556
User 23531 does not improve AUC. Reverting changes.
Training on augumented user 11316 7/50 current_auc = 0.6117260787992496
User 11316 AUC after training: 0.611366479049406
User 11316 does not improve AUC. Reverting changes.
Training on augumented user 48768 8/50 current_auc = 0.6117260787992496
User 48768 AUC after training: 0.6121325828642903
User 48768 improves AUC. Keeping the model.
Training on augumented user 137885 9/50 current_auc = 0.6121325828642903
User 137885 AUC after training: 0.6109756097560975
User 137885 does not improve AUC. Reverting changes.
Training on augumented user 76511 10/50 current_auc = 0.6121325828642903
User 76511 AUC after training: 0.6123827392120076
User 76511 improves AUC. Keeping the model.
Training on augumented user 45267 11/50 current_auc = 0.6123827392120076
User 45267 AUC after training: 0.6122263914946843
User 45267 does not improve AUC. Reverting changes.
Training on augumented user 11194 12/50 current_auc = 0.6123827392120076
User 11194 AUC after training: 0.6126641651031896
User 11194 improves AUC. Keeping the model.
Training on augumented user 1443 13/50 current_auc = 0.6126641651031896
User 1443 AUC after training: 0.6127423389618512
User 1443 improves AUC. Keeping the model.
Training on augumented user 3616 14/50 current_auc = 0.6127423389618512
User 3616 AUC after training: 0.6126641651031896
User 3616 does not improve AUC. Reverting changes.
Training on augumented user 61794 15/50 current_auc = 0.6127423389618512
User 61794 AUC after training: 0.6126016260162602
User 61794 does not improve AUC. Reverting changes.
Training on augumented user 7540 16/50 current_auc = 0.6127423389618512
User 7540 AUC after training: 0.6126641651031894
User 7540 does not improve AUC. Reverting changes.
Training on augumented user 112172 17/50 current_auc = 0.6127423389618512
User 112172 AUC after training: 0.6128205128205129
User 112172 improves AUC. Keeping the model.
Training on augumented user 37360 18/50 current_auc = 0.6128205128205129
User 37360 AUC after training: 0.6125234521575985
User 37360 does not improve AUC. Reverting changes.
Training on augumented user 99793 19/50 current_auc = 0.6128205128205129
User 99793 AUC after training: 0.6121325828642902
User 99793 does not improve AUC. Reverting changes.
Training on augumented user 135685 20/50 current_auc = 0.6128205128205129
User 135685 AUC after training: 0.6124921826141339
User 135685 does not improve AUC. Reverting changes.
Training on augumented user 14753 21/50 current_auc = 0.6128205128205129
User 14753 AUC after training: 0.6125078173858662
User 14753 does not improve AUC. Reverting changes.
Training on augumented user 90950 22/50 current_auc = 0.6128205128205129
User 90950 AUC after training: 0.6131644777986242
User 90950 improves AUC. Keeping the model.
Training on augumented user 102639 23/50 current_auc = 0.6131644777986242
User 102639 AUC after training: 0.6131019387116948
User 102639 does not improve AUC. Reverting changes.
Training on augumented user 135629 24/50 current_auc = 0.6131644777986242
User 135629 AUC after training: 0.6126328955597249
User 135629 does not improve AUC. Reverting changes.
Training on augumented user 111098 25/50 current_auc = 0.6131644777986242
User 111098 AUC after training: 0.6129768605378361
User 111098 does not improve AUC. Reverting changes.
Training on augumented user 24510 26/50 current_auc = 0.6131644777986242
User 24510 AUC after training: 0.6132270168855536
User 24510 improves AUC. Keeping the model.
Training on augumented user 104205 27/50 current_auc = 0.6132270168855536
User 104205 AUC after training: 0.6128830519074421
User 104205 does not improve AUC. Reverting changes.
Training on augumented user 31212 28/50 current_auc = 0.6132270168855536
User 31212 AUC after training: 0.6128205128205128
User 31212 does not improve AUC. Reverting changes.
Training on augumented user 69121 29/50 current_auc = 0.6132270168855536
User 69121 AUC after training: 0.6128517823639775
User 69121 does not improve AUC. Reverting changes.
Training on augumented user 11735 30/50 current_auc = 0.6132270168855536
User 11735 AUC after training: 0.6129768605378362
User 11735 does not improve AUC. Reverting changes.
Training on augumented user 65935 31/50 current_auc = 0.6132270168855536
User 65935 AUC after training: 0.6130081300813008
User 65935 does not improve AUC. Reverting changes.
Training on augumented user 117641 32/50 current_auc = 0.6132270168855536
User 117641 AUC after training: 0.6130081300813008
User 117641 does not improve AUC. Reverting changes.
Training on augumented user 121711 33/50 current_auc = 0.6132270168855536
User 121711 AUC after training: 0.6124296435272045
User 121711 does not improve AUC. Reverting changes.
Training on augumented user 99681 34/50 current_auc = 0.6132270168855536
User 99681 AUC after training: 0.6131019387116948
User 99681 does not improve AUC. Reverting changes.
Training on augumented user 89580 35/50 current_auc = 0.6132270168855536
User 89580 AUC after training: 0.6128205128205128
User 89580 does not improve AUC. Reverting changes.
Training on augumented user 34424 36/50 current_auc = 0.6132270168855536
User 34424 AUC after training: 0.6128830519074422
User 34424 does not improve AUC. Reverting changes.
Training on augumented user 83699 37/50 current_auc = 0.6132270168855536
User 83699 AUC after training: 0.6125703564727955
User 83699 does not improve AUC. Reverting changes.
Training on augumented user 30206 38/50 current_auc = 0.6132270168855536
User 30206 AUC after training: 0.6127267041901189
User 30206 does not improve AUC. Reverting changes.
Training on augumented user 14613 39/50 current_auc = 0.6132270168855536
User 14613 AUC after training: 0.6126328955597249
User 14613 does not improve AUC. Reverting changes.
Training on augumented user 25537 40/50 current_auc = 0.6132270168855536
User 25537 AUC after training: 0.6129455909943715
User 25537 does not improve AUC. Reverting changes.
Training on augumented user 39794 41/50 current_auc = 0.6132270168855536
User 39794 AUC after training: 0.6127267041901189
User 39794 does not improve AUC. Reverting changes.
Training on augumented user 75834 42/50 current_auc = 0.6132270168855536
User 75834 AUC after training: 0.6127892432770482
User 75834 does not improve AUC. Reverting changes.
Training on augumented user 76080 43/50 current_auc = 0.6132270168855536
User 76080 AUC after training: 0.6120075046904314
User 76080 does not improve AUC. Reverting changes.
Training on augumented user 53996 44/50 current_auc = 0.6132270168855536
User 53996 AUC after training: 0.6131644777986242
User 53996 does not improve AUC. Reverting changes.
Training on augumented user 33415 45/50 current_auc = 0.6132270168855536
User 33415 AUC after training: 0.6126954346466542
User 33415 does not improve AUC. Reverting changes.
Training on augumented user 88525 46/50 current_auc = 0.6132270168855536
User 88525 AUC after training: 0.6124921826141339
User 88525 does not improve AUC. Reverting changes.
Training on augumented user 78187 47/50 current_auc = 0.6132270168855536
User 78187 AUC after training: 0.6129143214509069
User 78187 does not improve AUC. Reverting changes.
Training on augumented user 45863 48/50 current_auc = 0.6132270168855536
User 45863 AUC after training: 0.6129455909943715
User 45863 does not improve AUC. Reverting changes.
Training on augumented user 12483 49/50 current_auc = 0.6132270168855536
User 12483 AUC after training: 0.6129143214509069
User 12483 does not improve AUC. Reverting changes.
[2024-12-02 18:41:42.064719] start test user 112245 119/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:41:42.552273] start test user 112245 119/567 recall augumented users by random, augumented_users = [108220, 97859, 53321, 20860, 8747, 11393, 31247, 73442, 4187, 95488, 78960, 18767, 125158, 101511, 99134, 77471, 130735, 115399, 30589, 91923, 60453, 90940, 48811, 41905, 47264, 129132, 34336, 58195, 53620, 94258, 9193, 103723, 26901, 119288, 46418, 115805, 87158, 36496, 138211, 104574, 132850, 126436, 80076, 64405, 54677, 30989, 95235, 69, 136711, 121484]
[2024-12-02 18:41:42.567661] user = 112245 Cloud 119/567
[2024-12-02 18:41:42.577851] user = 112245 Local 119/567
[2024-12-02 18:41:42.650099] user = 112245 Local+ 119/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:41:45.077560] user = 112245 MPDA- 119/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6666666666666666
Training on augumented user 108220 0/50 current_auc = 0.6666666666666666
User 108220 AUC after training: 0.6666666666666666
User 108220 does not improve AUC. Reverting changes.
Training on augumented user 97859 1/50 current_auc = 0.6666666666666666
User 97859 AUC after training: 0.6666666666666666
User 97859 does not improve AUC. Reverting changes.
Training on augumented user 53321 2/50 current_auc = 0.6666666666666666
User 53321 AUC after training: 0.6666666666666666
User 53321 does not improve AUC. Reverting changes.
Training on augumented user 20860 3/50 current_auc = 0.6666666666666666
User 20860 AUC after training: 0.6666666666666666
User 20860 does not improve AUC. Reverting changes.
Training on augumented user 8747 4/50 current_auc = 0.6666666666666666
User 8747 AUC after training: 0.6666666666666666
User 8747 does not improve AUC. Reverting changes.
Training on augumented user 11393 5/50 current_auc = 0.6666666666666666
User 11393 AUC after training: 0.6666666666666666
User 11393 does not improve AUC. Reverting changes.
Training on augumented user 31247 6/50 current_auc = 0.6666666666666666
User 31247 AUC after training: 0.6666666666666666
User 31247 does not improve AUC. Reverting changes.
Training on augumented user 73442 7/50 current_auc = 0.6666666666666666
User 73442 AUC after training: 0.6666666666666666
User 73442 does not improve AUC. Reverting changes.
Training on augumented user 4187 8/50 current_auc = 0.6666666666666666
User 4187 AUC after training: 0.6666666666666666
User 4187 does not improve AUC. Reverting changes.
Training on augumented user 95488 9/50 current_auc = 0.6666666666666666
User 95488 AUC after training: 0.6666666666666666
User 95488 does not improve AUC. Reverting changes.
Training on augumented user 78960 10/50 current_auc = 0.6666666666666666
User 78960 AUC after training: 0.6666666666666666
User 78960 does not improve AUC. Reverting changes.
Training on augumented user 18767 11/50 current_auc = 0.6666666666666666
User 18767 AUC after training: 0.6666666666666666
User 18767 does not improve AUC. Reverting changes.
Training on augumented user 125158 12/50 current_auc = 0.6666666666666666
User 125158 AUC after training: 0.6666666666666666
User 125158 does not improve AUC. Reverting changes.
Training on augumented user 101511 13/50 current_auc = 0.6666666666666666
User 101511 AUC after training: 0.6666666666666666
User 101511 does not improve AUC. Reverting changes.
Training on augumented user 99134 14/50 current_auc = 0.6666666666666666
User 99134 AUC after training: 0.6666666666666666
User 99134 does not improve AUC. Reverting changes.
Training on augumented user 77471 15/50 current_auc = 0.6666666666666666
User 77471 AUC after training: 0.6666666666666666
User 77471 does not improve AUC. Reverting changes.
Training on augumented user 130735 16/50 current_auc = 0.6666666666666666
User 130735 AUC after training: 0.6666666666666666
User 130735 does not improve AUC. Reverting changes.
Training on augumented user 115399 17/50 current_auc = 0.6666666666666666
User 115399 AUC after training: 0.6666666666666666
User 115399 does not improve AUC. Reverting changes.
Training on augumented user 30589 18/50 current_auc = 0.6666666666666666
User 30589 AUC after training: 0.6666666666666666
User 30589 does not improve AUC. Reverting changes.
Training on augumented user 91923 19/50 current_auc = 0.6666666666666666
User 91923 AUC after training: 0.6666666666666666
User 91923 does not improve AUC. Reverting changes.
Training on augumented user 60453 20/50 current_auc = 0.6666666666666666
User 60453 AUC after training: 0.6666666666666666
User 60453 does not improve AUC. Reverting changes.
Training on augumented user 90940 21/50 current_auc = 0.6666666666666666
User 90940 AUC after training: 0.6666666666666666
User 90940 does not improve AUC. Reverting changes.
Training on augumented user 48811 22/50 current_auc = 0.6666666666666666
User 48811 AUC after training: 0.6666666666666666
User 48811 does not improve AUC. Reverting changes.
Training on augumented user 41905 23/50 current_auc = 0.6666666666666666
User 41905 AUC after training: 0.6666666666666666
User 41905 does not improve AUC. Reverting changes.
Training on augumented user 47264 24/50 current_auc = 0.6666666666666666
User 47264 AUC after training: 0.6666666666666666
User 47264 does not improve AUC. Reverting changes.
Training on augumented user 129132 25/50 current_auc = 0.6666666666666666
User 129132 AUC after training: 0.6666666666666666
User 129132 does not improve AUC. Reverting changes.
Training on augumented user 34336 26/50 current_auc = 0.6666666666666666
User 34336 AUC after training: 0.6666666666666666
User 34336 does not improve AUC. Reverting changes.
Training on augumented user 58195 27/50 current_auc = 0.6666666666666666
User 58195 AUC after training: 0.6666666666666666
User 58195 does not improve AUC. Reverting changes.
Training on augumented user 53620 28/50 current_auc = 0.6666666666666666
User 53620 AUC after training: 0.6666666666666666
User 53620 does not improve AUC. Reverting changes.
Training on augumented user 94258 29/50 current_auc = 0.6666666666666666
User 94258 AUC after training: 0.6666666666666666
User 94258 does not improve AUC. Reverting changes.
Training on augumented user 9193 30/50 current_auc = 0.6666666666666666
User 9193 AUC after training: 0.6666666666666666
User 9193 does not improve AUC. Reverting changes.
Training on augumented user 103723 31/50 current_auc = 0.6666666666666666
User 103723 AUC after training: 0.6666666666666666
User 103723 does not improve AUC. Reverting changes.
Training on augumented user 26901 32/50 current_auc = 0.6666666666666666
User 26901 AUC after training: 0.6666666666666666
User 26901 does not improve AUC. Reverting changes.
Training on augumented user 119288 33/50 current_auc = 0.6666666666666666
User 119288 AUC after training: 0.6666666666666666
User 119288 does not improve AUC. Reverting changes.
Training on augumented user 46418 34/50 current_auc = 0.6666666666666666
User 46418 AUC after training: 0.6666666666666666
User 46418 does not improve AUC. Reverting changes.
Training on augumented user 115805 35/50 current_auc = 0.6666666666666666
User 115805 AUC after training: 0.6666666666666666
User 115805 does not improve AUC. Reverting changes.
Training on augumented user 87158 36/50 current_auc = 0.6666666666666666
User 87158 AUC after training: 0.6666666666666666
User 87158 does not improve AUC. Reverting changes.
Training on augumented user 36496 37/50 current_auc = 0.6666666666666666
User 36496 AUC after training: 0.6666666666666666
User 36496 does not improve AUC. Reverting changes.
Training on augumented user 138211 38/50 current_auc = 0.6666666666666666
User 138211 AUC after training: 0.6666666666666666
User 138211 does not improve AUC. Reverting changes.
Training on augumented user 104574 39/50 current_auc = 0.6666666666666666
User 104574 AUC after training: 0.6666666666666666
User 104574 does not improve AUC. Reverting changes.
Training on augumented user 132850 40/50 current_auc = 0.6666666666666666
User 132850 AUC after training: 0.6666666666666666
User 132850 does not improve AUC. Reverting changes.
Training on augumented user 126436 41/50 current_auc = 0.6666666666666666
User 126436 AUC after training: 0.6666666666666666
User 126436 does not improve AUC. Reverting changes.
Training on augumented user 80076 42/50 current_auc = 0.6666666666666666
User 80076 AUC after training: 0.6666666666666666
User 80076 does not improve AUC. Reverting changes.
Training on augumented user 64405 43/50 current_auc = 0.6666666666666666
User 64405 AUC after training: 0.6666666666666666
User 64405 does not improve AUC. Reverting changes.
Training on augumented user 54677 44/50 current_auc = 0.6666666666666666
User 54677 AUC after training: 0.6666666666666666
User 54677 does not improve AUC. Reverting changes.
Training on augumented user 30989 45/50 current_auc = 0.6666666666666666
User 30989 AUC after training: 0.6666666666666666
User 30989 does not improve AUC. Reverting changes.
Training on augumented user 95235 46/50 current_auc = 0.6666666666666666
User 95235 AUC after training: 0.6666666666666666
User 95235 does not improve AUC. Reverting changes.
Training on augumented user 69 47/50 current_auc = 0.6666666666666666
User 69 AUC after training: 0.6666666666666666
User 69 does not improve AUC. Reverting changes.
Training on augumented user 136711 48/50 current_auc = 0.6666666666666666
User 136711 AUC after training: 0.6666666666666666
User 136711 does not improve AUC. Reverting changes.
Training on augumented user 121484 49/50 current_auc = 0.6666666666666666
User 121484 AUC after training: 0.6666666666666666
User 121484 does not improve AUC. Reverting changes.
[2024-12-02 18:42:18.188524] start test user 112262 120/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:42:18.746622] start test user 112262 120/567 recall augumented users by random, augumented_users = [5038, 114380, 61414, 124664, 101829, 24773, 42167, 119619, 58429, 120588, 45988, 65298, 87486, 117085, 91599, 127777, 4517, 124209, 94772, 69449, 138352, 110446, 131373, 29070, 51474, 104746, 75671, 27440, 53759, 84171, 102025, 66865, 8363, 80055, 105732, 28629, 18207, 109015, 64093, 19666, 101079, 19629, 43329, 108999, 46091, 6489, 27599, 51468, 6658, 83038]
[2024-12-02 18:42:18.786220] user = 112262 Cloud 120/567
[2024-12-02 18:42:18.833595] user = 112262 Local 120/567
[2024-12-02 18:42:18.950977] user = 112262 Local+ 120/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:42:21.094423] user = 112262 MPDA- 120/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6540404040404041
Training on augumented user 5038 0/50 current_auc = 0.6540404040404041
User 5038 AUC after training: 0.6547619047619048
User 5038 improves AUC. Keeping the model.
Training on augumented user 114380 1/50 current_auc = 0.6547619047619048
User 114380 AUC after training: 0.6551226551226551
User 114380 improves AUC. Keeping the model.
Training on augumented user 61414 2/50 current_auc = 0.6551226551226551
User 61414 AUC after training: 0.654040404040404
User 61414 does not improve AUC. Reverting changes.
Training on augumented user 124664 3/50 current_auc = 0.6551226551226551
User 124664 AUC after training: 0.654040404040404
User 124664 does not improve AUC. Reverting changes.
Training on augumented user 101829 4/50 current_auc = 0.6551226551226551
User 101829 AUC after training: 0.6529581529581528
User 101829 does not improve AUC. Reverting changes.
Training on augumented user 24773 5/50 current_auc = 0.6551226551226551
User 24773 AUC after training: 0.6544011544011544
User 24773 does not improve AUC. Reverting changes.
Training on augumented user 42167 6/50 current_auc = 0.6551226551226551
User 42167 AUC after training: 0.6536796536796537
User 42167 does not improve AUC. Reverting changes.
Training on augumented user 119619 7/50 current_auc = 0.6551226551226551
User 119619 AUC after training: 0.6547619047619048
User 119619 does not improve AUC. Reverting changes.
Training on augumented user 58429 8/50 current_auc = 0.6551226551226551
User 58429 AUC after training: 0.6558441558441559
User 58429 improves AUC. Keeping the model.
Training on augumented user 120588 9/50 current_auc = 0.6558441558441559
User 120588 AUC after training: 0.6525974025974025
User 120588 does not improve AUC. Reverting changes.
Training on augumented user 45988 10/50 current_auc = 0.6558441558441559
User 45988 AUC after training: 0.6558441558441559
User 45988 does not improve AUC. Reverting changes.
Training on augumented user 65298 11/50 current_auc = 0.6558441558441559
User 65298 AUC after training: 0.6572871572871573
User 65298 improves AUC. Keeping the model.
Training on augumented user 87486 12/50 current_auc = 0.6572871572871573
User 87486 AUC after training: 0.6554834054834056
User 87486 does not improve AUC. Reverting changes.
Training on augumented user 117085 13/50 current_auc = 0.6572871572871573
User 117085 AUC after training: 0.6551226551226551
User 117085 does not improve AUC. Reverting changes.
Training on augumented user 91599 14/50 current_auc = 0.6572871572871573
User 91599 AUC after training: 0.6587301587301587
User 91599 improves AUC. Keeping the model.
Training on augumented user 127777 15/50 current_auc = 0.6587301587301587
User 127777 AUC after training: 0.6590909090909091
User 127777 improves AUC. Keeping the model.
Training on augumented user 4517 16/50 current_auc = 0.6590909090909091
User 4517 AUC after training: 0.658008658008658
User 4517 does not improve AUC. Reverting changes.
Training on augumented user 124209 17/50 current_auc = 0.6590909090909091
User 124209 AUC after training: 0.6594516594516594
User 124209 improves AUC. Keeping the model.
Training on augumented user 94772 18/50 current_auc = 0.6594516594516594
User 94772 AUC after training: 0.6598124098124097
User 94772 improves AUC. Keeping the model.
Training on augumented user 69449 19/50 current_auc = 0.6598124098124097
User 69449 AUC after training: 0.6590909090909091
User 69449 does not improve AUC. Reverting changes.
Training on augumented user 138352 20/50 current_auc = 0.6598124098124097
User 138352 AUC after training: 0.6598124098124097
User 138352 does not improve AUC. Reverting changes.
Training on augumented user 110446 21/50 current_auc = 0.6598124098124097
User 110446 AUC after training: 0.6587301587301587
User 110446 does not improve AUC. Reverting changes.
Training on augumented user 131373 22/50 current_auc = 0.6598124098124097
User 131373 AUC after training: 0.6590909090909091
User 131373 does not improve AUC. Reverting changes.
Training on augumented user 29070 23/50 current_auc = 0.6598124098124097
User 29070 AUC after training: 0.6572871572871574
User 29070 does not improve AUC. Reverting changes.
Training on augumented user 51474 24/50 current_auc = 0.6598124098124097
User 51474 AUC after training: 0.6583694083694084
User 51474 does not improve AUC. Reverting changes.
Training on augumented user 104746 25/50 current_auc = 0.6598124098124097
User 104746 AUC after training: 0.6569264069264069
User 104746 does not improve AUC. Reverting changes.
Training on augumented user 75671 26/50 current_auc = 0.6598124098124097
User 75671 AUC after training: 0.6587301587301587
User 75671 does not improve AUC. Reverting changes.
Training on augumented user 27440 27/50 current_auc = 0.6598124098124097
User 27440 AUC after training: 0.6612554112554112
User 27440 improves AUC. Keeping the model.
Training on augumented user 53759 28/50 current_auc = 0.6612554112554112
User 53759 AUC after training: 0.6587301587301587
User 53759 does not improve AUC. Reverting changes.
Training on augumented user 84171 29/50 current_auc = 0.6612554112554112
User 84171 AUC after training: 0.6608946608946609
User 84171 does not improve AUC. Reverting changes.
Training on augumented user 102025 30/50 current_auc = 0.6612554112554112
User 102025 AUC after training: 0.6572871572871574
User 102025 does not improve AUC. Reverting changes.
Training on augumented user 66865 31/50 current_auc = 0.6612554112554112
User 66865 AUC after training: 0.6598124098124099
User 66865 does not improve AUC. Reverting changes.
Training on augumented user 8363 32/50 current_auc = 0.6612554112554112
User 8363 AUC after training: 0.6601731601731602
User 8363 does not improve AUC. Reverting changes.
Training on augumented user 80055 33/50 current_auc = 0.6612554112554112
User 80055 AUC after training: 0.6616161616161617
User 80055 improves AUC. Keeping the model.
Training on augumented user 105732 34/50 current_auc = 0.6616161616161617
User 105732 AUC after training: 0.6605339105339106
User 105732 does not improve AUC. Reverting changes.
Training on augumented user 28629 35/50 current_auc = 0.6616161616161617
User 28629 AUC after training: 0.6594516594516595
User 28629 does not improve AUC. Reverting changes.
Training on augumented user 18207 36/50 current_auc = 0.6616161616161617
User 18207 AUC after training: 0.6605339105339105
User 18207 does not improve AUC. Reverting changes.
Training on augumented user 109015 37/50 current_auc = 0.6616161616161617
User 109015 AUC after training: 0.6608946608946609
User 109015 does not improve AUC. Reverting changes.
Training on augumented user 64093 38/50 current_auc = 0.6616161616161617
User 64093 AUC after training: 0.660894660894661
User 64093 does not improve AUC. Reverting changes.
Training on augumented user 19666 39/50 current_auc = 0.6616161616161617
User 19666 AUC after training: 0.6605339105339105
User 19666 does not improve AUC. Reverting changes.
Training on augumented user 101079 40/50 current_auc = 0.6616161616161617
User 101079 AUC after training: 0.6612554112554112
User 101079 does not improve AUC. Reverting changes.
Training on augumented user 19629 41/50 current_auc = 0.6616161616161617
User 19629 AUC after training: 0.6612554112554112
User 19629 does not improve AUC. Reverting changes.
Training on augumented user 43329 42/50 current_auc = 0.6616161616161617
User 43329 AUC after training: 0.6608946608946609
User 43329 does not improve AUC. Reverting changes.
Training on augumented user 108999 43/50 current_auc = 0.6616161616161617
User 108999 AUC after training: 0.6601731601731602
User 108999 does not improve AUC. Reverting changes.
Training on augumented user 46091 44/50 current_auc = 0.6616161616161617
User 46091 AUC after training: 0.660894660894661
User 46091 does not improve AUC. Reverting changes.
Training on augumented user 6489 45/50 current_auc = 0.6616161616161617
User 6489 AUC after training: 0.6601731601731602
User 6489 does not improve AUC. Reverting changes.
Training on augumented user 27599 46/50 current_auc = 0.6616161616161617
User 27599 AUC after training: 0.6587301587301586
User 27599 does not improve AUC. Reverting changes.
Training on augumented user 51468 47/50 current_auc = 0.6616161616161617
User 51468 AUC after training: 0.6587301587301587
User 51468 does not improve AUC. Reverting changes.
Training on augumented user 6658 48/50 current_auc = 0.6616161616161617
User 6658 AUC after training: 0.6612554112554112
User 6658 does not improve AUC. Reverting changes.
Training on augumented user 83038 49/50 current_auc = 0.6616161616161617
User 83038 AUC after training: 0.6608946608946609
User 83038 does not improve AUC. Reverting changes.
[2024-12-02 18:42:46.986872] start test user 112284 121/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:42:47.407872] start test user 112284 121/567 recall augumented users by random, augumented_users = [90423, 113117, 104900, 130189, 100740, 46097, 7721, 92860, 115164, 117899, 11922, 38742, 31451, 125499, 95476, 132813, 95901, 128599, 99325, 85547, 24751, 12021, 107234, 57549, 93478, 117857, 17549, 63291, 116765, 38386, 133790, 15882, 56669, 78202, 135219, 10166, 89046, 67590, 115323, 26407, 116194, 112747, 58443, 25326, 48594, 49344, 50435, 126952, 83282, 125355]
[2024-12-02 18:42:47.423351] user = 112284 Cloud 121/567
[2024-12-02 18:42:47.433089] user = 112284 Local 121/567
[2024-12-02 18:42:47.490441] user = 112284 Local+ 121/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:42:49.650078] user = 112284 MPDA- 121/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 1.0
Training on augumented user 90423 0/50 current_auc = 1.0
User 90423 AUC after training: 1.0
User 90423 does not improve AUC. Reverting changes.
Training on augumented user 113117 1/50 current_auc = 1.0
User 113117 AUC after training: 1.0
User 113117 does not improve AUC. Reverting changes.
Training on augumented user 104900 2/50 current_auc = 1.0
User 104900 AUC after training: 1.0
User 104900 does not improve AUC. Reverting changes.
Training on augumented user 130189 3/50 current_auc = 1.0
User 130189 AUC after training: 1.0
User 130189 does not improve AUC. Reverting changes.
Training on augumented user 100740 4/50 current_auc = 1.0
User 100740 AUC after training: 1.0
User 100740 does not improve AUC. Reverting changes.
Training on augumented user 46097 5/50 current_auc = 1.0
User 46097 AUC after training: 1.0
User 46097 does not improve AUC. Reverting changes.
Training on augumented user 7721 6/50 current_auc = 1.0
User 7721 AUC after training: 1.0
User 7721 does not improve AUC. Reverting changes.
Training on augumented user 92860 7/50 current_auc = 1.0
User 92860 AUC after training: 1.0
User 92860 does not improve AUC. Reverting changes.
Training on augumented user 115164 8/50 current_auc = 1.0
User 115164 AUC after training: 1.0
User 115164 does not improve AUC. Reverting changes.
Training on augumented user 117899 9/50 current_auc = 1.0
User 117899 AUC after training: 1.0
User 117899 does not improve AUC. Reverting changes.
Training on augumented user 11922 10/50 current_auc = 1.0
User 11922 AUC after training: 1.0
User 11922 does not improve AUC. Reverting changes.
Training on augumented user 38742 11/50 current_auc = 1.0
User 38742 AUC after training: 1.0
User 38742 does not improve AUC. Reverting changes.
Training on augumented user 31451 12/50 current_auc = 1.0
User 31451 AUC after training: 1.0
User 31451 does not improve AUC. Reverting changes.
Training on augumented user 125499 13/50 current_auc = 1.0
User 125499 AUC after training: 1.0
User 125499 does not improve AUC. Reverting changes.
Training on augumented user 95476 14/50 current_auc = 1.0
User 95476 AUC after training: 1.0
User 95476 does not improve AUC. Reverting changes.
Training on augumented user 132813 15/50 current_auc = 1.0
User 132813 AUC after training: 1.0
User 132813 does not improve AUC. Reverting changes.
Training on augumented user 95901 16/50 current_auc = 1.0
User 95901 AUC after training: 1.0
User 95901 does not improve AUC. Reverting changes.
Training on augumented user 128599 17/50 current_auc = 1.0
User 128599 AUC after training: 1.0
User 128599 does not improve AUC. Reverting changes.
Training on augumented user 99325 18/50 current_auc = 1.0
User 99325 AUC after training: 1.0
User 99325 does not improve AUC. Reverting changes.
Training on augumented user 85547 19/50 current_auc = 1.0
User 85547 AUC after training: 1.0
User 85547 does not improve AUC. Reverting changes.
Training on augumented user 24751 20/50 current_auc = 1.0
User 24751 AUC after training: 1.0
User 24751 does not improve AUC. Reverting changes.
Training on augumented user 12021 21/50 current_auc = 1.0
User 12021 AUC after training: 1.0
User 12021 does not improve AUC. Reverting changes.
Training on augumented user 107234 22/50 current_auc = 1.0
User 107234 AUC after training: 1.0
User 107234 does not improve AUC. Reverting changes.
Training on augumented user 57549 23/50 current_auc = 1.0
User 57549 AUC after training: 1.0
User 57549 does not improve AUC. Reverting changes.
Training on augumented user 93478 24/50 current_auc = 1.0
User 93478 AUC after training: 1.0
User 93478 does not improve AUC. Reverting changes.
Training on augumented user 117857 25/50 current_auc = 1.0
User 117857 AUC after training: 1.0
User 117857 does not improve AUC. Reverting changes.
Training on augumented user 17549 26/50 current_auc = 1.0
User 17549 AUC after training: 1.0
User 17549 does not improve AUC. Reverting changes.
Training on augumented user 63291 27/50 current_auc = 1.0
User 63291 AUC after training: 1.0
User 63291 does not improve AUC. Reverting changes.
Training on augumented user 116765 28/50 current_auc = 1.0
User 116765 AUC after training: 1.0
User 116765 does not improve AUC. Reverting changes.
Training on augumented user 38386 29/50 current_auc = 1.0
User 38386 AUC after training: 1.0
User 38386 does not improve AUC. Reverting changes.
Training on augumented user 133790 30/50 current_auc = 1.0
User 133790 AUC after training: 1.0
User 133790 does not improve AUC. Reverting changes.
Training on augumented user 15882 31/50 current_auc = 1.0
User 15882 AUC after training: 1.0
User 15882 does not improve AUC. Reverting changes.
Training on augumented user 56669 32/50 current_auc = 1.0
User 56669 AUC after training: 1.0
User 56669 does not improve AUC. Reverting changes.
Training on augumented user 78202 33/50 current_auc = 1.0
User 78202 AUC after training: 1.0
User 78202 does not improve AUC. Reverting changes.
Training on augumented user 135219 34/50 current_auc = 1.0
User 135219 AUC after training: 1.0
User 135219 does not improve AUC. Reverting changes.
Training on augumented user 10166 35/50 current_auc = 1.0
User 10166 AUC after training: 1.0
User 10166 does not improve AUC. Reverting changes.
Training on augumented user 89046 36/50 current_auc = 1.0
User 89046 AUC after training: 1.0
User 89046 does not improve AUC. Reverting changes.
Training on augumented user 67590 37/50 current_auc = 1.0
User 67590 AUC after training: 1.0
User 67590 does not improve AUC. Reverting changes.
Training on augumented user 115323 38/50 current_auc = 1.0
User 115323 AUC after training: 1.0
User 115323 does not improve AUC. Reverting changes.
Training on augumented user 26407 39/50 current_auc = 1.0
User 26407 AUC after training: 1.0
User 26407 does not improve AUC. Reverting changes.
Training on augumented user 116194 40/50 current_auc = 1.0
User 116194 AUC after training: 1.0
User 116194 does not improve AUC. Reverting changes.
Training on augumented user 112747 41/50 current_auc = 1.0
User 112747 AUC after training: 1.0
User 112747 does not improve AUC. Reverting changes.
Training on augumented user 58443 42/50 current_auc = 1.0
User 58443 AUC after training: 1.0
User 58443 does not improve AUC. Reverting changes.
Training on augumented user 25326 43/50 current_auc = 1.0
User 25326 AUC after training: 1.0
User 25326 does not improve AUC. Reverting changes.
Training on augumented user 48594 44/50 current_auc = 1.0
User 48594 AUC after training: 1.0
User 48594 does not improve AUC. Reverting changes.
Training on augumented user 49344 45/50 current_auc = 1.0
User 49344 AUC after training: 1.0
User 49344 does not improve AUC. Reverting changes.
Training on augumented user 50435 46/50 current_auc = 1.0
User 50435 AUC after training: 1.0
User 50435 does not improve AUC. Reverting changes.
Training on augumented user 126952 47/50 current_auc = 1.0
User 126952 AUC after training: 1.0
User 126952 does not improve AUC. Reverting changes.
Training on augumented user 83282 48/50 current_auc = 1.0
User 83282 AUC after training: 1.0
User 83282 does not improve AUC. Reverting changes.
Training on augumented user 125355 49/50 current_auc = 1.0
User 125355 AUC after training: 1.0
User 125355 does not improve AUC. Reverting changes.
[2024-12-02 18:43:13.639093] start test user 112294 122/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:43:14.058573] start test user 112294 122/567 recall augumented users by random, augumented_users = [71879, 96002, 77294, 20585, 98254, 57417, 13890, 55604, 66235, 123616, 67855, 60873, 115694, 123992, 78758, 102756, 133820, 14994, 64214, 87576, 61825, 57973, 125752, 17762, 89666, 19291, 8630, 135710, 23680, 72529, 20601, 93251, 114775, 46165, 34800, 127875, 80211, 12190, 66215, 126860, 19189, 104878, 55156, 44452, 17492, 94468, 38990, 54397, 124891, 114956]
[2024-12-02 18:43:14.073430] user = 112294 Cloud 122/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:43:14.080068] user = 112294 Local 122/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:43:14.124511] user = 112294 Local+ 122/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:43:16.492844] user = 112294 MPDA- 122/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 71879 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71879 AUC after training: 0.5
User 71879 does not improve AUC. Reverting changes.
Training on augumented user 96002 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96002 AUC after training: 0.5
User 96002 does not improve AUC. Reverting changes.
Training on augumented user 77294 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77294 AUC after training: 0.5
User 77294 does not improve AUC. Reverting changes.
Training on augumented user 20585 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20585 AUC after training: 0.5
User 20585 does not improve AUC. Reverting changes.
Training on augumented user 98254 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98254 AUC after training: 0.5
User 98254 does not improve AUC. Reverting changes.
Training on augumented user 57417 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57417 AUC after training: 0.5
User 57417 does not improve AUC. Reverting changes.
Training on augumented user 13890 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13890 AUC after training: 0.5
User 13890 does not improve AUC. Reverting changes.
Training on augumented user 55604 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55604 AUC after training: 0.5
User 55604 does not improve AUC. Reverting changes.
Training on augumented user 66235 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66235 AUC after training: 0.5
User 66235 does not improve AUC. Reverting changes.
Training on augumented user 123616 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123616 AUC after training: 0.5
User 123616 does not improve AUC. Reverting changes.
Training on augumented user 67855 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67855 AUC after training: 0.5
User 67855 does not improve AUC. Reverting changes.
Training on augumented user 60873 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60873 AUC after training: 0.5
User 60873 does not improve AUC. Reverting changes.
Training on augumented user 115694 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115694 AUC after training: 0.5
User 115694 does not improve AUC. Reverting changes.
Training on augumented user 123992 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123992 AUC after training: 0.5
User 123992 does not improve AUC. Reverting changes.
Training on augumented user 78758 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 78758 AUC after training: 0.5
User 78758 does not improve AUC. Reverting changes.
Training on augumented user 102756 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102756 AUC after training: 0.5
User 102756 does not improve AUC. Reverting changes.
Training on augumented user 133820 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133820 AUC after training: 0.5
User 133820 does not improve AUC. Reverting changes.
Training on augumented user 14994 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14994 AUC after training: 0.5
User 14994 does not improve AUC. Reverting changes.
Training on augumented user 64214 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64214 AUC after training: 0.5
User 64214 does not improve AUC. Reverting changes.
Training on augumented user 87576 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87576 AUC after training: 0.5
User 87576 does not improve AUC. Reverting changes.
Training on augumented user 61825 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61825 AUC after training: 0.5
User 61825 does not improve AUC. Reverting changes.
Training on augumented user 57973 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57973 AUC after training: 0.5
User 57973 does not improve AUC. Reverting changes.
Training on augumented user 125752 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 125752 AUC after training: 0.5
User 125752 does not improve AUC. Reverting changes.
Training on augumented user 17762 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 17762 AUC after training: 0.5
User 17762 does not improve AUC. Reverting changes.
Training on augumented user 89666 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89666 AUC after training: 0.5
User 89666 does not improve AUC. Reverting changes.
Training on augumented user 19291 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19291 AUC after training: 0.5
User 19291 does not improve AUC. Reverting changes.
Training on augumented user 8630 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8630 AUC after training: 0.5
User 8630 does not improve AUC. Reverting changes.
Training on augumented user 135710 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 135710 AUC after training: 0.5
User 135710 does not improve AUC. Reverting changes.
Training on augumented user 23680 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23680 AUC after training: 0.5
User 23680 does not improve AUC. Reverting changes.
Training on augumented user 72529 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72529 AUC after training: 0.5
User 72529 does not improve AUC. Reverting changes.
Training on augumented user 20601 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20601 AUC after training: 0.5
User 20601 does not improve AUC. Reverting changes.
Training on augumented user 93251 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93251 AUC after training: 0.5
User 93251 does not improve AUC. Reverting changes.
Training on augumented user 114775 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114775 AUC after training: 0.5
User 114775 does not improve AUC. Reverting changes.
Training on augumented user 46165 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 46165 AUC after training: 0.5
User 46165 does not improve AUC. Reverting changes.
Training on augumented user 34800 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 34800 AUC after training: 0.5
User 34800 does not improve AUC. Reverting changes.
Training on augumented user 127875 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127875 AUC after training: 0.5
User 127875 does not improve AUC. Reverting changes.
Training on augumented user 80211 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80211 AUC after training: 0.5
User 80211 does not improve AUC. Reverting changes.
Training on augumented user 12190 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12190 AUC after training: 0.5
User 12190 does not improve AUC. Reverting changes.
Training on augumented user 66215 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66215 AUC after training: 0.5
User 66215 does not improve AUC. Reverting changes.
Training on augumented user 126860 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126860 AUC after training: 0.5
User 126860 does not improve AUC. Reverting changes.
Training on augumented user 19189 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19189 AUC after training: 0.5
User 19189 does not improve AUC. Reverting changes.
Training on augumented user 104878 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104878 AUC after training: 0.5
User 104878 does not improve AUC. Reverting changes.
Training on augumented user 55156 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55156 AUC after training: 0.5
User 55156 does not improve AUC. Reverting changes.
Training on augumented user 44452 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44452 AUC after training: 0.5
User 44452 does not improve AUC. Reverting changes.
Training on augumented user 17492 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 17492 AUC after training: 0.5
User 17492 does not improve AUC. Reverting changes.
Training on augumented user 94468 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94468 AUC after training: 0.5
User 94468 does not improve AUC. Reverting changes.
Training on augumented user 38990 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38990 AUC after training: 0.5
User 38990 does not improve AUC. Reverting changes.
Training on augumented user 54397 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54397 AUC after training: 0.5
User 54397 does not improve AUC. Reverting changes.
Training on augumented user 124891 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124891 AUC after training: 0.5
User 124891 does not improve AUC. Reverting changes.
Training on augumented user 114956 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114956 AUC after training: 0.5
User 114956 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:43:44.405534] start test user 112337 123/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:43:44.962808] start test user 112337 123/567 recall augumented users by random, augumented_users = [20602, 61229, 23563, 20386, 26496, 59825, 34041, 86442, 33981, 86196, 51387, 124945, 97194, 12069, 127916, 127281, 113079, 27565, 32407, 95354, 56742, 118480, 60920, 111221, 36928, 135306, 46590, 99187, 116336, 5026, 135664, 54970, 102640, 118486, 101012, 14750, 89887, 104745, 29485, 39176, 37410, 76109, 60741, 48421, 113702, 52638, 63314, 38787, 87098, 99610]
[2024-12-02 18:43:44.984815] user = 112337 Cloud 123/567
[2024-12-02 18:43:45.004702] user = 112337 Local 123/567
[2024-12-02 18:43:45.166731] user = 112337 Local+ 123/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:43:47.223668] user = 112337 MPDA- 123/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.44385162601626016
Training on augumented user 20602 0/50 current_auc = 0.44385162601626016
User 20602 AUC after training: 0.44486788617886175
User 20602 improves AUC. Keeping the model.
Training on augumented user 61229 1/50 current_auc = 0.44486788617886175
User 61229 AUC after training: 0.44537601626016254
User 61229 improves AUC. Keeping the model.
Training on augumented user 23563 2/50 current_auc = 0.44537601626016254
User 23563 AUC after training: 0.4451219512195122
User 23563 does not improve AUC. Reverting changes.
Training on augumented user 20386 3/50 current_auc = 0.44537601626016254
User 20386 AUC after training: 0.4453760162601626
User 20386 improves AUC. Keeping the model.
Training on augumented user 26496 4/50 current_auc = 0.4453760162601626
User 26496 AUC after training: 0.44563008130081305
User 26496 improves AUC. Keeping the model.
Training on augumented user 59825 5/50 current_auc = 0.44563008130081305
User 59825 AUC after training: 0.44613821138211385
User 59825 improves AUC. Keeping the model.
Training on augumented user 34041 6/50 current_auc = 0.44613821138211385
User 34041 AUC after training: 0.4466463414634146
User 34041 improves AUC. Keeping the model.
Training on augumented user 86442 7/50 current_auc = 0.4466463414634146
User 86442 AUC after training: 0.4466463414634146
User 86442 does not improve AUC. Reverting changes.
Training on augumented user 33981 8/50 current_auc = 0.4466463414634146
User 33981 AUC after training: 0.44664634146341464
User 33981 improves AUC. Keeping the model.
Training on augumented user 86196 9/50 current_auc = 0.44664634146341464
User 86196 AUC after training: 0.4471544715447155
User 86196 improves AUC. Keeping the model.
Training on augumented user 51387 10/50 current_auc = 0.4471544715447155
User 51387 AUC after training: 0.448170731707317
User 51387 improves AUC. Keeping the model.
Training on augumented user 124945 11/50 current_auc = 0.448170731707317
User 124945 AUC after training: 0.44664634146341464
User 124945 does not improve AUC. Reverting changes.
Training on augumented user 97194 12/50 current_auc = 0.448170731707317
User 97194 AUC after training: 0.4484247967479674
User 97194 improves AUC. Keeping the model.
Training on augumented user 12069 13/50 current_auc = 0.4484247967479674
User 12069 AUC after training: 0.4486788617886179
User 12069 improves AUC. Keeping the model.
Training on augumented user 127916 14/50 current_auc = 0.4486788617886179
User 127916 AUC after training: 0.4481707317073171
User 127916 does not improve AUC. Reverting changes.
Training on augumented user 127281 15/50 current_auc = 0.4486788617886179
User 127281 AUC after training: 0.44918699186991873
User 127281 improves AUC. Keeping the model.
Training on augumented user 113079 16/50 current_auc = 0.44918699186991873
User 113079 AUC after training: 0.44918699186991873
User 113079 does not improve AUC. Reverting changes.
Training on augumented user 27565 17/50 current_auc = 0.44918699186991873
User 27565 AUC after training: 0.4486788617886179
User 27565 does not improve AUC. Reverting changes.
Training on augumented user 32407 18/50 current_auc = 0.44918699186991873
User 32407 AUC after training: 0.4486788617886179
User 32407 does not improve AUC. Reverting changes.
Training on augumented user 95354 19/50 current_auc = 0.44918699186991873
User 95354 AUC after training: 0.4491869918699187
User 95354 does not improve AUC. Reverting changes.
Training on augumented user 56742 20/50 current_auc = 0.44918699186991873
User 56742 AUC after training: 0.4486788617886179
User 56742 does not improve AUC. Reverting changes.
Training on augumented user 118480 21/50 current_auc = 0.44918699186991873
User 118480 AUC after training: 0.4481707317073171
User 118480 does not improve AUC. Reverting changes.
Training on augumented user 60920 22/50 current_auc = 0.44918699186991873
User 60920 AUC after training: 0.44918699186991873
User 60920 does not improve AUC. Reverting changes.
Training on augumented user 111221 23/50 current_auc = 0.44918699186991873
User 111221 AUC after training: 0.4486788617886179
User 111221 does not improve AUC. Reverting changes.
Training on augumented user 36928 24/50 current_auc = 0.44918699186991873
User 36928 AUC after training: 0.44918699186991873
User 36928 does not improve AUC. Reverting changes.
Training on augumented user 135306 25/50 current_auc = 0.44918699186991873
User 135306 AUC after training: 0.44766260162601623
User 135306 does not improve AUC. Reverting changes.
Training on augumented user 46590 26/50 current_auc = 0.44918699186991873
User 46590 AUC after training: 0.4486788617886179
User 46590 does not improve AUC. Reverting changes.
Training on augumented user 99187 27/50 current_auc = 0.44918699186991873
User 99187 AUC after training: 0.448170731707317
User 99187 does not improve AUC. Reverting changes.
Training on augumented user 116336 28/50 current_auc = 0.44918699186991873
User 116336 AUC after training: 0.4484247967479675
User 116336 does not improve AUC. Reverting changes.
Training on augumented user 5026 29/50 current_auc = 0.44918699186991873
User 5026 AUC after training: 0.4481707317073171
User 5026 does not improve AUC. Reverting changes.
Training on augumented user 135664 30/50 current_auc = 0.44918699186991873
User 135664 AUC after training: 0.4486788617886179
User 135664 does not improve AUC. Reverting changes.
Training on augumented user 54970 31/50 current_auc = 0.44918699186991873
User 54970 AUC after training: 0.4491869918699187
User 54970 does not improve AUC. Reverting changes.
Training on augumented user 102640 32/50 current_auc = 0.44918699186991873
User 102640 AUC after training: 0.448170731707317
User 102640 does not improve AUC. Reverting changes.
Training on augumented user 118486 33/50 current_auc = 0.44918699186991873
User 118486 AUC after training: 0.448170731707317
User 118486 does not improve AUC. Reverting changes.
Training on augumented user 101012 34/50 current_auc = 0.44918699186991873
User 101012 AUC after training: 0.44969512195121947
User 101012 improves AUC. Keeping the model.
Training on augumented user 14750 35/50 current_auc = 0.44969512195121947
User 14750 AUC after training: 0.4491869918699187
User 14750 does not improve AUC. Reverting changes.
Training on augumented user 89887 36/50 current_auc = 0.44969512195121947
User 89887 AUC after training: 0.44969512195121947
User 89887 does not improve AUC. Reverting changes.
Training on augumented user 104745 37/50 current_auc = 0.44969512195121947
User 104745 AUC after training: 0.44969512195121947
User 104745 does not improve AUC. Reverting changes.
Training on augumented user 29485 38/50 current_auc = 0.44969512195121947
User 29485 AUC after training: 0.44613821138211385
User 29485 does not improve AUC. Reverting changes.
Training on augumented user 39176 39/50 current_auc = 0.44969512195121947
User 39176 AUC after training: 0.4491869918699187
User 39176 does not improve AUC. Reverting changes.
Training on augumented user 37410 40/50 current_auc = 0.44969512195121947
User 37410 AUC after training: 0.44918699186991873
User 37410 does not improve AUC. Reverting changes.
Training on augumented user 76109 41/50 current_auc = 0.44969512195121947
User 76109 AUC after training: 0.4496951219512195
User 76109 improves AUC. Keeping the model.
Training on augumented user 60741 42/50 current_auc = 0.4496951219512195
User 60741 AUC after training: 0.4496951219512195
User 60741 does not improve AUC. Reverting changes.
Training on augumented user 48421 43/50 current_auc = 0.4496951219512195
User 48421 AUC after training: 0.4496951219512195
User 48421 does not improve AUC. Reverting changes.
Training on augumented user 113702 44/50 current_auc = 0.4496951219512195
User 113702 AUC after training: 0.4486788617886178
User 113702 does not improve AUC. Reverting changes.
Training on augumented user 52638 45/50 current_auc = 0.4496951219512195
User 52638 AUC after training: 0.448170731707317
User 52638 does not improve AUC. Reverting changes.
Training on augumented user 63314 46/50 current_auc = 0.4496951219512195
User 63314 AUC after training: 0.4491869918699186
User 63314 does not improve AUC. Reverting changes.
Training on augumented user 38787 47/50 current_auc = 0.4496951219512195
User 38787 AUC after training: 0.448170731707317
User 38787 does not improve AUC. Reverting changes.
Training on augumented user 87098 48/50 current_auc = 0.4496951219512195
User 87098 AUC after training: 0.4496951219512195
User 87098 does not improve AUC. Reverting changes.
Training on augumented user 99610 49/50 current_auc = 0.4496951219512195
User 99610 AUC after training: 0.44918699186991873
User 99610 does not improve AUC. Reverting changes.
[2024-12-02 18:44:16.392013] start test user 112350 124/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:44:17.077368] start test user 112350 124/567 recall augumented users by random, augumented_users = [72114, 53807, 20632, 28761, 84252, 60198, 78867, 66471, 21583, 112656, 81682, 68226, 40568, 133481, 47219, 134719, 35384, 20804, 14141, 41160, 67630, 44837, 109928, 22036, 37897, 8352, 132575, 26737, 31743, 116827, 38753, 90365, 12850, 101974, 44513, 63041, 73630, 43176, 37830, 53876, 7280, 51614, 26978, 78345, 121859, 37017, 121364, 77625, 36859, 105634]
[2024-12-02 18:44:17.105285] user = 112350 Cloud 124/567
[2024-12-02 18:44:17.147019] user = 112350 Local 124/567
[2024-12-02 18:44:17.182731] user = 112350 Local+ 124/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:44:20.258842] user = 112350 MPDA- 124/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5872460872460872
Training on augumented user 72114 0/50 current_auc = 0.5872460872460872
User 72114 AUC after training: 0.5874125874125874
User 72114 improves AUC. Keeping the model.
Training on augumented user 53807 1/50 current_auc = 0.5874125874125874
User 53807 AUC after training: 0.5870795870795871
User 53807 does not improve AUC. Reverting changes.
Training on augumented user 20632 2/50 current_auc = 0.5874125874125874
User 20632 AUC after training: 0.5860805860805861
User 20632 does not improve AUC. Reverting changes.
Training on augumented user 28761 3/50 current_auc = 0.5874125874125874
User 28761 AUC after training: 0.5874125874125875
User 28761 improves AUC. Keeping the model.
Training on augumented user 84252 4/50 current_auc = 0.5874125874125875
User 84252 AUC after training: 0.5872460872460874
User 84252 does not improve AUC. Reverting changes.
Training on augumented user 60198 5/50 current_auc = 0.5874125874125875
User 60198 AUC after training: 0.5875790875790876
User 60198 improves AUC. Keeping the model.
Training on augumented user 78867 6/50 current_auc = 0.5875790875790876
User 78867 AUC after training: 0.5872460872460873
User 78867 does not improve AUC. Reverting changes.
Training on augumented user 66471 7/50 current_auc = 0.5875790875790876
User 66471 AUC after training: 0.5864135864135864
User 66471 does not improve AUC. Reverting changes.
Training on augumented user 21583 8/50 current_auc = 0.5875790875790876
User 21583 AUC after training: 0.5870795870795871
User 21583 does not improve AUC. Reverting changes.
Training on augumented user 112656 9/50 current_auc = 0.5875790875790876
User 112656 AUC after training: 0.5852480852480852
User 112656 does not improve AUC. Reverting changes.
Training on augumented user 81682 10/50 current_auc = 0.5875790875790876
User 81682 AUC after training: 0.5869130869130869
User 81682 does not improve AUC. Reverting changes.
Training on augumented user 68226 11/50 current_auc = 0.5875790875790876
User 68226 AUC after training: 0.586913086913087
User 68226 does not improve AUC. Reverting changes.
Training on augumented user 40568 12/50 current_auc = 0.5875790875790876
User 40568 AUC after training: 0.5875790875790877
User 40568 improves AUC. Keeping the model.
Training on augumented user 133481 13/50 current_auc = 0.5875790875790877
User 133481 AUC after training: 0.5867465867465868
User 133481 does not improve AUC. Reverting changes.
Training on augumented user 47219 14/50 current_auc = 0.5875790875790877
User 47219 AUC after training: 0.5867465867465868
User 47219 does not improve AUC. Reverting changes.
Training on augumented user 134719 15/50 current_auc = 0.5875790875790877
User 134719 AUC after training: 0.5870795870795872
User 134719 does not improve AUC. Reverting changes.
Training on augumented user 35384 16/50 current_auc = 0.5875790875790877
User 35384 AUC after training: 0.5870795870795872
User 35384 does not improve AUC. Reverting changes.
Training on augumented user 20804 17/50 current_auc = 0.5875790875790877
User 20804 AUC after training: 0.5874125874125875
User 20804 does not improve AUC. Reverting changes.
Training on augumented user 14141 18/50 current_auc = 0.5875790875790877
User 14141 AUC after training: 0.5864135864135864
User 14141 does not improve AUC. Reverting changes.
Training on augumented user 41160 19/50 current_auc = 0.5875790875790877
User 41160 AUC after training: 0.5855810855810856
User 41160 does not improve AUC. Reverting changes.
Training on augumented user 67630 20/50 current_auc = 0.5875790875790877
User 67630 AUC after training: 0.5880785880785881
User 67630 improves AUC. Keeping the model.
Training on augumented user 44837 21/50 current_auc = 0.5880785880785881
User 44837 AUC after training: 0.5887445887445889
User 44837 improves AUC. Keeping the model.
Training on augumented user 109928 22/50 current_auc = 0.5887445887445889
User 109928 AUC after training: 0.5894105894105895
User 109928 improves AUC. Keeping the model.
Training on augumented user 22036 23/50 current_auc = 0.5894105894105895
User 22036 AUC after training: 0.5892440892440893
User 22036 does not improve AUC. Reverting changes.
Training on augumented user 37897 24/50 current_auc = 0.5894105894105895
User 37897 AUC after training: 0.5867465867465868
User 37897 does not improve AUC. Reverting changes.
Training on augumented user 8352 25/50 current_auc = 0.5894105894105895
User 8352 AUC after training: 0.5872460872460873
User 8352 does not improve AUC. Reverting changes.
Training on augumented user 132575 26/50 current_auc = 0.5894105894105895
User 132575 AUC after training: 0.5885780885780886
User 132575 does not improve AUC. Reverting changes.
Training on augumented user 26737 27/50 current_auc = 0.5894105894105895
User 26737 AUC after training: 0.5893273393273394
User 26737 does not improve AUC. Reverting changes.
Training on augumented user 31743 28/50 current_auc = 0.5894105894105895
User 31743 AUC after training: 0.5870795870795871
User 31743 does not improve AUC. Reverting changes.
Training on augumented user 116827 29/50 current_auc = 0.5894105894105895
User 116827 AUC after training: 0.5879120879120879
User 116827 does not improve AUC. Reverting changes.
Training on augumented user 38753 30/50 current_auc = 0.5894105894105895
User 38753 AUC after training: 0.5872460872460873
User 38753 does not improve AUC. Reverting changes.
Training on augumented user 90365 31/50 current_auc = 0.5894105894105895
User 90365 AUC after training: 0.5887445887445888
User 90365 does not improve AUC. Reverting changes.
Training on augumented user 12850 32/50 current_auc = 0.5894105894105895
User 12850 AUC after training: 0.5875790875790877
User 12850 does not improve AUC. Reverting changes.
Training on augumented user 101974 33/50 current_auc = 0.5894105894105895
User 101974 AUC after training: 0.5887445887445888
User 101974 does not improve AUC. Reverting changes.
Training on augumented user 44513 34/50 current_auc = 0.5894105894105895
User 44513 AUC after training: 0.5889110889110889
User 44513 does not improve AUC. Reverting changes.
Training on augumented user 63041 35/50 current_auc = 0.5894105894105895
User 63041 AUC after training: 0.5884115884115885
User 63041 does not improve AUC. Reverting changes.
Training on augumented user 73630 36/50 current_auc = 0.5894105894105895
User 73630 AUC after training: 0.588911088911089
User 73630 does not improve AUC. Reverting changes.
Training on augumented user 43176 37/50 current_auc = 0.5894105894105895
User 43176 AUC after training: 0.5887445887445888
User 43176 does not improve AUC. Reverting changes.
Training on augumented user 37830 38/50 current_auc = 0.5894105894105895
User 37830 AUC after training: 0.5880785880785881
User 37830 does not improve AUC. Reverting changes.
Training on augumented user 53876 39/50 current_auc = 0.5894105894105895
User 53876 AUC after training: 0.5865800865800865
User 53876 does not improve AUC. Reverting changes.
Training on augumented user 7280 40/50 current_auc = 0.5894105894105895
User 7280 AUC after training: 0.5870795870795871
User 7280 does not improve AUC. Reverting changes.
Training on augumented user 51614 41/50 current_auc = 0.5894105894105895
User 51614 AUC after training: 0.5885780885780887
User 51614 does not improve AUC. Reverting changes.
Training on augumented user 26978 42/50 current_auc = 0.5894105894105895
User 26978 AUC after training: 0.5870795870795871
User 26978 does not improve AUC. Reverting changes.
Training on augumented user 78345 43/50 current_auc = 0.5894105894105895
User 78345 AUC after training: 0.5882450882450884
User 78345 does not improve AUC. Reverting changes.
Training on augumented user 121859 44/50 current_auc = 0.5894105894105895
User 121859 AUC after training: 0.5892440892440893
User 121859 does not improve AUC. Reverting changes.
Training on augumented user 37017 45/50 current_auc = 0.5894105894105895
User 37017 AUC after training: 0.5880785880785881
User 37017 does not improve AUC. Reverting changes.
Training on augumented user 121364 46/50 current_auc = 0.5894105894105895
User 121364 AUC after training: 0.5892440892440892
User 121364 does not improve AUC. Reverting changes.
Training on augumented user 77625 47/50 current_auc = 0.5894105894105895
User 77625 AUC after training: 0.5892440892440893
User 77625 does not improve AUC. Reverting changes.
Training on augumented user 36859 48/50 current_auc = 0.5894105894105895
User 36859 AUC after training: 0.5882450882450883
User 36859 does not improve AUC. Reverting changes.
Training on augumented user 105634 49/50 current_auc = 0.5894105894105895
User 105634 AUC after training: 0.5884115884115886
User 105634 does not improve AUC. Reverting changes.
[2024-12-02 18:44:50.516920] start test user 112355 125/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:44:51.348414] start test user 112355 125/567 recall augumented users by random, augumented_users = [126718, 85944, 36887, 114621, 62037, 374, 124563, 5964, 1407, 10149, 44394, 76302, 84271, 108189, 84638, 45145, 66552, 86337, 11848, 12279, 10410, 20676, 64729, 678, 124505, 57836, 102339, 68463, 43860, 13416, 97709, 19069, 31915, 67542, 32277, 6286, 86721, 100241, 87429, 71990, 135114, 58837, 119426, 18319, 120300, 121675, 6018, 71711, 95662, 116746]
[2024-12-02 18:44:51.372073] user = 112355 Cloud 125/567
[2024-12-02 18:44:51.395665] user = 112355 Local 125/567
[2024-12-02 18:44:51.631087] user = 112355 Local+ 125/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:44:53.668733] user = 112355 MPDA- 125/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7556851311953353
Training on augumented user 126718 0/50 current_auc = 0.7556851311953353
User 126718 AUC after training: 0.7533527696793003
User 126718 does not improve AUC. Reverting changes.
Training on augumented user 85944 1/50 current_auc = 0.7556851311953353
User 85944 AUC after training: 0.7548104956268222
User 85944 does not improve AUC. Reverting changes.
Training on augumented user 36887 2/50 current_auc = 0.7556851311953353
User 36887 AUC after training: 0.7548104956268222
User 36887 does not improve AUC. Reverting changes.
Training on augumented user 114621 3/50 current_auc = 0.7556851311953353
User 114621 AUC after training: 0.755393586005831
User 114621 does not improve AUC. Reverting changes.
Training on augumented user 62037 4/50 current_auc = 0.7556851311953353
User 62037 AUC after training: 0.7551020408163265
User 62037 does not improve AUC. Reverting changes.
Training on augumented user 374 5/50 current_auc = 0.7556851311953353
User 374 AUC after training: 0.7556851311953353
User 374 does not improve AUC. Reverting changes.
Training on augumented user 124563 6/50 current_auc = 0.7556851311953353
User 124563 AUC after training: 0.7551020408163265
User 124563 does not improve AUC. Reverting changes.
Training on augumented user 5964 7/50 current_auc = 0.7556851311953353
User 5964 AUC after training: 0.7548104956268221
User 5964 does not improve AUC. Reverting changes.
Training on augumented user 1407 8/50 current_auc = 0.7556851311953353
User 1407 AUC after training: 0.7545189504373178
User 1407 does not improve AUC. Reverting changes.
Training on augumented user 10149 9/50 current_auc = 0.7556851311953353
User 10149 AUC after training: 0.7548104956268222
User 10149 does not improve AUC. Reverting changes.
Training on augumented user 44394 10/50 current_auc = 0.7556851311953353
User 44394 AUC after training: 0.7545189504373178
User 44394 does not improve AUC. Reverting changes.
Training on augumented user 76302 11/50 current_auc = 0.7556851311953353
User 76302 AUC after training: 0.753061224489796
User 76302 does not improve AUC. Reverting changes.
Training on augumented user 84271 12/50 current_auc = 0.7556851311953353
User 84271 AUC after training: 0.7542274052478135
User 84271 does not improve AUC. Reverting changes.
Training on augumented user 108189 13/50 current_auc = 0.7556851311953353
User 108189 AUC after training: 0.7551020408163266
User 108189 does not improve AUC. Reverting changes.
Training on augumented user 84638 14/50 current_auc = 0.7556851311953353
User 84638 AUC after training: 0.7542274052478134
User 84638 does not improve AUC. Reverting changes.
Training on augumented user 45145 15/50 current_auc = 0.7556851311953353
User 45145 AUC after training: 0.7545189504373178
User 45145 does not improve AUC. Reverting changes.
Training on augumented user 66552 16/50 current_auc = 0.7556851311953353
User 66552 AUC after training: 0.753935860058309
User 66552 does not improve AUC. Reverting changes.
Training on augumented user 86337 17/50 current_auc = 0.7556851311953353
User 86337 AUC after training: 0.753935860058309
User 86337 does not improve AUC. Reverting changes.
Training on augumented user 11848 18/50 current_auc = 0.7556851311953353
User 11848 AUC after training: 0.7559766763848397
User 11848 improves AUC. Keeping the model.
Training on augumented user 12279 19/50 current_auc = 0.7559766763848397
User 12279 AUC after training: 0.7551020408163265
User 12279 does not improve AUC. Reverting changes.
Training on augumented user 10410 20/50 current_auc = 0.7559766763848397
User 10410 AUC after training: 0.7545189504373178
User 10410 does not improve AUC. Reverting changes.
Training on augumented user 20676 21/50 current_auc = 0.7559766763848397
User 20676 AUC after training: 0.7542274052478135
User 20676 does not improve AUC. Reverting changes.
Training on augumented user 64729 22/50 current_auc = 0.7559766763848397
User 64729 AUC after training: 0.7551020408163265
User 64729 does not improve AUC. Reverting changes.
Training on augumented user 678 23/50 current_auc = 0.7559766763848397
User 678 AUC after training: 0.7551020408163265
User 678 does not improve AUC. Reverting changes.
Training on augumented user 124505 24/50 current_auc = 0.7559766763848397
User 124505 AUC after training: 0.755393586005831
User 124505 does not improve AUC. Reverting changes.
Training on augumented user 57836 25/50 current_auc = 0.7559766763848397
User 57836 AUC after training: 0.7536443148688047
User 57836 does not improve AUC. Reverting changes.
Training on augumented user 102339 26/50 current_auc = 0.7559766763848397
User 102339 AUC after training: 0.7545189504373178
User 102339 does not improve AUC. Reverting changes.
Training on augumented user 68463 27/50 current_auc = 0.7559766763848397
User 68463 AUC after training: 0.7545189504373179
User 68463 does not improve AUC. Reverting changes.
Training on augumented user 43860 28/50 current_auc = 0.7559766763848397
User 43860 AUC after training: 0.7542274052478134
User 43860 does not improve AUC. Reverting changes.
Training on augumented user 13416 29/50 current_auc = 0.7559766763848397
User 13416 AUC after training: 0.7559766763848397
User 13416 does not improve AUC. Reverting changes.
Training on augumented user 97709 30/50 current_auc = 0.7559766763848397
User 97709 AUC after training: 0.7545189504373178
User 97709 does not improve AUC. Reverting changes.
Training on augumented user 19069 31/50 current_auc = 0.7559766763848397
User 19069 AUC after training: 0.7551020408163265
User 19069 does not improve AUC. Reverting changes.
Training on augumented user 31915 32/50 current_auc = 0.7559766763848397
User 31915 AUC after training: 0.7548104956268222
User 31915 does not improve AUC. Reverting changes.
Training on augumented user 67542 33/50 current_auc = 0.7559766763848397
User 67542 AUC after training: 0.7551020408163265
User 67542 does not improve AUC. Reverting changes.
Training on augumented user 32277 34/50 current_auc = 0.7559766763848397
User 32277 AUC after training: 0.7556851311953353
User 32277 does not improve AUC. Reverting changes.
Training on augumented user 6286 35/50 current_auc = 0.7559766763848397
User 6286 AUC after training: 0.753061224489796
User 6286 does not improve AUC. Reverting changes.
Training on augumented user 86721 36/50 current_auc = 0.7559766763848397
User 86721 AUC after training: 0.7542274052478135
User 86721 does not improve AUC. Reverting changes.
Training on augumented user 100241 37/50 current_auc = 0.7559766763848397
User 100241 AUC after training: 0.755393586005831
User 100241 does not improve AUC. Reverting changes.
Training on augumented user 87429 38/50 current_auc = 0.7559766763848397
User 87429 AUC after training: 0.7542274052478134
User 87429 does not improve AUC. Reverting changes.
Training on augumented user 71990 39/50 current_auc = 0.7559766763848397
User 71990 AUC after training: 0.755393586005831
User 71990 does not improve AUC. Reverting changes.
Training on augumented user 135114 40/50 current_auc = 0.7559766763848397
User 135114 AUC after training: 0.7562682215743441
User 135114 improves AUC. Keeping the model.
Training on augumented user 58837 41/50 current_auc = 0.7562682215743441
User 58837 AUC after training: 0.7559766763848397
User 58837 does not improve AUC. Reverting changes.
Training on augumented user 119426 42/50 current_auc = 0.7562682215743441
User 119426 AUC after training: 0.7556851311953353
User 119426 does not improve AUC. Reverting changes.
Training on augumented user 18319 43/50 current_auc = 0.7562682215743441
User 18319 AUC after training: 0.7559766763848397
User 18319 does not improve AUC. Reverting changes.
Training on augumented user 120300 44/50 current_auc = 0.7562682215743441
User 120300 AUC after training: 0.7559766763848397
User 120300 does not improve AUC. Reverting changes.
Training on augumented user 121675 45/50 current_auc = 0.7562682215743441
User 121675 AUC after training: 0.757725947521866
User 121675 improves AUC. Keeping the model.
Training on augumented user 6018 46/50 current_auc = 0.757725947521866
User 6018 AUC after training: 0.7559766763848397
User 6018 does not improve AUC. Reverting changes.
Training on augumented user 71711 47/50 current_auc = 0.757725947521866
User 71711 AUC after training: 0.7574344023323616
User 71711 does not improve AUC. Reverting changes.
Training on augumented user 95662 48/50 current_auc = 0.757725947521866
User 95662 AUC after training: 0.7571428571428571
User 95662 does not improve AUC. Reverting changes.
Training on augumented user 116746 49/50 current_auc = 0.757725947521866
User 116746 AUC after training: 0.7556851311953353
User 116746 does not improve AUC. Reverting changes.
[2024-12-02 18:45:23.136223] start test user 112365 126/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:45:23.555873] start test user 112365 126/567 recall augumented users by random, augumented_users = [106787, 105538, 66331, 125154, 103840, 75797, 98313, 66900, 51723, 10689, 59750, 66075, 102252, 135245, 55890, 74460, 133268, 14887, 36227, 11827, 40693, 50100, 135398, 116031, 94577, 96495, 9491, 103046, 84752, 46385, 73185, 9202, 21122, 90784, 88357, 91518, 4940, 131723, 94762, 5469, 71774, 97195, 58946, 138278, 38269, 35361, 65305, 135906, 83582, 26317]
[2024-12-02 18:45:23.573697] user = 112365 Cloud 126/567
[2024-12-02 18:45:23.770164] user = 112365 Local 126/567
[2024-12-02 18:45:24.127514] user = 112365 Local+ 126/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:45:27.600739] user = 112365 MPDA- 126/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.691302508078166
Training on augumented user 106787 0/50 current_auc = 0.691302508078166
User 106787 AUC after training: 0.6913544391444838
User 106787 improves AUC. Keeping the model.
Training on augumented user 105538 1/50 current_auc = 0.6913544391444838
User 105538 AUC after training: 0.6917218033543622
User 105538 improves AUC. Keeping the model.
Training on augumented user 66331 2/50 current_auc = 0.6917218033543622
User 66331 AUC after training: 0.6916967995076166
User 66331 does not improve AUC. Reverting changes.
Training on augumented user 125154 3/50 current_auc = 0.6917218033543622
User 125154 AUC after training: 0.6916237113402062
User 125154 does not improve AUC. Reverting changes.
Training on augumented user 103840 4/50 current_auc = 0.6917218033543622
User 103840 AUC after training: 0.6917083397445762
User 103840 does not improve AUC. Reverting changes.
Training on augumented user 75797 5/50 current_auc = 0.6917218033543622
User 75797 AUC after training: 0.6914525311586398
User 75797 does not improve AUC. Reverting changes.
Training on augumented user 98313 6/50 current_auc = 0.6917218033543622
User 98313 AUC after training: 0.6914429142945069
User 98313 does not improve AUC. Reverting changes.
Training on augumented user 66900 7/50 current_auc = 0.6917218033543622
User 66900 AUC after training: 0.6916891060163102
User 66900 does not improve AUC. Reverting changes.
Training on augumented user 51723 8/50 current_auc = 0.6917218033543622
User 51723 AUC after training: 0.6917621941837205
User 51723 improves AUC. Keeping the model.
Training on augumented user 10689 9/50 current_auc = 0.6917621941837205
User 10689 AUC after training: 0.6918679796891831
User 10689 improves AUC. Keeping the model.
Training on augumented user 59750 10/50 current_auc = 0.6918679796891831
User 59750 AUC after training: 0.6921218649022927
User 59750 improves AUC. Keeping the model.
Training on augumented user 66075 11/50 current_auc = 0.6921218649022927
User 66075 AUC after training: 0.6923103554392984
User 66075 improves AUC. Keeping the model.
Training on augumented user 102252 12/50 current_auc = 0.6923103554392984
User 102252 AUC after training: 0.6933605170026157
User 102252 improves AUC. Keeping the model.
Training on augumented user 135245 13/50 current_auc = 0.6933605170026157
User 135245 AUC after training: 0.6933566702569627
User 135245 does not improve AUC. Reverting changes.
Training on augumented user 55890 14/50 current_auc = 0.6933605170026157
User 55890 AUC after training: 0.6934451454069857
User 55890 improves AUC. Keeping the model.
Training on augumented user 74460 15/50 current_auc = 0.6934451454069857
User 74460 AUC after training: 0.693570164640714
User 74460 improves AUC. Keeping the model.
Training on augumented user 133268 16/50 current_auc = 0.693570164640714
User 133268 AUC after training: 0.6936067087244191
User 133268 improves AUC. Keeping the model.
Training on augumented user 14887 17/50 current_auc = 0.6936067087244191
User 14887 AUC after training: 0.693527850438529
User 14887 does not improve AUC. Reverting changes.
Training on augumented user 36227 18/50 current_auc = 0.6936067087244191
User 36227 AUC after training: 0.6932354977688875
User 36227 does not improve AUC. Reverting changes.
Training on augumented user 11827 19/50 current_auc = 0.6936067087244191
User 11827 AUC after training: 0.6932835820895522
User 11827 does not improve AUC. Reverting changes.
Training on augumented user 40693 20/50 current_auc = 0.6936067087244191
User 40693 AUC after training: 0.6936220957070318
User 40693 improves AUC. Keeping the model.
Training on augumented user 50100 21/50 current_auc = 0.6936220957070318
User 50100 AUC after training: 0.6933797507308816
User 50100 does not improve AUC. Reverting changes.
Training on augumented user 135398 22/50 current_auc = 0.6936220957070318
User 135398 AUC after training: 0.6933797507308816
User 135398 does not improve AUC. Reverting changes.
Training on augumented user 116031 23/50 current_auc = 0.6936220957070318
User 116031 AUC after training: 0.693387444222188
User 116031 does not improve AUC. Reverting changes.
Training on augumented user 94577 24/50 current_auc = 0.6936220957070318
User 94577 AUC after training: 0.6933566702569626
User 94577 does not improve AUC. Reverting changes.
Training on augumented user 96495 25/50 current_auc = 0.6936220957070318
User 96495 AUC after training: 0.6936163255885521
User 96495 does not improve AUC. Reverting changes.
Training on augumented user 9491 26/50 current_auc = 0.6936220957070318
User 9491 AUC after training: 0.693406677950454
User 9491 does not improve AUC. Reverting changes.
Training on augumented user 103046 27/50 current_auc = 0.6936220957070318
User 103046 AUC after training: 0.6922084166794891
User 103046 does not improve AUC. Reverting changes.
Training on augumented user 84752 28/50 current_auc = 0.6936220957070318
User 84752 AUC after training: 0.6933912909678411
User 84752 does not improve AUC. Reverting changes.
Training on augumented user 46385 29/50 current_auc = 0.6936220957070318
User 46385 AUC after training: 0.6935951684874595
User 46385 does not improve AUC. Reverting changes.
Training on augumented user 73185 30/50 current_auc = 0.6936220957070318
User 73185 AUC after training: 0.6933932143406678
User 73185 does not improve AUC. Reverting changes.
Training on augumented user 9202 31/50 current_auc = 0.6936220957070318
User 9202 AUC after training: 0.6929912294199108
User 9202 does not improve AUC. Reverting changes.
Training on augumented user 21122 32/50 current_auc = 0.6936220957070318
User 21122 AUC after training: 0.6935624711494076
User 21122 does not improve AUC. Reverting changes.
Training on augumented user 90784 33/50 current_auc = 0.6936220957070318
User 90784 AUC after training: 0.6935490075396215
User 90784 does not improve AUC. Reverting changes.
Training on augumented user 88357 34/50 current_auc = 0.6936220957070318
User 88357 AUC after training: 0.6932797353438991
User 88357 does not improve AUC. Reverting changes.
Training on augumented user 91518 35/50 current_auc = 0.6936220957070318
User 91518 AUC after training: 0.6934989998461302
User 91518 does not improve AUC. Reverting changes.
Training on augumented user 4940 36/50 current_auc = 0.6936220957070318
User 4940 AUC after training: 0.6935105400830897
User 4940 does not improve AUC. Reverting changes.
Training on augumented user 131723 37/50 current_auc = 0.6936220957070318
User 131723 AUC after training: 0.6932528081243269
User 131723 does not improve AUC. Reverting changes.
Training on augumented user 94762 38/50 current_auc = 0.6936220957070318
User 94762 AUC after training: 0.6937048007385752
User 94762 improves AUC. Keeping the model.
Training on augumented user 5469 39/50 current_auc = 0.6937048007385752
User 5469 AUC after training: 0.6934932297276505
User 5469 does not improve AUC. Reverting changes.
Training on augumented user 71774 40/50 current_auc = 0.6937048007385752
User 71774 AUC after training: 0.6935105400830897
User 71774 does not improve AUC. Reverting changes.
Training on augumented user 97195 41/50 current_auc = 0.6937048007385752
User 97195 AUC after training: 0.6934412986613325
User 97195 does not improve AUC. Reverting changes.
Training on augumented user 58946 42/50 current_auc = 0.6937048007385752
User 58946 AUC after training: 0.6933816741037082
User 58946 does not improve AUC. Reverting changes.
Training on augumented user 138278 43/50 current_auc = 0.6937048007385752
User 138278 AUC after training: 0.6936932605016156
User 138278 does not improve AUC. Reverting changes.
Training on augumented user 38269 44/50 current_auc = 0.6937048007385752
User 38269 AUC after training: 0.6935124634559163
User 38269 does not improve AUC. Reverting changes.
Training on augumented user 35361 45/50 current_auc = 0.6937048007385752
User 35361 AUC after training: 0.6931566394829973
User 35361 does not improve AUC. Reverting changes.
Training on augumented user 65305 46/50 current_auc = 0.6937048007385752
User 65305 AUC after training: 0.6935643945222342
User 65305 does not improve AUC. Reverting changes.
Training on augumented user 135906 47/50 current_auc = 0.6937048007385752
User 135906 AUC after training: 0.693593245114633
User 135906 does not improve AUC. Reverting changes.
Training on augumented user 83582 48/50 current_auc = 0.6937048007385752
User 83582 AUC after training: 0.6935893983689799
User 83582 does not improve AUC. Reverting changes.
Training on augumented user 26317 49/50 current_auc = 0.6937048007385752
User 26317 AUC after training: 0.6937278812124942
User 26317 improves AUC. Keeping the model.
[2024-12-02 18:46:00.480549] start test user 112369 127/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:46:00.938526] start test user 112369 127/567 recall augumented users by random, augumented_users = [131453, 83781, 105267, 4487, 122297, 35794, 17715, 18426, 116596, 18351, 4180, 23943, 11031, 56045, 25007, 10437, 35639, 3769, 73414, 131860, 55613, 47056, 133462, 75979, 19470, 67486, 136209, 56395, 25179, 121366, 32138, 113176, 52622, 97503, 22684, 78016, 132503, 78287, 93315, 117313, 32062, 107570, 14483, 6772, 18208, 25119, 2629, 6100, 51126, 37940]
[2024-12-02 18:46:00.953270] user = 112369 Cloud 127/567
[2024-12-02 18:46:00.963701] user = 112369 Local 127/567
[2024-12-02 18:46:00.998366] user = 112369 Local+ 127/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:46:02.571693] user = 112369 MPDA- 127/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7613636363636364
Training on augumented user 131453 0/50 current_auc = 0.7613636363636364
User 131453 AUC after training: 0.7613636363636364
User 131453 does not improve AUC. Reverting changes.
Training on augumented user 83781 1/50 current_auc = 0.7613636363636364
User 83781 AUC after training: 0.7613636363636364
User 83781 does not improve AUC. Reverting changes.
Training on augumented user 105267 2/50 current_auc = 0.7613636363636364
User 105267 AUC after training: 0.7613636363636364
User 105267 does not improve AUC. Reverting changes.
Training on augumented user 4487 3/50 current_auc = 0.7613636363636364
User 4487 AUC after training: 0.7613636363636364
User 4487 does not improve AUC. Reverting changes.
Training on augumented user 122297 4/50 current_auc = 0.7613636363636364
User 122297 AUC after training: 0.7613636363636364
User 122297 does not improve AUC. Reverting changes.
Training on augumented user 35794 5/50 current_auc = 0.7613636363636364
User 35794 AUC after training: 0.7613636363636364
User 35794 does not improve AUC. Reverting changes.
Training on augumented user 17715 6/50 current_auc = 0.7613636363636364
User 17715 AUC after training: 0.7613636363636364
User 17715 does not improve AUC. Reverting changes.
Training on augumented user 18426 7/50 current_auc = 0.7613636363636364
User 18426 AUC after training: 0.7613636363636364
User 18426 does not improve AUC. Reverting changes.
Training on augumented user 116596 8/50 current_auc = 0.7613636363636364
User 116596 AUC after training: 0.7613636363636364
User 116596 does not improve AUC. Reverting changes.
Training on augumented user 18351 9/50 current_auc = 0.7613636363636364
User 18351 AUC after training: 0.7613636363636364
User 18351 does not improve AUC. Reverting changes.
Training on augumented user 4180 10/50 current_auc = 0.7613636363636364
User 4180 AUC after training: 0.7613636363636364
User 4180 does not improve AUC. Reverting changes.
Training on augumented user 23943 11/50 current_auc = 0.7613636363636364
User 23943 AUC after training: 0.7613636363636364
User 23943 does not improve AUC. Reverting changes.
Training on augumented user 11031 12/50 current_auc = 0.7613636363636364
User 11031 AUC after training: 0.7575757575757576
User 11031 does not improve AUC. Reverting changes.
Training on augumented user 56045 13/50 current_auc = 0.7613636363636364
User 56045 AUC after training: 0.7613636363636364
User 56045 does not improve AUC. Reverting changes.
Training on augumented user 25007 14/50 current_auc = 0.7613636363636364
User 25007 AUC after training: 0.7613636363636364
User 25007 does not improve AUC. Reverting changes.
Training on augumented user 10437 15/50 current_auc = 0.7613636363636364
User 10437 AUC after training: 0.7613636363636364
User 10437 does not improve AUC. Reverting changes.
Training on augumented user 35639 16/50 current_auc = 0.7613636363636364
User 35639 AUC after training: 0.7613636363636364
User 35639 does not improve AUC. Reverting changes.
Training on augumented user 3769 17/50 current_auc = 0.7613636363636364
User 3769 AUC after training: 0.7613636363636364
User 3769 does not improve AUC. Reverting changes.
Training on augumented user 73414 18/50 current_auc = 0.7613636363636364
User 73414 AUC after training: 0.7613636363636364
User 73414 does not improve AUC. Reverting changes.
Training on augumented user 131860 19/50 current_auc = 0.7613636363636364
User 131860 AUC after training: 0.7613636363636364
User 131860 does not improve AUC. Reverting changes.
Training on augumented user 55613 20/50 current_auc = 0.7613636363636364
User 55613 AUC after training: 0.7613636363636364
User 55613 does not improve AUC. Reverting changes.
Training on augumented user 47056 21/50 current_auc = 0.7613636363636364
User 47056 AUC after training: 0.7613636363636364
User 47056 does not improve AUC. Reverting changes.
Training on augumented user 133462 22/50 current_auc = 0.7613636363636364
User 133462 AUC after training: 0.7613636363636364
User 133462 does not improve AUC. Reverting changes.
Training on augumented user 75979 23/50 current_auc = 0.7613636363636364
User 75979 AUC after training: 0.7613636363636364
User 75979 does not improve AUC. Reverting changes.
Training on augumented user 19470 24/50 current_auc = 0.7613636363636364
User 19470 AUC after training: 0.7613636363636364
User 19470 does not improve AUC. Reverting changes.
Training on augumented user 67486 25/50 current_auc = 0.7613636363636364
User 67486 AUC after training: 0.7613636363636364
User 67486 does not improve AUC. Reverting changes.
Training on augumented user 136209 26/50 current_auc = 0.7613636363636364
User 136209 AUC after training: 0.7613636363636364
User 136209 does not improve AUC. Reverting changes.
Training on augumented user 56395 27/50 current_auc = 0.7613636363636364
User 56395 AUC after training: 0.7613636363636364
User 56395 does not improve AUC. Reverting changes.
Training on augumented user 25179 28/50 current_auc = 0.7613636363636364
User 25179 AUC after training: 0.7613636363636364
User 25179 does not improve AUC. Reverting changes.
Training on augumented user 121366 29/50 current_auc = 0.7613636363636364
User 121366 AUC after training: 0.7613636363636364
User 121366 does not improve AUC. Reverting changes.
Training on augumented user 32138 30/50 current_auc = 0.7613636363636364
User 32138 AUC after training: 0.7613636363636364
User 32138 does not improve AUC. Reverting changes.
Training on augumented user 113176 31/50 current_auc = 0.7613636363636364
User 113176 AUC after training: 0.7613636363636364
User 113176 does not improve AUC. Reverting changes.
Training on augumented user 52622 32/50 current_auc = 0.7613636363636364
User 52622 AUC after training: 0.7613636363636364
User 52622 does not improve AUC. Reverting changes.
Training on augumented user 97503 33/50 current_auc = 0.7613636363636364
User 97503 AUC after training: 0.7613636363636364
User 97503 does not improve AUC. Reverting changes.
Training on augumented user 22684 34/50 current_auc = 0.7613636363636364
User 22684 AUC after training: 0.7613636363636364
User 22684 does not improve AUC. Reverting changes.
Training on augumented user 78016 35/50 current_auc = 0.7613636363636364
User 78016 AUC after training: 0.7613636363636364
User 78016 does not improve AUC. Reverting changes.
Training on augumented user 132503 36/50 current_auc = 0.7613636363636364
User 132503 AUC after training: 0.7613636363636364
User 132503 does not improve AUC. Reverting changes.
Training on augumented user 78287 37/50 current_auc = 0.7613636363636364
User 78287 AUC after training: 0.7651515151515151
User 78287 improves AUC. Keeping the model.
Training on augumented user 93315 38/50 current_auc = 0.7651515151515151
User 93315 AUC after training: 0.7651515151515151
User 93315 does not improve AUC. Reverting changes.
Training on augumented user 117313 39/50 current_auc = 0.7651515151515151
User 117313 AUC after training: 0.7651515151515151
User 117313 does not improve AUC. Reverting changes.
Training on augumented user 32062 40/50 current_auc = 0.7651515151515151
User 32062 AUC after training: 0.7613636363636364
User 32062 does not improve AUC. Reverting changes.
Training on augumented user 107570 41/50 current_auc = 0.7651515151515151
User 107570 AUC after training: 0.7613636363636364
User 107570 does not improve AUC. Reverting changes.
Training on augumented user 14483 42/50 current_auc = 0.7651515151515151
User 14483 AUC after training: 0.7651515151515151
User 14483 does not improve AUC. Reverting changes.
Training on augumented user 6772 43/50 current_auc = 0.7651515151515151
User 6772 AUC after training: 0.7651515151515151
User 6772 does not improve AUC. Reverting changes.
Training on augumented user 18208 44/50 current_auc = 0.7651515151515151
User 18208 AUC after training: 0.7613636363636364
User 18208 does not improve AUC. Reverting changes.
Training on augumented user 25119 45/50 current_auc = 0.7651515151515151
User 25119 AUC after training: 0.7651515151515151
User 25119 does not improve AUC. Reverting changes.
Training on augumented user 2629 46/50 current_auc = 0.7651515151515151
User 2629 AUC after training: 0.7613636363636364
User 2629 does not improve AUC. Reverting changes.
Training on augumented user 6100 47/50 current_auc = 0.7651515151515151
User 6100 AUC after training: 0.7613636363636364
User 6100 does not improve AUC. Reverting changes.
Training on augumented user 51126 48/50 current_auc = 0.7651515151515151
User 51126 AUC after training: 0.7613636363636364
User 51126 does not improve AUC. Reverting changes.
Training on augumented user 37940 49/50 current_auc = 0.7651515151515151
User 37940 AUC after training: 0.7613636363636364
User 37940 does not improve AUC. Reverting changes.
[2024-12-02 18:46:32.370615] start test user 112423 128/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:46:32.920342] start test user 112423 128/567 recall augumented users by random, augumented_users = [59367, 3406, 106239, 109806, 24479, 21801, 20621, 103023, 53661, 132742, 12872, 100562, 28001, 13512, 104110, 120710, 63456, 16229, 18931, 20027, 49957, 83871, 53447, 49881, 12909, 90162, 72355, 48331, 58139, 29442, 51055, 125708, 107532, 35754, 105367, 21814, 76956, 19012, 44243, 67623, 1966, 37851, 97953, 80741, 40595, 26909, 96454, 105118, 67833, 13482]
[2024-12-02 18:46:32.938888] user = 112423 Cloud 128/567
[2024-12-02 18:46:32.962701] user = 112423 Local 128/567
[2024-12-02 18:46:33.040990] user = 112423 Local+ 128/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:46:35.870823] user = 112423 MPDA- 128/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.583904109589041
Training on augumented user 59367 0/50 current_auc = 0.583904109589041
User 59367 AUC after training: 0.584140292867265
User 59367 improves AUC. Keeping the model.
Training on augumented user 3406 1/50 current_auc = 0.584140292867265
User 3406 AUC after training: 0.584199338686821
User 3406 improves AUC. Keeping the model.
Training on augumented user 106239 2/50 current_auc = 0.584199338686821
User 106239 AUC after training: 0.5840222012281531
User 106239 does not improve AUC. Reverting changes.
Training on augumented user 109806 3/50 current_auc = 0.584199338686821
User 109806 AUC after training: 0.5844355219650448
User 109806 improves AUC. Keeping the model.
Training on augumented user 24479 4/50 current_auc = 0.5844355219650448
User 24479 AUC after training: 0.584317430325933
User 24479 does not improve AUC. Reverting changes.
Training on augumented user 21801 5/50 current_auc = 0.5844355219650448
User 21801 AUC after training: 0.5843174303259329
User 21801 does not improve AUC. Reverting changes.
Training on augumented user 20621 6/50 current_auc = 0.5844355219650448
User 20621 AUC after training: 0.5843174303259329
User 20621 does not improve AUC. Reverting changes.
Training on augumented user 103023 7/50 current_auc = 0.5844355219650448
User 103023 AUC after training: 0.5843174303259329
User 103023 does not improve AUC. Reverting changes.
Training on augumented user 53661 8/50 current_auc = 0.5844355219650448
User 53661 AUC after training: 0.5849078885214927
User 53661 improves AUC. Keeping the model.
Training on augumented user 132742 9/50 current_auc = 0.5849078885214927
User 132742 AUC after training: 0.5852621634388285
User 132742 improves AUC. Keeping the model.
Training on augumented user 12872 10/50 current_auc = 0.5852621634388285
User 12872 AUC after training: 0.5847897968823808
User 12872 does not improve AUC. Reverting changes.
Training on augumented user 100562 11/50 current_auc = 0.5852621634388285
User 100562 AUC after training: 0.5852621634388286
User 100562 improves AUC. Keeping the model.
Training on augumented user 28001 12/50 current_auc = 0.5852621634388286
User 28001 AUC after training: 0.584199338686821
User 28001 does not improve AUC. Reverting changes.
Training on augumented user 13512 13/50 current_auc = 0.5852621634388286
User 13512 AUC after training: 0.5849669343410486
User 13512 does not improve AUC. Reverting changes.
Training on augumented user 104110 14/50 current_auc = 0.5852621634388286
User 104110 AUC after training: 0.5856164383561643
User 104110 improves AUC. Keeping the model.
Training on augumented user 120710 15/50 current_auc = 0.5856164383561643
User 120710 AUC after training: 0.5856164383561644
User 120710 improves AUC. Keeping the model.
Training on augumented user 63456 16/50 current_auc = 0.5856164383561644
User 63456 AUC after training: 0.5850850259801605
User 63456 does not improve AUC. Reverting changes.
Training on augumented user 16229 17/50 current_auc = 0.5856164383561644
User 16229 AUC after training: 0.5859707132735001
User 16229 improves AUC. Keeping the model.
Training on augumented user 18931 18/50 current_auc = 0.5859707132735001
User 18931 AUC after training: 0.5847897968823808
User 18931 does not improve AUC. Reverting changes.
Training on augumented user 20027 19/50 current_auc = 0.5859707132735001
User 20027 AUC after training: 0.5852621634388284
User 20027 does not improve AUC. Reverting changes.
Training on augumented user 49957 20/50 current_auc = 0.5859707132735001
User 49957 AUC after training: 0.5854983467170524
User 49957 does not improve AUC. Reverting changes.
Training on augumented user 83871 21/50 current_auc = 0.5859707132735001
User 83871 AUC after training: 0.5845536136041567
User 83871 does not improve AUC. Reverting changes.
Training on augumented user 53447 22/50 current_auc = 0.5859707132735001
User 53447 AUC after training: 0.5857345299952763
User 53447 does not improve AUC. Reverting changes.
Training on augumented user 49881 23/50 current_auc = 0.5859707132735001
User 49881 AUC after training: 0.5850259801606046
User 49881 does not improve AUC. Reverting changes.
Training on augumented user 12909 24/50 current_auc = 0.5859707132735001
User 12909 AUC after training: 0.5854983467170525
User 12909 does not improve AUC. Reverting changes.
Training on augumented user 90162 25/50 current_auc = 0.5859707132735001
User 90162 AUC after training: 0.5848488427019366
User 90162 does not improve AUC. Reverting changes.
Training on augumented user 72355 26/50 current_auc = 0.5859707132735001
User 72355 AUC after training: 0.5856164383561644
User 72355 does not improve AUC. Reverting changes.
Training on augumented user 48331 27/50 current_auc = 0.5859707132735001
User 48331 AUC after training: 0.5854983467170525
User 48331 does not improve AUC. Reverting changes.
Training on augumented user 58139 28/50 current_auc = 0.5859707132735001
User 58139 AUC after training: 0.5829003306565895
User 58139 does not improve AUC. Reverting changes.
Training on augumented user 29442 29/50 current_auc = 0.5859707132735001
User 29442 AUC after training: 0.5857345299952763
User 29442 does not improve AUC. Reverting changes.
Training on augumented user 51055 30/50 current_auc = 0.5859707132735001
User 51055 AUC after training: 0.5852621634388284
User 51055 does not improve AUC. Reverting changes.
Training on augumented user 125708 31/50 current_auc = 0.5859707132735001
User 125708 AUC after training: 0.5852621634388285
User 125708 does not improve AUC. Reverting changes.
Training on augumented user 107532 32/50 current_auc = 0.5859707132735001
User 107532 AUC after training: 0.5858526216343882
User 107532 does not improve AUC. Reverting changes.
Training on augumented user 35754 33/50 current_auc = 0.5859707132735001
User 35754 AUC after training: 0.5853802550779403
User 35754 does not improve AUC. Reverting changes.
Training on augumented user 105367 34/50 current_auc = 0.5859707132735001
User 105367 AUC after training: 0.5856164383561644
User 105367 does not improve AUC. Reverting changes.
Training on augumented user 21814 35/50 current_auc = 0.5859707132735001
User 21814 AUC after training: 0.5854983467170525
User 21814 does not improve AUC. Reverting changes.
Training on augumented user 76956 36/50 current_auc = 0.5859707132735001
User 76956 AUC after training: 0.5853802550779406
User 76956 does not improve AUC. Reverting changes.
Training on augumented user 19012 37/50 current_auc = 0.5859707132735001
User 19012 AUC after training: 0.5858526216343882
User 19012 does not improve AUC. Reverting changes.
Training on augumented user 44243 38/50 current_auc = 0.5859707132735001
User 44243 AUC after training: 0.5844355219650449
User 44243 does not improve AUC. Reverting changes.
Training on augumented user 67623 39/50 current_auc = 0.5859707132735001
User 67623 AUC after training: 0.5856164383561644
User 67623 does not improve AUC. Reverting changes.
Training on augumented user 1966 40/50 current_auc = 0.5859707132735001
User 1966 AUC after training: 0.5834907888521492
User 1966 does not improve AUC. Reverting changes.
Training on augumented user 37851 41/50 current_auc = 0.5859707132735001
User 37851 AUC after training: 0.5840222012281531
User 37851 does not improve AUC. Reverting changes.
Training on augumented user 97953 42/50 current_auc = 0.5859707132735001
User 97953 AUC after training: 0.5849078885214927
User 97953 does not improve AUC. Reverting changes.
Training on augumented user 80741 43/50 current_auc = 0.5859707132735001
User 80741 AUC after training: 0.5851440717997166
User 80741 does not improve AUC. Reverting changes.
Training on augumented user 40595 44/50 current_auc = 0.5859707132735001
User 40595 AUC after training: 0.5859116674539442
User 40595 does not improve AUC. Reverting changes.
Training on augumented user 26909 45/50 current_auc = 0.5859707132735001
User 26909 AUC after training: 0.5860888049126123
User 26909 improves AUC. Keeping the model.
Training on augumented user 96454 46/50 current_auc = 0.5860888049126123
User 96454 AUC after training: 0.5850259801606046
User 96454 does not improve AUC. Reverting changes.
Training on augumented user 105118 47/50 current_auc = 0.5860888049126123
User 105118 AUC after training: 0.5859707132735003
User 105118 does not improve AUC. Reverting changes.
Training on augumented user 67833 48/50 current_auc = 0.5860888049126123
User 67833 AUC after training: 0.5856164383561644
User 67833 does not improve AUC. Reverting changes.
Training on augumented user 13482 49/50 current_auc = 0.5860888049126123
User 13482 AUC after training: 0.5844355219650449
User 13482 does not improve AUC. Reverting changes.
[2024-12-02 18:47:05.272148] start test user 112456 129/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:47:05.686247] start test user 112456 129/567 recall augumented users by random, augumented_users = [20827, 116341, 135046, 112523, 116554, 127478, 104544, 98836, 60021, 102719, 128100, 95882, 89654, 120990, 51883, 19740, 100271, 58336, 31995, 105959, 73412, 71519, 32952, 35348, 11492, 109902, 87758, 134484, 84351, 64437, 33145, 8366, 98121, 1715, 88626, 36054, 71258, 95716, 55056, 106230, 9642, 35152, 126541, 8429, 73936, 62961, 116684, 21571, 5805, 2321]
[2024-12-02 18:47:05.700820] user = 112456 Cloud 129/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:47:05.707786] user = 112456 Local 129/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:47:05.730104] user = 112456 Local+ 129/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:47:08.057936] user = 112456 MPDA- 129/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 20827 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20827 AUC after training: 0.5
User 20827 does not improve AUC. Reverting changes.
Training on augumented user 116341 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116341 AUC after training: 0.5
User 116341 does not improve AUC. Reverting changes.
Training on augumented user 135046 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 135046 AUC after training: 0.5
User 135046 does not improve AUC. Reverting changes.
Training on augumented user 112523 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112523 AUC after training: 0.5
User 112523 does not improve AUC. Reverting changes.
Training on augumented user 116554 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116554 AUC after training: 0.5
User 116554 does not improve AUC. Reverting changes.
Training on augumented user 127478 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127478 AUC after training: 0.5
User 127478 does not improve AUC. Reverting changes.
Training on augumented user 104544 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104544 AUC after training: 0.5
User 104544 does not improve AUC. Reverting changes.
Training on augumented user 98836 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98836 AUC after training: 0.5
User 98836 does not improve AUC. Reverting changes.
Training on augumented user 60021 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60021 AUC after training: 0.5
User 60021 does not improve AUC. Reverting changes.
Training on augumented user 102719 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102719 AUC after training: 0.5
User 102719 does not improve AUC. Reverting changes.
Training on augumented user 128100 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128100 AUC after training: 0.5
User 128100 does not improve AUC. Reverting changes.
Training on augumented user 95882 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95882 AUC after training: 0.5
User 95882 does not improve AUC. Reverting changes.
Training on augumented user 89654 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89654 AUC after training: 0.5
User 89654 does not improve AUC. Reverting changes.
Training on augumented user 120990 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120990 AUC after training: 0.5
User 120990 does not improve AUC. Reverting changes.
Training on augumented user 51883 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51883 AUC after training: 0.5
User 51883 does not improve AUC. Reverting changes.
Training on augumented user 19740 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19740 AUC after training: 0.5
User 19740 does not improve AUC. Reverting changes.
Training on augumented user 100271 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100271 AUC after training: 0.5
User 100271 does not improve AUC. Reverting changes.
Training on augumented user 58336 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58336 AUC after training: 0.5
User 58336 does not improve AUC. Reverting changes.
Training on augumented user 31995 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 31995 AUC after training: 0.5
User 31995 does not improve AUC. Reverting changes.
Training on augumented user 105959 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105959 AUC after training: 0.5
User 105959 does not improve AUC. Reverting changes.
Training on augumented user 73412 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73412 AUC after training: 0.5
User 73412 does not improve AUC. Reverting changes.
Training on augumented user 71519 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71519 AUC after training: 0.5
User 71519 does not improve AUC. Reverting changes.
Training on augumented user 32952 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32952 AUC after training: 0.5
User 32952 does not improve AUC. Reverting changes.
Training on augumented user 35348 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35348 AUC after training: 0.5
User 35348 does not improve AUC. Reverting changes.
Training on augumented user 11492 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11492 AUC after training: 0.5
User 11492 does not improve AUC. Reverting changes.
Training on augumented user 109902 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109902 AUC after training: 0.5
User 109902 does not improve AUC. Reverting changes.
Training on augumented user 87758 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87758 AUC after training: 0.5
User 87758 does not improve AUC. Reverting changes.
Training on augumented user 134484 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134484 AUC after training: 0.5
User 134484 does not improve AUC. Reverting changes.
Training on augumented user 84351 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84351 AUC after training: 0.5
User 84351 does not improve AUC. Reverting changes.
Training on augumented user 64437 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64437 AUC after training: 0.5
User 64437 does not improve AUC. Reverting changes.
Training on augumented user 33145 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33145 AUC after training: 0.5
User 33145 does not improve AUC. Reverting changes.
Training on augumented user 8366 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8366 AUC after training: 0.5
User 8366 does not improve AUC. Reverting changes.
Training on augumented user 98121 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98121 AUC after training: 0.5
User 98121 does not improve AUC. Reverting changes.
Training on augumented user 1715 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1715 AUC after training: 0.5
User 1715 does not improve AUC. Reverting changes.
Training on augumented user 88626 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88626 AUC after training: 0.5
User 88626 does not improve AUC. Reverting changes.
Training on augumented user 36054 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36054 AUC after training: 0.5
User 36054 does not improve AUC. Reverting changes.
Training on augumented user 71258 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71258 AUC after training: 0.5
User 71258 does not improve AUC. Reverting changes.
Training on augumented user 95716 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95716 AUC after training: 0.5
User 95716 does not improve AUC. Reverting changes.
Training on augumented user 55056 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55056 AUC after training: 0.5
User 55056 does not improve AUC. Reverting changes.
Training on augumented user 106230 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106230 AUC after training: 0.5
User 106230 does not improve AUC. Reverting changes.
Training on augumented user 9642 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9642 AUC after training: 0.5
User 9642 does not improve AUC. Reverting changes.
Training on augumented user 35152 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35152 AUC after training: 0.5
User 35152 does not improve AUC. Reverting changes.
Training on augumented user 126541 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126541 AUC after training: 0.5
User 126541 does not improve AUC. Reverting changes.
Training on augumented user 8429 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8429 AUC after training: 0.5
User 8429 does not improve AUC. Reverting changes.
Training on augumented user 73936 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73936 AUC after training: 0.5
User 73936 does not improve AUC. Reverting changes.
Training on augumented user 62961 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62961 AUC after training: 0.5
User 62961 does not improve AUC. Reverting changes.
Training on augumented user 116684 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116684 AUC after training: 0.5
User 116684 does not improve AUC. Reverting changes.
Training on augumented user 21571 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21571 AUC after training: 0.5
User 21571 does not improve AUC. Reverting changes.
Training on augumented user 5805 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5805 AUC after training: 0.5
User 5805 does not improve AUC. Reverting changes.
Training on augumented user 2321 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2321 AUC after training: 0.5
User 2321 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:47:36.180246] start test user 112509 130/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:47:36.981805] start test user 112509 130/567 recall augumented users by random, augumented_users = [83659, 97416, 79640, 61517, 18673, 19815, 16719, 7418, 94003, 61628, 62715, 62395, 12640, 40008, 89029, 117930, 5706, 24145, 96172, 5880, 129689, 19027, 57363, 1749, 5435, 53833, 25627, 37064, 43200, 56577, 57163, 127010, 109149, 54129, 116960, 117786, 100110, 44957, 54183, 104398, 94239, 15845, 56866, 54884, 29745, 103608, 104734, 22450, 113970, 52981]
[2024-12-02 18:47:37.010134] user = 112509 Cloud 130/567
[2024-12-02 18:47:37.033248] user = 112509 Local 130/567
[2024-12-02 18:47:37.171756] user = 112509 Local+ 130/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:47:40.022244] user = 112509 MPDA- 130/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6190476190476191
Training on augumented user 83659 0/50 current_auc = 0.6190476190476191
User 83659 AUC after training: 0.6190476190476191
User 83659 does not improve AUC. Reverting changes.
Training on augumented user 97416 1/50 current_auc = 0.6190476190476191
User 97416 AUC after training: 0.6190476190476191
User 97416 does not improve AUC. Reverting changes.
Training on augumented user 79640 2/50 current_auc = 0.6190476190476191
User 79640 AUC after training: 0.6190476190476191
User 79640 does not improve AUC. Reverting changes.
Training on augumented user 61517 3/50 current_auc = 0.6190476190476191
User 61517 AUC after training: 0.6190476190476191
User 61517 does not improve AUC. Reverting changes.
Training on augumented user 18673 4/50 current_auc = 0.6190476190476191
User 18673 AUC after training: 0.6190476190476191
User 18673 does not improve AUC. Reverting changes.
Training on augumented user 19815 5/50 current_auc = 0.6190476190476191
User 19815 AUC after training: 0.6190476190476191
User 19815 does not improve AUC. Reverting changes.
Training on augumented user 16719 6/50 current_auc = 0.6190476190476191
User 16719 AUC after training: 0.6190476190476191
User 16719 does not improve AUC. Reverting changes.
Training on augumented user 7418 7/50 current_auc = 0.6190476190476191
User 7418 AUC after training: 0.6190476190476191
User 7418 does not improve AUC. Reverting changes.
Training on augumented user 94003 8/50 current_auc = 0.6190476190476191
User 94003 AUC after training: 0.6190476190476191
User 94003 does not improve AUC. Reverting changes.
Training on augumented user 61628 9/50 current_auc = 0.6190476190476191
User 61628 AUC after training: 0.6190476190476191
User 61628 does not improve AUC. Reverting changes.
Training on augumented user 62715 10/50 current_auc = 0.6190476190476191
User 62715 AUC after training: 0.6190476190476191
User 62715 does not improve AUC. Reverting changes.
Training on augumented user 62395 11/50 current_auc = 0.6190476190476191
User 62395 AUC after training: 0.6190476190476191
User 62395 does not improve AUC. Reverting changes.
Training on augumented user 12640 12/50 current_auc = 0.6190476190476191
User 12640 AUC after training: 0.6190476190476191
User 12640 does not improve AUC. Reverting changes.
Training on augumented user 40008 13/50 current_auc = 0.6190476190476191
User 40008 AUC after training: 0.6190476190476191
User 40008 does not improve AUC. Reverting changes.
Training on augumented user 89029 14/50 current_auc = 0.6190476190476191
User 89029 AUC after training: 0.6190476190476191
User 89029 does not improve AUC. Reverting changes.
Training on augumented user 117930 15/50 current_auc = 0.6190476190476191
User 117930 AUC after training: 0.6190476190476191
User 117930 does not improve AUC. Reverting changes.
Training on augumented user 5706 16/50 current_auc = 0.6190476190476191
User 5706 AUC after training: 0.6190476190476191
User 5706 does not improve AUC. Reverting changes.
Training on augumented user 24145 17/50 current_auc = 0.6190476190476191
User 24145 AUC after training: 0.6190476190476191
User 24145 does not improve AUC. Reverting changes.
Training on augumented user 96172 18/50 current_auc = 0.6190476190476191
User 96172 AUC after training: 0.6190476190476191
User 96172 does not improve AUC. Reverting changes.
Training on augumented user 5880 19/50 current_auc = 0.6190476190476191
User 5880 AUC after training: 0.6190476190476191
User 5880 does not improve AUC. Reverting changes.
Training on augumented user 129689 20/50 current_auc = 0.6190476190476191
User 129689 AUC after training: 0.6190476190476191
User 129689 does not improve AUC. Reverting changes.
Training on augumented user 19027 21/50 current_auc = 0.6190476190476191
User 19027 AUC after training: 0.6190476190476191
User 19027 does not improve AUC. Reverting changes.
Training on augumented user 57363 22/50 current_auc = 0.6190476190476191
User 57363 AUC after training: 0.6190476190476191
User 57363 does not improve AUC. Reverting changes.
Training on augumented user 1749 23/50 current_auc = 0.6190476190476191
User 1749 AUC after training: 0.6190476190476191
User 1749 does not improve AUC. Reverting changes.
Training on augumented user 5435 24/50 current_auc = 0.6190476190476191
User 5435 AUC after training: 0.6190476190476191
User 5435 does not improve AUC. Reverting changes.
Training on augumented user 53833 25/50 current_auc = 0.6190476190476191
User 53833 AUC after training: 0.6190476190476191
User 53833 does not improve AUC. Reverting changes.
Training on augumented user 25627 26/50 current_auc = 0.6190476190476191
User 25627 AUC after training: 0.6190476190476191
User 25627 does not improve AUC. Reverting changes.
Training on augumented user 37064 27/50 current_auc = 0.6190476190476191
User 37064 AUC after training: 0.6190476190476191
User 37064 does not improve AUC. Reverting changes.
Training on augumented user 43200 28/50 current_auc = 0.6190476190476191
User 43200 AUC after training: 0.6190476190476191
User 43200 does not improve AUC. Reverting changes.
Training on augumented user 56577 29/50 current_auc = 0.6190476190476191
User 56577 AUC after training: 0.6190476190476191
User 56577 does not improve AUC. Reverting changes.
Training on augumented user 57163 30/50 current_auc = 0.6190476190476191
User 57163 AUC after training: 0.6190476190476191
User 57163 does not improve AUC. Reverting changes.
Training on augumented user 127010 31/50 current_auc = 0.6190476190476191
User 127010 AUC after training: 0.6190476190476191
User 127010 does not improve AUC. Reverting changes.
Training on augumented user 109149 32/50 current_auc = 0.6190476190476191
User 109149 AUC after training: 0.6190476190476191
User 109149 does not improve AUC. Reverting changes.
Training on augumented user 54129 33/50 current_auc = 0.6190476190476191
User 54129 AUC after training: 0.6190476190476191
User 54129 does not improve AUC. Reverting changes.
Training on augumented user 116960 34/50 current_auc = 0.6190476190476191
User 116960 AUC after training: 0.6190476190476191
User 116960 does not improve AUC. Reverting changes.
Training on augumented user 117786 35/50 current_auc = 0.6190476190476191
User 117786 AUC after training: 0.6190476190476191
User 117786 does not improve AUC. Reverting changes.
Training on augumented user 100110 36/50 current_auc = 0.6190476190476191
User 100110 AUC after training: 0.6190476190476191
User 100110 does not improve AUC. Reverting changes.
Training on augumented user 44957 37/50 current_auc = 0.6190476190476191
User 44957 AUC after training: 0.6190476190476191
User 44957 does not improve AUC. Reverting changes.
Training on augumented user 54183 38/50 current_auc = 0.6190476190476191
User 54183 AUC after training: 0.6190476190476191
User 54183 does not improve AUC. Reverting changes.
Training on augumented user 104398 39/50 current_auc = 0.6190476190476191
User 104398 AUC after training: 0.6190476190476191
User 104398 does not improve AUC. Reverting changes.
Training on augumented user 94239 40/50 current_auc = 0.6190476190476191
User 94239 AUC after training: 0.6190476190476191
User 94239 does not improve AUC. Reverting changes.
Training on augumented user 15845 41/50 current_auc = 0.6190476190476191
User 15845 AUC after training: 0.6190476190476191
User 15845 does not improve AUC. Reverting changes.
Training on augumented user 56866 42/50 current_auc = 0.6190476190476191
User 56866 AUC after training: 0.6190476190476191
User 56866 does not improve AUC. Reverting changes.
Training on augumented user 54884 43/50 current_auc = 0.6190476190476191
User 54884 AUC after training: 0.6190476190476191
User 54884 does not improve AUC. Reverting changes.
Training on augumented user 29745 44/50 current_auc = 0.6190476190476191
User 29745 AUC after training: 0.6190476190476191
User 29745 does not improve AUC. Reverting changes.
Training on augumented user 103608 45/50 current_auc = 0.6190476190476191
User 103608 AUC after training: 0.6190476190476191
User 103608 does not improve AUC. Reverting changes.
Training on augumented user 104734 46/50 current_auc = 0.6190476190476191
User 104734 AUC after training: 0.6190476190476191
User 104734 does not improve AUC. Reverting changes.
Training on augumented user 22450 47/50 current_auc = 0.6190476190476191
User 22450 AUC after training: 0.6190476190476191
User 22450 does not improve AUC. Reverting changes.
Training on augumented user 113970 48/50 current_auc = 0.6190476190476191
User 113970 AUC after training: 0.6190476190476191
User 113970 does not improve AUC. Reverting changes.
Training on augumented user 52981 49/50 current_auc = 0.6190476190476191
User 52981 AUC after training: 0.6666666666666667
User 52981 improves AUC. Keeping the model.
[2024-12-02 18:48:11.827460] start test user 112520 131/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:48:12.795319] start test user 112520 131/567 recall augumented users by random, augumented_users = [9737, 8142, 37500, 42979, 14405, 85570, 129743, 20393, 72188, 35599, 124462, 43790, 118038, 88691, 64721, 126136, 57959, 28616, 42038, 16290, 6609, 88837, 61774, 42050, 21611, 15343, 48572, 9127, 37141, 130581, 132566, 88062, 52912, 59509, 15870, 1935, 62395, 1278, 90681, 7822, 36265, 57331, 35205, 30581, 102686, 16650, 21078, 132511, 44174, 73456]
[2024-12-02 18:48:12.825987] user = 112520 Cloud 131/567
[2024-12-02 18:48:12.864066] user = 112520 Local 131/567
[2024-12-02 18:48:12.990713] user = 112520 Local+ 131/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:48:16.125755] user = 112520 MPDA- 131/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6022727272727273
Training on augumented user 9737 0/50 current_auc = 0.6022727272727273
User 9737 AUC after training: 0.5994318181818181
User 9737 does not improve AUC. Reverting changes.
Training on augumented user 8142 1/50 current_auc = 0.6022727272727273
User 8142 AUC after training: 0.6022727272727273
User 8142 does not improve AUC. Reverting changes.
Training on augumented user 37500 2/50 current_auc = 0.6022727272727273
User 37500 AUC after training: 0.5994318181818181
User 37500 does not improve AUC. Reverting changes.
Training on augumented user 42979 3/50 current_auc = 0.6022727272727273
User 42979 AUC after training: 0.6022727272727273
User 42979 does not improve AUC. Reverting changes.
Training on augumented user 14405 4/50 current_auc = 0.6022727272727273
User 14405 AUC after training: 0.6022727272727273
User 14405 does not improve AUC. Reverting changes.
Training on augumented user 85570 5/50 current_auc = 0.6022727272727273
User 85570 AUC after training: 0.6022727272727273
User 85570 does not improve AUC. Reverting changes.
Training on augumented user 129743 6/50 current_auc = 0.6022727272727273
User 129743 AUC after training: 0.6022727272727273
User 129743 does not improve AUC. Reverting changes.
Training on augumented user 20393 7/50 current_auc = 0.6022727272727273
User 20393 AUC after training: 0.6022727272727273
User 20393 does not improve AUC. Reverting changes.
Training on augumented user 72188 8/50 current_auc = 0.6022727272727273
User 72188 AUC after training: 0.6022727272727273
User 72188 does not improve AUC. Reverting changes.
Training on augumented user 35599 9/50 current_auc = 0.6022727272727273
User 35599 AUC after training: 0.6022727272727273
User 35599 does not improve AUC. Reverting changes.
Training on augumented user 124462 10/50 current_auc = 0.6022727272727273
User 124462 AUC after training: 0.5994318181818181
User 124462 does not improve AUC. Reverting changes.
Training on augumented user 43790 11/50 current_auc = 0.6022727272727273
User 43790 AUC after training: 0.6022727272727273
User 43790 does not improve AUC. Reverting changes.
Training on augumented user 118038 12/50 current_auc = 0.6022727272727273
User 118038 AUC after training: 0.6022727272727273
User 118038 does not improve AUC. Reverting changes.
Training on augumented user 88691 13/50 current_auc = 0.6022727272727273
User 88691 AUC after training: 0.6022727272727273
User 88691 does not improve AUC. Reverting changes.
Training on augumented user 64721 14/50 current_auc = 0.6022727272727273
User 64721 AUC after training: 0.6022727272727273
User 64721 does not improve AUC. Reverting changes.
Training on augumented user 126136 15/50 current_auc = 0.6022727272727273
User 126136 AUC after training: 0.6022727272727273
User 126136 does not improve AUC. Reverting changes.
Training on augumented user 57959 16/50 current_auc = 0.6022727272727273
User 57959 AUC after training: 0.6022727272727273
User 57959 does not improve AUC. Reverting changes.
Training on augumented user 28616 17/50 current_auc = 0.6022727272727273
User 28616 AUC after training: 0.6022727272727273
User 28616 does not improve AUC. Reverting changes.
Training on augumented user 42038 18/50 current_auc = 0.6022727272727273
User 42038 AUC after training: 0.6022727272727273
User 42038 does not improve AUC. Reverting changes.
Training on augumented user 16290 19/50 current_auc = 0.6022727272727273
User 16290 AUC after training: 0.6022727272727273
User 16290 does not improve AUC. Reverting changes.
Training on augumented user 6609 20/50 current_auc = 0.6022727272727273
User 6609 AUC after training: 0.6022727272727273
User 6609 does not improve AUC. Reverting changes.
Training on augumented user 88837 21/50 current_auc = 0.6022727272727273
User 88837 AUC after training: 0.6022727272727273
User 88837 does not improve AUC. Reverting changes.
Training on augumented user 61774 22/50 current_auc = 0.6022727272727273
User 61774 AUC after training: 0.6022727272727273
User 61774 does not improve AUC. Reverting changes.
Training on augumented user 42050 23/50 current_auc = 0.6022727272727273
User 42050 AUC after training: 0.6022727272727273
User 42050 does not improve AUC. Reverting changes.
Training on augumented user 21611 24/50 current_auc = 0.6022727272727273
User 21611 AUC after training: 0.6022727272727273
User 21611 does not improve AUC. Reverting changes.
Training on augumented user 15343 25/50 current_auc = 0.6022727272727273
User 15343 AUC after training: 0.6022727272727273
User 15343 does not improve AUC. Reverting changes.
Training on augumented user 48572 26/50 current_auc = 0.6022727272727273
User 48572 AUC after training: 0.6022727272727273
User 48572 does not improve AUC. Reverting changes.
Training on augumented user 9127 27/50 current_auc = 0.6022727272727273
User 9127 AUC after training: 0.6022727272727273
User 9127 does not improve AUC. Reverting changes.
Training on augumented user 37141 28/50 current_auc = 0.6022727272727273
User 37141 AUC after training: 0.6022727272727273
User 37141 does not improve AUC. Reverting changes.
Training on augumented user 130581 29/50 current_auc = 0.6022727272727273
User 130581 AUC after training: 0.6022727272727273
User 130581 does not improve AUC. Reverting changes.
Training on augumented user 132566 30/50 current_auc = 0.6022727272727273
User 132566 AUC after training: 0.6022727272727273
User 132566 does not improve AUC. Reverting changes.
Training on augumented user 88062 31/50 current_auc = 0.6022727272727273
User 88062 AUC after training: 0.5994318181818181
User 88062 does not improve AUC. Reverting changes.
Training on augumented user 52912 32/50 current_auc = 0.6022727272727273
User 52912 AUC after training: 0.6022727272727273
User 52912 does not improve AUC. Reverting changes.
Training on augumented user 59509 33/50 current_auc = 0.6022727272727273
User 59509 AUC after training: 0.6022727272727273
User 59509 does not improve AUC. Reverting changes.
Training on augumented user 15870 34/50 current_auc = 0.6022727272727273
User 15870 AUC after training: 0.6022727272727273
User 15870 does not improve AUC. Reverting changes.
Training on augumented user 1935 35/50 current_auc = 0.6022727272727273
User 1935 AUC after training: 0.5994318181818181
User 1935 does not improve AUC. Reverting changes.
Training on augumented user 62395 36/50 current_auc = 0.6022727272727273
User 62395 AUC after training: 0.6022727272727273
User 62395 does not improve AUC. Reverting changes.
Training on augumented user 1278 37/50 current_auc = 0.6022727272727273
User 1278 AUC after training: 0.6022727272727273
User 1278 does not improve AUC. Reverting changes.
Training on augumented user 90681 38/50 current_auc = 0.6022727272727273
User 90681 AUC after training: 0.6022727272727273
User 90681 does not improve AUC. Reverting changes.
Training on augumented user 7822 39/50 current_auc = 0.6022727272727273
User 7822 AUC after training: 0.5994318181818181
User 7822 does not improve AUC. Reverting changes.
Training on augumented user 36265 40/50 current_auc = 0.6022727272727273
User 36265 AUC after training: 0.6022727272727273
User 36265 does not improve AUC. Reverting changes.
Training on augumented user 57331 41/50 current_auc = 0.6022727272727273
User 57331 AUC after training: 0.6022727272727273
User 57331 does not improve AUC. Reverting changes.
Training on augumented user 35205 42/50 current_auc = 0.6022727272727273
User 35205 AUC after training: 0.6022727272727273
User 35205 does not improve AUC. Reverting changes.
Training on augumented user 30581 43/50 current_auc = 0.6022727272727273
User 30581 AUC after training: 0.6022727272727273
User 30581 does not improve AUC. Reverting changes.
Training on augumented user 102686 44/50 current_auc = 0.6022727272727273
User 102686 AUC after training: 0.6022727272727273
User 102686 does not improve AUC. Reverting changes.
Training on augumented user 16650 45/50 current_auc = 0.6022727272727273
User 16650 AUC after training: 0.6022727272727273
User 16650 does not improve AUC. Reverting changes.
Training on augumented user 21078 46/50 current_auc = 0.6022727272727273
User 21078 AUC after training: 0.5994318181818181
User 21078 does not improve AUC. Reverting changes.
Training on augumented user 132511 47/50 current_auc = 0.6022727272727273
User 132511 AUC after training: 0.5994318181818181
User 132511 does not improve AUC. Reverting changes.
Training on augumented user 44174 48/50 current_auc = 0.6022727272727273
User 44174 AUC after training: 0.6022727272727273
User 44174 does not improve AUC. Reverting changes.
Training on augumented user 73456 49/50 current_auc = 0.6022727272727273
User 73456 AUC after training: 0.6022727272727273
User 73456 does not improve AUC. Reverting changes.
[2024-12-02 18:48:45.189216] start test user 112618 132/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:48:45.914684] start test user 112618 132/567 recall augumented users by random, augumented_users = [107800, 120083, 51323, 90115, 16901, 6695, 34315, 133893, 21982, 106304, 65069, 73229, 48444, 1330, 13237, 30535, 131989, 130080, 53257, 47043, 48698, 38556, 65899, 55310, 112229, 55975, 117839, 110412, 14810, 124798, 113159, 91457, 3972, 21259, 127356, 128435, 84798, 64889, 75338, 59893, 34480, 78697, 86719, 21918, 101555, 105859, 9959, 6909, 119825, 104349]
[2024-12-02 18:48:45.929887] user = 112618 Cloud 132/567
[2024-12-02 18:48:45.985118] user = 112618 Local 132/567
[2024-12-02 18:48:46.048102] user = 112618 Local+ 132/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:48:49.355448] user = 112618 MPDA- 132/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5502645502645502
Training on augumented user 107800 0/50 current_auc = 0.5502645502645502
User 107800 AUC after training: 0.544973544973545
User 107800 does not improve AUC. Reverting changes.
Training on augumented user 120083 1/50 current_auc = 0.5502645502645502
User 120083 AUC after training: 0.5476190476190476
User 120083 does not improve AUC. Reverting changes.
Training on augumented user 51323 2/50 current_auc = 0.5502645502645502
User 51323 AUC after training: 0.5502645502645502
User 51323 does not improve AUC. Reverting changes.
Training on augumented user 90115 3/50 current_auc = 0.5502645502645502
User 90115 AUC after training: 0.5476190476190476
User 90115 does not improve AUC. Reverting changes.
Training on augumented user 16901 4/50 current_auc = 0.5502645502645502
User 16901 AUC after training: 0.5502645502645502
User 16901 does not improve AUC. Reverting changes.
Training on augumented user 6695 5/50 current_auc = 0.5502645502645502
User 6695 AUC after training: 0.5502645502645502
User 6695 does not improve AUC. Reverting changes.
Training on augumented user 34315 6/50 current_auc = 0.5502645502645502
User 34315 AUC after training: 0.5502645502645502
User 34315 does not improve AUC. Reverting changes.
Training on augumented user 133893 7/50 current_auc = 0.5502645502645502
User 133893 AUC after training: 0.5529100529100529
User 133893 improves AUC. Keeping the model.
Training on augumented user 21982 8/50 current_auc = 0.5529100529100529
User 21982 AUC after training: 0.5502645502645502
User 21982 does not improve AUC. Reverting changes.
Training on augumented user 106304 9/50 current_auc = 0.5529100529100529
User 106304 AUC after training: 0.5529100529100529
User 106304 does not improve AUC. Reverting changes.
Training on augumented user 65069 10/50 current_auc = 0.5529100529100529
User 65069 AUC after training: 0.5555555555555556
User 65069 improves AUC. Keeping the model.
Training on augumented user 73229 11/50 current_auc = 0.5555555555555556
User 73229 AUC after training: 0.5476190476190477
User 73229 does not improve AUC. Reverting changes.
Training on augumented user 48444 12/50 current_auc = 0.5555555555555556
User 48444 AUC after training: 0.5502645502645502
User 48444 does not improve AUC. Reverting changes.
Training on augumented user 1330 13/50 current_auc = 0.5555555555555556
User 1330 AUC after training: 0.5529100529100529
User 1330 does not improve AUC. Reverting changes.
Training on augumented user 13237 14/50 current_auc = 0.5555555555555556
User 13237 AUC after training: 0.5529100529100529
User 13237 does not improve AUC. Reverting changes.
Training on augumented user 30535 15/50 current_auc = 0.5555555555555556
User 30535 AUC after training: 0.5529100529100529
User 30535 does not improve AUC. Reverting changes.
Training on augumented user 131989 16/50 current_auc = 0.5555555555555556
User 131989 AUC after training: 0.5582010582010581
User 131989 improves AUC. Keeping the model.
Training on augumented user 130080 17/50 current_auc = 0.5582010582010581
User 130080 AUC after training: 0.5582010582010581
User 130080 does not improve AUC. Reverting changes.
Training on augumented user 53257 18/50 current_auc = 0.5582010582010581
User 53257 AUC after training: 0.5529100529100529
User 53257 does not improve AUC. Reverting changes.
Training on augumented user 47043 19/50 current_auc = 0.5582010582010581
User 47043 AUC after training: 0.5529100529100529
User 47043 does not improve AUC. Reverting changes.
Training on augumented user 48698 20/50 current_auc = 0.5582010582010581
User 48698 AUC after training: 0.5529100529100529
User 48698 does not improve AUC. Reverting changes.
Training on augumented user 38556 21/50 current_auc = 0.5582010582010581
User 38556 AUC after training: 0.5555555555555556
User 38556 does not improve AUC. Reverting changes.
Training on augumented user 65899 22/50 current_auc = 0.5582010582010581
User 65899 AUC after training: 0.5529100529100529
User 65899 does not improve AUC. Reverting changes.
Training on augumented user 55310 23/50 current_auc = 0.5582010582010581
User 55310 AUC after training: 0.5582010582010581
User 55310 does not improve AUC. Reverting changes.
Training on augumented user 112229 24/50 current_auc = 0.5582010582010581
User 112229 AUC after training: 0.5582010582010581
User 112229 does not improve AUC. Reverting changes.
Training on augumented user 55975 25/50 current_auc = 0.5582010582010581
User 55975 AUC after training: 0.5476190476190477
User 55975 does not improve AUC. Reverting changes.
Training on augumented user 117839 26/50 current_auc = 0.5582010582010581
User 117839 AUC after training: 0.5502645502645502
User 117839 does not improve AUC. Reverting changes.
Training on augumented user 110412 27/50 current_auc = 0.5582010582010581
User 110412 AUC after training: 0.5555555555555556
User 110412 does not improve AUC. Reverting changes.
Training on augumented user 14810 28/50 current_auc = 0.5582010582010581
User 14810 AUC after training: 0.5582010582010581
User 14810 does not improve AUC. Reverting changes.
Training on augumented user 124798 29/50 current_auc = 0.5582010582010581
User 124798 AUC after training: 0.5582010582010581
User 124798 does not improve AUC. Reverting changes.
Training on augumented user 113159 30/50 current_auc = 0.5582010582010581
User 113159 AUC after training: 0.5476190476190477
User 113159 does not improve AUC. Reverting changes.
Training on augumented user 91457 31/50 current_auc = 0.5582010582010581
User 91457 AUC after training: 0.5555555555555556
User 91457 does not improve AUC. Reverting changes.
Training on augumented user 3972 32/50 current_auc = 0.5582010582010581
User 3972 AUC after training: 0.5555555555555556
User 3972 does not improve AUC. Reverting changes.
Training on augumented user 21259 33/50 current_auc = 0.5582010582010581
User 21259 AUC after training: 0.5555555555555556
User 21259 does not improve AUC. Reverting changes.
Training on augumented user 127356 34/50 current_auc = 0.5582010582010581
User 127356 AUC after training: 0.5502645502645502
User 127356 does not improve AUC. Reverting changes.
Training on augumented user 128435 35/50 current_auc = 0.5582010582010581
User 128435 AUC after training: 0.5529100529100529
User 128435 does not improve AUC. Reverting changes.
Training on augumented user 84798 36/50 current_auc = 0.5582010582010581
User 84798 AUC after training: 0.5555555555555556
User 84798 does not improve AUC. Reverting changes.
Training on augumented user 64889 37/50 current_auc = 0.5582010582010581
User 64889 AUC after training: 0.5502645502645502
User 64889 does not improve AUC. Reverting changes.
Training on augumented user 75338 38/50 current_auc = 0.5582010582010581
User 75338 AUC after training: 0.5555555555555556
User 75338 does not improve AUC. Reverting changes.
Training on augumented user 59893 39/50 current_auc = 0.5582010582010581
User 59893 AUC after training: 0.5555555555555556
User 59893 does not improve AUC. Reverting changes.
Training on augumented user 34480 40/50 current_auc = 0.5582010582010581
User 34480 AUC after training: 0.5502645502645502
User 34480 does not improve AUC. Reverting changes.
Training on augumented user 78697 41/50 current_auc = 0.5582010582010581
User 78697 AUC after training: 0.5529100529100528
User 78697 does not improve AUC. Reverting changes.
Training on augumented user 86719 42/50 current_auc = 0.5582010582010581
User 86719 AUC after training: 0.5555555555555556
User 86719 does not improve AUC. Reverting changes.
Training on augumented user 21918 43/50 current_auc = 0.5582010582010581
User 21918 AUC after training: 0.5582010582010581
User 21918 does not improve AUC. Reverting changes.
Training on augumented user 101555 44/50 current_auc = 0.5582010582010581
User 101555 AUC after training: 0.5555555555555556
User 101555 does not improve AUC. Reverting changes.
Training on augumented user 105859 45/50 current_auc = 0.5582010582010581
User 105859 AUC after training: 0.5502645502645502
User 105859 does not improve AUC. Reverting changes.
Training on augumented user 9959 46/50 current_auc = 0.5582010582010581
User 9959 AUC after training: 0.5529100529100529
User 9959 does not improve AUC. Reverting changes.
Training on augumented user 6909 47/50 current_auc = 0.5582010582010581
User 6909 AUC after training: 0.5555555555555556
User 6909 does not improve AUC. Reverting changes.
Training on augumented user 119825 48/50 current_auc = 0.5582010582010581
User 119825 AUC after training: 0.5582010582010581
User 119825 does not improve AUC. Reverting changes.
Training on augumented user 104349 49/50 current_auc = 0.5582010582010581
User 104349 AUC after training: 0.5608465608465609
User 104349 improves AUC. Keeping the model.
[2024-12-02 18:49:20.902263] start test user 112693 133/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:49:21.389131] start test user 112693 133/567 recall augumented users by random, augumented_users = [11642, 3412, 106330, 126999, 44348, 109698, 37295, 49761, 116581, 11587, 28954, 44591, 51400, 10727, 11241, 2729, 77914, 114991, 90520, 117600, 71206, 58261, 67667, 21301, 28493, 112553, 87988, 41016, 13517, 40028, 110873, 28150, 43264, 104271, 135423, 134185, 3188, 62034, 1102, 100312, 32956, 127321, 98432, 118436, 79383, 90700, 26005, 109422, 63050, 58860]
[2024-12-02 18:49:21.403236] user = 112693 Cloud 133/567
[2024-12-02 18:49:21.433204] user = 112693 Local 133/567
[2024-12-02 18:49:21.474490] user = 112693 Local+ 133/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:49:23.507974] user = 112693 MPDA- 133/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7230205278592375
Training on augumented user 11642 0/50 current_auc = 0.7230205278592375
User 11642 AUC after training: 0.7249266862170087
User 11642 improves AUC. Keeping the model.
Training on augumented user 3412 1/50 current_auc = 0.7249266862170087
User 3412 AUC after training: 0.7249266862170087
User 3412 does not improve AUC. Reverting changes.
Training on augumented user 106330 2/50 current_auc = 0.7249266862170087
User 106330 AUC after training: 0.7241935483870968
User 106330 does not improve AUC. Reverting changes.
Training on augumented user 126999 3/50 current_auc = 0.7249266862170087
User 126999 AUC after training: 0.7256598240469209
User 126999 improves AUC. Keeping the model.
Training on augumented user 44348 4/50 current_auc = 0.7256598240469209
User 44348 AUC after training: 0.7259530791788856
User 44348 improves AUC. Keeping the model.
Training on augumented user 109698 5/50 current_auc = 0.7259530791788856
User 109698 AUC after training: 0.7269794721407625
User 109698 improves AUC. Keeping the model.
Training on augumented user 37295 6/50 current_auc = 0.7269794721407625
User 37295 AUC after training: 0.7195014662756598
User 37295 does not improve AUC. Reverting changes.
Training on augumented user 49761 7/50 current_auc = 0.7269794721407625
User 49761 AUC after training: 0.7281524926686217
User 49761 improves AUC. Keeping the model.
Training on augumented user 116581 8/50 current_auc = 0.7281524926686217
User 116581 AUC after training: 0.7282991202346041
User 116581 improves AUC. Keeping the model.
Training on augumented user 11587 9/50 current_auc = 0.7282991202346041
User 11587 AUC after training: 0.7278592375366568
User 11587 does not improve AUC. Reverting changes.
Training on augumented user 28954 10/50 current_auc = 0.7282991202346041
User 28954 AUC after training: 0.7277126099706744
User 28954 does not improve AUC. Reverting changes.
Training on augumented user 44591 11/50 current_auc = 0.7282991202346041
User 44591 AUC after training: 0.7274193548387097
User 44591 does not improve AUC. Reverting changes.
Training on augumented user 51400 12/50 current_auc = 0.7282991202346041
User 51400 AUC after training: 0.7287390029325513
User 51400 improves AUC. Keeping the model.
Training on augumented user 10727 13/50 current_auc = 0.7287390029325513
User 10727 AUC after training: 0.7256598240469209
User 10727 does not improve AUC. Reverting changes.
Training on augumented user 11241 14/50 current_auc = 0.7287390029325513
User 11241 AUC after training: 0.7282991202346042
User 11241 does not improve AUC. Reverting changes.
Training on augumented user 2729 15/50 current_auc = 0.7287390029325513
User 2729 AUC after training: 0.7282991202346042
User 2729 does not improve AUC. Reverting changes.
Training on augumented user 77914 16/50 current_auc = 0.7287390029325513
User 77914 AUC after training: 0.7287390029325513
User 77914 does not improve AUC. Reverting changes.
Training on augumented user 114991 17/50 current_auc = 0.7287390029325513
User 114991 AUC after training: 0.7284457478005865
User 114991 does not improve AUC. Reverting changes.
Training on augumented user 90520 18/50 current_auc = 0.7287390029325513
User 90520 AUC after training: 0.7285923753665688
User 90520 does not improve AUC. Reverting changes.
Training on augumented user 117600 19/50 current_auc = 0.7287390029325513
User 117600 AUC after training: 0.7291788856304986
User 117600 improves AUC. Keeping the model.
Training on augumented user 71206 20/50 current_auc = 0.7291788856304986
User 71206 AUC after training: 0.7283724340175953
User 71206 does not improve AUC. Reverting changes.
Training on augumented user 58261 21/50 current_auc = 0.7291788856304986
User 58261 AUC after training: 0.7286656891495602
User 58261 does not improve AUC. Reverting changes.
Training on augumented user 67667 22/50 current_auc = 0.7291788856304986
User 67667 AUC after training: 0.7285923753665688
User 67667 does not improve AUC. Reverting changes.
Training on augumented user 21301 23/50 current_auc = 0.7291788856304986
User 21301 AUC after training: 0.7277126099706744
User 21301 does not improve AUC. Reverting changes.
Training on augumented user 28493 24/50 current_auc = 0.7291788856304986
User 28493 AUC after training: 0.7296187683284457
User 28493 improves AUC. Keeping the model.
Training on augumented user 112553 25/50 current_auc = 0.7296187683284457
User 112553 AUC after training: 0.729325513196481
User 112553 does not improve AUC. Reverting changes.
Training on augumented user 87988 26/50 current_auc = 0.7296187683284457
User 87988 AUC after training: 0.7287390029325512
User 87988 does not improve AUC. Reverting changes.
Training on augumented user 41016 27/50 current_auc = 0.7296187683284457
User 41016 AUC after training: 0.7290322580645161
User 41016 does not improve AUC. Reverting changes.
Training on augumented user 13517 28/50 current_auc = 0.7296187683284457
User 13517 AUC after training: 0.7284457478005866
User 13517 does not improve AUC. Reverting changes.
Training on augumented user 40028 29/50 current_auc = 0.7296187683284457
User 40028 AUC after training: 0.7287390029325513
User 40028 does not improve AUC. Reverting changes.
Training on augumented user 110873 30/50 current_auc = 0.7296187683284457
User 110873 AUC after training: 0.7281524926686217
User 110873 does not improve AUC. Reverting changes.
Training on augumented user 28150 31/50 current_auc = 0.7296187683284457
User 28150 AUC after training: 0.7282991202346042
User 28150 does not improve AUC. Reverting changes.
Training on augumented user 43264 32/50 current_auc = 0.7296187683284457
User 43264 AUC after training: 0.7288856304985337
User 43264 does not improve AUC. Reverting changes.
Training on augumented user 104271 33/50 current_auc = 0.7296187683284457
User 104271 AUC after training: 0.7288123167155425
User 104271 does not improve AUC. Reverting changes.
Training on augumented user 135423 34/50 current_auc = 0.7296187683284457
User 135423 AUC after training: 0.7282991202346041
User 135423 does not improve AUC. Reverting changes.
Training on augumented user 134185 35/50 current_auc = 0.7296187683284457
User 134185 AUC after training: 0.7288856304985336
User 134185 does not improve AUC. Reverting changes.
Training on augumented user 3188 36/50 current_auc = 0.7296187683284457
User 3188 AUC after training: 0.7291788856304986
User 3188 does not improve AUC. Reverting changes.
Training on augumented user 62034 37/50 current_auc = 0.7296187683284457
User 62034 AUC after training: 0.7287390029325513
User 62034 does not improve AUC. Reverting changes.
Training on augumented user 1102 38/50 current_auc = 0.7296187683284457
User 1102 AUC after training: 0.7284457478005866
User 1102 does not improve AUC. Reverting changes.
Training on augumented user 100312 39/50 current_auc = 0.7296187683284457
User 100312 AUC after training: 0.7282991202346041
User 100312 does not improve AUC. Reverting changes.
Training on augumented user 32956 40/50 current_auc = 0.7296187683284457
User 32956 AUC after training: 0.7294721407624633
User 32956 does not improve AUC. Reverting changes.
Training on augumented user 127321 41/50 current_auc = 0.7296187683284457
User 127321 AUC after training: 0.7291788856304985
User 127321 does not improve AUC. Reverting changes.
Training on augumented user 98432 42/50 current_auc = 0.7296187683284457
User 98432 AUC after training: 0.7290322580645161
User 98432 does not improve AUC. Reverting changes.
Training on augumented user 118436 43/50 current_auc = 0.7296187683284457
User 118436 AUC after training: 0.7291788856304985
User 118436 does not improve AUC. Reverting changes.
Training on augumented user 79383 44/50 current_auc = 0.7296187683284457
User 79383 AUC after training: 0.7294721407624634
User 79383 does not improve AUC. Reverting changes.
Training on augumented user 90700 45/50 current_auc = 0.7296187683284457
User 90700 AUC after training: 0.729325513196481
User 90700 does not improve AUC. Reverting changes.
Training on augumented user 26005 46/50 current_auc = 0.7296187683284457
User 26005 AUC after training: 0.7291788856304985
User 26005 does not improve AUC. Reverting changes.
Training on augumented user 109422 47/50 current_auc = 0.7296187683284457
User 109422 AUC after training: 0.728592375366569
User 109422 does not improve AUC. Reverting changes.
Training on augumented user 63050 48/50 current_auc = 0.7296187683284457
User 63050 AUC after training: 0.7285190615835777
User 63050 does not improve AUC. Reverting changes.
Training on augumented user 58860 49/50 current_auc = 0.7296187683284457
User 58860 AUC after training: 0.7285923753665688
User 58860 does not improve AUC. Reverting changes.
[2024-12-02 18:49:53.061468] start test user 112762 134/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:49:53.574838] start test user 112762 134/567 recall augumented users by random, augumented_users = [98509, 71779, 109689, 113290, 35157, 88721, 77989, 2047, 626, 118527, 21690, 80400, 124611, 86698, 110548, 53427, 106944, 120984, 18294, 57682, 30364, 7037, 26848, 105444, 23557, 17546, 36335, 45989, 111698, 101774, 136964, 61080, 117603, 98881, 28628, 86731, 28227, 133972, 8589, 46953, 37678, 35539, 4441, 76937, 110277, 22957, 32970, 24618, 105894, 82708]
[2024-12-02 18:49:53.595834] user = 112762 Cloud 134/567
[2024-12-02 18:49:53.704720] user = 112762 Local 134/567
[2024-12-02 18:49:53.935204] user = 112762 Local+ 134/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:49:56.476514] user = 112762 MPDA- 134/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7176347760060744
Training on augumented user 98509 0/50 current_auc = 0.7176347760060744
User 98509 AUC after training: 0.7177296886864084
User 98509 improves AUC. Keeping the model.
Training on augumented user 71779 1/50 current_auc = 0.7177296886864084
User 71779 AUC after training: 0.7178418582177124
User 71779 improves AUC. Keeping the model.
Training on augumented user 109689 2/50 current_auc = 0.7178418582177124
User 109689 AUC after training: 0.7179108856215917
User 109689 improves AUC. Keeping the model.
Training on augumented user 113290 3/50 current_auc = 0.7179108856215917
User 113290 AUC after training: 0.717790087664803
User 113290 does not improve AUC. Reverting changes.
Training on augumented user 35157 4/50 current_auc = 0.7179108856215917
User 35157 AUC after training: 0.7178246013667426
User 35157 does not improve AUC. Reverting changes.
Training on augumented user 88721 5/50 current_auc = 0.7179108856215917
User 88721 AUC after training: 0.7176951749844689
User 88721 does not improve AUC. Reverting changes.
Training on augumented user 77989 6/50 current_auc = 0.7179108856215917
User 77989 AUC after training: 0.7179626561745014
User 77989 improves AUC. Keeping the model.
Training on augumented user 2047 7/50 current_auc = 0.7179626561745014
User 2047 AUC after training: 0.7182560226409884
User 2047 improves AUC. Keeping the model.
Training on augumented user 626 8/50 current_auc = 0.7182560226409884
User 626 AUC after training: 0.7182085663008214
User 626 does not improve AUC. Reverting changes.
Training on augumented user 118527 9/50 current_auc = 0.7182560226409884
User 118527 AUC after training: 0.7183164216193829
User 118527 improves AUC. Keeping the model.
Training on augumented user 21690 10/50 current_auc = 0.7183164216193829
User 21690 AUC after training: 0.7176002623041348
User 21690 does not improve AUC. Reverting changes.
Training on augumented user 80400 11/50 current_auc = 0.7183164216193829
User 80400 AUC after training: 0.7183768205977772
User 80400 improves AUC. Keeping the model.
Training on augumented user 124611 12/50 current_auc = 0.7183768205977772
User 124611 AUC after training: 0.7185580175329607
User 124611 improves AUC. Keeping the model.
Training on augumented user 86698 13/50 current_auc = 0.7185580175329607
User 86698 AUC after training: 0.7185580175329604
User 86698 does not improve AUC. Reverting changes.
Training on augumented user 110548 14/50 current_auc = 0.7185580175329607
User 110548 AUC after training: 0.7185235038310208
User 110548 does not improve AUC. Reverting changes.
Training on augumented user 53427 15/50 current_auc = 0.7185580175329607
User 53427 AUC after training: 0.718618416511355
User 53427 improves AUC. Keeping the model.
Training on augumented user 106944 16/50 current_auc = 0.718618416511355
User 106944 AUC after training: 0.718514875405536
User 106944 does not improve AUC. Reverting changes.
Training on augumented user 120984 17/50 current_auc = 0.718618416511355
User 120984 AUC after training: 0.7185839028094153
User 120984 does not improve AUC. Reverting changes.
Training on augumented user 18294 18/50 current_auc = 0.718618416511355
User 18294 AUC after training: 0.7185752743839303
User 18294 does not improve AUC. Reverting changes.
Training on augumented user 57682 19/50 current_auc = 0.718618416511355
User 57682 AUC after training: 0.7184372195761717
User 57682 does not improve AUC. Reverting changes.
Training on augumented user 30364 20/50 current_auc = 0.718618416511355
User 30364 AUC after training: 0.718402705874232
User 30364 does not improve AUC. Reverting changes.
Training on augumented user 7037 21/50 current_auc = 0.718618416511355
User 7037 AUC after training: 0.7182560226409884
User 7037 does not improve AUC. Reverting changes.
Training on augumented user 26848 22/50 current_auc = 0.718618416511355
User 26848 AUC after training: 0.7177685166010906
User 26848 does not improve AUC. Reverting changes.
Training on augumented user 105444 23/50 current_auc = 0.718618416511355
User 105444 AUC after training: 0.7184458480016566
User 105444 does not improve AUC. Reverting changes.
Training on augumented user 23557 24/50 current_auc = 0.718618416511355
User 23557 AUC after training: 0.7183595637468075
User 23557 does not improve AUC. Reverting changes.
Training on augumented user 17546 25/50 current_auc = 0.718618416511355
User 17546 AUC after training: 0.7185321322565057
User 17546 does not improve AUC. Reverting changes.
Training on augumented user 36335 26/50 current_auc = 0.718618416511355
User 36335 AUC after training: 0.718514875405536
User 36335 does not improve AUC. Reverting changes.
Training on augumented user 45989 27/50 current_auc = 0.718618416511355
User 45989 AUC after training: 0.7184372195761717
User 45989 does not improve AUC. Reverting changes.
Training on augumented user 111698 28/50 current_auc = 0.718618416511355
User 111698 AUC after training: 0.7186529302132947
User 111698 improves AUC. Keeping the model.
Training on augumented user 101774 29/50 current_auc = 0.7186529302132947
User 101774 AUC after training: 0.7186701870642646
User 101774 improves AUC. Keeping the model.
Training on augumented user 136964 30/50 current_auc = 0.7186701870642646
User 136964 AUC after training: 0.7187133291916892
User 136964 improves AUC. Keeping the model.
Training on augumented user 61080 31/50 current_auc = 0.7187133291916892
User 61080 AUC after training: 0.7187737281700836
User 61080 improves AUC. Keeping the model.
Training on augumented user 117603 32/50 current_auc = 0.7187737281700836
User 117603 AUC after training: 0.7186270449368399
User 117603 does not improve AUC. Reverting changes.
Training on augumented user 98881 33/50 current_auc = 0.7187737281700836
User 98881 AUC after training: 0.7186960723407192
User 98881 does not improve AUC. Reverting changes.
Training on augumented user 28628 34/50 current_auc = 0.7187737281700836
User 28628 AUC after training: 0.7183164216193829
User 28628 does not improve AUC. Reverting changes.
Training on augumented user 86731 35/50 current_auc = 0.7187737281700836
User 86731 AUC after training: 0.7185235038310209
User 86731 does not improve AUC. Reverting changes.
Training on augumented user 28227 36/50 current_auc = 0.7187737281700836
User 28227 AUC after training: 0.7187478428936287
User 28227 does not improve AUC. Reverting changes.
Training on augumented user 133972 37/50 current_auc = 0.7187737281700836
User 133972 AUC after training: 0.7187047007662042
User 133972 does not improve AUC. Reverting changes.
Training on augumented user 8589 38/50 current_auc = 0.7187737281700836
User 8589 AUC after training: 0.7185925312349003
User 8589 does not improve AUC. Reverting changes.
Training on augumented user 46953 39/50 current_auc = 0.7187737281700836
User 46953 AUC after training: 0.7187737281700834
User 46953 does not improve AUC. Reverting changes.
Training on augumented user 37678 40/50 current_auc = 0.7187737281700836
User 37678 AUC after training: 0.7184372195761718
User 37678 does not improve AUC. Reverting changes.
Training on augumented user 35539 41/50 current_auc = 0.7187737281700836
User 35539 AUC after training: 0.7186874439152343
User 35539 does not improve AUC. Reverting changes.
Training on augumented user 4441 42/50 current_auc = 0.7187737281700836
User 4441 AUC after training: 0.7187823565955684
User 4441 improves AUC. Keeping the model.
Training on augumented user 76937 43/50 current_auc = 0.7187823565955684
User 76937 AUC after training: 0.7188772692759025
User 76937 improves AUC. Keeping the model.
Training on augumented user 110277 44/50 current_auc = 0.7188772692759025
User 110277 AUC after training: 0.7182258231517913
User 110277 does not improve AUC. Reverting changes.
Training on augumented user 22957 45/50 current_auc = 0.7188772692759025
User 22957 AUC after training: 0.7186874439152343
User 22957 does not improve AUC. Reverting changes.
Training on augumented user 32970 46/50 current_auc = 0.7188772692759025
User 32970 AUC after training: 0.7187823565955684
User 32970 does not improve AUC. Reverting changes.
Training on augumented user 24618 47/50 current_auc = 0.7188772692759025
User 24618 AUC after training: 0.7187823565955686
User 24618 does not improve AUC. Reverting changes.
Training on augumented user 105894 48/50 current_auc = 0.7188772692759025
User 105894 AUC after training: 0.7187823565955684
User 105894 does not improve AUC. Reverting changes.
Training on augumented user 82708 49/50 current_auc = 0.7188772692759025
User 82708 AUC after training: 0.7187996134465383
User 82708 does not improve AUC. Reverting changes.
[2024-12-02 18:50:28.832592] start test user 112936 135/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:50:29.283352] start test user 112936 135/567 recall augumented users by random, augumented_users = [1255, 47723, 70702, 20639, 55338, 127692, 64565, 51393, 118671, 82187, 54409, 77176, 107414, 56717, 24040, 98618, 90956, 105145, 26600, 76019, 61120, 69595, 98305, 24251, 43270, 97925, 2743, 35606, 94562, 5703, 115560, 107343, 31152, 1111, 114263, 66119, 70471, 93737, 79594, 57998, 26419, 89131, 44907, 78229, 88471, 36423, 3085, 74462, 130449, 17344]
[2024-12-02 18:50:29.297984] user = 112936 Cloud 135/567
[2024-12-02 18:50:29.307378] user = 112936 Local 135/567
[2024-12-02 18:50:29.344118] user = 112936 Local+ 135/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:50:31.908262] user = 112936 MPDA- 135/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4
Training on augumented user 1255 0/50 current_auc = 0.4
User 1255 AUC after training: 0.4
User 1255 does not improve AUC. Reverting changes.
Training on augumented user 47723 1/50 current_auc = 0.4
User 47723 AUC after training: 0.4
User 47723 does not improve AUC. Reverting changes.
Training on augumented user 70702 2/50 current_auc = 0.4
User 70702 AUC after training: 0.4
User 70702 does not improve AUC. Reverting changes.
Training on augumented user 20639 3/50 current_auc = 0.4
User 20639 AUC after training: 0.4
User 20639 does not improve AUC. Reverting changes.
Training on augumented user 55338 4/50 current_auc = 0.4
User 55338 AUC after training: 0.4
User 55338 does not improve AUC. Reverting changes.
Training on augumented user 127692 5/50 current_auc = 0.4
User 127692 AUC after training: 0.4
User 127692 does not improve AUC. Reverting changes.
Training on augumented user 64565 6/50 current_auc = 0.4
User 64565 AUC after training: 0.4
User 64565 does not improve AUC. Reverting changes.
Training on augumented user 51393 7/50 current_auc = 0.4
User 51393 AUC after training: 0.4
User 51393 does not improve AUC. Reverting changes.
Training on augumented user 118671 8/50 current_auc = 0.4
User 118671 AUC after training: 0.4
User 118671 does not improve AUC. Reverting changes.
Training on augumented user 82187 9/50 current_auc = 0.4
User 82187 AUC after training: 0.4
User 82187 does not improve AUC. Reverting changes.
Training on augumented user 54409 10/50 current_auc = 0.4
User 54409 AUC after training: 0.4
User 54409 does not improve AUC. Reverting changes.
Training on augumented user 77176 11/50 current_auc = 0.4
User 77176 AUC after training: 0.4
User 77176 does not improve AUC. Reverting changes.
Training on augumented user 107414 12/50 current_auc = 0.4
User 107414 AUC after training: 0.4
User 107414 does not improve AUC. Reverting changes.
Training on augumented user 56717 13/50 current_auc = 0.4
User 56717 AUC after training: 0.4
User 56717 does not improve AUC. Reverting changes.
Training on augumented user 24040 14/50 current_auc = 0.4
User 24040 AUC after training: 0.4
User 24040 does not improve AUC. Reverting changes.
Training on augumented user 98618 15/50 current_auc = 0.4
User 98618 AUC after training: 0.4
User 98618 does not improve AUC. Reverting changes.
Training on augumented user 90956 16/50 current_auc = 0.4
User 90956 AUC after training: 0.4
User 90956 does not improve AUC. Reverting changes.
Training on augumented user 105145 17/50 current_auc = 0.4
User 105145 AUC after training: 0.4
User 105145 does not improve AUC. Reverting changes.
Training on augumented user 26600 18/50 current_auc = 0.4
User 26600 AUC after training: 0.4
User 26600 does not improve AUC. Reverting changes.
Training on augumented user 76019 19/50 current_auc = 0.4
User 76019 AUC after training: 0.4
User 76019 does not improve AUC. Reverting changes.
Training on augumented user 61120 20/50 current_auc = 0.4
User 61120 AUC after training: 0.4
User 61120 does not improve AUC. Reverting changes.
Training on augumented user 69595 21/50 current_auc = 0.4
User 69595 AUC after training: 0.4
User 69595 does not improve AUC. Reverting changes.
Training on augumented user 98305 22/50 current_auc = 0.4
User 98305 AUC after training: 0.4
User 98305 does not improve AUC. Reverting changes.
Training on augumented user 24251 23/50 current_auc = 0.4
User 24251 AUC after training: 0.4
User 24251 does not improve AUC. Reverting changes.
Training on augumented user 43270 24/50 current_auc = 0.4
User 43270 AUC after training: 0.4
User 43270 does not improve AUC. Reverting changes.
Training on augumented user 97925 25/50 current_auc = 0.4
User 97925 AUC after training: 0.4
User 97925 does not improve AUC. Reverting changes.
Training on augumented user 2743 26/50 current_auc = 0.4
User 2743 AUC after training: 0.4
User 2743 does not improve AUC. Reverting changes.
Training on augumented user 35606 27/50 current_auc = 0.4
User 35606 AUC after training: 0.4
User 35606 does not improve AUC. Reverting changes.
Training on augumented user 94562 28/50 current_auc = 0.4
User 94562 AUC after training: 0.4
User 94562 does not improve AUC. Reverting changes.
Training on augumented user 5703 29/50 current_auc = 0.4
User 5703 AUC after training: 0.4
User 5703 does not improve AUC. Reverting changes.
Training on augumented user 115560 30/50 current_auc = 0.4
User 115560 AUC after training: 0.4
User 115560 does not improve AUC. Reverting changes.
Training on augumented user 107343 31/50 current_auc = 0.4
User 107343 AUC after training: 0.4
User 107343 does not improve AUC. Reverting changes.
Training on augumented user 31152 32/50 current_auc = 0.4
User 31152 AUC after training: 0.3941176470588235
User 31152 does not improve AUC. Reverting changes.
Training on augumented user 1111 33/50 current_auc = 0.4
User 1111 AUC after training: 0.4
User 1111 does not improve AUC. Reverting changes.
Training on augumented user 114263 34/50 current_auc = 0.4
User 114263 AUC after training: 0.4
User 114263 does not improve AUC. Reverting changes.
Training on augumented user 66119 35/50 current_auc = 0.4
User 66119 AUC after training: 0.4
User 66119 does not improve AUC. Reverting changes.
Training on augumented user 70471 36/50 current_auc = 0.4
User 70471 AUC after training: 0.4
User 70471 does not improve AUC. Reverting changes.
Training on augumented user 93737 37/50 current_auc = 0.4
User 93737 AUC after training: 0.4
User 93737 does not improve AUC. Reverting changes.
Training on augumented user 79594 38/50 current_auc = 0.4
User 79594 AUC after training: 0.4
User 79594 does not improve AUC. Reverting changes.
Training on augumented user 57998 39/50 current_auc = 0.4
User 57998 AUC after training: 0.4
User 57998 does not improve AUC. Reverting changes.
Training on augumented user 26419 40/50 current_auc = 0.4
User 26419 AUC after training: 0.4
User 26419 does not improve AUC. Reverting changes.
Training on augumented user 89131 41/50 current_auc = 0.4
User 89131 AUC after training: 0.4
User 89131 does not improve AUC. Reverting changes.
Training on augumented user 44907 42/50 current_auc = 0.4
User 44907 AUC after training: 0.4
User 44907 does not improve AUC. Reverting changes.
Training on augumented user 78229 43/50 current_auc = 0.4
User 78229 AUC after training: 0.3941176470588235
User 78229 does not improve AUC. Reverting changes.
Training on augumented user 88471 44/50 current_auc = 0.4
User 88471 AUC after training: 0.4
User 88471 does not improve AUC. Reverting changes.
Training on augumented user 36423 45/50 current_auc = 0.4
User 36423 AUC after training: 0.4
User 36423 does not improve AUC. Reverting changes.
Training on augumented user 3085 46/50 current_auc = 0.4
User 3085 AUC after training: 0.4
User 3085 does not improve AUC. Reverting changes.
Training on augumented user 74462 47/50 current_auc = 0.4
User 74462 AUC after training: 0.4
User 74462 does not improve AUC. Reverting changes.
Training on augumented user 130449 48/50 current_auc = 0.4
User 130449 AUC after training: 0.4
User 130449 does not improve AUC. Reverting changes.
Training on augumented user 17344 49/50 current_auc = 0.4
User 17344 AUC after training: 0.4
User 17344 does not improve AUC. Reverting changes.
[2024-12-02 18:50:59.358042] start test user 112943 136/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:50:59.964984] start test user 112943 136/567 recall augumented users by random, augumented_users = [108298, 19399, 61590, 24306, 47683, 17032, 83798, 134963, 34198, 110143, 3773, 7627, 99745, 125894, 88121, 64763, 4509, 40041, 66283, 132095, 45932, 112004, 59168, 79013, 120173, 72708, 91361, 50284, 109583, 122745, 69585, 6417, 27122, 22717, 125987, 107190, 136116, 81981, 58525, 100174, 133815, 17868, 53301, 43278, 81969, 25853, 73553, 49384, 51244, 55201]
[2024-12-02 18:50:59.981266] user = 112943 Cloud 136/567
[2024-12-02 18:50:59.999329] user = 112943 Local 136/567
[2024-12-02 18:51:00.132720] user = 112943 Local+ 136/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:51:02.055706] user = 112943 MPDA- 136/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6369152970922882
Training on augumented user 108298 0/50 current_auc = 0.6369152970922882
User 108298 AUC after training: 0.6356510745891277
User 108298 does not improve AUC. Reverting changes.
Training on augumented user 19399 1/50 current_auc = 0.6369152970922882
User 19399 AUC after training: 0.6366624525916562
User 19399 does not improve AUC. Reverting changes.
Training on augumented user 61590 2/50 current_auc = 0.6369152970922882
User 61590 AUC after training: 0.636409608091024
User 61590 does not improve AUC. Reverting changes.
Training on augumented user 24306 3/50 current_auc = 0.6369152970922882
User 24306 AUC after training: 0.6361567635903919
User 24306 does not improve AUC. Reverting changes.
Training on augumented user 47683 4/50 current_auc = 0.6369152970922882
User 47683 AUC after training: 0.6361567635903919
User 47683 does not improve AUC. Reverting changes.
Training on augumented user 17032 5/50 current_auc = 0.6369152970922882
User 17032 AUC after training: 0.636156763590392
User 17032 does not improve AUC. Reverting changes.
Training on augumented user 83798 6/50 current_auc = 0.6369152970922882
User 83798 AUC after training: 0.6359039190897597
User 83798 does not improve AUC. Reverting changes.
Training on augumented user 134963 7/50 current_auc = 0.6369152970922882
User 134963 AUC after training: 0.6356510745891276
User 134963 does not improve AUC. Reverting changes.
Training on augumented user 34198 8/50 current_auc = 0.6369152970922882
User 34198 AUC after training: 0.6356510745891276
User 34198 does not improve AUC. Reverting changes.
Training on augumented user 110143 9/50 current_auc = 0.6369152970922882
User 110143 AUC after training: 0.6364096080910241
User 110143 does not improve AUC. Reverting changes.
Training on augumented user 3773 10/50 current_auc = 0.6369152970922882
User 3773 AUC after training: 0.6366624525916562
User 3773 does not improve AUC. Reverting changes.
Training on augumented user 7627 11/50 current_auc = 0.6369152970922882
User 7627 AUC after training: 0.6353982300884956
User 7627 does not improve AUC. Reverting changes.
Training on augumented user 99745 12/50 current_auc = 0.6369152970922882
User 99745 AUC after training: 0.6371681415929202
User 99745 improves AUC. Keeping the model.
Training on augumented user 125894 13/50 current_auc = 0.6371681415929202
User 125894 AUC after training: 0.6374209860935525
User 125894 improves AUC. Keeping the model.
Training on augumented user 88121 14/50 current_auc = 0.6374209860935525
User 88121 AUC after training: 0.6371681415929205
User 88121 does not improve AUC. Reverting changes.
Training on augumented user 64763 15/50 current_auc = 0.6374209860935525
User 64763 AUC after training: 0.6381795195954488
User 64763 improves AUC. Keeping the model.
Training on augumented user 4509 16/50 current_auc = 0.6381795195954488
User 4509 AUC after training: 0.6379266750948167
User 4509 does not improve AUC. Reverting changes.
Training on augumented user 40041 17/50 current_auc = 0.6381795195954488
User 40041 AUC after training: 0.6376738305941846
User 40041 does not improve AUC. Reverting changes.
Training on augumented user 66283 18/50 current_auc = 0.6381795195954488
User 66283 AUC after training: 0.6376738305941846
User 66283 does not improve AUC. Reverting changes.
Training on augumented user 132095 19/50 current_auc = 0.6381795195954488
User 132095 AUC after training: 0.6379266750948166
User 132095 does not improve AUC. Reverting changes.
Training on augumented user 45932 20/50 current_auc = 0.6381795195954488
User 45932 AUC after training: 0.6379266750948167
User 45932 does not improve AUC. Reverting changes.
Training on augumented user 112004 21/50 current_auc = 0.6381795195954488
User 112004 AUC after training: 0.6379266750948167
User 112004 does not improve AUC. Reverting changes.
Training on augumented user 59168 22/50 current_auc = 0.6381795195954488
User 59168 AUC after training: 0.6376738305941845
User 59168 does not improve AUC. Reverting changes.
Training on augumented user 79013 23/50 current_auc = 0.6381795195954488
User 79013 AUC after training: 0.6376738305941846
User 79013 does not improve AUC. Reverting changes.
Training on augumented user 120173 24/50 current_auc = 0.6381795195954488
User 120173 AUC after training: 0.6381795195954488
User 120173 does not improve AUC. Reverting changes.
Training on augumented user 72708 25/50 current_auc = 0.6381795195954488
User 72708 AUC after training: 0.6366624525916561
User 72708 does not improve AUC. Reverting changes.
Training on augumented user 91361 26/50 current_auc = 0.6381795195954488
User 91361 AUC after training: 0.638432364096081
User 91361 improves AUC. Keeping the model.
Training on augumented user 50284 27/50 current_auc = 0.638432364096081
User 50284 AUC after training: 0.6369152970922883
User 50284 does not improve AUC. Reverting changes.
Training on augumented user 109583 28/50 current_auc = 0.638432364096081
User 109583 AUC after training: 0.6384323640960808
User 109583 does not improve AUC. Reverting changes.
Training on augumented user 122745 29/50 current_auc = 0.638432364096081
User 122745 AUC after training: 0.6379266750948167
User 122745 does not improve AUC. Reverting changes.
Training on augumented user 69585 30/50 current_auc = 0.638432364096081
User 69585 AUC after training: 0.6379266750948166
User 69585 does not improve AUC. Reverting changes.
Training on augumented user 6417 31/50 current_auc = 0.638432364096081
User 6417 AUC after training: 0.6399494310998736
User 6417 improves AUC. Keeping the model.
Training on augumented user 27122 32/50 current_auc = 0.6399494310998736
User 27122 AUC after training: 0.6394437420986093
User 27122 does not improve AUC. Reverting changes.
Training on augumented user 22717 33/50 current_auc = 0.6399494310998736
User 22717 AUC after training: 0.6394437420986093
User 22717 does not improve AUC. Reverting changes.
Training on augumented user 125987 34/50 current_auc = 0.6399494310998736
User 125987 AUC after training: 0.6399494310998736
User 125987 does not improve AUC. Reverting changes.
Training on augumented user 107190 35/50 current_auc = 0.6399494310998736
User 107190 AUC after training: 0.6402022756005057
User 107190 improves AUC. Keeping the model.
Training on augumented user 136116 36/50 current_auc = 0.6402022756005057
User 136116 AUC after training: 0.6394437420986093
User 136116 does not improve AUC. Reverting changes.
Training on augumented user 81981 37/50 current_auc = 0.6402022756005057
User 81981 AUC after training: 0.6391908975979773
User 81981 does not improve AUC. Reverting changes.
Training on augumented user 58525 38/50 current_auc = 0.6402022756005057
User 58525 AUC after training: 0.6396965865992416
User 58525 does not improve AUC. Reverting changes.
Training on augumented user 100174 39/50 current_auc = 0.6402022756005057
User 100174 AUC after training: 0.6396965865992414
User 100174 does not improve AUC. Reverting changes.
Training on augumented user 133815 40/50 current_auc = 0.6402022756005057
User 133815 AUC after training: 0.6394437420986094
User 133815 does not improve AUC. Reverting changes.
Training on augumented user 17868 41/50 current_auc = 0.6402022756005057
User 17868 AUC after training: 0.6402022756005057
User 17868 does not improve AUC. Reverting changes.
Training on augumented user 53301 42/50 current_auc = 0.6402022756005057
User 53301 AUC after training: 0.6396965865992414
User 53301 does not improve AUC. Reverting changes.
Training on augumented user 43278 43/50 current_auc = 0.6402022756005057
User 43278 AUC after training: 0.6394437420986093
User 43278 does not improve AUC. Reverting changes.
Training on augumented user 81969 44/50 current_auc = 0.6402022756005057
User 81969 AUC after training: 0.6396965865992414
User 81969 does not improve AUC. Reverting changes.
Training on augumented user 25853 45/50 current_auc = 0.6402022756005057
User 25853 AUC after training: 0.6407079646017699
User 25853 improves AUC. Keeping the model.
Training on augumented user 73553 46/50 current_auc = 0.6407079646017699
User 73553 AUC after training: 0.6402022756005058
User 73553 does not improve AUC. Reverting changes.
Training on augumented user 49384 47/50 current_auc = 0.6407079646017699
User 49384 AUC after training: 0.6404551201011378
User 49384 does not improve AUC. Reverting changes.
Training on augumented user 51244 48/50 current_auc = 0.6407079646017699
User 51244 AUC after training: 0.6402022756005057
User 51244 does not improve AUC. Reverting changes.
Training on augumented user 55201 49/50 current_auc = 0.6407079646017699
User 55201 AUC after training: 0.6384323640960808
User 55201 does not improve AUC. Reverting changes.
[2024-12-02 18:51:26.787789] start test user 112964 137/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:51:27.662778] start test user 112964 137/567 recall augumented users by random, augumented_users = [17040, 85913, 48577, 127767, 118578, 80607, 52163, 66992, 120454, 76071, 27522, 106671, 112755, 38300, 85671, 107946, 94302, 6318, 63314, 3452, 26138, 65381, 50607, 67580, 12716, 93038, 68685, 104619, 17246, 110877, 36288, 31820, 106692, 102028, 20834, 1394, 99433, 18328, 43310, 50120, 105951, 128591, 45283, 8695, 1571, 45759, 131938, 2721, 118249, 122354]
[2024-12-02 18:51:27.706798] user = 112964 Cloud 137/567
[2024-12-02 18:51:27.744880] user = 112964 Local 137/567
[2024-12-02 18:51:27.783036] user = 112964 Local+ 137/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:51:30.918490] user = 112964 MPDA- 137/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5628531073446328
Training on augumented user 17040 0/50 current_auc = 0.5628531073446328
User 17040 AUC after training: 0.5614406779661016
User 17040 does not improve AUC. Reverting changes.
Training on augumented user 85913 1/50 current_auc = 0.5628531073446328
User 85913 AUC after training: 0.5621468926553672
User 85913 does not improve AUC. Reverting changes.
Training on augumented user 48577 2/50 current_auc = 0.5628531073446328
User 48577 AUC after training: 0.5628531073446327
User 48577 does not improve AUC. Reverting changes.
Training on augumented user 127767 3/50 current_auc = 0.5628531073446328
User 127767 AUC after training: 0.5625
User 127767 does not improve AUC. Reverting changes.
Training on augumented user 118578 4/50 current_auc = 0.5628531073446328
User 118578 AUC after training: 0.5617937853107344
User 118578 does not improve AUC. Reverting changes.
Training on augumented user 80607 5/50 current_auc = 0.5628531073446328
User 80607 AUC after training: 0.5617937853107344
User 80607 does not improve AUC. Reverting changes.
Training on augumented user 52163 6/50 current_auc = 0.5628531073446328
User 52163 AUC after training: 0.5635593220338984
User 52163 improves AUC. Keeping the model.
Training on augumented user 66992 7/50 current_auc = 0.5635593220338984
User 66992 AUC after training: 0.5639124293785311
User 66992 improves AUC. Keeping the model.
Training on augumented user 120454 8/50 current_auc = 0.5639124293785311
User 120454 AUC after training: 0.5617937853107345
User 120454 does not improve AUC. Reverting changes.
Training on augumented user 76071 9/50 current_auc = 0.5639124293785311
User 76071 AUC after training: 0.5653248587570622
User 76071 improves AUC. Keeping the model.
Training on augumented user 27522 10/50 current_auc = 0.5653248587570622
User 27522 AUC after training: 0.5646186440677966
User 27522 does not improve AUC. Reverting changes.
Training on augumented user 106671 11/50 current_auc = 0.5653248587570622
User 106671 AUC after training: 0.5635593220338984
User 106671 does not improve AUC. Reverting changes.
Training on augumented user 112755 12/50 current_auc = 0.5653248587570622
User 112755 AUC after training: 0.5632062146892656
User 112755 does not improve AUC. Reverting changes.
Training on augumented user 38300 13/50 current_auc = 0.5653248587570622
User 38300 AUC after training: 0.5646186440677966
User 38300 does not improve AUC. Reverting changes.
Training on augumented user 85671 14/50 current_auc = 0.5653248587570622
User 85671 AUC after training: 0.561087570621469
User 85671 does not improve AUC. Reverting changes.
Training on augumented user 107946 15/50 current_auc = 0.5653248587570622
User 107946 AUC after training: 0.5646186440677966
User 107946 does not improve AUC. Reverting changes.
Training on augumented user 94302 16/50 current_auc = 0.5653248587570622
User 94302 AUC after training: 0.565677966101695
User 94302 improves AUC. Keeping the model.
Training on augumented user 6318 17/50 current_auc = 0.565677966101695
User 6318 AUC after training: 0.5632062146892656
User 6318 does not improve AUC. Reverting changes.
Training on augumented user 63314 18/50 current_auc = 0.565677966101695
User 63314 AUC after training: 0.5674435028248588
User 63314 improves AUC. Keeping the model.
Training on augumented user 3452 19/50 current_auc = 0.5674435028248588
User 3452 AUC after training: 0.5674435028248588
User 3452 does not improve AUC. Reverting changes.
Training on augumented user 26138 20/50 current_auc = 0.5674435028248588
User 26138 AUC after training: 0.5660310734463276
User 26138 does not improve AUC. Reverting changes.
Training on augumented user 65381 21/50 current_auc = 0.5674435028248588
User 65381 AUC after training: 0.5660310734463276
User 65381 does not improve AUC. Reverting changes.
Training on augumented user 50607 22/50 current_auc = 0.5674435028248588
User 50607 AUC after training: 0.567090395480226
User 50607 does not improve AUC. Reverting changes.
Training on augumented user 67580 23/50 current_auc = 0.5674435028248588
User 67580 AUC after training: 0.5663841807909604
User 67580 does not improve AUC. Reverting changes.
Training on augumented user 12716 24/50 current_auc = 0.5674435028248588
User 12716 AUC after training: 0.5677966101694915
User 12716 improves AUC. Keeping the model.
Training on augumented user 93038 25/50 current_auc = 0.5677966101694915
User 93038 AUC after training: 0.5677966101694915
User 93038 does not improve AUC. Reverting changes.
Training on augumented user 68685 26/50 current_auc = 0.5677966101694915
User 68685 AUC after training: 0.5681497175141242
User 68685 improves AUC. Keeping the model.
Training on augumented user 104619 27/50 current_auc = 0.5681497175141242
User 104619 AUC after training: 0.5674435028248588
User 104619 does not improve AUC. Reverting changes.
Training on augumented user 17246 28/50 current_auc = 0.5681497175141242
User 17246 AUC after training: 0.5670903954802259
User 17246 does not improve AUC. Reverting changes.
Training on augumented user 110877 29/50 current_auc = 0.5681497175141242
User 110877 AUC after training: 0.5677966101694915
User 110877 does not improve AUC. Reverting changes.
Training on augumented user 36288 30/50 current_auc = 0.5681497175141242
User 36288 AUC after training: 0.5663841807909604
User 36288 does not improve AUC. Reverting changes.
Training on augumented user 31820 31/50 current_auc = 0.5681497175141242
User 31820 AUC after training: 0.5677966101694916
User 31820 does not improve AUC. Reverting changes.
Training on augumented user 106692 32/50 current_auc = 0.5681497175141242
User 106692 AUC after training: 0.567090395480226
User 106692 does not improve AUC. Reverting changes.
Training on augumented user 102028 33/50 current_auc = 0.5681497175141242
User 102028 AUC after training: 0.5681497175141242
User 102028 does not improve AUC. Reverting changes.
Training on augumented user 20834 34/50 current_auc = 0.5681497175141242
User 20834 AUC after training: 0.5663841807909604
User 20834 does not improve AUC. Reverting changes.
Training on augumented user 1394 35/50 current_auc = 0.5681497175141242
User 1394 AUC after training: 0.5667372881355932
User 1394 does not improve AUC. Reverting changes.
Training on augumented user 99433 36/50 current_auc = 0.5681497175141242
User 99433 AUC after training: 0.5674435028248588
User 99433 does not improve AUC. Reverting changes.
Training on augumented user 18328 37/50 current_auc = 0.5681497175141242
User 18328 AUC after training: 0.5670903954802259
User 18328 does not improve AUC. Reverting changes.
Training on augumented user 43310 38/50 current_auc = 0.5681497175141242
User 43310 AUC after training: 0.5674435028248587
User 43310 does not improve AUC. Reverting changes.
Training on augumented user 50120 39/50 current_auc = 0.5681497175141242
User 50120 AUC after training: 0.5663841807909604
User 50120 does not improve AUC. Reverting changes.
Training on augumented user 105951 40/50 current_auc = 0.5681497175141242
User 105951 AUC after training: 0.5667372881355932
User 105951 does not improve AUC. Reverting changes.
Training on augumented user 128591 41/50 current_auc = 0.5681497175141242
User 128591 AUC after training: 0.5663841807909604
User 128591 does not improve AUC. Reverting changes.
Training on augumented user 45283 42/50 current_auc = 0.5681497175141242
User 45283 AUC after training: 0.567090395480226
User 45283 does not improve AUC. Reverting changes.
Training on augumented user 8695 43/50 current_auc = 0.5681497175141242
User 8695 AUC after training: 0.5674435028248587
User 8695 does not improve AUC. Reverting changes.
Training on augumented user 1571 44/50 current_auc = 0.5681497175141242
User 1571 AUC after training: 0.5670903954802259
User 1571 does not improve AUC. Reverting changes.
Training on augumented user 45759 45/50 current_auc = 0.5681497175141242
User 45759 AUC after training: 0.5674435028248588
User 45759 does not improve AUC. Reverting changes.
Training on augumented user 131938 46/50 current_auc = 0.5681497175141242
User 131938 AUC after training: 0.5674435028248588
User 131938 does not improve AUC. Reverting changes.
Training on augumented user 2721 47/50 current_auc = 0.5681497175141242
User 2721 AUC after training: 0.5663841807909604
User 2721 does not improve AUC. Reverting changes.
Training on augumented user 118249 48/50 current_auc = 0.5681497175141242
User 118249 AUC after training: 0.5677966101694915
User 118249 does not improve AUC. Reverting changes.
Training on augumented user 122354 49/50 current_auc = 0.5681497175141242
User 122354 AUC after training: 0.567090395480226
User 122354 does not improve AUC. Reverting changes.
[2024-12-02 18:51:58.383162] start test user 112977 138/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:51:58.875347] start test user 112977 138/567 recall augumented users by random, augumented_users = [2, 57745, 51282, 116879, 66641, 81891, 1671, 5158, 91196, 78360, 72221, 37141, 3839, 16194, 65916, 11755, 98365, 93178, 23216, 85071, 87271, 64991, 134405, 70753, 81992, 16603, 101526, 33489, 95413, 103598, 43706, 103569, 51214, 36070, 135998, 28187, 91667, 41916, 79535, 9651, 23827, 8735, 38145, 107157, 35103, 119622, 114511, 21249, 114896, 21797]
[2024-12-02 18:51:58.890962] user = 112977 Cloud 138/567
[2024-12-02 18:51:58.905570] user = 112977 Local 138/567
[2024-12-02 18:51:58.937002] user = 112977 Local+ 138/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:52:01.118342] user = 112977 MPDA- 138/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6254564423578508
Training on augumented user 2 0/50 current_auc = 0.6254564423578508
User 2 AUC after training: 0.6246739697443924
User 2 does not improve AUC. Reverting changes.
Training on augumented user 57745 1/50 current_auc = 0.6254564423578508
User 57745 AUC after training: 0.6249347939488785
User 57745 does not improve AUC. Reverting changes.
Training on augumented user 51282 2/50 current_auc = 0.6254564423578508
User 51282 AUC after training: 0.6251956181533647
User 51282 does not improve AUC. Reverting changes.
Training on augumented user 116879 3/50 current_auc = 0.6254564423578508
User 116879 AUC after training: 0.622717788210746
User 116879 does not improve AUC. Reverting changes.
Training on augumented user 66641 4/50 current_auc = 0.6254564423578508
User 66641 AUC after training: 0.6246739697443923
User 66641 does not improve AUC. Reverting changes.
Training on augumented user 81891 5/50 current_auc = 0.6254564423578508
User 81891 AUC after training: 0.6257172665623371
User 81891 improves AUC. Keeping the model.
Training on augumented user 1671 6/50 current_auc = 0.6257172665623371
User 1671 AUC after training: 0.6257172665623371
User 1671 does not improve AUC. Reverting changes.
Training on augumented user 5158 7/50 current_auc = 0.6257172665623371
User 5158 AUC after training: 0.6251956181533647
User 5158 does not improve AUC. Reverting changes.
Training on augumented user 91196 8/50 current_auc = 0.6257172665623371
User 91196 AUC after training: 0.6246739697443924
User 91196 does not improve AUC. Reverting changes.
Training on augumented user 78360 9/50 current_auc = 0.6257172665623371
User 78360 AUC after training: 0.6254564423578508
User 78360 does not improve AUC. Reverting changes.
Training on augumented user 72221 10/50 current_auc = 0.6257172665623371
User 72221 AUC after training: 0.6233698487219614
User 72221 does not improve AUC. Reverting changes.
Training on augumented user 37141 11/50 current_auc = 0.6257172665623371
User 37141 AUC after training: 0.6249347939488785
User 37141 does not improve AUC. Reverting changes.
Training on augumented user 3839 12/50 current_auc = 0.6257172665623371
User 3839 AUC after training: 0.6249347939488785
User 3839 does not improve AUC. Reverting changes.
Training on augumented user 16194 13/50 current_auc = 0.6257172665623371
User 16194 AUC after training: 0.6254564423578508
User 16194 does not improve AUC. Reverting changes.
Training on augumented user 65916 14/50 current_auc = 0.6257172665623371
User 65916 AUC after training: 0.6251956181533647
User 65916 does not improve AUC. Reverting changes.
Training on augumented user 11755 15/50 current_auc = 0.6257172665623371
User 11755 AUC after training: 0.6244131455399061
User 11755 does not improve AUC. Reverting changes.
Training on augumented user 98365 16/50 current_auc = 0.6257172665623371
User 98365 AUC after training: 0.6253260302556078
User 98365 does not improve AUC. Reverting changes.
Training on augumented user 93178 17/50 current_auc = 0.6257172665623371
User 93178 AUC after training: 0.6262389149713092
User 93178 improves AUC. Keeping the model.
Training on augumented user 23216 18/50 current_auc = 0.6262389149713092
User 23216 AUC after training: 0.625717266562337
User 23216 does not improve AUC. Reverting changes.
Training on augumented user 85071 19/50 current_auc = 0.6262389149713092
User 85071 AUC after training: 0.6249347939488785
User 85071 does not improve AUC. Reverting changes.
Training on augumented user 87271 20/50 current_auc = 0.6262389149713092
User 87271 AUC after training: 0.6267605633802816
User 87271 improves AUC. Keeping the model.
Training on augumented user 64991 21/50 current_auc = 0.6267605633802816
User 64991 AUC after training: 0.625717266562337
User 64991 does not improve AUC. Reverting changes.
Training on augumented user 134405 22/50 current_auc = 0.6267605633802816
User 134405 AUC after training: 0.6231090245174752
User 134405 does not improve AUC. Reverting changes.
Training on augumented user 70753 23/50 current_auc = 0.6267605633802816
User 70753 AUC after training: 0.6257172665623371
User 70753 does not improve AUC. Reverting changes.
Training on augumented user 81992 24/50 current_auc = 0.6267605633802816
User 81992 AUC after training: 0.6259780907668232
User 81992 does not improve AUC. Reverting changes.
Training on augumented user 16603 25/50 current_auc = 0.6267605633802816
User 16603 AUC after training: 0.6257172665623371
User 16603 does not improve AUC. Reverting changes.
Training on augumented user 101526 26/50 current_auc = 0.6267605633802816
User 101526 AUC after training: 0.6231090245174753
User 101526 does not improve AUC. Reverting changes.
Training on augumented user 33489 27/50 current_auc = 0.6267605633802816
User 33489 AUC after training: 0.6262389149713095
User 33489 does not improve AUC. Reverting changes.
Training on augumented user 95413 28/50 current_auc = 0.6267605633802816
User 95413 AUC after training: 0.6251956181533647
User 95413 does not improve AUC. Reverting changes.
Training on augumented user 103598 29/50 current_auc = 0.6267605633802816
User 103598 AUC after training: 0.6262389149713093
User 103598 does not improve AUC. Reverting changes.
Training on augumented user 43706 30/50 current_auc = 0.6267605633802816
User 43706 AUC after training: 0.6259780907668232
User 43706 does not improve AUC. Reverting changes.
Training on augumented user 103569 31/50 current_auc = 0.6267605633802816
User 103569 AUC after training: 0.6264997391757956
User 103569 does not improve AUC. Reverting changes.
Training on augumented user 51214 32/50 current_auc = 0.6267605633802816
User 51214 AUC after training: 0.6259780907668232
User 51214 does not improve AUC. Reverting changes.
Training on augumented user 36070 33/50 current_auc = 0.6267605633802816
User 36070 AUC after training: 0.6259780907668232
User 36070 does not improve AUC. Reverting changes.
Training on augumented user 135998 34/50 current_auc = 0.6267605633802816
User 135998 AUC after training: 0.625717266562337
User 135998 does not improve AUC. Reverting changes.
Training on augumented user 28187 35/50 current_auc = 0.6267605633802816
User 28187 AUC after training: 0.6270213875847679
User 28187 improves AUC. Keeping the model.
Training on augumented user 91667 36/50 current_auc = 0.6270213875847679
User 91667 AUC after training: 0.6262389149713093
User 91667 does not improve AUC. Reverting changes.
Training on augumented user 41916 37/50 current_auc = 0.6270213875847679
User 41916 AUC after training: 0.6254564423578509
User 41916 does not improve AUC. Reverting changes.
Training on augumented user 79535 38/50 current_auc = 0.6270213875847679
User 79535 AUC after training: 0.6254564423578508
User 79535 does not improve AUC. Reverting changes.
Training on augumented user 9651 39/50 current_auc = 0.6270213875847679
User 9651 AUC after training: 0.6259780907668232
User 9651 does not improve AUC. Reverting changes.
Training on augumented user 23827 40/50 current_auc = 0.6270213875847679
User 23827 AUC after training: 0.6264997391757956
User 23827 does not improve AUC. Reverting changes.
Training on augumented user 8735 41/50 current_auc = 0.6270213875847679
User 8735 AUC after training: 0.6257172665623371
User 8735 does not improve AUC. Reverting changes.
Training on augumented user 38145 42/50 current_auc = 0.6270213875847679
User 38145 AUC after training: 0.6254564423578508
User 38145 does not improve AUC. Reverting changes.
Training on augumented user 107157 43/50 current_auc = 0.6270213875847679
User 107157 AUC after training: 0.6251956181533647
User 107157 does not improve AUC. Reverting changes.
Training on augumented user 35103 44/50 current_auc = 0.6270213875847679
User 35103 AUC after training: 0.6259780907668232
User 35103 does not improve AUC. Reverting changes.
Training on augumented user 119622 45/50 current_auc = 0.6270213875847679
User 119622 AUC after training: 0.6254564423578508
User 119622 does not improve AUC. Reverting changes.
Training on augumented user 114511 46/50 current_auc = 0.6270213875847679
User 114511 AUC after training: 0.624413145539906
User 114511 does not improve AUC. Reverting changes.
Training on augumented user 21249 47/50 current_auc = 0.6270213875847679
User 21249 AUC after training: 0.6254564423578508
User 21249 does not improve AUC. Reverting changes.
Training on augumented user 114896 48/50 current_auc = 0.6270213875847679
User 114896 AUC after training: 0.6264997391757955
User 114896 does not improve AUC. Reverting changes.
Training on augumented user 21797 49/50 current_auc = 0.6270213875847679
User 21797 AUC after training: 0.62415232133542
User 21797 does not improve AUC. Reverting changes.
[2024-12-02 18:52:28.484907] start test user 113073 139/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:52:28.945129] start test user 113073 139/567 recall augumented users by random, augumented_users = [46729, 81007, 34750, 62001, 37295, 40680, 46200, 29970, 107137, 121208, 130737, 107906, 121486, 85081, 109184, 138252, 83509, 124151, 124915, 123854, 94969, 3306, 64338, 128753, 50978, 101501, 47800, 112249, 83131, 24893, 92227, 102924, 75088, 126331, 52056, 73096, 133263, 13687, 84315, 48287, 134229, 33613, 122579, 74142, 37307, 42916, 125308, 13861, 61921, 111741]
[2024-12-02 18:52:28.961628] user = 113073 Cloud 139/567
[2024-12-02 18:52:29.012202] user = 113073 Local 139/567
[2024-12-02 18:52:29.206596] user = 113073 Local+ 139/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:52:32.731822] user = 113073 MPDA- 139/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6247798742138365
Training on augumented user 46729 0/50 current_auc = 0.6247798742138365
User 46729 AUC after training: 0.6242487770789658
User 46729 does not improve AUC. Reverting changes.
Training on augumented user 81007 1/50 current_auc = 0.6247798742138365
User 81007 AUC after training: 0.6247938504542279
User 81007 improves AUC. Keeping the model.
Training on augumented user 34750 2/50 current_auc = 0.6247938504542279
User 34750 AUC after training: 0.6258979734451433
User 34750 improves AUC. Keeping the model.
Training on augumented user 62001 3/50 current_auc = 0.6258979734451433
User 62001 AUC after training: 0.6256184486373166
User 62001 does not improve AUC. Reverting changes.
Training on augumented user 37295 4/50 current_auc = 0.6258979734451433
User 37295 AUC after training: 0.626638714185884
User 37295 improves AUC. Keeping the model.
Training on augumented user 40680 5/50 current_auc = 0.626638714185884
User 40680 AUC after training: 0.6267784765897974
User 40680 improves AUC. Keeping the model.
Training on augumented user 46200 6/50 current_auc = 0.6267784765897974
User 46200 AUC after training: 0.6269461914744934
User 46200 improves AUC. Keeping the model.
Training on augumented user 29970 7/50 current_auc = 0.6269461914744934
User 29970 AUC after training: 0.6269601677148847
User 29970 improves AUC. Keeping the model.
Training on augumented user 107137 8/50 current_auc = 0.6269601677148847
User 107137 AUC after training: 0.6266107617051012
User 107137 does not improve AUC. Reverting changes.
Training on augumented user 121208 9/50 current_auc = 0.6269601677148847
User 121208 AUC after training: 0.6267085953878407
User 121208 does not improve AUC. Reverting changes.
Training on augumented user 130737 10/50 current_auc = 0.6269601677148847
User 130737 AUC after training: 0.6266946191474494
User 130737 does not improve AUC. Reverting changes.
Training on augumented user 107906 11/50 current_auc = 0.6269601677148847
User 107906 AUC after training: 0.6271139063591894
User 107906 improves AUC. Keeping the model.
Training on augumented user 121486 12/50 current_auc = 0.6271139063591894
User 121486 AUC after training: 0.6270859538784067
User 121486 does not improve AUC. Reverting changes.
Training on augumented user 85081 13/50 current_auc = 0.6271139063591894
User 85081 AUC after training: 0.6269881201956674
User 85081 does not improve AUC. Reverting changes.
Training on augumented user 109184 14/50 current_auc = 0.6271139063591894
User 109184 AUC after training: 0.6272955974842767
User 109184 improves AUC. Keeping the model.
Training on augumented user 138252 15/50 current_auc = 0.6272955974842767
User 138252 AUC after training: 0.6271698113207548
User 138252 does not improve AUC. Reverting changes.
Training on augumented user 83509 16/50 current_auc = 0.6272955974842767
User 83509 AUC after training: 0.6277568134171908
User 83509 improves AUC. Keeping the model.
Training on augumented user 124151 17/50 current_auc = 0.6277568134171908
User 124151 AUC after training: 0.6275751222921034
User 124151 does not improve AUC. Reverting changes.
Training on augumented user 124915 18/50 current_auc = 0.6277568134171908
User 124915 AUC after training: 0.6279524807826695
User 124915 improves AUC. Keeping the model.
Training on augumented user 123854 19/50 current_auc = 0.6279524807826695
User 123854 AUC after training: 0.6277148846960168
User 123854 does not improve AUC. Reverting changes.
Training on augumented user 94969 20/50 current_auc = 0.6279524807826695
User 94969 AUC after training: 0.6282040531097135
User 94969 improves AUC. Keeping the model.
Training on augumented user 3306 21/50 current_auc = 0.6282040531097135
User 3306 AUC after training: 0.6280223619846261
User 3306 does not improve AUC. Reverting changes.
Training on augumented user 64338 22/50 current_auc = 0.6282040531097135
User 64338 AUC after training: 0.6278266946191475
User 64338 does not improve AUC. Reverting changes.
Training on augumented user 128753 23/50 current_auc = 0.6282040531097135
User 128753 AUC after training: 0.6275192173305382
User 128753 does not improve AUC. Reverting changes.
Training on augumented user 50978 24/50 current_auc = 0.6282040531097135
User 50978 AUC after training: 0.6278965758211041
User 50978 does not improve AUC. Reverting changes.
Training on augumented user 101501 25/50 current_auc = 0.6282040531097135
User 101501 AUC after training: 0.6272536687631027
User 101501 does not improve AUC. Reverting changes.
Training on augumented user 47800 26/50 current_auc = 0.6282040531097135
User 47800 AUC after training: 0.6276170510132775
User 47800 does not improve AUC. Reverting changes.
Training on augumented user 112249 27/50 current_auc = 0.6282040531097135
User 112249 AUC after training: 0.6274213836477988
User 112249 does not improve AUC. Reverting changes.
Training on augumented user 83131 28/50 current_auc = 0.6282040531097135
User 83131 AUC after training: 0.6279385045422782
User 83131 does not improve AUC. Reverting changes.
Training on augumented user 24893 29/50 current_auc = 0.6282040531097135
User 24893 AUC after training: 0.6264570230607966
User 24893 does not improve AUC. Reverting changes.
Training on augumented user 92227 30/50 current_auc = 0.6282040531097135
User 92227 AUC after training: 0.62764500349406
User 92227 does not improve AUC. Reverting changes.
Training on augumented user 102924 31/50 current_auc = 0.6282040531097135
User 102924 AUC after training: 0.6276030747728861
User 102924 does not improve AUC. Reverting changes.
Training on augumented user 75088 32/50 current_auc = 0.6282040531097135
User 75088 AUC after training: 0.6275611460517122
User 75088 does not improve AUC. Reverting changes.
Training on augumented user 126331 33/50 current_auc = 0.6282040531097135
User 126331 AUC after training: 0.6280782669461914
User 126331 does not improve AUC. Reverting changes.
Training on augumented user 52056 34/50 current_auc = 0.6282040531097135
User 52056 AUC after training: 0.6271837875611461
User 52056 does not improve AUC. Reverting changes.
Training on augumented user 73096 35/50 current_auc = 0.6282040531097135
User 73096 AUC after training: 0.6272117400419288
User 73096 does not improve AUC. Reverting changes.
Training on augumented user 133263 36/50 current_auc = 0.6282040531097135
User 133263 AUC after training: 0.6282320055904961
User 133263 improves AUC. Keeping the model.
Training on augumented user 13687 37/50 current_auc = 0.6282320055904961
User 13687 AUC after training: 0.6270440251572327
User 13687 does not improve AUC. Reverting changes.
Training on augumented user 84315 38/50 current_auc = 0.6282320055904961
User 84315 AUC after training: 0.628343815513627
User 84315 improves AUC. Keeping the model.
Training on augumented user 48287 39/50 current_auc = 0.628343815513627
User 48287 AUC after training: 0.6281341719077568
User 48287 does not improve AUC. Reverting changes.
Training on augumented user 134229 40/50 current_auc = 0.628343815513627
User 134229 AUC after training: 0.6274912648497555
User 134229 does not improve AUC. Reverting changes.
Training on augumented user 33613 41/50 current_auc = 0.628343815513627
User 33613 AUC after training: 0.6280782669461915
User 33613 does not improve AUC. Reverting changes.
Training on augumented user 122579 42/50 current_auc = 0.628343815513627
User 122579 AUC after training: 0.6270580013976242
User 122579 does not improve AUC. Reverting changes.
Training on augumented user 74142 43/50 current_auc = 0.628343815513627
User 74142 AUC after training: 0.6281341719077568
User 74142 does not improve AUC. Reverting changes.
Training on augumented user 37307 44/50 current_auc = 0.628343815513627
User 37307 AUC after training: 0.6282180293501048
User 37307 does not improve AUC. Reverting changes.
Training on augumented user 42916 45/50 current_auc = 0.628343815513627
User 42916 AUC after training: 0.6284696016771488
User 42916 improves AUC. Keeping the model.
Training on augumented user 125308 46/50 current_auc = 0.6284696016771488
User 125308 AUC after training: 0.6281900768693222
User 125308 does not improve AUC. Reverting changes.
Training on augumented user 13861 47/50 current_auc = 0.6284696016771488
User 13861 AUC after training: 0.6283857442348009
User 13861 does not improve AUC. Reverting changes.
Training on augumented user 61921 48/50 current_auc = 0.6284696016771488
User 61921 AUC after training: 0.6282879105520615
User 61921 does not improve AUC. Reverting changes.
Training on augumented user 111741 49/50 current_auc = 0.6284696016771488
User 111741 AUC after training: 0.6280922431865829
User 111741 does not improve AUC. Reverting changes.
[2024-12-02 18:53:07.935114] start test user 113081 140/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:53:08.562349] start test user 113081 140/567 recall augumented users by random, augumented_users = [68713, 128371, 101571, 48527, 55826, 75038, 10965, 106643, 17712, 68863, 109248, 93312, 129123, 131913, 13410, 81617, 735, 130984, 113691, 20297, 5748, 68074, 17117, 59401, 119360, 62408, 70608, 38586, 36784, 47169, 64857, 125426, 90210, 13334, 90765, 91503, 18102, 105142, 62051, 4088, 11961, 23712, 16162, 86892, 53364, 110129, 55756, 45033, 101643, 128208]
[2024-12-02 18:53:08.581046] user = 113081 Cloud 140/567
[2024-12-02 18:53:08.643411] user = 113081 Local 140/567
[2024-12-02 18:53:08.864961] user = 113081 Local+ 140/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:53:11.302083] user = 113081 MPDA- 140/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6623842867315453
Training on augumented user 68713 0/50 current_auc = 0.6623842867315453
User 68713 AUC after training: 0.6615535248041775
User 68713 does not improve AUC. Reverting changes.
Training on augumented user 128371 1/50 current_auc = 0.6623842867315453
User 128371 AUC after training: 0.6623694516971279
User 128371 does not improve AUC. Reverting changes.
Training on augumented user 101571 2/50 current_auc = 0.6623842867315453
User 101571 AUC after training: 0.6624584619036317
User 101571 improves AUC. Keeping the model.
Training on augumented user 48527 3/50 current_auc = 0.6624584619036317
User 48527 AUC after training: 0.6622581889389985
User 48527 does not improve AUC. Reverting changes.
Training on augumented user 55826 4/50 current_auc = 0.6624584619036317
User 55826 AUC after training: 0.6625623071445526
User 55826 improves AUC. Keeping the model.
Training on augumented user 75038 5/50 current_auc = 0.6625623071445526
User 75038 AUC after training: 0.6624139568003797
User 75038 does not improve AUC. Reverting changes.
Training on augumented user 10965 6/50 current_auc = 0.6625623071445526
User 10965 AUC after training: 0.6624139568003797
User 10965 does not improve AUC. Reverting changes.
Training on augumented user 106643 7/50 current_auc = 0.6625623071445526
User 106643 AUC after training: 0.6619837408022788
User 106643 does not improve AUC. Reverting changes.
Training on augumented user 17712 8/50 current_auc = 0.6625623071445526
User 17712 AUC after training: 0.6623991217659624
User 17712 does not improve AUC. Reverting changes.
Training on augumented user 68863 9/50 current_auc = 0.6625623071445526
User 68863 AUC after training: 0.6625029670068835
User 68863 does not improve AUC. Reverting changes.
Training on augumented user 109248 10/50 current_auc = 0.6625623071445526
User 109248 AUC after training: 0.6622211013529552
User 109248 does not improve AUC. Reverting changes.
Training on augumented user 93312 11/50 current_auc = 0.6625623071445526
User 93312 AUC after training: 0.662488131972466
User 93312 does not improve AUC. Reverting changes.
Training on augumented user 129123 12/50 current_auc = 0.6625623071445526
User 129123 AUC after training: 0.6623397816282933
User 129123 does not improve AUC. Reverting changes.
Training on augumented user 131913 13/50 current_auc = 0.6625623071445526
User 131913 AUC after training: 0.6620727510087823
User 131913 does not improve AUC. Reverting changes.
Training on augumented user 13410 14/50 current_auc = 0.6625623071445526
User 13410 AUC after training: 0.6624139568003798
User 13410 does not improve AUC. Reverting changes.
Training on augumented user 81617 15/50 current_auc = 0.6625623071445526
User 81617 AUC after training: 0.6624139568003797
User 81617 does not improve AUC. Reverting changes.
Training on augumented user 735 16/50 current_auc = 0.6625623071445526
User 735 AUC after training: 0.6623249465938761
User 735 does not improve AUC. Reverting changes.
Training on augumented user 130984 17/50 current_auc = 0.6625623071445526
User 130984 AUC after training: 0.6623842867315453
User 130984 does not improve AUC. Reverting changes.
Training on augumented user 113691 18/50 current_auc = 0.6625623071445526
User 113691 AUC after training: 0.6624436268692142
User 113691 does not improve AUC. Reverting changes.
Training on augumented user 20297 19/50 current_auc = 0.6625623071445526
User 20297 AUC after training: 0.6626216472822216
User 20297 improves AUC. Keeping the model.
Training on augumented user 5748 20/50 current_auc = 0.6626216472822216
User 5748 AUC after training: 0.6624732969380489
User 5748 does not improve AUC. Reverting changes.
Training on augumented user 68074 21/50 current_auc = 0.6626216472822216
User 68074 AUC after training: 0.6624139568003797
User 68074 does not improve AUC. Reverting changes.
Training on augumented user 17117 22/50 current_auc = 0.6626216472822216
User 17117 AUC after training: 0.6624732969380488
User 17117 does not improve AUC. Reverting changes.
Training on augumented user 59401 23/50 current_auc = 0.6626216472822216
User 59401 AUC after training: 0.6625623071445526
User 59401 does not improve AUC. Reverting changes.
Training on augumented user 119360 24/50 current_auc = 0.6626216472822216
User 119360 AUC after training: 0.6620430809399477
User 119360 does not improve AUC. Reverting changes.
Training on augumented user 62408 25/50 current_auc = 0.6626216472822216
User 62408 AUC after training: 0.6618057203892713
User 62408 does not improve AUC. Reverting changes.
Training on augumented user 70608 26/50 current_auc = 0.6626216472822216
User 70608 AUC after training: 0.6622285188701638
User 70608 does not improve AUC. Reverting changes.
Training on augumented user 38586 27/50 current_auc = 0.6626216472822216
User 38586 AUC after training: 0.6626216472822217
User 38586 improves AUC. Keeping the model.
Training on augumented user 36784 28/50 current_auc = 0.6626216472822217
User 36784 AUC after training: 0.6624436268692143
User 36784 does not improve AUC. Reverting changes.
Training on augumented user 47169 29/50 current_auc = 0.6626216472822217
User 47169 AUC after training: 0.6622952765250416
User 47169 does not improve AUC. Reverting changes.
Training on augumented user 64857 30/50 current_auc = 0.6626216472822217
User 64857 AUC after training: 0.6621765962497033
User 64857 does not improve AUC. Reverting changes.
Training on augumented user 125426 31/50 current_auc = 0.6626216472822217
User 125426 AUC after training: 0.6623546166627106
User 125426 does not improve AUC. Reverting changes.
Training on augumented user 90210 32/50 current_auc = 0.6626216472822217
User 90210 AUC after training: 0.6625771421789698
User 90210 does not improve AUC. Reverting changes.
Training on augumented user 13334 33/50 current_auc = 0.6626216472822217
User 13334 AUC after training: 0.66274032755756
User 13334 improves AUC. Keeping the model.
Training on augumented user 90765 34/50 current_auc = 0.66274032755756
User 90765 AUC after training: 0.6627699976263944
User 90765 improves AUC. Keeping the model.
Training on augumented user 91503 35/50 current_auc = 0.6627699976263944
User 91503 AUC after training: 0.66274032755756
User 91503 does not improve AUC. Reverting changes.
Training on augumented user 18102 36/50 current_auc = 0.6627699976263944
User 18102 AUC after training: 0.6622507714217898
User 18102 does not improve AUC. Reverting changes.
Training on augumented user 105142 37/50 current_auc = 0.6627699976263944
User 105142 AUC after training: 0.6623101115594587
User 105142 does not improve AUC. Reverting changes.
Training on augumented user 62051 38/50 current_auc = 0.6627699976263944
User 62051 AUC after training: 0.6620653334915737
User 62051 does not improve AUC. Reverting changes.
Training on augumented user 4088 39/50 current_auc = 0.6627699976263944
User 4088 AUC after training: 0.6627106574887254
User 4088 does not improve AUC. Reverting changes.
Training on augumented user 11961 40/50 current_auc = 0.6627699976263944
User 11961 AUC after training: 0.6627551625919772
User 11961 does not improve AUC. Reverting changes.
Training on augumented user 23712 41/50 current_auc = 0.6627699976263944
User 23712 AUC after training: 0.6624139568003797
User 23712 does not improve AUC. Reverting changes.
Training on augumented user 16162 42/50 current_auc = 0.6627699976263944
User 16162 AUC after training: 0.6621320911464516
User 16162 does not improve AUC. Reverting changes.
Training on augumented user 86892 43/50 current_auc = 0.6627699976263944
User 86892 AUC after training: 0.6623991217659625
User 86892 does not improve AUC. Reverting changes.
Training on augumented user 53364 44/50 current_auc = 0.6627699976263944
User 53364 AUC after training: 0.6619689057678614
User 53364 does not improve AUC. Reverting changes.
Training on augumented user 110129 45/50 current_auc = 0.6627699976263944
User 110129 AUC after training: 0.66306669831474
User 110129 improves AUC. Keeping the model.
Training on augumented user 55756 46/50 current_auc = 0.66306669831474
User 55756 AUC after training: 0.6629925231426537
User 55756 does not improve AUC. Reverting changes.
Training on augumented user 45033 47/50 current_auc = 0.66306669831474
User 45033 AUC after training: 0.663007358177071
User 45033 does not improve AUC. Reverting changes.
Training on augumented user 101643 48/50 current_auc = 0.66306669831474
User 101643 AUC after training: 0.66290351293615
User 101643 does not improve AUC. Reverting changes.
Training on augumented user 128208 49/50 current_auc = 0.66306669831474
User 128208 AUC after training: 0.6630518632803228
User 128208 does not improve AUC. Reverting changes.
[2024-12-02 18:53:44.242800] start test user 113127 141/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:53:45.154030] start test user 113127 141/567 recall augumented users by random, augumented_users = [92280, 44486, 45424, 12507, 34600, 113644, 105632, 97886, 80520, 71374, 94764, 92376, 10566, 57846, 52651, 131371, 18454, 133563, 111810, 46061, 70893, 18309, 81334, 106548, 134381, 105202, 66178, 71681, 137460, 89863, 54548, 97126, 3669, 20674, 11420, 38025, 118693, 83432, 16081, 96108, 81463, 95865, 65861, 71278, 131108, 129991, 10243, 22108, 137559, 45405]
[2024-12-02 18:53:45.171943] user = 113127 Cloud 141/567
[2024-12-02 18:53:45.183901] user = 113127 Local 141/567
[2024-12-02 18:53:45.308511] user = 113127 Local+ 141/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:53:47.817153] user = 113127 MPDA- 141/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7142857142857143
Training on augumented user 92280 0/50 current_auc = 0.7142857142857143
User 92280 AUC after training: 0.7142857142857143
User 92280 does not improve AUC. Reverting changes.
Training on augumented user 44486 1/50 current_auc = 0.7142857142857143
User 44486 AUC after training: 0.7142857142857143
User 44486 does not improve AUC. Reverting changes.
Training on augumented user 45424 2/50 current_auc = 0.7142857142857143
User 45424 AUC after training: 0.7142857142857143
User 45424 does not improve AUC. Reverting changes.
Training on augumented user 12507 3/50 current_auc = 0.7142857142857143
User 12507 AUC after training: 0.7142857142857143
User 12507 does not improve AUC. Reverting changes.
Training on augumented user 34600 4/50 current_auc = 0.7142857142857143
User 34600 AUC after training: 0.7142857142857143
User 34600 does not improve AUC. Reverting changes.
Training on augumented user 113644 5/50 current_auc = 0.7142857142857143
User 113644 AUC after training: 0.7142857142857143
User 113644 does not improve AUC. Reverting changes.
Training on augumented user 105632 6/50 current_auc = 0.7142857142857143
User 105632 AUC after training: 0.7142857142857143
User 105632 does not improve AUC. Reverting changes.
Training on augumented user 97886 7/50 current_auc = 0.7142857142857143
User 97886 AUC after training: 0.7142857142857143
User 97886 does not improve AUC. Reverting changes.
Training on augumented user 80520 8/50 current_auc = 0.7142857142857143
User 80520 AUC after training: 0.7142857142857143
User 80520 does not improve AUC. Reverting changes.
Training on augumented user 71374 9/50 current_auc = 0.7142857142857143
User 71374 AUC after training: 0.7142857142857143
User 71374 does not improve AUC. Reverting changes.
Training on augumented user 94764 10/50 current_auc = 0.7142857142857143
User 94764 AUC after training: 0.7142857142857143
User 94764 does not improve AUC. Reverting changes.
Training on augumented user 92376 11/50 current_auc = 0.7142857142857143
User 92376 AUC after training: 0.7142857142857143
User 92376 does not improve AUC. Reverting changes.
Training on augumented user 10566 12/50 current_auc = 0.7142857142857143
User 10566 AUC after training: 0.7142857142857143
User 10566 does not improve AUC. Reverting changes.
Training on augumented user 57846 13/50 current_auc = 0.7142857142857143
User 57846 AUC after training: 0.7142857142857143
User 57846 does not improve AUC. Reverting changes.
Training on augumented user 52651 14/50 current_auc = 0.7142857142857143
User 52651 AUC after training: 0.7142857142857143
User 52651 does not improve AUC. Reverting changes.
Training on augumented user 131371 15/50 current_auc = 0.7142857142857143
User 131371 AUC after training: 0.7142857142857143
User 131371 does not improve AUC. Reverting changes.
Training on augumented user 18454 16/50 current_auc = 0.7142857142857143
User 18454 AUC after training: 0.7142857142857143
User 18454 does not improve AUC. Reverting changes.
Training on augumented user 133563 17/50 current_auc = 0.7142857142857143
User 133563 AUC after training: 0.7142857142857143
User 133563 does not improve AUC. Reverting changes.
Training on augumented user 111810 18/50 current_auc = 0.7142857142857143
User 111810 AUC after training: 0.7142857142857143
User 111810 does not improve AUC. Reverting changes.
Training on augumented user 46061 19/50 current_auc = 0.7142857142857143
User 46061 AUC after training: 0.7142857142857143
User 46061 does not improve AUC. Reverting changes.
Training on augumented user 70893 20/50 current_auc = 0.7142857142857143
User 70893 AUC after training: 0.7142857142857143
User 70893 does not improve AUC. Reverting changes.
Training on augumented user 18309 21/50 current_auc = 0.7142857142857143
User 18309 AUC after training: 0.7142857142857143
User 18309 does not improve AUC. Reverting changes.
Training on augumented user 81334 22/50 current_auc = 0.7142857142857143
User 81334 AUC after training: 0.7142857142857143
User 81334 does not improve AUC. Reverting changes.
Training on augumented user 106548 23/50 current_auc = 0.7142857142857143
User 106548 AUC after training: 0.7142857142857143
User 106548 does not improve AUC. Reverting changes.
Training on augumented user 134381 24/50 current_auc = 0.7142857142857143
User 134381 AUC after training: 0.7142857142857143
User 134381 does not improve AUC. Reverting changes.
Training on augumented user 105202 25/50 current_auc = 0.7142857142857143
User 105202 AUC after training: 0.7142857142857143
User 105202 does not improve AUC. Reverting changes.
Training on augumented user 66178 26/50 current_auc = 0.7142857142857143
User 66178 AUC after training: 0.7142857142857143
User 66178 does not improve AUC. Reverting changes.
Training on augumented user 71681 27/50 current_auc = 0.7142857142857143
User 71681 AUC after training: 0.7142857142857143
User 71681 does not improve AUC. Reverting changes.
Training on augumented user 137460 28/50 current_auc = 0.7142857142857143
User 137460 AUC after training: 0.7142857142857143
User 137460 does not improve AUC. Reverting changes.
Training on augumented user 89863 29/50 current_auc = 0.7142857142857143
User 89863 AUC after training: 0.7142857142857143
User 89863 does not improve AUC. Reverting changes.
Training on augumented user 54548 30/50 current_auc = 0.7142857142857143
User 54548 AUC after training: 0.7142857142857143
User 54548 does not improve AUC. Reverting changes.
Training on augumented user 97126 31/50 current_auc = 0.7142857142857143
User 97126 AUC after training: 0.7142857142857143
User 97126 does not improve AUC. Reverting changes.
Training on augumented user 3669 32/50 current_auc = 0.7142857142857143
User 3669 AUC after training: 0.7142857142857143
User 3669 does not improve AUC. Reverting changes.
Training on augumented user 20674 33/50 current_auc = 0.7142857142857143
User 20674 AUC after training: 0.7142857142857143
User 20674 does not improve AUC. Reverting changes.
Training on augumented user 11420 34/50 current_auc = 0.7142857142857143
User 11420 AUC after training: 0.7142857142857143
User 11420 does not improve AUC. Reverting changes.
Training on augumented user 38025 35/50 current_auc = 0.7142857142857143
User 38025 AUC after training: 0.7142857142857143
User 38025 does not improve AUC. Reverting changes.
Training on augumented user 118693 36/50 current_auc = 0.7142857142857143
User 118693 AUC after training: 0.7142857142857143
User 118693 does not improve AUC. Reverting changes.
Training on augumented user 83432 37/50 current_auc = 0.7142857142857143
User 83432 AUC after training: 0.7142857142857143
User 83432 does not improve AUC. Reverting changes.
Training on augumented user 16081 38/50 current_auc = 0.7142857142857143
User 16081 AUC after training: 0.7142857142857143
User 16081 does not improve AUC. Reverting changes.
Training on augumented user 96108 39/50 current_auc = 0.7142857142857143
User 96108 AUC after training: 0.7142857142857143
User 96108 does not improve AUC. Reverting changes.
Training on augumented user 81463 40/50 current_auc = 0.7142857142857143
User 81463 AUC after training: 0.7142857142857143
User 81463 does not improve AUC. Reverting changes.
Training on augumented user 95865 41/50 current_auc = 0.7142857142857143
User 95865 AUC after training: 0.7142857142857143
User 95865 does not improve AUC. Reverting changes.
Training on augumented user 65861 42/50 current_auc = 0.7142857142857143
User 65861 AUC after training: 0.7142857142857143
User 65861 does not improve AUC. Reverting changes.
Training on augumented user 71278 43/50 current_auc = 0.7142857142857143
User 71278 AUC after training: 0.7142857142857143
User 71278 does not improve AUC. Reverting changes.
Training on augumented user 131108 44/50 current_auc = 0.7142857142857143
User 131108 AUC after training: 0.7142857142857143
User 131108 does not improve AUC. Reverting changes.
Training on augumented user 129991 45/50 current_auc = 0.7142857142857143
User 129991 AUC after training: 0.7142857142857143
User 129991 does not improve AUC. Reverting changes.
Training on augumented user 10243 46/50 current_auc = 0.7142857142857143
User 10243 AUC after training: 0.7142857142857143
User 10243 does not improve AUC. Reverting changes.
Training on augumented user 22108 47/50 current_auc = 0.7142857142857143
User 22108 AUC after training: 0.7142857142857143
User 22108 does not improve AUC. Reverting changes.
Training on augumented user 137559 48/50 current_auc = 0.7142857142857143
User 137559 AUC after training: 0.7142857142857143
User 137559 does not improve AUC. Reverting changes.
Training on augumented user 45405 49/50 current_auc = 0.7142857142857143
User 45405 AUC after training: 0.7142857142857143
User 45405 does not improve AUC. Reverting changes.
[2024-12-02 18:54:19.542360] start test user 113135 142/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:54:20.077483] start test user 113135 142/567 recall augumented users by random, augumented_users = [28854, 19781, 63230, 54499, 75167, 103453, 33896, 29064, 354, 9307, 118032, 62967, 81233, 126683, 109333, 78530, 5394, 89087, 86271, 102460, 88193, 38214, 134951, 103245, 10864, 92887, 66264, 103478, 7940, 24688, 102907, 946, 57236, 53190, 66499, 93011, 38785, 109751, 29750, 97884, 29403, 123221, 15714, 17846, 28258, 4288, 138458, 63537, 31694, 84525]
[2024-12-02 18:54:20.093852] user = 113135 Cloud 142/567
[2024-12-02 18:54:20.110736] user = 113135 Local 142/567
[2024-12-02 18:54:20.223888] user = 113135 Local+ 142/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:54:23.182958] user = 113135 MPDA- 142/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7228571428571429
Training on augumented user 28854 0/50 current_auc = 0.7228571428571429
User 28854 AUC after training: 0.7221428571428571
User 28854 does not improve AUC. Reverting changes.
Training on augumented user 19781 1/50 current_auc = 0.7228571428571429
User 19781 AUC after training: 0.7228571428571429
User 19781 does not improve AUC. Reverting changes.
Training on augumented user 63230 2/50 current_auc = 0.7228571428571429
User 63230 AUC after training: 0.7228571428571429
User 63230 does not improve AUC. Reverting changes.
Training on augumented user 54499 3/50 current_auc = 0.7228571428571429
User 54499 AUC after training: 0.7178571428571429
User 54499 does not improve AUC. Reverting changes.
Training on augumented user 75167 4/50 current_auc = 0.7228571428571429
User 75167 AUC after training: 0.7221428571428571
User 75167 does not improve AUC. Reverting changes.
Training on augumented user 103453 5/50 current_auc = 0.7228571428571429
User 103453 AUC after training: 0.7235714285714285
User 103453 improves AUC. Keeping the model.
Training on augumented user 33896 6/50 current_auc = 0.7235714285714285
User 33896 AUC after training: 0.7235714285714285
User 33896 does not improve AUC. Reverting changes.
Training on augumented user 29064 7/50 current_auc = 0.7235714285714285
User 29064 AUC after training: 0.7235714285714285
User 29064 does not improve AUC. Reverting changes.
Training on augumented user 354 8/50 current_auc = 0.7235714285714285
User 354 AUC after training: 0.7228571428571429
User 354 does not improve AUC. Reverting changes.
Training on augumented user 9307 9/50 current_auc = 0.7235714285714285
User 9307 AUC after training: 0.7228571428571429
User 9307 does not improve AUC. Reverting changes.
Training on augumented user 118032 10/50 current_auc = 0.7235714285714285
User 118032 AUC after training: 0.7257142857142856
User 118032 improves AUC. Keeping the model.
Training on augumented user 62967 11/50 current_auc = 0.7257142857142856
User 62967 AUC after training: 0.7257142857142858
User 62967 improves AUC. Keeping the model.
Training on augumented user 81233 12/50 current_auc = 0.7257142857142858
User 81233 AUC after training: 0.7264285714285714
User 81233 improves AUC. Keeping the model.
Training on augumented user 126683 13/50 current_auc = 0.7264285714285714
User 126683 AUC after training: 0.7264285714285714
User 126683 does not improve AUC. Reverting changes.
Training on augumented user 109333 14/50 current_auc = 0.7264285714285714
User 109333 AUC after training: 0.7235714285714285
User 109333 does not improve AUC. Reverting changes.
Training on augumented user 78530 15/50 current_auc = 0.7264285714285714
User 78530 AUC after training: 0.7228571428571429
User 78530 does not improve AUC. Reverting changes.
Training on augumented user 5394 16/50 current_auc = 0.7264285714285714
User 5394 AUC after training: 0.7271428571428571
User 5394 improves AUC. Keeping the model.
Training on augumented user 89087 17/50 current_auc = 0.7271428571428571
User 89087 AUC after training: 0.7271428571428571
User 89087 does not improve AUC. Reverting changes.
Training on augumented user 86271 18/50 current_auc = 0.7271428571428571
User 86271 AUC after training: 0.7271428571428571
User 86271 does not improve AUC. Reverting changes.
Training on augumented user 102460 19/50 current_auc = 0.7271428571428571
User 102460 AUC after training: 0.7278571428571429
User 102460 improves AUC. Keeping the model.
Training on augumented user 88193 20/50 current_auc = 0.7278571428571429
User 88193 AUC after training: 0.7292857142857143
User 88193 improves AUC. Keeping the model.
Training on augumented user 38214 21/50 current_auc = 0.7292857142857143
User 38214 AUC after training: 0.7228571428571429
User 38214 does not improve AUC. Reverting changes.
Training on augumented user 134951 22/50 current_auc = 0.7292857142857143
User 134951 AUC after training: 0.7271428571428571
User 134951 does not improve AUC. Reverting changes.
Training on augumented user 103245 23/50 current_auc = 0.7292857142857143
User 103245 AUC after training: 0.7278571428571429
User 103245 does not improve AUC. Reverting changes.
Training on augumented user 10864 24/50 current_auc = 0.7292857142857143
User 10864 AUC after training: 0.7285714285714285
User 10864 does not improve AUC. Reverting changes.
Training on augumented user 92887 25/50 current_auc = 0.7292857142857143
User 92887 AUC after training: 0.7271428571428572
User 92887 does not improve AUC. Reverting changes.
Training on augumented user 66264 26/50 current_auc = 0.7292857142857143
User 66264 AUC after training: 0.7278571428571429
User 66264 does not improve AUC. Reverting changes.
Training on augumented user 103478 27/50 current_auc = 0.7292857142857143
User 103478 AUC after training: 0.7292857142857143
User 103478 does not improve AUC. Reverting changes.
Training on augumented user 7940 28/50 current_auc = 0.7292857142857143
User 7940 AUC after training: 0.7285714285714286
User 7940 does not improve AUC. Reverting changes.
Training on augumented user 24688 29/50 current_auc = 0.7292857142857143
User 24688 AUC after training: 0.72
User 24688 does not improve AUC. Reverting changes.
Training on augumented user 102907 30/50 current_auc = 0.7292857142857143
User 102907 AUC after training: 0.725
User 102907 does not improve AUC. Reverting changes.
Training on augumented user 946 31/50 current_auc = 0.7292857142857143
User 946 AUC after training: 0.7271428571428572
User 946 does not improve AUC. Reverting changes.
Training on augumented user 57236 32/50 current_auc = 0.7292857142857143
User 57236 AUC after training: 0.7285714285714285
User 57236 does not improve AUC. Reverting changes.
Training on augumented user 53190 33/50 current_auc = 0.7292857142857143
User 53190 AUC after training: 0.7314285714285714
User 53190 improves AUC. Keeping the model.
Training on augumented user 66499 34/50 current_auc = 0.7314285714285714
User 66499 AUC after training: 0.7357142857142858
User 66499 improves AUC. Keeping the model.
Training on augumented user 93011 35/50 current_auc = 0.7357142857142858
User 93011 AUC after training: 0.7364285714285714
User 93011 improves AUC. Keeping the model.
Training on augumented user 38785 36/50 current_auc = 0.7364285714285714
User 38785 AUC after training: 0.7371428571428571
User 38785 improves AUC. Keeping the model.
Training on augumented user 109751 37/50 current_auc = 0.7371428571428571
User 109751 AUC after training: 0.7407142857142857
User 109751 improves AUC. Keeping the model.
Training on augumented user 29750 38/50 current_auc = 0.7407142857142857
User 29750 AUC after training: 0.74
User 29750 does not improve AUC. Reverting changes.
Training on augumented user 97884 39/50 current_auc = 0.7407142857142857
User 97884 AUC after training: 0.7407142857142857
User 97884 does not improve AUC. Reverting changes.
Training on augumented user 29403 40/50 current_auc = 0.7407142857142857
User 29403 AUC after training: 0.7414285714285714
User 29403 improves AUC. Keeping the model.
Training on augumented user 123221 41/50 current_auc = 0.7414285714285714
User 123221 AUC after training: 0.7421428571428572
User 123221 improves AUC. Keeping the model.
Training on augumented user 15714 42/50 current_auc = 0.7421428571428572
User 15714 AUC after training: 0.7392857142857143
User 15714 does not improve AUC. Reverting changes.
Training on augumented user 17846 43/50 current_auc = 0.7421428571428572
User 17846 AUC after training: 0.7421428571428572
User 17846 does not improve AUC. Reverting changes.
Training on augumented user 28258 44/50 current_auc = 0.7421428571428572
User 28258 AUC after training: 0.7407142857142857
User 28258 does not improve AUC. Reverting changes.
Training on augumented user 4288 45/50 current_auc = 0.7421428571428572
User 4288 AUC after training: 0.7421428571428572
User 4288 does not improve AUC. Reverting changes.
Training on augumented user 138458 46/50 current_auc = 0.7421428571428572
User 138458 AUC after training: 0.7414285714285714
User 138458 does not improve AUC. Reverting changes.
Training on augumented user 63537 47/50 current_auc = 0.7421428571428572
User 63537 AUC after training: 0.7414285714285714
User 63537 does not improve AUC. Reverting changes.
Training on augumented user 31694 48/50 current_auc = 0.7421428571428572
User 31694 AUC after training: 0.7414285714285714
User 31694 does not improve AUC. Reverting changes.
Training on augumented user 84525 49/50 current_auc = 0.7421428571428572
User 84525 AUC after training: 0.7414285714285714
User 84525 does not improve AUC. Reverting changes.
[2024-12-02 18:54:54.401447] start test user 113181 143/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:54:55.198001] start test user 113181 143/567 recall augumented users by random, augumented_users = [70319, 5509, 66734, 42578, 94242, 123754, 84906, 71856, 38074, 22216, 74199, 54506, 36473, 37227, 9699, 23546, 71307, 21850, 77442, 20982, 122896, 37897, 39416, 56826, 45218, 129026, 86395, 119477, 54521, 119799, 42508, 55476, 55111, 123746, 125682, 21987, 54166, 10561, 100353, 116959, 30360, 68320, 55935, 4169, 115196, 31496, 38345, 91847, 38989, 83391]
[2024-12-02 18:54:55.236341] user = 113181 Cloud 143/567
[2024-12-02 18:54:55.262884] user = 113181 Local 143/567
[2024-12-02 18:54:55.629020] user = 113181 Local+ 143/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:54:58.133923] user = 113181 MPDA- 143/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.630293501048218
Training on augumented user 70319 0/50 current_auc = 0.630293501048218
User 70319 AUC after training: 0.630293501048218
User 70319 does not improve AUC. Reverting changes.
Training on augumented user 5509 1/50 current_auc = 0.630293501048218
User 5509 AUC after training: 0.630607966457023
User 5509 improves AUC. Keeping the model.
Training on augumented user 66734 2/50 current_auc = 0.630607966457023
User 66734 AUC after training: 0.6298218029350106
User 66734 does not improve AUC. Reverting changes.
Training on augumented user 42578 3/50 current_auc = 0.630607966457023
User 42578 AUC after training: 0.630293501048218
User 42578 does not improve AUC. Reverting changes.
Training on augumented user 94242 4/50 current_auc = 0.630607966457023
User 94242 AUC after training: 0.6301886792452831
User 94242 does not improve AUC. Reverting changes.
Training on augumented user 123754 5/50 current_auc = 0.630607966457023
User 123754 AUC after training: 0.6301362683438155
User 123754 does not improve AUC. Reverting changes.
Training on augumented user 84906 6/50 current_auc = 0.630607966457023
User 84906 AUC after training: 0.6300314465408805
User 84906 does not improve AUC. Reverting changes.
Training on augumented user 71856 7/50 current_auc = 0.630607966457023
User 71856 AUC after training: 0.6298218029350104
User 71856 does not improve AUC. Reverting changes.
Training on augumented user 38074 8/50 current_auc = 0.630607966457023
User 38074 AUC after training: 0.629979035639413
User 38074 does not improve AUC. Reverting changes.
Training on augumented user 22216 9/50 current_auc = 0.630607966457023
User 22216 AUC after training: 0.6306079664570231
User 22216 improves AUC. Keeping the model.
Training on augumented user 74199 10/50 current_auc = 0.6306079664570231
User 74199 AUC after training: 0.6302410901467506
User 74199 does not improve AUC. Reverting changes.
Training on augumented user 54506 11/50 current_auc = 0.6306079664570231
User 54506 AUC after training: 0.6307651991614256
User 54506 improves AUC. Keeping the model.
Training on augumented user 36473 12/50 current_auc = 0.6307651991614256
User 36473 AUC after training: 0.6298742138364779
User 36473 does not improve AUC. Reverting changes.
Training on augumented user 37227 13/50 current_auc = 0.6307651991614256
User 37227 AUC after training: 0.6310796645702306
User 37227 improves AUC. Keeping the model.
Training on augumented user 9699 14/50 current_auc = 0.6310796645702306
User 9699 AUC after training: 0.6304507337526206
User 9699 does not improve AUC. Reverting changes.
Training on augumented user 23546 15/50 current_auc = 0.6310796645702306
User 23546 AUC after training: 0.6310796645702306
User 23546 does not improve AUC. Reverting changes.
Training on augumented user 71307 16/50 current_auc = 0.6310796645702306
User 71307 AUC after training: 0.629979035639413
User 71307 does not improve AUC. Reverting changes.
Training on augumented user 21850 17/50 current_auc = 0.6310796645702306
User 21850 AUC after training: 0.630293501048218
User 21850 does not improve AUC. Reverting changes.
Training on augumented user 77442 18/50 current_auc = 0.6310796645702306
User 77442 AUC after training: 0.6308700209643605
User 77442 does not improve AUC. Reverting changes.
Training on augumented user 20982 19/50 current_auc = 0.6310796645702306
User 20982 AUC after training: 0.6303983228511532
User 20982 does not improve AUC. Reverting changes.
Training on augumented user 122896 20/50 current_auc = 0.6310796645702306
User 122896 AUC after training: 0.630817610062893
User 122896 does not improve AUC. Reverting changes.
Training on augumented user 37897 21/50 current_auc = 0.6310796645702306
User 37897 AUC after training: 0.6296121593291404
User 37897 does not improve AUC. Reverting changes.
Training on augumented user 39416 22/50 current_auc = 0.6310796645702306
User 39416 AUC after training: 0.629769392033543
User 39416 does not improve AUC. Reverting changes.
Training on augumented user 56826 23/50 current_auc = 0.6310796645702306
User 56826 AUC after training: 0.6302410901467506
User 56826 does not improve AUC. Reverting changes.
Training on augumented user 45218 24/50 current_auc = 0.6310796645702306
User 45218 AUC after training: 0.630293501048218
User 45218 does not improve AUC. Reverting changes.
Training on augumented user 129026 25/50 current_auc = 0.6310796645702306
User 129026 AUC after training: 0.6305555555555555
User 129026 does not improve AUC. Reverting changes.
Training on augumented user 86395 26/50 current_auc = 0.6310796645702306
User 86395 AUC after training: 0.630503144654088
User 86395 does not improve AUC. Reverting changes.
Training on augumented user 119477 27/50 current_auc = 0.6310796645702306
User 119477 AUC after training: 0.6308176100628932
User 119477 does not improve AUC. Reverting changes.
Training on augumented user 54521 28/50 current_auc = 0.6310796645702306
User 54521 AUC after training: 0.6306079664570231
User 54521 does not improve AUC. Reverting changes.
Training on augumented user 119799 29/50 current_auc = 0.6310796645702306
User 119799 AUC after training: 0.6299790356394129
User 119799 does not improve AUC. Reverting changes.
Training on augumented user 42508 30/50 current_auc = 0.6310796645702306
User 42508 AUC after training: 0.6302410901467506
User 42508 does not improve AUC. Reverting changes.
Training on augumented user 55476 31/50 current_auc = 0.6310796645702306
User 55476 AUC after training: 0.6310796645702306
User 55476 does not improve AUC. Reverting changes.
Training on augumented user 55111 32/50 current_auc = 0.6310796645702306
User 55111 AUC after training: 0.630398322851153
User 55111 does not improve AUC. Reverting changes.
Training on augumented user 123746 33/50 current_auc = 0.6310796645702306
User 123746 AUC after training: 0.6304507337526205
User 123746 does not improve AUC. Reverting changes.
Training on augumented user 125682 34/50 current_auc = 0.6310796645702306
User 125682 AUC after training: 0.630607966457023
User 125682 does not improve AUC. Reverting changes.
Training on augumented user 21987 35/50 current_auc = 0.6310796645702306
User 21987 AUC after training: 0.6307127882599581
User 21987 does not improve AUC. Reverting changes.
Training on augumented user 54166 36/50 current_auc = 0.6310796645702306
User 54166 AUC after training: 0.629769392033543
User 54166 does not improve AUC. Reverting changes.
Training on augumented user 10561 37/50 current_auc = 0.6310796645702306
User 10561 AUC after training: 0.630712788259958
User 10561 does not improve AUC. Reverting changes.
Training on augumented user 100353 38/50 current_auc = 0.6310796645702306
User 100353 AUC after training: 0.6308700209643605
User 100353 does not improve AUC. Reverting changes.
Training on augumented user 116959 39/50 current_auc = 0.6310796645702306
User 116959 AUC after training: 0.6301886792452831
User 116959 does not improve AUC. Reverting changes.
Training on augumented user 30360 40/50 current_auc = 0.6310796645702306
User 30360 AUC after training: 0.629979035639413
User 30360 does not improve AUC. Reverting changes.
Training on augumented user 68320 41/50 current_auc = 0.6310796645702306
User 68320 AUC after training: 0.6306079664570231
User 68320 does not improve AUC. Reverting changes.
Training on augumented user 55935 42/50 current_auc = 0.6310796645702306
User 55935 AUC after training: 0.630607966457023
User 55935 does not improve AUC. Reverting changes.
Training on augumented user 4169 43/50 current_auc = 0.6310796645702306
User 4169 AUC after training: 0.629769392033543
User 4169 does not improve AUC. Reverting changes.
Training on augumented user 115196 44/50 current_auc = 0.6310796645702306
User 115196 AUC after training: 0.631132075471698
User 115196 improves AUC. Keeping the model.
Training on augumented user 31496 45/50 current_auc = 0.631132075471698
User 31496 AUC after training: 0.630607966457023
User 31496 does not improve AUC. Reverting changes.
Training on augumented user 38345 46/50 current_auc = 0.631132075471698
User 38345 AUC after training: 0.6310272536687631
User 38345 does not improve AUC. Reverting changes.
Training on augumented user 91847 47/50 current_auc = 0.631132075471698
User 91847 AUC after training: 0.6307127882599581
User 91847 does not improve AUC. Reverting changes.
Training on augumented user 38989 48/50 current_auc = 0.631132075471698
User 38989 AUC after training: 0.6311844863731656
User 38989 improves AUC. Keeping the model.
Training on augumented user 83391 49/50 current_auc = 0.6311844863731656
User 83391 AUC after training: 0.630817610062893
User 83391 does not improve AUC. Reverting changes.
[2024-12-02 18:55:25.928144] start test user 113209 144/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:55:26.722967] start test user 113209 144/567 recall augumented users by random, augumented_users = [74939, 68645, 106458, 55041, 133968, 127903, 50803, 130843, 116558, 112943, 89324, 4238, 57019, 9809, 92393, 10342, 112967, 32367, 110296, 72540, 87405, 104948, 69704, 320, 46185, 36888, 127554, 30052, 130213, 18778, 90989, 59022, 47666, 44332, 105412, 60826, 20780, 29868, 514, 136827, 77114, 34184, 24439, 87756, 125667, 58391, 9716, 105922, 52339, 101408]
[2024-12-02 18:55:26.744243] user = 113209 Cloud 144/567
[2024-12-02 18:55:26.791167] user = 113209 Local 144/567
[2024-12-02 18:55:27.282542] user = 113209 Local+ 144/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:55:30.203503] user = 113209 MPDA- 144/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6728193228562388
Training on augumented user 74939 0/50 current_auc = 0.6728193228562388
User 74939 AUC after training: 0.672502900537918
User 74939 does not improve AUC. Reverting changes.
Training on augumented user 68645 1/50 current_auc = 0.6728193228562388
User 68645 AUC after training: 0.6721337411665436
User 68645 does not improve AUC. Reverting changes.
Training on augumented user 106458 2/50 current_auc = 0.6728193228562388
User 106458 AUC after training: 0.6719227929543297
User 106458 does not improve AUC. Reverting changes.
Training on augumented user 55041 3/50 current_auc = 0.6728193228562388
User 55041 AUC after training: 0.6731884822276131
User 55041 improves AUC. Keeping the model.
Training on augumented user 133968 4/50 current_auc = 0.6731884822276131
User 133968 AUC after training: 0.6738213268642548
User 133968 improves AUC. Keeping the model.
Training on augumented user 127903 5/50 current_auc = 0.6738213268642548
User 127903 AUC after training: 0.6728720599092923
User 127903 does not improve AUC. Reverting changes.
Training on augumented user 50803 6/50 current_auc = 0.6738213268642548
User 50803 AUC after training: 0.6737158527581479
User 50803 does not improve AUC. Reverting changes.
Training on augumented user 130843 7/50 current_auc = 0.6738213268642548
User 130843 AUC after training: 0.672397426431811
User 130843 does not improve AUC. Reverting changes.
Training on augumented user 116558 8/50 current_auc = 0.6738213268642548
User 116558 AUC after training: 0.6731357451745595
User 116558 does not improve AUC. Reverting changes.
Training on augumented user 112943 9/50 current_auc = 0.6738213268642548
User 112943 AUC after training: 0.6724501634848644
User 112943 does not improve AUC. Reverting changes.
Training on augumented user 89324 10/50 current_auc = 0.6738213268642548
User 89324 AUC after training: 0.6734521674928805
User 89324 does not improve AUC. Reverting changes.
Training on augumented user 4238 11/50 current_auc = 0.6738213268642548
User 4238 AUC after training: 0.6724501634848645
User 4238 does not improve AUC. Reverting changes.
Training on augumented user 57019 12/50 current_auc = 0.6738213268642548
User 57019 AUC after training: 0.6725556375909714
User 57019 does not improve AUC. Reverting changes.
Training on augumented user 9809 13/50 current_auc = 0.6738213268642548
User 9809 AUC after training: 0.6733466933867736
User 9809 does not improve AUC. Reverting changes.
Training on augumented user 92393 14/50 current_auc = 0.6738213268642548
User 92393 AUC after training: 0.6728193228562388
User 92393 does not improve AUC. Reverting changes.
Training on augumented user 10342 15/50 current_auc = 0.6738213268642548
User 10342 AUC after training: 0.6732412192806666
User 10342 does not improve AUC. Reverting changes.
Training on augumented user 112967 16/50 current_auc = 0.6738213268642548
User 112967 AUC after training: 0.673399430439827
User 112967 does not improve AUC. Reverting changes.
Training on augumented user 32367 17/50 current_auc = 0.6738213268642548
User 32367 AUC after training: 0.6730830081215062
User 32367 does not improve AUC. Reverting changes.
Training on augumented user 110296 18/50 current_auc = 0.6738213268642548
User 110296 AUC after training: 0.6732412192806666
User 110296 does not improve AUC. Reverting changes.
Training on augumented user 72540 19/50 current_auc = 0.6738213268642548
User 72540 AUC after training: 0.67329395633372
User 72540 does not improve AUC. Reverting changes.
Training on augumented user 87405 20/50 current_auc = 0.6738213268642548
User 87405 AUC after training: 0.6738213268642548
User 87405 does not improve AUC. Reverting changes.
Training on augumented user 104948 21/50 current_auc = 0.6738213268642548
User 104948 AUC after training: 0.6735049045459339
User 104948 does not improve AUC. Reverting changes.
Training on augumented user 69704 22/50 current_auc = 0.6738213268642548
User 69704 AUC after training: 0.6733466933867736
User 69704 does not improve AUC. Reverting changes.
Training on augumented user 320 23/50 current_auc = 0.6738213268642548
User 320 AUC after training: 0.6731357451745597
User 320 does not improve AUC. Reverting changes.
Training on augumented user 46185 24/50 current_auc = 0.6738213268642548
User 46185 AUC after training: 0.6729775340153992
User 46185 does not improve AUC. Reverting changes.
Training on augumented user 36888 25/50 current_auc = 0.6738213268642548
User 36888 AUC after training: 0.6740850121295222
User 36888 improves AUC. Keeping the model.
Training on augumented user 127554 26/50 current_auc = 0.6740850121295222
User 127554 AUC after training: 0.6741377491825757
User 127554 improves AUC. Keeping the model.
Training on augumented user 30052 27/50 current_auc = 0.6741377491825757
User 30052 AUC after training: 0.6739268009703618
User 30052 does not improve AUC. Reverting changes.
Training on augumented user 130213 28/50 current_auc = 0.6741377491825757
User 130213 AUC after training: 0.6744014344478431
User 130213 improves AUC. Keeping the model.
Training on augumented user 18778 29/50 current_auc = 0.6744014344478431
User 18778 AUC after training: 0.6740850121295222
User 18778 does not improve AUC. Reverting changes.
Training on augumented user 90989 30/50 current_auc = 0.6744014344478431
User 90989 AUC after training: 0.6744014344478431
User 90989 does not improve AUC. Reverting changes.
Training on augumented user 59022 31/50 current_auc = 0.6744014344478431
User 59022 AUC after training: 0.6748233308722709
User 59022 improves AUC. Keeping the model.
Training on augumented user 47666 32/50 current_auc = 0.6748233308722709
User 47666 AUC after training: 0.6723974264318109
User 47666 does not improve AUC. Reverting changes.
Training on augumented user 44332 33/50 current_auc = 0.6748233308722709
User 44332 AUC after training: 0.6722392152726506
User 44332 does not improve AUC. Reverting changes.
Training on augumented user 105412 34/50 current_auc = 0.6748233308722709
User 105412 AUC after training: 0.6746651197131104
User 105412 does not improve AUC. Reverting changes.
Training on augumented user 60826 35/50 current_auc = 0.6748233308722709
User 60826 AUC after training: 0.6747178567661638
User 60826 does not improve AUC. Reverting changes.
Training on augumented user 20780 36/50 current_auc = 0.6748233308722709
User 20780 AUC after training: 0.6742959603417361
User 20780 does not improve AUC. Reverting changes.
Training on augumented user 29868 37/50 current_auc = 0.6748233308722709
User 29868 AUC after training: 0.6747178567661639
User 29868 does not improve AUC. Reverting changes.
Training on augumented user 514 38/50 current_auc = 0.6748233308722709
User 514 AUC after training: 0.6737158527581479
User 514 does not improve AUC. Reverting changes.
Training on augumented user 136827 39/50 current_auc = 0.6748233308722709
User 136827 AUC after training: 0.6744014344478431
User 136827 does not improve AUC. Reverting changes.
Training on augumented user 77114 40/50 current_auc = 0.6748233308722709
User 77114 AUC after training: 0.6744014344478431
User 77114 does not improve AUC. Reverting changes.
Training on augumented user 34184 41/50 current_auc = 0.6748233308722709
User 34184 AUC after training: 0.6734521674928805
User 34184 does not improve AUC. Reverting changes.
Training on augumented user 24439 42/50 current_auc = 0.6748233308722709
User 24439 AUC after training: 0.6745596456070035
User 24439 does not improve AUC. Reverting changes.
Training on augumented user 87756 43/50 current_auc = 0.6748233308722709
User 87756 AUC after training: 0.6742432232886826
User 87756 does not improve AUC. Reverting changes.
Training on augumented user 125667 44/50 current_auc = 0.6748233308722709
User 125667 AUC after training: 0.6748233308722709
User 125667 does not improve AUC. Reverting changes.
Training on augumented user 58391 45/50 current_auc = 0.6748233308722709
User 58391 AUC after training: 0.6742432232886826
User 58391 does not improve AUC. Reverting changes.
Training on augumented user 9716 46/50 current_auc = 0.6748233308722709
User 9716 AUC after training: 0.6741377491825757
User 9716 does not improve AUC. Reverting changes.
Training on augumented user 105922 47/50 current_auc = 0.6748233308722709
User 105922 AUC after training: 0.6745596456070035
User 105922 does not improve AUC. Reverting changes.
Training on augumented user 52339 48/50 current_auc = 0.6748233308722709
User 52339 AUC after training: 0.67450690855395
User 52339 does not improve AUC. Reverting changes.
Training on augumented user 101408 49/50 current_auc = 0.6748233308722709
User 101408 AUC after training: 0.6748233308722709
User 101408 does not improve AUC. Reverting changes.
[2024-12-02 18:56:00.979019] start test user 113229 145/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:56:01.397533] start test user 113229 145/567 recall augumented users by random, augumented_users = [95845, 2038, 131392, 56922, 32827, 2680, 87045, 19815, 130443, 83850, 65043, 1914, 102030, 59405, 94833, 47774, 598, 69446, 85539, 43307, 65820, 112700, 32131, 31450, 26077, 75741, 86111, 59660, 86876, 30817, 54677, 79378, 120857, 47204, 113370, 90226, 28461, 89669, 43547, 51473, 37601, 26236, 47389, 12622, 75724, 63407, 117970, 60806, 73112, 51167]
[2024-12-02 18:56:01.412355] user = 113229 Cloud 145/567
[2024-12-02 18:56:01.446260] user = 113229 Local 145/567
[2024-12-02 18:56:01.493314] user = 113229 Local+ 145/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:56:03.602677] user = 113229 MPDA- 145/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5373955260570304
Training on augumented user 95845 0/50 current_auc = 0.5373955260570304
User 95845 AUC after training: 0.5373955260570304
User 95845 does not improve AUC. Reverting changes.
Training on augumented user 2038 1/50 current_auc = 0.5373955260570304
User 2038 AUC after training: 0.535490412979351
User 2038 does not improve AUC. Reverting changes.
Training on augumented user 131392 2/50 current_auc = 0.5373955260570304
User 131392 AUC after training: 0.537303343166175
User 131392 does not improve AUC. Reverting changes.
Training on augumented user 56922 3/50 current_auc = 0.5373955260570304
User 56922 AUC after training: 0.5376720747295968
User 56922 improves AUC. Keeping the model.
Training on augumented user 32827 4/50 current_auc = 0.5376720747295968
User 32827 AUC after training: 0.5374569813176008
User 32827 does not improve AUC. Reverting changes.
Training on augumented user 2680 5/50 current_auc = 0.5376720747295968
User 2680 AUC after training: 0.538501720747296
User 2680 improves AUC. Keeping the model.
Training on augumented user 87045 6/50 current_auc = 0.538501720747296
User 87045 AUC after training: 0.5388089970501475
User 87045 improves AUC. Keeping the model.
Training on augumented user 19815 7/50 current_auc = 0.5388089970501475
User 19815 AUC after training: 0.5387168141592921
User 19815 does not improve AUC. Reverting changes.
Training on augumented user 130443 8/50 current_auc = 0.5388089970501475
User 130443 AUC after training: 0.538501720747296
User 130443 does not improve AUC. Reverting changes.
Training on augumented user 83850 9/50 current_auc = 0.5388089970501475
User 83850 AUC after training: 0.5382866273352999
User 83850 does not improve AUC. Reverting changes.
Training on augumented user 65043 10/50 current_auc = 0.5388089970501475
User 65043 AUC after training: 0.5377642576204522
User 65043 does not improve AUC. Reverting changes.
Training on augumented user 1914 11/50 current_auc = 0.5388089970501475
User 1914 AUC after training: 0.5374569813176008
User 1914 does not improve AUC. Reverting changes.
Training on augumented user 102030 12/50 current_auc = 0.5388089970501475
User 102030 AUC after training: 0.5387475417895773
User 102030 does not improve AUC. Reverting changes.
Training on augumented user 59405 13/50 current_auc = 0.5388089970501475
User 59405 AUC after training: 0.5386246312684366
User 59405 does not improve AUC. Reverting changes.
Training on augumented user 94833 14/50 current_auc = 0.5388089970501475
User 94833 AUC after training: 0.538102261553589
User 94833 does not improve AUC. Reverting changes.
Training on augumented user 47774 15/50 current_auc = 0.5388089970501475
User 47774 AUC after training: 0.5377949852507374
User 47774 does not improve AUC. Reverting changes.
Training on augumented user 598 16/50 current_auc = 0.5388089970501475
User 598 AUC after training: 0.5384709931170109
User 598 does not improve AUC. Reverting changes.
Training on augumented user 69446 17/50 current_auc = 0.5388089970501475
User 69446 AUC after training: 0.538102261553589
User 69446 does not improve AUC. Reverting changes.
Training on augumented user 85539 18/50 current_auc = 0.5388089970501475
User 85539 AUC after training: 0.5382251720747295
User 85539 does not improve AUC. Reverting changes.
Training on augumented user 43307 19/50 current_auc = 0.5388089970501475
User 43307 AUC after training: 0.5387475417895772
User 43307 does not improve AUC. Reverting changes.
Training on augumented user 65820 20/50 current_auc = 0.5388089970501475
User 65820 AUC after training: 0.5384095378564405
User 65820 does not improve AUC. Reverting changes.
Training on augumented user 112700 21/50 current_auc = 0.5388089970501475
User 112700 AUC after training: 0.5382866273353
User 112700 does not improve AUC. Reverting changes.
Training on augumented user 32131 22/50 current_auc = 0.5388089970501475
User 32131 AUC after training: 0.5378564405113078
User 32131 does not improve AUC. Reverting changes.
Training on augumented user 31450 23/50 current_auc = 0.5388089970501475
User 31450 AUC after training: 0.5379486234021633
User 31450 does not improve AUC. Reverting changes.
Training on augumented user 26077 24/50 current_auc = 0.5388089970501475
User 26077 AUC after training: 0.5380408062930186
User 26077 does not improve AUC. Reverting changes.
Training on augumented user 75741 25/50 current_auc = 0.5388089970501475
User 75741 AUC after training: 0.5385324483775811
User 75741 does not improve AUC. Reverting changes.
Training on augumented user 86111 26/50 current_auc = 0.5388089970501475
User 86111 AUC after training: 0.5385631760078662
User 86111 does not improve AUC. Reverting changes.
Training on augumented user 59660 27/50 current_auc = 0.5388089970501475
User 59660 AUC after training: 0.5380715339233038
User 59660 does not improve AUC. Reverting changes.
Training on augumented user 86876 28/50 current_auc = 0.5388089970501475
User 86876 AUC after training: 0.5383173549655851
User 86876 does not improve AUC. Reverting changes.
Training on augumented user 30817 29/50 current_auc = 0.5388089970501475
User 30817 AUC after training: 0.5373340707964601
User 30817 does not improve AUC. Reverting changes.
Training on augumented user 54677 30/50 current_auc = 0.5388089970501475
User 54677 AUC after training: 0.5386246312684366
User 54677 does not improve AUC. Reverting changes.
Training on augumented user 79378 31/50 current_auc = 0.5388089970501475
User 79378 AUC after training: 0.5386553588987217
User 79378 does not improve AUC. Reverting changes.
Training on augumented user 120857 32/50 current_auc = 0.5388089970501475
User 120857 AUC after training: 0.5389933628318584
User 120857 improves AUC. Keeping the model.
Training on augumented user 47204 33/50 current_auc = 0.5389933628318584
User 47204 AUC after training: 0.5389319075712882
User 47204 does not improve AUC. Reverting changes.
Training on augumented user 113370 34/50 current_auc = 0.5389933628318584
User 113370 AUC after training: 0.5373955260570304
User 113370 does not improve AUC. Reverting changes.
Training on augumented user 90226 35/50 current_auc = 0.5389933628318584
User 90226 AUC after training: 0.5384095378564405
User 90226 does not improve AUC. Reverting changes.
Training on augumented user 28461 36/50 current_auc = 0.5389933628318584
User 28461 AUC after training: 0.5382558997050146
User 28461 does not improve AUC. Reverting changes.
Training on augumented user 89669 37/50 current_auc = 0.5389933628318584
User 89669 AUC after training: 0.5389319075712882
User 89669 does not improve AUC. Reverting changes.
Training on augumented user 43547 38/50 current_auc = 0.5389933628318584
User 43547 AUC after training: 0.538501720747296
User 43547 does not improve AUC. Reverting changes.
Training on augumented user 51473 39/50 current_auc = 0.5389933628318584
User 51473 AUC after training: 0.5388089970501475
User 51473 does not improve AUC. Reverting changes.
Training on augumented user 37601 40/50 current_auc = 0.5389933628318584
User 37601 AUC after training: 0.5392084562438545
User 37601 improves AUC. Keeping the model.
Training on augumented user 26236 41/50 current_auc = 0.5392084562438545
User 26236 AUC after training: 0.5390855457227138
User 26236 does not improve AUC. Reverting changes.
Training on augumented user 47389 42/50 current_auc = 0.5392084562438545
User 47389 AUC after training: 0.5388089970501475
User 47389 does not improve AUC. Reverting changes.
Training on augumented user 12622 43/50 current_auc = 0.5392084562438545
User 12622 AUC after training: 0.5389319075712882
User 12622 does not improve AUC. Reverting changes.
Training on augumented user 75724 44/50 current_auc = 0.5392084562438545
User 75724 AUC after training: 0.5390548180924287
User 75724 does not improve AUC. Reverting changes.
Training on augumented user 63407 45/50 current_auc = 0.5392084562438545
User 63407 AUC after training: 0.538501720747296
User 63407 does not improve AUC. Reverting changes.
Training on augumented user 117970 46/50 current_auc = 0.5392084562438545
User 117970 AUC after training: 0.538501720747296
User 117970 does not improve AUC. Reverting changes.
Training on augumented user 60806 47/50 current_auc = 0.5392084562438545
User 60806 AUC after training: 0.5386860865290068
User 60806 does not improve AUC. Reverting changes.
Training on augumented user 73112 48/50 current_auc = 0.5392084562438545
User 73112 AUC after training: 0.5388397246804326
User 73112 does not improve AUC. Reverting changes.
Training on augumented user 51167 49/50 current_auc = 0.5392084562438545
User 51167 AUC after training: 0.538716814159292
User 51167 does not improve AUC. Reverting changes.
[2024-12-02 18:56:30.706528] start test user 113249 146/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:56:31.134674] start test user 113249 146/567 recall augumented users by random, augumented_users = [3154, 112645, 5297, 111520, 54177, 107151, 13650, 63508, 134504, 47880, 125350, 127907, 73171, 3958, 132156, 110309, 96278, 133004, 66321, 49222, 103172, 118000, 59433, 42540, 33925, 47157, 82587, 110596, 35253, 35390, 74715, 8414, 68169, 3359, 100663, 273, 91764, 6271, 6589, 30266, 102551, 97290, 40190, 104752, 35439, 49773, 102225, 58586, 44082, 34630]
[2024-12-02 18:56:31.149537] user = 113249 Cloud 146/567
[2024-12-02 18:56:31.202198] user = 113249 Local 146/567
[2024-12-02 18:56:31.256089] user = 113249 Local+ 146/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:56:33.105462] user = 113249 MPDA- 146/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6938244047619048
Training on augumented user 3154 0/50 current_auc = 0.6938244047619048
User 3154 AUC after training: 0.6937003968253967
User 3154 does not improve AUC. Reverting changes.
Training on augumented user 112645 1/50 current_auc = 0.6938244047619048
User 112645 AUC after training: 0.6939236111111111
User 112645 improves AUC. Keeping the model.
Training on augumented user 5297 2/50 current_auc = 0.6939236111111111
User 5297 AUC after training: 0.6936755952380952
User 5297 does not improve AUC. Reverting changes.
Training on augumented user 111520 3/50 current_auc = 0.6939236111111111
User 111520 AUC after training: 0.6937748015873016
User 111520 does not improve AUC. Reverting changes.
Training on augumented user 54177 4/50 current_auc = 0.6939236111111111
User 54177 AUC after training: 0.6939236111111111
User 54177 does not improve AUC. Reverting changes.
Training on augumented user 107151 5/50 current_auc = 0.6939236111111111
User 107151 AUC after training: 0.6937003968253969
User 107151 does not improve AUC. Reverting changes.
Training on augumented user 13650 6/50 current_auc = 0.6939236111111111
User 13650 AUC after training: 0.6940228174603175
User 13650 improves AUC. Keeping the model.
Training on augumented user 63508 7/50 current_auc = 0.6940228174603175
User 63508 AUC after training: 0.6940228174603175
User 63508 does not improve AUC. Reverting changes.
Training on augumented user 134504 8/50 current_auc = 0.6940228174603175
User 134504 AUC after training: 0.6934771825396826
User 134504 does not improve AUC. Reverting changes.
Training on augumented user 47880 9/50 current_auc = 0.6940228174603175
User 47880 AUC after training: 0.6935515873015873
User 47880 does not improve AUC. Reverting changes.
Training on augumented user 125350 10/50 current_auc = 0.6940228174603175
User 125350 AUC after training: 0.6941220238095238
User 125350 improves AUC. Keeping the model.
Training on augumented user 127907 11/50 current_auc = 0.6941220238095238
User 127907 AUC after training: 0.693874007936508
User 127907 does not improve AUC. Reverting changes.
Training on augumented user 73171 12/50 current_auc = 0.6941220238095238
User 73171 AUC after training: 0.6939732142857143
User 73171 does not improve AUC. Reverting changes.
Training on augumented user 3958 13/50 current_auc = 0.6941220238095238
User 3958 AUC after training: 0.6940724206349207
User 3958 does not improve AUC. Reverting changes.
Training on augumented user 132156 14/50 current_auc = 0.6941220238095238
User 132156 AUC after training: 0.6941220238095238
User 132156 does not improve AUC. Reverting changes.
Training on augumented user 110309 15/50 current_auc = 0.6941220238095238
User 110309 AUC after training: 0.6936259920634921
User 110309 does not improve AUC. Reverting changes.
Training on augumented user 96278 16/50 current_auc = 0.6941220238095238
User 96278 AUC after training: 0.6937251984126984
User 96278 does not improve AUC. Reverting changes.
Training on augumented user 133004 17/50 current_auc = 0.6941220238095238
User 133004 AUC after training: 0.6945436507936508
User 133004 improves AUC. Keeping the model.
Training on augumented user 66321 18/50 current_auc = 0.6945436507936508
User 66321 AUC after training: 0.6945436507936508
User 66321 does not improve AUC. Reverting changes.
Training on augumented user 49222 19/50 current_auc = 0.6945436507936508
User 49222 AUC after training: 0.6937500000000001
User 49222 does not improve AUC. Reverting changes.
Training on augumented user 103172 20/50 current_auc = 0.6945436507936508
User 103172 AUC after training: 0.6946676587301587
User 103172 improves AUC. Keeping the model.
Training on augumented user 118000 21/50 current_auc = 0.6946676587301587
User 118000 AUC after training: 0.6944940476190476
User 118000 does not improve AUC. Reverting changes.
Training on augumented user 59433 22/50 current_auc = 0.6946676587301587
User 59433 AUC after training: 0.6944444444444445
User 59433 does not improve AUC. Reverting changes.
Training on augumented user 42540 23/50 current_auc = 0.6946676587301587
User 42540 AUC after training: 0.6942956349206348
User 42540 does not improve AUC. Reverting changes.
Training on augumented user 33925 24/50 current_auc = 0.6946676587301587
User 33925 AUC after training: 0.6946428571428572
User 33925 does not improve AUC. Reverting changes.
Training on augumented user 47157 25/50 current_auc = 0.6946676587301587
User 47157 AUC after training: 0.694593253968254
User 47157 does not improve AUC. Reverting changes.
Training on augumented user 82587 26/50 current_auc = 0.6946676587301587
User 82587 AUC after training: 0.694593253968254
User 82587 does not improve AUC. Reverting changes.
Training on augumented user 110596 27/50 current_auc = 0.6946676587301587
User 110596 AUC after training: 0.6944444444444445
User 110596 does not improve AUC. Reverting changes.
Training on augumented user 35253 28/50 current_auc = 0.6946676587301587
User 35253 AUC after training: 0.6944444444444444
User 35253 does not improve AUC. Reverting changes.
Training on augumented user 35390 29/50 current_auc = 0.6946676587301587
User 35390 AUC after training: 0.6941964285714286
User 35390 does not improve AUC. Reverting changes.
Training on augumented user 74715 30/50 current_auc = 0.6946676587301587
User 74715 AUC after training: 0.6942460317460317
User 74715 does not improve AUC. Reverting changes.
Training on augumented user 8414 31/50 current_auc = 0.6946676587301587
User 8414 AUC after training: 0.694295634920635
User 8414 does not improve AUC. Reverting changes.
Training on augumented user 68169 32/50 current_auc = 0.6946676587301587
User 68169 AUC after training: 0.6941964285714286
User 68169 does not improve AUC. Reverting changes.
Training on augumented user 3359 33/50 current_auc = 0.6946676587301587
User 3359 AUC after training: 0.6940972222222221
User 3359 does not improve AUC. Reverting changes.
Training on augumented user 100663 34/50 current_auc = 0.6946676587301587
User 100663 AUC after training: 0.6942460317460317
User 100663 does not improve AUC. Reverting changes.
Training on augumented user 273 35/50 current_auc = 0.6946676587301587
User 273 AUC after training: 0.6946924603174603
User 273 improves AUC. Keeping the model.
Training on augumented user 91764 36/50 current_auc = 0.6946924603174603
User 91764 AUC after training: 0.69375
User 91764 does not improve AUC. Reverting changes.
Training on augumented user 6271 37/50 current_auc = 0.6946924603174603
User 6271 AUC after training: 0.6943948412698413
User 6271 does not improve AUC. Reverting changes.
Training on augumented user 6589 38/50 current_auc = 0.6946924603174603
User 6589 AUC after training: 0.6944940476190476
User 6589 does not improve AUC. Reverting changes.
Training on augumented user 30266 39/50 current_auc = 0.6946924603174603
User 30266 AUC after training: 0.6946428571428571
User 30266 does not improve AUC. Reverting changes.
Training on augumented user 102551 40/50 current_auc = 0.6946924603174603
User 102551 AUC after training: 0.6937500000000001
User 102551 does not improve AUC. Reverting changes.
Training on augumented user 97290 41/50 current_auc = 0.6946924603174603
User 97290 AUC after training: 0.6933035714285714
User 97290 does not improve AUC. Reverting changes.
Training on augumented user 40190 42/50 current_auc = 0.6946924603174603
User 40190 AUC after training: 0.6945436507936508
User 40190 does not improve AUC. Reverting changes.
Training on augumented user 104752 43/50 current_auc = 0.6946924603174603
User 104752 AUC after training: 0.6939980158730158
User 104752 does not improve AUC. Reverting changes.
Training on augumented user 35439 44/50 current_auc = 0.6946924603174603
User 35439 AUC after training: 0.6943204365079365
User 35439 does not improve AUC. Reverting changes.
Training on augumented user 49773 45/50 current_auc = 0.6946924603174603
User 49773 AUC after training: 0.694890873015873
User 49773 improves AUC. Keeping the model.
Training on augumented user 102225 46/50 current_auc = 0.694890873015873
User 102225 AUC after training: 0.6949900793650793
User 102225 improves AUC. Keeping the model.
Training on augumented user 58586 47/50 current_auc = 0.6949900793650793
User 58586 AUC after training: 0.6943452380952382
User 58586 does not improve AUC. Reverting changes.
Training on augumented user 44082 48/50 current_auc = 0.6949900793650793
User 44082 AUC after training: 0.695188492063492
User 44082 improves AUC. Keeping the model.
Training on augumented user 34630 49/50 current_auc = 0.695188492063492
User 34630 AUC after training: 0.6948908730158729
User 34630 does not improve AUC. Reverting changes.
[2024-12-02 18:57:01.831205] start test user 113270 147/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:57:02.261666] start test user 113270 147/567 recall augumented users by random, augumented_users = [71364, 50912, 35318, 125938, 104052, 106885, 62748, 119064, 73948, 7524, 91440, 12714, 86045, 63935, 73508, 2114, 97768, 118271, 48310, 56678, 39716, 46595, 104609, 64723, 10317, 86708, 4371, 71114, 65253, 23380, 78983, 121577, 98817, 85766, 80229, 134471, 16351, 100769, 16171, 42013, 23687, 102837, 105681, 91357, 78865, 22414, 100025, 32753, 118167, 53495]
[2024-12-02 18:57:02.278104] user = 113270 Cloud 147/567
[2024-12-02 18:57:02.288893] user = 113270 Local 147/567
[2024-12-02 18:57:02.328286] user = 113270 Local+ 147/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:57:04.984896] user = 113270 MPDA- 147/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6711111111111111
Training on augumented user 71364 0/50 current_auc = 0.6711111111111111
User 71364 AUC after training: 0.6711111111111111
User 71364 does not improve AUC. Reverting changes.
Training on augumented user 50912 1/50 current_auc = 0.6711111111111111
User 50912 AUC after training: 0.6711111111111111
User 50912 does not improve AUC. Reverting changes.
Training on augumented user 35318 2/50 current_auc = 0.6711111111111111
User 35318 AUC after training: 0.6711111111111111
User 35318 does not improve AUC. Reverting changes.
Training on augumented user 125938 3/50 current_auc = 0.6711111111111111
User 125938 AUC after training: 0.6755555555555556
User 125938 improves AUC. Keeping the model.
Training on augumented user 104052 4/50 current_auc = 0.6755555555555556
User 104052 AUC after training: 0.6755555555555556
User 104052 does not improve AUC. Reverting changes.
Training on augumented user 106885 5/50 current_auc = 0.6755555555555556
User 106885 AUC after training: 0.6755555555555556
User 106885 does not improve AUC. Reverting changes.
Training on augumented user 62748 6/50 current_auc = 0.6755555555555556
User 62748 AUC after training: 0.6755555555555556
User 62748 does not improve AUC. Reverting changes.
Training on augumented user 119064 7/50 current_auc = 0.6755555555555556
User 119064 AUC after training: 0.6666666666666666
User 119064 does not improve AUC. Reverting changes.
Training on augumented user 73948 8/50 current_auc = 0.6755555555555556
User 73948 AUC after training: 0.6666666666666666
User 73948 does not improve AUC. Reverting changes.
Training on augumented user 7524 9/50 current_auc = 0.6755555555555556
User 7524 AUC after training: 0.6711111111111111
User 7524 does not improve AUC. Reverting changes.
Training on augumented user 91440 10/50 current_auc = 0.6755555555555556
User 91440 AUC after training: 0.6711111111111111
User 91440 does not improve AUC. Reverting changes.
Training on augumented user 12714 11/50 current_auc = 0.6755555555555556
User 12714 AUC after training: 0.6755555555555556
User 12714 does not improve AUC. Reverting changes.
Training on augumented user 86045 12/50 current_auc = 0.6755555555555556
User 86045 AUC after training: 0.6755555555555556
User 86045 does not improve AUC. Reverting changes.
Training on augumented user 63935 13/50 current_auc = 0.6755555555555556
User 63935 AUC after training: 0.6711111111111111
User 63935 does not improve AUC. Reverting changes.
Training on augumented user 73508 14/50 current_auc = 0.6755555555555556
User 73508 AUC after training: 0.6755555555555556
User 73508 does not improve AUC. Reverting changes.
Training on augumented user 2114 15/50 current_auc = 0.6755555555555556
User 2114 AUC after training: 0.6577777777777778
User 2114 does not improve AUC. Reverting changes.
Training on augumented user 97768 16/50 current_auc = 0.6755555555555556
User 97768 AUC after training: 0.6711111111111111
User 97768 does not improve AUC. Reverting changes.
Training on augumented user 118271 17/50 current_auc = 0.6755555555555556
User 118271 AUC after training: 0.6711111111111111
User 118271 does not improve AUC. Reverting changes.
Training on augumented user 48310 18/50 current_auc = 0.6755555555555556
User 48310 AUC after training: 0.6755555555555556
User 48310 does not improve AUC. Reverting changes.
Training on augumented user 56678 19/50 current_auc = 0.6755555555555556
User 56678 AUC after training: 0.6711111111111111
User 56678 does not improve AUC. Reverting changes.
Training on augumented user 39716 20/50 current_auc = 0.6755555555555556
User 39716 AUC after training: 0.6755555555555556
User 39716 does not improve AUC. Reverting changes.
Training on augumented user 46595 21/50 current_auc = 0.6755555555555556
User 46595 AUC after training: 0.6755555555555556
User 46595 does not improve AUC. Reverting changes.
Training on augumented user 104609 22/50 current_auc = 0.6755555555555556
User 104609 AUC after training: 0.6711111111111111
User 104609 does not improve AUC. Reverting changes.
Training on augumented user 64723 23/50 current_auc = 0.6755555555555556
User 64723 AUC after training: 0.6755555555555556
User 64723 does not improve AUC. Reverting changes.
Training on augumented user 10317 24/50 current_auc = 0.6755555555555556
User 10317 AUC after training: 0.6711111111111111
User 10317 does not improve AUC. Reverting changes.
Training on augumented user 86708 25/50 current_auc = 0.6755555555555556
User 86708 AUC after training: 0.6755555555555556
User 86708 does not improve AUC. Reverting changes.
Training on augumented user 4371 26/50 current_auc = 0.6755555555555556
User 4371 AUC after training: 0.6622222222222222
User 4371 does not improve AUC. Reverting changes.
Training on augumented user 71114 27/50 current_auc = 0.6755555555555556
User 71114 AUC after training: 0.6755555555555556
User 71114 does not improve AUC. Reverting changes.
Training on augumented user 65253 28/50 current_auc = 0.6755555555555556
User 65253 AUC after training: 0.6711111111111111
User 65253 does not improve AUC. Reverting changes.
Training on augumented user 23380 29/50 current_auc = 0.6755555555555556
User 23380 AUC after training: 0.6711111111111111
User 23380 does not improve AUC. Reverting changes.
Training on augumented user 78983 30/50 current_auc = 0.6755555555555556
User 78983 AUC after training: 0.6755555555555556
User 78983 does not improve AUC. Reverting changes.
Training on augumented user 121577 31/50 current_auc = 0.6755555555555556
User 121577 AUC after training: 0.6755555555555556
User 121577 does not improve AUC. Reverting changes.
Training on augumented user 98817 32/50 current_auc = 0.6755555555555556
User 98817 AUC after training: 0.6711111111111111
User 98817 does not improve AUC. Reverting changes.
Training on augumented user 85766 33/50 current_auc = 0.6755555555555556
User 85766 AUC after training: 0.6711111111111111
User 85766 does not improve AUC. Reverting changes.
Training on augumented user 80229 34/50 current_auc = 0.6755555555555556
User 80229 AUC after training: 0.6711111111111111
User 80229 does not improve AUC. Reverting changes.
Training on augumented user 134471 35/50 current_auc = 0.6755555555555556
User 134471 AUC after training: 0.6755555555555556
User 134471 does not improve AUC. Reverting changes.
Training on augumented user 16351 36/50 current_auc = 0.6755555555555556
User 16351 AUC after training: 0.6711111111111111
User 16351 does not improve AUC. Reverting changes.
Training on augumented user 100769 37/50 current_auc = 0.6755555555555556
User 100769 AUC after training: 0.6711111111111111
User 100769 does not improve AUC. Reverting changes.
Training on augumented user 16171 38/50 current_auc = 0.6755555555555556
User 16171 AUC after training: 0.6666666666666666
User 16171 does not improve AUC. Reverting changes.
Training on augumented user 42013 39/50 current_auc = 0.6755555555555556
User 42013 AUC after training: 0.6711111111111111
User 42013 does not improve AUC. Reverting changes.
Training on augumented user 23687 40/50 current_auc = 0.6755555555555556
User 23687 AUC after training: 0.6755555555555556
User 23687 does not improve AUC. Reverting changes.
Training on augumented user 102837 41/50 current_auc = 0.6755555555555556
User 102837 AUC after training: 0.6711111111111111
User 102837 does not improve AUC. Reverting changes.
Training on augumented user 105681 42/50 current_auc = 0.6755555555555556
User 105681 AUC after training: 0.6755555555555556
User 105681 does not improve AUC. Reverting changes.
Training on augumented user 91357 43/50 current_auc = 0.6755555555555556
User 91357 AUC after training: 0.6711111111111111
User 91357 does not improve AUC. Reverting changes.
Training on augumented user 78865 44/50 current_auc = 0.6755555555555556
User 78865 AUC after training: 0.6755555555555556
User 78865 does not improve AUC. Reverting changes.
Training on augumented user 22414 45/50 current_auc = 0.6755555555555556
User 22414 AUC after training: 0.6755555555555556
User 22414 does not improve AUC. Reverting changes.
Training on augumented user 100025 46/50 current_auc = 0.6755555555555556
User 100025 AUC after training: 0.6755555555555556
User 100025 does not improve AUC. Reverting changes.
Training on augumented user 32753 47/50 current_auc = 0.6755555555555556
User 32753 AUC after training: 0.6755555555555556
User 32753 does not improve AUC. Reverting changes.
Training on augumented user 118167 48/50 current_auc = 0.6755555555555556
User 118167 AUC after training: 0.6711111111111111
User 118167 does not improve AUC. Reverting changes.
Training on augumented user 53495 49/50 current_auc = 0.6755555555555556
User 53495 AUC after training: 0.6711111111111111
User 53495 does not improve AUC. Reverting changes.
[2024-12-02 18:57:33.004836] start test user 113365 148/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:57:33.685438] start test user 113365 148/567 recall augumented users by random, augumented_users = [117777, 99737, 135417, 2734, 109539, 52408, 64803, 98035, 69268, 19233, 102006, 53101, 117658, 50143, 37138, 37220, 117470, 23457, 127574, 47795, 99835, 74408, 91229, 50400, 119084, 74935, 50246, 6119, 39697, 19624, 105406, 110209, 19301, 63460, 7155, 86276, 80212, 53182, 38282, 104411, 47303, 53390, 63779, 77457, 66838, 72947, 32674, 47026, 2707, 127503]
[2024-12-02 18:57:33.701527] user = 113365 Cloud 148/567
[2024-12-02 18:57:33.771503] user = 113365 Local 148/567
[2024-12-02 18:57:33.903627] user = 113365 Local+ 148/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:57:36.634426] user = 113365 MPDA- 148/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6135323581781571
Training on augumented user 117777 0/50 current_auc = 0.6135323581781571
User 117777 AUC after training: 0.6157123125821643
User 117777 improves AUC. Keeping the model.
Training on augumented user 99737 1/50 current_auc = 0.6157123125821643
User 99737 AUC after training: 0.6156956717088512
User 99737 does not improve AUC. Reverting changes.
Training on augumented user 135417 2/50 current_auc = 0.6157123125821643
User 135417 AUC after training: 0.6161366548516467
User 135417 improves AUC. Keeping the model.
Training on augumented user 2734 3/50 current_auc = 0.6161366548516467
User 2734 AUC after training: 0.6169936598272677
User 2734 improves AUC. Keeping the model.
Training on augumented user 109539 4/50 current_auc = 0.6169936598272677
User 109539 AUC after training: 0.6174596042800325
User 109539 improves AUC. Keeping the model.
Training on augumented user 52408 5/50 current_auc = 0.6174596042800325
User 52408 AUC after training: 0.6164112292613118
User 52408 does not improve AUC. Reverting changes.
Training on augumented user 64803 6/50 current_auc = 0.6174596042800325
User 64803 AUC after training: 0.6177757808729802
User 64803 improves AUC. Keeping the model.
Training on augumented user 98035 7/50 current_auc = 0.6177757808729802
User 98035 AUC after training: 0.6180753165926147
User 98035 improves AUC. Keeping the model.
Training on augumented user 69268 8/50 current_auc = 0.6180753165926147
User 69268 AUC after training: 0.6172349524903067
User 69268 does not improve AUC. Reverting changes.
Training on augumented user 19233 9/50 current_auc = 0.6180753165926147
User 19233 AUC after training: 0.617110145940459
User 19233 does not improve AUC. Reverting changes.
Training on augumented user 102006 10/50 current_auc = 0.6180753165926147
User 102006 AUC after training: 0.617126786813772
User 102006 does not improve AUC. Reverting changes.
Training on augumented user 53101 11/50 current_auc = 0.6180753165926147
User 53101 AUC after training: 0.6172682342369327
User 53101 does not improve AUC. Reverting changes.
Training on augumented user 117658 12/50 current_auc = 0.6180753165926147
User 117658 AUC after training: 0.6150549980862996
User 117658 does not improve AUC. Reverting changes.
Training on augumented user 50143 13/50 current_auc = 0.6180753165926147
User 50143 AUC after training: 0.6183249296923101
User 50143 improves AUC. Keeping the model.
Training on augumented user 37138 14/50 current_auc = 0.6183249296923101
User 37138 AUC after training: 0.618191802705806
User 37138 does not improve AUC. Reverting changes.
Training on augumented user 37220 15/50 current_auc = 0.6183249296923101
User 37220 AUC after training: 0.6179421896061106
User 37220 does not improve AUC. Reverting changes.
Training on augumented user 117470 16/50 current_auc = 0.6183249296923101
User 117470 AUC after training: 0.6176260130131628
User 117470 does not improve AUC. Reverting changes.
Training on augumented user 23457 17/50 current_auc = 0.6183249296923101
User 23457 AUC after training: 0.6180586757193018
User 23457 does not improve AUC. Reverting changes.
Training on augumented user 127574 18/50 current_auc = 0.6183249296923101
User 127574 AUC after training: 0.6179754713527366
User 127574 does not improve AUC. Reverting changes.
Training on augumented user 47795 19/50 current_auc = 0.6183249296923101
User 47795 AUC after training: 0.6187908741450752
User 47795 improves AUC. Keeping the model.
Training on augumented user 99835 20/50 current_auc = 0.6187908741450752
User 99835 AUC after training: 0.6190904098647096
User 99835 improves AUC. Keeping the model.
Training on augumented user 74408 21/50 current_auc = 0.6190904098647096
User 74408 AUC after training: 0.6189739237515185
User 74408 does not improve AUC. Reverting changes.
Training on augumented user 91229 22/50 current_auc = 0.6190904098647096
User 91229 AUC after training: 0.6201387848834307
User 91229 improves AUC. Keeping the model.
Training on augumented user 50400 23/50 current_auc = 0.6201387848834307
User 50400 AUC after training: 0.6191236916113358
User 50400 does not improve AUC. Reverting changes.
Training on augumented user 119084 24/50 current_auc = 0.6201387848834307
User 119084 AUC after training: 0.61980596741717
User 119084 does not improve AUC. Reverting changes.
Training on augumented user 74935 25/50 current_auc = 0.6201387848834307
User 74935 AUC after training: 0.6197726856705439
User 74935 does not improve AUC. Reverting changes.
Training on augumented user 50246 26/50 current_auc = 0.6201387848834307
User 50246 AUC after training: 0.6195563543174745
User 50246 does not improve AUC. Reverting changes.
Training on augumented user 6119 27/50 current_auc = 0.6201387848834307
User 6119 AUC after training: 0.6182583661990582
User 6119 does not improve AUC. Reverting changes.
Training on augumented user 39697 28/50 current_auc = 0.6201387848834307
User 39697 AUC after training: 0.6194565090775964
User 39697 does not improve AUC. Reverting changes.
Training on augumented user 19624 29/50 current_auc = 0.6201387848834307
User 19624 AUC after training: 0.6180087530993627
User 19624 does not improve AUC. Reverting changes.
Training on augumented user 105406 30/50 current_auc = 0.6201387848834307
User 105406 AUC after training: 0.6172432729269632
User 105406 does not improve AUC. Reverting changes.
Training on augumented user 110209 31/50 current_auc = 0.6201387848834307
User 110209 AUC after training: 0.6201554257567437
User 110209 improves AUC. Keeping the model.
Training on augumented user 19301 32/50 current_auc = 0.6201554257567437
User 19301 AUC after training: 0.6202053483766827
User 19301 improves AUC. Keeping the model.
Training on augumented user 63460 33/50 current_auc = 0.6202053483766827
User 63460 AUC after training: 0.6201720666300568
User 63460 does not improve AUC. Reverting changes.
Training on augumented user 7155 34/50 current_auc = 0.6202053483766827
User 7155 AUC after training: 0.6202053483766827
User 7155 does not improve AUC. Reverting changes.
Training on augumented user 86276 35/50 current_auc = 0.6202053483766827
User 86276 AUC after training: 0.6201055031368046
User 86276 does not improve AUC. Reverting changes.
Training on augumented user 80212 36/50 current_auc = 0.6202053483766827
User 80212 AUC after training: 0.6202552709966219
User 80212 improves AUC. Keeping the model.
Training on augumented user 53182 37/50 current_auc = 0.6202552709966219
User 53182 AUC after training: 0.6203051936165609
User 53182 improves AUC. Keeping the model.
Training on augumented user 38282 38/50 current_auc = 0.6203051936165609
User 38282 AUC after training: 0.617725858253041
User 38282 does not improve AUC. Reverting changes.
Training on augumented user 104411 39/50 current_auc = 0.6203051936165609
User 104411 AUC after training: 0.6161948979082423
User 104411 does not improve AUC. Reverting changes.
Training on augumented user 47303 40/50 current_auc = 0.6203051936165609
User 47303 AUC after training: 0.6201387848834307
User 47303 does not improve AUC. Reverting changes.
Training on augumented user 53390 41/50 current_auc = 0.6203051936165609
User 53390 AUC after training: 0.6207212154493867
User 53390 improves AUC. Keeping the model.
Training on augumented user 63779 42/50 current_auc = 0.6207212154493867
User 63779 AUC after training: 0.6204549614763782
User 63779 does not improve AUC. Reverting changes.
Training on augumented user 77457 43/50 current_auc = 0.6207212154493867
User 77457 AUC after training: 0.6191403324846487
User 77457 does not improve AUC. Reverting changes.
Training on augumented user 66838 44/50 current_auc = 0.6207212154493867
User 66838 AUC after training: 0.619240177724527
User 66838 does not improve AUC. Reverting changes.
Training on augumented user 72947 45/50 current_auc = 0.6207212154493867
User 72947 AUC after training: 0.6182583661990582
User 72947 does not improve AUC. Reverting changes.
Training on augumented user 32674 46/50 current_auc = 0.6207212154493867
User 32674 AUC after training: 0.6195230725708485
User 32674 does not improve AUC. Reverting changes.
Training on augumented user 47026 47/50 current_auc = 0.6207212154493867
User 47026 AUC after training: 0.6186577471585709
User 47026 does not improve AUC. Reverting changes.
Training on augumented user 2707 48/50 current_auc = 0.6207212154493867
User 2707 AUC after training: 0.6203717571098132
User 2707 does not improve AUC. Reverting changes.
Training on augumented user 127503 49/50 current_auc = 0.6207212154493867
User 127503 AUC after training: 0.6208044198159519
User 127503 improves AUC. Keeping the model.
[2024-12-02 18:58:11.025517] start test user 113389 149/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:58:11.589403] start test user 113389 149/567 recall augumented users by random, augumented_users = [75945, 3125, 117402, 25047, 101614, 136345, 31142, 21150, 116203, 2055, 95325, 58391, 66694, 131032, 97388, 117390, 76469, 28613, 14141, 59045, 54238, 99110, 126999, 25099, 58543, 78192, 67168, 79906, 123341, 27445, 125950, 26142, 25321, 85191, 56538, 94374, 33827, 128041, 80727, 78655, 81331, 9102, 18254, 108585, 133815, 72071, 76189, 74712, 136752, 26321]
[2024-12-02 18:58:11.606816] user = 113389 Cloud 149/567
[2024-12-02 18:58:11.628215] user = 113389 Local 149/567
[2024-12-02 18:58:11.671308] user = 113389 Local+ 149/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:58:14.948002] user = 113389 MPDA- 149/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.48139880952380953
Training on augumented user 75945 0/50 current_auc = 0.48139880952380953
User 75945 AUC after training: 0.4818452380952381
User 75945 improves AUC. Keeping the model.
Training on augumented user 3125 1/50 current_auc = 0.4818452380952381
User 3125 AUC after training: 0.48139880952380953
User 3125 does not improve AUC. Reverting changes.
Training on augumented user 117402 2/50 current_auc = 0.4818452380952381
User 117402 AUC after training: 0.48124999999999996
User 117402 does not improve AUC. Reverting changes.
Training on augumented user 25047 3/50 current_auc = 0.4818452380952381
User 25047 AUC after training: 0.4816964285714286
User 25047 does not improve AUC. Reverting changes.
Training on augumented user 101614 4/50 current_auc = 0.4818452380952381
User 101614 AUC after training: 0.4819940476190476
User 101614 improves AUC. Keeping the model.
Training on augumented user 136345 5/50 current_auc = 0.4819940476190476
User 136345 AUC after training: 0.4822916666666667
User 136345 improves AUC. Keeping the model.
Training on augumented user 31142 6/50 current_auc = 0.4822916666666667
User 31142 AUC after training: 0.4819940476190476
User 31142 does not improve AUC. Reverting changes.
Training on augumented user 21150 7/50 current_auc = 0.4822916666666667
User 21150 AUC after training: 0.4816964285714286
User 21150 does not improve AUC. Reverting changes.
Training on augumented user 116203 8/50 current_auc = 0.4822916666666667
User 116203 AUC after training: 0.4824404761904762
User 116203 improves AUC. Keeping the model.
Training on augumented user 2055 9/50 current_auc = 0.4824404761904762
User 2055 AUC after training: 0.4825892857142857
User 2055 improves AUC. Keeping the model.
Training on augumented user 95325 10/50 current_auc = 0.4825892857142857
User 95325 AUC after training: 0.48229166666666673
User 95325 does not improve AUC. Reverting changes.
Training on augumented user 58391 11/50 current_auc = 0.4825892857142857
User 58391 AUC after training: 0.4825892857142857
User 58391 does not improve AUC. Reverting changes.
Training on augumented user 66694 12/50 current_auc = 0.4825892857142857
User 66694 AUC after training: 0.4819940476190476
User 66694 does not improve AUC. Reverting changes.
Training on augumented user 131032 13/50 current_auc = 0.4825892857142857
User 131032 AUC after training: 0.48020833333333335
User 131032 does not improve AUC. Reverting changes.
Training on augumented user 97388 14/50 current_auc = 0.4825892857142857
User 97388 AUC after training: 0.4819940476190476
User 97388 does not improve AUC. Reverting changes.
Training on augumented user 117390 15/50 current_auc = 0.4825892857142857
User 117390 AUC after training: 0.48214285714285715
User 117390 does not improve AUC. Reverting changes.
Training on augumented user 76469 16/50 current_auc = 0.4825892857142857
User 76469 AUC after training: 0.4819940476190477
User 76469 does not improve AUC. Reverting changes.
Training on augumented user 28613 17/50 current_auc = 0.4825892857142857
User 28613 AUC after training: 0.48184523809523816
User 28613 does not improve AUC. Reverting changes.
Training on augumented user 14141 18/50 current_auc = 0.4825892857142857
User 14141 AUC after training: 0.4822916666666667
User 14141 does not improve AUC. Reverting changes.
Training on augumented user 59045 19/50 current_auc = 0.4825892857142857
User 59045 AUC after training: 0.4825892857142857
User 59045 does not improve AUC. Reverting changes.
Training on augumented user 54238 20/50 current_auc = 0.4825892857142857
User 54238 AUC after training: 0.4822916666666667
User 54238 does not improve AUC. Reverting changes.
Training on augumented user 99110 21/50 current_auc = 0.4825892857142857
User 99110 AUC after training: 0.4819940476190476
User 99110 does not improve AUC. Reverting changes.
Training on augumented user 126999 22/50 current_auc = 0.4825892857142857
User 126999 AUC after training: 0.48273809523809524
User 126999 improves AUC. Keeping the model.
Training on augumented user 25099 23/50 current_auc = 0.48273809523809524
User 25099 AUC after training: 0.4825892857142857
User 25099 does not improve AUC. Reverting changes.
Training on augumented user 58543 24/50 current_auc = 0.48273809523809524
User 58543 AUC after training: 0.4821428571428571
User 58543 does not improve AUC. Reverting changes.
Training on augumented user 78192 25/50 current_auc = 0.48273809523809524
User 78192 AUC after training: 0.4822916666666667
User 78192 does not improve AUC. Reverting changes.
Training on augumented user 67168 26/50 current_auc = 0.48273809523809524
User 67168 AUC after training: 0.4825892857142857
User 67168 does not improve AUC. Reverting changes.
Training on augumented user 79906 27/50 current_auc = 0.48273809523809524
User 79906 AUC after training: 0.48288690476190477
User 79906 improves AUC. Keeping the model.
Training on augumented user 123341 28/50 current_auc = 0.48288690476190477
User 123341 AUC after training: 0.48080357142857144
User 123341 does not improve AUC. Reverting changes.
Training on augumented user 27445 29/50 current_auc = 0.48288690476190477
User 27445 AUC after training: 0.4824404761904762
User 27445 does not improve AUC. Reverting changes.
Training on augumented user 125950 30/50 current_auc = 0.48288690476190477
User 125950 AUC after training: 0.4819940476190476
User 125950 does not improve AUC. Reverting changes.
Training on augumented user 26142 31/50 current_auc = 0.48288690476190477
User 26142 AUC after training: 0.48139880952380953
User 26142 does not improve AUC. Reverting changes.
Training on augumented user 25321 32/50 current_auc = 0.48288690476190477
User 25321 AUC after training: 0.4813988095238095
User 25321 does not improve AUC. Reverting changes.
Training on augumented user 85191 33/50 current_auc = 0.48288690476190477
User 85191 AUC after training: 0.4825892857142857
User 85191 does not improve AUC. Reverting changes.
Training on augumented user 56538 34/50 current_auc = 0.48288690476190477
User 56538 AUC after training: 0.4819940476190476
User 56538 does not improve AUC. Reverting changes.
Training on augumented user 94374 35/50 current_auc = 0.48288690476190477
User 94374 AUC after training: 0.48110119047619054
User 94374 does not improve AUC. Reverting changes.
Training on augumented user 33827 36/50 current_auc = 0.48288690476190477
User 33827 AUC after training: 0.48169642857142864
User 33827 does not improve AUC. Reverting changes.
Training on augumented user 128041 37/50 current_auc = 0.48288690476190477
User 128041 AUC after training: 0.48214285714285715
User 128041 does not improve AUC. Reverting changes.
Training on augumented user 80727 38/50 current_auc = 0.48288690476190477
User 80727 AUC after training: 0.4816964285714286
User 80727 does not improve AUC. Reverting changes.
Training on augumented user 78655 39/50 current_auc = 0.48288690476190477
User 78655 AUC after training: 0.48139880952380953
User 78655 does not improve AUC. Reverting changes.
Training on augumented user 81331 40/50 current_auc = 0.48288690476190477
User 81331 AUC after training: 0.4836309523809524
User 81331 improves AUC. Keeping the model.
Training on augumented user 9102 41/50 current_auc = 0.4836309523809524
User 9102 AUC after training: 0.48333333333333334
User 9102 does not improve AUC. Reverting changes.
Training on augumented user 18254 42/50 current_auc = 0.4836309523809524
User 18254 AUC after training: 0.4828869047619048
User 18254 does not improve AUC. Reverting changes.
Training on augumented user 108585 43/50 current_auc = 0.4836309523809524
User 108585 AUC after training: 0.4833333333333334
User 108585 does not improve AUC. Reverting changes.
Training on augumented user 133815 44/50 current_auc = 0.4836309523809524
User 133815 AUC after training: 0.4836309523809524
User 133815 does not improve AUC. Reverting changes.
Training on augumented user 72071 45/50 current_auc = 0.4836309523809524
User 72071 AUC after training: 0.4827380952380953
User 72071 does not improve AUC. Reverting changes.
Training on augumented user 76189 46/50 current_auc = 0.4836309523809524
User 76189 AUC after training: 0.48288690476190477
User 76189 does not improve AUC. Reverting changes.
Training on augumented user 74712 47/50 current_auc = 0.4836309523809524
User 74712 AUC after training: 0.48348214285714286
User 74712 does not improve AUC. Reverting changes.
Training on augumented user 136752 48/50 current_auc = 0.4836309523809524
User 136752 AUC after training: 0.4827380952380953
User 136752 does not improve AUC. Reverting changes.
Training on augumented user 26321 49/50 current_auc = 0.4836309523809524
User 26321 AUC after training: 0.48377976190476196
User 26321 improves AUC. Keeping the model.
[2024-12-02 18:58:44.032729] start test user 113418 150/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:58:44.493488] start test user 113418 150/567 recall augumented users by random, augumented_users = [135749, 80705, 132866, 89542, 115392, 125153, 2577, 21517, 30914, 76687, 7766, 8129, 120141, 50533, 45130, 12355, 51707, 62696, 16187, 72057, 38118, 51420, 79291, 59242, 35706, 112784, 36450, 49100, 105648, 55600, 57210, 27907, 77830, 10161, 75599, 125050, 69099, 3149, 653, 19707, 45110, 131415, 118181, 64384, 57659, 135119, 27469, 13043, 8661, 107967]
[2024-12-02 18:58:44.508677] user = 113418 Cloud 150/567
[2024-12-02 18:58:44.518587] user = 113418 Local 150/567
[2024-12-02 18:58:44.573947] user = 113418 Local+ 150/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:58:47.203480] user = 113418 MPDA- 150/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7413793103448276
Training on augumented user 135749 0/50 current_auc = 0.7413793103448276
User 135749 AUC after training: 0.7377495462794919
User 135749 does not improve AUC. Reverting changes.
Training on augumented user 80705 1/50 current_auc = 0.7413793103448276
User 80705 AUC after training: 0.7422867513611616
User 80705 improves AUC. Keeping the model.
Training on augumented user 132866 2/50 current_auc = 0.7422867513611616
User 132866 AUC after training: 0.7422867513611616
User 132866 does not improve AUC. Reverting changes.
Training on augumented user 89542 3/50 current_auc = 0.7422867513611616
User 89542 AUC after training: 0.7441016333938294
User 89542 improves AUC. Keeping the model.
Training on augumented user 115392 4/50 current_auc = 0.7441016333938294
User 115392 AUC after training: 0.7477313974591652
User 115392 improves AUC. Keeping the model.
Training on augumented user 125153 5/50 current_auc = 0.7477313974591652
User 125153 AUC after training: 0.7477313974591652
User 125153 does not improve AUC. Reverting changes.
Training on augumented user 2577 6/50 current_auc = 0.7477313974591652
User 2577 AUC after training: 0.7459165154264973
User 2577 does not improve AUC. Reverting changes.
Training on augumented user 21517 7/50 current_auc = 0.7477313974591652
User 21517 AUC after training: 0.7477313974591652
User 21517 does not improve AUC. Reverting changes.
Training on augumented user 30914 8/50 current_auc = 0.7477313974591652
User 30914 AUC after training: 0.7422867513611615
User 30914 does not improve AUC. Reverting changes.
Training on augumented user 76687 9/50 current_auc = 0.7477313974591652
User 76687 AUC after training: 0.7441016333938294
User 76687 does not improve AUC. Reverting changes.
Training on augumented user 7766 10/50 current_auc = 0.7477313974591652
User 7766 AUC after training: 0.7441016333938294
User 7766 does not improve AUC. Reverting changes.
Training on augumented user 8129 11/50 current_auc = 0.7477313974591652
User 8129 AUC after training: 0.7459165154264973
User 8129 does not improve AUC. Reverting changes.
Training on augumented user 120141 12/50 current_auc = 0.7477313974591652
User 120141 AUC after training: 0.7422867513611615
User 120141 does not improve AUC. Reverting changes.
Training on augumented user 50533 13/50 current_auc = 0.7477313974591652
User 50533 AUC after training: 0.7404718693284937
User 50533 does not improve AUC. Reverting changes.
Training on augumented user 45130 14/50 current_auc = 0.7477313974591652
User 45130 AUC after training: 0.7477313974591652
User 45130 does not improve AUC. Reverting changes.
Training on augumented user 12355 15/50 current_auc = 0.7477313974591652
User 12355 AUC after training: 0.7422867513611615
User 12355 does not improve AUC. Reverting changes.
Training on augumented user 51707 16/50 current_auc = 0.7477313974591652
User 51707 AUC after training: 0.7441016333938294
User 51707 does not improve AUC. Reverting changes.
Training on augumented user 62696 17/50 current_auc = 0.7477313974591652
User 62696 AUC after training: 0.7459165154264973
User 62696 does not improve AUC. Reverting changes.
Training on augumented user 16187 18/50 current_auc = 0.7477313974591652
User 16187 AUC after training: 0.7477313974591652
User 16187 does not improve AUC. Reverting changes.
Training on augumented user 72057 19/50 current_auc = 0.7477313974591652
User 72057 AUC after training: 0.7459165154264974
User 72057 does not improve AUC. Reverting changes.
Training on augumented user 38118 20/50 current_auc = 0.7477313974591652
User 38118 AUC after training: 0.7441016333938294
User 38118 does not improve AUC. Reverting changes.
Training on augumented user 51420 21/50 current_auc = 0.7477313974591652
User 51420 AUC after training: 0.7422867513611615
User 51420 does not improve AUC. Reverting changes.
Training on augumented user 79291 22/50 current_auc = 0.7477313974591652
User 79291 AUC after training: 0.7441016333938295
User 79291 does not improve AUC. Reverting changes.
Training on augumented user 59242 23/50 current_auc = 0.7477313974591652
User 59242 AUC after training: 0.7459165154264974
User 59242 does not improve AUC. Reverting changes.
Training on augumented user 35706 24/50 current_auc = 0.7477313974591652
User 35706 AUC after training: 0.7459165154264974
User 35706 does not improve AUC. Reverting changes.
Training on augumented user 112784 25/50 current_auc = 0.7477313974591652
User 112784 AUC after training: 0.7422867513611615
User 112784 does not improve AUC. Reverting changes.
Training on augumented user 36450 26/50 current_auc = 0.7477313974591652
User 36450 AUC after training: 0.7422867513611616
User 36450 does not improve AUC. Reverting changes.
Training on augumented user 49100 27/50 current_auc = 0.7477313974591652
User 49100 AUC after training: 0.7459165154264973
User 49100 does not improve AUC. Reverting changes.
Training on augumented user 105648 28/50 current_auc = 0.7477313974591652
User 105648 AUC after training: 0.7441016333938294
User 105648 does not improve AUC. Reverting changes.
Training on augumented user 55600 29/50 current_auc = 0.7477313974591652
User 55600 AUC after training: 0.7441016333938295
User 55600 does not improve AUC. Reverting changes.
Training on augumented user 57210 30/50 current_auc = 0.7477313974591652
User 57210 AUC after training: 0.7441016333938294
User 57210 does not improve AUC. Reverting changes.
Training on augumented user 27907 31/50 current_auc = 0.7477313974591652
User 27907 AUC after training: 0.7422867513611616
User 27907 does not improve AUC. Reverting changes.
Training on augumented user 77830 32/50 current_auc = 0.7477313974591652
User 77830 AUC after training: 0.7422867513611616
User 77830 does not improve AUC. Reverting changes.
Training on augumented user 10161 33/50 current_auc = 0.7477313974591652
User 10161 AUC after training: 0.7477313974591652
User 10161 does not improve AUC. Reverting changes.
Training on augumented user 75599 34/50 current_auc = 0.7477313974591652
User 75599 AUC after training: 0.7441016333938294
User 75599 does not improve AUC. Reverting changes.
Training on augumented user 125050 35/50 current_auc = 0.7477313974591652
User 125050 AUC after training: 0.7441016333938294
User 125050 does not improve AUC. Reverting changes.
Training on augumented user 69099 36/50 current_auc = 0.7477313974591652
User 69099 AUC after training: 0.7477313974591652
User 69099 does not improve AUC. Reverting changes.
Training on augumented user 3149 37/50 current_auc = 0.7477313974591652
User 3149 AUC after training: 0.7386569872958259
User 3149 does not improve AUC. Reverting changes.
Training on augumented user 653 38/50 current_auc = 0.7477313974591652
User 653 AUC after training: 0.7441016333938294
User 653 does not improve AUC. Reverting changes.
Training on augumented user 19707 39/50 current_auc = 0.7477313974591652
User 19707 AUC after training: 0.7422867513611616
User 19707 does not improve AUC. Reverting changes.
Training on augumented user 45110 40/50 current_auc = 0.7477313974591652
User 45110 AUC after training: 0.7459165154264973
User 45110 does not improve AUC. Reverting changes.
Training on augumented user 131415 41/50 current_auc = 0.7477313974591652
User 131415 AUC after training: 0.7459165154264974
User 131415 does not improve AUC. Reverting changes.
Training on augumented user 118181 42/50 current_auc = 0.7477313974591652
User 118181 AUC after training: 0.7459165154264973
User 118181 does not improve AUC. Reverting changes.
Training on augumented user 64384 43/50 current_auc = 0.7477313974591652
User 64384 AUC after training: 0.7441016333938294
User 64384 does not improve AUC. Reverting changes.
Training on augumented user 57659 44/50 current_auc = 0.7477313974591652
User 57659 AUC after training: 0.7441016333938294
User 57659 does not improve AUC. Reverting changes.
Training on augumented user 135119 45/50 current_auc = 0.7477313974591652
User 135119 AUC after training: 0.7459165154264973
User 135119 does not improve AUC. Reverting changes.
Training on augumented user 27469 46/50 current_auc = 0.7477313974591652
User 27469 AUC after training: 0.7404718693284937
User 27469 does not improve AUC. Reverting changes.
Training on augumented user 13043 47/50 current_auc = 0.7477313974591652
User 13043 AUC after training: 0.7422867513611616
User 13043 does not improve AUC. Reverting changes.
Training on augumented user 8661 48/50 current_auc = 0.7477313974591652
User 8661 AUC after training: 0.7441016333938294
User 8661 does not improve AUC. Reverting changes.
Training on augumented user 107967 49/50 current_auc = 0.7477313974591652
User 107967 AUC after training: 0.7404718693284937
User 107967 does not improve AUC. Reverting changes.
[2024-12-02 18:59:19.946946] start test user 113487 151/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:59:20.568732] start test user 113487 151/567 recall augumented users by random, augumented_users = [62758, 57743, 11798, 75314, 47887, 40113, 126208, 131272, 65012, 3209, 90371, 85571, 33874, 93195, 23674, 2845, 21423, 12147, 82220, 42236, 73796, 33414, 21502, 86758, 13714, 30353, 34690, 110915, 125506, 125499, 57839, 85966, 38777, 3245, 7959, 42126, 40275, 72976, 40669, 101057, 107109, 119980, 80586, 21782, 63445, 103289, 31887, 14551, 23599, 81121]
[2024-12-02 18:59:20.586466] user = 113487 Cloud 151/567
[2024-12-02 18:59:20.605470] user = 113487 Local 151/567
[2024-12-02 18:59:20.925525] user = 113487 Local+ 151/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:59:23.283111] user = 113487 MPDA- 151/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7916666666666666
Training on augumented user 62758 0/50 current_auc = 0.7916666666666666
User 62758 AUC after training: 0.7916666666666666
User 62758 does not improve AUC. Reverting changes.
Training on augumented user 57743 1/50 current_auc = 0.7916666666666666
User 57743 AUC after training: 0.7916666666666666
User 57743 does not improve AUC. Reverting changes.
Training on augumented user 11798 2/50 current_auc = 0.7916666666666666
User 11798 AUC after training: 0.7986111111111112
User 11798 improves AUC. Keeping the model.
Training on augumented user 75314 3/50 current_auc = 0.7986111111111112
User 75314 AUC after training: 0.7916666666666666
User 75314 does not improve AUC. Reverting changes.
Training on augumented user 47887 4/50 current_auc = 0.7986111111111112
User 47887 AUC after training: 0.7916666666666666
User 47887 does not improve AUC. Reverting changes.
Training on augumented user 40113 5/50 current_auc = 0.7986111111111112
User 40113 AUC after training: 0.7951388888888888
User 40113 does not improve AUC. Reverting changes.
Training on augumented user 126208 6/50 current_auc = 0.7986111111111112
User 126208 AUC after training: 0.7986111111111112
User 126208 does not improve AUC. Reverting changes.
Training on augumented user 131272 7/50 current_auc = 0.7986111111111112
User 131272 AUC after training: 0.7986111111111112
User 131272 does not improve AUC. Reverting changes.
Training on augumented user 65012 8/50 current_auc = 0.7986111111111112
User 65012 AUC after training: 0.7986111111111112
User 65012 does not improve AUC. Reverting changes.
Training on augumented user 3209 9/50 current_auc = 0.7986111111111112
User 3209 AUC after training: 0.7951388888888888
User 3209 does not improve AUC. Reverting changes.
Training on augumented user 90371 10/50 current_auc = 0.7986111111111112
User 90371 AUC after training: 0.8020833333333333
User 90371 improves AUC. Keeping the model.
Training on augumented user 85571 11/50 current_auc = 0.8020833333333333
User 85571 AUC after training: 0.8020833333333333
User 85571 does not improve AUC. Reverting changes.
Training on augumented user 33874 12/50 current_auc = 0.8020833333333333
User 33874 AUC after training: 0.8020833333333333
User 33874 does not improve AUC. Reverting changes.
Training on augumented user 93195 13/50 current_auc = 0.8020833333333333
User 93195 AUC after training: 0.8020833333333333
User 93195 does not improve AUC. Reverting changes.
Training on augumented user 23674 14/50 current_auc = 0.8020833333333333
User 23674 AUC after training: 0.8020833333333333
User 23674 does not improve AUC. Reverting changes.
Training on augumented user 2845 15/50 current_auc = 0.8020833333333333
User 2845 AUC after training: 0.7986111111111112
User 2845 does not improve AUC. Reverting changes.
Training on augumented user 21423 16/50 current_auc = 0.8020833333333333
User 21423 AUC after training: 0.7986111111111112
User 21423 does not improve AUC. Reverting changes.
Training on augumented user 12147 17/50 current_auc = 0.8020833333333333
User 12147 AUC after training: 0.7986111111111112
User 12147 does not improve AUC. Reverting changes.
Training on augumented user 82220 18/50 current_auc = 0.8020833333333333
User 82220 AUC after training: 0.7916666666666666
User 82220 does not improve AUC. Reverting changes.
Training on augumented user 42236 19/50 current_auc = 0.8020833333333333
User 42236 AUC after training: 0.7951388888888888
User 42236 does not improve AUC. Reverting changes.
Training on augumented user 73796 20/50 current_auc = 0.8020833333333333
User 73796 AUC after training: 0.7986111111111112
User 73796 does not improve AUC. Reverting changes.
Training on augumented user 33414 21/50 current_auc = 0.8020833333333333
User 33414 AUC after training: 0.7986111111111112
User 33414 does not improve AUC. Reverting changes.
Training on augumented user 21502 22/50 current_auc = 0.8020833333333333
User 21502 AUC after training: 0.7986111111111112
User 21502 does not improve AUC. Reverting changes.
Training on augumented user 86758 23/50 current_auc = 0.8020833333333333
User 86758 AUC after training: 0.7986111111111112
User 86758 does not improve AUC. Reverting changes.
Training on augumented user 13714 24/50 current_auc = 0.8020833333333333
User 13714 AUC after training: 0.7986111111111112
User 13714 does not improve AUC. Reverting changes.
Training on augumented user 30353 25/50 current_auc = 0.8020833333333333
User 30353 AUC after training: 0.8020833333333333
User 30353 does not improve AUC. Reverting changes.
Training on augumented user 34690 26/50 current_auc = 0.8020833333333333
User 34690 AUC after training: 0.7951388888888888
User 34690 does not improve AUC. Reverting changes.
Training on augumented user 110915 27/50 current_auc = 0.8020833333333333
User 110915 AUC after training: 0.7951388888888888
User 110915 does not improve AUC. Reverting changes.
Training on augumented user 125506 28/50 current_auc = 0.8020833333333333
User 125506 AUC after training: 0.8020833333333333
User 125506 does not improve AUC. Reverting changes.
Training on augumented user 125499 29/50 current_auc = 0.8020833333333333
User 125499 AUC after training: 0.7951388888888888
User 125499 does not improve AUC. Reverting changes.
Training on augumented user 57839 30/50 current_auc = 0.8020833333333333
User 57839 AUC after training: 0.7986111111111112
User 57839 does not improve AUC. Reverting changes.
Training on augumented user 85966 31/50 current_auc = 0.8020833333333333
User 85966 AUC after training: 0.8020833333333333
User 85966 does not improve AUC. Reverting changes.
Training on augumented user 38777 32/50 current_auc = 0.8020833333333333
User 38777 AUC after training: 0.7986111111111112
User 38777 does not improve AUC. Reverting changes.
Training on augumented user 3245 33/50 current_auc = 0.8020833333333333
User 3245 AUC after training: 0.7986111111111112
User 3245 does not improve AUC. Reverting changes.
Training on augumented user 7959 34/50 current_auc = 0.8020833333333333
User 7959 AUC after training: 0.7986111111111112
User 7959 does not improve AUC. Reverting changes.
Training on augumented user 42126 35/50 current_auc = 0.8020833333333333
User 42126 AUC after training: 0.7986111111111112
User 42126 does not improve AUC. Reverting changes.
Training on augumented user 40275 36/50 current_auc = 0.8020833333333333
User 40275 AUC after training: 0.7986111111111112
User 40275 does not improve AUC. Reverting changes.
Training on augumented user 72976 37/50 current_auc = 0.8020833333333333
User 72976 AUC after training: 0.8020833333333333
User 72976 does not improve AUC. Reverting changes.
Training on augumented user 40669 38/50 current_auc = 0.8020833333333333
User 40669 AUC after training: 0.7951388888888888
User 40669 does not improve AUC. Reverting changes.
Training on augumented user 101057 39/50 current_auc = 0.8020833333333333
User 101057 AUC after training: 0.8020833333333333
User 101057 does not improve AUC. Reverting changes.
Training on augumented user 107109 40/50 current_auc = 0.8020833333333333
User 107109 AUC after training: 0.7951388888888888
User 107109 does not improve AUC. Reverting changes.
Training on augumented user 119980 41/50 current_auc = 0.8020833333333333
User 119980 AUC after training: 0.7951388888888888
User 119980 does not improve AUC. Reverting changes.
Training on augumented user 80586 42/50 current_auc = 0.8020833333333333
User 80586 AUC after training: 0.7986111111111112
User 80586 does not improve AUC. Reverting changes.
Training on augumented user 21782 43/50 current_auc = 0.8020833333333333
User 21782 AUC after training: 0.7986111111111112
User 21782 does not improve AUC. Reverting changes.
Training on augumented user 63445 44/50 current_auc = 0.8020833333333333
User 63445 AUC after training: 0.7986111111111112
User 63445 does not improve AUC. Reverting changes.
Training on augumented user 103289 45/50 current_auc = 0.8020833333333333
User 103289 AUC after training: 0.8020833333333333
User 103289 does not improve AUC. Reverting changes.
Training on augumented user 31887 46/50 current_auc = 0.8020833333333333
User 31887 AUC after training: 0.7881944444444444
User 31887 does not improve AUC. Reverting changes.
Training on augumented user 14551 47/50 current_auc = 0.8020833333333333
User 14551 AUC after training: 0.8125
User 14551 improves AUC. Keeping the model.
Training on augumented user 23599 48/50 current_auc = 0.8125
User 23599 AUC after training: 0.8125
User 23599 does not improve AUC. Reverting changes.
Training on augumented user 81121 49/50 current_auc = 0.8125
User 81121 AUC after training: 0.8125
User 81121 does not improve AUC. Reverting changes.
[2024-12-02 18:59:51.078732] start test user 113610 152/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:59:51.650405] start test user 113610 152/567 recall augumented users by random, augumented_users = [66645, 37285, 123159, 47364, 113140, 258, 130897, 95783, 127383, 135759, 21774, 19911, 121297, 114226, 75126, 24838, 118344, 15606, 109231, 2346, 52551, 113124, 1313, 54351, 78160, 134956, 91038, 79056, 9933, 116495, 96346, 132775, 53235, 118352, 99176, 80852, 101222, 28055, 112176, 51033, 84427, 42518, 36168, 126179, 89553, 20347, 26555, 120425, 76090, 11155]
[2024-12-02 18:59:51.669062] user = 113610 Cloud 152/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:59:51.704819] user = 113610 Local 152/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:59:52.073865] user = 113610 Local+ 152/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:59:54.765755] user = 113610 MPDA- 152/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 66645 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66645 AUC after training: 0.5
User 66645 does not improve AUC. Reverting changes.
Training on augumented user 37285 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37285 AUC after training: 0.5
User 37285 does not improve AUC. Reverting changes.
Training on augumented user 123159 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123159 AUC after training: 0.5
User 123159 does not improve AUC. Reverting changes.
Training on augumented user 47364 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47364 AUC after training: 0.5
User 47364 does not improve AUC. Reverting changes.
Training on augumented user 113140 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113140 AUC after training: 0.5
User 113140 does not improve AUC. Reverting changes.
Training on augumented user 258 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 258 AUC after training: 0.5
User 258 does not improve AUC. Reverting changes.
Training on augumented user 130897 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130897 AUC after training: 0.5
User 130897 does not improve AUC. Reverting changes.
Training on augumented user 95783 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95783 AUC after training: 0.5
User 95783 does not improve AUC. Reverting changes.
Training on augumented user 127383 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127383 AUC after training: 0.5
User 127383 does not improve AUC. Reverting changes.
Training on augumented user 135759 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 135759 AUC after training: 0.5
User 135759 does not improve AUC. Reverting changes.
Training on augumented user 21774 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21774 AUC after training: 0.5
User 21774 does not improve AUC. Reverting changes.
Training on augumented user 19911 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19911 AUC after training: 0.5
User 19911 does not improve AUC. Reverting changes.
Training on augumented user 121297 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121297 AUC after training: 0.5
User 121297 does not improve AUC. Reverting changes.
Training on augumented user 114226 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114226 AUC after training: 0.5
User 114226 does not improve AUC. Reverting changes.
Training on augumented user 75126 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75126 AUC after training: 0.5
User 75126 does not improve AUC. Reverting changes.
Training on augumented user 24838 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24838 AUC after training: 0.5
User 24838 does not improve AUC. Reverting changes.
Training on augumented user 118344 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118344 AUC after training: 0.5
User 118344 does not improve AUC. Reverting changes.
Training on augumented user 15606 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15606 AUC after training: 0.5
User 15606 does not improve AUC. Reverting changes.
Training on augumented user 109231 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109231 AUC after training: 0.5
User 109231 does not improve AUC. Reverting changes.
Training on augumented user 2346 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2346 AUC after training: 0.5
User 2346 does not improve AUC. Reverting changes.
Training on augumented user 52551 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 52551 AUC after training: 0.5
User 52551 does not improve AUC. Reverting changes.
Training on augumented user 113124 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113124 AUC after training: 0.5
User 113124 does not improve AUC. Reverting changes.
Training on augumented user 1313 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1313 AUC after training: 0.5
User 1313 does not improve AUC. Reverting changes.
Training on augumented user 54351 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54351 AUC after training: 0.5
User 54351 does not improve AUC. Reverting changes.
Training on augumented user 78160 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 78160 AUC after training: 0.5
User 78160 does not improve AUC. Reverting changes.
Training on augumented user 134956 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134956 AUC after training: 0.5
User 134956 does not improve AUC. Reverting changes.
Training on augumented user 91038 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91038 AUC after training: 0.5
User 91038 does not improve AUC. Reverting changes.
Training on augumented user 79056 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79056 AUC after training: 0.5
User 79056 does not improve AUC. Reverting changes.
Training on augumented user 9933 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9933 AUC after training: 0.5
User 9933 does not improve AUC. Reverting changes.
Training on augumented user 116495 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116495 AUC after training: 0.5
User 116495 does not improve AUC. Reverting changes.
Training on augumented user 96346 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96346 AUC after training: 0.5
User 96346 does not improve AUC. Reverting changes.
Training on augumented user 132775 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132775 AUC after training: 0.5
User 132775 does not improve AUC. Reverting changes.
Training on augumented user 53235 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53235 AUC after training: 0.5
User 53235 does not improve AUC. Reverting changes.
Training on augumented user 118352 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118352 AUC after training: 0.5
User 118352 does not improve AUC. Reverting changes.
Training on augumented user 99176 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99176 AUC after training: 0.5
User 99176 does not improve AUC. Reverting changes.
Training on augumented user 80852 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80852 AUC after training: 0.5
User 80852 does not improve AUC. Reverting changes.
Training on augumented user 101222 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101222 AUC after training: 0.5
User 101222 does not improve AUC. Reverting changes.
Training on augumented user 28055 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28055 AUC after training: 0.5
User 28055 does not improve AUC. Reverting changes.
Training on augumented user 112176 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112176 AUC after training: 0.5
User 112176 does not improve AUC. Reverting changes.
Training on augumented user 51033 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51033 AUC after training: 0.5
User 51033 does not improve AUC. Reverting changes.
Training on augumented user 84427 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84427 AUC after training: 0.5
User 84427 does not improve AUC. Reverting changes.
Training on augumented user 42518 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42518 AUC after training: 0.5
User 42518 does not improve AUC. Reverting changes.
Training on augumented user 36168 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36168 AUC after training: 0.5
User 36168 does not improve AUC. Reverting changes.
Training on augumented user 126179 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126179 AUC after training: 0.5
User 126179 does not improve AUC. Reverting changes.
Training on augumented user 89553 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89553 AUC after training: 0.5
User 89553 does not improve AUC. Reverting changes.
Training on augumented user 20347 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20347 AUC after training: 0.5
User 20347 does not improve AUC. Reverting changes.
Training on augumented user 26555 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26555 AUC after training: 0.5
User 26555 does not improve AUC. Reverting changes.
Training on augumented user 120425 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120425 AUC after training: 0.5
User 120425 does not improve AUC. Reverting changes.
Training on augumented user 76090 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76090 AUC after training: 0.5
User 76090 does not improve AUC. Reverting changes.
Training on augumented user 11155 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11155 AUC after training: 0.5
User 11155 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:00:31.600844] start test user 113651 153/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:00:32.135552] start test user 113651 153/567 recall augumented users by random, augumented_users = [48128, 28711, 114846, 132582, 76665, 32704, 118565, 36919, 54175, 111634, 71356, 103705, 3034, 7983, 14932, 55839, 132283, 52931, 132573, 16546, 130606, 62569, 72799, 70058, 24890, 125596, 107042, 77143, 30637, 33217, 134822, 36254, 57704, 45334, 92945, 123384, 104727, 116329, 16646, 75208, 44237, 127361, 94493, 129103, 87928, 131278, 92893, 113711, 20550, 87488]
[2024-12-02 19:00:32.150636] user = 113651 Cloud 153/567
[2024-12-02 19:00:32.172390] user = 113651 Local 153/567
[2024-12-02 19:00:32.200421] user = 113651 Local+ 153/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:00:34.409099] user = 113651 MPDA- 153/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5928571428571429
Training on augumented user 48128 0/50 current_auc = 0.5928571428571429
User 48128 AUC after training: 0.5928571428571429
User 48128 does not improve AUC. Reverting changes.
Training on augumented user 28711 1/50 current_auc = 0.5928571428571429
User 28711 AUC after training: 0.5928571428571429
User 28711 does not improve AUC. Reverting changes.
Training on augumented user 114846 2/50 current_auc = 0.5928571428571429
User 114846 AUC after training: 0.5964285714285714
User 114846 improves AUC. Keeping the model.
Training on augumented user 132582 3/50 current_auc = 0.5964285714285714
User 132582 AUC after training: 0.6071428571428571
User 132582 improves AUC. Keeping the model.
Training on augumented user 76665 4/50 current_auc = 0.6071428571428571
User 76665 AUC after training: 0.6000000000000001
User 76665 does not improve AUC. Reverting changes.
Training on augumented user 32704 5/50 current_auc = 0.6071428571428571
User 32704 AUC after training: 0.6035714285714285
User 32704 does not improve AUC. Reverting changes.
Training on augumented user 118565 6/50 current_auc = 0.6071428571428571
User 118565 AUC after training: 0.5964285714285715
User 118565 does not improve AUC. Reverting changes.
Training on augumented user 36919 7/50 current_auc = 0.6071428571428571
User 36919 AUC after training: 0.5964285714285715
User 36919 does not improve AUC. Reverting changes.
Training on augumented user 54175 8/50 current_auc = 0.6071428571428571
User 54175 AUC after training: 0.6071428571428571
User 54175 does not improve AUC. Reverting changes.
Training on augumented user 111634 9/50 current_auc = 0.6071428571428571
User 111634 AUC after training: 0.6000000000000001
User 111634 does not improve AUC. Reverting changes.
Training on augumented user 71356 10/50 current_auc = 0.6071428571428571
User 71356 AUC after training: 0.6107142857142858
User 71356 improves AUC. Keeping the model.
Training on augumented user 103705 11/50 current_auc = 0.6107142857142858
User 103705 AUC after training: 0.6071428571428572
User 103705 does not improve AUC. Reverting changes.
Training on augumented user 3034 12/50 current_auc = 0.6107142857142858
User 3034 AUC after training: 0.6035714285714286
User 3034 does not improve AUC. Reverting changes.
Training on augumented user 7983 13/50 current_auc = 0.6107142857142858
User 7983 AUC after training: 0.6178571428571429
User 7983 improves AUC. Keeping the model.
Training on augumented user 14932 14/50 current_auc = 0.6178571428571429
User 14932 AUC after training: 0.6178571428571429
User 14932 does not improve AUC. Reverting changes.
Training on augumented user 55839 15/50 current_auc = 0.6178571428571429
User 55839 AUC after training: 0.6178571428571429
User 55839 does not improve AUC. Reverting changes.
Training on augumented user 132283 16/50 current_auc = 0.6178571428571429
User 132283 AUC after training: 0.6071428571428572
User 132283 does not improve AUC. Reverting changes.
Training on augumented user 52931 17/50 current_auc = 0.6178571428571429
User 52931 AUC after training: 0.6071428571428572
User 52931 does not improve AUC. Reverting changes.
Training on augumented user 132573 18/50 current_auc = 0.6178571428571429
User 132573 AUC after training: 0.6178571428571429
User 132573 does not improve AUC. Reverting changes.
Training on augumented user 16546 19/50 current_auc = 0.6178571428571429
User 16546 AUC after training: 0.6178571428571429
User 16546 does not improve AUC. Reverting changes.
Training on augumented user 130606 20/50 current_auc = 0.6178571428571429
User 130606 AUC after training: 0.6107142857142857
User 130606 does not improve AUC. Reverting changes.
Training on augumented user 62569 21/50 current_auc = 0.6178571428571429
User 62569 AUC after training: 0.6071428571428572
User 62569 does not improve AUC. Reverting changes.
Training on augumented user 72799 22/50 current_auc = 0.6178571428571429
User 72799 AUC after training: 0.6142857142857143
User 72799 does not improve AUC. Reverting changes.
Training on augumented user 70058 23/50 current_auc = 0.6178571428571429
User 70058 AUC after training: 0.6178571428571429
User 70058 does not improve AUC. Reverting changes.
Training on augumented user 24890 24/50 current_auc = 0.6178571428571429
User 24890 AUC after training: 0.6178571428571429
User 24890 does not improve AUC. Reverting changes.
Training on augumented user 125596 25/50 current_auc = 0.6178571428571429
User 125596 AUC after training: 0.5928571428571429
User 125596 does not improve AUC. Reverting changes.
Training on augumented user 107042 26/50 current_auc = 0.6178571428571429
User 107042 AUC after training: 0.6214285714285714
User 107042 improves AUC. Keeping the model.
Training on augumented user 77143 27/50 current_auc = 0.6214285714285714
User 77143 AUC after training: 0.6178571428571429
User 77143 does not improve AUC. Reverting changes.
Training on augumented user 30637 28/50 current_auc = 0.6214285714285714
User 30637 AUC after training: 0.625
User 30637 improves AUC. Keeping the model.
Training on augumented user 33217 29/50 current_auc = 0.625
User 33217 AUC after training: 0.625
User 33217 does not improve AUC. Reverting changes.
Training on augumented user 134822 30/50 current_auc = 0.625
User 134822 AUC after training: 0.6214285714285714
User 134822 does not improve AUC. Reverting changes.
Training on augumented user 36254 31/50 current_auc = 0.625
User 36254 AUC after training: 0.6107142857142858
User 36254 does not improve AUC. Reverting changes.
Training on augumented user 57704 32/50 current_auc = 0.625
User 57704 AUC after training: 0.625
User 57704 does not improve AUC. Reverting changes.
Training on augumented user 45334 33/50 current_auc = 0.625
User 45334 AUC after training: 0.6214285714285714
User 45334 does not improve AUC. Reverting changes.
Training on augumented user 92945 34/50 current_auc = 0.625
User 92945 AUC after training: 0.6214285714285714
User 92945 does not improve AUC. Reverting changes.
Training on augumented user 123384 35/50 current_auc = 0.625
User 123384 AUC after training: 0.6214285714285714
User 123384 does not improve AUC. Reverting changes.
Training on augumented user 104727 36/50 current_auc = 0.625
User 104727 AUC after training: 0.6142857142857143
User 104727 does not improve AUC. Reverting changes.
Training on augumented user 116329 37/50 current_auc = 0.625
User 116329 AUC after training: 0.6214285714285714
User 116329 does not improve AUC. Reverting changes.
Training on augumented user 16646 38/50 current_auc = 0.625
User 16646 AUC after training: 0.6214285714285714
User 16646 does not improve AUC. Reverting changes.
Training on augumented user 75208 39/50 current_auc = 0.625
User 75208 AUC after training: 0.6214285714285714
User 75208 does not improve AUC. Reverting changes.
Training on augumented user 44237 40/50 current_auc = 0.625
User 44237 AUC after training: 0.6107142857142857
User 44237 does not improve AUC. Reverting changes.
Training on augumented user 127361 41/50 current_auc = 0.625
User 127361 AUC after training: 0.5857142857142856
User 127361 does not improve AUC. Reverting changes.
Training on augumented user 94493 42/50 current_auc = 0.625
User 94493 AUC after training: 0.6214285714285714
User 94493 does not improve AUC. Reverting changes.
Training on augumented user 129103 43/50 current_auc = 0.625
User 129103 AUC after training: 0.6214285714285714
User 129103 does not improve AUC. Reverting changes.
Training on augumented user 87928 44/50 current_auc = 0.625
User 87928 AUC after training: 0.6214285714285714
User 87928 does not improve AUC. Reverting changes.
Training on augumented user 131278 45/50 current_auc = 0.625
User 131278 AUC after training: 0.6214285714285714
User 131278 does not improve AUC. Reverting changes.
Training on augumented user 92893 46/50 current_auc = 0.625
User 92893 AUC after training: 0.6000000000000001
User 92893 does not improve AUC. Reverting changes.
Training on augumented user 113711 47/50 current_auc = 0.625
User 113711 AUC after training: 0.6214285714285714
User 113711 does not improve AUC. Reverting changes.
Training on augumented user 20550 48/50 current_auc = 0.625
User 20550 AUC after training: 0.6214285714285714
User 20550 does not improve AUC. Reverting changes.
Training on augumented user 87488 49/50 current_auc = 0.625
User 87488 AUC after training: 0.6214285714285714
User 87488 does not improve AUC. Reverting changes.
[2024-12-02 19:01:07.742404] start test user 113663 154/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:01:08.642582] start test user 113663 154/567 recall augumented users by random, augumented_users = [109876, 46049, 137693, 115107, 103537, 68229, 63778, 79809, 122373, 2296, 14775, 58434, 91568, 110700, 27025, 9613, 103161, 75378, 116224, 23335, 113012, 120483, 8114, 4197, 24427, 9435, 26664, 108397, 75876, 4996, 92871, 36082, 10731, 72852, 39395, 87573, 110348, 4422, 128320, 124520, 117737, 32965, 87877, 90026, 8034, 55788, 131674, 71642, 135499, 40291]
[2024-12-02 19:01:08.704258] user = 113663 Cloud 154/567
[2024-12-02 19:01:08.749485] user = 113663 Local 154/567
[2024-12-02 19:01:09.068583] user = 113663 Local+ 154/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:01:13.793983] user = 113663 MPDA- 154/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4444444444444444
Training on augumented user 109876 0/50 current_auc = 0.4444444444444444
User 109876 AUC after training: 0.4444444444444444
User 109876 does not improve AUC. Reverting changes.
Training on augumented user 46049 1/50 current_auc = 0.4444444444444444
User 46049 AUC after training: 0.4444444444444444
User 46049 does not improve AUC. Reverting changes.
Training on augumented user 137693 2/50 current_auc = 0.4444444444444444
User 137693 AUC after training: 0.4444444444444444
User 137693 does not improve AUC. Reverting changes.
Training on augumented user 115107 3/50 current_auc = 0.4444444444444444
User 115107 AUC after training: 0.4444444444444444
User 115107 does not improve AUC. Reverting changes.
Training on augumented user 103537 4/50 current_auc = 0.4444444444444444
User 103537 AUC after training: 0.4444444444444444
User 103537 does not improve AUC. Reverting changes.
Training on augumented user 68229 5/50 current_auc = 0.4444444444444444
User 68229 AUC after training: 0.4444444444444444
User 68229 does not improve AUC. Reverting changes.
Training on augumented user 63778 6/50 current_auc = 0.4444444444444444
User 63778 AUC after training: 0.4444444444444444
User 63778 does not improve AUC. Reverting changes.
Training on augumented user 79809 7/50 current_auc = 0.4444444444444444
User 79809 AUC after training: 0.4444444444444444
User 79809 does not improve AUC. Reverting changes.
Training on augumented user 122373 8/50 current_auc = 0.4444444444444444
User 122373 AUC after training: 0.4444444444444444
User 122373 does not improve AUC. Reverting changes.
Training on augumented user 2296 9/50 current_auc = 0.4444444444444444
User 2296 AUC after training: 0.4444444444444444
User 2296 does not improve AUC. Reverting changes.
Training on augumented user 14775 10/50 current_auc = 0.4444444444444444
User 14775 AUC after training: 0.4444444444444444
User 14775 does not improve AUC. Reverting changes.
Training on augumented user 58434 11/50 current_auc = 0.4444444444444444
User 58434 AUC after training: 0.4444444444444444
User 58434 does not improve AUC. Reverting changes.
Training on augumented user 91568 12/50 current_auc = 0.4444444444444444
User 91568 AUC after training: 0.4444444444444444
User 91568 does not improve AUC. Reverting changes.
Training on augumented user 110700 13/50 current_auc = 0.4444444444444444
User 110700 AUC after training: 0.4444444444444444
User 110700 does not improve AUC. Reverting changes.
Training on augumented user 27025 14/50 current_auc = 0.4444444444444444
User 27025 AUC after training: 0.4444444444444444
User 27025 does not improve AUC. Reverting changes.
Training on augumented user 9613 15/50 current_auc = 0.4444444444444444
User 9613 AUC after training: 0.4444444444444444
User 9613 does not improve AUC. Reverting changes.
Training on augumented user 103161 16/50 current_auc = 0.4444444444444444
User 103161 AUC after training: 0.4444444444444444
User 103161 does not improve AUC. Reverting changes.
Training on augumented user 75378 17/50 current_auc = 0.4444444444444444
User 75378 AUC after training: 0.4444444444444444
User 75378 does not improve AUC. Reverting changes.
Training on augumented user 116224 18/50 current_auc = 0.4444444444444444
User 116224 AUC after training: 0.4444444444444444
User 116224 does not improve AUC. Reverting changes.
Training on augumented user 23335 19/50 current_auc = 0.4444444444444444
User 23335 AUC after training: 0.4444444444444444
User 23335 does not improve AUC. Reverting changes.
Training on augumented user 113012 20/50 current_auc = 0.4444444444444444
User 113012 AUC after training: 0.4444444444444444
User 113012 does not improve AUC. Reverting changes.
Training on augumented user 120483 21/50 current_auc = 0.4444444444444444
User 120483 AUC after training: 0.4444444444444444
User 120483 does not improve AUC. Reverting changes.
Training on augumented user 8114 22/50 current_auc = 0.4444444444444444
User 8114 AUC after training: 0.4444444444444444
User 8114 does not improve AUC. Reverting changes.
Training on augumented user 4197 23/50 current_auc = 0.4444444444444444
User 4197 AUC after training: 0.4444444444444444
User 4197 does not improve AUC. Reverting changes.
Training on augumented user 24427 24/50 current_auc = 0.4444444444444444
User 24427 AUC after training: 0.4444444444444444
User 24427 does not improve AUC. Reverting changes.
Training on augumented user 9435 25/50 current_auc = 0.4444444444444444
User 9435 AUC after training: 0.4444444444444444
User 9435 does not improve AUC. Reverting changes.
Training on augumented user 26664 26/50 current_auc = 0.4444444444444444
User 26664 AUC after training: 0.4444444444444444
User 26664 does not improve AUC. Reverting changes.
Training on augumented user 108397 27/50 current_auc = 0.4444444444444444
User 108397 AUC after training: 0.4444444444444444
User 108397 does not improve AUC. Reverting changes.
Training on augumented user 75876 28/50 current_auc = 0.4444444444444444
User 75876 AUC after training: 0.4444444444444444
User 75876 does not improve AUC. Reverting changes.
Training on augumented user 4996 29/50 current_auc = 0.4444444444444444
User 4996 AUC after training: 0.4444444444444444
User 4996 does not improve AUC. Reverting changes.
Training on augumented user 92871 30/50 current_auc = 0.4444444444444444
User 92871 AUC after training: 0.4444444444444444
User 92871 does not improve AUC. Reverting changes.
Training on augumented user 36082 31/50 current_auc = 0.4444444444444444
User 36082 AUC after training: 0.4444444444444444
User 36082 does not improve AUC. Reverting changes.
Training on augumented user 10731 32/50 current_auc = 0.4444444444444444
User 10731 AUC after training: 0.4444444444444444
User 10731 does not improve AUC. Reverting changes.
Training on augumented user 72852 33/50 current_auc = 0.4444444444444444
User 72852 AUC after training: 0.4444444444444444
User 72852 does not improve AUC. Reverting changes.
Training on augumented user 39395 34/50 current_auc = 0.4444444444444444
User 39395 AUC after training: 0.4444444444444444
User 39395 does not improve AUC. Reverting changes.
Training on augumented user 87573 35/50 current_auc = 0.4444444444444444
User 87573 AUC after training: 0.4444444444444444
User 87573 does not improve AUC. Reverting changes.
Training on augumented user 110348 36/50 current_auc = 0.4444444444444444
User 110348 AUC after training: 0.4444444444444444
User 110348 does not improve AUC. Reverting changes.
Training on augumented user 4422 37/50 current_auc = 0.4444444444444444
User 4422 AUC after training: 0.4444444444444444
User 4422 does not improve AUC. Reverting changes.
Training on augumented user 128320 38/50 current_auc = 0.4444444444444444
User 128320 AUC after training: 0.4444444444444444
User 128320 does not improve AUC. Reverting changes.
Training on augumented user 124520 39/50 current_auc = 0.4444444444444444
User 124520 AUC after training: 0.4444444444444444
User 124520 does not improve AUC. Reverting changes.
Training on augumented user 117737 40/50 current_auc = 0.4444444444444444
User 117737 AUC after training: 0.4444444444444444
User 117737 does not improve AUC. Reverting changes.
Training on augumented user 32965 41/50 current_auc = 0.4444444444444444
User 32965 AUC after training: 0.4444444444444444
User 32965 does not improve AUC. Reverting changes.
Training on augumented user 87877 42/50 current_auc = 0.4444444444444444
User 87877 AUC after training: 0.4444444444444444
User 87877 does not improve AUC. Reverting changes.
Training on augumented user 90026 43/50 current_auc = 0.4444444444444444
User 90026 AUC after training: 0.4444444444444444
User 90026 does not improve AUC. Reverting changes.
Training on augumented user 8034 44/50 current_auc = 0.4444444444444444
User 8034 AUC after training: 0.4444444444444444
User 8034 does not improve AUC. Reverting changes.
Training on augumented user 55788 45/50 current_auc = 0.4444444444444444
User 55788 AUC after training: 0.4444444444444444
User 55788 does not improve AUC. Reverting changes.
Training on augumented user 131674 46/50 current_auc = 0.4444444444444444
User 131674 AUC after training: 0.4444444444444444
User 131674 does not improve AUC. Reverting changes.
Training on augumented user 71642 47/50 current_auc = 0.4444444444444444
User 71642 AUC after training: 0.4444444444444444
User 71642 does not improve AUC. Reverting changes.
Training on augumented user 135499 48/50 current_auc = 0.4444444444444444
User 135499 AUC after training: 0.4444444444444444
User 135499 does not improve AUC. Reverting changes.
Training on augumented user 40291 49/50 current_auc = 0.4444444444444444
User 40291 AUC after training: 0.4444444444444444
User 40291 does not improve AUC. Reverting changes.
[2024-12-02 19:01:44.109792] start test user 113693 155/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:01:44.581833] start test user 113693 155/567 recall augumented users by random, augumented_users = [33429, 84756, 95199, 14574, 93884, 131633, 25825, 135377, 42345, 7051, 125988, 104707, 103045, 52890, 136463, 80099, 119791, 37493, 58494, 36969, 97624, 72123, 82892, 40737, 93670, 52637, 76888, 137284, 74359, 11554, 94082, 26481, 87164, 79991, 43586, 16522, 48206, 58598, 127456, 89923, 2890, 68254, 48123, 8043, 48988, 38939, 30268, 132067, 122923, 387]
[2024-12-02 19:01:44.596914] user = 113693 Cloud 155/567
[2024-12-02 19:01:44.625574] user = 113693 Local 155/567
[2024-12-02 19:01:44.685621] user = 113693 Local+ 155/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:01:47.176783] user = 113693 MPDA- 155/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6496062992125985
Training on augumented user 33429 0/50 current_auc = 0.6496062992125985
User 33429 AUC after training: 0.6501608073638683
User 33429 improves AUC. Keeping the model.
Training on augumented user 84756 1/50 current_auc = 0.6501608073638683
User 84756 AUC after training: 0.6502162581789953
User 84756 improves AUC. Keeping the model.
Training on augumented user 95199 2/50 current_auc = 0.6502162581789953
User 95199 AUC after training: 0.6505489630697572
User 95199 improves AUC. Keeping the model.
Training on augumented user 14574 3/50 current_auc = 0.6505489630697572
User 14574 AUC after training: 0.6506044138848842
User 14574 improves AUC. Keeping the model.
Training on augumented user 93884 4/50 current_auc = 0.6506044138848842
User 93884 AUC after training: 0.651269823666408
User 93884 improves AUC. Keeping the model.
Training on augumented user 131633 5/50 current_auc = 0.651269823666408
User 131633 AUC after training: 0.650659864700011
User 131633 does not improve AUC. Reverting changes.
Training on augumented user 25825 6/50 current_auc = 0.651269823666408
User 25825 AUC after training: 0.6500499057336143
User 25825 does not improve AUC. Reverting changes.
Training on augumented user 135377 7/50 current_auc = 0.651269823666408
User 135377 AUC after training: 0.6511589220361539
User 135377 does not improve AUC. Reverting changes.
Training on augumented user 42345 8/50 current_auc = 0.651269823666408
User 42345 AUC after training: 0.6507153155151381
User 42345 does not improve AUC. Reverting changes.
Training on augumented user 7051 9/50 current_auc = 0.651269823666408
User 7051 AUC after training: 0.6501608073638683
User 7051 does not improve AUC. Reverting changes.
Training on augumented user 125988 10/50 current_auc = 0.651269823666408
User 125988 AUC after training: 0.6512698236664078
User 125988 does not improve AUC. Reverting changes.
Training on augumented user 104707 11/50 current_auc = 0.651269823666408
User 104707 AUC after training: 0.650826217145392
User 104707 does not improve AUC. Reverting changes.
Training on augumented user 103045 12/50 current_auc = 0.651269823666408
User 103045 AUC after training: 0.6510480204058999
User 103045 does not improve AUC. Reverting changes.
Training on augumented user 52890 13/50 current_auc = 0.651269823666408
User 52890 AUC after training: 0.6521015858933127
User 52890 improves AUC. Keeping the model.
Training on augumented user 136463 14/50 current_auc = 0.6521015858933127
User 136463 AUC after training: 0.6516025285571698
User 136463 does not improve AUC. Reverting changes.
Training on augumented user 80099 15/50 current_auc = 0.6521015858933127
User 80099 AUC after training: 0.6515470777420428
User 80099 does not improve AUC. Reverting changes.
Training on augumented user 119791 16/50 current_auc = 0.6521015858933127
User 119791 AUC after training: 0.6504380614395031
User 119791 does not improve AUC. Reverting changes.
Training on augumented user 37493 17/50 current_auc = 0.6521015858933127
User 37493 AUC after training: 0.6517688810025507
User 37493 does not improve AUC. Reverting changes.
Training on augumented user 58494 18/50 current_auc = 0.6521015858933127
User 58494 AUC after training: 0.6516579793722967
User 58494 does not improve AUC. Reverting changes.
Training on augumented user 36969 19/50 current_auc = 0.6521015858933127
User 36969 AUC after training: 0.6517134301874238
User 36969 does not improve AUC. Reverting changes.
Training on augumented user 97624 20/50 current_auc = 0.6521015858933127
User 97624 AUC after training: 0.6517688810025508
User 97624 does not improve AUC. Reverting changes.
Training on augumented user 72123 21/50 current_auc = 0.6521015858933127
User 72123 AUC after training: 0.6519906842630587
User 72123 does not improve AUC. Reverting changes.
Training on augumented user 82892 22/50 current_auc = 0.6521015858933127
User 82892 AUC after training: 0.6517688810025507
User 82892 does not improve AUC. Reverting changes.
Training on augumented user 40737 23/50 current_auc = 0.6521015858933127
User 40737 AUC after training: 0.6513807252966619
User 40737 does not improve AUC. Reverting changes.
Training on augumented user 93670 24/50 current_auc = 0.6521015858933127
User 93670 AUC after training: 0.6513807252966619
User 93670 does not improve AUC. Reverting changes.
Training on augumented user 52637 25/50 current_auc = 0.6521015858933127
User 52637 AUC after training: 0.6520461350781858
User 52637 does not improve AUC. Reverting changes.
Training on augumented user 76888 26/50 current_auc = 0.6521015858933127
User 76888 AUC after training: 0.6518243318176776
User 76888 does not improve AUC. Reverting changes.
Training on augumented user 137284 27/50 current_auc = 0.6521015858933127
User 137284 AUC after training: 0.6521015858933126
User 137284 does not improve AUC. Reverting changes.
Training on augumented user 74359 28/50 current_auc = 0.6521015858933127
User 74359 AUC after training: 0.6511589220361539
User 74359 does not improve AUC. Reverting changes.
Training on augumented user 11554 29/50 current_auc = 0.6521015858933127
User 11554 AUC after training: 0.6518243318176776
User 11554 does not improve AUC. Reverting changes.
Training on augumented user 94082 30/50 current_auc = 0.6521015858933127
User 94082 AUC after training: 0.6510480204058999
User 94082 does not improve AUC. Reverting changes.
Training on augumented user 26481 31/50 current_auc = 0.6521015858933127
User 26481 AUC after training: 0.6515470777420428
User 26481 does not improve AUC. Reverting changes.
Training on augumented user 87164 32/50 current_auc = 0.6521015858933127
User 87164 AUC after training: 0.6507153155151382
User 87164 does not improve AUC. Reverting changes.
Training on augumented user 79991 33/50 current_auc = 0.6521015858933127
User 79991 AUC after training: 0.6517134301874238
User 79991 does not improve AUC. Reverting changes.
Training on augumented user 43586 34/50 current_auc = 0.6521015858933127
User 43586 AUC after training: 0.6519352334479317
User 43586 does not improve AUC. Reverting changes.
Training on augumented user 16522 35/50 current_auc = 0.6521015858933127
User 16522 AUC after training: 0.6517688810025508
User 16522 does not improve AUC. Reverting changes.
Training on augumented user 48206 36/50 current_auc = 0.6521015858933127
User 48206 AUC after training: 0.6513807252966618
User 48206 does not improve AUC. Reverting changes.
Training on augumented user 58598 37/50 current_auc = 0.6521015858933127
User 58598 AUC after training: 0.651103471221027
User 58598 does not improve AUC. Reverting changes.
Training on augumented user 127456 38/50 current_auc = 0.6521015858933127
User 127456 AUC after training: 0.6517134301874238
User 127456 does not improve AUC. Reverting changes.
Training on augumented user 89923 39/50 current_auc = 0.6521015858933127
User 89923 AUC after training: 0.6521015858933126
User 89923 does not improve AUC. Reverting changes.
Training on augumented user 2890 40/50 current_auc = 0.6521015858933127
User 2890 AUC after training: 0.6517134301874238
User 2890 does not improve AUC. Reverting changes.
Training on augumented user 68254 41/50 current_auc = 0.6521015858933127
User 68254 AUC after training: 0.6515470777420428
User 68254 does not improve AUC. Reverting changes.
Training on augumented user 48123 42/50 current_auc = 0.6521015858933127
User 48123 AUC after training: 0.6518243318176776
User 48123 does not improve AUC. Reverting changes.
Training on augumented user 8043 43/50 current_auc = 0.6521015858933127
User 8043 AUC after training: 0.6519352334479317
User 8043 does not improve AUC. Reverting changes.
Training on augumented user 48988 44/50 current_auc = 0.6521015858933127
User 48988 AUC after training: 0.6519352334479317
User 48988 does not improve AUC. Reverting changes.
Training on augumented user 38939 45/50 current_auc = 0.6521015858933127
User 38939 AUC after training: 0.6516025285571698
User 38939 does not improve AUC. Reverting changes.
Training on augumented user 30268 46/50 current_auc = 0.6521015858933127
User 30268 AUC after training: 0.6520461350781855
User 30268 does not improve AUC. Reverting changes.
Training on augumented user 132067 47/50 current_auc = 0.6521015858933127
User 132067 AUC after training: 0.6513252744815349
User 132067 does not improve AUC. Reverting changes.
Training on augumented user 122923 48/50 current_auc = 0.6521015858933127
User 122923 AUC after training: 0.6518243318176777
User 122923 does not improve AUC. Reverting changes.
Training on augumented user 387 49/50 current_auc = 0.6521015858933127
User 387 AUC after training: 0.6514916269269158
User 387 does not improve AUC. Reverting changes.
[2024-12-02 19:02:19.721489] start test user 113770 156/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:02:20.423595] start test user 113770 156/567 recall augumented users by random, augumented_users = [4101, 101355, 59934, 72003, 43377, 113337, 6222, 128763, 137773, 132840, 63794, 108714, 94519, 55462, 66492, 71839, 19350, 48029, 33289, 112983, 95116, 50038, 134412, 75077, 61359, 65455, 42533, 91429, 82066, 43441, 47433, 101484, 29798, 117101, 93302, 94639, 107812, 41256, 61918, 80702, 67303, 73975, 116071, 136586, 65388, 23579, 54401, 114858, 112378, 83779]
[2024-12-02 19:02:20.453230] user = 113770 Cloud 156/567
[2024-12-02 19:02:20.508080] user = 113770 Local 156/567
[2024-12-02 19:02:20.733247] user = 113770 Local+ 156/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:02:23.258732] user = 113770 MPDA- 156/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5337644611984922
Training on augumented user 4101 0/50 current_auc = 0.5337644611984922
User 4101 AUC after training: 0.5333419992200702
User 4101 does not improve AUC. Reverting changes.
Training on augumented user 101355 1/50 current_auc = 0.5337644611984922
User 101355 AUC after training: 0.534024437800598
User 101355 improves AUC. Keeping the model.
Training on augumented user 59934 2/50 current_auc = 0.534024437800598
User 59934 AUC after training: 0.5342194202521773
User 59934 improves AUC. Keeping the model.
Training on augumented user 72003 3/50 current_auc = 0.5342194202521773
User 72003 AUC after training: 0.5341869231769141
User 72003 does not improve AUC. Reverting changes.
Training on augumented user 43377 4/50 current_auc = 0.5342194202521773
User 43377 AUC after training: 0.5342519173274406
User 43377 improves AUC. Keeping the model.
Training on augumented user 113337 5/50 current_auc = 0.5342519173274406
User 113337 AUC after training: 0.5349343559079683
User 113337 improves AUC. Keeping the model.
Training on augumented user 6222 6/50 current_auc = 0.5349343559079683
User 6222 AUC after training: 0.5349343559079682
User 6222 does not improve AUC. Reverting changes.
Training on augumented user 128763 7/50 current_auc = 0.5349343559079683
User 128763 AUC after training: 0.5322046015858573
User 128763 does not improve AUC. Reverting changes.
Training on augumented user 137773 8/50 current_auc = 0.5349343559079683
User 137773 AUC after training: 0.5351618354348109
User 137773 improves AUC. Keeping the model.
Training on augumented user 132840 9/50 current_auc = 0.5351618354348109
User 132840 AUC after training: 0.5353893149616534
User 132840 improves AUC. Keeping the model.
Training on augumented user 63794 10/50 current_auc = 0.5353893149616534
User 63794 AUC after training: 0.5356492915637593
User 63794 improves AUC. Keeping the model.
Training on augumented user 108714 11/50 current_auc = 0.5356492915637593
User 108714 AUC after training: 0.535324320811127
User 108714 does not improve AUC. Reverting changes.
Training on augumented user 94519 12/50 current_auc = 0.5356492915637593
User 94519 AUC after training: 0.5348693617574418
User 94519 does not improve AUC. Reverting changes.
Training on augumented user 55462 13/50 current_auc = 0.5356492915637593
User 55462 AUC after training: 0.536331730144287
User 55462 improves AUC. Keeping the model.
Training on augumented user 66492 14/50 current_auc = 0.536331730144287
User 66492 AUC after training: 0.5350643442090213
User 66492 does not improve AUC. Reverting changes.
Training on augumented user 71839 15/50 current_auc = 0.536331730144287
User 71839 AUC after training: 0.5356492915637593
User 71839 does not improve AUC. Reverting changes.
Training on augumented user 19350 16/50 current_auc = 0.536331730144287
User 19350 AUC after training: 0.5356167944884961
User 19350 does not improve AUC. Reverting changes.
Training on augumented user 48029 17/50 current_auc = 0.536331730144287
User 48029 AUC after training: 0.536884180423762
User 48029 improves AUC. Keeping the model.
Training on augumented user 33289 18/50 current_auc = 0.536884180423762
User 33289 AUC after training: 0.5370141687248148
User 33289 improves AUC. Keeping the model.
Training on augumented user 112983 19/50 current_auc = 0.5370141687248148
User 112983 AUC after training: 0.5360392564669179
User 112983 does not improve AUC. Reverting changes.
Training on augumented user 95116 20/50 current_auc = 0.5370141687248148
User 95116 AUC after training: 0.5371766541011309
User 95116 improves AUC. Keeping the model.
Training on augumented user 50038 21/50 current_auc = 0.5371766541011309
User 50038 AUC after training: 0.536884180423762
User 50038 does not improve AUC. Reverting changes.
Training on augumented user 134412 22/50 current_auc = 0.5371766541011309
User 134412 AUC after training: 0.537339139477447
User 134412 improves AUC. Keeping the model.
Training on augumented user 75077 23/50 current_auc = 0.537339139477447
User 75077 AUC after training: 0.5371116599506045
User 75077 does not improve AUC. Reverting changes.
Training on augumented user 61359 24/50 current_auc = 0.537339139477447
User 61359 AUC after training: 0.5386065254127128
User 61359 improves AUC. Keeping the model.
Training on augumented user 65455 25/50 current_auc = 0.5386065254127128
User 65455 AUC after training: 0.5394514493695567
User 65455 improves AUC. Keeping the model.
Training on augumented user 42533 26/50 current_auc = 0.5394514493695567
User 42533 AUC after training: 0.5398739113479787
User 42533 improves AUC. Keeping the model.
Training on augumented user 91429 27/50 current_auc = 0.5398739113479787
User 91429 AUC after training: 0.5385740283374496
User 91429 does not improve AUC. Reverting changes.
Training on augumented user 82066 28/50 current_auc = 0.5398739113479787
User 82066 AUC after training: 0.5401663850253478
User 82066 improves AUC. Keeping the model.
Training on augumented user 43441 29/50 current_auc = 0.5401663850253478
User 43441 AUC after training: 0.5403288704016638
User 43441 improves AUC. Keeping the model.
Training on augumented user 47433 30/50 current_auc = 0.5403288704016638
User 47433 AUC after training: 0.5407838294553491
User 47433 improves AUC. Keeping the model.
Training on augumented user 101484 31/50 current_auc = 0.5407838294553491
User 101484 AUC after training: 0.5401338879500845
User 101484 does not improve AUC. Reverting changes.
Training on augumented user 29798 32/50 current_auc = 0.5407838294553491
User 29798 AUC after training: 0.5403288704016639
User 29798 does not improve AUC. Reverting changes.
Training on augumented user 117101 33/50 current_auc = 0.5407838294553491
User 117101 AUC after training: 0.5409788119069284
User 117101 improves AUC. Keeping the model.
Training on augumented user 93302 34/50 current_auc = 0.5409788119069284
User 93302 AUC after training: 0.5413037826595606
User 93302 improves AUC. Keeping the model.
Training on augumented user 94639 35/50 current_auc = 0.5413037826595606
User 94639 AUC after training: 0.5409138177564019
User 94639 does not improve AUC. Reverting changes.
Training on augumented user 107812 36/50 current_auc = 0.5413037826595606
User 107812 AUC after training: 0.5416612504874562
User 107812 improves AUC. Keeping the model.
Training on augumented user 41256 37/50 current_auc = 0.5416612504874562
User 41256 AUC after training: 0.5417262446379826
User 41256 improves AUC. Keeping the model.
Training on augumented user 61918 38/50 current_auc = 0.5417262446379826
User 61918 AUC after training: 0.5418237358637723
User 61918 improves AUC. Keeping the model.
Training on augumented user 80702 39/50 current_auc = 0.5418237358637723
User 80702 AUC after training: 0.5413687768100871
User 80702 does not improve AUC. Reverting changes.
Training on augumented user 67303 40/50 current_auc = 0.5418237358637723
User 67303 AUC after training: 0.5414012738853504
User 67303 does not improve AUC. Reverting changes.
Training on augumented user 73975 41/50 current_auc = 0.5418237358637723
User 73975 AUC after training: 0.5418237358637723
User 73975 does not improve AUC. Reverting changes.
Training on augumented user 116071 42/50 current_auc = 0.5418237358637723
User 116071 AUC after training: 0.5417912387885091
User 116071 does not improve AUC. Reverting changes.
Training on augumented user 136586 43/50 current_auc = 0.5418237358637723
User 136586 AUC after training: 0.5423111919927206
User 136586 improves AUC. Keeping the model.
Training on augumented user 65388 44/50 current_auc = 0.5423111919927206
User 65388 AUC after training: 0.5427661510464058
User 65388 improves AUC. Keeping the model.
Training on augumented user 23579 45/50 current_auc = 0.5427661510464058
User 23579 AUC after training: 0.5446184843364097
User 23579 improves AUC. Keeping the model.
Training on augumented user 54401 46/50 current_auc = 0.5446184843364097
User 54401 AUC after training: 0.5435785779279865
User 54401 does not improve AUC. Reverting changes.
Training on augumented user 114858 47/50 current_auc = 0.5446184843364097
User 114858 AUC after training: 0.5459183673469388
User 114858 improves AUC. Keeping the model.
Training on augumented user 112378 48/50 current_auc = 0.5459183673469388
User 112378 AUC after training: 0.5450734433900948
User 112378 does not improve AUC. Reverting changes.
Training on augumented user 83779 49/50 current_auc = 0.5459183673469388
User 83779 AUC after training: 0.5469257766800988
User 83779 improves AUC. Keeping the model.
[2024-12-02 19:02:57.500442] start test user 113772 157/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:02:57.941995] start test user 113772 157/567 recall augumented users by random, augumented_users = [116027, 127014, 120152, 47658, 14462, 117224, 102952, 30201, 33106, 27569, 14372, 134267, 92010, 79143, 109651, 53034, 61951, 85572, 995, 130922, 14952, 91360, 136202, 33486, 20940, 62558, 45506, 24038, 133696, 103876, 8676, 36449, 746, 87425, 133705, 35641, 72092, 38451, 125461, 66011, 47758, 2554, 44908, 67684, 99531, 36129, 137395, 129325, 99300, 122567]
[2024-12-02 19:02:57.957006] user = 113772 Cloud 157/567
[2024-12-02 19:02:57.996978] user = 113772 Local 157/567
[2024-12-02 19:02:58.161428] user = 113772 Local+ 157/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:03:02.488252] user = 113772 MPDA- 157/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.45647969052224374
Training on augumented user 116027 0/50 current_auc = 0.45647969052224374
User 116027 AUC after training: 0.45551257253384914
User 116027 does not improve AUC. Reverting changes.
Training on augumented user 127014 1/50 current_auc = 0.45647969052224374
User 127014 AUC after training: 0.45519019987105097
User 127014 does not improve AUC. Reverting changes.
Training on augumented user 120152 2/50 current_auc = 0.45647969052224374
User 120152 AUC after training: 0.45486782720825275
User 120152 does not improve AUC. Reverting changes.
Training on augumented user 47658 3/50 current_auc = 0.45647969052224374
User 47658 AUC after training: 0.45551257253384914
User 47658 does not improve AUC. Reverting changes.
Training on augumented user 14462 4/50 current_auc = 0.45647969052224374
User 14462 AUC after training: 0.45422308188265637
User 14462 does not improve AUC. Reverting changes.
Training on augumented user 117224 5/50 current_auc = 0.45647969052224374
User 117224 AUC after training: 0.45486782720825275
User 117224 does not improve AUC. Reverting changes.
Training on augumented user 102952 6/50 current_auc = 0.45647969052224374
User 102952 AUC after training: 0.45583494519664736
User 102952 does not improve AUC. Reverting changes.
Training on augumented user 30201 7/50 current_auc = 0.45647969052224374
User 30201 AUC after training: 0.4558349451966473
User 30201 does not improve AUC. Reverting changes.
Training on augumented user 33106 8/50 current_auc = 0.45647969052224374
User 33106 AUC after training: 0.4545454545454546
User 33106 does not improve AUC. Reverting changes.
Training on augumented user 27569 9/50 current_auc = 0.45647969052224374
User 27569 AUC after training: 0.45357833655706
User 27569 does not improve AUC. Reverting changes.
Training on augumented user 14372 10/50 current_auc = 0.45647969052224374
User 14372 AUC after training: 0.45519019987105097
User 14372 does not improve AUC. Reverting changes.
Training on augumented user 134267 11/50 current_auc = 0.45647969052224374
User 134267 AUC after training: 0.45486782720825275
User 134267 does not improve AUC. Reverting changes.
Training on augumented user 92010 12/50 current_auc = 0.45647969052224374
User 92010 AUC after training: 0.45325596389426176
User 92010 does not improve AUC. Reverting changes.
Training on augumented user 79143 13/50 current_auc = 0.45647969052224374
User 79143 AUC after training: 0.45422308188265637
User 79143 does not improve AUC. Reverting changes.
Training on augumented user 109651 14/50 current_auc = 0.45647969052224374
User 109651 AUC after training: 0.45551257253384914
User 109651 does not improve AUC. Reverting changes.
Training on augumented user 53034 15/50 current_auc = 0.45647969052224374
User 53034 AUC after training: 0.45486782720825275
User 53034 does not improve AUC. Reverting changes.
Training on augumented user 61951 16/50 current_auc = 0.45647969052224374
User 61951 AUC after training: 0.45970341715022567
User 61951 improves AUC. Keeping the model.
Training on augumented user 85572 17/50 current_auc = 0.45970341715022567
User 85572 AUC after training: 0.45970341715022567
User 85572 does not improve AUC. Reverting changes.
Training on augumented user 995 18/50 current_auc = 0.45970341715022567
User 995 AUC after training: 0.4587362991618311
User 995 does not improve AUC. Reverting changes.
Training on augumented user 130922 19/50 current_auc = 0.45970341715022567
User 130922 AUC after training: 0.4574468085106383
User 130922 does not improve AUC. Reverting changes.
Training on augumented user 14952 20/50 current_auc = 0.45970341715022567
User 14952 AUC after training: 0.4574468085106383
User 14952 does not improve AUC. Reverting changes.
Training on augumented user 91360 21/50 current_auc = 0.45970341715022567
User 91360 AUC after training: 0.4597034171502256
User 91360 does not improve AUC. Reverting changes.
Training on augumented user 136202 22/50 current_auc = 0.45970341715022567
User 136202 AUC after training: 0.4577691811734365
User 136202 does not improve AUC. Reverting changes.
Training on augumented user 33486 23/50 current_auc = 0.45970341715022567
User 33486 AUC after training: 0.4584139264990329
User 33486 does not improve AUC. Reverting changes.
Training on augumented user 20940 24/50 current_auc = 0.45970341715022567
User 20940 AUC after training: 0.4571244358478401
User 20940 does not improve AUC. Reverting changes.
Training on augumented user 62558 25/50 current_auc = 0.45970341715022567
User 62558 AUC after training: 0.45744680851063835
User 62558 does not improve AUC. Reverting changes.
Training on augumented user 45506 26/50 current_auc = 0.45970341715022567
User 45506 AUC after training: 0.45905867182462934
User 45506 does not improve AUC. Reverting changes.
Training on augumented user 24038 27/50 current_auc = 0.45970341715022567
User 24038 AUC after training: 0.45905867182462934
User 24038 does not improve AUC. Reverting changes.
Training on augumented user 133696 28/50 current_auc = 0.45970341715022567
User 133696 AUC after training: 0.4584139264990329
User 133696 does not improve AUC. Reverting changes.
Training on augumented user 103876 29/50 current_auc = 0.45970341715022567
User 103876 AUC after training: 0.4580915538362347
User 103876 does not improve AUC. Reverting changes.
Training on augumented user 8676 30/50 current_auc = 0.45970341715022567
User 8676 AUC after training: 0.4587362991618311
User 8676 does not improve AUC. Reverting changes.
Training on augumented user 36449 31/50 current_auc = 0.45970341715022567
User 36449 AUC after training: 0.46099290780141844
User 36449 improves AUC. Keeping the model.
Training on augumented user 746 32/50 current_auc = 0.46099290780141844
User 746 AUC after training: 0.46034816247582205
User 746 does not improve AUC. Reverting changes.
Training on augumented user 87425 33/50 current_auc = 0.46099290780141844
User 87425 AUC after training: 0.461960025789813
User 87425 improves AUC. Keeping the model.
Training on augumented user 133705 34/50 current_auc = 0.461960025789813
User 133705 AUC after training: 0.46131528046421666
User 133705 does not improve AUC. Reverting changes.
Training on augumented user 35641 35/50 current_auc = 0.461960025789813
User 35641 AUC after training: 0.46099290780141844
User 35641 does not improve AUC. Reverting changes.
Training on augumented user 72092 36/50 current_auc = 0.461960025789813
User 72092 AUC after training: 0.4603481624758221
User 72092 does not improve AUC. Reverting changes.
Training on augumented user 38451 37/50 current_auc = 0.461960025789813
User 38451 AUC after training: 0.46034816247582205
User 38451 does not improve AUC. Reverting changes.
Training on augumented user 125461 38/50 current_auc = 0.461960025789813
User 125461 AUC after training: 0.45841392649903284
User 125461 does not improve AUC. Reverting changes.
Training on augumented user 66011 39/50 current_auc = 0.461960025789813
User 66011 AUC after training: 0.4590586718246292
User 66011 does not improve AUC. Reverting changes.
Training on augumented user 47758 40/50 current_auc = 0.461960025789813
User 47758 AUC after training: 0.4606705351386202
User 47758 does not improve AUC. Reverting changes.
Training on augumented user 2554 41/50 current_auc = 0.461960025789813
User 2554 AUC after training: 0.46034816247582205
User 2554 does not improve AUC. Reverting changes.
Training on augumented user 44908 42/50 current_auc = 0.461960025789813
User 44908 AUC after training: 0.46034816247582205
User 44908 does not improve AUC. Reverting changes.
Training on augumented user 67684 43/50 current_auc = 0.461960025789813
User 67684 AUC after training: 0.46131528046421666
User 67684 does not improve AUC. Reverting changes.
Training on augumented user 99531 44/50 current_auc = 0.461960025789813
User 99531 AUC after training: 0.46002578981302383
User 99531 does not improve AUC. Reverting changes.
Training on augumented user 36129 45/50 current_auc = 0.461960025789813
User 36129 AUC after training: 0.4609929078014184
User 36129 does not improve AUC. Reverting changes.
Training on augumented user 137395 46/50 current_auc = 0.461960025789813
User 137395 AUC after training: 0.4613152804642166
User 137395 does not improve AUC. Reverting changes.
Training on augumented user 129325 47/50 current_auc = 0.461960025789813
User 129325 AUC after training: 0.46002578981302383
User 129325 does not improve AUC. Reverting changes.
Training on augumented user 99300 48/50 current_auc = 0.461960025789813
User 99300 AUC after training: 0.46260477111540943
User 99300 improves AUC. Keeping the model.
Training on augumented user 122567 49/50 current_auc = 0.46260477111540943
User 122567 AUC after training: 0.46163765312701477
User 122567 does not improve AUC. Reverting changes.
[2024-12-02 19:03:34.234564] start test user 113806 158/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:03:34.659963] start test user 113806 158/567 recall augumented users by random, augumented_users = [66994, 66140, 79347, 46700, 120859, 80346, 110348, 133531, 3539, 3450, 100471, 119472, 63001, 132573, 12105, 35735, 68903, 102421, 87374, 30497, 3314, 98469, 23937, 101609, 124756, 116914, 11932, 130409, 28620, 120224, 136749, 65287, 13962, 8669, 95016, 25049, 29, 4796, 3938, 61513, 116, 112568, 22822, 96801, 95909, 127867, 110274, 127814, 124758, 126624]
[2024-12-02 19:03:34.677243] user = 113806 Cloud 158/567
[2024-12-02 19:03:34.698793] user = 113806 Local 158/567
[2024-12-02 19:03:34.963172] user = 113806 Local+ 158/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:03:37.892712] user = 113806 MPDA- 158/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6305903398926654
Training on augumented user 66994 0/50 current_auc = 0.6305903398926654
User 66994 AUC after training: 0.6303667262969589
User 66994 does not improve AUC. Reverting changes.
Training on augumented user 66140 1/50 current_auc = 0.6305903398926654
User 66140 AUC after training: 0.6309257602862254
User 66140 improves AUC. Keeping the model.
Training on augumented user 79347 2/50 current_auc = 0.6309257602862254
User 79347 AUC after training: 0.6320438282647586
User 79347 improves AUC. Keeping the model.
Training on augumented user 46700 3/50 current_auc = 0.6320438282647586
User 46700 AUC after training: 0.6319320214669052
User 46700 does not improve AUC. Reverting changes.
Training on augumented user 120859 4/50 current_auc = 0.6320438282647586
User 120859 AUC after training: 0.6322674418604651
User 120859 improves AUC. Keeping the model.
Training on augumented user 80346 5/50 current_auc = 0.6322674418604651
User 80346 AUC after training: 0.6320438282647586
User 80346 does not improve AUC. Reverting changes.
Training on augumented user 110348 6/50 current_auc = 0.6322674418604651
User 110348 AUC after training: 0.6326028622540251
User 110348 improves AUC. Keeping the model.
Training on augumented user 133531 7/50 current_auc = 0.6326028622540251
User 133531 AUC after training: 0.6311493738819322
User 133531 does not improve AUC. Reverting changes.
Training on augumented user 3539 8/50 current_auc = 0.6326028622540251
User 3539 AUC after training: 0.6326028622540251
User 3539 does not improve AUC. Reverting changes.
Training on augumented user 3450 9/50 current_auc = 0.6326028622540251
User 3450 AUC after training: 0.6324910554561718
User 3450 does not improve AUC. Reverting changes.
Training on augumented user 100471 10/50 current_auc = 0.6326028622540251
User 100471 AUC after training: 0.6292486583184258
User 100471 does not improve AUC. Reverting changes.
Training on augumented user 119472 11/50 current_auc = 0.6326028622540251
User 119472 AUC after training: 0.6328264758497317
User 119472 improves AUC. Keeping the model.
Training on augumented user 63001 12/50 current_auc = 0.6328264758497317
User 63001 AUC after training: 0.6318202146690519
User 63001 does not improve AUC. Reverting changes.
Training on augumented user 132573 13/50 current_auc = 0.6328264758497317
User 132573 AUC after training: 0.6320438282647586
User 132573 does not improve AUC. Reverting changes.
Training on augumented user 12105 14/50 current_auc = 0.6328264758497317
User 12105 AUC after training: 0.6332737030411449
User 12105 improves AUC. Keeping the model.
Training on augumented user 35735 15/50 current_auc = 0.6332737030411449
User 35735 AUC after training: 0.6323792486583185
User 35735 does not improve AUC. Reverting changes.
Training on augumented user 68903 16/50 current_auc = 0.6332737030411449
User 68903 AUC after training: 0.6338327370304114
User 68903 improves AUC. Keeping the model.
Training on augumented user 102421 17/50 current_auc = 0.6338327370304114
User 102421 AUC after training: 0.6324910554561717
User 102421 does not improve AUC. Reverting changes.
Training on augumented user 87374 18/50 current_auc = 0.6338327370304114
User 87374 AUC after training: 0.6338327370304114
User 87374 does not improve AUC. Reverting changes.
Training on augumented user 30497 19/50 current_auc = 0.6338327370304114
User 30497 AUC after training: 0.6330500894454383
User 30497 does not improve AUC. Reverting changes.
Training on augumented user 3314 20/50 current_auc = 0.6338327370304114
User 3314 AUC after training: 0.6345035778175313
User 3314 improves AUC. Keeping the model.
Training on augumented user 98469 21/50 current_auc = 0.6345035778175313
User 98469 AUC after training: 0.6336091234347049
User 98469 does not improve AUC. Reverting changes.
Training on augumented user 23937 22/50 current_auc = 0.6345035778175313
User 23937 AUC after training: 0.6339445438282648
User 23937 does not improve AUC. Reverting changes.
Training on augumented user 101609 23/50 current_auc = 0.6345035778175313
User 101609 AUC after training: 0.634727191413238
User 101609 improves AUC. Keeping the model.
Training on augumented user 124756 24/50 current_auc = 0.634727191413238
User 124756 AUC after training: 0.6345035778175313
User 124756 does not improve AUC. Reverting changes.
Training on augumented user 116914 25/50 current_auc = 0.634727191413238
User 116914 AUC after training: 0.6346153846153846
User 116914 does not improve AUC. Reverting changes.
Training on augumented user 11932 26/50 current_auc = 0.634727191413238
User 11932 AUC after training: 0.6333855098389982
User 11932 does not improve AUC. Reverting changes.
Training on augumented user 130409 27/50 current_auc = 0.634727191413238
User 130409 AUC after training: 0.6345035778175313
User 130409 does not improve AUC. Reverting changes.
Training on augumented user 28620 28/50 current_auc = 0.634727191413238
User 28620 AUC after training: 0.6341681574239714
User 28620 does not improve AUC. Reverting changes.
Training on augumented user 120224 29/50 current_auc = 0.634727191413238
User 120224 AUC after training: 0.6348389982110912
User 120224 improves AUC. Keeping the model.
Training on augumented user 136749 30/50 current_auc = 0.6348389982110912
User 136749 AUC after training: 0.6348389982110912
User 136749 does not improve AUC. Reverting changes.
Training on augumented user 65287 31/50 current_auc = 0.6348389982110912
User 65287 AUC after training: 0.6336091234347049
User 65287 does not improve AUC. Reverting changes.
Training on augumented user 13962 32/50 current_auc = 0.6348389982110912
User 13962 AUC after training: 0.6341681574239714
User 13962 does not improve AUC. Reverting changes.
Training on augumented user 8669 33/50 current_auc = 0.6348389982110912
User 8669 AUC after training: 0.6353980322003577
User 8669 improves AUC. Keeping the model.
Training on augumented user 95016 34/50 current_auc = 0.6353980322003577
User 95016 AUC after training: 0.6349508050089446
User 95016 does not improve AUC. Reverting changes.
Training on augumented user 25049 35/50 current_auc = 0.6353980322003577
User 25049 AUC after training: 0.6350626118067978
User 25049 does not improve AUC. Reverting changes.
Training on augumented user 29 36/50 current_auc = 0.6353980322003577
User 29 AUC after training: 0.6355098389982111
User 29 improves AUC. Keeping the model.
Training on augumented user 4796 37/50 current_auc = 0.6355098389982111
User 4796 AUC after training: 0.6347271914132379
User 4796 does not improve AUC. Reverting changes.
Training on augumented user 3938 38/50 current_auc = 0.6355098389982111
User 3938 AUC after training: 0.6343917710196779
User 3938 does not improve AUC. Reverting changes.
Training on augumented user 61513 39/50 current_auc = 0.6355098389982111
User 61513 AUC after training: 0.6350626118067979
User 61513 does not improve AUC. Reverting changes.
Training on augumented user 116 40/50 current_auc = 0.6355098389982111
User 116 AUC after training: 0.6304785330948122
User 116 does not improve AUC. Reverting changes.
Training on augumented user 112568 41/50 current_auc = 0.6355098389982111
User 112568 AUC after training: 0.6351744186046512
User 112568 does not improve AUC. Reverting changes.
Training on augumented user 22822 42/50 current_auc = 0.6355098389982111
User 22822 AUC after training: 0.6350626118067979
User 22822 does not improve AUC. Reverting changes.
Training on augumented user 96801 43/50 current_auc = 0.6355098389982111
User 96801 AUC after training: 0.6331618962432917
User 96801 does not improve AUC. Reverting changes.
Training on augumented user 95909 44/50 current_auc = 0.6355098389982111
User 95909 AUC after training: 0.634391771019678
User 95909 does not improve AUC. Reverting changes.
Training on augumented user 127867 45/50 current_auc = 0.6355098389982111
User 127867 AUC after training: 0.6305903398926654
User 127867 does not improve AUC. Reverting changes.
Training on augumented user 110274 46/50 current_auc = 0.6355098389982111
User 110274 AUC after training: 0.6332737030411449
User 110274 does not improve AUC. Reverting changes.
Training on augumented user 127814 47/50 current_auc = 0.6355098389982111
User 127814 AUC after training: 0.6351744186046512
User 127814 does not improve AUC. Reverting changes.
Training on augumented user 124758 48/50 current_auc = 0.6355098389982111
User 124758 AUC after training: 0.6331618962432916
User 124758 does not improve AUC. Reverting changes.
Training on augumented user 126624 49/50 current_auc = 0.6355098389982111
User 126624 AUC after training: 0.6342799642218248
User 126624 does not improve AUC. Reverting changes.
[2024-12-02 19:04:10.143717] start test user 113873 159/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:04:10.666436] start test user 113873 159/567 recall augumented users by random, augumented_users = [94676, 62199, 8031, 38939, 57801, 26997, 78882, 106945, 134708, 1425, 42718, 106770, 79523, 71597, 109505, 107923, 32083, 30917, 616, 135761, 67955, 86245, 35406, 111701, 114157, 130744, 131902, 58721, 59787, 16443, 127336, 129185, 36760, 69657, 6085, 132336, 115779, 98690, 83391, 54846, 66458, 15919, 93388, 53796, 114912, 11283, 82553, 74325, 4298, 88490]
[2024-12-02 19:04:10.683896] user = 113873 Cloud 159/567
[2024-12-02 19:04:10.694360] user = 113873 Local 159/567
[2024-12-02 19:04:10.742775] user = 113873 Local+ 159/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:04:12.889296] user = 113873 MPDA- 159/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.039999999999999994
Training on augumented user 94676 0/50 current_auc = 0.039999999999999994
User 94676 AUC after training: 0.039999999999999994
User 94676 does not improve AUC. Reverting changes.
Training on augumented user 62199 1/50 current_auc = 0.039999999999999994
User 62199 AUC after training: 0.0
User 62199 does not improve AUC. Reverting changes.
Training on augumented user 8031 2/50 current_auc = 0.039999999999999994
User 8031 AUC after training: 0.0
User 8031 does not improve AUC. Reverting changes.
Training on augumented user 38939 3/50 current_auc = 0.039999999999999994
User 38939 AUC after training: 0.039999999999999994
User 38939 does not improve AUC. Reverting changes.
Training on augumented user 57801 4/50 current_auc = 0.039999999999999994
User 57801 AUC after training: 0.0
User 57801 does not improve AUC. Reverting changes.
Training on augumented user 26997 5/50 current_auc = 0.039999999999999994
User 26997 AUC after training: 0.039999999999999994
User 26997 does not improve AUC. Reverting changes.
Training on augumented user 78882 6/50 current_auc = 0.039999999999999994
User 78882 AUC after training: 0.039999999999999994
User 78882 does not improve AUC. Reverting changes.
Training on augumented user 106945 7/50 current_auc = 0.039999999999999994
User 106945 AUC after training: 0.039999999999999994
User 106945 does not improve AUC. Reverting changes.
Training on augumented user 134708 8/50 current_auc = 0.039999999999999994
User 134708 AUC after training: 0.039999999999999994
User 134708 does not improve AUC. Reverting changes.
Training on augumented user 1425 9/50 current_auc = 0.039999999999999994
User 1425 AUC after training: 0.039999999999999994
User 1425 does not improve AUC. Reverting changes.
Training on augumented user 42718 10/50 current_auc = 0.039999999999999994
User 42718 AUC after training: 0.039999999999999994
User 42718 does not improve AUC. Reverting changes.
Training on augumented user 106770 11/50 current_auc = 0.039999999999999994
User 106770 AUC after training: 0.039999999999999994
User 106770 does not improve AUC. Reverting changes.
Training on augumented user 79523 12/50 current_auc = 0.039999999999999994
User 79523 AUC after training: 0.0
User 79523 does not improve AUC. Reverting changes.
Training on augumented user 71597 13/50 current_auc = 0.039999999999999994
User 71597 AUC after training: 0.0
User 71597 does not improve AUC. Reverting changes.
Training on augumented user 109505 14/50 current_auc = 0.039999999999999994
User 109505 AUC after training: 0.039999999999999994
User 109505 does not improve AUC. Reverting changes.
Training on augumented user 107923 15/50 current_auc = 0.039999999999999994
User 107923 AUC after training: 0.0
User 107923 does not improve AUC. Reverting changes.
Training on augumented user 32083 16/50 current_auc = 0.039999999999999994
User 32083 AUC after training: 0.039999999999999994
User 32083 does not improve AUC. Reverting changes.
Training on augumented user 30917 17/50 current_auc = 0.039999999999999994
User 30917 AUC after training: 0.039999999999999994
User 30917 does not improve AUC. Reverting changes.
Training on augumented user 616 18/50 current_auc = 0.039999999999999994
User 616 AUC after training: 0.039999999999999994
User 616 does not improve AUC. Reverting changes.
Training on augumented user 135761 19/50 current_auc = 0.039999999999999994
User 135761 AUC after training: 0.0
User 135761 does not improve AUC. Reverting changes.
Training on augumented user 67955 20/50 current_auc = 0.039999999999999994
User 67955 AUC after training: 0.039999999999999994
User 67955 does not improve AUC. Reverting changes.
Training on augumented user 86245 21/50 current_auc = 0.039999999999999994
User 86245 AUC after training: 0.039999999999999994
User 86245 does not improve AUC. Reverting changes.
Training on augumented user 35406 22/50 current_auc = 0.039999999999999994
User 35406 AUC after training: 0.039999999999999994
User 35406 does not improve AUC. Reverting changes.
Training on augumented user 111701 23/50 current_auc = 0.039999999999999994
User 111701 AUC after training: 0.039999999999999994
User 111701 does not improve AUC. Reverting changes.
Training on augumented user 114157 24/50 current_auc = 0.039999999999999994
User 114157 AUC after training: 0.039999999999999994
User 114157 does not improve AUC. Reverting changes.
Training on augumented user 130744 25/50 current_auc = 0.039999999999999994
User 130744 AUC after training: 0.039999999999999994
User 130744 does not improve AUC. Reverting changes.
Training on augumented user 131902 26/50 current_auc = 0.039999999999999994
User 131902 AUC after training: 0.039999999999999994
User 131902 does not improve AUC. Reverting changes.
Training on augumented user 58721 27/50 current_auc = 0.039999999999999994
User 58721 AUC after training: 0.039999999999999994
User 58721 does not improve AUC. Reverting changes.
Training on augumented user 59787 28/50 current_auc = 0.039999999999999994
User 59787 AUC after training: 0.039999999999999994
User 59787 does not improve AUC. Reverting changes.
Training on augumented user 16443 29/50 current_auc = 0.039999999999999994
User 16443 AUC after training: 0.039999999999999994
User 16443 does not improve AUC. Reverting changes.
Training on augumented user 127336 30/50 current_auc = 0.039999999999999994
User 127336 AUC after training: 0.039999999999999994
User 127336 does not improve AUC. Reverting changes.
Training on augumented user 129185 31/50 current_auc = 0.039999999999999994
User 129185 AUC after training: 0.0
User 129185 does not improve AUC. Reverting changes.
Training on augumented user 36760 32/50 current_auc = 0.039999999999999994
User 36760 AUC after training: 0.039999999999999994
User 36760 does not improve AUC. Reverting changes.
Training on augumented user 69657 33/50 current_auc = 0.039999999999999994
User 69657 AUC after training: 0.0
User 69657 does not improve AUC. Reverting changes.
Training on augumented user 6085 34/50 current_auc = 0.039999999999999994
User 6085 AUC after training: 0.039999999999999994
User 6085 does not improve AUC. Reverting changes.
Training on augumented user 132336 35/50 current_auc = 0.039999999999999994
User 132336 AUC after training: 0.0
User 132336 does not improve AUC. Reverting changes.
Training on augumented user 115779 36/50 current_auc = 0.039999999999999994
User 115779 AUC after training: 0.039999999999999994
User 115779 does not improve AUC. Reverting changes.
Training on augumented user 98690 37/50 current_auc = 0.039999999999999994
User 98690 AUC after training: 0.039999999999999994
User 98690 does not improve AUC. Reverting changes.
Training on augumented user 83391 38/50 current_auc = 0.039999999999999994
User 83391 AUC after training: 0.039999999999999994
User 83391 does not improve AUC. Reverting changes.
Training on augumented user 54846 39/50 current_auc = 0.039999999999999994
User 54846 AUC after training: 0.039999999999999994
User 54846 does not improve AUC. Reverting changes.
Training on augumented user 66458 40/50 current_auc = 0.039999999999999994
User 66458 AUC after training: 0.039999999999999994
User 66458 does not improve AUC. Reverting changes.
Training on augumented user 15919 41/50 current_auc = 0.039999999999999994
User 15919 AUC after training: 0.039999999999999994
User 15919 does not improve AUC. Reverting changes.
Training on augumented user 93388 42/50 current_auc = 0.039999999999999994
User 93388 AUC after training: 0.039999999999999994
User 93388 does not improve AUC. Reverting changes.
Training on augumented user 53796 43/50 current_auc = 0.039999999999999994
User 53796 AUC after training: 0.039999999999999994
User 53796 does not improve AUC. Reverting changes.
Training on augumented user 114912 44/50 current_auc = 0.039999999999999994
User 114912 AUC after training: 0.039999999999999994
User 114912 does not improve AUC. Reverting changes.
Training on augumented user 11283 45/50 current_auc = 0.039999999999999994
User 11283 AUC after training: 0.0
User 11283 does not improve AUC. Reverting changes.
Training on augumented user 82553 46/50 current_auc = 0.039999999999999994
User 82553 AUC after training: 0.039999999999999994
User 82553 does not improve AUC. Reverting changes.
Training on augumented user 74325 47/50 current_auc = 0.039999999999999994
User 74325 AUC after training: 0.0
User 74325 does not improve AUC. Reverting changes.
Training on augumented user 4298 48/50 current_auc = 0.039999999999999994
User 4298 AUC after training: 0.039999999999999994
User 4298 does not improve AUC. Reverting changes.
Training on augumented user 88490 49/50 current_auc = 0.039999999999999994
User 88490 AUC after training: 0.0
User 88490 does not improve AUC. Reverting changes.
[2024-12-02 19:04:45.519345] start test user 113909 160/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:04:46.099987] start test user 113909 160/567 recall augumented users by random, augumented_users = [79380, 39630, 28413, 38518, 96111, 31208, 11589, 110197, 113918, 3856, 90537, 66017, 44958, 133341, 10768, 78027, 129123, 18449, 42943, 106304, 87606, 39668, 39646, 33085, 96925, 109980, 19657, 50760, 80280, 126550, 122460, 125883, 30358, 27173, 110513, 56749, 20627, 16119, 117080, 126457, 16872, 128333, 11363, 68960, 33306, 27293, 6525, 10313, 80971, 126860]
[2024-12-02 19:04:46.116356] user = 113909 Cloud 160/567
[2024-12-02 19:04:46.143795] user = 113909 Local 160/567
[2024-12-02 19:04:46.352713] user = 113909 Local+ 160/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:04:48.921635] user = 113909 MPDA- 160/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6610526315789473
Training on augumented user 79380 0/50 current_auc = 0.6610526315789473
User 79380 AUC after training: 0.6610526315789473
User 79380 does not improve AUC. Reverting changes.
Training on augumented user 39630 1/50 current_auc = 0.6610526315789473
User 39630 AUC after training: 0.6568421052631579
User 39630 does not improve AUC. Reverting changes.
Training on augumented user 28413 2/50 current_auc = 0.6610526315789473
User 28413 AUC after training: 0.6605263157894736
User 28413 does not improve AUC. Reverting changes.
Training on augumented user 38518 3/50 current_auc = 0.6610526315789473
User 38518 AUC after training: 0.6621052631578948
User 38518 improves AUC. Keeping the model.
Training on augumented user 96111 4/50 current_auc = 0.6621052631578948
User 96111 AUC after training: 0.661578947368421
User 96111 does not improve AUC. Reverting changes.
Training on augumented user 31208 5/50 current_auc = 0.6621052631578948
User 31208 AUC after training: 0.6621052631578948
User 31208 does not improve AUC. Reverting changes.
Training on augumented user 11589 6/50 current_auc = 0.6621052631578948
User 11589 AUC after training: 0.6631578947368422
User 11589 improves AUC. Keeping the model.
Training on augumented user 110197 7/50 current_auc = 0.6631578947368422
User 110197 AUC after training: 0.6636842105263158
User 110197 improves AUC. Keeping the model.
Training on augumented user 113918 8/50 current_auc = 0.6636842105263158
User 113918 AUC after training: 0.6621052631578948
User 113918 does not improve AUC. Reverting changes.
Training on augumented user 3856 9/50 current_auc = 0.6636842105263158
User 3856 AUC after training: 0.6621052631578948
User 3856 does not improve AUC. Reverting changes.
Training on augumented user 90537 10/50 current_auc = 0.6636842105263158
User 90537 AUC after training: 0.6636842105263158
User 90537 does not improve AUC. Reverting changes.
Training on augumented user 66017 11/50 current_auc = 0.6636842105263158
User 66017 AUC after training: 0.6621052631578946
User 66017 does not improve AUC. Reverting changes.
Training on augumented user 44958 12/50 current_auc = 0.6636842105263158
User 44958 AUC after training: 0.6626315789473683
User 44958 does not improve AUC. Reverting changes.
Training on augumented user 133341 13/50 current_auc = 0.6636842105263158
User 133341 AUC after training: 0.6642105263157895
User 133341 improves AUC. Keeping the model.
Training on augumented user 10768 14/50 current_auc = 0.6642105263157895
User 10768 AUC after training: 0.6636842105263158
User 10768 does not improve AUC. Reverting changes.
Training on augumented user 78027 15/50 current_auc = 0.6642105263157895
User 78027 AUC after training: 0.6631578947368421
User 78027 does not improve AUC. Reverting changes.
Training on augumented user 129123 16/50 current_auc = 0.6642105263157895
User 129123 AUC after training: 0.6642105263157895
User 129123 does not improve AUC. Reverting changes.
Training on augumented user 18449 17/50 current_auc = 0.6642105263157895
User 18449 AUC after training: 0.6621052631578948
User 18449 does not improve AUC. Reverting changes.
Training on augumented user 42943 18/50 current_auc = 0.6642105263157895
User 42943 AUC after training: 0.6642105263157895
User 42943 does not improve AUC. Reverting changes.
Training on augumented user 106304 19/50 current_auc = 0.6642105263157895
User 106304 AUC after training: 0.6631578947368421
User 106304 does not improve AUC. Reverting changes.
Training on augumented user 87606 20/50 current_auc = 0.6642105263157895
User 87606 AUC after training: 0.6642105263157895
User 87606 does not improve AUC. Reverting changes.
Training on augumented user 39668 21/50 current_auc = 0.6642105263157895
User 39668 AUC after training: 0.6636842105263158
User 39668 does not improve AUC. Reverting changes.
Training on augumented user 39646 22/50 current_auc = 0.6642105263157895
User 39646 AUC after training: 0.6636842105263158
User 39646 does not improve AUC. Reverting changes.
Training on augumented user 33085 23/50 current_auc = 0.6642105263157895
User 33085 AUC after training: 0.6631578947368421
User 33085 does not improve AUC. Reverting changes.
Training on augumented user 96925 24/50 current_auc = 0.6642105263157895
User 96925 AUC after training: 0.6621052631578948
User 96925 does not improve AUC. Reverting changes.
Training on augumented user 109980 25/50 current_auc = 0.6642105263157895
User 109980 AUC after training: 0.6626315789473683
User 109980 does not improve AUC. Reverting changes.
Training on augumented user 19657 26/50 current_auc = 0.6642105263157895
User 19657 AUC after training: 0.6642105263157895
User 19657 does not improve AUC. Reverting changes.
Training on augumented user 50760 27/50 current_auc = 0.6642105263157895
User 50760 AUC after training: 0.6642105263157895
User 50760 does not improve AUC. Reverting changes.
Training on augumented user 80280 28/50 current_auc = 0.6642105263157895
User 80280 AUC after training: 0.6636842105263158
User 80280 does not improve AUC. Reverting changes.
Training on augumented user 126550 29/50 current_auc = 0.6642105263157895
User 126550 AUC after training: 0.6636842105263158
User 126550 does not improve AUC. Reverting changes.
Training on augumented user 122460 30/50 current_auc = 0.6642105263157895
User 122460 AUC after training: 0.6631578947368421
User 122460 does not improve AUC. Reverting changes.
Training on augumented user 125883 31/50 current_auc = 0.6642105263157895
User 125883 AUC after training: 0.6642105263157895
User 125883 does not improve AUC. Reverting changes.
Training on augumented user 30358 32/50 current_auc = 0.6642105263157895
User 30358 AUC after training: 0.6626315789473685
User 30358 does not improve AUC. Reverting changes.
Training on augumented user 27173 33/50 current_auc = 0.6642105263157895
User 27173 AUC after training: 0.6636842105263158
User 27173 does not improve AUC. Reverting changes.
Training on augumented user 110513 34/50 current_auc = 0.6642105263157895
User 110513 AUC after training: 0.661578947368421
User 110513 does not improve AUC. Reverting changes.
Training on augumented user 56749 35/50 current_auc = 0.6642105263157895
User 56749 AUC after training: 0.6631578947368421
User 56749 does not improve AUC. Reverting changes.
Training on augumented user 20627 36/50 current_auc = 0.6642105263157895
User 20627 AUC after training: 0.6626315789473683
User 20627 does not improve AUC. Reverting changes.
Training on augumented user 16119 37/50 current_auc = 0.6642105263157895
User 16119 AUC after training: 0.6647368421052632
User 16119 improves AUC. Keeping the model.
Training on augumented user 117080 38/50 current_auc = 0.6647368421052632
User 117080 AUC after training: 0.6636842105263158
User 117080 does not improve AUC. Reverting changes.
Training on augumented user 126457 39/50 current_auc = 0.6647368421052632
User 126457 AUC after training: 0.6647368421052632
User 126457 does not improve AUC. Reverting changes.
Training on augumented user 16872 40/50 current_auc = 0.6647368421052632
User 16872 AUC after training: 0.6642105263157895
User 16872 does not improve AUC. Reverting changes.
Training on augumented user 128333 41/50 current_auc = 0.6647368421052632
User 128333 AUC after training: 0.6647368421052632
User 128333 does not improve AUC. Reverting changes.
Training on augumented user 11363 42/50 current_auc = 0.6647368421052632
User 11363 AUC after training: 0.6636842105263158
User 11363 does not improve AUC. Reverting changes.
Training on augumented user 68960 43/50 current_auc = 0.6647368421052632
User 68960 AUC after training: 0.6647368421052632
User 68960 does not improve AUC. Reverting changes.
Training on augumented user 33306 44/50 current_auc = 0.6647368421052632
User 33306 AUC after training: 0.6631578947368421
User 33306 does not improve AUC. Reverting changes.
Training on augumented user 27293 45/50 current_auc = 0.6647368421052632
User 27293 AUC after training: 0.6652631578947368
User 27293 improves AUC. Keeping the model.
Training on augumented user 6525 46/50 current_auc = 0.6652631578947368
User 6525 AUC after training: 0.6647368421052632
User 6525 does not improve AUC. Reverting changes.
Training on augumented user 10313 47/50 current_auc = 0.6652631578947368
User 10313 AUC after training: 0.6647368421052632
User 10313 does not improve AUC. Reverting changes.
Training on augumented user 80971 48/50 current_auc = 0.6652631578947368
User 80971 AUC after training: 0.6652631578947368
User 80971 does not improve AUC. Reverting changes.
Training on augumented user 126860 49/50 current_auc = 0.6652631578947368
User 126860 AUC after training: 0.6647368421052631
User 126860 does not improve AUC. Reverting changes.
[2024-12-02 19:05:17.712537] start test user 113923 161/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:05:18.137497] start test user 113923 161/567 recall augumented users by random, augumented_users = [22251, 96092, 119885, 133526, 114621, 127174, 90727, 33497, 132139, 79439, 8372, 73859, 24525, 102320, 65315, 44298, 122671, 9216, 1098, 45619, 34692, 53213, 123122, 105304, 48719, 76450, 13750, 79060, 13435, 44221, 5500, 205, 120077, 7257, 32050, 72852, 3408, 131432, 137937, 121966, 131664, 100635, 48283, 8104, 16698, 91347, 50290, 91418, 112262, 130735]
[2024-12-02 19:05:18.153756] user = 113923 Cloud 161/567
[2024-12-02 19:05:18.228207] user = 113923 Local 161/567
[2024-12-02 19:05:18.287108] user = 113923 Local+ 161/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:05:20.416740] user = 113923 MPDA- 161/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6329754663836389
Training on augumented user 22251 0/50 current_auc = 0.6329754663836389
User 22251 AUC after training: 0.6332612156590602
User 22251 improves AUC. Keeping the model.
Training on augumented user 96092 1/50 current_auc = 0.6332612156590602
User 96092 AUC after training: 0.634159284810385
User 96092 improves AUC. Keeping the model.
Training on augumented user 119885 2/50 current_auc = 0.634159284810385
User 119885 AUC after training: 0.6340776421602645
User 119885 does not improve AUC. Reverting changes.
Training on augumented user 133526 3/50 current_auc = 0.634159284810385
User 133526 AUC after training: 0.6335877862595419
User 133526 does not improve AUC. Reverting changes.
Training on augumented user 114621 4/50 current_auc = 0.634159284810385
User 114621 AUC after training: 0.6333020369841205
User 114621 does not improve AUC. Reverting changes.
Training on augumented user 127174 5/50 current_auc = 0.634159284810385
User 127174 AUC after training: 0.6337102502347226
User 127174 does not improve AUC. Reverting changes.
Training on augumented user 90727 6/50 current_auc = 0.634159284810385
User 90727 AUC after training: 0.6336694289096624
User 90727 does not improve AUC. Reverting changes.
Training on augumented user 33497 7/50 current_auc = 0.634159284810385
User 33497 AUC after training: 0.6337918928848431
User 33497 does not improve AUC. Reverting changes.
Training on augumented user 132139 8/50 current_auc = 0.634159284810385
User 132139 AUC after training: 0.6346899620361677
User 132139 improves AUC. Keeping the model.
Training on augumented user 79439 9/50 current_auc = 0.6346899620361677
User 79439 AUC after training: 0.6344450340858064
User 79439 does not improve AUC. Reverting changes.
Training on augumented user 8372 10/50 current_auc = 0.6346899620361677
User 8372 AUC after training: 0.6344858554108666
User 8372 does not improve AUC. Reverting changes.
Training on augumented user 73859 11/50 current_auc = 0.6346899620361677
User 73859 AUC after training: 0.6362003510633955
User 73859 improves AUC. Keeping the model.
Training on augumented user 24525 12/50 current_auc = 0.6362003510633955
User 24525 AUC after training: 0.6353431032371311
User 24525 does not improve AUC. Reverting changes.
Training on augumented user 102320 13/50 current_auc = 0.6362003510633955
User 102320 AUC after training: 0.6366493856390578
User 102320 improves AUC. Keeping the model.
Training on augumented user 65315 14/50 current_auc = 0.6366493856390578
User 65315 AUC after training: 0.6371800628648405
User 65315 improves AUC. Keeping the model.
Training on augumented user 44298 15/50 current_auc = 0.6371800628648405
User 44298 AUC after training: 0.6369759562395396
User 44298 does not improve AUC. Reverting changes.
Training on augumented user 122671 16/50 current_auc = 0.6371800628648405
User 122671 AUC after training: 0.6366085643139977
User 122671 does not improve AUC. Reverting changes.
Training on augumented user 9216 17/50 current_auc = 0.6371800628648405
User 9216 AUC after training: 0.636853492264359
User 9216 does not improve AUC. Reverting changes.
Training on augumented user 1098 18/50 current_auc = 0.6371800628648405
User 1098 AUC after training: 0.6364044576886966
User 1098 does not improve AUC. Reverting changes.
Training on augumented user 45619 19/50 current_auc = 0.6371800628648405
User 45619 AUC after training: 0.6353022819120708
User 45619 does not improve AUC. Reverting changes.
Training on augumented user 34692 20/50 current_auc = 0.6371800628648405
User 34692 AUC after training: 0.6361187084132752
User 34692 does not improve AUC. Reverting changes.
Training on augumented user 53213 21/50 current_auc = 0.6371800628648405
User 53213 AUC after training: 0.6365269216638771
User 53213 does not improve AUC. Reverting changes.
Training on augumented user 123122 22/50 current_auc = 0.6371800628648405
User 123122 AUC after training: 0.6367718496142385
User 123122 does not improve AUC. Reverting changes.
Training on augumented user 105304 23/50 current_auc = 0.6371800628648405
User 105304 AUC after training: 0.6375882761154427
User 105304 improves AUC. Keeping the model.
Training on augumented user 48719 24/50 current_auc = 0.6375882761154427
User 48719 AUC after training: 0.6371392415397803
User 48719 does not improve AUC. Reverting changes.
Training on augumented user 76450 25/50 current_auc = 0.6375882761154427
User 76450 AUC after training: 0.637833204065804
User 76450 improves AUC. Keeping the model.
Training on augumented user 13750 26/50 current_auc = 0.637833204065804
User 13750 AUC after training: 0.6375882761154428
User 13750 does not improve AUC. Reverting changes.
Training on augumented user 79060 27/50 current_auc = 0.637833204065804
User 79060 AUC after training: 0.6365677429889374
User 79060 does not improve AUC. Reverting changes.
Training on augumented user 13435 28/50 current_auc = 0.637833204065804
User 13435 AUC after training: 0.6371800628648405
User 13435 does not improve AUC. Reverting changes.
Training on augumented user 44221 29/50 current_auc = 0.637833204065804
User 44221 AUC after training: 0.6375882761154427
User 44221 does not improve AUC. Reverting changes.
Training on augumented user 5500 30/50 current_auc = 0.637833204065804
User 5500 AUC after training: 0.6374249908152019
User 5500 does not improve AUC. Reverting changes.
Training on augumented user 205 31/50 current_auc = 0.637833204065804
User 205 AUC after training: 0.6362207617259255
User 205 does not improve AUC. Reverting changes.
Training on augumented user 120077 32/50 current_auc = 0.637833204065804
User 120077 AUC after training: 0.6373841694901416
User 120077 does not improve AUC. Reverting changes.
Training on augumented user 7257 33/50 current_auc = 0.637833204065804
User 7257 AUC after training: 0.6370167775645996
User 7257 does not improve AUC. Reverting changes.
Training on augumented user 32050 34/50 current_auc = 0.637833204065804
User 32050 AUC after training: 0.6364044576886967
User 32050 does not improve AUC. Reverting changes.
Training on augumented user 72852 35/50 current_auc = 0.637833204065804
User 72852 AUC after training: 0.6375066334653223
User 72852 does not improve AUC. Reverting changes.
Training on augumented user 3408 36/50 current_auc = 0.637833204065804
User 3408 AUC after training: 0.6366085643139976
User 3408 does not improve AUC. Reverting changes.
Training on augumented user 131432 37/50 current_auc = 0.637833204065804
User 131432 AUC after training: 0.6370167775645997
User 131432 does not improve AUC. Reverting changes.
Training on augumented user 137937 38/50 current_auc = 0.637833204065804
User 137937 AUC after training: 0.6370575988896601
User 137937 does not improve AUC. Reverting changes.
Training on augumented user 121966 39/50 current_auc = 0.637833204065804
User 121966 AUC after training: 0.6365677429889375
User 121966 does not improve AUC. Reverting changes.
Training on augumented user 131664 40/50 current_auc = 0.637833204065804
User 131664 AUC after training: 0.6373025268400212
User 131664 does not improve AUC. Reverting changes.
Training on augumented user 100635 41/50 current_auc = 0.637833204065804
User 100635 AUC after training: 0.6388333265297792
User 100635 improves AUC. Keeping the model.
Training on augumented user 48283 42/50 current_auc = 0.6388333265297792
User 48283 AUC after training: 0.636710617626648
User 48283 does not improve AUC. Reverting changes.
Training on augumented user 8104 43/50 current_auc = 0.6388333265297792
User 8104 AUC after training: 0.639935502306405
User 8104 improves AUC. Keeping the model.
Training on augumented user 16698 44/50 current_auc = 0.639935502306405
User 16698 AUC after training: 0.6394456464056822
User 16698 does not improve AUC. Reverting changes.
Training on augumented user 91347 45/50 current_auc = 0.639935502306405
User 91347 AUC after training: 0.6400783769441156
User 91347 improves AUC. Keeping the model.
Training on augumented user 50290 46/50 current_auc = 0.6400783769441156
User 50290 AUC after training: 0.6398742703188146
User 50290 does not improve AUC. Reverting changes.
Training on augumented user 91418 47/50 current_auc = 0.6400783769441156
User 91418 AUC after training: 0.6399355023064048
User 91418 does not improve AUC. Reverting changes.
Training on augumented user 112262 48/50 current_auc = 0.6400783769441156
User 112262 AUC after training: 0.6393640037555619
User 112262 does not improve AUC. Reverting changes.
Training on augumented user 130735 49/50 current_auc = 0.6400783769441156
User 130735 AUC after training: 0.6402416622443564
User 130735 improves AUC. Keeping the model.
[2024-12-02 19:05:53.411225] start test user 113954 162/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:05:54.443990] start test user 113954 162/567 recall augumented users by random, augumented_users = [87094, 117595, 24516, 18963, 42181, 113707, 84427, 24267, 56977, 57183, 120448, 110582, 95842, 102439, 121437, 90494, 117398, 79942, 88666, 68063, 115204, 34891, 138006, 120008, 7360, 71159, 65008, 107311, 117864, 45460, 78697, 110464, 72839, 32869, 28124, 115855, 57010, 60947, 24498, 120526, 62697, 53680, 22320, 67374, 34319, 8817, 131396, 6766, 91937, 113149]
[2024-12-02 19:05:54.461280] user = 113954 Cloud 162/567
[2024-12-02 19:05:54.533134] user = 113954 Local 162/567
[2024-12-02 19:05:54.810428] user = 113954 Local+ 162/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:05:58.214542] user = 113954 MPDA- 162/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.595789225638051
Training on augumented user 87094 0/50 current_auc = 0.595789225638051
User 87094 AUC after training: 0.5951366734338748
User 87094 does not improve AUC. Reverting changes.
Training on augumented user 117595 1/50 current_auc = 0.595789225638051
User 117595 AUC after training: 0.5960339327146171
User 117595 improves AUC. Keeping the model.
Training on augumented user 24516 2/50 current_auc = 0.5960339327146171
User 24516 AUC after training: 0.5963012978538283
User 24516 improves AUC. Keeping the model.
Training on augumented user 18963 3/50 current_auc = 0.5963012978538283
User 18963 AUC after training: 0.5953043430974478
User 18963 does not improve AUC. Reverting changes.
Training on augumented user 42181 4/50 current_auc = 0.5963012978538283
User 42181 AUC after training: 0.5968405597447797
User 42181 improves AUC. Keeping the model.
Training on augumented user 113707 5/50 current_auc = 0.5968405597447797
User 113707 AUC after training: 0.5964508410672854
User 113707 does not improve AUC. Reverting changes.
Training on augumented user 84427 6/50 current_auc = 0.5968405597447797
User 84427 AUC after training: 0.5955445185614849
User 84427 does not improve AUC. Reverting changes.
Training on augumented user 24267 7/50 current_auc = 0.5968405597447797
User 24267 AUC after training: 0.5961336281902552
User 24267 does not improve AUC. Reverting changes.
Training on augumented user 56977 8/50 current_auc = 0.5968405597447797
User 56977 AUC after training: 0.5961698810904872
User 56977 does not improve AUC. Reverting changes.
Training on augumented user 57183 9/50 current_auc = 0.5968405597447797
User 57183 AUC after training: 0.5965233468677494
User 57183 does not improve AUC. Reverting changes.
Training on augumented user 120448 10/50 current_auc = 0.5968405597447797
User 120448 AUC after training: 0.5966683584686776
User 120448 does not improve AUC. Reverting changes.
Training on augumented user 110582 11/50 current_auc = 0.5968405597447797
User 110582 AUC after training: 0.5965052204176334
User 110582 does not improve AUC. Reverting changes.
Training on augumented user 95842 12/50 current_auc = 0.5968405597447797
User 95842 AUC after training: 0.5971396461716938
User 95842 improves AUC. Keeping the model.
Training on augumented user 102439 13/50 current_auc = 0.5971396461716938
User 102439 AUC after training: 0.5967046113689096
User 102439 does not improve AUC. Reverting changes.
Training on augumented user 121437 14/50 current_auc = 0.5971396461716938
User 121437 AUC after training: 0.5961698810904873
User 121437 does not improve AUC. Reverting changes.
Training on augumented user 90494 15/50 current_auc = 0.5971396461716938
User 90494 AUC after training: 0.5968949390951276
User 90494 does not improve AUC. Reverting changes.
Training on augumented user 117398 16/50 current_auc = 0.5971396461716938
User 117398 AUC after training: 0.5972393416473318
User 117398 improves AUC. Keeping the model.
Training on augumented user 79942 17/50 current_auc = 0.5972393416473318
User 79942 AUC after training: 0.5963330191415314
User 79942 does not improve AUC. Reverting changes.
Training on augumented user 88666 18/50 current_auc = 0.5972393416473318
User 88666 AUC after training: 0.5968133700696056
User 88666 does not improve AUC. Reverting changes.
Training on augumented user 68063 19/50 current_auc = 0.5972393416473318
User 68063 AUC after training: 0.5964553726798144
User 68063 does not improve AUC. Reverting changes.
Training on augumented user 115204 20/50 current_auc = 0.5972393416473318
User 115204 AUC after training: 0.5966139791183295
User 115204 does not improve AUC. Reverting changes.
Training on augumented user 34891 21/50 current_auc = 0.5972393416473318
User 34891 AUC after training: 0.5964870939675174
User 34891 does not improve AUC. Reverting changes.
Training on augumented user 138006 22/50 current_auc = 0.5972393416473318
User 138006 AUC after training: 0.5967499274941996
User 138006 does not improve AUC. Reverting changes.
Training on augumented user 120008 23/50 current_auc = 0.5972393416473318
User 120008 AUC after training: 0.5967227378190256
User 120008 does not improve AUC. Reverting changes.
Training on augumented user 7360 24/50 current_auc = 0.5972393416473318
User 7360 AUC after training: 0.5972846577726219
User 7360 improves AUC. Keeping the model.
Training on augumented user 71159 25/50 current_auc = 0.5972846577726219
User 71159 AUC after training: 0.5969583816705336
User 71159 does not improve AUC. Reverting changes.
Training on augumented user 65008 26/50 current_auc = 0.5972846577726219
User 65008 AUC after training: 0.5966502320185615
User 65008 does not improve AUC. Reverting changes.
Training on augumented user 107311 27/50 current_auc = 0.5972846577726219
User 107311 AUC after training: 0.5958889211136891
User 107311 does not improve AUC. Reverting changes.
Training on augumented user 117864 28/50 current_auc = 0.5972846577726219
User 117864 AUC after training: 0.5967952436194897
User 117864 does not improve AUC. Reverting changes.
Training on augumented user 45460 29/50 current_auc = 0.5972846577726219
User 45460 AUC after training: 0.5965686629930395
User 45460 does not improve AUC. Reverting changes.
Training on augumented user 78697 30/50 current_auc = 0.5972846577726219
User 78697 AUC after training: 0.5971487093967518
User 78697 does not improve AUC. Reverting changes.
Training on augumented user 110464 31/50 current_auc = 0.5972846577726219
User 110464 AUC after training: 0.5967227378190255
User 110464 does not improve AUC. Reverting changes.
Training on augumented user 72839 32/50 current_auc = 0.5972846577726219
User 72839 AUC after training: 0.5958798578886311
User 72839 does not improve AUC. Reverting changes.
Training on augumented user 32869 33/50 current_auc = 0.5972846577726219
User 32869 AUC after training: 0.5949010295823666
User 32869 does not improve AUC. Reverting changes.
Training on augumented user 28124 34/50 current_auc = 0.5972846577726219
User 28124 AUC after training: 0.5969765081206497
User 28124 does not improve AUC. Reverting changes.
Training on augumented user 115855 35/50 current_auc = 0.5972846577726219
User 115855 AUC after training: 0.5964327146171694
User 115855 does not improve AUC. Reverting changes.
Training on augumented user 57010 36/50 current_auc = 0.5972846577726219
User 57010 AUC after training: 0.5963964617169374
User 57010 does not improve AUC. Reverting changes.
Training on augumented user 60947 37/50 current_auc = 0.5972846577726219
User 60947 AUC after training: 0.5961880075406033
User 60947 does not improve AUC. Reverting changes.
Training on augumented user 24498 38/50 current_auc = 0.5972846577726219
User 24498 AUC after training: 0.5971487093967518
User 24498 does not improve AUC. Reverting changes.
Training on augumented user 120526 39/50 current_auc = 0.5972846577726219
User 120526 AUC after training: 0.5965278784802784
User 120526 does not improve AUC. Reverting changes.
Training on augumented user 62697 40/50 current_auc = 0.5972846577726219
User 62697 AUC after training: 0.5964145881670533
User 62697 does not improve AUC. Reverting changes.
Training on augumented user 53680 41/50 current_auc = 0.5972846577726219
User 53680 AUC after training: 0.5968224332946634
User 53680 does not improve AUC. Reverting changes.
Training on augumented user 22320 42/50 current_auc = 0.5972846577726219
User 22320 AUC after training: 0.5970943300464037
User 22320 does not improve AUC. Reverting changes.
Training on augumented user 67374 43/50 current_auc = 0.5972846577726219
User 67374 AUC after training: 0.5965595997679815
User 67374 does not improve AUC. Reverting changes.
Training on augumented user 34319 44/50 current_auc = 0.5972846577726219
User 34319 AUC after training: 0.5967136745939675
User 34319 does not improve AUC. Reverting changes.
Training on augumented user 8817 45/50 current_auc = 0.5972846577726219
User 8817 AUC after training: 0.5968949390951276
User 8817 does not improve AUC. Reverting changes.
Training on augumented user 131396 46/50 current_auc = 0.5972846577726219
User 131396 AUC after training: 0.5970036977958236
User 131396 does not improve AUC. Reverting changes.
Training on augumented user 6766 47/50 current_auc = 0.5972846577726219
User 6766 AUC after training: 0.5961744127030163
User 6766 does not improve AUC. Reverting changes.
Training on augumented user 91937 48/50 current_auc = 0.5972846577726219
User 91937 AUC after training: 0.5970218242459396
User 91937 does not improve AUC. Reverting changes.
Training on augumented user 113149 49/50 current_auc = 0.5972846577726219
User 113149 AUC after training: 0.5967318010440836
User 113149 does not improve AUC. Reverting changes.
[2024-12-02 19:06:36.435664] start test user 113972 163/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:06:37.271929] start test user 113972 163/567 recall augumented users by random, augumented_users = [57266, 34266, 90759, 18689, 81300, 93199, 123967, 53645, 98582, 9829, 11605, 34425, 109943, 134920, 46157, 20941, 33999, 96232, 97269, 132431, 10977, 29164, 15184, 55079, 18980, 14813, 59744, 1260, 36618, 112865, 13185, 64187, 84093, 126534, 26243, 24887, 73688, 19740, 28967, 91136, 6974, 60095, 130015, 115370, 74409, 57787, 132078, 131251, 124181, 46562]
[2024-12-02 19:06:37.289150] user = 113972 Cloud 163/567
[2024-12-02 19:06:37.305672] user = 113972 Local 163/567
[2024-12-02 19:06:37.480625] user = 113972 Local+ 163/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:06:39.938131] user = 113972 MPDA- 163/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.375
Training on augumented user 57266 0/50 current_auc = 0.375
User 57266 AUC after training: 0.375
User 57266 does not improve AUC. Reverting changes.
Training on augumented user 34266 1/50 current_auc = 0.375
User 34266 AUC after training: 0.375
User 34266 does not improve AUC. Reverting changes.
Training on augumented user 90759 2/50 current_auc = 0.375
User 90759 AUC after training: 0.375
User 90759 does not improve AUC. Reverting changes.
Training on augumented user 18689 3/50 current_auc = 0.375
User 18689 AUC after training: 0.375
User 18689 does not improve AUC. Reverting changes.
Training on augumented user 81300 4/50 current_auc = 0.375
User 81300 AUC after training: 0.375
User 81300 does not improve AUC. Reverting changes.
Training on augumented user 93199 5/50 current_auc = 0.375
User 93199 AUC after training: 0.375
User 93199 does not improve AUC. Reverting changes.
Training on augumented user 123967 6/50 current_auc = 0.375
User 123967 AUC after training: 0.375
User 123967 does not improve AUC. Reverting changes.
Training on augumented user 53645 7/50 current_auc = 0.375
User 53645 AUC after training: 0.375
User 53645 does not improve AUC. Reverting changes.
Training on augumented user 98582 8/50 current_auc = 0.375
User 98582 AUC after training: 0.375
User 98582 does not improve AUC. Reverting changes.
Training on augumented user 9829 9/50 current_auc = 0.375
User 9829 AUC after training: 0.375
User 9829 does not improve AUC. Reverting changes.
Training on augumented user 11605 10/50 current_auc = 0.375
User 11605 AUC after training: 0.375
User 11605 does not improve AUC. Reverting changes.
Training on augumented user 34425 11/50 current_auc = 0.375
User 34425 AUC after training: 0.375
User 34425 does not improve AUC. Reverting changes.
Training on augumented user 109943 12/50 current_auc = 0.375
User 109943 AUC after training: 0.25
User 109943 does not improve AUC. Reverting changes.
Training on augumented user 134920 13/50 current_auc = 0.375
User 134920 AUC after training: 0.375
User 134920 does not improve AUC. Reverting changes.
Training on augumented user 46157 14/50 current_auc = 0.375
User 46157 AUC after training: 0.375
User 46157 does not improve AUC. Reverting changes.
Training on augumented user 20941 15/50 current_auc = 0.375
User 20941 AUC after training: 0.375
User 20941 does not improve AUC. Reverting changes.
Training on augumented user 33999 16/50 current_auc = 0.375
User 33999 AUC after training: 0.375
User 33999 does not improve AUC. Reverting changes.
Training on augumented user 96232 17/50 current_auc = 0.375
User 96232 AUC after training: 0.375
User 96232 does not improve AUC. Reverting changes.
Training on augumented user 97269 18/50 current_auc = 0.375
User 97269 AUC after training: 0.375
User 97269 does not improve AUC. Reverting changes.
Training on augumented user 132431 19/50 current_auc = 0.375
User 132431 AUC after training: 0.375
User 132431 does not improve AUC. Reverting changes.
Training on augumented user 10977 20/50 current_auc = 0.375
User 10977 AUC after training: 0.375
User 10977 does not improve AUC. Reverting changes.
Training on augumented user 29164 21/50 current_auc = 0.375
User 29164 AUC after training: 0.375
User 29164 does not improve AUC. Reverting changes.
Training on augumented user 15184 22/50 current_auc = 0.375
User 15184 AUC after training: 0.375
User 15184 does not improve AUC. Reverting changes.
Training on augumented user 55079 23/50 current_auc = 0.375
User 55079 AUC after training: 0.25
User 55079 does not improve AUC. Reverting changes.
Training on augumented user 18980 24/50 current_auc = 0.375
User 18980 AUC after training: 0.375
User 18980 does not improve AUC. Reverting changes.
Training on augumented user 14813 25/50 current_auc = 0.375
User 14813 AUC after training: 0.375
User 14813 does not improve AUC. Reverting changes.
Training on augumented user 59744 26/50 current_auc = 0.375
User 59744 AUC after training: 0.375
User 59744 does not improve AUC. Reverting changes.
Training on augumented user 1260 27/50 current_auc = 0.375
User 1260 AUC after training: 0.375
User 1260 does not improve AUC. Reverting changes.
Training on augumented user 36618 28/50 current_auc = 0.375
User 36618 AUC after training: 0.375
User 36618 does not improve AUC. Reverting changes.
Training on augumented user 112865 29/50 current_auc = 0.375
User 112865 AUC after training: 0.375
User 112865 does not improve AUC. Reverting changes.
Training on augumented user 13185 30/50 current_auc = 0.375
User 13185 AUC after training: 0.375
User 13185 does not improve AUC. Reverting changes.
Training on augumented user 64187 31/50 current_auc = 0.375
User 64187 AUC after training: 0.375
User 64187 does not improve AUC. Reverting changes.
Training on augumented user 84093 32/50 current_auc = 0.375
User 84093 AUC after training: 0.375
User 84093 does not improve AUC. Reverting changes.
Training on augumented user 126534 33/50 current_auc = 0.375
User 126534 AUC after training: 0.375
User 126534 does not improve AUC. Reverting changes.
Training on augumented user 26243 34/50 current_auc = 0.375
User 26243 AUC after training: 0.375
User 26243 does not improve AUC. Reverting changes.
Training on augumented user 24887 35/50 current_auc = 0.375
User 24887 AUC after training: 0.375
User 24887 does not improve AUC. Reverting changes.
Training on augumented user 73688 36/50 current_auc = 0.375
User 73688 AUC after training: 0.375
User 73688 does not improve AUC. Reverting changes.
Training on augumented user 19740 37/50 current_auc = 0.375
User 19740 AUC after training: 0.375
User 19740 does not improve AUC. Reverting changes.
Training on augumented user 28967 38/50 current_auc = 0.375
User 28967 AUC after training: 0.375
User 28967 does not improve AUC. Reverting changes.
Training on augumented user 91136 39/50 current_auc = 0.375
User 91136 AUC after training: 0.375
User 91136 does not improve AUC. Reverting changes.
Training on augumented user 6974 40/50 current_auc = 0.375
User 6974 AUC after training: 0.375
User 6974 does not improve AUC. Reverting changes.
Training on augumented user 60095 41/50 current_auc = 0.375
User 60095 AUC after training: 0.375
User 60095 does not improve AUC. Reverting changes.
Training on augumented user 130015 42/50 current_auc = 0.375
User 130015 AUC after training: 0.375
User 130015 does not improve AUC. Reverting changes.
Training on augumented user 115370 43/50 current_auc = 0.375
User 115370 AUC after training: 0.375
User 115370 does not improve AUC. Reverting changes.
Training on augumented user 74409 44/50 current_auc = 0.375
User 74409 AUC after training: 0.375
User 74409 does not improve AUC. Reverting changes.
Training on augumented user 57787 45/50 current_auc = 0.375
User 57787 AUC after training: 0.375
User 57787 does not improve AUC. Reverting changes.
Training on augumented user 132078 46/50 current_auc = 0.375
User 132078 AUC after training: 0.375
User 132078 does not improve AUC. Reverting changes.
Training on augumented user 131251 47/50 current_auc = 0.375
User 131251 AUC after training: 0.375
User 131251 does not improve AUC. Reverting changes.
Training on augumented user 124181 48/50 current_auc = 0.375
User 124181 AUC after training: 0.375
User 124181 does not improve AUC. Reverting changes.
Training on augumented user 46562 49/50 current_auc = 0.375
User 46562 AUC after training: 0.375
User 46562 does not improve AUC. Reverting changes.
[2024-12-02 19:07:10.776662] start test user 113980 164/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:07:11.244384] start test user 113980 164/567 recall augumented users by random, augumented_users = [88691, 15346, 130697, 122341, 18770, 78589, 96425, 45875, 18856, 7782, 112519, 2169, 9406, 20522, 81945, 2851, 5596, 116243, 87157, 12767, 33125, 98120, 7520, 27953, 126044, 128581, 102166, 81842, 79692, 102705, 73058, 43361, 107724, 47129, 87172, 18522, 86439, 26688, 91874, 67996, 116648, 1075, 27905, 77782, 135143, 16482, 108708, 77511, 43988, 107466]
[2024-12-02 19:07:11.259696] user = 113980 Cloud 164/567
[2024-12-02 19:07:11.269222] user = 113980 Local 164/567
[2024-12-02 19:07:11.313114] user = 113980 Local+ 164/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:07:15.095898] user = 113980 MPDA- 164/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.0
Training on augumented user 88691 0/50 current_auc = 0.0
User 88691 AUC after training: 0.0
User 88691 does not improve AUC. Reverting changes.
Training on augumented user 15346 1/50 current_auc = 0.0
User 15346 AUC after training: 0.0
User 15346 does not improve AUC. Reverting changes.
Training on augumented user 130697 2/50 current_auc = 0.0
User 130697 AUC after training: 0.0
User 130697 does not improve AUC. Reverting changes.
Training on augumented user 122341 3/50 current_auc = 0.0
User 122341 AUC after training: 0.0
User 122341 does not improve AUC. Reverting changes.
Training on augumented user 18770 4/50 current_auc = 0.0
User 18770 AUC after training: 0.0
User 18770 does not improve AUC. Reverting changes.
Training on augumented user 78589 5/50 current_auc = 0.0
User 78589 AUC after training: 0.0
User 78589 does not improve AUC. Reverting changes.
Training on augumented user 96425 6/50 current_auc = 0.0
User 96425 AUC after training: 0.0
User 96425 does not improve AUC. Reverting changes.
Training on augumented user 45875 7/50 current_auc = 0.0
User 45875 AUC after training: 0.0
User 45875 does not improve AUC. Reverting changes.
Training on augumented user 18856 8/50 current_auc = 0.0
User 18856 AUC after training: 0.0
User 18856 does not improve AUC. Reverting changes.
Training on augumented user 7782 9/50 current_auc = 0.0
User 7782 AUC after training: 0.0
User 7782 does not improve AUC. Reverting changes.
Training on augumented user 112519 10/50 current_auc = 0.0
User 112519 AUC after training: 0.0
User 112519 does not improve AUC. Reverting changes.
Training on augumented user 2169 11/50 current_auc = 0.0
User 2169 AUC after training: 0.0
User 2169 does not improve AUC. Reverting changes.
Training on augumented user 9406 12/50 current_auc = 0.0
User 9406 AUC after training: 0.0
User 9406 does not improve AUC. Reverting changes.
Training on augumented user 20522 13/50 current_auc = 0.0
User 20522 AUC after training: 0.0
User 20522 does not improve AUC. Reverting changes.
Training on augumented user 81945 14/50 current_auc = 0.0
User 81945 AUC after training: 0.0
User 81945 does not improve AUC. Reverting changes.
Training on augumented user 2851 15/50 current_auc = 0.0
User 2851 AUC after training: 0.0
User 2851 does not improve AUC. Reverting changes.
Training on augumented user 5596 16/50 current_auc = 0.0
User 5596 AUC after training: 0.0
User 5596 does not improve AUC. Reverting changes.
Training on augumented user 116243 17/50 current_auc = 0.0
User 116243 AUC after training: 0.0
User 116243 does not improve AUC. Reverting changes.
Training on augumented user 87157 18/50 current_auc = 0.0
User 87157 AUC after training: 0.0
User 87157 does not improve AUC. Reverting changes.
Training on augumented user 12767 19/50 current_auc = 0.0
User 12767 AUC after training: 0.0
User 12767 does not improve AUC. Reverting changes.
Training on augumented user 33125 20/50 current_auc = 0.0
User 33125 AUC after training: 0.0
User 33125 does not improve AUC. Reverting changes.
Training on augumented user 98120 21/50 current_auc = 0.0
User 98120 AUC after training: 0.0
User 98120 does not improve AUC. Reverting changes.
Training on augumented user 7520 22/50 current_auc = 0.0
User 7520 AUC after training: 0.0
User 7520 does not improve AUC. Reverting changes.
Training on augumented user 27953 23/50 current_auc = 0.0
User 27953 AUC after training: 0.0
User 27953 does not improve AUC. Reverting changes.
Training on augumented user 126044 24/50 current_auc = 0.0
User 126044 AUC after training: 0.0
User 126044 does not improve AUC. Reverting changes.
Training on augumented user 128581 25/50 current_auc = 0.0
User 128581 AUC after training: 0.0
User 128581 does not improve AUC. Reverting changes.
Training on augumented user 102166 26/50 current_auc = 0.0
User 102166 AUC after training: 0.0
User 102166 does not improve AUC. Reverting changes.
Training on augumented user 81842 27/50 current_auc = 0.0
User 81842 AUC after training: 0.0
User 81842 does not improve AUC. Reverting changes.
Training on augumented user 79692 28/50 current_auc = 0.0
User 79692 AUC after training: 0.0
User 79692 does not improve AUC. Reverting changes.
Training on augumented user 102705 29/50 current_auc = 0.0
User 102705 AUC after training: 0.0
User 102705 does not improve AUC. Reverting changes.
Training on augumented user 73058 30/50 current_auc = 0.0
User 73058 AUC after training: 0.0
User 73058 does not improve AUC. Reverting changes.
Training on augumented user 43361 31/50 current_auc = 0.0
User 43361 AUC after training: 0.0
User 43361 does not improve AUC. Reverting changes.
Training on augumented user 107724 32/50 current_auc = 0.0
User 107724 AUC after training: 0.0
User 107724 does not improve AUC. Reverting changes.
Training on augumented user 47129 33/50 current_auc = 0.0
User 47129 AUC after training: 0.0
User 47129 does not improve AUC. Reverting changes.
Training on augumented user 87172 34/50 current_auc = 0.0
User 87172 AUC after training: 0.0
User 87172 does not improve AUC. Reverting changes.
Training on augumented user 18522 35/50 current_auc = 0.0
User 18522 AUC after training: 0.0
User 18522 does not improve AUC. Reverting changes.
Training on augumented user 86439 36/50 current_auc = 0.0
User 86439 AUC after training: 0.0
User 86439 does not improve AUC. Reverting changes.
Training on augumented user 26688 37/50 current_auc = 0.0
User 26688 AUC after training: 0.0
User 26688 does not improve AUC. Reverting changes.
Training on augumented user 91874 38/50 current_auc = 0.0
User 91874 AUC after training: 0.0
User 91874 does not improve AUC. Reverting changes.
Training on augumented user 67996 39/50 current_auc = 0.0
User 67996 AUC after training: 0.0
User 67996 does not improve AUC. Reverting changes.
Training on augumented user 116648 40/50 current_auc = 0.0
User 116648 AUC after training: 0.0
User 116648 does not improve AUC. Reverting changes.
Training on augumented user 1075 41/50 current_auc = 0.0
User 1075 AUC after training: 0.0
User 1075 does not improve AUC. Reverting changes.
Training on augumented user 27905 42/50 current_auc = 0.0
User 27905 AUC after training: 0.0
User 27905 does not improve AUC. Reverting changes.
Training on augumented user 77782 43/50 current_auc = 0.0
User 77782 AUC after training: 0.0
User 77782 does not improve AUC. Reverting changes.
Training on augumented user 135143 44/50 current_auc = 0.0
User 135143 AUC after training: 0.0
User 135143 does not improve AUC. Reverting changes.
Training on augumented user 16482 45/50 current_auc = 0.0
User 16482 AUC after training: 0.0
User 16482 does not improve AUC. Reverting changes.
Training on augumented user 108708 46/50 current_auc = 0.0
User 108708 AUC after training: 0.0
User 108708 does not improve AUC. Reverting changes.
Training on augumented user 77511 47/50 current_auc = 0.0
User 77511 AUC after training: 0.0
User 77511 does not improve AUC. Reverting changes.
Training on augumented user 43988 48/50 current_auc = 0.0
User 43988 AUC after training: 0.0
User 43988 does not improve AUC. Reverting changes.
Training on augumented user 107466 49/50 current_auc = 0.0
User 107466 AUC after training: 0.0
User 107466 does not improve AUC. Reverting changes.
[2024-12-02 19:07:44.224409] start test user 113991 165/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:07:44.682914] start test user 113991 165/567 recall augumented users by random, augumented_users = [43376, 25141, 76439, 8456, 115742, 78756, 124611, 47485, 128786, 96837, 58187, 80569, 6893, 59770, 25664, 99501, 60983, 17587, 8213, 92005, 45181, 129988, 104834, 79463, 4894, 63844, 43311, 67674, 119758, 22587, 11764, 23760, 102614, 129970, 34688, 79895, 53090, 117307, 134436, 92767, 116390, 116923, 23802, 124485, 94447, 111554, 112557, 71761, 23367, 13843]
[2024-12-02 19:07:44.701977] user = 113991 Cloud 165/567
[2024-12-02 19:07:44.727691] user = 113991 Local 165/567
[2024-12-02 19:07:45.131107] user = 113991 Local+ 165/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:07:47.075972] user = 113991 MPDA- 165/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6334904490200943
Training on augumented user 43376 0/50 current_auc = 0.6334904490200943
User 43376 AUC after training: 0.6329942942197966
User 43376 does not improve AUC. Reverting changes.
Training on augumented user 25141 1/50 current_auc = 0.6334904490200943
User 25141 AUC after training: 0.6334408335400645
User 25141 does not improve AUC. Reverting changes.
Training on augumented user 76439 2/50 current_auc = 0.6334904490200943
User 76439 AUC after training: 0.6335400645001241
User 76439 improves AUC. Keeping the model.
Training on augumented user 8456 3/50 current_auc = 0.6335400645001241
User 8456 AUC after training: 0.6332919870999753
User 8456 does not improve AUC. Reverting changes.
Training on augumented user 115742 4/50 current_auc = 0.6335400645001241
User 115742 AUC after training: 0.6333416025800049
User 115742 does not improve AUC. Reverting changes.
Training on augumented user 78756 5/50 current_auc = 0.6335400645001241
User 78756 AUC after training: 0.6337385264202431
User 78756 improves AUC. Keeping the model.
Training on augumented user 124611 6/50 current_auc = 0.6337385264202431
User 124611 AUC after training: 0.6334904490200942
User 124611 does not improve AUC. Reverting changes.
Training on augumented user 47485 7/50 current_auc = 0.6337385264202431
User 47485 AUC after training: 0.6334904490200942
User 47485 does not improve AUC. Reverting changes.
Training on augumented user 128786 8/50 current_auc = 0.6337385264202431
User 128786 AUC after training: 0.6333912180600347
User 128786 does not improve AUC. Reverting changes.
Training on augumented user 96837 9/50 current_auc = 0.6337385264202431
User 96837 AUC after training: 0.6338873728603325
User 96837 improves AUC. Keeping the model.
Training on augumented user 58187 10/50 current_auc = 0.6338873728603325
User 58187 AUC after training: 0.6333912180600347
User 58187 does not improve AUC. Reverting changes.
Training on augumented user 80569 11/50 current_auc = 0.6338873728603325
User 80569 AUC after training: 0.6333912180600347
User 80569 does not improve AUC. Reverting changes.
Training on augumented user 6893 12/50 current_auc = 0.6338873728603325
User 6893 AUC after training: 0.634185065740511
User 6893 improves AUC. Keeping the model.
Training on augumented user 59770 13/50 current_auc = 0.634185065740511
User 59770 AUC after training: 0.6343339121806004
User 59770 improves AUC. Keeping the model.
Training on augumented user 25664 14/50 current_auc = 0.6343339121806004
User 25664 AUC after training: 0.6343835276606302
User 25664 improves AUC. Keeping the model.
Training on augumented user 99501 15/50 current_auc = 0.6343835276606302
User 99501 AUC after training: 0.6350285289010171
User 99501 improves AUC. Keeping the model.
Training on augumented user 60983 16/50 current_auc = 0.6350285289010171
User 60983 AUC after training: 0.6350781443810469
User 60983 improves AUC. Keeping the model.
Training on augumented user 17587 17/50 current_auc = 0.6350781443810469
User 17587 AUC after training: 0.6347308360208386
User 17587 does not improve AUC. Reverting changes.
Training on augumented user 8213 18/50 current_auc = 0.6350781443810469
User 8213 AUC after training: 0.6353758372612255
User 8213 improves AUC. Keeping the model.
Training on augumented user 92005 19/50 current_auc = 0.6353758372612255
User 92005 AUC after training: 0.6350781443810469
User 92005 does not improve AUC. Reverting changes.
Training on augumented user 45181 20/50 current_auc = 0.6353758372612255
User 45181 AUC after training: 0.6351277598610766
User 45181 does not improve AUC. Reverting changes.
Training on augumented user 129988 21/50 current_auc = 0.6353758372612255
User 129988 AUC after training: 0.6352269908211362
User 129988 does not improve AUC. Reverting changes.
Training on augumented user 104834 22/50 current_auc = 0.6353758372612255
User 104834 AUC after training: 0.6345323741007194
User 104834 does not improve AUC. Reverting changes.
Training on augumented user 79463 23/50 current_auc = 0.6353758372612255
User 79463 AUC after training: 0.6345819895807492
User 79463 does not improve AUC. Reverting changes.
Training on augumented user 4894 24/50 current_auc = 0.6353758372612255
User 4894 AUC after training: 0.6356735301414042
User 4894 improves AUC. Keeping the model.
Training on augumented user 63844 25/50 current_auc = 0.6356735301414042
User 63844 AUC after training: 0.6356239146613745
User 63844 does not improve AUC. Reverting changes.
Training on augumented user 43311 26/50 current_auc = 0.6356735301414042
User 43311 AUC after training: 0.6352517985611511
User 43311 does not improve AUC. Reverting changes.
Training on augumented user 67674 27/50 current_auc = 0.6356735301414042
User 67674 AUC after training: 0.636120069461672
User 67674 improves AUC. Keeping the model.
Training on augumented user 119758 28/50 current_auc = 0.636120069461672
User 119758 AUC after training: 0.6356735301414042
User 119758 does not improve AUC. Reverting changes.
Training on augumented user 22587 29/50 current_auc = 0.636120069461672
User 22587 AUC after training: 0.6364177623418508
User 22587 improves AUC. Keeping the model.
Training on augumented user 11764 30/50 current_auc = 0.6364177623418508
User 11764 AUC after training: 0.6361200694616721
User 11764 does not improve AUC. Reverting changes.
Training on augumented user 23760 31/50 current_auc = 0.6364177623418508
User 23760 AUC after training: 0.6360208385016125
User 23760 does not improve AUC. Reverting changes.
Training on augumented user 102614 32/50 current_auc = 0.6364177623418508
User 102614 AUC after training: 0.6363185313817912
User 102614 does not improve AUC. Reverting changes.
Training on augumented user 129970 33/50 current_auc = 0.6364177623418508
User 129970 AUC after training: 0.6364177623418508
User 129970 does not improve AUC. Reverting changes.
Training on augumented user 34688 34/50 current_auc = 0.6364177623418508
User 34688 AUC after training: 0.6358719920615232
User 34688 does not improve AUC. Reverting changes.
Training on augumented user 79895 35/50 current_auc = 0.6364177623418508
User 79895 AUC after training: 0.6368146861820888
User 79895 improves AUC. Keeping the model.
Training on augumented user 53090 36/50 current_auc = 0.6368146861820888
User 53090 AUC after training: 0.6364673778218803
User 53090 does not improve AUC. Reverting changes.
Training on augumented user 117307 37/50 current_auc = 0.6368146861820888
User 117307 AUC after training: 0.6357727611014636
User 117307 does not improve AUC. Reverting changes.
Training on augumented user 134436 38/50 current_auc = 0.6368146861820888
User 134436 AUC after training: 0.6352269908211362
User 134436 does not improve AUC. Reverting changes.
Training on augumented user 92767 39/50 current_auc = 0.6368146861820888
User 92767 AUC after training: 0.6366658397419995
User 92767 does not improve AUC. Reverting changes.
Training on augumented user 116390 40/50 current_auc = 0.6368146861820888
User 116390 AUC after training: 0.6371619945422973
User 116390 improves AUC. Keeping the model.
Training on augumented user 116923 41/50 current_auc = 0.6371619945422973
User 116923 AUC after training: 0.6366162242619697
User 116923 does not improve AUC. Reverting changes.
Training on augumented user 23802 42/50 current_auc = 0.6371619945422973
User 23802 AUC after training: 0.636765070702059
User 23802 does not improve AUC. Reverting changes.
Training on augumented user 124485 43/50 current_auc = 0.6371619945422973
User 124485 AUC after training: 0.6362689159017614
User 124485 does not improve AUC. Reverting changes.
Training on augumented user 94447 44/50 current_auc = 0.6371619945422973
User 94447 AUC after training: 0.6369635326221781
User 94447 does not improve AUC. Reverting changes.
Training on augumented user 111554 45/50 current_auc = 0.6371619945422973
User 111554 AUC after training: 0.6349789134209873
User 111554 does not improve AUC. Reverting changes.
Training on augumented user 112557 46/50 current_auc = 0.6371619945422973
User 112557 AUC after training: 0.6369139171421483
User 112557 does not improve AUC. Reverting changes.
Training on augumented user 71761 47/50 current_auc = 0.6371619945422973
User 71761 AUC after training: 0.6371123790622675
User 71761 does not improve AUC. Reverting changes.
Training on augumented user 23367 48/50 current_auc = 0.6371619945422973
User 23367 AUC after training: 0.6371123790622675
User 23367 does not improve AUC. Reverting changes.
Training on augumented user 13843 49/50 current_auc = 0.6371619945422973
User 13843 AUC after training: 0.6370131481022079
User 13843 does not improve AUC. Reverting changes.
[2024-12-02 19:08:18.570819] start test user 114009 166/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:08:19.070566] start test user 114009 166/567 recall augumented users by random, augumented_users = [86096, 7781, 46289, 7041, 79200, 118616, 131829, 129515, 32671, 116259, 56892, 71339, 19870, 65967, 72687, 56712, 7962, 87515, 37190, 130581, 32375, 127517, 44038, 43991, 40949, 118369, 18809, 102252, 100077, 5920, 24722, 82114, 70205, 60091, 78326, 26813, 39684, 85009, 31829, 133293, 46846, 49241, 12345, 530, 69310, 7653, 126149, 136619, 102802, 119591]
[2024-12-02 19:08:19.087363] user = 114009 Cloud 166/567
[2024-12-02 19:08:19.112386] user = 114009 Local 166/567
[2024-12-02 19:08:19.290421] user = 114009 Local+ 166/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:08:22.323996] user = 114009 MPDA- 166/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7470137480279468
Training on augumented user 86096 0/50 current_auc = 0.7470137480279468
User 86096 AUC after training: 0.7470137480279468
User 86096 does not improve AUC. Reverting changes.
Training on augumented user 7781 1/50 current_auc = 0.7470137480279468
User 7781 AUC after training: 0.7472391255352716
User 7781 improves AUC. Keeping the model.
Training on augumented user 46289 2/50 current_auc = 0.7472391255352716
User 46289 AUC after training: 0.7470137480279467
User 46289 does not improve AUC. Reverting changes.
Training on augumented user 7041 3/50 current_auc = 0.7472391255352716
User 7041 AUC after training: 0.7471827811584404
User 7041 does not improve AUC. Reverting changes.
Training on augumented user 79200 4/50 current_auc = 0.7472391255352716
User 79200 AUC after training: 0.7470700924047781
User 79200 does not improve AUC. Reverting changes.
Training on augumented user 118616 5/50 current_auc = 0.7472391255352716
User 118616 AUC after training: 0.7469010592742844
User 118616 does not improve AUC. Reverting changes.
Training on augumented user 131829 6/50 current_auc = 0.7472391255352716
User 131829 AUC after training: 0.7471264367816092
User 131829 does not improve AUC. Reverting changes.
Training on augumented user 129515 7/50 current_auc = 0.7472391255352716
User 129515 AUC after training: 0.7467883705206221
User 129515 does not improve AUC. Reverting changes.
Training on augumented user 32671 8/50 current_auc = 0.7472391255352716
User 32671 AUC after training: 0.7463939598828037
User 32671 does not improve AUC. Reverting changes.
Training on augumented user 116259 9/50 current_auc = 0.7472391255352716
User 116259 AUC after training: 0.7467883705206221
User 116259 does not improve AUC. Reverting changes.
Training on augumented user 56892 10/50 current_auc = 0.7472391255352716
User 56892 AUC after training: 0.7473518142889339
User 56892 improves AUC. Keeping the model.
Training on augumented user 71339 11/50 current_auc = 0.7473518142889339
User 71339 AUC after training: 0.7472391255352716
User 71339 does not improve AUC. Reverting changes.
Training on augumented user 19870 12/50 current_auc = 0.7473518142889339
User 19870 AUC after training: 0.7474645030425963
User 19870 improves AUC. Keeping the model.
Training on augumented user 65967 13/50 current_auc = 0.7474645030425963
User 65967 AUC after training: 0.7480279468109082
User 65967 improves AUC. Keeping the model.
Training on augumented user 72687 14/50 current_auc = 0.7480279468109082
User 72687 AUC after training: 0.7474081586657652
User 72687 does not improve AUC. Reverting changes.
Training on augumented user 56712 15/50 current_auc = 0.7480279468109082
User 56712 AUC after training: 0.7480279468109082
User 56712 does not improve AUC. Reverting changes.
Training on augumented user 7962 16/50 current_auc = 0.7480279468109082
User 7962 AUC after training: 0.7480842911877396
User 7962 improves AUC. Keeping the model.
Training on augumented user 87515 17/50 current_auc = 0.7480842911877396
User 87515 AUC after training: 0.7481969799414018
User 87515 improves AUC. Keeping the model.
Training on augumented user 37190 18/50 current_auc = 0.7481969799414018
User 37190 AUC after training: 0.7478589136804147
User 37190 does not improve AUC. Reverting changes.
Training on augumented user 130581 19/50 current_auc = 0.7481969799414018
User 130581 AUC after training: 0.7481406355645707
User 130581 does not improve AUC. Reverting changes.
Training on augumented user 32375 20/50 current_auc = 0.7481969799414018
User 32375 AUC after training: 0.7477462249267522
User 32375 does not improve AUC. Reverting changes.
Training on augumented user 127517 21/50 current_auc = 0.7481969799414018
User 127517 AUC after training: 0.7478025693035836
User 127517 does not improve AUC. Reverting changes.
Training on augumented user 44038 22/50 current_auc = 0.7481969799414018
User 44038 AUC after training: 0.7463376155059726
User 44038 does not improve AUC. Reverting changes.
Training on augumented user 43991 23/50 current_auc = 0.7481969799414018
User 43991 AUC after training: 0.748535046202389
User 43991 improves AUC. Keeping the model.
Training on augumented user 40949 24/50 current_auc = 0.748535046202389
User 40949 AUC after training: 0.7480842911877394
User 40949 does not improve AUC. Reverting changes.
Training on augumented user 118369 25/50 current_auc = 0.748535046202389
User 118369 AUC after training: 0.7482533243182331
User 118369 does not improve AUC. Reverting changes.
Training on augumented user 18809 26/50 current_auc = 0.748535046202389
User 18809 AUC after training: 0.7475208474194276
User 18809 does not improve AUC. Reverting changes.
Training on augumented user 102252 27/50 current_auc = 0.748535046202389
User 102252 AUC after training: 0.7462530989407257
User 102252 does not improve AUC. Reverting changes.
Training on augumented user 100077 28/50 current_auc = 0.748535046202389
User 100077 AUC after training: 0.747971602434077
User 100077 does not improve AUC. Reverting changes.
Training on augumented user 5920 29/50 current_auc = 0.748535046202389
User 5920 AUC after training: 0.7484787018255579
User 5920 does not improve AUC. Reverting changes.
Training on augumented user 24722 30/50 current_auc = 0.748535046202389
User 24722 AUC after training: 0.7482533243182331
User 24722 does not improve AUC. Reverting changes.
Training on augumented user 82114 31/50 current_auc = 0.748535046202389
User 82114 AUC after training: 0.7472954699121028
User 82114 does not improve AUC. Reverting changes.
Training on augumented user 70205 32/50 current_auc = 0.748535046202389
User 70205 AUC after training: 0.7480279468109083
User 70205 does not improve AUC. Reverting changes.
Training on augumented user 60091 33/50 current_auc = 0.748535046202389
User 60091 AUC after training: 0.7485350462023891
User 60091 improves AUC. Keeping the model.
Training on augumented user 78326 34/50 current_auc = 0.7485350462023891
User 78326 AUC after training: 0.7485913905792202
User 78326 improves AUC. Keeping the model.
Training on augumented user 26813 35/50 current_auc = 0.7485913905792202
User 26813 AUC after training: 0.7488731124633761
User 26813 improves AUC. Keeping the model.
Training on augumented user 39684 36/50 current_auc = 0.7488731124633761
User 39684 AUC after training: 0.7487604237097137
User 39684 does not improve AUC. Reverting changes.
Training on augumented user 85009 37/50 current_auc = 0.7488731124633761
User 85009 AUC after training: 0.7483660130718954
User 85009 does not improve AUC. Reverting changes.
Training on augumented user 31829 38/50 current_auc = 0.7488731124633761
User 31829 AUC after training: 0.7483096686950642
User 31829 does not improve AUC. Reverting changes.
Training on augumented user 133293 39/50 current_auc = 0.7488731124633761
User 133293 AUC after training: 0.7489294568402073
User 133293 improves AUC. Keeping the model.
Training on augumented user 46846 40/50 current_auc = 0.7489294568402073
User 46846 AUC after training: 0.7486477349560514
User 46846 does not improve AUC. Reverting changes.
Training on augumented user 49241 41/50 current_auc = 0.7489294568402073
User 49241 AUC after training: 0.7488731124633761
User 49241 does not improve AUC. Reverting changes.
Training on augumented user 12345 42/50 current_auc = 0.7489294568402073
User 12345 AUC after training: 0.7490421455938697
User 12345 improves AUC. Keeping the model.
Training on augumented user 530 43/50 current_auc = 0.7490421455938697
User 530 AUC after training: 0.7487040793328826
User 530 does not improve AUC. Reverting changes.
Training on augumented user 69310 44/50 current_auc = 0.7490421455938697
User 69310 AUC after training: 0.7486477349560514
User 69310 does not improve AUC. Reverting changes.
Training on augumented user 7653 45/50 current_auc = 0.7490421455938697
User 7653 AUC after training: 0.7487885958981294
User 7653 does not improve AUC. Reverting changes.
Training on augumented user 126149 46/50 current_auc = 0.7490421455938697
User 126149 AUC after training: 0.7483660130718954
User 126149 does not improve AUC. Reverting changes.
Training on augumented user 136619 47/50 current_auc = 0.7490421455938697
User 136619 AUC after training: 0.7492675231011945
User 136619 improves AUC. Keeping the model.
Training on augumented user 102802 48/50 current_auc = 0.7492675231011945
User 102802 AUC after training: 0.7484223574487266
User 102802 does not improve AUC. Reverting changes.
Training on augumented user 119591 49/50 current_auc = 0.7492675231011945
User 119591 AUC after training: 0.7487885958981293
User 119591 does not improve AUC. Reverting changes.
[2024-12-02 19:08:51.271740] start test user 114045 167/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:08:51.889473] start test user 114045 167/567 recall augumented users by random, augumented_users = [70260, 18446, 122605, 5483, 120695, 134858, 120010, 65201, 90480, 69305, 5056, 30810, 15071, 5822, 28995, 16621, 83675, 24373, 128511, 38247, 47213, 93751, 6418, 59787, 52679, 56448, 77223, 79606, 40485, 56706, 68991, 75547, 75645, 1007, 24180, 47766, 137918, 53366, 85766, 26899, 124818, 40776, 100920, 85053, 28832, 86281, 112226, 22379, 137065, 94426]
[2024-12-02 19:08:51.905802] user = 114045 Cloud 167/567
[2024-12-02 19:08:51.919708] user = 114045 Local 167/567
[2024-12-02 19:08:52.129444] user = 114045 Local+ 167/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:08:54.876301] user = 114045 MPDA- 167/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4648217636022514
Training on augumented user 70260 0/50 current_auc = 0.4648217636022514
User 70260 AUC after training: 0.4638836772983114
User 70260 does not improve AUC. Reverting changes.
Training on augumented user 18446 1/50 current_auc = 0.4648217636022514
User 18446 AUC after training: 0.46341463414634143
User 18446 does not improve AUC. Reverting changes.
Training on augumented user 122605 2/50 current_auc = 0.4648217636022514
User 122605 AUC after training: 0.4624765478424015
User 122605 does not improve AUC. Reverting changes.
Training on augumented user 5483 3/50 current_auc = 0.4648217636022514
User 5483 AUC after training: 0.4666979362101313
User 5483 improves AUC. Keeping the model.
Training on augumented user 120695 4/50 current_auc = 0.4666979362101313
User 120695 AUC after training: 0.4638836772983115
User 120695 does not improve AUC. Reverting changes.
Training on augumented user 134858 5/50 current_auc = 0.4666979362101313
User 134858 AUC after training: 0.46529080675422135
User 134858 does not improve AUC. Reverting changes.
Training on augumented user 120010 6/50 current_auc = 0.4666979362101313
User 120010 AUC after training: 0.4657598499061914
User 120010 does not improve AUC. Reverting changes.
Training on augumented user 65201 7/50 current_auc = 0.4666979362101313
User 65201 AUC after training: 0.4666979362101313
User 65201 does not improve AUC. Reverting changes.
Training on augumented user 90480 8/50 current_auc = 0.4666979362101313
User 90480 AUC after training: 0.46575984990619135
User 90480 does not improve AUC. Reverting changes.
Training on augumented user 69305 9/50 current_auc = 0.4666979362101313
User 69305 AUC after training: 0.4657598499061914
User 69305 does not improve AUC. Reverting changes.
Training on augumented user 5056 10/50 current_auc = 0.4666979362101313
User 5056 AUC after training: 0.46575984990619135
User 5056 does not improve AUC. Reverting changes.
Training on augumented user 30810 11/50 current_auc = 0.4666979362101313
User 30810 AUC after training: 0.46810506566604126
User 30810 improves AUC. Keeping the model.
Training on augumented user 15071 12/50 current_auc = 0.46810506566604126
User 15071 AUC after training: 0.4648217636022514
User 15071 does not improve AUC. Reverting changes.
Training on augumented user 5822 13/50 current_auc = 0.46810506566604126
User 5822 AUC after training: 0.46716697936210133
User 5822 does not improve AUC. Reverting changes.
Training on augumented user 28995 14/50 current_auc = 0.46810506566604126
User 28995 AUC after training: 0.4666979362101313
User 28995 does not improve AUC. Reverting changes.
Training on augumented user 16621 15/50 current_auc = 0.46810506566604126
User 16621 AUC after training: 0.4666979362101313
User 16621 does not improve AUC. Reverting changes.
Training on augumented user 83675 16/50 current_auc = 0.46810506566604126
User 83675 AUC after training: 0.4648217636022514
User 83675 does not improve AUC. Reverting changes.
Training on augumented user 24373 17/50 current_auc = 0.46810506566604126
User 24373 AUC after training: 0.4676360225140713
User 24373 does not improve AUC. Reverting changes.
Training on augumented user 128511 18/50 current_auc = 0.46810506566604126
User 128511 AUC after training: 0.4666979362101313
User 128511 does not improve AUC. Reverting changes.
Training on augumented user 38247 19/50 current_auc = 0.46810506566604126
User 38247 AUC after training: 0.46669793621013134
User 38247 does not improve AUC. Reverting changes.
Training on augumented user 47213 20/50 current_auc = 0.46810506566604126
User 47213 AUC after training: 0.46810506566604126
User 47213 does not improve AUC. Reverting changes.
Training on augumented user 93751 21/50 current_auc = 0.46810506566604126
User 93751 AUC after training: 0.46575984990619135
User 93751 does not improve AUC. Reverting changes.
Training on augumented user 6418 22/50 current_auc = 0.46810506566604126
User 6418 AUC after training: 0.4657598499061914
User 6418 does not improve AUC. Reverting changes.
Training on augumented user 59787 23/50 current_auc = 0.46810506566604126
User 59787 AUC after training: 0.4676360225140713
User 59787 does not improve AUC. Reverting changes.
Training on augumented user 52679 24/50 current_auc = 0.46810506566604126
User 52679 AUC after training: 0.4666979362101313
User 52679 does not improve AUC. Reverting changes.
Training on augumented user 56448 25/50 current_auc = 0.46810506566604126
User 56448 AUC after training: 0.46575984990619135
User 56448 does not improve AUC. Reverting changes.
Training on augumented user 77223 26/50 current_auc = 0.46810506566604126
User 77223 AUC after training: 0.46669793621013134
User 77223 does not improve AUC. Reverting changes.
Training on augumented user 79606 27/50 current_auc = 0.46810506566604126
User 79606 AUC after training: 0.46763602251407127
User 79606 does not improve AUC. Reverting changes.
Training on augumented user 40485 28/50 current_auc = 0.46810506566604126
User 40485 AUC after training: 0.4652908067542214
User 40485 does not improve AUC. Reverting changes.
Training on augumented user 56706 29/50 current_auc = 0.46810506566604126
User 56706 AUC after training: 0.4666979362101313
User 56706 does not improve AUC. Reverting changes.
Training on augumented user 68991 30/50 current_auc = 0.46810506566604126
User 68991 AUC after training: 0.46669793621013134
User 68991 does not improve AUC. Reverting changes.
Training on augumented user 75547 31/50 current_auc = 0.46810506566604126
User 75547 AUC after training: 0.46857410881801126
User 75547 improves AUC. Keeping the model.
Training on augumented user 75645 32/50 current_auc = 0.46857410881801126
User 75645 AUC after training: 0.4648217636022514
User 75645 does not improve AUC. Reverting changes.
Training on augumented user 1007 33/50 current_auc = 0.46857410881801126
User 1007 AUC after training: 0.4662288930581614
User 1007 does not improve AUC. Reverting changes.
Training on augumented user 24180 34/50 current_auc = 0.46857410881801126
User 24180 AUC after training: 0.4676360225140713
User 24180 does not improve AUC. Reverting changes.
Training on augumented user 47766 35/50 current_auc = 0.46857410881801126
User 47766 AUC after training: 0.4652908067542214
User 47766 does not improve AUC. Reverting changes.
Training on augumented user 137918 36/50 current_auc = 0.46857410881801126
User 137918 AUC after training: 0.4620075046904315
User 137918 does not improve AUC. Reverting changes.
Training on augumented user 53366 37/50 current_auc = 0.46857410881801126
User 53366 AUC after training: 0.46669793621013134
User 53366 does not improve AUC. Reverting changes.
Training on augumented user 85766 38/50 current_auc = 0.46857410881801126
User 85766 AUC after training: 0.4666979362101313
User 85766 does not improve AUC. Reverting changes.
Training on augumented user 26899 39/50 current_auc = 0.46857410881801126
User 26899 AUC after training: 0.46857410881801126
User 26899 does not improve AUC. Reverting changes.
Training on augumented user 124818 40/50 current_auc = 0.46857410881801126
User 124818 AUC after training: 0.46810506566604126
User 124818 does not improve AUC. Reverting changes.
Training on augumented user 40776 41/50 current_auc = 0.46857410881801126
User 40776 AUC after training: 0.4657598499061914
User 40776 does not improve AUC. Reverting changes.
Training on augumented user 100920 42/50 current_auc = 0.46857410881801126
User 100920 AUC after training: 0.46904315196998125
User 100920 improves AUC. Keeping the model.
Training on augumented user 85053 43/50 current_auc = 0.46904315196998125
User 85053 AUC after training: 0.46622889305816134
User 85053 does not improve AUC. Reverting changes.
Training on augumented user 28832 44/50 current_auc = 0.46904315196998125
User 28832 AUC after training: 0.46810506566604126
User 28832 does not improve AUC. Reverting changes.
Training on augumented user 86281 45/50 current_auc = 0.46904315196998125
User 86281 AUC after training: 0.4676360225140713
User 86281 does not improve AUC. Reverting changes.
Training on augumented user 112226 46/50 current_auc = 0.46904315196998125
User 112226 AUC after training: 0.46669793621013134
User 112226 does not improve AUC. Reverting changes.
Training on augumented user 22379 47/50 current_auc = 0.46904315196998125
User 22379 AUC after training: 0.4671669793621013
User 22379 does not improve AUC. Reverting changes.
Training on augumented user 137065 48/50 current_auc = 0.46904315196998125
User 137065 AUC after training: 0.46904315196998125
User 137065 does not improve AUC. Reverting changes.
Training on augumented user 94426 49/50 current_auc = 0.46904315196998125
User 94426 AUC after training: 0.46810506566604126
User 94426 does not improve AUC. Reverting changes.
[2024-12-02 19:09:22.797884] start test user 114053 168/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:09:23.522955] start test user 114053 168/567 recall augumented users by random, augumented_users = [68886, 125461, 18290, 61482, 39191, 81991, 94050, 87940, 69786, 105049, 62495, 10462, 49883, 67611, 88307, 13214, 103639, 65652, 135535, 14980, 47399, 96068, 56524, 114711, 32797, 112239, 55421, 76314, 54228, 103479, 112002, 18512, 48331, 890, 83748, 119998, 102157, 41192, 81460, 35482, 89804, 63609, 15574, 137926, 117177, 105877, 124525, 60373, 89872, 98568]
[2024-12-02 19:09:23.555035] user = 114053 Cloud 168/567
[2024-12-02 19:09:23.583998] user = 114053 Local 168/567
[2024-12-02 19:09:23.803364] user = 114053 Local+ 168/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:09:26.586961] user = 114053 MPDA- 168/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.825
Training on augumented user 68886 0/50 current_auc = 0.825
User 68886 AUC after training: 0.8263157894736842
User 68886 improves AUC. Keeping the model.
Training on augumented user 125461 1/50 current_auc = 0.8263157894736842
User 125461 AUC after training: 0.8263157894736841
User 125461 does not improve AUC. Reverting changes.
Training on augumented user 18290 2/50 current_auc = 0.8263157894736842
User 18290 AUC after training: 0.8263157894736842
User 18290 does not improve AUC. Reverting changes.
Training on augumented user 61482 3/50 current_auc = 0.8263157894736842
User 61482 AUC after training: 0.825
User 61482 does not improve AUC. Reverting changes.
Training on augumented user 39191 4/50 current_auc = 0.8263157894736842
User 39191 AUC after training: 0.825
User 39191 does not improve AUC. Reverting changes.
Training on augumented user 81991 5/50 current_auc = 0.8263157894736842
User 81991 AUC after training: 0.8263157894736842
User 81991 does not improve AUC. Reverting changes.
Training on augumented user 94050 6/50 current_auc = 0.8263157894736842
User 94050 AUC after training: 0.8263157894736842
User 94050 does not improve AUC. Reverting changes.
Training on augumented user 87940 7/50 current_auc = 0.8263157894736842
User 87940 AUC after training: 0.825
User 87940 does not improve AUC. Reverting changes.
Training on augumented user 69786 8/50 current_auc = 0.8263157894736842
User 69786 AUC after training: 0.825
User 69786 does not improve AUC. Reverting changes.
Training on augumented user 105049 9/50 current_auc = 0.8263157894736842
User 105049 AUC after training: 0.825
User 105049 does not improve AUC. Reverting changes.
Training on augumented user 62495 10/50 current_auc = 0.8263157894736842
User 62495 AUC after training: 0.825
User 62495 does not improve AUC. Reverting changes.
Training on augumented user 10462 11/50 current_auc = 0.8263157894736842
User 10462 AUC after training: 0.8263157894736842
User 10462 does not improve AUC. Reverting changes.
Training on augumented user 49883 12/50 current_auc = 0.8263157894736842
User 49883 AUC after training: 0.8263157894736842
User 49883 does not improve AUC. Reverting changes.
Training on augumented user 67611 13/50 current_auc = 0.8263157894736842
User 67611 AUC after training: 0.8276315789473684
User 67611 improves AUC. Keeping the model.
Training on augumented user 88307 14/50 current_auc = 0.8276315789473684
User 88307 AUC after training: 0.8276315789473684
User 88307 does not improve AUC. Reverting changes.
Training on augumented user 13214 15/50 current_auc = 0.8276315789473684
User 13214 AUC after training: 0.8276315789473684
User 13214 does not improve AUC. Reverting changes.
Training on augumented user 103639 16/50 current_auc = 0.8276315789473684
User 103639 AUC after training: 0.8276315789473684
User 103639 does not improve AUC. Reverting changes.
Training on augumented user 65652 17/50 current_auc = 0.8276315789473684
User 65652 AUC after training: 0.8276315789473684
User 65652 does not improve AUC. Reverting changes.
Training on augumented user 135535 18/50 current_auc = 0.8276315789473684
User 135535 AUC after training: 0.8276315789473684
User 135535 does not improve AUC. Reverting changes.
Training on augumented user 14980 19/50 current_auc = 0.8276315789473684
User 14980 AUC after training: 0.8276315789473684
User 14980 does not improve AUC. Reverting changes.
Training on augumented user 47399 20/50 current_auc = 0.8276315789473684
User 47399 AUC after training: 0.8276315789473684
User 47399 does not improve AUC. Reverting changes.
Training on augumented user 96068 21/50 current_auc = 0.8276315789473684
User 96068 AUC after training: 0.8276315789473684
User 96068 does not improve AUC. Reverting changes.
Training on augumented user 56524 22/50 current_auc = 0.8276315789473684
User 56524 AUC after training: 0.8276315789473684
User 56524 does not improve AUC. Reverting changes.
Training on augumented user 114711 23/50 current_auc = 0.8276315789473684
User 114711 AUC after training: 0.8276315789473684
User 114711 does not improve AUC. Reverting changes.
Training on augumented user 32797 24/50 current_auc = 0.8276315789473684
User 32797 AUC after training: 0.8276315789473684
User 32797 does not improve AUC. Reverting changes.
Training on augumented user 112239 25/50 current_auc = 0.8276315789473684
User 112239 AUC after training: 0.8276315789473684
User 112239 does not improve AUC. Reverting changes.
Training on augumented user 55421 26/50 current_auc = 0.8276315789473684
User 55421 AUC after training: 0.8276315789473684
User 55421 does not improve AUC. Reverting changes.
Training on augumented user 76314 27/50 current_auc = 0.8276315789473684
User 76314 AUC after training: 0.8276315789473684
User 76314 does not improve AUC. Reverting changes.
Training on augumented user 54228 28/50 current_auc = 0.8276315789473684
User 54228 AUC after training: 0.8276315789473684
User 54228 does not improve AUC. Reverting changes.
Training on augumented user 103479 29/50 current_auc = 0.8276315789473684
User 103479 AUC after training: 0.8276315789473684
User 103479 does not improve AUC. Reverting changes.
Training on augumented user 112002 30/50 current_auc = 0.8276315789473684
User 112002 AUC after training: 0.8276315789473684
User 112002 does not improve AUC. Reverting changes.
Training on augumented user 18512 31/50 current_auc = 0.8276315789473684
User 18512 AUC after training: 0.8276315789473684
User 18512 does not improve AUC. Reverting changes.
Training on augumented user 48331 32/50 current_auc = 0.8276315789473684
User 48331 AUC after training: 0.8276315789473684
User 48331 does not improve AUC. Reverting changes.
Training on augumented user 890 33/50 current_auc = 0.8276315789473684
User 890 AUC after training: 0.8276315789473684
User 890 does not improve AUC. Reverting changes.
Training on augumented user 83748 34/50 current_auc = 0.8276315789473684
User 83748 AUC after training: 0.8276315789473684
User 83748 does not improve AUC. Reverting changes.
Training on augumented user 119998 35/50 current_auc = 0.8276315789473684
User 119998 AUC after training: 0.8276315789473684
User 119998 does not improve AUC. Reverting changes.
Training on augumented user 102157 36/50 current_auc = 0.8276315789473684
User 102157 AUC after training: 0.8276315789473684
User 102157 does not improve AUC. Reverting changes.
Training on augumented user 41192 37/50 current_auc = 0.8276315789473684
User 41192 AUC after training: 0.8276315789473684
User 41192 does not improve AUC. Reverting changes.
Training on augumented user 81460 38/50 current_auc = 0.8276315789473684
User 81460 AUC after training: 0.8276315789473684
User 81460 does not improve AUC. Reverting changes.
Training on augumented user 35482 39/50 current_auc = 0.8276315789473684
User 35482 AUC after training: 0.8276315789473684
User 35482 does not improve AUC. Reverting changes.
Training on augumented user 89804 40/50 current_auc = 0.8276315789473684
User 89804 AUC after training: 0.8276315789473684
User 89804 does not improve AUC. Reverting changes.
Training on augumented user 63609 41/50 current_auc = 0.8276315789473684
User 63609 AUC after training: 0.8276315789473684
User 63609 does not improve AUC. Reverting changes.
Training on augumented user 15574 42/50 current_auc = 0.8276315789473684
User 15574 AUC after training: 0.8276315789473684
User 15574 does not improve AUC. Reverting changes.
Training on augumented user 137926 43/50 current_auc = 0.8276315789473684
User 137926 AUC after training: 0.8263157894736842
User 137926 does not improve AUC. Reverting changes.
Training on augumented user 117177 44/50 current_auc = 0.8276315789473684
User 117177 AUC after training: 0.8263157894736842
User 117177 does not improve AUC. Reverting changes.
Training on augumented user 105877 45/50 current_auc = 0.8276315789473684
User 105877 AUC after training: 0.8276315789473684
User 105877 does not improve AUC. Reverting changes.
Training on augumented user 124525 46/50 current_auc = 0.8276315789473684
User 124525 AUC after training: 0.8276315789473684
User 124525 does not improve AUC. Reverting changes.
Training on augumented user 60373 47/50 current_auc = 0.8276315789473684
User 60373 AUC after training: 0.8276315789473684
User 60373 does not improve AUC. Reverting changes.
Training on augumented user 89872 48/50 current_auc = 0.8276315789473684
User 89872 AUC after training: 0.8276315789473684
User 89872 does not improve AUC. Reverting changes.
Training on augumented user 98568 49/50 current_auc = 0.8276315789473684
User 98568 AUC after training: 0.8276315789473684
User 98568 does not improve AUC. Reverting changes.
[2024-12-02 19:09:55.886037] start test user 114064 169/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:09:56.348453] start test user 114064 169/567 recall augumented users by random, augumented_users = [82953, 26746, 29916, 114407, 39491, 88627, 46498, 99675, 43698, 127307, 47418, 81020, 34628, 128210, 125253, 116173, 114416, 63588, 81685, 111636, 25601, 113687, 107379, 138108, 87164, 84360, 19399, 102246, 63307, 123008, 37338, 87284, 29820, 17947, 9808, 46430, 57465, 73283, 7311, 79191, 124313, 45826, 23689, 34679, 103066, 71336, 90594, 65648, 99895, 107670]
[2024-12-02 19:09:56.362797] user = 114064 Cloud 169/567
[2024-12-02 19:09:56.372139] user = 114064 Local 169/567
[2024-12-02 19:09:56.390227] user = 114064 Local+ 169/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:09:58.430867] user = 114064 MPDA- 169/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7571428571428571
Training on augumented user 82953 0/50 current_auc = 0.7571428571428571
User 82953 AUC after training: 0.7571428571428571
User 82953 does not improve AUC. Reverting changes.
Training on augumented user 26746 1/50 current_auc = 0.7571428571428571
User 26746 AUC after training: 0.7571428571428571
User 26746 does not improve AUC. Reverting changes.
Training on augumented user 29916 2/50 current_auc = 0.7571428571428571
User 29916 AUC after training: 0.7571428571428571
User 29916 does not improve AUC. Reverting changes.
Training on augumented user 114407 3/50 current_auc = 0.7571428571428571
User 114407 AUC after training: 0.7571428571428571
User 114407 does not improve AUC. Reverting changes.
Training on augumented user 39491 4/50 current_auc = 0.7571428571428571
User 39491 AUC after training: 0.7428571428571428
User 39491 does not improve AUC. Reverting changes.
Training on augumented user 88627 5/50 current_auc = 0.7571428571428571
User 88627 AUC after training: 0.7571428571428571
User 88627 does not improve AUC. Reverting changes.
Training on augumented user 46498 6/50 current_auc = 0.7571428571428571
User 46498 AUC after training: 0.7428571428571428
User 46498 does not improve AUC. Reverting changes.
Training on augumented user 99675 7/50 current_auc = 0.7571428571428571
User 99675 AUC after training: 0.7571428571428571
User 99675 does not improve AUC. Reverting changes.
Training on augumented user 43698 8/50 current_auc = 0.7571428571428571
User 43698 AUC after training: 0.7571428571428571
User 43698 does not improve AUC. Reverting changes.
Training on augumented user 127307 9/50 current_auc = 0.7571428571428571
User 127307 AUC after training: 0.7571428571428571
User 127307 does not improve AUC. Reverting changes.
Training on augumented user 47418 10/50 current_auc = 0.7571428571428571
User 47418 AUC after training: 0.7571428571428571
User 47418 does not improve AUC. Reverting changes.
Training on augumented user 81020 11/50 current_auc = 0.7571428571428571
User 81020 AUC after training: 0.7571428571428571
User 81020 does not improve AUC. Reverting changes.
Training on augumented user 34628 12/50 current_auc = 0.7571428571428571
User 34628 AUC after training: 0.7571428571428571
User 34628 does not improve AUC. Reverting changes.
Training on augumented user 128210 13/50 current_auc = 0.7571428571428571
User 128210 AUC after training: 0.7571428571428571
User 128210 does not improve AUC. Reverting changes.
Training on augumented user 125253 14/50 current_auc = 0.7571428571428571
User 125253 AUC after training: 0.7571428571428571
User 125253 does not improve AUC. Reverting changes.
Training on augumented user 116173 15/50 current_auc = 0.7571428571428571
User 116173 AUC after training: 0.7571428571428571
User 116173 does not improve AUC. Reverting changes.
Training on augumented user 114416 16/50 current_auc = 0.7571428571428571
User 114416 AUC after training: 0.7571428571428571
User 114416 does not improve AUC. Reverting changes.
Training on augumented user 63588 17/50 current_auc = 0.7571428571428571
User 63588 AUC after training: 0.7571428571428571
User 63588 does not improve AUC. Reverting changes.
Training on augumented user 81685 18/50 current_auc = 0.7571428571428571
User 81685 AUC after training: 0.7571428571428571
User 81685 does not improve AUC. Reverting changes.
Training on augumented user 111636 19/50 current_auc = 0.7571428571428571
User 111636 AUC after training: 0.7571428571428571
User 111636 does not improve AUC. Reverting changes.
Training on augumented user 25601 20/50 current_auc = 0.7571428571428571
User 25601 AUC after training: 0.7428571428571428
User 25601 does not improve AUC. Reverting changes.
Training on augumented user 113687 21/50 current_auc = 0.7571428571428571
User 113687 AUC after training: 0.7428571428571428
User 113687 does not improve AUC. Reverting changes.
Training on augumented user 107379 22/50 current_auc = 0.7571428571428571
User 107379 AUC after training: 0.7571428571428571
User 107379 does not improve AUC. Reverting changes.
Training on augumented user 138108 23/50 current_auc = 0.7571428571428571
User 138108 AUC after training: 0.7571428571428571
User 138108 does not improve AUC. Reverting changes.
Training on augumented user 87164 24/50 current_auc = 0.7571428571428571
User 87164 AUC after training: 0.7571428571428571
User 87164 does not improve AUC. Reverting changes.
Training on augumented user 84360 25/50 current_auc = 0.7571428571428571
User 84360 AUC after training: 0.7571428571428571
User 84360 does not improve AUC. Reverting changes.
Training on augumented user 19399 26/50 current_auc = 0.7571428571428571
User 19399 AUC after training: 0.7428571428571428
User 19399 does not improve AUC. Reverting changes.
Training on augumented user 102246 27/50 current_auc = 0.7571428571428571
User 102246 AUC after training: 0.7571428571428571
User 102246 does not improve AUC. Reverting changes.
Training on augumented user 63307 28/50 current_auc = 0.7571428571428571
User 63307 AUC after training: 0.7428571428571428
User 63307 does not improve AUC. Reverting changes.
Training on augumented user 123008 29/50 current_auc = 0.7571428571428571
User 123008 AUC after training: 0.7428571428571428
User 123008 does not improve AUC. Reverting changes.
Training on augumented user 37338 30/50 current_auc = 0.7571428571428571
User 37338 AUC after training: 0.7571428571428571
User 37338 does not improve AUC. Reverting changes.
Training on augumented user 87284 31/50 current_auc = 0.7571428571428571
User 87284 AUC after training: 0.7571428571428571
User 87284 does not improve AUC. Reverting changes.
Training on augumented user 29820 32/50 current_auc = 0.7571428571428571
User 29820 AUC after training: 0.7428571428571428
User 29820 does not improve AUC. Reverting changes.
Training on augumented user 17947 33/50 current_auc = 0.7571428571428571
User 17947 AUC after training: 0.7428571428571428
User 17947 does not improve AUC. Reverting changes.
Training on augumented user 9808 34/50 current_auc = 0.7571428571428571
User 9808 AUC after training: 0.7571428571428571
User 9808 does not improve AUC. Reverting changes.
Training on augumented user 46430 35/50 current_auc = 0.7571428571428571
User 46430 AUC after training: 0.7428571428571428
User 46430 does not improve AUC. Reverting changes.
Training on augumented user 57465 36/50 current_auc = 0.7571428571428571
User 57465 AUC after training: 0.7428571428571428
User 57465 does not improve AUC. Reverting changes.
Training on augumented user 73283 37/50 current_auc = 0.7571428571428571
User 73283 AUC after training: 0.7571428571428571
User 73283 does not improve AUC. Reverting changes.
Training on augumented user 7311 38/50 current_auc = 0.7571428571428571
User 7311 AUC after training: 0.7571428571428571
User 7311 does not improve AUC. Reverting changes.
Training on augumented user 79191 39/50 current_auc = 0.7571428571428571
User 79191 AUC after training: 0.7428571428571428
User 79191 does not improve AUC. Reverting changes.
Training on augumented user 124313 40/50 current_auc = 0.7571428571428571
User 124313 AUC after training: 0.7428571428571428
User 124313 does not improve AUC. Reverting changes.
Training on augumented user 45826 41/50 current_auc = 0.7571428571428571
User 45826 AUC after training: 0.7428571428571428
User 45826 does not improve AUC. Reverting changes.
Training on augumented user 23689 42/50 current_auc = 0.7571428571428571
User 23689 AUC after training: 0.7571428571428571
User 23689 does not improve AUC. Reverting changes.
Training on augumented user 34679 43/50 current_auc = 0.7571428571428571
User 34679 AUC after training: 0.7571428571428571
User 34679 does not improve AUC. Reverting changes.
Training on augumented user 103066 44/50 current_auc = 0.7571428571428571
User 103066 AUC after training: 0.7571428571428571
User 103066 does not improve AUC. Reverting changes.
Training on augumented user 71336 45/50 current_auc = 0.7571428571428571
User 71336 AUC after training: 0.7571428571428571
User 71336 does not improve AUC. Reverting changes.
Training on augumented user 90594 46/50 current_auc = 0.7571428571428571
User 90594 AUC after training: 0.7571428571428571
User 90594 does not improve AUC. Reverting changes.
Training on augumented user 65648 47/50 current_auc = 0.7571428571428571
User 65648 AUC after training: 0.7571428571428571
User 65648 does not improve AUC. Reverting changes.
Training on augumented user 99895 48/50 current_auc = 0.7571428571428571
User 99895 AUC after training: 0.7571428571428571
User 99895 does not improve AUC. Reverting changes.
Training on augumented user 107670 49/50 current_auc = 0.7571428571428571
User 107670 AUC after training: 0.7571428571428571
User 107670 does not improve AUC. Reverting changes.
[2024-12-02 19:10:28.210304] start test user 114120 170/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:10:28.835095] start test user 114120 170/567 recall augumented users by random, augumented_users = [29490, 55277, 80559, 118949, 80719, 51712, 13908, 28541, 13059, 17036, 92348, 30848, 19852, 30139, 93412, 16882, 83824, 92566, 82586, 38430, 7609, 134301, 83272, 43139, 27075, 70894, 63208, 4557, 83873, 31734, 111563, 19344, 45386, 124367, 36064, 58640, 90330, 78708, 29982, 19501, 54138, 120854, 107470, 37658, 102759, 131875, 95334, 102799, 121871, 71114]
[2024-12-02 19:10:28.850131] user = 114120 Cloud 170/567
[2024-12-02 19:10:28.859876] user = 114120 Local 170/567
[2024-12-02 19:10:28.898441] user = 114120 Local+ 170/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:10:31.594093] user = 114120 MPDA- 170/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 1.0
Training on augumented user 29490 0/50 current_auc = 1.0
User 29490 AUC after training: 1.0
User 29490 does not improve AUC. Reverting changes.
Training on augumented user 55277 1/50 current_auc = 1.0
User 55277 AUC after training: 1.0
User 55277 does not improve AUC. Reverting changes.
Training on augumented user 80559 2/50 current_auc = 1.0
User 80559 AUC after training: 1.0
User 80559 does not improve AUC. Reverting changes.
Training on augumented user 118949 3/50 current_auc = 1.0
User 118949 AUC after training: 1.0
User 118949 does not improve AUC. Reverting changes.
Training on augumented user 80719 4/50 current_auc = 1.0
User 80719 AUC after training: 1.0
User 80719 does not improve AUC. Reverting changes.
Training on augumented user 51712 5/50 current_auc = 1.0
User 51712 AUC after training: 1.0
User 51712 does not improve AUC. Reverting changes.
Training on augumented user 13908 6/50 current_auc = 1.0
User 13908 AUC after training: 1.0
User 13908 does not improve AUC. Reverting changes.
Training on augumented user 28541 7/50 current_auc = 1.0
User 28541 AUC after training: 1.0
User 28541 does not improve AUC. Reverting changes.
Training on augumented user 13059 8/50 current_auc = 1.0
User 13059 AUC after training: 1.0
User 13059 does not improve AUC. Reverting changes.
Training on augumented user 17036 9/50 current_auc = 1.0
User 17036 AUC after training: 1.0
User 17036 does not improve AUC. Reverting changes.
Training on augumented user 92348 10/50 current_auc = 1.0
User 92348 AUC after training: 1.0
User 92348 does not improve AUC. Reverting changes.
Training on augumented user 30848 11/50 current_auc = 1.0
User 30848 AUC after training: 1.0
User 30848 does not improve AUC. Reverting changes.
Training on augumented user 19852 12/50 current_auc = 1.0
User 19852 AUC after training: 1.0
User 19852 does not improve AUC. Reverting changes.
Training on augumented user 30139 13/50 current_auc = 1.0
User 30139 AUC after training: 1.0
User 30139 does not improve AUC. Reverting changes.
Training on augumented user 93412 14/50 current_auc = 1.0
User 93412 AUC after training: 1.0
User 93412 does not improve AUC. Reverting changes.
Training on augumented user 16882 15/50 current_auc = 1.0
User 16882 AUC after training: 1.0
User 16882 does not improve AUC. Reverting changes.
Training on augumented user 83824 16/50 current_auc = 1.0
User 83824 AUC after training: 1.0
User 83824 does not improve AUC. Reverting changes.
Training on augumented user 92566 17/50 current_auc = 1.0
User 92566 AUC after training: 1.0
User 92566 does not improve AUC. Reverting changes.
Training on augumented user 82586 18/50 current_auc = 1.0
User 82586 AUC after training: 1.0
User 82586 does not improve AUC. Reverting changes.
Training on augumented user 38430 19/50 current_auc = 1.0
User 38430 AUC after training: 1.0
User 38430 does not improve AUC. Reverting changes.
Training on augumented user 7609 20/50 current_auc = 1.0
User 7609 AUC after training: 1.0
User 7609 does not improve AUC. Reverting changes.
Training on augumented user 134301 21/50 current_auc = 1.0
User 134301 AUC after training: 1.0
User 134301 does not improve AUC. Reverting changes.
Training on augumented user 83272 22/50 current_auc = 1.0
User 83272 AUC after training: 1.0
User 83272 does not improve AUC. Reverting changes.
Training on augumented user 43139 23/50 current_auc = 1.0
User 43139 AUC after training: 1.0
User 43139 does not improve AUC. Reverting changes.
Training on augumented user 27075 24/50 current_auc = 1.0
User 27075 AUC after training: 1.0
User 27075 does not improve AUC. Reverting changes.
Training on augumented user 70894 25/50 current_auc = 1.0
User 70894 AUC after training: 1.0
User 70894 does not improve AUC. Reverting changes.
Training on augumented user 63208 26/50 current_auc = 1.0
User 63208 AUC after training: 1.0
User 63208 does not improve AUC. Reverting changes.
Training on augumented user 4557 27/50 current_auc = 1.0
User 4557 AUC after training: 1.0
User 4557 does not improve AUC. Reverting changes.
Training on augumented user 83873 28/50 current_auc = 1.0
User 83873 AUC after training: 1.0
User 83873 does not improve AUC. Reverting changes.
Training on augumented user 31734 29/50 current_auc = 1.0
User 31734 AUC after training: 1.0
User 31734 does not improve AUC. Reverting changes.
Training on augumented user 111563 30/50 current_auc = 1.0
User 111563 AUC after training: 1.0
User 111563 does not improve AUC. Reverting changes.
Training on augumented user 19344 31/50 current_auc = 1.0
User 19344 AUC after training: 1.0
User 19344 does not improve AUC. Reverting changes.
Training on augumented user 45386 32/50 current_auc = 1.0
User 45386 AUC after training: 1.0
User 45386 does not improve AUC. Reverting changes.
Training on augumented user 124367 33/50 current_auc = 1.0
User 124367 AUC after training: 1.0
User 124367 does not improve AUC. Reverting changes.
Training on augumented user 36064 34/50 current_auc = 1.0
User 36064 AUC after training: 1.0
User 36064 does not improve AUC. Reverting changes.
Training on augumented user 58640 35/50 current_auc = 1.0
User 58640 AUC after training: 1.0
User 58640 does not improve AUC. Reverting changes.
Training on augumented user 90330 36/50 current_auc = 1.0
User 90330 AUC after training: 1.0
User 90330 does not improve AUC. Reverting changes.
Training on augumented user 78708 37/50 current_auc = 1.0
User 78708 AUC after training: 1.0
User 78708 does not improve AUC. Reverting changes.
Training on augumented user 29982 38/50 current_auc = 1.0
User 29982 AUC after training: 1.0
User 29982 does not improve AUC. Reverting changes.
Training on augumented user 19501 39/50 current_auc = 1.0
User 19501 AUC after training: 1.0
User 19501 does not improve AUC. Reverting changes.
Training on augumented user 54138 40/50 current_auc = 1.0
User 54138 AUC after training: 1.0
User 54138 does not improve AUC. Reverting changes.
Training on augumented user 120854 41/50 current_auc = 1.0
User 120854 AUC after training: 1.0
User 120854 does not improve AUC. Reverting changes.
Training on augumented user 107470 42/50 current_auc = 1.0
User 107470 AUC after training: 1.0
User 107470 does not improve AUC. Reverting changes.
Training on augumented user 37658 43/50 current_auc = 1.0
User 37658 AUC after training: 1.0
User 37658 does not improve AUC. Reverting changes.
Training on augumented user 102759 44/50 current_auc = 1.0
User 102759 AUC after training: 1.0
User 102759 does not improve AUC. Reverting changes.
Training on augumented user 131875 45/50 current_auc = 1.0
User 131875 AUC after training: 1.0
User 131875 does not improve AUC. Reverting changes.
Training on augumented user 95334 46/50 current_auc = 1.0
User 95334 AUC after training: 1.0
User 95334 does not improve AUC. Reverting changes.
Training on augumented user 102799 47/50 current_auc = 1.0
User 102799 AUC after training: 1.0
User 102799 does not improve AUC. Reverting changes.
Training on augumented user 121871 48/50 current_auc = 1.0
User 121871 AUC after training: 1.0
User 121871 does not improve AUC. Reverting changes.
Training on augumented user 71114 49/50 current_auc = 1.0
User 71114 AUC after training: 1.0
User 71114 does not improve AUC. Reverting changes.
[2024-12-02 19:10:57.891426] start test user 114133 171/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:10:58.377649] start test user 114133 171/567 recall augumented users by random, augumented_users = [132798, 53819, 19884, 32095, 15405, 73840, 131053, 34934, 3074, 14167, 73440, 63584, 15436, 99892, 9489, 103157, 17079, 123659, 126909, 88496, 63866, 72198, 133444, 132769, 114797, 70167, 90966, 93596, 26456, 95392, 48925, 52704, 115438, 77705, 95419, 122950, 44904, 127267, 51833, 28730, 85896, 78836, 110243, 57198, 43828, 120022, 91800, 40527, 127909, 91289]
[2024-12-02 19:10:58.394799] user = 114133 Cloud 171/567
[2024-12-02 19:10:58.404123] user = 114133 Local 171/567
[2024-12-02 19:10:58.449424] user = 114133 Local+ 171/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:11:00.482572] user = 114133 MPDA- 171/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5477941176470589
Training on augumented user 132798 0/50 current_auc = 0.5477941176470589
User 132798 AUC after training: 0.5477941176470589
User 132798 does not improve AUC. Reverting changes.
Training on augumented user 53819 1/50 current_auc = 0.5477941176470589
User 53819 AUC after training: 0.5477941176470589
User 53819 does not improve AUC. Reverting changes.
Training on augumented user 19884 2/50 current_auc = 0.5477941176470589
User 19884 AUC after training: 0.5514705882352942
User 19884 improves AUC. Keeping the model.
Training on augumented user 32095 3/50 current_auc = 0.5514705882352942
User 32095 AUC after training: 0.5477941176470589
User 32095 does not improve AUC. Reverting changes.
Training on augumented user 15405 4/50 current_auc = 0.5514705882352942
User 15405 AUC after training: 0.5514705882352942
User 15405 does not improve AUC. Reverting changes.
Training on augumented user 73840 5/50 current_auc = 0.5514705882352942
User 73840 AUC after training: 0.5514705882352942
User 73840 does not improve AUC. Reverting changes.
Training on augumented user 131053 6/50 current_auc = 0.5514705882352942
User 131053 AUC after training: 0.5404411764705883
User 131053 does not improve AUC. Reverting changes.
Training on augumented user 34934 7/50 current_auc = 0.5514705882352942
User 34934 AUC after training: 0.5514705882352942
User 34934 does not improve AUC. Reverting changes.
Training on augumented user 3074 8/50 current_auc = 0.5514705882352942
User 3074 AUC after training: 0.5514705882352942
User 3074 does not improve AUC. Reverting changes.
Training on augumented user 14167 9/50 current_auc = 0.5514705882352942
User 14167 AUC after training: 0.5514705882352942
User 14167 does not improve AUC. Reverting changes.
Training on augumented user 73440 10/50 current_auc = 0.5514705882352942
User 73440 AUC after training: 0.5514705882352942
User 73440 does not improve AUC. Reverting changes.
Training on augumented user 63584 11/50 current_auc = 0.5514705882352942
User 63584 AUC after training: 0.5477941176470589
User 63584 does not improve AUC. Reverting changes.
Training on augumented user 15436 12/50 current_auc = 0.5514705882352942
User 15436 AUC after training: 0.5514705882352942
User 15436 does not improve AUC. Reverting changes.
Training on augumented user 99892 13/50 current_auc = 0.5514705882352942
User 99892 AUC after training: 0.5514705882352942
User 99892 does not improve AUC. Reverting changes.
Training on augumented user 9489 14/50 current_auc = 0.5514705882352942
User 9489 AUC after training: 0.5441176470588236
User 9489 does not improve AUC. Reverting changes.
Training on augumented user 103157 15/50 current_auc = 0.5514705882352942
User 103157 AUC after training: 0.5514705882352942
User 103157 does not improve AUC. Reverting changes.
Training on augumented user 17079 16/50 current_auc = 0.5514705882352942
User 17079 AUC after training: 0.5477941176470589
User 17079 does not improve AUC. Reverting changes.
Training on augumented user 123659 17/50 current_auc = 0.5514705882352942
User 123659 AUC after training: 0.5477941176470589
User 123659 does not improve AUC. Reverting changes.
Training on augumented user 126909 18/50 current_auc = 0.5514705882352942
User 126909 AUC after training: 0.5441176470588236
User 126909 does not improve AUC. Reverting changes.
Training on augumented user 88496 19/50 current_auc = 0.5514705882352942
User 88496 AUC after training: 0.5477941176470589
User 88496 does not improve AUC. Reverting changes.
Training on augumented user 63866 20/50 current_auc = 0.5514705882352942
User 63866 AUC after training: 0.5514705882352942
User 63866 does not improve AUC. Reverting changes.
Training on augumented user 72198 21/50 current_auc = 0.5514705882352942
User 72198 AUC after training: 0.5477941176470589
User 72198 does not improve AUC. Reverting changes.
Training on augumented user 133444 22/50 current_auc = 0.5514705882352942
User 133444 AUC after training: 0.5477941176470589
User 133444 does not improve AUC. Reverting changes.
Training on augumented user 132769 23/50 current_auc = 0.5514705882352942
User 132769 AUC after training: 0.5514705882352942
User 132769 does not improve AUC. Reverting changes.
Training on augumented user 114797 24/50 current_auc = 0.5514705882352942
User 114797 AUC after training: 0.5514705882352942
User 114797 does not improve AUC. Reverting changes.
Training on augumented user 70167 25/50 current_auc = 0.5514705882352942
User 70167 AUC after training: 0.5514705882352942
User 70167 does not improve AUC. Reverting changes.
Training on augumented user 90966 26/50 current_auc = 0.5514705882352942
User 90966 AUC after training: 0.5514705882352942
User 90966 does not improve AUC. Reverting changes.
Training on augumented user 93596 27/50 current_auc = 0.5514705882352942
User 93596 AUC after training: 0.5477941176470589
User 93596 does not improve AUC. Reverting changes.
Training on augumented user 26456 28/50 current_auc = 0.5514705882352942
User 26456 AUC after training: 0.5514705882352942
User 26456 does not improve AUC. Reverting changes.
Training on augumented user 95392 29/50 current_auc = 0.5514705882352942
User 95392 AUC after training: 0.5514705882352942
User 95392 does not improve AUC. Reverting changes.
Training on augumented user 48925 30/50 current_auc = 0.5514705882352942
User 48925 AUC after training: 0.5477941176470589
User 48925 does not improve AUC. Reverting changes.
Training on augumented user 52704 31/50 current_auc = 0.5514705882352942
User 52704 AUC after training: 0.5514705882352942
User 52704 does not improve AUC. Reverting changes.
Training on augumented user 115438 32/50 current_auc = 0.5514705882352942
User 115438 AUC after training: 0.5514705882352942
User 115438 does not improve AUC. Reverting changes.
Training on augumented user 77705 33/50 current_auc = 0.5514705882352942
User 77705 AUC after training: 0.5514705882352942
User 77705 does not improve AUC. Reverting changes.
Training on augumented user 95419 34/50 current_auc = 0.5514705882352942
User 95419 AUC after training: 0.5514705882352942
User 95419 does not improve AUC. Reverting changes.
Training on augumented user 122950 35/50 current_auc = 0.5514705882352942
User 122950 AUC after training: 0.5477941176470589
User 122950 does not improve AUC. Reverting changes.
Training on augumented user 44904 36/50 current_auc = 0.5514705882352942
User 44904 AUC after training: 0.5441176470588236
User 44904 does not improve AUC. Reverting changes.
Training on augumented user 127267 37/50 current_auc = 0.5514705882352942
User 127267 AUC after training: 0.5514705882352942
User 127267 does not improve AUC. Reverting changes.
Training on augumented user 51833 38/50 current_auc = 0.5514705882352942
User 51833 AUC after training: 0.5477941176470589
User 51833 does not improve AUC. Reverting changes.
Training on augumented user 28730 39/50 current_auc = 0.5514705882352942
User 28730 AUC after training: 0.5477941176470589
User 28730 does not improve AUC. Reverting changes.
Training on augumented user 85896 40/50 current_auc = 0.5514705882352942
User 85896 AUC after training: 0.5477941176470589
User 85896 does not improve AUC. Reverting changes.
Training on augumented user 78836 41/50 current_auc = 0.5514705882352942
User 78836 AUC after training: 0.5477941176470589
User 78836 does not improve AUC. Reverting changes.
Training on augumented user 110243 42/50 current_auc = 0.5514705882352942
User 110243 AUC after training: 0.5477941176470589
User 110243 does not improve AUC. Reverting changes.
Training on augumented user 57198 43/50 current_auc = 0.5514705882352942
User 57198 AUC after training: 0.5477941176470589
User 57198 does not improve AUC. Reverting changes.
Training on augumented user 43828 44/50 current_auc = 0.5514705882352942
User 43828 AUC after training: 0.5514705882352942
User 43828 does not improve AUC. Reverting changes.
Training on augumented user 120022 45/50 current_auc = 0.5514705882352942
User 120022 AUC after training: 0.5514705882352942
User 120022 does not improve AUC. Reverting changes.
Training on augumented user 91800 46/50 current_auc = 0.5514705882352942
User 91800 AUC after training: 0.5477941176470589
User 91800 does not improve AUC. Reverting changes.
Training on augumented user 40527 47/50 current_auc = 0.5514705882352942
User 40527 AUC after training: 0.5441176470588236
User 40527 does not improve AUC. Reverting changes.
Training on augumented user 127909 48/50 current_auc = 0.5514705882352942
User 127909 AUC after training: 0.5514705882352942
User 127909 does not improve AUC. Reverting changes.
Training on augumented user 91289 49/50 current_auc = 0.5514705882352942
User 91289 AUC after training: 0.5477941176470589
User 91289 does not improve AUC. Reverting changes.
[2024-12-02 19:11:32.401748] start test user 114183 172/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:11:32.885548] start test user 114183 172/567 recall augumented users by random, augumented_users = [35326, 110201, 81999, 3080, 114405, 79029, 92877, 24006, 32947, 105721, 52881, 64876, 135136, 367, 109226, 62006, 70085, 71971, 26453, 295, 27173, 31339, 96686, 30184, 107834, 16095, 7664, 102259, 135142, 74135, 60437, 85413, 9057, 75414, 2120, 36782, 19797, 123239, 868, 13734, 53826, 72101, 16797, 93908, 81773, 63424, 45417, 39104, 56436, 90744]
[2024-12-02 19:11:32.903771] user = 114183 Cloud 172/567
[2024-12-02 19:11:32.915499] user = 114183 Local 172/567
[2024-12-02 19:11:33.032582] user = 114183 Local+ 172/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:11:35.705147] user = 114183 MPDA- 172/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5833333333333333
Training on augumented user 35326 0/50 current_auc = 0.5833333333333333
User 35326 AUC after training: 0.5833333333333333
User 35326 does not improve AUC. Reverting changes.
Training on augumented user 110201 1/50 current_auc = 0.5833333333333333
User 110201 AUC after training: 0.5833333333333333
User 110201 does not improve AUC. Reverting changes.
Training on augumented user 81999 2/50 current_auc = 0.5833333333333333
User 81999 AUC after training: 0.5833333333333333
User 81999 does not improve AUC. Reverting changes.
Training on augumented user 3080 3/50 current_auc = 0.5833333333333333
User 3080 AUC after training: 0.5833333333333333
User 3080 does not improve AUC. Reverting changes.
Training on augumented user 114405 4/50 current_auc = 0.5833333333333333
User 114405 AUC after training: 0.5833333333333333
User 114405 does not improve AUC. Reverting changes.
Training on augumented user 79029 5/50 current_auc = 0.5833333333333333
User 79029 AUC after training: 0.5833333333333333
User 79029 does not improve AUC. Reverting changes.
Training on augumented user 92877 6/50 current_auc = 0.5833333333333333
User 92877 AUC after training: 0.5833333333333333
User 92877 does not improve AUC. Reverting changes.
Training on augumented user 24006 7/50 current_auc = 0.5833333333333333
User 24006 AUC after training: 0.5833333333333333
User 24006 does not improve AUC. Reverting changes.
Training on augumented user 32947 8/50 current_auc = 0.5833333333333333
User 32947 AUC after training: 0.5833333333333333
User 32947 does not improve AUC. Reverting changes.
Training on augumented user 105721 9/50 current_auc = 0.5833333333333333
User 105721 AUC after training: 0.5833333333333333
User 105721 does not improve AUC. Reverting changes.
Training on augumented user 52881 10/50 current_auc = 0.5833333333333333
User 52881 AUC after training: 0.5833333333333333
User 52881 does not improve AUC. Reverting changes.
Training on augumented user 64876 11/50 current_auc = 0.5833333333333333
User 64876 AUC after training: 0.5833333333333333
User 64876 does not improve AUC. Reverting changes.
Training on augumented user 135136 12/50 current_auc = 0.5833333333333333
User 135136 AUC after training: 0.5833333333333333
User 135136 does not improve AUC. Reverting changes.
Training on augumented user 367 13/50 current_auc = 0.5833333333333333
User 367 AUC after training: 0.5833333333333333
User 367 does not improve AUC. Reverting changes.
Training on augumented user 109226 14/50 current_auc = 0.5833333333333333
User 109226 AUC after training: 0.5833333333333333
User 109226 does not improve AUC. Reverting changes.
Training on augumented user 62006 15/50 current_auc = 0.5833333333333333
User 62006 AUC after training: 0.5833333333333333
User 62006 does not improve AUC. Reverting changes.
Training on augumented user 70085 16/50 current_auc = 0.5833333333333333
User 70085 AUC after training: 0.5833333333333333
User 70085 does not improve AUC. Reverting changes.
Training on augumented user 71971 17/50 current_auc = 0.5833333333333333
User 71971 AUC after training: 0.5833333333333333
User 71971 does not improve AUC. Reverting changes.
Training on augumented user 26453 18/50 current_auc = 0.5833333333333333
User 26453 AUC after training: 0.5833333333333333
User 26453 does not improve AUC. Reverting changes.
Training on augumented user 295 19/50 current_auc = 0.5833333333333333
User 295 AUC after training: 0.5833333333333333
User 295 does not improve AUC. Reverting changes.
Training on augumented user 27173 20/50 current_auc = 0.5833333333333333
User 27173 AUC after training: 0.5833333333333333
User 27173 does not improve AUC. Reverting changes.
Training on augumented user 31339 21/50 current_auc = 0.5833333333333333
User 31339 AUC after training: 0.5833333333333333
User 31339 does not improve AUC. Reverting changes.
Training on augumented user 96686 22/50 current_auc = 0.5833333333333333
User 96686 AUC after training: 0.5833333333333333
User 96686 does not improve AUC. Reverting changes.
Training on augumented user 30184 23/50 current_auc = 0.5833333333333333
User 30184 AUC after training: 0.5833333333333333
User 30184 does not improve AUC. Reverting changes.
Training on augumented user 107834 24/50 current_auc = 0.5833333333333333
User 107834 AUC after training: 0.5833333333333333
User 107834 does not improve AUC. Reverting changes.
Training on augumented user 16095 25/50 current_auc = 0.5833333333333333
User 16095 AUC after training: 0.5833333333333333
User 16095 does not improve AUC. Reverting changes.
Training on augumented user 7664 26/50 current_auc = 0.5833333333333333
User 7664 AUC after training: 0.5833333333333333
User 7664 does not improve AUC. Reverting changes.
Training on augumented user 102259 27/50 current_auc = 0.5833333333333333
User 102259 AUC after training: 0.5833333333333333
User 102259 does not improve AUC. Reverting changes.
Training on augumented user 135142 28/50 current_auc = 0.5833333333333333
User 135142 AUC after training: 0.5833333333333333
User 135142 does not improve AUC. Reverting changes.
Training on augumented user 74135 29/50 current_auc = 0.5833333333333333
User 74135 AUC after training: 0.5833333333333333
User 74135 does not improve AUC. Reverting changes.
Training on augumented user 60437 30/50 current_auc = 0.5833333333333333
User 60437 AUC after training: 0.5833333333333333
User 60437 does not improve AUC. Reverting changes.
Training on augumented user 85413 31/50 current_auc = 0.5833333333333333
User 85413 AUC after training: 0.5833333333333333
User 85413 does not improve AUC. Reverting changes.
Training on augumented user 9057 32/50 current_auc = 0.5833333333333333
User 9057 AUC after training: 0.5833333333333333
User 9057 does not improve AUC. Reverting changes.
Training on augumented user 75414 33/50 current_auc = 0.5833333333333333
User 75414 AUC after training: 0.5833333333333333
User 75414 does not improve AUC. Reverting changes.
Training on augumented user 2120 34/50 current_auc = 0.5833333333333333
User 2120 AUC after training: 0.5833333333333333
User 2120 does not improve AUC. Reverting changes.
Training on augumented user 36782 35/50 current_auc = 0.5833333333333333
User 36782 AUC after training: 0.5833333333333333
User 36782 does not improve AUC. Reverting changes.
Training on augumented user 19797 36/50 current_auc = 0.5833333333333333
User 19797 AUC after training: 0.5833333333333333
User 19797 does not improve AUC. Reverting changes.
Training on augumented user 123239 37/50 current_auc = 0.5833333333333333
User 123239 AUC after training: 0.5833333333333333
User 123239 does not improve AUC. Reverting changes.
Training on augumented user 868 38/50 current_auc = 0.5833333333333333
User 868 AUC after training: 0.5833333333333333
User 868 does not improve AUC. Reverting changes.
Training on augumented user 13734 39/50 current_auc = 0.5833333333333333
User 13734 AUC after training: 0.5833333333333333
User 13734 does not improve AUC. Reverting changes.
Training on augumented user 53826 40/50 current_auc = 0.5833333333333333
User 53826 AUC after training: 0.5833333333333333
User 53826 does not improve AUC. Reverting changes.
Training on augumented user 72101 41/50 current_auc = 0.5833333333333333
User 72101 AUC after training: 0.5833333333333333
User 72101 does not improve AUC. Reverting changes.
Training on augumented user 16797 42/50 current_auc = 0.5833333333333333
User 16797 AUC after training: 0.5833333333333333
User 16797 does not improve AUC. Reverting changes.
Training on augumented user 93908 43/50 current_auc = 0.5833333333333333
User 93908 AUC after training: 0.5833333333333333
User 93908 does not improve AUC. Reverting changes.
Training on augumented user 81773 44/50 current_auc = 0.5833333333333333
User 81773 AUC after training: 0.5833333333333333
User 81773 does not improve AUC. Reverting changes.
Training on augumented user 63424 45/50 current_auc = 0.5833333333333333
User 63424 AUC after training: 0.5833333333333333
User 63424 does not improve AUC. Reverting changes.
Training on augumented user 45417 46/50 current_auc = 0.5833333333333333
User 45417 AUC after training: 0.5833333333333333
User 45417 does not improve AUC. Reverting changes.
Training on augumented user 39104 47/50 current_auc = 0.5833333333333333
User 39104 AUC after training: 0.5833333333333333
User 39104 does not improve AUC. Reverting changes.
Training on augumented user 56436 48/50 current_auc = 0.5833333333333333
User 56436 AUC after training: 0.5833333333333333
User 56436 does not improve AUC. Reverting changes.
Training on augumented user 90744 49/50 current_auc = 0.5833333333333333
User 90744 AUC after training: 0.5833333333333333
User 90744 does not improve AUC. Reverting changes.
[2024-12-02 19:12:05.501192] start test user 114198 173/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:12:06.266377] start test user 114198 173/567 recall augumented users by random, augumented_users = [114307, 89308, 61030, 45806, 13720, 60829, 131449, 96427, 10983, 77009, 62230, 130167, 90069, 104259, 7516, 113086, 47500, 92077, 76767, 124243, 56816, 40589, 77411, 23614, 65840, 136168, 107658, 111407, 79150, 62541, 35453, 100620, 27264, 96215, 70646, 45770, 60117, 86299, 40762, 25082, 123720, 88772, 59032, 102351, 24728, 93759, 136674, 135925, 51557, 28483]
[2024-12-02 19:12:06.282776] user = 114198 Cloud 173/567
[2024-12-02 19:12:06.309208] user = 114198 Local 173/567
[2024-12-02 19:12:06.471406] user = 114198 Local+ 173/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:12:08.791057] user = 114198 MPDA- 173/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6829968944099379
Training on augumented user 114307 0/50 current_auc = 0.6829968944099379
User 114307 AUC after training: 0.6833074534161491
User 114307 improves AUC. Keeping the model.
Training on augumented user 89308 1/50 current_auc = 0.6833074534161491
User 89308 AUC after training: 0.6837732919254659
User 89308 improves AUC. Keeping the model.
Training on augumented user 61030 2/50 current_auc = 0.6837732919254659
User 61030 AUC after training: 0.6853649068322981
User 61030 improves AUC. Keeping the model.
Training on augumented user 45806 3/50 current_auc = 0.6853649068322981
User 45806 AUC after training: 0.6847826086956521
User 45806 does not improve AUC. Reverting changes.
Training on augumented user 13720 4/50 current_auc = 0.6853649068322981
User 13720 AUC after training: 0.6851319875776397
User 13720 does not improve AUC. Reverting changes.
Training on augumented user 60829 5/50 current_auc = 0.6853649068322981
User 60829 AUC after training: 0.6848990683229813
User 60829 does not improve AUC. Reverting changes.
Training on augumented user 131449 6/50 current_auc = 0.6853649068322981
User 131449 AUC after training: 0.685054347826087
User 131449 does not improve AUC. Reverting changes.
Training on augumented user 96427 7/50 current_auc = 0.6853649068322981
User 96427 AUC after training: 0.6850931677018633
User 96427 does not improve AUC. Reverting changes.
Training on augumented user 10983 8/50 current_auc = 0.6853649068322981
User 10983 AUC after training: 0.6855201863354038
User 10983 improves AUC. Keeping the model.
Training on augumented user 77009 9/50 current_auc = 0.6855201863354038
User 77009 AUC after training: 0.6854037267080745
User 77009 does not improve AUC. Reverting changes.
Training on augumented user 62230 10/50 current_auc = 0.6855201863354038
User 62230 AUC after training: 0.6847049689440994
User 62230 does not improve AUC. Reverting changes.
Training on augumented user 130167 11/50 current_auc = 0.6855201863354038
User 130167 AUC after training: 0.6855201863354037
User 130167 does not improve AUC. Reverting changes.
Training on augumented user 90069 12/50 current_auc = 0.6855201863354038
User 90069 AUC after training: 0.6849378881987578
User 90069 does not improve AUC. Reverting changes.
Training on augumented user 104259 13/50 current_auc = 0.6855201863354038
User 104259 AUC after training: 0.6840838509316769
User 104259 does not improve AUC. Reverting changes.
Training on augumented user 7516 14/50 current_auc = 0.6855201863354038
User 7516 AUC after training: 0.6853649068322982
User 7516 does not improve AUC. Reverting changes.
Training on augumented user 113086 15/50 current_auc = 0.6855201863354038
User 113086 AUC after training: 0.685442546583851
User 113086 does not improve AUC. Reverting changes.
Training on augumented user 47500 16/50 current_auc = 0.6855201863354038
User 47500 AUC after training: 0.6868012422360249
User 47500 improves AUC. Keeping the model.
Training on augumented user 92077 17/50 current_auc = 0.6868012422360249
User 92077 AUC after training: 0.6868012422360249
User 92077 does not improve AUC. Reverting changes.
Training on augumented user 76767 18/50 current_auc = 0.6868012422360249
User 76767 AUC after training: 0.6864906832298137
User 76767 does not improve AUC. Reverting changes.
Training on augumented user 124243 19/50 current_auc = 0.6868012422360249
User 124243 AUC after training: 0.6868788819875775
User 124243 improves AUC. Keeping the model.
Training on augumented user 56816 20/50 current_auc = 0.6868788819875775
User 56816 AUC after training: 0.6875776397515528
User 56816 improves AUC. Keeping the model.
Training on augumented user 40589 21/50 current_auc = 0.6875776397515528
User 40589 AUC after training: 0.6868012422360249
User 40589 does not improve AUC. Reverting changes.
Training on augumented user 77411 22/50 current_auc = 0.6875776397515528
User 77411 AUC after training: 0.6869565217391305
User 77411 does not improve AUC. Reverting changes.
Training on augumented user 23614 23/50 current_auc = 0.6875776397515528
User 23614 AUC after training: 0.6864518633540374
User 23614 does not improve AUC. Reverting changes.
Training on augumented user 65840 24/50 current_auc = 0.6875776397515528
User 65840 AUC after training: 0.6864906832298137
User 65840 does not improve AUC. Reverting changes.
Training on augumented user 136168 25/50 current_auc = 0.6875776397515528
User 136168 AUC after training: 0.6872670807453416
User 136168 does not improve AUC. Reverting changes.
Training on augumented user 107658 26/50 current_auc = 0.6875776397515528
User 107658 AUC after training: 0.6866459627329192
User 107658 does not improve AUC. Reverting changes.
Training on augumented user 111407 27/50 current_auc = 0.6875776397515528
User 111407 AUC after training: 0.6846273291925465
User 111407 does not improve AUC. Reverting changes.
Training on augumented user 79150 28/50 current_auc = 0.6875776397515528
User 79150 AUC after training: 0.6870341614906832
User 79150 does not improve AUC. Reverting changes.
Training on augumented user 62541 29/50 current_auc = 0.6875776397515528
User 62541 AUC after training: 0.686917701863354
User 62541 does not improve AUC. Reverting changes.
Training on augumented user 35453 30/50 current_auc = 0.6875776397515528
User 35453 AUC after training: 0.6868788819875777
User 35453 does not improve AUC. Reverting changes.
Training on augumented user 100620 31/50 current_auc = 0.6875776397515528
User 100620 AUC after training: 0.6865683229813665
User 100620 does not improve AUC. Reverting changes.
Training on augumented user 27264 32/50 current_auc = 0.6875776397515528
User 27264 AUC after training: 0.6868788819875776
User 27264 does not improve AUC. Reverting changes.
Training on augumented user 96215 33/50 current_auc = 0.6875776397515528
User 96215 AUC after training: 0.6868012422360249
User 96215 does not improve AUC. Reverting changes.
Training on augumented user 70646 34/50 current_auc = 0.6875776397515528
User 70646 AUC after training: 0.6867236024844721
User 70646 does not improve AUC. Reverting changes.
Training on augumented user 45770 35/50 current_auc = 0.6875776397515528
User 45770 AUC after training: 0.6864906832298138
User 45770 does not improve AUC. Reverting changes.
Training on augumented user 60117 36/50 current_auc = 0.6875776397515528
User 60117 AUC after training: 0.6868788819875777
User 60117 does not improve AUC. Reverting changes.
Training on augumented user 86299 37/50 current_auc = 0.6875776397515528
User 86299 AUC after training: 0.6872670807453416
User 86299 does not improve AUC. Reverting changes.
Training on augumented user 40762 38/50 current_auc = 0.6875776397515528
User 40762 AUC after training: 0.6871894409937889
User 40762 does not improve AUC. Reverting changes.
Training on augumented user 25082 39/50 current_auc = 0.6875776397515528
User 25082 AUC after training: 0.6872670807453417
User 25082 does not improve AUC. Reverting changes.
Training on augumented user 123720 40/50 current_auc = 0.6875776397515528
User 123720 AUC after training: 0.6868788819875776
User 123720 does not improve AUC. Reverting changes.
Training on augumented user 88772 41/50 current_auc = 0.6875776397515528
User 88772 AUC after training: 0.6869565217391305
User 88772 does not improve AUC. Reverting changes.
Training on augumented user 59032 42/50 current_auc = 0.6875776397515528
User 59032 AUC after training: 0.6871894409937889
User 59032 does not improve AUC. Reverting changes.
Training on augumented user 102351 43/50 current_auc = 0.6875776397515528
User 102351 AUC after training: 0.6877329192546585
User 102351 improves AUC. Keeping the model.
Training on augumented user 24728 44/50 current_auc = 0.6877329192546585
User 24728 AUC after training: 0.6865683229813665
User 24728 does not improve AUC. Reverting changes.
Training on augumented user 93759 45/50 current_auc = 0.6877329192546585
User 93759 AUC after training: 0.6872670807453417
User 93759 does not improve AUC. Reverting changes.
Training on augumented user 136674 46/50 current_auc = 0.6877329192546585
User 136674 AUC after training: 0.6868788819875776
User 136674 does not improve AUC. Reverting changes.
Training on augumented user 135925 47/50 current_auc = 0.6877329192546585
User 135925 AUC after training: 0.6874223602484473
User 135925 does not improve AUC. Reverting changes.
Training on augumented user 51557 48/50 current_auc = 0.6877329192546585
User 51557 AUC after training: 0.6875
User 51557 does not improve AUC. Reverting changes.
Training on augumented user 28483 49/50 current_auc = 0.6877329192546585
User 28483 AUC after training: 0.6870341614906833
User 28483 does not improve AUC. Reverting changes.
[2024-12-02 19:12:42.013998] start test user 114311 174/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:12:42.539421] start test user 114311 174/567 recall augumented users by random, augumented_users = [50588, 111497, 91591, 57183, 92990, 67432, 50375, 67549, 126040, 59322, 33245, 41175, 117081, 82576, 129699, 50531, 71535, 15517, 18789, 60413, 95981, 127173, 22565, 56601, 34934, 74358, 255, 24171, 71774, 22857, 19768, 9444, 38753, 133627, 45163, 73320, 98521, 86058, 132095, 38269, 113851, 123247, 73907, 9394, 116315, 19775, 12852, 52866, 65636, 115595]
[2024-12-02 19:12:42.588517] user = 114311 Cloud 174/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:12:42.601662] user = 114311 Local 174/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:12:42.728052] user = 114311 Local+ 174/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:12:45.354834] user = 114311 MPDA- 174/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 50588 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50588 AUC after training: 0.5
User 50588 does not improve AUC. Reverting changes.
Training on augumented user 111497 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111497 AUC after training: 0.5
User 111497 does not improve AUC. Reverting changes.
Training on augumented user 91591 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91591 AUC after training: 0.5
User 91591 does not improve AUC. Reverting changes.
Training on augumented user 57183 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57183 AUC after training: 0.5
User 57183 does not improve AUC. Reverting changes.
Training on augumented user 92990 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92990 AUC after training: 0.5
User 92990 does not improve AUC. Reverting changes.
Training on augumented user 67432 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67432 AUC after training: 0.5
User 67432 does not improve AUC. Reverting changes.
Training on augumented user 50375 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50375 AUC after training: 0.5
User 50375 does not improve AUC. Reverting changes.
Training on augumented user 67549 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67549 AUC after training: 0.5
User 67549 does not improve AUC. Reverting changes.
Training on augumented user 126040 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126040 AUC after training: 0.5
User 126040 does not improve AUC. Reverting changes.
Training on augumented user 59322 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59322 AUC after training: 0.5
User 59322 does not improve AUC. Reverting changes.
Training on augumented user 33245 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33245 AUC after training: 0.5
User 33245 does not improve AUC. Reverting changes.
Training on augumented user 41175 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41175 AUC after training: 0.5
User 41175 does not improve AUC. Reverting changes.
Training on augumented user 117081 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117081 AUC after training: 0.5
User 117081 does not improve AUC. Reverting changes.
Training on augumented user 82576 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82576 AUC after training: 0.5
User 82576 does not improve AUC. Reverting changes.
Training on augumented user 129699 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129699 AUC after training: 0.5
User 129699 does not improve AUC. Reverting changes.
Training on augumented user 50531 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50531 AUC after training: 0.5
User 50531 does not improve AUC. Reverting changes.
Training on augumented user 71535 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71535 AUC after training: 0.5
User 71535 does not improve AUC. Reverting changes.
Training on augumented user 15517 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15517 AUC after training: 0.5
User 15517 does not improve AUC. Reverting changes.
Training on augumented user 18789 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18789 AUC after training: 0.5
User 18789 does not improve AUC. Reverting changes.
Training on augumented user 60413 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60413 AUC after training: 0.5
User 60413 does not improve AUC. Reverting changes.
Training on augumented user 95981 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95981 AUC after training: 0.5
User 95981 does not improve AUC. Reverting changes.
Training on augumented user 127173 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127173 AUC after training: 0.5
User 127173 does not improve AUC. Reverting changes.
Training on augumented user 22565 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22565 AUC after training: 0.5
User 22565 does not improve AUC. Reverting changes.
Training on augumented user 56601 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56601 AUC after training: 0.5
User 56601 does not improve AUC. Reverting changes.
Training on augumented user 34934 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 34934 AUC after training: 0.5
User 34934 does not improve AUC. Reverting changes.
Training on augumented user 74358 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74358 AUC after training: 0.5
User 74358 does not improve AUC. Reverting changes.
Training on augumented user 255 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 255 AUC after training: 0.5
User 255 does not improve AUC. Reverting changes.
Training on augumented user 24171 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24171 AUC after training: 0.5
User 24171 does not improve AUC. Reverting changes.
Training on augumented user 71774 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71774 AUC after training: 0.5
User 71774 does not improve AUC. Reverting changes.
Training on augumented user 22857 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22857 AUC after training: 0.5
User 22857 does not improve AUC. Reverting changes.
Training on augumented user 19768 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19768 AUC after training: 0.5
User 19768 does not improve AUC. Reverting changes.
Training on augumented user 9444 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9444 AUC after training: 0.5
User 9444 does not improve AUC. Reverting changes.
Training on augumented user 38753 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38753 AUC after training: 0.5
User 38753 does not improve AUC. Reverting changes.
Training on augumented user 133627 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133627 AUC after training: 0.5
User 133627 does not improve AUC. Reverting changes.
Training on augumented user 45163 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45163 AUC after training: 0.5
User 45163 does not improve AUC. Reverting changes.
Training on augumented user 73320 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73320 AUC after training: 0.5
User 73320 does not improve AUC. Reverting changes.
Training on augumented user 98521 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98521 AUC after training: 0.5
User 98521 does not improve AUC. Reverting changes.
Training on augumented user 86058 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86058 AUC after training: 0.5
User 86058 does not improve AUC. Reverting changes.
Training on augumented user 132095 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132095 AUC after training: 0.5
User 132095 does not improve AUC. Reverting changes.
Training on augumented user 38269 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38269 AUC after training: 0.5
User 38269 does not improve AUC. Reverting changes.
Training on augumented user 113851 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113851 AUC after training: 0.5
User 113851 does not improve AUC. Reverting changes.
Training on augumented user 123247 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123247 AUC after training: 0.5
User 123247 does not improve AUC. Reverting changes.
Training on augumented user 73907 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73907 AUC after training: 0.5
User 73907 does not improve AUC. Reverting changes.
Training on augumented user 9394 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9394 AUC after training: 0.5
User 9394 does not improve AUC. Reverting changes.
Training on augumented user 116315 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116315 AUC after training: 0.5
User 116315 does not improve AUC. Reverting changes.
Training on augumented user 19775 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19775 AUC after training: 0.5
User 19775 does not improve AUC. Reverting changes.
Training on augumented user 12852 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12852 AUC after training: 0.5
User 12852 does not improve AUC. Reverting changes.
Training on augumented user 52866 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 52866 AUC after training: 0.5
User 52866 does not improve AUC. Reverting changes.
Training on augumented user 65636 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 65636 AUC after training: 0.5
User 65636 does not improve AUC. Reverting changes.
Training on augumented user 115595 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115595 AUC after training: 0.5
User 115595 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:13:16.034746] start test user 114327 175/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:13:16.512361] start test user 114327 175/567 recall augumented users by random, augumented_users = [44592, 116342, 102201, 7387, 111173, 61353, 23682, 95679, 78130, 8053, 68112, 20804, 125004, 131244, 119120, 23488, 38112, 114333, 71748, 53227, 31883, 81185, 94593, 74906, 3271, 54319, 54460, 92753, 59854, 95195, 134231, 130789, 55220, 59744, 19261, 91291, 54523, 51623, 38617, 58357, 40925, 40624, 3467, 51506, 4567, 62699, 116785, 57086, 83580, 132298]
[2024-12-02 19:13:16.527768] user = 114327 Cloud 175/567
[2024-12-02 19:13:16.543340] user = 114327 Local 175/567
[2024-12-02 19:13:16.599235] user = 114327 Local+ 175/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:13:18.075665] user = 114327 MPDA- 175/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6310223266745005
Training on augumented user 44592 0/50 current_auc = 0.6310223266745005
User 44592 AUC after training: 0.6304347826086957
User 44592 does not improve AUC. Reverting changes.
Training on augumented user 116342 1/50 current_auc = 0.6310223266745005
User 116342 AUC after training: 0.6321974148061105
User 116342 improves AUC. Keeping the model.
Training on augumented user 102201 2/50 current_auc = 0.6321974148061105
User 102201 AUC after training: 0.6298472385428907
User 102201 does not improve AUC. Reverting changes.
Training on augumented user 7387 3/50 current_auc = 0.6321974148061105
User 7387 AUC after training: 0.6304347826086957
User 7387 does not improve AUC. Reverting changes.
Training on augumented user 111173 4/50 current_auc = 0.6321974148061105
User 111173 AUC after training: 0.6327849588719154
User 111173 improves AUC. Keeping the model.
Training on augumented user 61353 5/50 current_auc = 0.6327849588719154
User 61353 AUC after training: 0.6333725029377204
User 61353 improves AUC. Keeping the model.
Training on augumented user 23682 6/50 current_auc = 0.6333725029377204
User 23682 AUC after training: 0.6321974148061105
User 23682 does not improve AUC. Reverting changes.
Training on augumented user 95679 7/50 current_auc = 0.6333725029377204
User 95679 AUC after training: 0.6298472385428908
User 95679 does not improve AUC. Reverting changes.
Training on augumented user 78130 8/50 current_auc = 0.6333725029377204
User 78130 AUC after training: 0.6333725029377204
User 78130 does not improve AUC. Reverting changes.
Training on augumented user 8053 9/50 current_auc = 0.6333725029377204
User 8053 AUC after training: 0.6410105757931844
User 8053 improves AUC. Keeping the model.
Training on augumented user 68112 10/50 current_auc = 0.6410105757931844
User 68112 AUC after training: 0.6392479435957698
User 68112 does not improve AUC. Reverting changes.
Training on augumented user 20804 11/50 current_auc = 0.6410105757931844
User 20804 AUC after training: 0.6398354876615745
User 20804 does not improve AUC. Reverting changes.
Training on augumented user 125004 12/50 current_auc = 0.6410105757931844
User 125004 AUC after training: 0.6398354876615747
User 125004 does not improve AUC. Reverting changes.
Training on augumented user 131244 13/50 current_auc = 0.6410105757931844
User 131244 AUC after training: 0.6415981198589894
User 131244 improves AUC. Keeping the model.
Training on augumented user 119120 14/50 current_auc = 0.6415981198589894
User 119120 AUC after training: 0.6398354876615746
User 119120 does not improve AUC. Reverting changes.
Training on augumented user 23488 15/50 current_auc = 0.6415981198589894
User 23488 AUC after training: 0.6404230317273796
User 23488 does not improve AUC. Reverting changes.
Training on augumented user 38112 16/50 current_auc = 0.6415981198589894
User 38112 AUC after training: 0.6415981198589894
User 38112 does not improve AUC. Reverting changes.
Training on augumented user 114333 17/50 current_auc = 0.6415981198589894
User 114333 AUC after training: 0.6421856639247943
User 114333 improves AUC. Keeping the model.
Training on augumented user 71748 18/50 current_auc = 0.6421856639247943
User 71748 AUC after training: 0.6415981198589894
User 71748 does not improve AUC. Reverting changes.
Training on augumented user 53227 19/50 current_auc = 0.6421856639247943
User 53227 AUC after training: 0.6410105757931844
User 53227 does not improve AUC. Reverting changes.
Training on augumented user 31883 20/50 current_auc = 0.6421856639247943
User 31883 AUC after training: 0.6404230317273796
User 31883 does not improve AUC. Reverting changes.
Training on augumented user 81185 21/50 current_auc = 0.6421856639247943
User 81185 AUC after training: 0.6404230317273796
User 81185 does not improve AUC. Reverting changes.
Training on augumented user 94593 22/50 current_auc = 0.6421856639247943
User 94593 AUC after training: 0.6433607520564042
User 94593 improves AUC. Keeping the model.
Training on augumented user 74906 23/50 current_auc = 0.6433607520564042
User 74906 AUC after training: 0.6433607520564042
User 74906 does not improve AUC. Reverting changes.
Training on augumented user 3271 24/50 current_auc = 0.6433607520564042
User 3271 AUC after training: 0.6410105757931845
User 3271 does not improve AUC. Reverting changes.
Training on augumented user 54319 25/50 current_auc = 0.6433607520564042
User 54319 AUC after training: 0.645123384253819
User 54319 improves AUC. Keeping the model.
Training on augumented user 54460 26/50 current_auc = 0.645123384253819
User 54460 AUC after training: 0.6410105757931844
User 54460 does not improve AUC. Reverting changes.
Training on augumented user 92753 27/50 current_auc = 0.645123384253819
User 92753 AUC after training: 0.6421856639247943
User 92753 does not improve AUC. Reverting changes.
Training on augumented user 59854 28/50 current_auc = 0.645123384253819
User 59854 AUC after training: 0.6427732079905992
User 59854 does not improve AUC. Reverting changes.
Training on augumented user 95195 29/50 current_auc = 0.645123384253819
User 95195 AUC after training: 0.645710928319624
User 95195 improves AUC. Keeping the model.
Training on augumented user 134231 30/50 current_auc = 0.645710928319624
User 134231 AUC after training: 0.645123384253819
User 134231 does not improve AUC. Reverting changes.
Training on augumented user 130789 31/50 current_auc = 0.645710928319624
User 130789 AUC after training: 0.645123384253819
User 130789 does not improve AUC. Reverting changes.
Training on augumented user 55220 32/50 current_auc = 0.645710928319624
User 55220 AUC after training: 0.6433607520564043
User 55220 does not improve AUC. Reverting changes.
Training on augumented user 59744 33/50 current_auc = 0.645710928319624
User 59744 AUC after training: 0.6480611045828438
User 59744 improves AUC. Keeping the model.
Training on augumented user 19261 34/50 current_auc = 0.6480611045828438
User 19261 AUC after training: 0.6421856639247944
User 19261 does not improve AUC. Reverting changes.
Training on augumented user 91291 35/50 current_auc = 0.6480611045828438
User 91291 AUC after training: 0.6480611045828438
User 91291 does not improve AUC. Reverting changes.
Training on augumented user 54523 36/50 current_auc = 0.6480611045828438
User 54523 AUC after training: 0.6480611045828438
User 54523 does not improve AUC. Reverting changes.
Training on augumented user 51623 37/50 current_auc = 0.6480611045828438
User 51623 AUC after training: 0.6445358401880141
User 51623 does not improve AUC. Reverting changes.
Training on augumented user 38617 38/50 current_auc = 0.6480611045828438
User 38617 AUC after training: 0.6427732079905993
User 38617 does not improve AUC. Reverting changes.
Training on augumented user 58357 39/50 current_auc = 0.6480611045828438
User 58357 AUC after training: 0.6468860164512339
User 58357 does not improve AUC. Reverting changes.
Training on augumented user 40925 40/50 current_auc = 0.6480611045828438
User 40925 AUC after training: 0.6486486486486487
User 40925 improves AUC. Keeping the model.
Training on augumented user 40624 41/50 current_auc = 0.6486486486486487
User 40624 AUC after training: 0.6480611045828438
User 40624 does not improve AUC. Reverting changes.
Training on augumented user 3467 42/50 current_auc = 0.6486486486486487
User 3467 AUC after training: 0.6474735605170387
User 3467 does not improve AUC. Reverting changes.
Training on augumented user 51506 43/50 current_auc = 0.6486486486486487
User 51506 AUC after training: 0.6474735605170389
User 51506 does not improve AUC. Reverting changes.
Training on augumented user 4567 44/50 current_auc = 0.6486486486486487
User 4567 AUC after training: 0.6498237367802585
User 4567 improves AUC. Keeping the model.
Training on augumented user 62699 45/50 current_auc = 0.6498237367802585
User 62699 AUC after training: 0.6468860164512339
User 62699 does not improve AUC. Reverting changes.
Training on augumented user 116785 46/50 current_auc = 0.6498237367802585
User 116785 AUC after training: 0.6468860164512339
User 116785 does not improve AUC. Reverting changes.
Training on augumented user 57086 47/50 current_auc = 0.6498237367802585
User 57086 AUC after training: 0.6509988249118684
User 57086 improves AUC. Keeping the model.
Training on augumented user 83580 48/50 current_auc = 0.6509988249118684
User 83580 AUC after training: 0.6462984723854289
User 83580 does not improve AUC. Reverting changes.
Training on augumented user 132298 49/50 current_auc = 0.6509988249118684
User 132298 AUC after training: 0.6498237367802585
User 132298 does not improve AUC. Reverting changes.
[2024-12-02 19:13:44.619089] start test user 114338 176/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:13:45.163963] start test user 114338 176/567 recall augumented users by random, augumented_users = [77665, 35594, 135748, 11142, 7052, 104904, 59758, 5851, 118653, 105809, 80550, 121393, 30653, 102163, 3560, 81714, 133601, 137788, 46720, 112260, 126032, 105922, 68370, 52903, 114823, 79518, 34147, 81278, 77187, 73119, 28932, 22455, 90829, 105995, 138423, 30767, 93013, 84893, 18377, 125443, 11746, 82945, 72041, 129565, 120573, 48994, 88885, 49731, 111102, 136629]
[2024-12-02 19:13:45.178260] user = 114338 Cloud 176/567
[2024-12-02 19:13:45.187301] user = 114338 Local 176/567
[2024-12-02 19:13:45.206323] user = 114338 Local+ 176/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:13:47.210529] user = 114338 MPDA- 176/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 77665 0/50 current_auc = 0.5
User 77665 AUC after training: 0.5
User 77665 does not improve AUC. Reverting changes.
Training on augumented user 35594 1/50 current_auc = 0.5
User 35594 AUC after training: 0.5
User 35594 does not improve AUC. Reverting changes.
Training on augumented user 135748 2/50 current_auc = 0.5
User 135748 AUC after training: 0.5
User 135748 does not improve AUC. Reverting changes.
Training on augumented user 11142 3/50 current_auc = 0.5
User 11142 AUC after training: 0.5
User 11142 does not improve AUC. Reverting changes.
Training on augumented user 7052 4/50 current_auc = 0.5
User 7052 AUC after training: 0.5
User 7052 does not improve AUC. Reverting changes.
Training on augumented user 104904 5/50 current_auc = 0.5
User 104904 AUC after training: 0.5
User 104904 does not improve AUC. Reverting changes.
Training on augumented user 59758 6/50 current_auc = 0.5
User 59758 AUC after training: 0.5
User 59758 does not improve AUC. Reverting changes.
Training on augumented user 5851 7/50 current_auc = 0.5
User 5851 AUC after training: 0.5
User 5851 does not improve AUC. Reverting changes.
Training on augumented user 118653 8/50 current_auc = 0.5
User 118653 AUC after training: 0.5
User 118653 does not improve AUC. Reverting changes.
Training on augumented user 105809 9/50 current_auc = 0.5
User 105809 AUC after training: 0.5
User 105809 does not improve AUC. Reverting changes.
Training on augumented user 80550 10/50 current_auc = 0.5
User 80550 AUC after training: 0.5
User 80550 does not improve AUC. Reverting changes.
Training on augumented user 121393 11/50 current_auc = 0.5
User 121393 AUC after training: 0.5
User 121393 does not improve AUC. Reverting changes.
Training on augumented user 30653 12/50 current_auc = 0.5
User 30653 AUC after training: 0.5
User 30653 does not improve AUC. Reverting changes.
Training on augumented user 102163 13/50 current_auc = 0.5
User 102163 AUC after training: 0.5
User 102163 does not improve AUC. Reverting changes.
Training on augumented user 3560 14/50 current_auc = 0.5
User 3560 AUC after training: 0.5
User 3560 does not improve AUC. Reverting changes.
Training on augumented user 81714 15/50 current_auc = 0.5
User 81714 AUC after training: 0.5
User 81714 does not improve AUC. Reverting changes.
Training on augumented user 133601 16/50 current_auc = 0.5
User 133601 AUC after training: 0.5
User 133601 does not improve AUC. Reverting changes.
Training on augumented user 137788 17/50 current_auc = 0.5
User 137788 AUC after training: 0.5
User 137788 does not improve AUC. Reverting changes.
Training on augumented user 46720 18/50 current_auc = 0.5
User 46720 AUC after training: 0.5
User 46720 does not improve AUC. Reverting changes.
Training on augumented user 112260 19/50 current_auc = 0.5
User 112260 AUC after training: 0.5
User 112260 does not improve AUC. Reverting changes.
Training on augumented user 126032 20/50 current_auc = 0.5
User 126032 AUC after training: 0.5
User 126032 does not improve AUC. Reverting changes.
Training on augumented user 105922 21/50 current_auc = 0.5
User 105922 AUC after training: 0.5
User 105922 does not improve AUC. Reverting changes.
Training on augumented user 68370 22/50 current_auc = 0.5
User 68370 AUC after training: 0.5
User 68370 does not improve AUC. Reverting changes.
Training on augumented user 52903 23/50 current_auc = 0.5
User 52903 AUC after training: 0.5
User 52903 does not improve AUC. Reverting changes.
Training on augumented user 114823 24/50 current_auc = 0.5
User 114823 AUC after training: 0.5
User 114823 does not improve AUC. Reverting changes.
Training on augumented user 79518 25/50 current_auc = 0.5
User 79518 AUC after training: 0.5
User 79518 does not improve AUC. Reverting changes.
Training on augumented user 34147 26/50 current_auc = 0.5
User 34147 AUC after training: 0.5
User 34147 does not improve AUC. Reverting changes.
Training on augumented user 81278 27/50 current_auc = 0.5
User 81278 AUC after training: 0.5
User 81278 does not improve AUC. Reverting changes.
Training on augumented user 77187 28/50 current_auc = 0.5
User 77187 AUC after training: 0.5
User 77187 does not improve AUC. Reverting changes.
Training on augumented user 73119 29/50 current_auc = 0.5
User 73119 AUC after training: 0.5
User 73119 does not improve AUC. Reverting changes.
Training on augumented user 28932 30/50 current_auc = 0.5
User 28932 AUC after training: 0.5
User 28932 does not improve AUC. Reverting changes.
Training on augumented user 22455 31/50 current_auc = 0.5
User 22455 AUC after training: 0.5
User 22455 does not improve AUC. Reverting changes.
Training on augumented user 90829 32/50 current_auc = 0.5
User 90829 AUC after training: 0.5
User 90829 does not improve AUC. Reverting changes.
Training on augumented user 105995 33/50 current_auc = 0.5
User 105995 AUC after training: 0.5
User 105995 does not improve AUC. Reverting changes.
Training on augumented user 138423 34/50 current_auc = 0.5
User 138423 AUC after training: 0.5
User 138423 does not improve AUC. Reverting changes.
Training on augumented user 30767 35/50 current_auc = 0.5
User 30767 AUC after training: 0.5
User 30767 does not improve AUC. Reverting changes.
Training on augumented user 93013 36/50 current_auc = 0.5
User 93013 AUC after training: 0.5
User 93013 does not improve AUC. Reverting changes.
Training on augumented user 84893 37/50 current_auc = 0.5
User 84893 AUC after training: 0.5
User 84893 does not improve AUC. Reverting changes.
Training on augumented user 18377 38/50 current_auc = 0.5
User 18377 AUC after training: 0.5
User 18377 does not improve AUC. Reverting changes.
Training on augumented user 125443 39/50 current_auc = 0.5
User 125443 AUC after training: 0.5
User 125443 does not improve AUC. Reverting changes.
Training on augumented user 11746 40/50 current_auc = 0.5
User 11746 AUC after training: 0.5
User 11746 does not improve AUC. Reverting changes.
Training on augumented user 82945 41/50 current_auc = 0.5
User 82945 AUC after training: 0.5
User 82945 does not improve AUC. Reverting changes.
Training on augumented user 72041 42/50 current_auc = 0.5
User 72041 AUC after training: 0.5
User 72041 does not improve AUC. Reverting changes.
Training on augumented user 129565 43/50 current_auc = 0.5
User 129565 AUC after training: 0.5
User 129565 does not improve AUC. Reverting changes.
Training on augumented user 120573 44/50 current_auc = 0.5
User 120573 AUC after training: 0.5
User 120573 does not improve AUC. Reverting changes.
Training on augumented user 48994 45/50 current_auc = 0.5
User 48994 AUC after training: 0.5
User 48994 does not improve AUC. Reverting changes.
Training on augumented user 88885 46/50 current_auc = 0.5
User 88885 AUC after training: 0.5
User 88885 does not improve AUC. Reverting changes.
Training on augumented user 49731 47/50 current_auc = 0.5
User 49731 AUC after training: 0.5
User 49731 does not improve AUC. Reverting changes.
Training on augumented user 111102 48/50 current_auc = 0.5
User 111102 AUC after training: 0.5
User 111102 does not improve AUC. Reverting changes.
Training on augumented user 136629 49/50 current_auc = 0.5
User 136629 AUC after training: 0.5
User 136629 does not improve AUC. Reverting changes.
[2024-12-02 19:14:17.228526] start test user 114346 177/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:14:17.694971] start test user 114346 177/567 recall augumented users by random, augumented_users = [64692, 78154, 60996, 25219, 121059, 754, 88445, 20782, 59853, 29854, 103666, 85195, 103800, 70012, 26776, 27592, 23310, 94183, 4657, 60740, 54551, 115585, 17642, 32439, 104092, 85282, 70958, 61085, 52564, 84415, 97535, 72511, 80547, 48824, 114460, 125877, 30952, 49978, 115269, 51124, 121922, 19305, 34869, 131741, 51297, 21203, 136812, 59765, 132820, 34107]
[2024-12-02 19:14:17.712552] user = 114346 Cloud 177/567
[2024-12-02 19:14:17.736909] user = 114346 Local 177/567
[2024-12-02 19:14:17.808940] user = 114346 Local+ 177/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:14:21.229253] user = 114346 MPDA- 177/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7441754641427011
Training on augumented user 64692 0/50 current_auc = 0.7441754641427011
User 64692 AUC after training: 0.7439934473971606
User 64692 does not improve AUC. Reverting changes.
Training on augumented user 78154 1/50 current_auc = 0.7441754641427011
User 78154 AUC after training: 0.7443574808882417
User 78154 improves AUC. Keeping the model.
Training on augumented user 60996 2/50 current_auc = 0.7443574808882417
User 60996 AUC after training: 0.744448489261012
User 60996 improves AUC. Keeping the model.
Training on augumented user 25219 3/50 current_auc = 0.744448489261012
User 25219 AUC after training: 0.7439934473971606
User 25219 does not improve AUC. Reverting changes.
Training on augumented user 121059 4/50 current_auc = 0.744448489261012
User 121059 AUC after training: 0.7439934473971606
User 121059 does not improve AUC. Reverting changes.
Training on augumented user 754 5/50 current_auc = 0.744448489261012
User 754 AUC after training: 0.7437204222788497
User 754 does not improve AUC. Reverting changes.
Training on augumented user 88445 6/50 current_auc = 0.744448489261012
User 88445 AUC after training: 0.7433563887877684
User 88445 does not improve AUC. Reverting changes.
Training on augumented user 20782 7/50 current_auc = 0.744448489261012
User 20782 AUC after training: 0.7443574808882417
User 20782 does not improve AUC. Reverting changes.
Training on augumented user 59853 8/50 current_auc = 0.744448489261012
User 59853 AUC after training: 0.7440844557699308
User 59853 does not improve AUC. Reverting changes.
Training on augumented user 29854 9/50 current_auc = 0.744448489261012
User 29854 AUC after training: 0.7454495813614853
User 29854 improves AUC. Keeping the model.
Training on augumented user 103666 10/50 current_auc = 0.7454495813614853
User 103666 AUC after training: 0.7449945394976337
User 103666 does not improve AUC. Reverting changes.
Training on augumented user 85195 11/50 current_auc = 0.7454495813614853
User 85195 AUC after training: 0.745085547870404
User 85195 does not improve AUC. Reverting changes.
Training on augumented user 103800 12/50 current_auc = 0.7454495813614853
User 103800 AUC after training: 0.7456315981070258
User 103800 improves AUC. Keeping the model.
Training on augumented user 70012 13/50 current_auc = 0.7456315981070258
User 70012 AUC after training: 0.7456315981070258
User 70012 does not improve AUC. Reverting changes.
Training on augumented user 26776 14/50 current_auc = 0.7456315981070258
User 26776 AUC after training: 0.7449035311248635
User 26776 does not improve AUC. Reverting changes.
Training on augumented user 27592 15/50 current_auc = 0.7456315981070258
User 27592 AUC after training: 0.7451765562431744
User 27592 does not improve AUC. Reverting changes.
Training on augumented user 23310 16/50 current_auc = 0.7456315981070258
User 23310 AUC after training: 0.745085547870404
User 23310 does not improve AUC. Reverting changes.
Training on augumented user 94183 17/50 current_auc = 0.7456315981070258
User 94183 AUC after training: 0.7453585729887149
User 94183 does not improve AUC. Reverting changes.
Training on augumented user 4657 18/50 current_auc = 0.7456315981070258
User 4657 AUC after training: 0.7455405897342556
User 4657 does not improve AUC. Reverting changes.
Training on augumented user 60740 19/50 current_auc = 0.7456315981070258
User 60740 AUC after training: 0.7440844557699308
User 60740 does not improve AUC. Reverting changes.
Training on augumented user 54551 20/50 current_auc = 0.7456315981070258
User 54551 AUC after training: 0.7455405897342555
User 54551 does not improve AUC. Reverting changes.
Training on augumented user 115585 21/50 current_auc = 0.7456315981070258
User 115585 AUC after training: 0.7439934473971606
User 115585 does not improve AUC. Reverting changes.
Training on augumented user 17642 22/50 current_auc = 0.7456315981070258
User 17642 AUC after training: 0.7456315981070258
User 17642 does not improve AUC. Reverting changes.
Training on augumented user 32439 23/50 current_auc = 0.7456315981070258
User 32439 AUC after training: 0.7454495813614853
User 32439 does not improve AUC. Reverting changes.
Training on augumented user 104092 24/50 current_auc = 0.7456315981070258
User 104092 AUC after training: 0.7455405897342556
User 104092 does not improve AUC. Reverting changes.
Training on augumented user 85282 25/50 current_auc = 0.7456315981070258
User 85282 AUC after training: 0.745358572988715
User 85282 does not improve AUC. Reverting changes.
Training on augumented user 70958 26/50 current_auc = 0.7456315981070258
User 70958 AUC after training: 0.745631598107026
User 70958 improves AUC. Keeping the model.
Training on augumented user 61085 27/50 current_auc = 0.745631598107026
User 61085 AUC after training: 0.7443574808882417
User 61085 does not improve AUC. Reverting changes.
Training on augumented user 52564 28/50 current_auc = 0.745631598107026
User 52564 AUC after training: 0.7449035311248635
User 52564 does not improve AUC. Reverting changes.
Training on augumented user 84415 29/50 current_auc = 0.745631598107026
User 84415 AUC after training: 0.7456315981070258
User 84415 does not improve AUC. Reverting changes.
Training on augumented user 97535 30/50 current_auc = 0.745631598107026
User 97535 AUC after training: 0.7455405897342556
User 97535 does not improve AUC. Reverting changes.
Training on augumented user 72511 31/50 current_auc = 0.745631598107026
User 72511 AUC after training: 0.7457226064797962
User 72511 improves AUC. Keeping the model.
Training on augumented user 80547 32/50 current_auc = 0.7457226064797962
User 80547 AUC after training: 0.7457226064797963
User 80547 improves AUC. Keeping the model.
Training on augumented user 48824 33/50 current_auc = 0.7457226064797963
User 48824 AUC after training: 0.7449945394976337
User 48824 does not improve AUC. Reverting changes.
Training on augumented user 114460 34/50 current_auc = 0.7457226064797963
User 114460 AUC after training: 0.7452675646159447
User 114460 does not improve AUC. Reverting changes.
Training on augumented user 125877 35/50 current_auc = 0.7457226064797963
User 125877 AUC after training: 0.7459046232253367
User 125877 improves AUC. Keeping the model.
Training on augumented user 30952 36/50 current_auc = 0.7459046232253367
User 30952 AUC after training: 0.745358572988715
User 30952 does not improve AUC. Reverting changes.
Training on augumented user 49978 37/50 current_auc = 0.7459046232253367
User 49978 AUC after training: 0.7461776483436476
User 49978 improves AUC. Keeping the model.
Training on augumented user 115269 38/50 current_auc = 0.7461776483436476
User 115269 AUC after training: 0.7456315981070258
User 115269 does not improve AUC. Reverting changes.
Training on augumented user 51124 39/50 current_auc = 0.7461776483436476
User 51124 AUC after training: 0.745722606479796
User 51124 does not improve AUC. Reverting changes.
Training on augumented user 121922 40/50 current_auc = 0.7461776483436476
User 121922 AUC after training: 0.745631598107026
User 121922 does not improve AUC. Reverting changes.
Training on augumented user 19305 41/50 current_auc = 0.7461776483436476
User 19305 AUC after training: 0.745995631598107
User 19305 does not improve AUC. Reverting changes.
Training on augumented user 34869 42/50 current_auc = 0.7461776483436476
User 34869 AUC after training: 0.7455405897342556
User 34869 does not improve AUC. Reverting changes.
Training on augumented user 131741 43/50 current_auc = 0.7461776483436476
User 131741 AUC after training: 0.7455405897342555
User 131741 does not improve AUC. Reverting changes.
Training on augumented user 51297 44/50 current_auc = 0.7461776483436476
User 51297 AUC after training: 0.7451765562431744
User 51297 does not improve AUC. Reverting changes.
Training on augumented user 21203 45/50 current_auc = 0.7461776483436476
User 21203 AUC after training: 0.745995631598107
User 21203 does not improve AUC. Reverting changes.
Training on augumented user 136812 46/50 current_auc = 0.7461776483436476
User 136812 AUC after training: 0.746268656716418
User 136812 improves AUC. Keeping the model.
Training on augumented user 59765 47/50 current_auc = 0.746268656716418
User 59765 AUC after training: 0.7454495813614853
User 59765 does not improve AUC. Reverting changes.
Training on augumented user 132820 48/50 current_auc = 0.746268656716418
User 132820 AUC after training: 0.7461776483436476
User 132820 does not improve AUC. Reverting changes.
Training on augumented user 34107 49/50 current_auc = 0.746268656716418
User 34107 AUC after training: 0.7458136148525664
User 34107 does not improve AUC. Reverting changes.
[2024-12-02 19:14:49.333516] start test user 114392 178/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:14:49.882727] start test user 114392 178/567 recall augumented users by random, augumented_users = [135967, 119091, 46212, 82607, 2432, 13491, 62611, 131304, 79745, 85415, 69230, 5306, 36460, 18282, 59634, 33988, 75793, 10147, 19168, 112625, 129391, 85817, 53013, 18586, 86631, 87459, 119389, 71331, 98768, 86342, 100703, 17028, 1116, 59060, 32074, 29108, 10340, 37470, 34197, 115210, 130997, 5280, 869, 97280, 25028, 94513, 88, 1052, 37182, 1038]
[2024-12-02 19:14:49.897733] user = 114392 Cloud 178/567
[2024-12-02 19:14:49.908140] user = 114392 Local 178/567
[2024-12-02 19:14:49.934573] user = 114392 Local+ 178/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:14:52.402895] user = 114392 MPDA- 178/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5277777777777778
Training on augumented user 135967 0/50 current_auc = 0.5277777777777778
User 135967 AUC after training: 0.5277777777777778
User 135967 does not improve AUC. Reverting changes.
Training on augumented user 119091 1/50 current_auc = 0.5277777777777778
User 119091 AUC after training: 0.5277777777777778
User 119091 does not improve AUC. Reverting changes.
Training on augumented user 46212 2/50 current_auc = 0.5277777777777778
User 46212 AUC after training: 0.5277777777777778
User 46212 does not improve AUC. Reverting changes.
Training on augumented user 82607 3/50 current_auc = 0.5277777777777778
User 82607 AUC after training: 0.5277777777777778
User 82607 does not improve AUC. Reverting changes.
Training on augumented user 2432 4/50 current_auc = 0.5277777777777778
User 2432 AUC after training: 0.5277777777777778
User 2432 does not improve AUC. Reverting changes.
Training on augumented user 13491 5/50 current_auc = 0.5277777777777778
User 13491 AUC after training: 0.5277777777777778
User 13491 does not improve AUC. Reverting changes.
Training on augumented user 62611 6/50 current_auc = 0.5277777777777778
User 62611 AUC after training: 0.5277777777777778
User 62611 does not improve AUC. Reverting changes.
Training on augumented user 131304 7/50 current_auc = 0.5277777777777778
User 131304 AUC after training: 0.5277777777777778
User 131304 does not improve AUC. Reverting changes.
Training on augumented user 79745 8/50 current_auc = 0.5277777777777778
User 79745 AUC after training: 0.5277777777777778
User 79745 does not improve AUC. Reverting changes.
Training on augumented user 85415 9/50 current_auc = 0.5277777777777778
User 85415 AUC after training: 0.5277777777777778
User 85415 does not improve AUC. Reverting changes.
Training on augumented user 69230 10/50 current_auc = 0.5277777777777778
User 69230 AUC after training: 0.5277777777777778
User 69230 does not improve AUC. Reverting changes.
Training on augumented user 5306 11/50 current_auc = 0.5277777777777778
User 5306 AUC after training: 0.5277777777777778
User 5306 does not improve AUC. Reverting changes.
Training on augumented user 36460 12/50 current_auc = 0.5277777777777778
User 36460 AUC after training: 0.5277777777777778
User 36460 does not improve AUC. Reverting changes.
Training on augumented user 18282 13/50 current_auc = 0.5277777777777778
User 18282 AUC after training: 0.5277777777777778
User 18282 does not improve AUC. Reverting changes.
Training on augumented user 59634 14/50 current_auc = 0.5277777777777778
User 59634 AUC after training: 0.5277777777777778
User 59634 does not improve AUC. Reverting changes.
Training on augumented user 33988 15/50 current_auc = 0.5277777777777778
User 33988 AUC after training: 0.5277777777777778
User 33988 does not improve AUC. Reverting changes.
Training on augumented user 75793 16/50 current_auc = 0.5277777777777778
User 75793 AUC after training: 0.5277777777777778
User 75793 does not improve AUC. Reverting changes.
Training on augumented user 10147 17/50 current_auc = 0.5277777777777778
User 10147 AUC after training: 0.5277777777777778
User 10147 does not improve AUC. Reverting changes.
Training on augumented user 19168 18/50 current_auc = 0.5277777777777778
User 19168 AUC after training: 0.5277777777777778
User 19168 does not improve AUC. Reverting changes.
Training on augumented user 112625 19/50 current_auc = 0.5277777777777778
User 112625 AUC after training: 0.5277777777777778
User 112625 does not improve AUC. Reverting changes.
Training on augumented user 129391 20/50 current_auc = 0.5277777777777778
User 129391 AUC after training: 0.5277777777777778
User 129391 does not improve AUC. Reverting changes.
Training on augumented user 85817 21/50 current_auc = 0.5277777777777778
User 85817 AUC after training: 0.5277777777777778
User 85817 does not improve AUC. Reverting changes.
Training on augumented user 53013 22/50 current_auc = 0.5277777777777778
User 53013 AUC after training: 0.5277777777777778
User 53013 does not improve AUC. Reverting changes.
Training on augumented user 18586 23/50 current_auc = 0.5277777777777778
User 18586 AUC after training: 0.5277777777777778
User 18586 does not improve AUC. Reverting changes.
Training on augumented user 86631 24/50 current_auc = 0.5277777777777778
User 86631 AUC after training: 0.5277777777777778
User 86631 does not improve AUC. Reverting changes.
Training on augumented user 87459 25/50 current_auc = 0.5277777777777778
User 87459 AUC after training: 0.5277777777777778
User 87459 does not improve AUC. Reverting changes.
Training on augumented user 119389 26/50 current_auc = 0.5277777777777778
User 119389 AUC after training: 0.5277777777777778
User 119389 does not improve AUC. Reverting changes.
Training on augumented user 71331 27/50 current_auc = 0.5277777777777778
User 71331 AUC after training: 0.5277777777777778
User 71331 does not improve AUC. Reverting changes.
Training on augumented user 98768 28/50 current_auc = 0.5277777777777778
User 98768 AUC after training: 0.5277777777777778
User 98768 does not improve AUC. Reverting changes.
Training on augumented user 86342 29/50 current_auc = 0.5277777777777778
User 86342 AUC after training: 0.5277777777777778
User 86342 does not improve AUC. Reverting changes.
Training on augumented user 100703 30/50 current_auc = 0.5277777777777778
User 100703 AUC after training: 0.5277777777777778
User 100703 does not improve AUC. Reverting changes.
Training on augumented user 17028 31/50 current_auc = 0.5277777777777778
User 17028 AUC after training: 0.5277777777777778
User 17028 does not improve AUC. Reverting changes.
Training on augumented user 1116 32/50 current_auc = 0.5277777777777778
User 1116 AUC after training: 0.5277777777777778
User 1116 does not improve AUC. Reverting changes.
Training on augumented user 59060 33/50 current_auc = 0.5277777777777778
User 59060 AUC after training: 0.5277777777777778
User 59060 does not improve AUC. Reverting changes.
Training on augumented user 32074 34/50 current_auc = 0.5277777777777778
User 32074 AUC after training: 0.5277777777777778
User 32074 does not improve AUC. Reverting changes.
Training on augumented user 29108 35/50 current_auc = 0.5277777777777778
User 29108 AUC after training: 0.5277777777777778
User 29108 does not improve AUC. Reverting changes.
Training on augumented user 10340 36/50 current_auc = 0.5277777777777778
User 10340 AUC after training: 0.5277777777777778
User 10340 does not improve AUC. Reverting changes.
Training on augumented user 37470 37/50 current_auc = 0.5277777777777778
User 37470 AUC after training: 0.5277777777777778
User 37470 does not improve AUC. Reverting changes.
Training on augumented user 34197 38/50 current_auc = 0.5277777777777778
User 34197 AUC after training: 0.5277777777777778
User 34197 does not improve AUC. Reverting changes.
Training on augumented user 115210 39/50 current_auc = 0.5277777777777778
User 115210 AUC after training: 0.5277777777777778
User 115210 does not improve AUC. Reverting changes.
Training on augumented user 130997 40/50 current_auc = 0.5277777777777778
User 130997 AUC after training: 0.5277777777777778
User 130997 does not improve AUC. Reverting changes.
Training on augumented user 5280 41/50 current_auc = 0.5277777777777778
User 5280 AUC after training: 0.5277777777777778
User 5280 does not improve AUC. Reverting changes.
Training on augumented user 869 42/50 current_auc = 0.5277777777777778
User 869 AUC after training: 0.5277777777777778
User 869 does not improve AUC. Reverting changes.
Training on augumented user 97280 43/50 current_auc = 0.5277777777777778
User 97280 AUC after training: 0.5277777777777778
User 97280 does not improve AUC. Reverting changes.
Training on augumented user 25028 44/50 current_auc = 0.5277777777777778
User 25028 AUC after training: 0.5277777777777778
User 25028 does not improve AUC. Reverting changes.
Training on augumented user 94513 45/50 current_auc = 0.5277777777777778
User 94513 AUC after training: 0.5277777777777778
User 94513 does not improve AUC. Reverting changes.
Training on augumented user 88 46/50 current_auc = 0.5277777777777778
User 88 AUC after training: 0.5277777777777778
User 88 does not improve AUC. Reverting changes.
Training on augumented user 1052 47/50 current_auc = 0.5277777777777778
User 1052 AUC after training: 0.5277777777777778
User 1052 does not improve AUC. Reverting changes.
Training on augumented user 37182 48/50 current_auc = 0.5277777777777778
User 37182 AUC after training: 0.5277777777777778
User 37182 does not improve AUC. Reverting changes.
Training on augumented user 1038 49/50 current_auc = 0.5277777777777778
User 1038 AUC after training: 0.5277777777777778
User 1038 does not improve AUC. Reverting changes.
[2024-12-02 19:15:20.801511] start test user 114394 179/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:15:21.642407] start test user 114394 179/567 recall augumented users by random, augumented_users = [96303, 108647, 34682, 78960, 38821, 15310, 123536, 43298, 41765, 38274, 127479, 7986, 74013, 60269, 112702, 91457, 3292, 73747, 134229, 26906, 5882, 50439, 108262, 26537, 30547, 60987, 108003, 12887, 88299, 33455, 119731, 77542, 105015, 130344, 132582, 45640, 26433, 131320, 114064, 74308, 134839, 136557, 137461, 85892, 59945, 100189, 70421, 82243, 96744, 24475]
[2024-12-02 19:15:21.659524] user = 114394 Cloud 179/567
[2024-12-02 19:15:21.676614] user = 114394 Local 179/567
[2024-12-02 19:15:21.773396] user = 114394 Local+ 179/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:15:23.886153] user = 114394 MPDA- 179/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 96303 0/50 current_auc = 0.5
User 96303 AUC after training: 0.5
User 96303 does not improve AUC. Reverting changes.
Training on augumented user 108647 1/50 current_auc = 0.5
User 108647 AUC after training: 0.5
User 108647 does not improve AUC. Reverting changes.
Training on augumented user 34682 2/50 current_auc = 0.5
User 34682 AUC after training: 0.5
User 34682 does not improve AUC. Reverting changes.
Training on augumented user 78960 3/50 current_auc = 0.5
User 78960 AUC after training: 0.5
User 78960 does not improve AUC. Reverting changes.
Training on augumented user 38821 4/50 current_auc = 0.5
User 38821 AUC after training: 0.5
User 38821 does not improve AUC. Reverting changes.
Training on augumented user 15310 5/50 current_auc = 0.5
User 15310 AUC after training: 0.5
User 15310 does not improve AUC. Reverting changes.
Training on augumented user 123536 6/50 current_auc = 0.5
User 123536 AUC after training: 0.5
User 123536 does not improve AUC. Reverting changes.
Training on augumented user 43298 7/50 current_auc = 0.5
User 43298 AUC after training: 0.5
User 43298 does not improve AUC. Reverting changes.
Training on augumented user 41765 8/50 current_auc = 0.5
User 41765 AUC after training: 0.5
User 41765 does not improve AUC. Reverting changes.
Training on augumented user 38274 9/50 current_auc = 0.5
User 38274 AUC after training: 0.5
User 38274 does not improve AUC. Reverting changes.
Training on augumented user 127479 10/50 current_auc = 0.5
User 127479 AUC after training: 0.5
User 127479 does not improve AUC. Reverting changes.
Training on augumented user 7986 11/50 current_auc = 0.5
User 7986 AUC after training: 0.5
User 7986 does not improve AUC. Reverting changes.
Training on augumented user 74013 12/50 current_auc = 0.5
User 74013 AUC after training: 0.5
User 74013 does not improve AUC. Reverting changes.
Training on augumented user 60269 13/50 current_auc = 0.5
User 60269 AUC after training: 0.5
User 60269 does not improve AUC. Reverting changes.
Training on augumented user 112702 14/50 current_auc = 0.5
User 112702 AUC after training: 0.5
User 112702 does not improve AUC. Reverting changes.
Training on augumented user 91457 15/50 current_auc = 0.5
User 91457 AUC after training: 0.5
User 91457 does not improve AUC. Reverting changes.
Training on augumented user 3292 16/50 current_auc = 0.5
User 3292 AUC after training: 0.5
User 3292 does not improve AUC. Reverting changes.
Training on augumented user 73747 17/50 current_auc = 0.5
User 73747 AUC after training: 0.5
User 73747 does not improve AUC. Reverting changes.
Training on augumented user 134229 18/50 current_auc = 0.5
User 134229 AUC after training: 0.5
User 134229 does not improve AUC. Reverting changes.
Training on augumented user 26906 19/50 current_auc = 0.5
User 26906 AUC after training: 0.5
User 26906 does not improve AUC. Reverting changes.
Training on augumented user 5882 20/50 current_auc = 0.5
User 5882 AUC after training: 0.5
User 5882 does not improve AUC. Reverting changes.
Training on augumented user 50439 21/50 current_auc = 0.5
User 50439 AUC after training: 0.5
User 50439 does not improve AUC. Reverting changes.
Training on augumented user 108262 22/50 current_auc = 0.5
User 108262 AUC after training: 0.5
User 108262 does not improve AUC. Reverting changes.
Training on augumented user 26537 23/50 current_auc = 0.5
User 26537 AUC after training: 0.5
User 26537 does not improve AUC. Reverting changes.
Training on augumented user 30547 24/50 current_auc = 0.5
User 30547 AUC after training: 0.5
User 30547 does not improve AUC. Reverting changes.
Training on augumented user 60987 25/50 current_auc = 0.5
User 60987 AUC after training: 0.5
User 60987 does not improve AUC. Reverting changes.
Training on augumented user 108003 26/50 current_auc = 0.5
User 108003 AUC after training: 0.5
User 108003 does not improve AUC. Reverting changes.
Training on augumented user 12887 27/50 current_auc = 0.5
User 12887 AUC after training: 0.5
User 12887 does not improve AUC. Reverting changes.
Training on augumented user 88299 28/50 current_auc = 0.5
User 88299 AUC after training: 0.5
User 88299 does not improve AUC. Reverting changes.
Training on augumented user 33455 29/50 current_auc = 0.5
User 33455 AUC after training: 0.5
User 33455 does not improve AUC. Reverting changes.
Training on augumented user 119731 30/50 current_auc = 0.5
User 119731 AUC after training: 0.5
User 119731 does not improve AUC. Reverting changes.
Training on augumented user 77542 31/50 current_auc = 0.5
User 77542 AUC after training: 0.5
User 77542 does not improve AUC. Reverting changes.
Training on augumented user 105015 32/50 current_auc = 0.5
User 105015 AUC after training: 0.5
User 105015 does not improve AUC. Reverting changes.
Training on augumented user 130344 33/50 current_auc = 0.5
User 130344 AUC after training: 0.5
User 130344 does not improve AUC. Reverting changes.
Training on augumented user 132582 34/50 current_auc = 0.5
User 132582 AUC after training: 0.5
User 132582 does not improve AUC. Reverting changes.
Training on augumented user 45640 35/50 current_auc = 0.5
User 45640 AUC after training: 0.5
User 45640 does not improve AUC. Reverting changes.
Training on augumented user 26433 36/50 current_auc = 0.5
User 26433 AUC after training: 0.5
User 26433 does not improve AUC. Reverting changes.
Training on augumented user 131320 37/50 current_auc = 0.5
User 131320 AUC after training: 0.5
User 131320 does not improve AUC. Reverting changes.
Training on augumented user 114064 38/50 current_auc = 0.5
User 114064 AUC after training: 0.5
User 114064 does not improve AUC. Reverting changes.
Training on augumented user 74308 39/50 current_auc = 0.5
User 74308 AUC after training: 0.5
User 74308 does not improve AUC. Reverting changes.
Training on augumented user 134839 40/50 current_auc = 0.5
User 134839 AUC after training: 0.5
User 134839 does not improve AUC. Reverting changes.
Training on augumented user 136557 41/50 current_auc = 0.5
User 136557 AUC after training: 0.5
User 136557 does not improve AUC. Reverting changes.
Training on augumented user 137461 42/50 current_auc = 0.5
User 137461 AUC after training: 0.5
User 137461 does not improve AUC. Reverting changes.
Training on augumented user 85892 43/50 current_auc = 0.5
User 85892 AUC after training: 0.5
User 85892 does not improve AUC. Reverting changes.
Training on augumented user 59945 44/50 current_auc = 0.5
User 59945 AUC after training: 0.5
User 59945 does not improve AUC. Reverting changes.
Training on augumented user 100189 45/50 current_auc = 0.5
User 100189 AUC after training: 0.5
User 100189 does not improve AUC. Reverting changes.
Training on augumented user 70421 46/50 current_auc = 0.5
User 70421 AUC after training: 0.5
User 70421 does not improve AUC. Reverting changes.
Training on augumented user 82243 47/50 current_auc = 0.5
User 82243 AUC after training: 0.5
User 82243 does not improve AUC. Reverting changes.
Training on augumented user 96744 48/50 current_auc = 0.5
User 96744 AUC after training: 0.5
User 96744 does not improve AUC. Reverting changes.
Training on augumented user 24475 49/50 current_auc = 0.5
User 24475 AUC after training: 0.5
User 24475 does not improve AUC. Reverting changes.
[2024-12-02 19:15:51.546033] start test user 114461 180/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:15:52.082115] start test user 114461 180/567 recall augumented users by random, augumented_users = [23714, 61408, 49775, 85003, 45946, 127318, 46004, 41126, 31780, 98157, 31768, 132747, 77152, 56332, 16747, 110222, 105710, 104371, 133271, 79041, 82884, 80772, 369, 6742, 86227, 59144, 15869, 112995, 46642, 109740, 125385, 64205, 2912, 95255, 94857, 108507, 70765, 2980, 53086, 130263, 111554, 19165, 119601, 42940, 111740, 1911, 101888, 100038, 38054, 123140]
[2024-12-02 19:15:52.111967] user = 114461 Cloud 180/567
[2024-12-02 19:15:52.137103] user = 114461 Local 180/567
[2024-12-02 19:15:52.222667] user = 114461 Local+ 180/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:15:54.438976] user = 114461 MPDA- 180/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5502083613388896
Training on augumented user 23714 0/50 current_auc = 0.5502083613388896
User 23714 AUC after training: 0.5521575480575346
User 23714 improves AUC. Keeping the model.
Training on augumented user 61408 1/50 current_auc = 0.5521575480575346
User 61408 AUC after training: 0.5516198413765291
User 61408 does not improve AUC. Reverting changes.
Training on augumented user 49775 2/50 current_auc = 0.5521575480575346
User 49775 AUC after training: 0.5512837747009007
User 49775 does not improve AUC. Reverting changes.
Training on augumented user 85003 3/50 current_auc = 0.5521575480575346
User 85003 AUC after training: 0.5508132813550208
User 85003 does not improve AUC. Reverting changes.
Training on augumented user 45946 4/50 current_auc = 0.5521575480575346
User 45946 AUC after training: 0.5512165613657749
User 45946 does not improve AUC. Reverting changes.
Training on augumented user 127318 5/50 current_auc = 0.5521575480575346
User 127318 AUC after training: 0.5520231213872832
User 127318 does not improve AUC. Reverting changes.
Training on augumented user 46004 6/50 current_auc = 0.5521575480575346
User 46004 AUC after training: 0.5510149213603979
User 46004 does not improve AUC. Reverting changes.
Training on augumented user 41126 7/50 current_auc = 0.5521575480575346
User 41126 AUC after training: 0.5512837747009007
User 41126 does not improve AUC. Reverting changes.
Training on augumented user 31780 8/50 current_auc = 0.5521575480575346
User 31780 AUC after training: 0.5512837747009006
User 31780 does not improve AUC. Reverting changes.
Training on augumented user 98157 9/50 current_auc = 0.5521575480575346
User 98157 AUC after training: 0.5511157413630864
User 98157 does not improve AUC. Reverting changes.
Training on augumented user 31768 10/50 current_auc = 0.5521575480575346
User 31768 AUC after training: 0.5516198413765291
User 31768 does not improve AUC. Reverting changes.
Training on augumented user 132747 11/50 current_auc = 0.5521575480575346
User 132747 AUC after training: 0.550779674687458
User 132747 does not improve AUC. Reverting changes.
Training on augumented user 77152 12/50 current_auc = 0.5521575480575346
User 77152 AUC after training: 0.5505444280145181
User 77152 does not improve AUC. Reverting changes.
Training on augumented user 56332 13/50 current_auc = 0.5521575480575346
User 56332 AUC after training: 0.5508132813550208
User 56332 does not improve AUC. Reverting changes.
Training on augumented user 16747 14/50 current_auc = 0.5521575480575346
User 16747 AUC after training: 0.5504100013442667
User 16747 does not improve AUC. Reverting changes.
Training on augumented user 110222 15/50 current_auc = 0.5521575480575346
User 110222 AUC after training: 0.5508804946901464
User 110222 does not improve AUC. Reverting changes.
Training on augumented user 105710 16/50 current_auc = 0.5521575480575346
User 105710 AUC after training: 0.5507124613523322
User 105710 does not improve AUC. Reverting changes.
Training on augumented user 104371 17/50 current_auc = 0.5521575480575346
User 104371 AUC after training: 0.5511493480306493
User 104371 does not improve AUC. Reverting changes.
Training on augumented user 133271 18/50 current_auc = 0.5521575480575346
User 133271 AUC after training: 0.5520903347224089
User 133271 does not improve AUC. Reverting changes.
Training on augumented user 79041 19/50 current_auc = 0.5521575480575346
User 79041 AUC after training: 0.5505444280145181
User 79041 does not improve AUC. Reverting changes.
Training on augumented user 82884 20/50 current_auc = 0.5521575480575346
User 82884 AUC after training: 0.5512165613657749
User 82884 does not improve AUC. Reverting changes.
Training on augumented user 80772 21/50 current_auc = 0.5521575480575346
User 80772 AUC after training: 0.551418201371152
User 80772 does not improve AUC. Reverting changes.
Training on augumented user 369 22/50 current_auc = 0.5521575480575346
User 369 AUC after training: 0.5508132813550208
User 369 does not improve AUC. Reverting changes.
Training on augumented user 6742 23/50 current_auc = 0.5521575480575346
User 6742 AUC after training: 0.5508132813550208
User 6742 does not improve AUC. Reverting changes.
Training on augumented user 86227 24/50 current_auc = 0.5521575480575346
User 86227 AUC after training: 0.5516198413765291
User 86227 does not improve AUC. Reverting changes.
Training on augumented user 59144 25/50 current_auc = 0.5521575480575346
User 59144 AUC after training: 0.5511493480306493
User 59144 does not improve AUC. Reverting changes.
Training on augumented user 15869 26/50 current_auc = 0.5521575480575346
User 15869 AUC after training: 0.5507460680198951
User 15869 does not improve AUC. Reverting changes.
Training on augumented user 112995 27/50 current_auc = 0.5521575480575346
User 112995 AUC after training: 0.552291974727786
User 112995 improves AUC. Keeping the model.
Training on augumented user 46642 28/50 current_auc = 0.552291974727786
User 46642 AUC after training: 0.5504100013442667
User 46642 does not improve AUC. Reverting changes.
Training on augumented user 109740 29/50 current_auc = 0.552291974727786
User 109740 AUC after training: 0.552291974727786
User 109740 does not improve AUC. Reverting changes.
Training on augumented user 125385 30/50 current_auc = 0.552291974727786
User 125385 AUC after training: 0.5507460680198951
User 125385 does not improve AUC. Reverting changes.
Training on augumented user 64205 31/50 current_auc = 0.552291974727786
User 64205 AUC after training: 0.5514854147062777
User 64205 does not improve AUC. Reverting changes.
Training on augumented user 2912 32/50 current_auc = 0.552291974727786
User 2912 AUC after training: 0.5518214813819061
User 2912 does not improve AUC. Reverting changes.
Training on augumented user 95255 33/50 current_auc = 0.552291974727786
User 95255 AUC after training: 0.5518886947170318
User 95255 does not improve AUC. Reverting changes.
Training on augumented user 94857 34/50 current_auc = 0.552291974727786
User 94857 AUC after training: 0.552493614733163
User 94857 improves AUC. Keeping the model.
Training on augumented user 108507 35/50 current_auc = 0.552493614733163
User 108507 AUC after training: 0.5517542680467805
User 108507 does not improve AUC. Reverting changes.
Training on augumented user 70765 36/50 current_auc = 0.552493614733163
User 70765 AUC after training: 0.5515190213738406
User 70765 does not improve AUC. Reverting changes.
Training on augumented user 2980 37/50 current_auc = 0.552493614733163
User 2980 AUC after training: 0.5526952547385402
User 2980 improves AUC. Keeping the model.
Training on augumented user 53086 38/50 current_auc = 0.5526952547385402
User 53086 AUC after training: 0.5524264013980373
User 53086 does not improve AUC. Reverting changes.
Training on augumented user 130263 39/50 current_auc = 0.5526952547385402
User 130263 AUC after training: 0.5518214813819062
User 130263 does not improve AUC. Reverting changes.
Training on augumented user 111554 40/50 current_auc = 0.5526952547385402
User 111554 AUC after training: 0.5519895147197205
User 111554 does not improve AUC. Reverting changes.
Training on augumented user 19165 41/50 current_auc = 0.5526952547385402
User 19165 AUC after training: 0.5514854147062777
User 19165 does not improve AUC. Reverting changes.
Training on augumented user 119601 42/50 current_auc = 0.5526952547385402
User 119601 AUC after training: 0.5517206613792176
User 119601 does not improve AUC. Reverting changes.
Training on augumented user 42940 43/50 current_auc = 0.5526952547385402
User 42940 AUC after training: 0.5513509880360263
User 42940 does not improve AUC. Reverting changes.
Training on augumented user 111740 44/50 current_auc = 0.5526952547385402
User 111740 AUC after training: 0.5517542680467804
User 111740 does not improve AUC. Reverting changes.
Training on augumented user 1911 45/50 current_auc = 0.5526952547385402
User 1911 AUC after training: 0.5518550880494689
User 1911 does not improve AUC. Reverting changes.
Training on augumented user 101888 46/50 current_auc = 0.5526952547385402
User 101888 AUC after training: 0.5509477080252722
User 101888 does not improve AUC. Reverting changes.
Training on augumented user 100038 47/50 current_auc = 0.5526952547385402
User 100038 AUC after training: 0.5491665546444414
User 100038 does not improve AUC. Reverting changes.
Training on augumented user 38054 48/50 current_auc = 0.5526952547385402
User 38054 AUC after training: 0.5517206613792176
User 38054 does not improve AUC. Reverting changes.
Training on augumented user 123140 49/50 current_auc = 0.5526952547385402
User 123140 AUC after training: 0.5523927947304745
User 123140 does not improve AUC. Reverting changes.
[2024-12-02 19:16:22.449014] start test user 114501 181/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:16:23.220203] start test user 114501 181/567 recall augumented users by random, augumented_users = [88091, 110619, 70583, 94898, 61142, 131928, 12997, 133406, 59337, 13288, 59117, 110204, 60888, 59637, 10474, 19996, 61548, 20995, 45673, 8861, 137687, 137770, 134331, 118079, 93767, 43998, 66196, 25337, 17402, 38223, 3612, 117990, 124369, 41799, 78779, 57787, 97764, 81093, 18190, 101844, 102721, 8969, 75718, 72110, 93458, 33861, 53179, 31820, 106918, 56769]
[2024-12-02 19:16:23.237532] user = 114501 Cloud 181/567
[2024-12-02 19:16:23.248253] user = 114501 Local 181/567
[2024-12-02 19:16:23.309372] user = 114501 Local+ 181/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:16:26.011042] user = 114501 MPDA- 181/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.46875
Training on augumented user 88091 0/50 current_auc = 0.46875
User 88091 AUC after training: 0.46875
User 88091 does not improve AUC. Reverting changes.
Training on augumented user 110619 1/50 current_auc = 0.46875
User 110619 AUC after training: 0.46875
User 110619 does not improve AUC. Reverting changes.
Training on augumented user 70583 2/50 current_auc = 0.46875
User 70583 AUC after training: 0.46875
User 70583 does not improve AUC. Reverting changes.
Training on augumented user 94898 3/50 current_auc = 0.46875
User 94898 AUC after training: 0.46875
User 94898 does not improve AUC. Reverting changes.
Training on augumented user 61142 4/50 current_auc = 0.46875
User 61142 AUC after training: 0.46875
User 61142 does not improve AUC. Reverting changes.
Training on augumented user 131928 5/50 current_auc = 0.46875
User 131928 AUC after training: 0.46875
User 131928 does not improve AUC. Reverting changes.
Training on augumented user 12997 6/50 current_auc = 0.46875
User 12997 AUC after training: 0.46875
User 12997 does not improve AUC. Reverting changes.
Training on augumented user 133406 7/50 current_auc = 0.46875
User 133406 AUC after training: 0.46875
User 133406 does not improve AUC. Reverting changes.
Training on augumented user 59337 8/50 current_auc = 0.46875
User 59337 AUC after training: 0.46875
User 59337 does not improve AUC. Reverting changes.
Training on augumented user 13288 9/50 current_auc = 0.46875
User 13288 AUC after training: 0.46875
User 13288 does not improve AUC. Reverting changes.
Training on augumented user 59117 10/50 current_auc = 0.46875
User 59117 AUC after training: 0.46875
User 59117 does not improve AUC. Reverting changes.
Training on augumented user 110204 11/50 current_auc = 0.46875
User 110204 AUC after training: 0.46875
User 110204 does not improve AUC. Reverting changes.
Training on augumented user 60888 12/50 current_auc = 0.46875
User 60888 AUC after training: 0.46875
User 60888 does not improve AUC. Reverting changes.
Training on augumented user 59637 13/50 current_auc = 0.46875
User 59637 AUC after training: 0.46875
User 59637 does not improve AUC. Reverting changes.
Training on augumented user 10474 14/50 current_auc = 0.46875
User 10474 AUC after training: 0.46875
User 10474 does not improve AUC. Reverting changes.
Training on augumented user 19996 15/50 current_auc = 0.46875
User 19996 AUC after training: 0.46875
User 19996 does not improve AUC. Reverting changes.
Training on augumented user 61548 16/50 current_auc = 0.46875
User 61548 AUC after training: 0.46875
User 61548 does not improve AUC. Reverting changes.
Training on augumented user 20995 17/50 current_auc = 0.46875
User 20995 AUC after training: 0.46875
User 20995 does not improve AUC. Reverting changes.
Training on augumented user 45673 18/50 current_auc = 0.46875
User 45673 AUC after training: 0.46875
User 45673 does not improve AUC. Reverting changes.
Training on augumented user 8861 19/50 current_auc = 0.46875
User 8861 AUC after training: 0.46875
User 8861 does not improve AUC. Reverting changes.
Training on augumented user 137687 20/50 current_auc = 0.46875
User 137687 AUC after training: 0.46875
User 137687 does not improve AUC. Reverting changes.
Training on augumented user 137770 21/50 current_auc = 0.46875
User 137770 AUC after training: 0.46875
User 137770 does not improve AUC. Reverting changes.
Training on augumented user 134331 22/50 current_auc = 0.46875
User 134331 AUC after training: 0.46875
User 134331 does not improve AUC. Reverting changes.
Training on augumented user 118079 23/50 current_auc = 0.46875
User 118079 AUC after training: 0.46875
User 118079 does not improve AUC. Reverting changes.
Training on augumented user 93767 24/50 current_auc = 0.46875
User 93767 AUC after training: 0.46875
User 93767 does not improve AUC. Reverting changes.
Training on augumented user 43998 25/50 current_auc = 0.46875
User 43998 AUC after training: 0.46875
User 43998 does not improve AUC. Reverting changes.
Training on augumented user 66196 26/50 current_auc = 0.46875
User 66196 AUC after training: 0.46875
User 66196 does not improve AUC. Reverting changes.
Training on augumented user 25337 27/50 current_auc = 0.46875
User 25337 AUC after training: 0.46875
User 25337 does not improve AUC. Reverting changes.
Training on augumented user 17402 28/50 current_auc = 0.46875
User 17402 AUC after training: 0.46875
User 17402 does not improve AUC. Reverting changes.
Training on augumented user 38223 29/50 current_auc = 0.46875
User 38223 AUC after training: 0.46875
User 38223 does not improve AUC. Reverting changes.
Training on augumented user 3612 30/50 current_auc = 0.46875
User 3612 AUC after training: 0.46875
User 3612 does not improve AUC. Reverting changes.
Training on augumented user 117990 31/50 current_auc = 0.46875
User 117990 AUC after training: 0.46875
User 117990 does not improve AUC. Reverting changes.
Training on augumented user 124369 32/50 current_auc = 0.46875
User 124369 AUC after training: 0.46875
User 124369 does not improve AUC. Reverting changes.
Training on augumented user 41799 33/50 current_auc = 0.46875
User 41799 AUC after training: 0.46875
User 41799 does not improve AUC. Reverting changes.
Training on augumented user 78779 34/50 current_auc = 0.46875
User 78779 AUC after training: 0.46875
User 78779 does not improve AUC. Reverting changes.
Training on augumented user 57787 35/50 current_auc = 0.46875
User 57787 AUC after training: 0.46875
User 57787 does not improve AUC. Reverting changes.
Training on augumented user 97764 36/50 current_auc = 0.46875
User 97764 AUC after training: 0.46875
User 97764 does not improve AUC. Reverting changes.
Training on augumented user 81093 37/50 current_auc = 0.46875
User 81093 AUC after training: 0.46875
User 81093 does not improve AUC. Reverting changes.
Training on augumented user 18190 38/50 current_auc = 0.46875
User 18190 AUC after training: 0.46875
User 18190 does not improve AUC. Reverting changes.
Training on augumented user 101844 39/50 current_auc = 0.46875
User 101844 AUC after training: 0.46875
User 101844 does not improve AUC. Reverting changes.
Training on augumented user 102721 40/50 current_auc = 0.46875
User 102721 AUC after training: 0.46875
User 102721 does not improve AUC. Reverting changes.
Training on augumented user 8969 41/50 current_auc = 0.46875
User 8969 AUC after training: 0.46875
User 8969 does not improve AUC. Reverting changes.
Training on augumented user 75718 42/50 current_auc = 0.46875
User 75718 AUC after training: 0.46875
User 75718 does not improve AUC. Reverting changes.
Training on augumented user 72110 43/50 current_auc = 0.46875
User 72110 AUC after training: 0.46875
User 72110 does not improve AUC. Reverting changes.
Training on augumented user 93458 44/50 current_auc = 0.46875
User 93458 AUC after training: 0.46875
User 93458 does not improve AUC. Reverting changes.
Training on augumented user 33861 45/50 current_auc = 0.46875
User 33861 AUC after training: 0.46875
User 33861 does not improve AUC. Reverting changes.
Training on augumented user 53179 46/50 current_auc = 0.46875
User 53179 AUC after training: 0.46875
User 53179 does not improve AUC. Reverting changes.
Training on augumented user 31820 47/50 current_auc = 0.46875
User 31820 AUC after training: 0.46875
User 31820 does not improve AUC. Reverting changes.
Training on augumented user 106918 48/50 current_auc = 0.46875
User 106918 AUC after training: 0.46875
User 106918 does not improve AUC. Reverting changes.
Training on augumented user 56769 49/50 current_auc = 0.46875
User 56769 AUC after training: 0.46875
User 56769 does not improve AUC. Reverting changes.
[2024-12-02 19:16:56.364412] start test user 114531 182/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:16:57.239437] start test user 114531 182/567 recall augumented users by random, augumented_users = [21987, 120789, 49087, 11895, 36404, 53869, 136219, 88689, 74682, 14915, 90896, 84509, 87911, 58156, 26862, 29488, 18391, 120139, 91154, 38364, 127650, 8608, 34572, 137803, 81768, 94757, 130024, 89656, 4951, 6064, 25748, 115418, 50572, 2625, 13537, 126656, 128816, 127209, 89910, 60936, 128453, 113620, 101331, 137038, 122773, 46837, 36843, 48525, 108631, 16429]
[2024-12-02 19:16:57.263101] user = 114531 Cloud 182/567
[2024-12-02 19:16:57.371778] user = 114531 Local 182/567
[2024-12-02 19:16:57.511290] user = 114531 Local+ 182/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:16:59.791273] user = 114531 MPDA- 182/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.662795071945829
Training on augumented user 21987 0/50 current_auc = 0.662795071945829
User 21987 AUC after training: 0.6627668578952318
User 21987 does not improve AUC. Reverting changes.
Training on augumented user 120789 1/50 current_auc = 0.662795071945829
User 120789 AUC after training: 0.6628985234646855
User 120789 improves AUC. Keeping the model.
Training on augumented user 49087 2/50 current_auc = 0.6628985234646855
User 49087 AUC after training: 0.6629972726417755
User 49087 improves AUC. Keeping the model.
Training on augumented user 11895 3/50 current_auc = 0.6629972726417755
User 11895 AUC after training: 0.6630489984012038
User 11895 improves AUC. Keeping the model.
Training on augumented user 36404 4/50 current_auc = 0.6630489984012038
User 36404 AUC after training: 0.6628326906799586
User 36404 does not improve AUC. Reverting changes.
Training on augumented user 53869 5/50 current_auc = 0.6630489984012038
User 53869 AUC after training: 0.663030189034139
User 53869 does not improve AUC. Reverting changes.
Training on augumented user 136219 6/50 current_auc = 0.6630489984012038
User 136219 AUC after training: 0.6629408445405811
User 136219 does not improve AUC. Reverting changes.
Training on augumented user 88689 7/50 current_auc = 0.6630489984012038
User 88689 AUC after training: 0.6629737609329446
User 88689 does not improve AUC. Reverting changes.
Training on augumented user 74682 8/50 current_auc = 0.6630489984012038
User 74682 AUC after training: 0.6621132323897301
User 74682 does not improve AUC. Reverting changes.
Training on augumented user 14915 9/50 current_auc = 0.6630489984012038
User 14915 AUC after training: 0.6629173328317503
User 14915 does not improve AUC. Reverting changes.
Training on augumented user 90896 10/50 current_auc = 0.6630489984012038
User 90896 AUC after training: 0.6626916204269726
User 90896 does not improve AUC. Reverting changes.
Training on augumented user 84509 11/50 current_auc = 0.6630489984012038
User 84509 AUC after training: 0.662701025110505
User 84509 does not improve AUC. Reverting changes.
Training on augumented user 87911 12/50 current_auc = 0.6630489984012038
User 87911 AUC after training: 0.6628703094140883
User 87911 does not improve AUC. Reverting changes.
Training on augumented user 58156 13/50 current_auc = 0.6630489984012038
User 58156 AUC after training: 0.6628232859964261
User 58156 does not improve AUC. Reverting changes.
Training on augumented user 26862 14/50 current_auc = 0.6630489984012038
User 26862 AUC after training: 0.663265306122449
User 26862 improves AUC. Keeping the model.
Training on augumented user 29488 15/50 current_auc = 0.663265306122449
User 29488 AUC after training: 0.6629925703000094
User 29488 does not improve AUC. Reverting changes.
Training on augumented user 18391 16/50 current_auc = 0.663265306122449
User 18391 AUC after training: 0.6622590049844822
User 18391 does not improve AUC. Reverting changes.
Training on augumented user 120139 17/50 current_auc = 0.663265306122449
User 120139 AUC after training: 0.6631712592871251
User 120139 does not improve AUC. Reverting changes.
Training on augumented user 91154 18/50 current_auc = 0.663265306122449
User 91154 AUC after training: 0.6633452459324743
User 91154 improves AUC. Keeping the model.
Training on augumented user 38364 19/50 current_auc = 0.6633452459324743
User 38364 AUC after training: 0.6631430452365278
User 38364 does not improve AUC. Reverting changes.
Training on augumented user 127650 20/50 current_auc = 0.6633452459324743
User 127650 AUC after training: 0.6634157810589674
User 127650 improves AUC. Keeping the model.
Training on augumented user 8608 21/50 current_auc = 0.6634157810589674
User 8608 AUC after training: 0.6625693595410513
User 8608 does not improve AUC. Reverting changes.
Training on augumented user 34572 22/50 current_auc = 0.6634157810589674
User 34572 AUC after training: 0.6639894667544437
User 34572 improves AUC. Keeping the model.
Training on augumented user 137803 23/50 current_auc = 0.6639894667544437
User 137803 AUC after training: 0.663998871437976
User 137803 improves AUC. Keeping the model.
Training on augumented user 81768 24/50 current_auc = 0.663998871437976
User 81768 AUC after training: 0.6637590520079
User 81768 does not improve AUC. Reverting changes.
Training on augumented user 94757 25/50 current_auc = 0.663998871437976
User 94757 AUC after training: 0.664045894855638
User 94757 improves AUC. Keeping the model.
Training on augumented user 130024 26/50 current_auc = 0.664045894855638
User 130024 AUC after training: 0.6638860152355874
User 130024 does not improve AUC. Reverting changes.
Training on augumented user 89656 27/50 current_auc = 0.664045894855638
User 89656 AUC after training: 0.6641211323238972
User 89656 improves AUC. Keeping the model.
Training on augumented user 4951 28/50 current_auc = 0.6641211323238972
User 4951 AUC after training: 0.6637261356155365
User 4951 does not improve AUC. Reverting changes.
Training on augumented user 6064 29/50 current_auc = 0.6641211323238972
User 6064 AUC after training: 0.6637825637167311
User 6064 does not improve AUC. Reverting changes.
Training on augumented user 25748 30/50 current_auc = 0.6641211323238972
User 25748 AUC after training: 0.6639894667544436
User 25748 does not improve AUC. Reverting changes.
Training on augumented user 115418 31/50 current_auc = 0.6641211323238972
User 115418 AUC after training: 0.6639189316279507
User 115418 does not improve AUC. Reverting changes.
Training on augumented user 50572 32/50 current_auc = 0.6641211323238972
User 50572 AUC after training: 0.6641493463744945
User 50572 improves AUC. Keeping the model.
Training on augumented user 2625 33/50 current_auc = 0.6641493463744945
User 2625 AUC after training: 0.664205774475689
User 2625 improves AUC. Keeping the model.
Training on augumented user 13537 34/50 current_auc = 0.664205774475689
User 13537 AUC after training: 0.6639612527038466
User 13537 does not improve AUC. Reverting changes.
Training on augumented user 126656 35/50 current_auc = 0.664205774475689
User 126656 AUC after training: 0.6640458948556381
User 126656 does not improve AUC. Reverting changes.
Training on augumented user 128816 36/50 current_auc = 0.664205774475689
User 128816 AUC after training: 0.6640835135897678
User 128816 does not improve AUC. Reverting changes.
Training on augumented user 127209 37/50 current_auc = 0.664205774475689
User 127209 AUC after training: 0.6643797611210382
User 127209 improves AUC. Keeping the model.
Training on augumented user 89910 38/50 current_auc = 0.6643797611210382
User 89910 AUC after training: 0.6642669049186495
User 89910 does not improve AUC. Reverting changes.
Training on augumented user 60936 39/50 current_auc = 0.6643797611210382
User 60936 AUC after training: 0.6641916674503903
User 60936 does not improve AUC. Reverting changes.
Training on augumented user 128453 40/50 current_auc = 0.6643797611210382
User 128453 AUC after training: 0.664304523652779
User 128453 does not improve AUC. Reverting changes.
Training on augumented user 113620 41/50 current_auc = 0.6643797611210382
User 113620 AUC after training: 0.6637919684002633
User 113620 does not improve AUC. Reverting changes.
Training on augumented user 101331 42/50 current_auc = 0.6643797611210382
User 101331 AUC after training: 0.6643186306780777
User 101331 does not improve AUC. Reverting changes.
Training on augumented user 137038 43/50 current_auc = 0.6643797611210382
User 137038 AUC after training: 0.6641681557415593
User 137038 does not improve AUC. Reverting changes.
Training on augumented user 122773 44/50 current_auc = 0.6643797611210382
User 122773 AUC after training: 0.66456315244992
User 122773 improves AUC. Keeping the model.
Training on augumented user 46837 45/50 current_auc = 0.66456315244992
User 46837 AUC after training: 0.6642386908680523
User 46837 does not improve AUC. Reverting changes.
Training on augumented user 36843 46/50 current_auc = 0.66456315244992
User 36843 AUC after training: 0.6642669049186495
User 36843 does not improve AUC. Reverting changes.
Training on augumented user 48525 47/50 current_auc = 0.66456315244992
User 48525 AUC after training: 0.6647230320699709
User 48525 improves AUC. Keeping the model.
Training on augumented user 108631 48/50 current_auc = 0.6647230320699709
User 108631 AUC after training: 0.664845292955892
User 108631 improves AUC. Keeping the model.
Training on augumented user 16429 49/50 current_auc = 0.664845292955892
User 16429 AUC after training: 0.6648735070064893
User 16429 improves AUC. Keeping the model.
[2024-12-02 19:17:34.635679] start test user 114545 183/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:17:35.362842] start test user 114545 183/567 recall augumented users by random, augumented_users = [134480, 90330, 60271, 98394, 127608, 34153, 78356, 68729, 21852, 136898, 106510, 66347, 89684, 63715, 137723, 105575, 52876, 113115, 42305, 126395, 137879, 41740, 124704, 96014, 36020, 16762, 30912, 8134, 13808, 112288, 131435, 80581, 92540, 91379, 55194, 111754, 79384, 122988, 87425, 136390, 66931, 76055, 61493, 23357, 66152, 50575, 23359, 64019, 64069, 33441]
[2024-12-02 19:17:35.380510] user = 114545 Cloud 183/567
[2024-12-02 19:17:35.392657] user = 114545 Local 183/567
[2024-12-02 19:17:35.482094] user = 114545 Local+ 183/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:17:38.896315] user = 114545 MPDA- 183/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.60790273556231
Training on augumented user 134480 0/50 current_auc = 0.60790273556231
User 134480 AUC after training: 0.6063829787234043
User 134480 does not improve AUC. Reverting changes.
Training on augumented user 90330 1/50 current_auc = 0.60790273556231
User 90330 AUC after training: 0.60790273556231
User 90330 does not improve AUC. Reverting changes.
Training on augumented user 60271 2/50 current_auc = 0.60790273556231
User 60271 AUC after training: 0.60790273556231
User 60271 does not improve AUC. Reverting changes.
Training on augumented user 98394 3/50 current_auc = 0.60790273556231
User 98394 AUC after training: 0.6063829787234042
User 98394 does not improve AUC. Reverting changes.
Training on augumented user 127608 4/50 current_auc = 0.60790273556231
User 127608 AUC after training: 0.60790273556231
User 127608 does not improve AUC. Reverting changes.
Training on augumented user 34153 5/50 current_auc = 0.60790273556231
User 34153 AUC after training: 0.6063829787234043
User 34153 does not improve AUC. Reverting changes.
Training on augumented user 78356 6/50 current_auc = 0.60790273556231
User 78356 AUC after training: 0.6063829787234043
User 78356 does not improve AUC. Reverting changes.
Training on augumented user 68729 7/50 current_auc = 0.60790273556231
User 68729 AUC after training: 0.6063829787234043
User 68729 does not improve AUC. Reverting changes.
Training on augumented user 21852 8/50 current_auc = 0.60790273556231
User 21852 AUC after training: 0.6063829787234043
User 21852 does not improve AUC. Reverting changes.
Training on augumented user 136898 9/50 current_auc = 0.60790273556231
User 136898 AUC after training: 0.60790273556231
User 136898 does not improve AUC. Reverting changes.
Training on augumented user 106510 10/50 current_auc = 0.60790273556231
User 106510 AUC after training: 0.60790273556231
User 106510 does not improve AUC. Reverting changes.
Training on augumented user 66347 11/50 current_auc = 0.60790273556231
User 66347 AUC after training: 0.6063829787234043
User 66347 does not improve AUC. Reverting changes.
Training on augumented user 89684 12/50 current_auc = 0.60790273556231
User 89684 AUC after training: 0.60790273556231
User 89684 does not improve AUC. Reverting changes.
Training on augumented user 63715 13/50 current_auc = 0.60790273556231
User 63715 AUC after training: 0.6063829787234043
User 63715 does not improve AUC. Reverting changes.
Training on augumented user 137723 14/50 current_auc = 0.60790273556231
User 137723 AUC after training: 0.60790273556231
User 137723 does not improve AUC. Reverting changes.
Training on augumented user 105575 15/50 current_auc = 0.60790273556231
User 105575 AUC after training: 0.6094224924012158
User 105575 improves AUC. Keeping the model.
Training on augumented user 52876 16/50 current_auc = 0.6094224924012158
User 52876 AUC after training: 0.6094224924012158
User 52876 does not improve AUC. Reverting changes.
Training on augumented user 113115 17/50 current_auc = 0.6094224924012158
User 113115 AUC after training: 0.60790273556231
User 113115 does not improve AUC. Reverting changes.
Training on augumented user 42305 18/50 current_auc = 0.6094224924012158
User 42305 AUC after training: 0.6094224924012158
User 42305 does not improve AUC. Reverting changes.
Training on augumented user 126395 19/50 current_auc = 0.6094224924012158
User 126395 AUC after training: 0.60790273556231
User 126395 does not improve AUC. Reverting changes.
Training on augumented user 137879 20/50 current_auc = 0.6094224924012158
User 137879 AUC after training: 0.6094224924012158
User 137879 does not improve AUC. Reverting changes.
Training on augumented user 41740 21/50 current_auc = 0.6094224924012158
User 41740 AUC after training: 0.6094224924012158
User 41740 does not improve AUC. Reverting changes.
Training on augumented user 124704 22/50 current_auc = 0.6094224924012158
User 124704 AUC after training: 0.6094224924012158
User 124704 does not improve AUC. Reverting changes.
Training on augumented user 96014 23/50 current_auc = 0.6094224924012158
User 96014 AUC after training: 0.6063829787234042
User 96014 does not improve AUC. Reverting changes.
Training on augumented user 36020 24/50 current_auc = 0.6094224924012158
User 36020 AUC after training: 0.6094224924012158
User 36020 does not improve AUC. Reverting changes.
Training on augumented user 16762 25/50 current_auc = 0.6094224924012158
User 16762 AUC after training: 0.6094224924012158
User 16762 does not improve AUC. Reverting changes.
Training on augumented user 30912 26/50 current_auc = 0.6094224924012158
User 30912 AUC after training: 0.6063829787234042
User 30912 does not improve AUC. Reverting changes.
Training on augumented user 8134 27/50 current_auc = 0.6094224924012158
User 8134 AUC after training: 0.6094224924012158
User 8134 does not improve AUC. Reverting changes.
Training on augumented user 13808 28/50 current_auc = 0.6094224924012158
User 13808 AUC after training: 0.60790273556231
User 13808 does not improve AUC. Reverting changes.
Training on augumented user 112288 29/50 current_auc = 0.6094224924012158
User 112288 AUC after training: 0.60790273556231
User 112288 does not improve AUC. Reverting changes.
Training on augumented user 131435 30/50 current_auc = 0.6094224924012158
User 131435 AUC after training: 0.6048632218844985
User 131435 does not improve AUC. Reverting changes.
Training on augumented user 80581 31/50 current_auc = 0.6094224924012158
User 80581 AUC after training: 0.60790273556231
User 80581 does not improve AUC. Reverting changes.
Training on augumented user 92540 32/50 current_auc = 0.6094224924012158
User 92540 AUC after training: 0.6094224924012158
User 92540 does not improve AUC. Reverting changes.
Training on augumented user 91379 33/50 current_auc = 0.6094224924012158
User 91379 AUC after training: 0.6094224924012158
User 91379 does not improve AUC. Reverting changes.
Training on augumented user 55194 34/50 current_auc = 0.6094224924012158
User 55194 AUC after training: 0.6094224924012158
User 55194 does not improve AUC. Reverting changes.
Training on augumented user 111754 35/50 current_auc = 0.6094224924012158
User 111754 AUC after training: 0.60790273556231
User 111754 does not improve AUC. Reverting changes.
Training on augumented user 79384 36/50 current_auc = 0.6094224924012158
User 79384 AUC after training: 0.6094224924012158
User 79384 does not improve AUC. Reverting changes.
Training on augumented user 122988 37/50 current_auc = 0.6094224924012158
User 122988 AUC after training: 0.6094224924012158
User 122988 does not improve AUC. Reverting changes.
Training on augumented user 87425 38/50 current_auc = 0.6094224924012158
User 87425 AUC after training: 0.6094224924012158
User 87425 does not improve AUC. Reverting changes.
Training on augumented user 136390 39/50 current_auc = 0.6094224924012158
User 136390 AUC after training: 0.6094224924012158
User 136390 does not improve AUC. Reverting changes.
Training on augumented user 66931 40/50 current_auc = 0.6094224924012158
User 66931 AUC after training: 0.6063829787234042
User 66931 does not improve AUC. Reverting changes.
Training on augumented user 76055 41/50 current_auc = 0.6094224924012158
User 76055 AUC after training: 0.60790273556231
User 76055 does not improve AUC. Reverting changes.
Training on augumented user 61493 42/50 current_auc = 0.6094224924012158
User 61493 AUC after training: 0.60790273556231
User 61493 does not improve AUC. Reverting changes.
Training on augumented user 23357 43/50 current_auc = 0.6094224924012158
User 23357 AUC after training: 0.6094224924012158
User 23357 does not improve AUC. Reverting changes.
Training on augumented user 66152 44/50 current_auc = 0.6094224924012158
User 66152 AUC after training: 0.6094224924012158
User 66152 does not improve AUC. Reverting changes.
Training on augumented user 50575 45/50 current_auc = 0.6094224924012158
User 50575 AUC after training: 0.6048632218844986
User 50575 does not improve AUC. Reverting changes.
Training on augumented user 23359 46/50 current_auc = 0.6094224924012158
User 23359 AUC after training: 0.6094224924012158
User 23359 does not improve AUC. Reverting changes.
Training on augumented user 64019 47/50 current_auc = 0.6094224924012158
User 64019 AUC after training: 0.6094224924012158
User 64019 does not improve AUC. Reverting changes.
Training on augumented user 64069 48/50 current_auc = 0.6094224924012158
User 64069 AUC after training: 0.6094224924012158
User 64069 does not improve AUC. Reverting changes.
Training on augumented user 33441 49/50 current_auc = 0.6094224924012158
User 33441 AUC after training: 0.6094224924012158
User 33441 does not improve AUC. Reverting changes.
[2024-12-02 19:18:11.507226] start test user 114570 184/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:18:12.023294] start test user 114570 184/567 recall augumented users by random, augumented_users = [117398, 36135, 122353, 51898, 24899, 44904, 41597, 3376, 64198, 92825, 73229, 30498, 84251, 63095, 120257, 87983, 26063, 119148, 65705, 39767, 125964, 22116, 102934, 116949, 68217, 2316, 32575, 66211, 71548, 82088, 94279, 78843, 63145, 67673, 60497, 70442, 26403, 28879, 30970, 44374, 90088, 83351, 122770, 98566, 103006, 24688, 21691, 112155, 42369, 56145]
[2024-12-02 19:18:12.041159] user = 114570 Cloud 184/567
[2024-12-02 19:18:12.083885] user = 114570 Local 184/567
[2024-12-02 19:18:12.291689] user = 114570 Local+ 184/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:18:15.873126] user = 114570 MPDA- 184/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7938572719060524
Training on augumented user 117398 0/50 current_auc = 0.7938572719060524
User 117398 AUC after training: 0.7938572719060524
User 117398 does not improve AUC. Reverting changes.
Training on augumented user 36135 1/50 current_auc = 0.7938572719060524
User 36135 AUC after training: 0.793676603432701
User 36135 does not improve AUC. Reverting changes.
Training on augumented user 122353 2/50 current_auc = 0.7938572719060524
User 122353 AUC after training: 0.7938572719060524
User 122353 does not improve AUC. Reverting changes.
Training on augumented user 51898 3/50 current_auc = 0.7938572719060524
User 51898 AUC after training: 0.7937669376693767
User 51898 does not improve AUC. Reverting changes.
Training on augumented user 24899 4/50 current_auc = 0.7938572719060524
User 24899 AUC after training: 0.7939476061427281
User 24899 improves AUC. Keeping the model.
Training on augumented user 44904 5/50 current_auc = 0.7939476061427281
User 44904 AUC after training: 0.7934507678410118
User 44904 does not improve AUC. Reverting changes.
Training on augumented user 41597 6/50 current_auc = 0.7939476061427281
User 41597 AUC after training: 0.7943089430894309
User 41597 improves AUC. Keeping the model.
Training on augumented user 3376 7/50 current_auc = 0.7943089430894309
User 3376 AUC after training: 0.7944444444444444
User 3376 improves AUC. Keeping the model.
Training on augumented user 64198 8/50 current_auc = 0.7944444444444444
User 64198 AUC after training: 0.7944444444444445
User 64198 improves AUC. Keeping the model.
Training on augumented user 92825 9/50 current_auc = 0.7944444444444445
User 92825 AUC after training: 0.7939476061427281
User 92825 does not improve AUC. Reverting changes.
Training on augumented user 73229 10/50 current_auc = 0.7944444444444445
User 73229 AUC after training: 0.7937217705510389
User 73229 does not improve AUC. Reverting changes.
Training on augumented user 30498 11/50 current_auc = 0.7944444444444445
User 30498 AUC after training: 0.7946251129177958
User 30498 improves AUC. Keeping the model.
Training on augumented user 84251 12/50 current_auc = 0.7946251129177958
User 84251 AUC after training: 0.7945347786811202
User 84251 does not improve AUC. Reverting changes.
Training on augumented user 63095 13/50 current_auc = 0.7946251129177958
User 63095 AUC after training: 0.7941282746160796
User 63095 does not improve AUC. Reverting changes.
Training on augumented user 120257 14/50 current_auc = 0.7946251129177958
User 120257 AUC after training: 0.7944896115627823
User 120257 does not improve AUC. Reverting changes.
Training on augumented user 87983 15/50 current_auc = 0.7946251129177958
User 87983 AUC after training: 0.7946251129177958
User 87983 does not improve AUC. Reverting changes.
Training on augumented user 26063 16/50 current_auc = 0.7946251129177958
User 26063 AUC after training: 0.7944896115627823
User 26063 does not improve AUC. Reverting changes.
Training on augumented user 119148 17/50 current_auc = 0.7946251129177958
User 119148 AUC after training: 0.7929990966576332
User 119148 does not improve AUC. Reverting changes.
Training on augumented user 65705 18/50 current_auc = 0.7946251129177958
User 65705 AUC after training: 0.7940831074977417
User 65705 does not improve AUC. Reverting changes.
Training on augumented user 39767 19/50 current_auc = 0.7946251129177958
User 39767 AUC after training: 0.7938121047877145
User 39767 does not improve AUC. Reverting changes.
Training on augumented user 125964 20/50 current_auc = 0.7946251129177958
User 125964 AUC after training: 0.7943541102077687
User 125964 does not improve AUC. Reverting changes.
Training on augumented user 22116 21/50 current_auc = 0.7946251129177958
User 22116 AUC after training: 0.7939024390243903
User 22116 does not improve AUC. Reverting changes.
Training on augumented user 102934 22/50 current_auc = 0.7946251129177958
User 102934 AUC after training: 0.7941734417344173
User 102934 does not improve AUC. Reverting changes.
Training on augumented user 116949 23/50 current_auc = 0.7946251129177958
User 116949 AUC after training: 0.7944896115627824
User 116949 does not improve AUC. Reverting changes.
Training on augumented user 68217 24/50 current_auc = 0.7946251129177958
User 68217 AUC after training: 0.7946251129177958
User 68217 does not improve AUC. Reverting changes.
Training on augumented user 2316 25/50 current_auc = 0.7946251129177958
User 2316 AUC after training: 0.794263775971093
User 2316 does not improve AUC. Reverting changes.
Training on augumented user 32575 26/50 current_auc = 0.7946251129177958
User 32575 AUC after training: 0.794579945799458
User 32575 does not improve AUC. Reverting changes.
Training on augumented user 66211 27/50 current_auc = 0.7946251129177958
User 66211 AUC after training: 0.794850948509485
User 66211 improves AUC. Keeping the model.
Training on augumented user 71548 28/50 current_auc = 0.794850948509485
User 71548 AUC after training: 0.7947606142728093
User 71548 does not improve AUC. Reverting changes.
Training on augumented user 82088 29/50 current_auc = 0.794850948509485
User 82088 AUC after training: 0.7947606142728094
User 82088 does not improve AUC. Reverting changes.
Training on augumented user 94279 30/50 current_auc = 0.794850948509485
User 94279 AUC after training: 0.7943992773261066
User 94279 does not improve AUC. Reverting changes.
Training on augumented user 78843 31/50 current_auc = 0.794850948509485
User 78843 AUC after training: 0.7950316169828365
User 78843 improves AUC. Keeping the model.
Training on augumented user 63145 32/50 current_auc = 0.7950316169828365
User 63145 AUC after training: 0.7950316169828365
User 63145 does not improve AUC. Reverting changes.
Training on augumented user 67673 33/50 current_auc = 0.7950316169828365
User 67673 AUC after training: 0.793676603432701
User 67673 does not improve AUC. Reverting changes.
Training on augumented user 60497 34/50 current_auc = 0.7950316169828365
User 60497 AUC after training: 0.7943992773261066
User 60497 does not improve AUC. Reverting changes.
Training on augumented user 70442 35/50 current_auc = 0.7950316169828365
User 70442 AUC after training: 0.7939476061427281
User 70442 does not improve AUC. Reverting changes.
Training on augumented user 26403 36/50 current_auc = 0.7950316169828365
User 26403 AUC after training: 0.794579945799458
User 26403 does not improve AUC. Reverting changes.
Training on augumented user 28879 37/50 current_auc = 0.7950316169828365
User 28879 AUC after training: 0.7950316169828365
User 28879 does not improve AUC. Reverting changes.
Training on augumented user 30970 38/50 current_auc = 0.7950316169828365
User 30970 AUC after training: 0.7947606142728094
User 30970 does not improve AUC. Reverting changes.
Training on augumented user 44374 39/50 current_auc = 0.7950316169828365
User 44374 AUC after training: 0.7942186088527551
User 44374 does not improve AUC. Reverting changes.
Training on augumented user 90088 40/50 current_auc = 0.7950316169828365
User 90088 AUC after training: 0.7952122854561879
User 90088 improves AUC. Keeping the model.
Training on augumented user 83351 41/50 current_auc = 0.7952122854561879
User 83351 AUC after training: 0.7947606142728093
User 83351 does not improve AUC. Reverting changes.
Training on augumented user 122770 42/50 current_auc = 0.7952122854561879
User 122770 AUC after training: 0.7947606142728094
User 122770 does not improve AUC. Reverting changes.
Training on augumented user 98566 43/50 current_auc = 0.7952122854561879
User 98566 AUC after training: 0.7943089430894309
User 98566 does not improve AUC. Reverting changes.
Training on augumented user 103006 44/50 current_auc = 0.7952122854561879
User 103006 AUC after training: 0.7941282746160795
User 103006 does not improve AUC. Reverting changes.
Training on augumented user 24688 45/50 current_auc = 0.7952122854561879
User 24688 AUC after training: 0.7943089430894309
User 24688 does not improve AUC. Reverting changes.
Training on augumented user 21691 46/50 current_auc = 0.7952122854561879
User 21691 AUC after training: 0.7939927732610659
User 21691 does not improve AUC. Reverting changes.
Training on augumented user 112155 47/50 current_auc = 0.7952122854561879
User 112155 AUC after training: 0.7944896115627822
User 112155 does not improve AUC. Reverting changes.
Training on augumented user 42369 48/50 current_auc = 0.7952122854561879
User 42369 AUC after training: 0.7939476061427282
User 42369 does not improve AUC. Reverting changes.
Training on augumented user 56145 49/50 current_auc = 0.7952122854561879
User 56145 AUC after training: 0.7952122854561879
User 56145 does not improve AUC. Reverting changes.
[2024-12-02 19:18:47.869665] start test user 114579 185/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:18:48.408788] start test user 114579 185/567 recall augumented users by random, augumented_users = [110647, 74526, 41808, 60604, 130831, 14936, 11019, 59457, 109183, 101492, 72068, 45961, 24977, 77200, 69904, 61726, 87000, 4932, 38564, 49329, 127979, 16360, 56103, 96435, 102478, 13383, 126282, 134509, 105829, 24528, 108679, 39097, 17746, 5314, 92649, 136557, 15119, 103333, 96618, 87519, 61663, 20759, 109448, 76087, 24582, 102743, 113551, 89792, 51416, 92264]
[2024-12-02 19:18:48.447467] user = 114579 Cloud 185/567
[2024-12-02 19:18:48.536445] user = 114579 Local 185/567
[2024-12-02 19:18:48.706335] user = 114579 Local+ 185/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:18:51.784248] user = 114579 MPDA- 185/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7864675577502909
Training on augumented user 110647 0/50 current_auc = 0.7864675577502909
User 110647 AUC after training: 0.786548277581254
User 110647 improves AUC. Keeping the model.
Training on augumented user 74526 1/50 current_auc = 0.786548277581254
User 74526 AUC after training: 0.7865292846798508
User 74526 does not improve AUC. Reverting changes.
Training on augumented user 41808 2/50 current_auc = 0.786548277581254
User 41808 AUC after training: 0.7866052562854633
User 41808 improves AUC. Keeping the model.
Training on augumented user 60604 3/50 current_auc = 0.7866052562854633
User 60604 AUC after training: 0.7868331711023004
User 60604 improves AUC. Keeping the model.
Training on augumented user 130831 4/50 current_auc = 0.7868331711023004
User 130831 AUC after training: 0.7867334583699344
User 130831 does not improve AUC. Reverting changes.
Training on augumented user 14936 5/50 current_auc = 0.7868331711023004
User 14936 AUC after training: 0.7867809406234421
User 14936 does not improve AUC. Reverting changes.
Training on augumented user 11019 6/50 current_auc = 0.7868331711023004
User 11019 AUC after training: 0.7867714441727405
User 11019 does not improve AUC. Reverting changes.
Training on augumented user 59457 7/50 current_auc = 0.7868331711023004
User 59457 AUC after training: 0.7854894233280312
User 59457 does not improve AUC. Reverting changes.
Training on augumented user 109183 8/50 current_auc = 0.7868331711023004
User 109183 AUC after training: 0.7865957598347618
User 109183 does not improve AUC. Reverting changes.
Training on augumented user 101492 9/50 current_auc = 0.7868331711023004
User 101492 AUC after training: 0.7867287101445835
User 101492 does not improve AUC. Reverting changes.
Training on augumented user 72068 10/50 current_auc = 0.7868331711023004
User 72068 AUC after training: 0.786866408679756
User 72068 improves AUC. Keeping the model.
Training on augumented user 45961 11/50 current_auc = 0.786866408679756
User 45961 AUC after training: 0.7868236746515989
User 45961 does not improve AUC. Reverting changes.
Training on augumented user 24977 12/50 current_auc = 0.786866408679756
User 24977 AUC after training: 0.7868948980318606
User 24977 improves AUC. Keeping the model.
Training on augumented user 77200 13/50 current_auc = 0.7868948980318606
User 77200 AUC after training: 0.7869566249614207
User 77200 improves AUC. Keeping the model.
Training on augumented user 69904 14/50 current_auc = 0.7869566249614207
User 69904 AUC after training: 0.7867809406234421
User 69904 does not improve AUC. Reverting changes.
Training on augumented user 61726 15/50 current_auc = 0.7869566249614207
User 61726 AUC after training: 0.7870231001163315
User 61726 improves AUC. Keeping the model.
Training on augumented user 87000 16/50 current_auc = 0.7870231001163315
User 87000 AUC after training: 0.7868046817501959
User 87000 does not improve AUC. Reverting changes.
Training on augumented user 4932 17/50 current_auc = 0.7870231001163315
User 4932 AUC after training: 0.7870041072149284
User 4932 does not improve AUC. Reverting changes.
Training on augumented user 38564 18/50 current_auc = 0.7870231001163315
User 38564 AUC after training: 0.7870183518909808
User 38564 does not improve AUC. Reverting changes.
Training on augumented user 49329 19/50 current_auc = 0.7870231001163315
User 49329 AUC after training: 0.7869043944825622
User 49329 does not improve AUC. Reverting changes.
Training on augumented user 127979 20/50 current_auc = 0.7870231001163315
User 127979 AUC after training: 0.7871038199472947
User 127979 improves AUC. Keeping the model.
Training on augumented user 16360 21/50 current_auc = 0.7871038199472947
User 16360 AUC after training: 0.7870420930177346
User 16360 does not improve AUC. Reverting changes.
Training on augumented user 56103 22/50 current_auc = 0.7871038199472947
User 56103 AUC after training: 0.7870041072149283
User 56103 does not improve AUC. Reverting changes.
Training on augumented user 96435 23/50 current_auc = 0.7871038199472947
User 96435 AUC after training: 0.7870278483416823
User 96435 does not improve AUC. Reverting changes.
Training on augumented user 102478 24/50 current_auc = 0.7871038199472947
User 102478 AUC after training: 0.7870895752712423
User 102478 does not improve AUC. Reverting changes.
Training on augumented user 13383 25/50 current_auc = 0.7871038199472947
User 13383 AUC after training: 0.7870325965670332
User 13383 does not improve AUC. Reverting changes.
Training on augumented user 126282 26/50 current_auc = 0.7871038199472947
User 126282 AUC after training: 0.7870515894684362
User 126282 does not improve AUC. Reverting changes.
Training on augumented user 134509 27/50 current_auc = 0.7871038199472947
User 134509 AUC after training: 0.7871702951022057
User 134509 improves AUC. Keeping the model.
Training on augumented user 105829 28/50 current_auc = 0.7871702951022057
User 105829 AUC after training: 0.7870373447923837
User 105829 does not improve AUC. Reverting changes.
Training on augumented user 24528 29/50 current_auc = 0.7871702951022057
User 24528 AUC after training: 0.7872035326796609
User 24528 improves AUC. Keeping the model.
Training on augumented user 108679 30/50 current_auc = 0.7872035326796609
User 108679 AUC after training: 0.7870468412430854
User 108679 does not improve AUC. Reverting changes.
Training on augumented user 39097 31/50 current_auc = 0.7872035326796609
User 39097 AUC after training: 0.7872557631585196
User 39097 improves AUC. Keeping the model.
Training on augumented user 17746 32/50 current_auc = 0.7872557631585196
User 17746 AUC after training: 0.7872510149331687
User 17746 does not improve AUC. Reverting changes.
Training on augumented user 5314 33/50 current_auc = 0.7872557631585196
User 5314 AUC after training: 0.7872557631585195
User 5314 does not improve AUC. Reverting changes.
Training on augumented user 92649 34/50 current_auc = 0.7872557631585196
User 92649 AUC after training: 0.7872510149331687
User 92649 does not improve AUC. Reverting changes.
Training on augumented user 136557 35/50 current_auc = 0.7872557631585196
User 136557 AUC after training: 0.7872082809050117
User 136557 does not improve AUC. Reverting changes.
Training on augumented user 15119 36/50 current_auc = 0.7872557631585196
User 15119 AUC after training: 0.7870420930177346
User 15119 does not improve AUC. Reverting changes.
Training on augumented user 103333 37/50 current_auc = 0.7872557631585196
User 103333 AUC after training: 0.7870753305951901
User 103333 does not improve AUC. Reverting changes.
Training on augumented user 96618 38/50 current_auc = 0.7872557631585196
User 96618 AUC after training: 0.7868094299755467
User 96618 does not improve AUC. Reverting changes.
Training on augumented user 87519 39/50 current_auc = 0.7872557631585196
User 87519 AUC after training: 0.7873079936373781
User 87519 improves AUC. Keeping the model.
Training on augumented user 61663 40/50 current_auc = 0.7873079936373781
User 61663 AUC after training: 0.7869946107642269
User 61663 does not improve AUC. Reverting changes.
Training on augumented user 20759 41/50 current_auc = 0.7873079936373781
User 20759 AUC after training: 0.787289000735975
User 20759 does not improve AUC. Reverting changes.
Training on augumented user 109448 42/50 current_auc = 0.7873079936373781
User 109448 AUC after training: 0.7872035326796609
User 109448 does not improve AUC. Reverting changes.
Training on augumented user 76087 43/50 current_auc = 0.7873079936373781
User 76087 AUC after training: 0.7871797915529072
User 76087 does not improve AUC. Reverting changes.
Training on augumented user 24582 44/50 current_auc = 0.7873079936373781
User 24582 AUC after training: 0.7872605113838702
User 24582 does not improve AUC. Reverting changes.
Training on augumented user 102743 45/50 current_auc = 0.7873079936373781
User 102743 AUC after training: 0.7870610859191377
User 102743 does not improve AUC. Reverting changes.
Training on augumented user 113551 46/50 current_auc = 0.7873079936373781
User 113551 AUC after training: 0.7870658341444885
User 113551 does not improve AUC. Reverting changes.
Training on augumented user 89792 47/50 current_auc = 0.7873079936373781
User 89792 AUC after training: 0.787203532679661
User 89792 does not improve AUC. Reverting changes.
Training on augumented user 51416 48/50 current_auc = 0.7873079936373781
User 51416 AUC after training: 0.7872652596092211
User 51416 does not improve AUC. Reverting changes.
Training on augumented user 92264 49/50 current_auc = 0.7873079936373781
User 92264 AUC after training: 0.7872747560599226
User 92264 does not improve AUC. Reverting changes.
[2024-12-02 19:19:24.182664] start test user 114603 186/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:19:24.669363] start test user 114603 186/567 recall augumented users by random, augumented_users = [130931, 91069, 58802, 3044, 5490, 100429, 124012, 98413, 37371, 30939, 79279, 50292, 97966, 103931, 87571, 102498, 3318, 82956, 29390, 32611, 15714, 126096, 108274, 14941, 23328, 85121, 14105, 37850, 46849, 87567, 45196, 15903, 10562, 61284, 16975, 450, 137063, 128194, 112423, 41393, 7302, 111848, 91656, 121333, 16887, 85758, 62355, 129115, 138079, 64983]
[2024-12-02 19:19:24.685673] user = 114603 Cloud 186/567
[2024-12-02 19:19:24.707670] user = 114603 Local 186/567
[2024-12-02 19:19:24.747801] user = 114603 Local+ 186/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:19:28.467544] user = 114603 MPDA- 186/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7336601307189543
Training on augumented user 130931 0/50 current_auc = 0.7336601307189543
User 130931 AUC after training: 0.7336601307189543
User 130931 does not improve AUC. Reverting changes.
Training on augumented user 91069 1/50 current_auc = 0.7336601307189543
User 91069 AUC after training: 0.7347494553376908
User 91069 improves AUC. Keeping the model.
Training on augumented user 58802 2/50 current_auc = 0.7347494553376908
User 58802 AUC after training: 0.7391067538126361
User 58802 improves AUC. Keeping the model.
Training on augumented user 3044 3/50 current_auc = 0.7391067538126361
User 3044 AUC after training: 0.7391067538126361
User 3044 does not improve AUC. Reverting changes.
Training on augumented user 5490 4/50 current_auc = 0.7391067538126361
User 5490 AUC after training: 0.7369281045751634
User 5490 does not improve AUC. Reverting changes.
Training on augumented user 100429 5/50 current_auc = 0.7391067538126361
User 100429 AUC after training: 0.7380174291938999
User 100429 does not improve AUC. Reverting changes.
Training on augumented user 124012 6/50 current_auc = 0.7391067538126361
User 124012 AUC after training: 0.7391067538126361
User 124012 does not improve AUC. Reverting changes.
Training on augumented user 98413 7/50 current_auc = 0.7391067538126361
User 98413 AUC after training: 0.7380174291938999
User 98413 does not improve AUC. Reverting changes.
Training on augumented user 37371 8/50 current_auc = 0.7391067538126361
User 37371 AUC after training: 0.738562091503268
User 37371 does not improve AUC. Reverting changes.
Training on augumented user 30939 9/50 current_auc = 0.7391067538126361
User 30939 AUC after training: 0.7380174291938998
User 30939 does not improve AUC. Reverting changes.
Training on augumented user 79279 10/50 current_auc = 0.7391067538126361
User 79279 AUC after training: 0.7363834422657951
User 79279 does not improve AUC. Reverting changes.
Training on augumented user 50292 11/50 current_auc = 0.7391067538126361
User 50292 AUC after training: 0.7380174291938998
User 50292 does not improve AUC. Reverting changes.
Training on augumented user 97966 12/50 current_auc = 0.7391067538126361
User 97966 AUC after training: 0.7391067538126361
User 97966 does not improve AUC. Reverting changes.
Training on augumented user 103931 13/50 current_auc = 0.7391067538126361
User 103931 AUC after training: 0.7369281045751634
User 103931 does not improve AUC. Reverting changes.
Training on augumented user 87571 14/50 current_auc = 0.7391067538126361
User 87571 AUC after training: 0.7407407407407407
User 87571 improves AUC. Keeping the model.
Training on augumented user 102498 15/50 current_auc = 0.7407407407407407
User 102498 AUC after training: 0.7391067538126361
User 102498 does not improve AUC. Reverting changes.
Training on augumented user 3318 16/50 current_auc = 0.7407407407407407
User 3318 AUC after training: 0.7396514161220042
User 3318 does not improve AUC. Reverting changes.
Training on augumented user 82956 17/50 current_auc = 0.7407407407407407
User 82956 AUC after training: 0.7396514161220045
User 82956 does not improve AUC. Reverting changes.
Training on augumented user 29390 18/50 current_auc = 0.7407407407407407
User 29390 AUC after training: 0.7423747276688453
User 29390 improves AUC. Keeping the model.
Training on augumented user 32611 19/50 current_auc = 0.7423747276688453
User 32611 AUC after training: 0.7401960784313726
User 32611 does not improve AUC. Reverting changes.
Training on augumented user 15714 20/50 current_auc = 0.7423747276688453
User 15714 AUC after training: 0.7401960784313726
User 15714 does not improve AUC. Reverting changes.
Training on augumented user 126096 21/50 current_auc = 0.7423747276688453
User 126096 AUC after training: 0.7407407407407407
User 126096 does not improve AUC. Reverting changes.
Training on augumented user 108274 22/50 current_auc = 0.7423747276688453
User 108274 AUC after training: 0.7429193899782135
User 108274 improves AUC. Keeping the model.
Training on augumented user 14941 23/50 current_auc = 0.7429193899782135
User 14941 AUC after training: 0.741830065359477
User 14941 does not improve AUC. Reverting changes.
Training on augumented user 23328 24/50 current_auc = 0.7429193899782135
User 23328 AUC after training: 0.7429193899782135
User 23328 does not improve AUC. Reverting changes.
Training on augumented user 85121 25/50 current_auc = 0.7429193899782135
User 85121 AUC after training: 0.7429193899782135
User 85121 does not improve AUC. Reverting changes.
Training on augumented user 14105 26/50 current_auc = 0.7429193899782135
User 14105 AUC after training: 0.7429193899782135
User 14105 does not improve AUC. Reverting changes.
Training on augumented user 37850 27/50 current_auc = 0.7429193899782135
User 37850 AUC after training: 0.7407407407407407
User 37850 does not improve AUC. Reverting changes.
Training on augumented user 46849 28/50 current_auc = 0.7429193899782135
User 46849 AUC after training: 0.7418300653594772
User 46849 does not improve AUC. Reverting changes.
Training on augumented user 87567 29/50 current_auc = 0.7429193899782135
User 87567 AUC after training: 0.7363834422657952
User 87567 does not improve AUC. Reverting changes.
Training on augumented user 45196 30/50 current_auc = 0.7429193899782135
User 45196 AUC after training: 0.7440087145969498
User 45196 improves AUC. Keeping the model.
Training on augumented user 15903 31/50 current_auc = 0.7440087145969498
User 15903 AUC after training: 0.7412854030501089
User 15903 does not improve AUC. Reverting changes.
Training on augumented user 10562 32/50 current_auc = 0.7440087145969498
User 10562 AUC after training: 0.7440087145969498
User 10562 does not improve AUC. Reverting changes.
Training on augumented user 61284 33/50 current_auc = 0.7440087145969498
User 61284 AUC after training: 0.7429193899782135
User 61284 does not improve AUC. Reverting changes.
Training on augumented user 16975 34/50 current_auc = 0.7440087145969498
User 16975 AUC after training: 0.7418300653594772
User 16975 does not improve AUC. Reverting changes.
Training on augumented user 450 35/50 current_auc = 0.7440087145969498
User 450 AUC after training: 0.7429193899782135
User 450 does not improve AUC. Reverting changes.
Training on augumented user 137063 36/50 current_auc = 0.7440087145969498
User 137063 AUC after training: 0.7429193899782135
User 137063 does not improve AUC. Reverting changes.
Training on augumented user 128194 37/50 current_auc = 0.7440087145969498
User 128194 AUC after training: 0.7418300653594772
User 128194 does not improve AUC. Reverting changes.
Training on augumented user 112423 38/50 current_auc = 0.7440087145969498
User 112423 AUC after training: 0.7418300653594772
User 112423 does not improve AUC. Reverting changes.
Training on augumented user 41393 39/50 current_auc = 0.7440087145969498
User 41393 AUC after training: 0.7396514161220042
User 41393 does not improve AUC. Reverting changes.
Training on augumented user 7302 40/50 current_auc = 0.7440087145969498
User 7302 AUC after training: 0.7429193899782135
User 7302 does not improve AUC. Reverting changes.
Training on augumented user 111848 41/50 current_auc = 0.7440087145969498
User 111848 AUC after training: 0.7429193899782135
User 111848 does not improve AUC. Reverting changes.
Training on augumented user 91656 42/50 current_auc = 0.7440087145969498
User 91656 AUC after training: 0.7418300653594772
User 91656 does not improve AUC. Reverting changes.
Training on augumented user 121333 43/50 current_auc = 0.7440087145969498
User 121333 AUC after training: 0.7407407407407407
User 121333 does not improve AUC. Reverting changes.
Training on augumented user 16887 44/50 current_auc = 0.7440087145969498
User 16887 AUC after training: 0.7429193899782135
User 16887 does not improve AUC. Reverting changes.
Training on augumented user 85758 45/50 current_auc = 0.7440087145969498
User 85758 AUC after training: 0.7429193899782135
User 85758 does not improve AUC. Reverting changes.
Training on augumented user 62355 46/50 current_auc = 0.7440087145969498
User 62355 AUC after training: 0.7429193899782135
User 62355 does not improve AUC. Reverting changes.
Training on augumented user 129115 47/50 current_auc = 0.7440087145969498
User 129115 AUC after training: 0.7418300653594772
User 129115 does not improve AUC. Reverting changes.
Training on augumented user 138079 48/50 current_auc = 0.7440087145969498
User 138079 AUC after training: 0.7429193899782135
User 138079 does not improve AUC. Reverting changes.
Training on augumented user 64983 49/50 current_auc = 0.7440087145969498
User 64983 AUC after training: 0.7440087145969498
User 64983 does not improve AUC. Reverting changes.
[2024-12-02 19:20:01.127407] start test user 114617 187/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:20:01.836472] start test user 114617 187/567 recall augumented users by random, augumented_users = [77930, 47290, 33447, 24273, 72870, 109187, 58403, 116535, 57512, 42568, 27796, 120585, 42083, 77888, 24886, 59203, 38339, 20325, 114566, 88058, 129334, 29942, 130154, 130157, 33745, 24440, 63612, 113363, 60431, 107762, 63603, 24515, 91203, 82457, 32782, 89316, 111971, 6758, 104313, 137531, 25716, 95748, 98622, 86980, 25413, 106769, 126670, 10753, 116243, 10245]
[2024-12-02 19:20:01.865642] user = 114617 Cloud 187/567
[2024-12-02 19:20:01.922780] user = 114617 Local 187/567
[2024-12-02 19:20:02.020426] user = 114617 Local+ 187/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:20:04.872224] user = 114617 MPDA- 187/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6263736263736264
Training on augumented user 77930 0/50 current_auc = 0.6263736263736264
User 77930 AUC after training: 0.6278721278721279
User 77930 improves AUC. Keeping the model.
Training on augumented user 47290 1/50 current_auc = 0.6278721278721279
User 47290 AUC after training: 0.6281218781218781
User 47290 improves AUC. Keeping the model.
Training on augumented user 33447 2/50 current_auc = 0.6281218781218781
User 33447 AUC after training: 0.6276223776223775
User 33447 does not improve AUC. Reverting changes.
Training on augumented user 24273 3/50 current_auc = 0.6281218781218781
User 24273 AUC after training: 0.6321178821178821
User 24273 improves AUC. Keeping the model.
Training on augumented user 72870 4/50 current_auc = 0.6321178821178821
User 72870 AUC after training: 0.6306193806193805
User 72870 does not improve AUC. Reverting changes.
Training on augumented user 109187 5/50 current_auc = 0.6321178821178821
User 109187 AUC after training: 0.634115884115884
User 109187 improves AUC. Keeping the model.
Training on augumented user 58403 6/50 current_auc = 0.634115884115884
User 58403 AUC after training: 0.6338661338661339
User 58403 does not improve AUC. Reverting changes.
Training on augumented user 116535 7/50 current_auc = 0.634115884115884
User 116535 AUC after training: 0.6341158841158842
User 116535 improves AUC. Keeping the model.
Training on augumented user 57512 8/50 current_auc = 0.6341158841158842
User 57512 AUC after training: 0.6331168831168831
User 57512 does not improve AUC. Reverting changes.
Training on augumented user 42568 9/50 current_auc = 0.6341158841158842
User 42568 AUC after training: 0.6343656343656343
User 42568 improves AUC. Keeping the model.
Training on augumented user 27796 10/50 current_auc = 0.6343656343656343
User 27796 AUC after training: 0.6331168831168831
User 27796 does not improve AUC. Reverting changes.
Training on augumented user 120585 11/50 current_auc = 0.6343656343656343
User 120585 AUC after training: 0.6336163836163835
User 120585 does not improve AUC. Reverting changes.
Training on augumented user 42083 12/50 current_auc = 0.6343656343656343
User 42083 AUC after training: 0.6333666333666333
User 42083 does not improve AUC. Reverting changes.
Training on augumented user 77888 13/50 current_auc = 0.6343656343656343
User 77888 AUC after training: 0.6313686313686313
User 77888 does not improve AUC. Reverting changes.
Training on augumented user 24886 14/50 current_auc = 0.6343656343656343
User 24886 AUC after training: 0.6346153846153846
User 24886 improves AUC. Keeping the model.
Training on augumented user 59203 15/50 current_auc = 0.6346153846153846
User 59203 AUC after training: 0.6316183816183816
User 59203 does not improve AUC. Reverting changes.
Training on augumented user 38339 16/50 current_auc = 0.6346153846153846
User 38339 AUC after training: 0.6336163836163836
User 38339 does not improve AUC. Reverting changes.
Training on augumented user 20325 17/50 current_auc = 0.6346153846153846
User 20325 AUC after training: 0.6338661338661338
User 20325 does not improve AUC. Reverting changes.
Training on augumented user 114566 18/50 current_auc = 0.6346153846153846
User 114566 AUC after training: 0.6331168831168832
User 114566 does not improve AUC. Reverting changes.
Training on augumented user 88058 19/50 current_auc = 0.6346153846153846
User 88058 AUC after training: 0.6346153846153846
User 88058 does not improve AUC. Reverting changes.
Training on augumented user 129334 20/50 current_auc = 0.6346153846153846
User 129334 AUC after training: 0.634115884115884
User 129334 does not improve AUC. Reverting changes.
Training on augumented user 29942 21/50 current_auc = 0.6346153846153846
User 29942 AUC after training: 0.6348651348651349
User 29942 improves AUC. Keeping the model.
Training on augumented user 130154 22/50 current_auc = 0.6348651348651349
User 130154 AUC after training: 0.6343656343656343
User 130154 does not improve AUC. Reverting changes.
Training on augumented user 130157 23/50 current_auc = 0.6348651348651349
User 130157 AUC after training: 0.6346153846153847
User 130157 does not improve AUC. Reverting changes.
Training on augumented user 33745 24/50 current_auc = 0.6348651348651349
User 33745 AUC after training: 0.6346153846153847
User 33745 does not improve AUC. Reverting changes.
Training on augumented user 24440 25/50 current_auc = 0.6348651348651349
User 24440 AUC after training: 0.6351148851148851
User 24440 improves AUC. Keeping the model.
Training on augumented user 63612 26/50 current_auc = 0.6351148851148851
User 63612 AUC after training: 0.6348651348651349
User 63612 does not improve AUC. Reverting changes.
Training on augumented user 113363 27/50 current_auc = 0.6351148851148851
User 113363 AUC after training: 0.6331168831168831
User 113363 does not improve AUC. Reverting changes.
Training on augumented user 60431 28/50 current_auc = 0.6351148851148851
User 60431 AUC after training: 0.6348651348651349
User 60431 does not improve AUC. Reverting changes.
Training on augumented user 107762 29/50 current_auc = 0.6351148851148851
User 107762 AUC after training: 0.6341158841158842
User 107762 does not improve AUC. Reverting changes.
Training on augumented user 63603 30/50 current_auc = 0.6351148851148851
User 63603 AUC after training: 0.6338661338661339
User 63603 does not improve AUC. Reverting changes.
Training on augumented user 24515 31/50 current_auc = 0.6351148851148851
User 24515 AUC after training: 0.6346153846153847
User 24515 does not improve AUC. Reverting changes.
Training on augumented user 91203 32/50 current_auc = 0.6351148851148851
User 91203 AUC after training: 0.6336163836163836
User 91203 does not improve AUC. Reverting changes.
Training on augumented user 82457 33/50 current_auc = 0.6351148851148851
User 82457 AUC after training: 0.6341158841158842
User 82457 does not improve AUC. Reverting changes.
Training on augumented user 32782 34/50 current_auc = 0.6351148851148851
User 32782 AUC after training: 0.6343656343656344
User 32782 does not improve AUC. Reverting changes.
Training on augumented user 89316 35/50 current_auc = 0.6351148851148851
User 89316 AUC after training: 0.6336163836163836
User 89316 does not improve AUC. Reverting changes.
Training on augumented user 111971 36/50 current_auc = 0.6351148851148851
User 111971 AUC after training: 0.634115884115884
User 111971 does not improve AUC. Reverting changes.
Training on augumented user 6758 37/50 current_auc = 0.6351148851148851
User 6758 AUC after training: 0.6348651348651349
User 6758 does not improve AUC. Reverting changes.
Training on augumented user 104313 38/50 current_auc = 0.6351148851148851
User 104313 AUC after training: 0.6323676323676324
User 104313 does not improve AUC. Reverting changes.
Training on augumented user 137531 39/50 current_auc = 0.6351148851148851
User 137531 AUC after training: 0.6338661338661338
User 137531 does not improve AUC. Reverting changes.
Training on augumented user 25716 40/50 current_auc = 0.6351148851148851
User 25716 AUC after training: 0.634115884115884
User 25716 does not improve AUC. Reverting changes.
Training on augumented user 95748 41/50 current_auc = 0.6351148851148851
User 95748 AUC after training: 0.6336163836163836
User 95748 does not improve AUC. Reverting changes.
Training on augumented user 98622 42/50 current_auc = 0.6351148851148851
User 98622 AUC after training: 0.6333666333666333
User 98622 does not improve AUC. Reverting changes.
Training on augumented user 86980 43/50 current_auc = 0.6351148851148851
User 86980 AUC after training: 0.6338661338661339
User 86980 does not improve AUC. Reverting changes.
Training on augumented user 25413 44/50 current_auc = 0.6351148851148851
User 25413 AUC after training: 0.6341158841158842
User 25413 does not improve AUC. Reverting changes.
Training on augumented user 106769 45/50 current_auc = 0.6351148851148851
User 106769 AUC after training: 0.6336163836163836
User 106769 does not improve AUC. Reverting changes.
Training on augumented user 126670 46/50 current_auc = 0.6351148851148851
User 126670 AUC after training: 0.6336163836163836
User 126670 does not improve AUC. Reverting changes.
Training on augumented user 10753 47/50 current_auc = 0.6351148851148851
User 10753 AUC after training: 0.6338661338661339
User 10753 does not improve AUC. Reverting changes.
Training on augumented user 116243 48/50 current_auc = 0.6351148851148851
User 116243 AUC after training: 0.6341158841158842
User 116243 does not improve AUC. Reverting changes.
Training on augumented user 10245 49/50 current_auc = 0.6351148851148851
User 10245 AUC after training: 0.6338661338661339
User 10245 does not improve AUC. Reverting changes.
[2024-12-02 19:20:35.162804] start test user 114620 188/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:20:35.644850] start test user 114620 188/567 recall augumented users by random, augumented_users = [72333, 61510, 80345, 9868, 88507, 54198, 21067, 29076, 8729, 73860, 58316, 57795, 27236, 25485, 122732, 63934, 70146, 8730, 75169, 42736, 69633, 115216, 136618, 130736, 65968, 136906, 620, 114391, 12997, 1989, 37925, 18037, 35714, 4634, 50969, 98473, 76570, 58517, 128120, 88099, 1149, 107232, 15031, 122592, 101581, 123752, 125047, 36925, 110582, 20644]
[2024-12-02 19:20:35.659960] user = 114620 Cloud 188/567
[2024-12-02 19:20:35.669823] user = 114620 Local 188/567
[2024-12-02 19:20:35.690665] user = 114620 Local+ 188/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:20:38.316205] user = 114620 MPDA- 188/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 72333 0/50 current_auc = 0.5
User 72333 AUC after training: 0.5
User 72333 does not improve AUC. Reverting changes.
Training on augumented user 61510 1/50 current_auc = 0.5
User 61510 AUC after training: 0.5
User 61510 does not improve AUC. Reverting changes.
Training on augumented user 80345 2/50 current_auc = 0.5
User 80345 AUC after training: 0.5
User 80345 does not improve AUC. Reverting changes.
Training on augumented user 9868 3/50 current_auc = 0.5
User 9868 AUC after training: 0.5
User 9868 does not improve AUC. Reverting changes.
Training on augumented user 88507 4/50 current_auc = 0.5
User 88507 AUC after training: 0.5
User 88507 does not improve AUC. Reverting changes.
Training on augumented user 54198 5/50 current_auc = 0.5
User 54198 AUC after training: 0.5
User 54198 does not improve AUC. Reverting changes.
Training on augumented user 21067 6/50 current_auc = 0.5
User 21067 AUC after training: 0.5
User 21067 does not improve AUC. Reverting changes.
Training on augumented user 29076 7/50 current_auc = 0.5
User 29076 AUC after training: 0.5
User 29076 does not improve AUC. Reverting changes.
Training on augumented user 8729 8/50 current_auc = 0.5
User 8729 AUC after training: 0.5
User 8729 does not improve AUC. Reverting changes.
Training on augumented user 73860 9/50 current_auc = 0.5
User 73860 AUC after training: 0.5
User 73860 does not improve AUC. Reverting changes.
Training on augumented user 58316 10/50 current_auc = 0.5
User 58316 AUC after training: 0.5
User 58316 does not improve AUC. Reverting changes.
Training on augumented user 57795 11/50 current_auc = 0.5
User 57795 AUC after training: 0.4666666666666667
User 57795 does not improve AUC. Reverting changes.
Training on augumented user 27236 12/50 current_auc = 0.5
User 27236 AUC after training: 0.5
User 27236 does not improve AUC. Reverting changes.
Training on augumented user 25485 13/50 current_auc = 0.5
User 25485 AUC after training: 0.4666666666666667
User 25485 does not improve AUC. Reverting changes.
Training on augumented user 122732 14/50 current_auc = 0.5
User 122732 AUC after training: 0.5
User 122732 does not improve AUC. Reverting changes.
Training on augumented user 63934 15/50 current_auc = 0.5
User 63934 AUC after training: 0.5
User 63934 does not improve AUC. Reverting changes.
Training on augumented user 70146 16/50 current_auc = 0.5
User 70146 AUC after training: 0.5
User 70146 does not improve AUC. Reverting changes.
Training on augumented user 8730 17/50 current_auc = 0.5
User 8730 AUC after training: 0.5
User 8730 does not improve AUC. Reverting changes.
Training on augumented user 75169 18/50 current_auc = 0.5
User 75169 AUC after training: 0.5
User 75169 does not improve AUC. Reverting changes.
Training on augumented user 42736 19/50 current_auc = 0.5
User 42736 AUC after training: 0.5
User 42736 does not improve AUC. Reverting changes.
Training on augumented user 69633 20/50 current_auc = 0.5
User 69633 AUC after training: 0.5
User 69633 does not improve AUC. Reverting changes.
Training on augumented user 115216 21/50 current_auc = 0.5
User 115216 AUC after training: 0.5
User 115216 does not improve AUC. Reverting changes.
Training on augumented user 136618 22/50 current_auc = 0.5
User 136618 AUC after training: 0.5
User 136618 does not improve AUC. Reverting changes.
Training on augumented user 130736 23/50 current_auc = 0.5
User 130736 AUC after training: 0.5
User 130736 does not improve AUC. Reverting changes.
Training on augumented user 65968 24/50 current_auc = 0.5
User 65968 AUC after training: 0.5
User 65968 does not improve AUC. Reverting changes.
Training on augumented user 136906 25/50 current_auc = 0.5
User 136906 AUC after training: 0.5
User 136906 does not improve AUC. Reverting changes.
Training on augumented user 620 26/50 current_auc = 0.5
User 620 AUC after training: 0.5
User 620 does not improve AUC. Reverting changes.
Training on augumented user 114391 27/50 current_auc = 0.5
User 114391 AUC after training: 0.5
User 114391 does not improve AUC. Reverting changes.
Training on augumented user 12997 28/50 current_auc = 0.5
User 12997 AUC after training: 0.5
User 12997 does not improve AUC. Reverting changes.
Training on augumented user 1989 29/50 current_auc = 0.5
User 1989 AUC after training: 0.5
User 1989 does not improve AUC. Reverting changes.
Training on augumented user 37925 30/50 current_auc = 0.5
User 37925 AUC after training: 0.4666666666666667
User 37925 does not improve AUC. Reverting changes.
Training on augumented user 18037 31/50 current_auc = 0.5
User 18037 AUC after training: 0.5
User 18037 does not improve AUC. Reverting changes.
Training on augumented user 35714 32/50 current_auc = 0.5
User 35714 AUC after training: 0.5
User 35714 does not improve AUC. Reverting changes.
Training on augumented user 4634 33/50 current_auc = 0.5
User 4634 AUC after training: 0.5
User 4634 does not improve AUC. Reverting changes.
Training on augumented user 50969 34/50 current_auc = 0.5
User 50969 AUC after training: 0.5
User 50969 does not improve AUC. Reverting changes.
Training on augumented user 98473 35/50 current_auc = 0.5
User 98473 AUC after training: 0.5
User 98473 does not improve AUC. Reverting changes.
Training on augumented user 76570 36/50 current_auc = 0.5
User 76570 AUC after training: 0.5
User 76570 does not improve AUC. Reverting changes.
Training on augumented user 58517 37/50 current_auc = 0.5
User 58517 AUC after training: 0.5
User 58517 does not improve AUC. Reverting changes.
Training on augumented user 128120 38/50 current_auc = 0.5
User 128120 AUC after training: 0.5
User 128120 does not improve AUC. Reverting changes.
Training on augumented user 88099 39/50 current_auc = 0.5
User 88099 AUC after training: 0.5
User 88099 does not improve AUC. Reverting changes.
Training on augumented user 1149 40/50 current_auc = 0.5
User 1149 AUC after training: 0.5
User 1149 does not improve AUC. Reverting changes.
Training on augumented user 107232 41/50 current_auc = 0.5
User 107232 AUC after training: 0.5
User 107232 does not improve AUC. Reverting changes.
Training on augumented user 15031 42/50 current_auc = 0.5
User 15031 AUC after training: 0.5
User 15031 does not improve AUC. Reverting changes.
Training on augumented user 122592 43/50 current_auc = 0.5
User 122592 AUC after training: 0.5
User 122592 does not improve AUC. Reverting changes.
Training on augumented user 101581 44/50 current_auc = 0.5
User 101581 AUC after training: 0.4666666666666667
User 101581 does not improve AUC. Reverting changes.
Training on augumented user 123752 45/50 current_auc = 0.5
User 123752 AUC after training: 0.5
User 123752 does not improve AUC. Reverting changes.
Training on augumented user 125047 46/50 current_auc = 0.5
User 125047 AUC after training: 0.5
User 125047 does not improve AUC. Reverting changes.
Training on augumented user 36925 47/50 current_auc = 0.5
User 36925 AUC after training: 0.5
User 36925 does not improve AUC. Reverting changes.
Training on augumented user 110582 48/50 current_auc = 0.5
User 110582 AUC after training: 0.5
User 110582 does not improve AUC. Reverting changes.
Training on augumented user 20644 49/50 current_auc = 0.5
User 20644 AUC after training: 0.5
User 20644 does not improve AUC. Reverting changes.
[2024-12-02 19:21:06.696090] start test user 114624 189/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:21:07.176432] start test user 114624 189/567 recall augumented users by random, augumented_users = [22107, 386, 56406, 41149, 49592, 118887, 17193, 64261, 20403, 51348, 9669, 19938, 138278, 126734, 39178, 31048, 22101, 57843, 133795, 47541, 113077, 93185, 106293, 58203, 28903, 27503, 88433, 136738, 96672, 51109, 28780, 243, 128008, 2148, 106532, 69782, 130374, 40413, 131061, 29924, 130717, 7135, 79955, 18015, 31816, 38401, 114902, 41494, 43513, 96853]
[2024-12-02 19:21:07.195804] user = 114624 Cloud 189/567
[2024-12-02 19:21:07.245516] user = 114624 Local 189/567
[2024-12-02 19:21:07.480937] user = 114624 Local+ 189/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:21:10.105551] user = 114624 MPDA- 189/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6463675213675214
Training on augumented user 22107 0/50 current_auc = 0.6463675213675214
User 22107 AUC after training: 0.6466305062458908
User 22107 improves AUC. Keeping the model.
Training on augumented user 386 1/50 current_auc = 0.6466305062458908
User 386 AUC after training: 0.6490959894806049
User 386 improves AUC. Keeping the model.
Training on augumented user 56406 2/50 current_auc = 0.6490959894806049
User 56406 AUC after training: 0.6501972386587771
User 56406 improves AUC. Keeping the model.
Training on augumented user 41149 3/50 current_auc = 0.6501972386587771
User 41149 AUC after training: 0.6494082840236687
User 41149 does not improve AUC. Reverting changes.
Training on augumented user 49592 4/50 current_auc = 0.6501972386587771
User 49592 AUC after training: 0.6503287310979619
User 49592 improves AUC. Keeping the model.
Training on augumented user 118887 5/50 current_auc = 0.6503287310979619
User 118887 AUC after training: 0.6469428007889546
User 118887 does not improve AUC. Reverting changes.
Training on augumented user 17193 6/50 current_auc = 0.6503287310979619
User 17193 AUC after training: 0.650328731097962
User 17193 improves AUC. Keeping the model.
Training on augumented user 64261 7/50 current_auc = 0.650328731097962
User 64261 AUC after training: 0.6500493096646943
User 64261 does not improve AUC. Reverting changes.
Training on augumented user 20403 8/50 current_auc = 0.650328731097962
User 20403 AUC after training: 0.6513642340565418
User 20403 improves AUC. Keeping the model.
Training on augumented user 51348 9/50 current_auc = 0.6513642340565418
User 51348 AUC after training: 0.6516600920447074
User 51348 improves AUC. Keeping the model.
Training on augumented user 9669 10/50 current_auc = 0.6516600920447074
User 9669 AUC after training: 0.6515121630506245
User 9669 does not improve AUC. Reverting changes.
Training on augumented user 19938 11/50 current_auc = 0.6516600920447074
User 19938 AUC after training: 0.6527120315581856
User 19938 improves AUC. Keeping the model.
Training on augumented user 138278 12/50 current_auc = 0.6527120315581856
User 138278 AUC after training: 0.6531065088757397
User 138278 improves AUC. Keeping the model.
Training on augumented user 126734 13/50 current_auc = 0.6531065088757397
User 126734 AUC after training: 0.6528763971071664
User 126734 does not improve AUC. Reverting changes.
Training on augumented user 39178 14/50 current_auc = 0.6531065088757397
User 39178 AUC after training: 0.6524819197896121
User 39178 does not improve AUC. Reverting changes.
Training on augumented user 31048 15/50 current_auc = 0.6531065088757397
User 31048 AUC after training: 0.6531886916502301
User 31048 improves AUC. Keeping the model.
Training on augumented user 22101 16/50 current_auc = 0.6531886916502301
User 22101 AUC after training: 0.6542077580539118
User 22101 improves AUC. Keeping the model.
Training on augumented user 57843 17/50 current_auc = 0.6542077580539118
User 57843 AUC after training: 0.6540105193951348
User 57843 does not improve AUC. Reverting changes.
Training on augumented user 133795 18/50 current_auc = 0.6542077580539118
User 133795 AUC after training: 0.6539447731755424
User 133795 does not improve AUC. Reverting changes.
Training on augumented user 47541 19/50 current_auc = 0.6542077580539118
User 47541 AUC after training: 0.6541748849441158
User 47541 does not improve AUC. Reverting changes.
Training on augumented user 113077 20/50 current_auc = 0.6542077580539118
User 113077 AUC after training: 0.6540433925049309
User 113077 does not improve AUC. Reverting changes.
Training on augumented user 93185 21/50 current_auc = 0.6542077580539118
User 93185 AUC after training: 0.653320184089415
User 93185 does not improve AUC. Reverting changes.
Training on augumented user 106293 22/50 current_auc = 0.6542077580539118
User 106293 AUC after training: 0.654043392504931
User 106293 does not improve AUC. Reverting changes.
Training on augumented user 58203 23/50 current_auc = 0.6542077580539118
User 58203 AUC after training: 0.6535502958579883
User 58203 does not improve AUC. Reverting changes.
Training on augumented user 28903 24/50 current_auc = 0.6542077580539118
User 28903 AUC after training: 0.6538625904010519
User 28903 does not improve AUC. Reverting changes.
Training on augumented user 27503 25/50 current_auc = 0.6542077580539118
User 27503 AUC after training: 0.6552103879026956
User 27503 improves AUC. Keeping the model.
Training on augumented user 88433 26/50 current_auc = 0.6552103879026956
User 88433 AUC after training: 0.6551446416831032
User 88433 does not improve AUC. Reverting changes.
Training on augumented user 136738 27/50 current_auc = 0.6552103879026956
User 136738 AUC after training: 0.6552103879026956
User 136738 does not improve AUC. Reverting changes.
Training on augumented user 96672 28/50 current_auc = 0.6552103879026956
User 96672 AUC after training: 0.655095332018409
User 96672 does not improve AUC. Reverting changes.
Training on augumented user 51109 29/50 current_auc = 0.6552103879026956
User 51109 AUC after training: 0.654766600920447
User 51109 does not improve AUC. Reverting changes.
Training on augumented user 28780 30/50 current_auc = 0.6552103879026956
User 28780 AUC after training: 0.6558185404339251
User 28780 improves AUC. Keeping the model.
Training on augumented user 243 31/50 current_auc = 0.6558185404339251
User 243 AUC after training: 0.6557034845496383
User 243 does not improve AUC. Reverting changes.
Training on augumented user 128008 32/50 current_auc = 0.6558185404339251
User 128008 AUC after training: 0.6553747534516765
User 128008 does not improve AUC. Reverting changes.
Training on augumented user 2148 33/50 current_auc = 0.6558185404339251
User 2148 AUC after training: 0.656328073635766
User 2148 improves AUC. Keeping the model.
Training on augumented user 106532 34/50 current_auc = 0.656328073635766
User 106532 AUC after training: 0.6559993425378041
User 106532 does not improve AUC. Reverting changes.
Training on augumented user 69782 35/50 current_auc = 0.656328073635766
User 69782 AUC after training: 0.6555062458908614
User 69782 does not improve AUC. Reverting changes.
Training on augumented user 130374 36/50 current_auc = 0.656328073635766
User 130374 AUC after training: 0.6562787639710717
User 130374 does not improve AUC. Reverting changes.
Training on augumented user 40413 37/50 current_auc = 0.656328073635766
User 40413 AUC after training: 0.6566568047337278
User 40413 improves AUC. Keeping the model.
Training on augumented user 131061 38/50 current_auc = 0.6566568047337278
User 131061 AUC after training: 0.6561801446416831
User 131061 does not improve AUC. Reverting changes.
Training on augumented user 29924 39/50 current_auc = 0.6566568047337278
User 29924 AUC after training: 0.6558349769888232
User 29924 does not improve AUC. Reverting changes.
Training on augumented user 130717 40/50 current_auc = 0.6566568047337278
User 130717 AUC after training: 0.6563773833004602
User 130717 does not improve AUC. Reverting changes.
Training on augumented user 7135 41/50 current_auc = 0.6566568047337278
User 7135 AUC after training: 0.6559993425378041
User 7135 does not improve AUC. Reverting changes.
Training on augumented user 79955 42/50 current_auc = 0.6566568047337278
User 79955 AUC after training: 0.6516600920447075
User 79955 does not improve AUC. Reverting changes.
Training on augumented user 18015 43/50 current_auc = 0.6566568047337278
User 18015 AUC after training: 0.6569362261669955
User 18015 improves AUC. Keeping the model.
Training on augumented user 31816 44/50 current_auc = 0.6569362261669955
User 31816 AUC after training: 0.6571499013806706
User 31816 improves AUC. Keeping the model.
Training on augumented user 38401 45/50 current_auc = 0.6571499013806706
User 38401 AUC after training: 0.6568540433925049
User 38401 does not improve AUC. Reverting changes.
Training on augumented user 114902 46/50 current_auc = 0.6571499013806706
User 114902 AUC after training: 0.6571827744904668
User 114902 improves AUC. Keeping the model.
Training on augumented user 41494 47/50 current_auc = 0.6571827744904668
User 41494 AUC after training: 0.6571334648257725
User 41494 does not improve AUC. Reverting changes.
Training on augumented user 43513 48/50 current_auc = 0.6571827744904668
User 43513 AUC after training: 0.6557034845496384
User 43513 does not improve AUC. Reverting changes.
Training on augumented user 96853 49/50 current_auc = 0.6571827744904668
User 96853 AUC after training: 0.6574293228139382
User 96853 improves AUC. Keeping the model.
[2024-12-02 19:21:41.152911] start test user 114645 190/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:21:41.996513] start test user 114645 190/567 recall augumented users by random, augumented_users = [48933, 108255, 23547, 1167, 108271, 91703, 47814, 96173, 102247, 7574, 14004, 65534, 59871, 91878, 87595, 69101, 4030, 20422, 65512, 14612, 135911, 1144, 130632, 9993, 109932, 30166, 110072, 132445, 1137, 21349, 62831, 128858, 103956, 112557, 18428, 31199, 134317, 42525, 117254, 15787, 42845, 11167, 64293, 81240, 134646, 72770, 55058, 123887, 108929, 85556]
[2024-12-02 19:21:42.019066] user = 114645 Cloud 190/567
[2024-12-02 19:21:42.042803] user = 114645 Local 190/567
[2024-12-02 19:21:42.201342] user = 114645 Local+ 190/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:21:45.038372] user = 114645 MPDA- 190/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6094924812030076
Training on augumented user 48933 0/50 current_auc = 0.6094924812030076
User 48933 AUC after training: 0.6094924812030076
User 48933 does not improve AUC. Reverting changes.
Training on augumented user 108255 1/50 current_auc = 0.6094924812030076
User 108255 AUC after training: 0.6113721804511278
User 108255 improves AUC. Keeping the model.
Training on augumented user 23547 2/50 current_auc = 0.6113721804511278
User 23547 AUC after training: 0.612312030075188
User 23547 improves AUC. Keeping the model.
Training on augumented user 1167 3/50 current_auc = 0.612312030075188
User 1167 AUC after training: 0.6132518796992481
User 1167 improves AUC. Keeping the model.
Training on augumented user 108271 4/50 current_auc = 0.6132518796992481
User 108271 AUC after training: 0.6137218045112782
User 108271 improves AUC. Keeping the model.
Training on augumented user 91703 5/50 current_auc = 0.6137218045112782
User 91703 AUC after training: 0.6137218045112782
User 91703 does not improve AUC. Reverting changes.
Training on augumented user 47814 6/50 current_auc = 0.6137218045112782
User 47814 AUC after training: 0.6141917293233083
User 47814 improves AUC. Keeping the model.
Training on augumented user 96173 7/50 current_auc = 0.6141917293233083
User 96173 AUC after training: 0.6132518796992481
User 96173 does not improve AUC. Reverting changes.
Training on augumented user 102247 8/50 current_auc = 0.6141917293233083
User 102247 AUC after training: 0.612781954887218
User 102247 does not improve AUC. Reverting changes.
Training on augumented user 7574 9/50 current_auc = 0.6141917293233083
User 7574 AUC after training: 0.6132518796992481
User 7574 does not improve AUC. Reverting changes.
Training on augumented user 14004 10/50 current_auc = 0.6141917293233083
User 14004 AUC after training: 0.6141917293233083
User 14004 does not improve AUC. Reverting changes.
Training on augumented user 65534 11/50 current_auc = 0.6141917293233083
User 65534 AUC after training: 0.6151315789473685
User 65534 improves AUC. Keeping the model.
Training on augumented user 59871 12/50 current_auc = 0.6151315789473685
User 59871 AUC after training: 0.612312030075188
User 59871 does not improve AUC. Reverting changes.
Training on augumented user 91878 13/50 current_auc = 0.6151315789473685
User 91878 AUC after training: 0.6141917293233083
User 91878 does not improve AUC. Reverting changes.
Training on augumented user 87595 14/50 current_auc = 0.6151315789473685
User 87595 AUC after training: 0.6137218045112782
User 87595 does not improve AUC. Reverting changes.
Training on augumented user 69101 15/50 current_auc = 0.6151315789473685
User 69101 AUC after training: 0.6156015037593985
User 69101 improves AUC. Keeping the model.
Training on augumented user 4030 16/50 current_auc = 0.6156015037593985
User 4030 AUC after training: 0.6151315789473684
User 4030 does not improve AUC. Reverting changes.
Training on augumented user 20422 17/50 current_auc = 0.6156015037593985
User 20422 AUC after training: 0.6141917293233083
User 20422 does not improve AUC. Reverting changes.
Training on augumented user 65512 18/50 current_auc = 0.6156015037593985
User 65512 AUC after training: 0.6151315789473685
User 65512 does not improve AUC. Reverting changes.
Training on augumented user 14612 19/50 current_auc = 0.6156015037593985
User 14612 AUC after training: 0.6156015037593985
User 14612 does not improve AUC. Reverting changes.
Training on augumented user 135911 20/50 current_auc = 0.6156015037593985
User 135911 AUC after training: 0.6146616541353384
User 135911 does not improve AUC. Reverting changes.
Training on augumented user 1144 21/50 current_auc = 0.6156015037593985
User 1144 AUC after training: 0.6156015037593985
User 1144 does not improve AUC. Reverting changes.
Training on augumented user 130632 22/50 current_auc = 0.6156015037593985
User 130632 AUC after training: 0.6151315789473685
User 130632 does not improve AUC. Reverting changes.
Training on augumented user 9993 23/50 current_auc = 0.6156015037593985
User 9993 AUC after training: 0.6170112781954887
User 9993 improves AUC. Keeping the model.
Training on augumented user 109932 24/50 current_auc = 0.6170112781954887
User 109932 AUC after training: 0.6151315789473684
User 109932 does not improve AUC. Reverting changes.
Training on augumented user 30166 25/50 current_auc = 0.6170112781954887
User 30166 AUC after training: 0.612781954887218
User 30166 does not improve AUC. Reverting changes.
Training on augumented user 110072 26/50 current_auc = 0.6170112781954887
User 110072 AUC after training: 0.6109022556390977
User 110072 does not improve AUC. Reverting changes.
Training on augumented user 132445 27/50 current_auc = 0.6170112781954887
User 132445 AUC after training: 0.6160714285714286
User 132445 does not improve AUC. Reverting changes.
Training on augumented user 1137 28/50 current_auc = 0.6170112781954887
User 1137 AUC after training: 0.6170112781954887
User 1137 does not improve AUC. Reverting changes.
Training on augumented user 21349 29/50 current_auc = 0.6170112781954887
User 21349 AUC after training: 0.6071428571428572
User 21349 does not improve AUC. Reverting changes.
Training on augumented user 62831 30/50 current_auc = 0.6170112781954887
User 62831 AUC after training: 0.6170112781954887
User 62831 does not improve AUC. Reverting changes.
Training on augumented user 128858 31/50 current_auc = 0.6170112781954887
User 128858 AUC after training: 0.6127819548872181
User 128858 does not improve AUC. Reverting changes.
Training on augumented user 103956 32/50 current_auc = 0.6170112781954887
User 103956 AUC after training: 0.6170112781954887
User 103956 does not improve AUC. Reverting changes.
Training on augumented user 112557 33/50 current_auc = 0.6170112781954887
User 112557 AUC after training: 0.6141917293233082
User 112557 does not improve AUC. Reverting changes.
Training on augumented user 18428 34/50 current_auc = 0.6170112781954887
User 18428 AUC after training: 0.6170112781954887
User 18428 does not improve AUC. Reverting changes.
Training on augumented user 31199 35/50 current_auc = 0.6170112781954887
User 31199 AUC after training: 0.6132518796992481
User 31199 does not improve AUC. Reverting changes.
Training on augumented user 134317 36/50 current_auc = 0.6170112781954887
User 134317 AUC after training: 0.6080827067669173
User 134317 does not improve AUC. Reverting changes.
Training on augumented user 42525 37/50 current_auc = 0.6170112781954887
User 42525 AUC after training: 0.6170112781954887
User 42525 does not improve AUC. Reverting changes.
Training on augumented user 117254 38/50 current_auc = 0.6170112781954887
User 117254 AUC after training: 0.6174812030075187
User 117254 improves AUC. Keeping the model.
Training on augumented user 15787 39/50 current_auc = 0.6174812030075187
User 15787 AUC after training: 0.6174812030075187
User 15787 does not improve AUC. Reverting changes.
Training on augumented user 42845 40/50 current_auc = 0.6174812030075187
User 42845 AUC after training: 0.6132518796992481
User 42845 does not improve AUC. Reverting changes.
Training on augumented user 11167 41/50 current_auc = 0.6174812030075187
User 11167 AUC after training: 0.6132518796992481
User 11167 does not improve AUC. Reverting changes.
Training on augumented user 64293 42/50 current_auc = 0.6174812030075187
User 64293 AUC after training: 0.6146616541353384
User 64293 does not improve AUC. Reverting changes.
Training on augumented user 81240 43/50 current_auc = 0.6174812030075187
User 81240 AUC after training: 0.6151315789473684
User 81240 does not improve AUC. Reverting changes.
Training on augumented user 134646 44/50 current_auc = 0.6174812030075187
User 134646 AUC after training: 0.6170112781954887
User 134646 does not improve AUC. Reverting changes.
Training on augumented user 72770 45/50 current_auc = 0.6174812030075187
User 72770 AUC after training: 0.612781954887218
User 72770 does not improve AUC. Reverting changes.
Training on augumented user 55058 46/50 current_auc = 0.6174812030075187
User 55058 AUC after training: 0.6141917293233083
User 55058 does not improve AUC. Reverting changes.
Training on augumented user 123887 47/50 current_auc = 0.6174812030075187
User 123887 AUC after training: 0.6165413533834587
User 123887 does not improve AUC. Reverting changes.
Training on augumented user 108929 48/50 current_auc = 0.6174812030075187
User 108929 AUC after training: 0.612781954887218
User 108929 does not improve AUC. Reverting changes.
Training on augumented user 85556 49/50 current_auc = 0.6174812030075187
User 85556 AUC after training: 0.6118421052631579
User 85556 does not improve AUC. Reverting changes.
[2024-12-02 19:22:12.818898] start test user 114653 191/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:22:13.302826] start test user 114653 191/567 recall augumented users by random, augumented_users = [110458, 24291, 126877, 42043, 62542, 32696, 26755, 121481, 71772, 42063, 20902, 95612, 15803, 99850, 79242, 35125, 15673, 132955, 78295, 73308, 57210, 56340, 135280, 69756, 68886, 48430, 109014, 124537, 80917, 56205, 62159, 67241, 58684, 101079, 133914, 121968, 89438, 77087, 114009, 116174, 108699, 12138, 56235, 46025, 75879, 5594, 18986, 90011, 77589, 24723]
[2024-12-02 19:22:13.318014] user = 114653 Cloud 191/567
[2024-12-02 19:22:13.328356] user = 114653 Local 191/567
[2024-12-02 19:22:13.347794] user = 114653 Local+ 191/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:22:15.270462] user = 114653 MPDA- 191/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5625
Training on augumented user 110458 0/50 current_auc = 0.5625
User 110458 AUC after training: 0.5714285714285714
User 110458 improves AUC. Keeping the model.
Training on augumented user 24291 1/50 current_auc = 0.5714285714285714
User 24291 AUC after training: 0.5625
User 24291 does not improve AUC. Reverting changes.
Training on augumented user 126877 2/50 current_auc = 0.5714285714285714
User 126877 AUC after training: 0.5625
User 126877 does not improve AUC. Reverting changes.
Training on augumented user 42043 3/50 current_auc = 0.5714285714285714
User 42043 AUC after training: 0.5714285714285714
User 42043 does not improve AUC. Reverting changes.
Training on augumented user 62542 4/50 current_auc = 0.5714285714285714
User 62542 AUC after training: 0.5714285714285714
User 62542 does not improve AUC. Reverting changes.
Training on augumented user 32696 5/50 current_auc = 0.5714285714285714
User 32696 AUC after training: 0.5535714285714286
User 32696 does not improve AUC. Reverting changes.
Training on augumented user 26755 6/50 current_auc = 0.5714285714285714
User 26755 AUC after training: 0.5625
User 26755 does not improve AUC. Reverting changes.
Training on augumented user 121481 7/50 current_auc = 0.5714285714285714
User 121481 AUC after training: 0.5714285714285714
User 121481 does not improve AUC. Reverting changes.
Training on augumented user 71772 8/50 current_auc = 0.5714285714285714
User 71772 AUC after training: 0.5714285714285714
User 71772 does not improve AUC. Reverting changes.
Training on augumented user 42063 9/50 current_auc = 0.5714285714285714
User 42063 AUC after training: 0.5714285714285714
User 42063 does not improve AUC. Reverting changes.
Training on augumented user 20902 10/50 current_auc = 0.5714285714285714
User 20902 AUC after training: 0.5714285714285714
User 20902 does not improve AUC. Reverting changes.
Training on augumented user 95612 11/50 current_auc = 0.5714285714285714
User 95612 AUC after training: 0.5714285714285714
User 95612 does not improve AUC. Reverting changes.
Training on augumented user 15803 12/50 current_auc = 0.5714285714285714
User 15803 AUC after training: 0.5982142857142857
User 15803 improves AUC. Keeping the model.
Training on augumented user 99850 13/50 current_auc = 0.5982142857142857
User 99850 AUC after training: 0.5982142857142857
User 99850 does not improve AUC. Reverting changes.
Training on augumented user 79242 14/50 current_auc = 0.5982142857142857
User 79242 AUC after training: 0.6071428571428572
User 79242 improves AUC. Keeping the model.
Training on augumented user 35125 15/50 current_auc = 0.6071428571428572
User 35125 AUC after training: 0.5982142857142858
User 35125 does not improve AUC. Reverting changes.
Training on augumented user 15673 16/50 current_auc = 0.6071428571428572
User 15673 AUC after training: 0.5892857142857143
User 15673 does not improve AUC. Reverting changes.
Training on augumented user 132955 17/50 current_auc = 0.6071428571428572
User 132955 AUC after training: 0.625
User 132955 improves AUC. Keeping the model.
Training on augumented user 78295 18/50 current_auc = 0.625
User 78295 AUC after training: 0.6071428571428572
User 78295 does not improve AUC. Reverting changes.
Training on augumented user 73308 19/50 current_auc = 0.625
User 73308 AUC after training: 0.6071428571428572
User 73308 does not improve AUC. Reverting changes.
Training on augumented user 57210 20/50 current_auc = 0.625
User 57210 AUC after training: 0.6071428571428572
User 57210 does not improve AUC. Reverting changes.
Training on augumented user 56340 21/50 current_auc = 0.625
User 56340 AUC after training: 0.5982142857142857
User 56340 does not improve AUC. Reverting changes.
Training on augumented user 135280 22/50 current_auc = 0.625
User 135280 AUC after training: 0.625
User 135280 does not improve AUC. Reverting changes.
Training on augumented user 69756 23/50 current_auc = 0.625
User 69756 AUC after training: 0.625
User 69756 does not improve AUC. Reverting changes.
Training on augumented user 68886 24/50 current_auc = 0.625
User 68886 AUC after training: 0.6160714285714286
User 68886 does not improve AUC. Reverting changes.
Training on augumented user 48430 25/50 current_auc = 0.625
User 48430 AUC after training: 0.625
User 48430 does not improve AUC. Reverting changes.
Training on augumented user 109014 26/50 current_auc = 0.625
User 109014 AUC after training: 0.5982142857142858
User 109014 does not improve AUC. Reverting changes.
Training on augumented user 124537 27/50 current_auc = 0.625
User 124537 AUC after training: 0.625
User 124537 does not improve AUC. Reverting changes.
Training on augumented user 80917 28/50 current_auc = 0.625
User 80917 AUC after training: 0.6160714285714286
User 80917 does not improve AUC. Reverting changes.
Training on augumented user 56205 29/50 current_auc = 0.625
User 56205 AUC after training: 0.6071428571428572
User 56205 does not improve AUC. Reverting changes.
Training on augumented user 62159 30/50 current_auc = 0.625
User 62159 AUC after training: 0.5982142857142857
User 62159 does not improve AUC. Reverting changes.
Training on augumented user 67241 31/50 current_auc = 0.625
User 67241 AUC after training: 0.6160714285714286
User 67241 does not improve AUC. Reverting changes.
Training on augumented user 58684 32/50 current_auc = 0.625
User 58684 AUC after training: 0.6160714285714286
User 58684 does not improve AUC. Reverting changes.
Training on augumented user 101079 33/50 current_auc = 0.625
User 101079 AUC after training: 0.6160714285714286
User 101079 does not improve AUC. Reverting changes.
Training on augumented user 133914 34/50 current_auc = 0.625
User 133914 AUC after training: 0.5982142857142858
User 133914 does not improve AUC. Reverting changes.
Training on augumented user 121968 35/50 current_auc = 0.625
User 121968 AUC after training: 0.5982142857142857
User 121968 does not improve AUC. Reverting changes.
Training on augumented user 89438 36/50 current_auc = 0.625
User 89438 AUC after training: 0.6071428571428572
User 89438 does not improve AUC. Reverting changes.
Training on augumented user 77087 37/50 current_auc = 0.625
User 77087 AUC after training: 0.6160714285714286
User 77087 does not improve AUC. Reverting changes.
Training on augumented user 114009 38/50 current_auc = 0.625
User 114009 AUC after training: 0.5714285714285714
User 114009 does not improve AUC. Reverting changes.
Training on augumented user 116174 39/50 current_auc = 0.625
User 116174 AUC after training: 0.6160714285714286
User 116174 does not improve AUC. Reverting changes.
Training on augumented user 108699 40/50 current_auc = 0.625
User 108699 AUC after training: 0.6160714285714286
User 108699 does not improve AUC. Reverting changes.
Training on augumented user 12138 41/50 current_auc = 0.625
User 12138 AUC after training: 0.6160714285714286
User 12138 does not improve AUC. Reverting changes.
Training on augumented user 56235 42/50 current_auc = 0.625
User 56235 AUC after training: 0.5892857142857143
User 56235 does not improve AUC. Reverting changes.
Training on augumented user 46025 43/50 current_auc = 0.625
User 46025 AUC after training: 0.6071428571428572
User 46025 does not improve AUC. Reverting changes.
Training on augumented user 75879 44/50 current_auc = 0.625
User 75879 AUC after training: 0.5982142857142858
User 75879 does not improve AUC. Reverting changes.
Training on augumented user 5594 45/50 current_auc = 0.625
User 5594 AUC after training: 0.5982142857142858
User 5594 does not improve AUC. Reverting changes.
Training on augumented user 18986 46/50 current_auc = 0.625
User 18986 AUC after training: 0.625
User 18986 does not improve AUC. Reverting changes.
Training on augumented user 90011 47/50 current_auc = 0.625
User 90011 AUC after training: 0.5982142857142858
User 90011 does not improve AUC. Reverting changes.
Training on augumented user 77589 48/50 current_auc = 0.625
User 77589 AUC after training: 0.5714285714285714
User 77589 does not improve AUC. Reverting changes.
Training on augumented user 24723 49/50 current_auc = 0.625
User 24723 AUC after training: 0.625
User 24723 does not improve AUC. Reverting changes.
[2024-12-02 19:22:43.898997] start test user 114659 192/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:22:44.741915] start test user 114659 192/567 recall augumented users by random, augumented_users = [110541, 25875, 52375, 37862, 67501, 82375, 128619, 53958, 70649, 71220, 32404, 56681, 76303, 70008, 80025, 92943, 45590, 44704, 90766, 19372, 78546, 69916, 107001, 30628, 15972, 74931, 20481, 24875, 2784, 117982, 90341, 129263, 133031, 88778, 117809, 82251, 1444, 108290, 114326, 21767, 41846, 110288, 129534, 96812, 18955, 97203, 134717, 37128, 33571, 94422]
[2024-12-02 19:22:44.766018] user = 114659 Cloud 192/567
[2024-12-02 19:22:44.877392] user = 114659 Local 192/567
[2024-12-02 19:22:45.205022] user = 114659 Local+ 192/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:22:47.212717] user = 114659 MPDA- 192/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7845345345345346
Training on augumented user 110541 0/50 current_auc = 0.7845345345345346
User 110541 AUC after training: 0.7847490347490348
User 110541 improves AUC. Keeping the model.
Training on augumented user 25875 1/50 current_auc = 0.7847490347490348
User 25875 AUC after training: 0.7846417846417846
User 25875 does not improve AUC. Reverting changes.
Training on augumented user 52375 2/50 current_auc = 0.7847490347490348
User 52375 AUC after training: 0.7846417846417847
User 52375 does not improve AUC. Reverting changes.
Training on augumented user 37862 3/50 current_auc = 0.7847490347490348
User 37862 AUC after training: 0.7846417846417847
User 37862 does not improve AUC. Reverting changes.
Training on augumented user 67501 4/50 current_auc = 0.7847490347490348
User 67501 AUC after training: 0.7846417846417846
User 67501 does not improve AUC. Reverting changes.
Training on augumented user 82375 5/50 current_auc = 0.7847490347490348
User 82375 AUC after training: 0.7850707850707851
User 82375 improves AUC. Keeping the model.
Training on augumented user 128619 6/50 current_auc = 0.7850707850707851
User 128619 AUC after training: 0.7854997854997855
User 128619 improves AUC. Keeping the model.
Training on augumented user 53958 7/50 current_auc = 0.7854997854997855
User 53958 AUC after training: 0.7856070356070356
User 53958 improves AUC. Keeping the model.
Training on augumented user 70649 8/50 current_auc = 0.7856070356070356
User 70649 AUC after training: 0.7853925353925354
User 70649 does not improve AUC. Reverting changes.
Training on augumented user 71220 9/50 current_auc = 0.7856070356070356
User 71220 AUC after training: 0.7857142857142857
User 71220 improves AUC. Keeping the model.
Training on augumented user 32404 10/50 current_auc = 0.7857142857142857
User 32404 AUC after training: 0.7857142857142857
User 32404 does not improve AUC. Reverting changes.
Training on augumented user 56681 11/50 current_auc = 0.7857142857142857
User 56681 AUC after training: 0.7857142857142857
User 56681 does not improve AUC. Reverting changes.
Training on augumented user 76303 12/50 current_auc = 0.7857142857142857
User 76303 AUC after training: 0.7856070356070356
User 76303 does not improve AUC. Reverting changes.
Training on augumented user 70008 13/50 current_auc = 0.7857142857142857
User 70008 AUC after training: 0.7857142857142857
User 70008 does not improve AUC. Reverting changes.
Training on augumented user 80025 14/50 current_auc = 0.7857142857142857
User 80025 AUC after training: 0.7857142857142857
User 80025 does not improve AUC. Reverting changes.
Training on augumented user 92943 15/50 current_auc = 0.7857142857142857
User 92943 AUC after training: 0.7854997854997855
User 92943 does not improve AUC. Reverting changes.
Training on augumented user 45590 16/50 current_auc = 0.7857142857142857
User 45590 AUC after training: 0.786036036036036
User 45590 improves AUC. Keeping the model.
Training on augumented user 44704 17/50 current_auc = 0.786036036036036
User 44704 AUC after training: 0.7857142857142857
User 44704 does not improve AUC. Reverting changes.
Training on augumented user 90766 18/50 current_auc = 0.786036036036036
User 90766 AUC after training: 0.7858215358215358
User 90766 does not improve AUC. Reverting changes.
Training on augumented user 19372 19/50 current_auc = 0.786036036036036
User 19372 AUC after training: 0.7858215358215358
User 19372 does not improve AUC. Reverting changes.
Training on augumented user 78546 20/50 current_auc = 0.786036036036036
User 78546 AUC after training: 0.7856070356070356
User 78546 does not improve AUC. Reverting changes.
Training on augumented user 69916 21/50 current_auc = 0.786036036036036
User 69916 AUC after training: 0.7863577863577863
User 69916 improves AUC. Keeping the model.
Training on augumented user 107001 22/50 current_auc = 0.7863577863577863
User 107001 AUC after training: 0.7863577863577864
User 107001 improves AUC. Keeping the model.
Training on augumented user 30628 23/50 current_auc = 0.7863577863577864
User 30628 AUC after training: 0.7864650364650364
User 30628 improves AUC. Keeping the model.
Training on augumented user 15972 24/50 current_auc = 0.7864650364650364
User 15972 AUC after training: 0.7863577863577863
User 15972 does not improve AUC. Reverting changes.
Training on augumented user 74931 25/50 current_auc = 0.7864650364650364
User 74931 AUC after training: 0.7863577863577863
User 74931 does not improve AUC. Reverting changes.
Training on augumented user 20481 26/50 current_auc = 0.7864650364650364
User 20481 AUC after training: 0.7864650364650364
User 20481 does not improve AUC. Reverting changes.
Training on augumented user 24875 27/50 current_auc = 0.7864650364650364
User 24875 AUC after training: 0.7874302874302875
User 24875 improves AUC. Keeping the model.
Training on augumented user 2784 28/50 current_auc = 0.7874302874302875
User 2784 AUC after training: 0.7876447876447876
User 2784 improves AUC. Keeping the model.
Training on augumented user 117982 29/50 current_auc = 0.7876447876447876
User 117982 AUC after training: 0.787108537108537
User 117982 does not improve AUC. Reverting changes.
Training on augumented user 90341 30/50 current_auc = 0.7876447876447876
User 90341 AUC after training: 0.7873230373230373
User 90341 does not improve AUC. Reverting changes.
Training on augumented user 129263 31/50 current_auc = 0.7876447876447876
User 129263 AUC after training: 0.7876447876447876
User 129263 does not improve AUC. Reverting changes.
Training on augumented user 133031 32/50 current_auc = 0.7876447876447876
User 133031 AUC after training: 0.7877520377520378
User 133031 improves AUC. Keeping the model.
Training on augumented user 88778 33/50 current_auc = 0.7877520377520378
User 88778 AUC after training: 0.7871085371085371
User 88778 does not improve AUC. Reverting changes.
Training on augumented user 117809 34/50 current_auc = 0.7877520377520378
User 117809 AUC after training: 0.7873230373230373
User 117809 does not improve AUC. Reverting changes.
Training on augumented user 82251 35/50 current_auc = 0.7877520377520378
User 82251 AUC after training: 0.7875375375375376
User 82251 does not improve AUC. Reverting changes.
Training on augumented user 1444 36/50 current_auc = 0.7877520377520378
User 1444 AUC after training: 0.7870012870012869
User 1444 does not improve AUC. Reverting changes.
Training on augumented user 108290 37/50 current_auc = 0.7877520377520378
User 108290 AUC after training: 0.787108537108537
User 108290 does not improve AUC. Reverting changes.
Training on augumented user 114326 38/50 current_auc = 0.7877520377520378
User 114326 AUC after training: 0.7872157872157872
User 114326 does not improve AUC. Reverting changes.
Training on augumented user 21767 39/50 current_auc = 0.7877520377520378
User 21767 AUC after training: 0.7874302874302874
User 21767 does not improve AUC. Reverting changes.
Training on augumented user 41846 40/50 current_auc = 0.7877520377520378
User 41846 AUC after training: 0.7872157872157872
User 41846 does not improve AUC. Reverting changes.
Training on augumented user 110288 41/50 current_auc = 0.7877520377520378
User 110288 AUC after training: 0.7875375375375374
User 110288 does not improve AUC. Reverting changes.
Training on augumented user 129534 42/50 current_auc = 0.7877520377520378
User 129534 AUC after training: 0.7872157872157871
User 129534 does not improve AUC. Reverting changes.
Training on augumented user 96812 43/50 current_auc = 0.7877520377520378
User 96812 AUC after training: 0.7873230373230372
User 96812 does not improve AUC. Reverting changes.
Training on augumented user 18955 44/50 current_auc = 0.7877520377520378
User 18955 AUC after training: 0.7878592878592878
User 18955 improves AUC. Keeping the model.
Training on augumented user 97203 45/50 current_auc = 0.7878592878592878
User 97203 AUC after training: 0.7877520377520377
User 97203 does not improve AUC. Reverting changes.
Training on augumented user 134717 46/50 current_auc = 0.7878592878592878
User 134717 AUC after training: 0.7877520377520377
User 134717 does not improve AUC. Reverting changes.
Training on augumented user 37128 47/50 current_auc = 0.7878592878592878
User 37128 AUC after training: 0.7878592878592878
User 37128 does not improve AUC. Reverting changes.
Training on augumented user 33571 48/50 current_auc = 0.7878592878592878
User 33571 AUC after training: 0.7877520377520377
User 33571 does not improve AUC. Reverting changes.
Training on augumented user 94422 49/50 current_auc = 0.7878592878592878
User 94422 AUC after training: 0.7874302874302873
User 94422 does not improve AUC. Reverting changes.
[2024-12-02 19:23:19.125434] start test user 114671 193/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:23:19.920218] start test user 114671 193/567 recall augumented users by random, augumented_users = [74330, 127064, 118129, 106844, 104486, 92131, 87137, 50922, 119817, 78008, 113619, 114404, 103518, 17945, 4621, 87887, 92014, 73302, 115401, 43572, 59361, 61435, 32032, 99102, 51198, 129142, 43014, 43034, 109314, 97408, 74393, 99755, 19880, 133628, 88622, 92762, 40106, 49335, 14544, 80870, 39469, 18210, 54413, 108988, 69687, 127412, 125441, 36358, 12933, 31762]
[2024-12-02 19:23:19.937174] user = 114671 Cloud 193/567
[2024-12-02 19:23:19.959704] user = 114671 Local 193/567
[2024-12-02 19:23:20.170298] user = 114671 Local+ 193/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:23:22.712124] user = 114671 MPDA- 193/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6012075905692927
Training on augumented user 74330 0/50 current_auc = 0.6012075905692927
User 74330 AUC after training: 0.6016388729154687
User 74330 improves AUC. Keeping the model.
Training on augumented user 127064 1/50 current_auc = 0.6016388729154687
User 127064 AUC after training: 0.6016388729154687
User 127064 does not improve AUC. Reverting changes.
Training on augumented user 118129 2/50 current_auc = 0.6016388729154687
User 118129 AUC after training: 0.6016388729154687
User 118129 does not improve AUC. Reverting changes.
Training on augumented user 106844 3/50 current_auc = 0.6016388729154687
User 106844 AUC after training: 0.601710753306498
User 106844 improves AUC. Keeping the model.
Training on augumented user 104486 4/50 current_auc = 0.601710753306498
User 104486 AUC after training: 0.6023576768257619
User 104486 improves AUC. Keeping the model.
Training on augumented user 92131 5/50 current_auc = 0.6023576768257619
User 92131 AUC after training: 0.6023576768257619
User 92131 does not improve AUC. Reverting changes.
Training on augumented user 87137 6/50 current_auc = 0.6023576768257619
User 87137 AUC after training: 0.6020701552616445
User 87137 does not improve AUC. Reverting changes.
Training on augumented user 50922 7/50 current_auc = 0.6023576768257619
User 50922 AUC after training: 0.6026451983898793
User 50922 improves AUC. Keeping the model.
Training on augumented user 119817 8/50 current_auc = 0.6026451983898793
User 119817 AUC after training: 0.6022139160437032
User 119817 does not improve AUC. Reverting changes.
Training on augumented user 78008 9/50 current_auc = 0.6026451983898793
User 78008 AUC after training: 0.6020701552616446
User 78008 does not improve AUC. Reverting changes.
Training on augumented user 113619 10/50 current_auc = 0.6026451983898793
User 113619 AUC after training: 0.6022139160437032
User 113619 does not improve AUC. Reverting changes.
Training on augumented user 114404 11/50 current_auc = 0.6026451983898793
User 114404 AUC after training: 0.602788959171938
User 114404 improves AUC. Keeping the model.
Training on augumented user 103518 12/50 current_auc = 0.602788959171938
User 103518 AUC after training: 0.6030764807360552
User 103518 improves AUC. Keeping the model.
Training on augumented user 17945 13/50 current_auc = 0.6030764807360552
User 17945 AUC after training: 0.6018545140885567
User 17945 does not improve AUC. Reverting changes.
Training on augumented user 4621 14/50 current_auc = 0.6030764807360552
User 4621 AUC after training: 0.6030764807360552
User 4621 does not improve AUC. Reverting changes.
Training on augumented user 87887 15/50 current_auc = 0.6030764807360552
User 87887 AUC after training: 0.6037952846463486
User 87887 improves AUC. Keeping the model.
Training on augumented user 92014 16/50 current_auc = 0.6037952846463486
User 92014 AUC after training: 0.6036515238642899
User 92014 does not improve AUC. Reverting changes.
Training on augumented user 73302 17/50 current_auc = 0.6037952846463486
User 73302 AUC after training: 0.6042265669925244
User 73302 improves AUC. Keeping the model.
Training on augumented user 115401 18/50 current_auc = 0.6042265669925244
User 115401 AUC after training: 0.6042265669925244
User 115401 does not improve AUC. Reverting changes.
Training on augumented user 43572 19/50 current_auc = 0.6042265669925244
User 43572 AUC after training: 0.6025014376078206
User 43572 does not improve AUC. Reverting changes.
Training on augumented user 59361 20/50 current_auc = 0.6042265669925244
User 59361 AUC after training: 0.6037952846463485
User 59361 does not improve AUC. Reverting changes.
Training on augumented user 61435 21/50 current_auc = 0.6042265669925244
User 61435 AUC after training: 0.6026451983898792
User 61435 does not improve AUC. Reverting changes.
Training on augumented user 32032 22/50 current_auc = 0.6042265669925244
User 32032 AUC after training: 0.6036515238642898
User 32032 does not improve AUC. Reverting changes.
Training on augumented user 99102 23/50 current_auc = 0.6042265669925244
User 99102 AUC after training: 0.6037952846463486
User 99102 does not improve AUC. Reverting changes.
Training on augumented user 51198 24/50 current_auc = 0.6042265669925244
User 51198 AUC after training: 0.6032202415181138
User 51198 does not improve AUC. Reverting changes.
Training on augumented user 129142 25/50 current_auc = 0.6042265669925244
User 129142 AUC after training: 0.603939045428407
User 129142 does not improve AUC. Reverting changes.
Training on augumented user 43014 26/50 current_auc = 0.6042265669925244
User 43014 AUC after training: 0.6035796434732605
User 43014 does not improve AUC. Reverting changes.
Training on augumented user 43034 27/50 current_auc = 0.6042265669925244
User 43034 AUC after training: 0.6036515238642899
User 43034 does not improve AUC. Reverting changes.
Training on augumented user 109314 28/50 current_auc = 0.6042265669925244
User 109314 AUC after training: 0.6037952846463484
User 109314 does not improve AUC. Reverting changes.
Training on augumented user 97408 29/50 current_auc = 0.6042265669925244
User 97408 AUC after training: 0.6039390454284073
User 97408 does not improve AUC. Reverting changes.
Training on augumented user 74393 30/50 current_auc = 0.6042265669925244
User 74393 AUC after training: 0.6033640023001725
User 74393 does not improve AUC. Reverting changes.
Training on augumented user 99755 31/50 current_auc = 0.6042265669925244
User 99755 AUC after training: 0.6035796434732605
User 99755 does not improve AUC. Reverting changes.
Training on augumented user 19880 32/50 current_auc = 0.6042265669925244
User 19880 AUC after training: 0.6029327199539967
User 19880 does not improve AUC. Reverting changes.
Training on augumented user 133628 33/50 current_auc = 0.6042265669925244
User 133628 AUC after training: 0.6037234042553191
User 133628 does not improve AUC. Reverting changes.
Training on augumented user 88622 34/50 current_auc = 0.6042265669925244
User 88622 AUC after training: 0.6035796434732605
User 88622 does not improve AUC. Reverting changes.
Training on augumented user 92762 35/50 current_auc = 0.6042265669925244
User 92762 AUC after training: 0.6035077630822312
User 92762 does not improve AUC. Reverting changes.
Training on augumented user 40106 36/50 current_auc = 0.6042265669925244
User 40106 AUC after training: 0.6037234042553191
User 40106 does not improve AUC. Reverting changes.
Training on augumented user 49335 37/50 current_auc = 0.6042265669925244
User 49335 AUC after training: 0.6042265669925244
User 49335 does not improve AUC. Reverting changes.
Training on augumented user 14544 38/50 current_auc = 0.6042265669925244
User 14544 AUC after training: 0.6040109258194365
User 14544 does not improve AUC. Reverting changes.
Training on augumented user 80870 39/50 current_auc = 0.6042265669925244
User 80870 AUC after training: 0.6029327199539966
User 80870 does not improve AUC. Reverting changes.
Training on augumented user 39469 40/50 current_auc = 0.6042265669925244
User 39469 AUC after training: 0.6042265669925244
User 39469 does not improve AUC. Reverting changes.
Training on augumented user 18210 41/50 current_auc = 0.6042265669925244
User 18210 AUC after training: 0.6037952846463486
User 18210 does not improve AUC. Reverting changes.
Training on augumented user 54413 42/50 current_auc = 0.6042265669925244
User 54413 AUC after training: 0.6045140885566418
User 54413 improves AUC. Keeping the model.
Training on augumented user 108988 43/50 current_auc = 0.6045140885566418
User 108988 AUC after training: 0.6039390454284072
User 108988 does not improve AUC. Reverting changes.
Training on augumented user 69687 44/50 current_auc = 0.6045140885566418
User 69687 AUC after training: 0.6036515238642898
User 69687 does not improve AUC. Reverting changes.
Training on augumented user 127412 45/50 current_auc = 0.6045140885566418
User 127412 AUC after training: 0.6042265669925244
User 127412 does not improve AUC. Reverting changes.
Training on augumented user 125441 46/50 current_auc = 0.6045140885566418
User 125441 AUC after training: 0.6039390454284072
User 125441 does not improve AUC. Reverting changes.
Training on augumented user 36358 47/50 current_auc = 0.6045140885566418
User 36358 AUC after training: 0.6031483611270845
User 36358 does not improve AUC. Reverting changes.
Training on augumented user 12933 48/50 current_auc = 0.6045140885566418
User 12933 AUC after training: 0.6043703277745831
User 12933 does not improve AUC. Reverting changes.
Training on augumented user 31762 49/50 current_auc = 0.6045140885566418
User 31762 AUC after training: 0.6036515238642899
User 31762 does not improve AUC. Reverting changes.
[2024-12-02 19:23:53.229000] start test user 114708 194/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:23:53.975219] start test user 114708 194/567 recall augumented users by random, augumented_users = [1657, 87672, 34391, 110033, 126216, 128875, 43084, 105971, 72799, 90294, 57095, 50959, 1504, 90250, 46171, 114801, 23211, 71638, 113995, 76301, 9309, 25597, 62590, 77511, 129621, 125400, 48862, 67630, 23607, 54109, 68833, 107285, 77527, 24931, 17838, 104909, 71513, 103260, 111937, 41597, 26389, 103386, 97191, 74929, 41535, 77388, 30666, 85070, 134658, 58058]
[2024-12-02 19:23:53.990969] user = 114708 Cloud 194/567
[2024-12-02 19:23:54.043231] user = 114708 Local 194/567
[2024-12-02 19:23:54.113617] user = 114708 Local+ 194/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:23:56.522643] user = 114708 MPDA- 194/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7023809523809524
Training on augumented user 1657 0/50 current_auc = 0.7023809523809524
User 1657 AUC after training: 0.7142857142857143
User 1657 improves AUC. Keeping the model.
Training on augumented user 87672 1/50 current_auc = 0.7142857142857143
User 87672 AUC after training: 0.7142857142857143
User 87672 does not improve AUC. Reverting changes.
Training on augumented user 34391 2/50 current_auc = 0.7142857142857143
User 34391 AUC after training: 0.7142857142857143
User 34391 does not improve AUC. Reverting changes.
Training on augumented user 110033 3/50 current_auc = 0.7142857142857143
User 110033 AUC after training: 0.7142857142857143
User 110033 does not improve AUC. Reverting changes.
Training on augumented user 126216 4/50 current_auc = 0.7142857142857143
User 126216 AUC after training: 0.7142857142857143
User 126216 does not improve AUC. Reverting changes.
Training on augumented user 128875 5/50 current_auc = 0.7142857142857143
User 128875 AUC after training: 0.7142857142857143
User 128875 does not improve AUC. Reverting changes.
Training on augumented user 43084 6/50 current_auc = 0.7142857142857143
User 43084 AUC after training: 0.7142857142857143
User 43084 does not improve AUC. Reverting changes.
Training on augumented user 105971 7/50 current_auc = 0.7142857142857143
User 105971 AUC after training: 0.7142857142857143
User 105971 does not improve AUC. Reverting changes.
Training on augumented user 72799 8/50 current_auc = 0.7142857142857143
User 72799 AUC after training: 0.7142857142857143
User 72799 does not improve AUC. Reverting changes.
Training on augumented user 90294 9/50 current_auc = 0.7142857142857143
User 90294 AUC after training: 0.7142857142857143
User 90294 does not improve AUC. Reverting changes.
Training on augumented user 57095 10/50 current_auc = 0.7142857142857143
User 57095 AUC after training: 0.7023809523809524
User 57095 does not improve AUC. Reverting changes.
Training on augumented user 50959 11/50 current_auc = 0.7142857142857143
User 50959 AUC after training: 0.7142857142857143
User 50959 does not improve AUC. Reverting changes.
Training on augumented user 1504 12/50 current_auc = 0.7142857142857143
User 1504 AUC after training: 0.7142857142857143
User 1504 does not improve AUC. Reverting changes.
Training on augumented user 90250 13/50 current_auc = 0.7142857142857143
User 90250 AUC after training: 0.7142857142857143
User 90250 does not improve AUC. Reverting changes.
Training on augumented user 46171 14/50 current_auc = 0.7142857142857143
User 46171 AUC after training: 0.7142857142857143
User 46171 does not improve AUC. Reverting changes.
Training on augumented user 114801 15/50 current_auc = 0.7142857142857143
User 114801 AUC after training: 0.7142857142857143
User 114801 does not improve AUC. Reverting changes.
Training on augumented user 23211 16/50 current_auc = 0.7142857142857143
User 23211 AUC after training: 0.7142857142857143
User 23211 does not improve AUC. Reverting changes.
Training on augumented user 71638 17/50 current_auc = 0.7142857142857143
User 71638 AUC after training: 0.7142857142857143
User 71638 does not improve AUC. Reverting changes.
Training on augumented user 113995 18/50 current_auc = 0.7142857142857143
User 113995 AUC after training: 0.7023809523809524
User 113995 does not improve AUC. Reverting changes.
Training on augumented user 76301 19/50 current_auc = 0.7142857142857143
User 76301 AUC after training: 0.7142857142857143
User 76301 does not improve AUC. Reverting changes.
Training on augumented user 9309 20/50 current_auc = 0.7142857142857143
User 9309 AUC after training: 0.7142857142857143
User 9309 does not improve AUC. Reverting changes.
Training on augumented user 25597 21/50 current_auc = 0.7142857142857143
User 25597 AUC after training: 0.7142857142857143
User 25597 does not improve AUC. Reverting changes.
Training on augumented user 62590 22/50 current_auc = 0.7142857142857143
User 62590 AUC after training: 0.7142857142857143
User 62590 does not improve AUC. Reverting changes.
Training on augumented user 77511 23/50 current_auc = 0.7142857142857143
User 77511 AUC after training: 0.7142857142857143
User 77511 does not improve AUC. Reverting changes.
Training on augumented user 129621 24/50 current_auc = 0.7142857142857143
User 129621 AUC after training: 0.7142857142857143
User 129621 does not improve AUC. Reverting changes.
Training on augumented user 125400 25/50 current_auc = 0.7142857142857143
User 125400 AUC after training: 0.7142857142857143
User 125400 does not improve AUC. Reverting changes.
Training on augumented user 48862 26/50 current_auc = 0.7142857142857143
User 48862 AUC after training: 0.7142857142857143
User 48862 does not improve AUC. Reverting changes.
Training on augumented user 67630 27/50 current_auc = 0.7142857142857143
User 67630 AUC after training: 0.7142857142857143
User 67630 does not improve AUC. Reverting changes.
Training on augumented user 23607 28/50 current_auc = 0.7142857142857143
User 23607 AUC after training: 0.7142857142857143
User 23607 does not improve AUC. Reverting changes.
Training on augumented user 54109 29/50 current_auc = 0.7142857142857143
User 54109 AUC after training: 0.7142857142857143
User 54109 does not improve AUC. Reverting changes.
Training on augumented user 68833 30/50 current_auc = 0.7142857142857143
User 68833 AUC after training: 0.7142857142857143
User 68833 does not improve AUC. Reverting changes.
Training on augumented user 107285 31/50 current_auc = 0.7142857142857143
User 107285 AUC after training: 0.7142857142857143
User 107285 does not improve AUC. Reverting changes.
Training on augumented user 77527 32/50 current_auc = 0.7142857142857143
User 77527 AUC after training: 0.7142857142857143
User 77527 does not improve AUC. Reverting changes.
Training on augumented user 24931 33/50 current_auc = 0.7142857142857143
User 24931 AUC after training: 0.7142857142857143
User 24931 does not improve AUC. Reverting changes.
Training on augumented user 17838 34/50 current_auc = 0.7142857142857143
User 17838 AUC after training: 0.7023809523809524
User 17838 does not improve AUC. Reverting changes.
Training on augumented user 104909 35/50 current_auc = 0.7142857142857143
User 104909 AUC after training: 0.7142857142857143
User 104909 does not improve AUC. Reverting changes.
Training on augumented user 71513 36/50 current_auc = 0.7142857142857143
User 71513 AUC after training: 0.7142857142857143
User 71513 does not improve AUC. Reverting changes.
Training on augumented user 103260 37/50 current_auc = 0.7142857142857143
User 103260 AUC after training: 0.7142857142857143
User 103260 does not improve AUC. Reverting changes.
Training on augumented user 111937 38/50 current_auc = 0.7142857142857143
User 111937 AUC after training: 0.7142857142857143
User 111937 does not improve AUC. Reverting changes.
Training on augumented user 41597 39/50 current_auc = 0.7142857142857143
User 41597 AUC after training: 0.7142857142857143
User 41597 does not improve AUC. Reverting changes.
Training on augumented user 26389 40/50 current_auc = 0.7142857142857143
User 26389 AUC after training: 0.7142857142857143
User 26389 does not improve AUC. Reverting changes.
Training on augumented user 103386 41/50 current_auc = 0.7142857142857143
User 103386 AUC after training: 0.7142857142857143
User 103386 does not improve AUC. Reverting changes.
Training on augumented user 97191 42/50 current_auc = 0.7142857142857143
User 97191 AUC after training: 0.7142857142857143
User 97191 does not improve AUC. Reverting changes.
Training on augumented user 74929 43/50 current_auc = 0.7142857142857143
User 74929 AUC after training: 0.7142857142857143
User 74929 does not improve AUC. Reverting changes.
Training on augumented user 41535 44/50 current_auc = 0.7142857142857143
User 41535 AUC after training: 0.7142857142857143
User 41535 does not improve AUC. Reverting changes.
Training on augumented user 77388 45/50 current_auc = 0.7142857142857143
User 77388 AUC after training: 0.7142857142857143
User 77388 does not improve AUC. Reverting changes.
Training on augumented user 30666 46/50 current_auc = 0.7142857142857143
User 30666 AUC after training: 0.7142857142857143
User 30666 does not improve AUC. Reverting changes.
Training on augumented user 85070 47/50 current_auc = 0.7142857142857143
User 85070 AUC after training: 0.7023809523809524
User 85070 does not improve AUC. Reverting changes.
Training on augumented user 134658 48/50 current_auc = 0.7142857142857143
User 134658 AUC after training: 0.7142857142857143
User 134658 does not improve AUC. Reverting changes.
Training on augumented user 58058 49/50 current_auc = 0.7142857142857143
User 58058 AUC after training: 0.7023809523809524
User 58058 does not improve AUC. Reverting changes.
[2024-12-02 19:24:23.868765] start test user 114716 195/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:24:24.296210] start test user 114716 195/567 recall augumented users by random, augumented_users = [124751, 10562, 61315, 15443, 67492, 74977, 87914, 8726, 67382, 98300, 125121, 108909, 11685, 77873, 24294, 69542, 45433, 137846, 28543, 125197, 21096, 118000, 80631, 50059, 25586, 115805, 123951, 72820, 26183, 129606, 26212, 131150, 64436, 121020, 9503, 132995, 53152, 50144, 36047, 860, 29964, 54988, 68308, 35668, 33916, 124673, 97354, 107621, 21510, 15087]
[2024-12-02 19:24:24.311948] user = 114716 Cloud 195/567
[2024-12-02 19:24:24.322379] user = 114716 Local 195/567
[2024-12-02 19:24:24.362637] user = 114716 Local+ 195/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:24:26.512986] user = 114716 MPDA- 195/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7905308464849354
Training on augumented user 124751 0/50 current_auc = 0.7905308464849354
User 124751 AUC after training: 0.7905308464849354
User 124751 does not improve AUC. Reverting changes.
Training on augumented user 10562 1/50 current_auc = 0.7905308464849354
User 10562 AUC after training: 0.7905308464849354
User 10562 does not improve AUC. Reverting changes.
Training on augumented user 61315 2/50 current_auc = 0.7905308464849354
User 61315 AUC after training: 0.7905308464849354
User 61315 does not improve AUC. Reverting changes.
Training on augumented user 15443 3/50 current_auc = 0.7905308464849354
User 15443 AUC after training: 0.7919655667144907
User 15443 improves AUC. Keeping the model.
Training on augumented user 67492 4/50 current_auc = 0.7919655667144907
User 67492 AUC after training: 0.7905308464849354
User 67492 does not improve AUC. Reverting changes.
Training on augumented user 74977 5/50 current_auc = 0.7919655667144907
User 74977 AUC after training: 0.7919655667144907
User 74977 does not improve AUC. Reverting changes.
Training on augumented user 87914 6/50 current_auc = 0.7919655667144907
User 87914 AUC after training: 0.7890961262553802
User 87914 does not improve AUC. Reverting changes.
Training on augumented user 8726 7/50 current_auc = 0.7919655667144907
User 8726 AUC after training: 0.7919655667144907
User 8726 does not improve AUC. Reverting changes.
Training on augumented user 67382 8/50 current_auc = 0.7919655667144907
User 67382 AUC after training: 0.7919655667144907
User 67382 does not improve AUC. Reverting changes.
Training on augumented user 98300 9/50 current_auc = 0.7919655667144907
User 98300 AUC after training: 0.7919655667144907
User 98300 does not improve AUC. Reverting changes.
Training on augumented user 125121 10/50 current_auc = 0.7919655667144907
User 125121 AUC after training: 0.7919655667144907
User 125121 does not improve AUC. Reverting changes.
Training on augumented user 108909 11/50 current_auc = 0.7919655667144907
User 108909 AUC after training: 0.7912482065997131
User 108909 does not improve AUC. Reverting changes.
Training on augumented user 11685 12/50 current_auc = 0.7919655667144907
User 11685 AUC after training: 0.7905308464849354
User 11685 does not improve AUC. Reverting changes.
Training on augumented user 77873 13/50 current_auc = 0.7919655667144907
User 77873 AUC after training: 0.7919655667144907
User 77873 does not improve AUC. Reverting changes.
Training on augumented user 24294 14/50 current_auc = 0.7919655667144907
User 24294 AUC after training: 0.7919655667144907
User 24294 does not improve AUC. Reverting changes.
Training on augumented user 69542 15/50 current_auc = 0.7919655667144907
User 69542 AUC after training: 0.7919655667144907
User 69542 does not improve AUC. Reverting changes.
Training on augumented user 45433 16/50 current_auc = 0.7919655667144907
User 45433 AUC after training: 0.7905308464849354
User 45433 does not improve AUC. Reverting changes.
Training on augumented user 137846 17/50 current_auc = 0.7919655667144907
User 137846 AUC after training: 0.7905308464849354
User 137846 does not improve AUC. Reverting changes.
Training on augumented user 28543 18/50 current_auc = 0.7919655667144907
User 28543 AUC after training: 0.7919655667144907
User 28543 does not improve AUC. Reverting changes.
Training on augumented user 125197 19/50 current_auc = 0.7919655667144907
User 125197 AUC after training: 0.7919655667144907
User 125197 does not improve AUC. Reverting changes.
Training on augumented user 21096 20/50 current_auc = 0.7919655667144907
User 21096 AUC after training: 0.7934002869440459
User 21096 improves AUC. Keeping the model.
Training on augumented user 118000 21/50 current_auc = 0.7934002869440459
User 118000 AUC after training: 0.7934002869440459
User 118000 does not improve AUC. Reverting changes.
Training on augumented user 80631 22/50 current_auc = 0.7934002869440459
User 80631 AUC after training: 0.7962697274031564
User 80631 improves AUC. Keeping the model.
Training on augumented user 50059 23/50 current_auc = 0.7962697274031564
User 50059 AUC after training: 0.7962697274031564
User 50059 does not improve AUC. Reverting changes.
Training on augumented user 25586 24/50 current_auc = 0.7962697274031564
User 25586 AUC after training: 0.793400286944046
User 25586 does not improve AUC. Reverting changes.
Training on augumented user 115805 25/50 current_auc = 0.7962697274031564
User 115805 AUC after training: 0.7948350071736011
User 115805 does not improve AUC. Reverting changes.
Training on augumented user 123951 26/50 current_auc = 0.7962697274031564
User 123951 AUC after training: 0.7941176470588236
User 123951 does not improve AUC. Reverting changes.
Training on augumented user 72820 27/50 current_auc = 0.7962697274031564
User 72820 AUC after training: 0.7962697274031564
User 72820 does not improve AUC. Reverting changes.
Training on augumented user 26183 28/50 current_auc = 0.7962697274031564
User 26183 AUC after training: 0.7962697274031564
User 26183 does not improve AUC. Reverting changes.
Training on augumented user 129606 29/50 current_auc = 0.7962697274031564
User 129606 AUC after training: 0.7962697274031564
User 129606 does not improve AUC. Reverting changes.
Training on augumented user 26212 30/50 current_auc = 0.7962697274031564
User 26212 AUC after training: 0.7948350071736011
User 26212 does not improve AUC. Reverting changes.
Training on augumented user 131150 31/50 current_auc = 0.7962697274031564
User 131150 AUC after training: 0.7948350071736011
User 131150 does not improve AUC. Reverting changes.
Training on augumented user 64436 32/50 current_auc = 0.7962697274031564
User 64436 AUC after training: 0.793400286944046
User 64436 does not improve AUC. Reverting changes.
Training on augumented user 121020 33/50 current_auc = 0.7962697274031564
User 121020 AUC after training: 0.7934002869440459
User 121020 does not improve AUC. Reverting changes.
Training on augumented user 9503 34/50 current_auc = 0.7962697274031564
User 9503 AUC after training: 0.793400286944046
User 9503 does not improve AUC. Reverting changes.
Training on augumented user 132995 35/50 current_auc = 0.7962697274031564
User 132995 AUC after training: 0.7962697274031564
User 132995 does not improve AUC. Reverting changes.
Training on augumented user 53152 36/50 current_auc = 0.7962697274031564
User 53152 AUC after training: 0.7948350071736011
User 53152 does not improve AUC. Reverting changes.
Training on augumented user 50144 37/50 current_auc = 0.7962697274031564
User 50144 AUC after training: 0.7962697274031564
User 50144 does not improve AUC. Reverting changes.
Training on augumented user 36047 38/50 current_auc = 0.7962697274031564
User 36047 AUC after training: 0.7934002869440459
User 36047 does not improve AUC. Reverting changes.
Training on augumented user 860 39/50 current_auc = 0.7962697274031564
User 860 AUC after training: 0.7934002869440459
User 860 does not improve AUC. Reverting changes.
Training on augumented user 29964 40/50 current_auc = 0.7962697274031564
User 29964 AUC after training: 0.7948350071736011
User 29964 does not improve AUC. Reverting changes.
Training on augumented user 54988 41/50 current_auc = 0.7962697274031564
User 54988 AUC after training: 0.7948350071736011
User 54988 does not improve AUC. Reverting changes.
Training on augumented user 68308 42/50 current_auc = 0.7962697274031564
User 68308 AUC after training: 0.7948350071736011
User 68308 does not improve AUC. Reverting changes.
Training on augumented user 35668 43/50 current_auc = 0.7962697274031564
User 35668 AUC after training: 0.7934002869440459
User 35668 does not improve AUC. Reverting changes.
Training on augumented user 33916 44/50 current_auc = 0.7962697274031564
User 33916 AUC after training: 0.7948350071736011
User 33916 does not improve AUC. Reverting changes.
Training on augumented user 124673 45/50 current_auc = 0.7962697274031564
User 124673 AUC after training: 0.793400286944046
User 124673 does not improve AUC. Reverting changes.
Training on augumented user 97354 46/50 current_auc = 0.7962697274031564
User 97354 AUC after training: 0.7948350071736011
User 97354 does not improve AUC. Reverting changes.
Training on augumented user 107621 47/50 current_auc = 0.7962697274031564
User 107621 AUC after training: 0.7948350071736011
User 107621 does not improve AUC. Reverting changes.
Training on augumented user 21510 48/50 current_auc = 0.7962697274031564
User 21510 AUC after training: 0.7962697274031564
User 21510 does not improve AUC. Reverting changes.
Training on augumented user 15087 49/50 current_auc = 0.7962697274031564
User 15087 AUC after training: 0.7948350071736011
User 15087 does not improve AUC. Reverting changes.
[2024-12-02 19:24:59.890811] start test user 114746 196/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:25:00.389557] start test user 114746 196/567 recall augumented users by random, augumented_users = [18257, 84931, 138319, 108289, 60992, 82744, 69863, 78975, 128460, 104941, 97799, 91160, 35310, 11019, 121893, 105755, 133357, 86712, 70461, 54580, 4432, 27606, 31648, 132559, 130014, 131731, 114991, 38828, 33811, 39344, 42506, 137409, 42526, 66341, 49115, 43826, 91008, 135199, 95546, 27787, 10411, 47502, 34935, 17161, 77458, 31846, 19309, 18079, 11801, 96189]
[2024-12-02 19:25:00.405683] user = 114746 Cloud 196/567
[2024-12-02 19:25:00.423529] user = 114746 Local 196/567
[2024-12-02 19:25:00.454483] user = 114746 Local+ 196/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:25:02.959220] user = 114746 MPDA- 196/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6731358529111338
Training on augumented user 18257 0/50 current_auc = 0.6731358529111338
User 18257 AUC after training: 0.674923391215526
User 18257 improves AUC. Keeping the model.
Training on augumented user 84931 1/50 current_auc = 0.674923391215526
User 84931 AUC after training: 0.6754341164453523
User 84931 improves AUC. Keeping the model.
Training on augumented user 138319 2/50 current_auc = 0.6754341164453523
User 138319 AUC after training: 0.6754341164453523
User 138319 does not improve AUC. Reverting changes.
Training on augumented user 108289 3/50 current_auc = 0.6754341164453523
User 108289 AUC after training: 0.6746680286006129
User 108289 does not improve AUC. Reverting changes.
Training on augumented user 60992 4/50 current_auc = 0.6754341164453523
User 60992 AUC after training: 0.6754341164453523
User 60992 does not improve AUC. Reverting changes.
Training on augumented user 82744 5/50 current_auc = 0.6754341164453523
User 82744 AUC after training: 0.6754341164453523
User 82744 does not improve AUC. Reverting changes.
Training on augumented user 69863 6/50 current_auc = 0.6754341164453523
User 69863 AUC after training: 0.6754341164453525
User 69863 improves AUC. Keeping the model.
Training on augumented user 78975 7/50 current_auc = 0.6754341164453525
User 78975 AUC after training: 0.6746680286006129
User 78975 does not improve AUC. Reverting changes.
Training on augumented user 128460 8/50 current_auc = 0.6754341164453525
User 128460 AUC after training: 0.6756894790602657
User 128460 improves AUC. Keeping the model.
Training on augumented user 104941 9/50 current_auc = 0.6756894790602657
User 104941 AUC after training: 0.6751787538304392
User 104941 does not improve AUC. Reverting changes.
Training on augumented user 97799 10/50 current_auc = 0.6756894790602657
User 97799 AUC after training: 0.6751787538304392
User 97799 does not improve AUC. Reverting changes.
Training on augumented user 91160 11/50 current_auc = 0.6756894790602657
User 91160 AUC after training: 0.6759448416751788
User 91160 improves AUC. Keeping the model.
Training on augumented user 35310 12/50 current_auc = 0.6759448416751788
User 35310 AUC after training: 0.6754341164453525
User 35310 does not improve AUC. Reverting changes.
Training on augumented user 11019 13/50 current_auc = 0.6759448416751788
User 11019 AUC after training: 0.6759448416751788
User 11019 does not improve AUC. Reverting changes.
Training on augumented user 121893 14/50 current_auc = 0.6759448416751788
User 121893 AUC after training: 0.676200204290092
User 121893 improves AUC. Keeping the model.
Training on augumented user 105755 15/50 current_auc = 0.676200204290092
User 105755 AUC after training: 0.676200204290092
User 105755 does not improve AUC. Reverting changes.
Training on augumented user 133357 16/50 current_auc = 0.676200204290092
User 133357 AUC after training: 0.6772216547497446
User 133357 improves AUC. Keeping the model.
Training on augumented user 86712 17/50 current_auc = 0.6772216547497446
User 86712 AUC after training: 0.6772216547497447
User 86712 improves AUC. Keeping the model.
Training on augumented user 70461 18/50 current_auc = 0.6772216547497447
User 70461 AUC after training: 0.676200204290092
User 70461 does not improve AUC. Reverting changes.
Training on augumented user 54580 19/50 current_auc = 0.6772216547497447
User 54580 AUC after training: 0.6777323799795709
User 54580 improves AUC. Keeping the model.
Training on augumented user 4432 20/50 current_auc = 0.6777323799795709
User 4432 AUC after training: 0.6772216547497447
User 4432 does not improve AUC. Reverting changes.
Training on augumented user 27606 21/50 current_auc = 0.6777323799795709
User 27606 AUC after training: 0.6782431052093973
User 27606 improves AUC. Keeping the model.
Training on augumented user 31648 22/50 current_auc = 0.6782431052093973
User 31648 AUC after training: 0.6782431052093973
User 31648 does not improve AUC. Reverting changes.
Training on augumented user 132559 23/50 current_auc = 0.6782431052093973
User 132559 AUC after training: 0.6782431052093973
User 132559 does not improve AUC. Reverting changes.
Training on augumented user 130014 24/50 current_auc = 0.6782431052093973
User 130014 AUC after training: 0.6782431052093973
User 130014 does not improve AUC. Reverting changes.
Training on augumented user 131731 25/50 current_auc = 0.6782431052093973
User 131731 AUC after training: 0.6782431052093973
User 131731 does not improve AUC. Reverting changes.
Training on augumented user 114991 26/50 current_auc = 0.6782431052093973
User 114991 AUC after training: 0.677732379979571
User 114991 does not improve AUC. Reverting changes.
Training on augumented user 38828 27/50 current_auc = 0.6782431052093973
User 38828 AUC after training: 0.677732379979571
User 38828 does not improve AUC. Reverting changes.
Training on augumented user 33811 28/50 current_auc = 0.6782431052093973
User 33811 AUC after training: 0.677732379979571
User 33811 does not improve AUC. Reverting changes.
Training on augumented user 39344 29/50 current_auc = 0.6782431052093973
User 39344 AUC after training: 0.6782431052093973
User 39344 does not improve AUC. Reverting changes.
Training on augumented user 42506 30/50 current_auc = 0.6782431052093973
User 42506 AUC after training: 0.6782431052093973
User 42506 does not improve AUC. Reverting changes.
Training on augumented user 137409 31/50 current_auc = 0.6782431052093973
User 137409 AUC after training: 0.6777323799795709
User 137409 does not improve AUC. Reverting changes.
Training on augumented user 42526 32/50 current_auc = 0.6782431052093973
User 42526 AUC after training: 0.6782431052093973
User 42526 does not improve AUC. Reverting changes.
Training on augumented user 66341 33/50 current_auc = 0.6782431052093973
User 66341 AUC after training: 0.6782431052093973
User 66341 does not improve AUC. Reverting changes.
Training on augumented user 49115 34/50 current_auc = 0.6782431052093973
User 49115 AUC after training: 0.6782431052093973
User 49115 does not improve AUC. Reverting changes.
Training on augumented user 43826 35/50 current_auc = 0.6782431052093973
User 43826 AUC after training: 0.6777323799795709
User 43826 does not improve AUC. Reverting changes.
Training on augumented user 91008 36/50 current_auc = 0.6782431052093973
User 91008 AUC after training: 0.6792645556690501
User 91008 improves AUC. Keeping the model.
Training on augumented user 135199 37/50 current_auc = 0.6792645556690501
User 135199 AUC after training: 0.6787538304392238
User 135199 does not improve AUC. Reverting changes.
Training on augumented user 95546 38/50 current_auc = 0.6792645556690501
User 95546 AUC after training: 0.6782431052093973
User 95546 does not improve AUC. Reverting changes.
Training on augumented user 27787 39/50 current_auc = 0.6792645556690501
User 27787 AUC after training: 0.6777323799795709
User 27787 does not improve AUC. Reverting changes.
Training on augumented user 10411 40/50 current_auc = 0.6792645556690501
User 10411 AUC after training: 0.6777323799795709
User 10411 does not improve AUC. Reverting changes.
Training on augumented user 47502 41/50 current_auc = 0.6792645556690501
User 47502 AUC after training: 0.6777323799795709
User 47502 does not improve AUC. Reverting changes.
Training on augumented user 34935 42/50 current_auc = 0.6792645556690501
User 34935 AUC after training: 0.6782431052093973
User 34935 does not improve AUC. Reverting changes.
Training on augumented user 17161 43/50 current_auc = 0.6792645556690501
User 17161 AUC after training: 0.6782431052093973
User 17161 does not improve AUC. Reverting changes.
Training on augumented user 77458 44/50 current_auc = 0.6792645556690501
User 77458 AUC after training: 0.6792645556690501
User 77458 does not improve AUC. Reverting changes.
Training on augumented user 31846 45/50 current_auc = 0.6792645556690501
User 31846 AUC after training: 0.6782431052093973
User 31846 does not improve AUC. Reverting changes.
Training on augumented user 19309 46/50 current_auc = 0.6792645556690501
User 19309 AUC after training: 0.677732379979571
User 19309 does not improve AUC. Reverting changes.
Training on augumented user 18079 47/50 current_auc = 0.6792645556690501
User 18079 AUC after training: 0.6792645556690501
User 18079 does not improve AUC. Reverting changes.
Training on augumented user 11801 48/50 current_auc = 0.6792645556690501
User 11801 AUC after training: 0.6787538304392237
User 11801 does not improve AUC. Reverting changes.
Training on augumented user 96189 49/50 current_auc = 0.6792645556690501
User 96189 AUC after training: 0.6782431052093973
User 96189 does not improve AUC. Reverting changes.
[2024-12-02 19:25:28.764809] start test user 114749 197/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:25:29.240229] start test user 114749 197/567 recall augumented users by random, augumented_users = [94420, 58520, 5242, 136232, 104625, 98401, 24554, 20116, 86963, 122947, 48320, 119613, 524, 95379, 57017, 25905, 80473, 131924, 104478, 21632, 8192, 58206, 70260, 105911, 127391, 76685, 36978, 132822, 119264, 95307, 33335, 97885, 97462, 12978, 80111, 83276, 90993, 6215, 129255, 27753, 2371, 40672, 120294, 2437, 62997, 135248, 64649, 42553, 58922, 37651]
[2024-12-02 19:25:29.255208] user = 114749 Cloud 197/567
[2024-12-02 19:25:29.265940] user = 114749 Local 197/567
[2024-12-02 19:25:29.387880] user = 114749 Local+ 197/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:25:31.718318] user = 114749 MPDA- 197/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.39333333333333337
Training on augumented user 94420 0/50 current_auc = 0.39333333333333337
User 94420 AUC after training: 0.38333333333333336
User 94420 does not improve AUC. Reverting changes.
Training on augumented user 58520 1/50 current_auc = 0.39333333333333337
User 58520 AUC after training: 0.39
User 58520 does not improve AUC. Reverting changes.
Training on augumented user 5242 2/50 current_auc = 0.39333333333333337
User 5242 AUC after training: 0.38333333333333336
User 5242 does not improve AUC. Reverting changes.
Training on augumented user 136232 3/50 current_auc = 0.39333333333333337
User 136232 AUC after training: 0.39000000000000007
User 136232 does not improve AUC. Reverting changes.
Training on augumented user 104625 4/50 current_auc = 0.39333333333333337
User 104625 AUC after training: 0.38
User 104625 does not improve AUC. Reverting changes.
Training on augumented user 98401 5/50 current_auc = 0.39333333333333337
User 98401 AUC after training: 0.3966666666666667
User 98401 improves AUC. Keeping the model.
Training on augumented user 24554 6/50 current_auc = 0.3966666666666667
User 24554 AUC after training: 0.3966666666666667
User 24554 does not improve AUC. Reverting changes.
Training on augumented user 20116 7/50 current_auc = 0.3966666666666667
User 20116 AUC after training: 0.39333333333333337
User 20116 does not improve AUC. Reverting changes.
Training on augumented user 86963 8/50 current_auc = 0.3966666666666667
User 86963 AUC after training: 0.3966666666666667
User 86963 does not improve AUC. Reverting changes.
Training on augumented user 122947 9/50 current_auc = 0.3966666666666667
User 122947 AUC after training: 0.39333333333333337
User 122947 does not improve AUC. Reverting changes.
Training on augumented user 48320 10/50 current_auc = 0.3966666666666667
User 48320 AUC after training: 0.39333333333333337
User 48320 does not improve AUC. Reverting changes.
Training on augumented user 119613 11/50 current_auc = 0.3966666666666667
User 119613 AUC after training: 0.39333333333333337
User 119613 does not improve AUC. Reverting changes.
Training on augumented user 524 12/50 current_auc = 0.3966666666666667
User 524 AUC after training: 0.3966666666666667
User 524 does not improve AUC. Reverting changes.
Training on augumented user 95379 13/50 current_auc = 0.3966666666666667
User 95379 AUC after training: 0.39333333333333337
User 95379 does not improve AUC. Reverting changes.
Training on augumented user 57017 14/50 current_auc = 0.3966666666666667
User 57017 AUC after training: 0.39000000000000007
User 57017 does not improve AUC. Reverting changes.
Training on augumented user 25905 15/50 current_auc = 0.3966666666666667
User 25905 AUC after training: 0.39333333333333337
User 25905 does not improve AUC. Reverting changes.
Training on augumented user 80473 16/50 current_auc = 0.3966666666666667
User 80473 AUC after training: 0.3866666666666667
User 80473 does not improve AUC. Reverting changes.
Training on augumented user 131924 17/50 current_auc = 0.3966666666666667
User 131924 AUC after training: 0.39333333333333337
User 131924 does not improve AUC. Reverting changes.
Training on augumented user 104478 18/50 current_auc = 0.3966666666666667
User 104478 AUC after training: 0.39000000000000007
User 104478 does not improve AUC. Reverting changes.
Training on augumented user 21632 19/50 current_auc = 0.3966666666666667
User 21632 AUC after training: 0.3966666666666667
User 21632 does not improve AUC. Reverting changes.
Training on augumented user 8192 20/50 current_auc = 0.3966666666666667
User 8192 AUC after training: 0.39000000000000007
User 8192 does not improve AUC. Reverting changes.
Training on augumented user 58206 21/50 current_auc = 0.3966666666666667
User 58206 AUC after training: 0.39000000000000007
User 58206 does not improve AUC. Reverting changes.
Training on augumented user 70260 22/50 current_auc = 0.3966666666666667
User 70260 AUC after training: 0.39333333333333337
User 70260 does not improve AUC. Reverting changes.
Training on augumented user 105911 23/50 current_auc = 0.3966666666666667
User 105911 AUC after training: 0.3966666666666667
User 105911 does not improve AUC. Reverting changes.
Training on augumented user 127391 24/50 current_auc = 0.3966666666666667
User 127391 AUC after training: 0.39333333333333337
User 127391 does not improve AUC. Reverting changes.
Training on augumented user 76685 25/50 current_auc = 0.3966666666666667
User 76685 AUC after training: 0.39333333333333337
User 76685 does not improve AUC. Reverting changes.
Training on augumented user 36978 26/50 current_auc = 0.3966666666666667
User 36978 AUC after training: 0.3966666666666667
User 36978 does not improve AUC. Reverting changes.
Training on augumented user 132822 27/50 current_auc = 0.3966666666666667
User 132822 AUC after training: 0.3966666666666667
User 132822 does not improve AUC. Reverting changes.
Training on augumented user 119264 28/50 current_auc = 0.3966666666666667
User 119264 AUC after training: 0.3866666666666667
User 119264 does not improve AUC. Reverting changes.
Training on augumented user 95307 29/50 current_auc = 0.3966666666666667
User 95307 AUC after training: 0.39000000000000007
User 95307 does not improve AUC. Reverting changes.
Training on augumented user 33335 30/50 current_auc = 0.3966666666666667
User 33335 AUC after training: 0.3966666666666667
User 33335 does not improve AUC. Reverting changes.
Training on augumented user 97885 31/50 current_auc = 0.3966666666666667
User 97885 AUC after training: 0.3966666666666667
User 97885 does not improve AUC. Reverting changes.
Training on augumented user 97462 32/50 current_auc = 0.3966666666666667
User 97462 AUC after training: 0.39000000000000007
User 97462 does not improve AUC. Reverting changes.
Training on augumented user 12978 33/50 current_auc = 0.3966666666666667
User 12978 AUC after training: 0.39333333333333337
User 12978 does not improve AUC. Reverting changes.
Training on augumented user 80111 34/50 current_auc = 0.3966666666666667
User 80111 AUC after training: 0.39333333333333337
User 80111 does not improve AUC. Reverting changes.
Training on augumented user 83276 35/50 current_auc = 0.3966666666666667
User 83276 AUC after training: 0.3866666666666667
User 83276 does not improve AUC. Reverting changes.
Training on augumented user 90993 36/50 current_auc = 0.3966666666666667
User 90993 AUC after training: 0.3966666666666667
User 90993 does not improve AUC. Reverting changes.
Training on augumented user 6215 37/50 current_auc = 0.3966666666666667
User 6215 AUC after training: 0.3966666666666667
User 6215 does not improve AUC. Reverting changes.
Training on augumented user 129255 38/50 current_auc = 0.3966666666666667
User 129255 AUC after training: 0.38666666666666666
User 129255 does not improve AUC. Reverting changes.
Training on augumented user 27753 39/50 current_auc = 0.3966666666666667
User 27753 AUC after training: 0.39333333333333337
User 27753 does not improve AUC. Reverting changes.
Training on augumented user 2371 40/50 current_auc = 0.3966666666666667
User 2371 AUC after training: 0.3866666666666667
User 2371 does not improve AUC. Reverting changes.
Training on augumented user 40672 41/50 current_auc = 0.3966666666666667
User 40672 AUC after training: 0.39000000000000007
User 40672 does not improve AUC. Reverting changes.
Training on augumented user 120294 42/50 current_auc = 0.3966666666666667
User 120294 AUC after training: 0.39000000000000007
User 120294 does not improve AUC. Reverting changes.
Training on augumented user 2437 43/50 current_auc = 0.3966666666666667
User 2437 AUC after training: 0.3966666666666667
User 2437 does not improve AUC. Reverting changes.
Training on augumented user 62997 44/50 current_auc = 0.3966666666666667
User 62997 AUC after training: 0.3866666666666667
User 62997 does not improve AUC. Reverting changes.
Training on augumented user 135248 45/50 current_auc = 0.3966666666666667
User 135248 AUC after training: 0.39000000000000007
User 135248 does not improve AUC. Reverting changes.
Training on augumented user 64649 46/50 current_auc = 0.3966666666666667
User 64649 AUC after training: 0.39000000000000007
User 64649 does not improve AUC. Reverting changes.
Training on augumented user 42553 47/50 current_auc = 0.3966666666666667
User 42553 AUC after training: 0.39
User 42553 does not improve AUC. Reverting changes.
Training on augumented user 58922 48/50 current_auc = 0.3966666666666667
User 58922 AUC after training: 0.38000000000000006
User 58922 does not improve AUC. Reverting changes.
Training on augumented user 37651 49/50 current_auc = 0.3966666666666667
User 37651 AUC after training: 0.39000000000000007
User 37651 does not improve AUC. Reverting changes.
[2024-12-02 19:25:57.912865] start test user 114758 198/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:25:58.721629] start test user 114758 198/567 recall augumented users by random, augumented_users = [60687, 21935, 21415, 14815, 23209, 51237, 18855, 136003, 128062, 113600, 63801, 43751, 128486, 28306, 71948, 34487, 101160, 55605, 78534, 65177, 20173, 70045, 49885, 2761, 44734, 77980, 56242, 20255, 67062, 88769, 106728, 48266, 7725, 81929, 45146, 33866, 86067, 127818, 108006, 124004, 134156, 83749, 44499, 122471, 74070, 2730, 99636, 92973, 138488, 64040]
[2024-12-02 19:25:58.739285] user = 114758 Cloud 198/567
[2024-12-02 19:25:58.750284] user = 114758 Local 198/567
[2024-12-02 19:25:59.005151] user = 114758 Local+ 198/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:26:01.484683] user = 114758 MPDA- 198/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6730769230769231
Training on augumented user 60687 0/50 current_auc = 0.6730769230769231
User 60687 AUC after training: 0.6730769230769231
User 60687 does not improve AUC. Reverting changes.
Training on augumented user 21935 1/50 current_auc = 0.6730769230769231
User 21935 AUC after training: 0.6730769230769231
User 21935 does not improve AUC. Reverting changes.
Training on augumented user 21415 2/50 current_auc = 0.6730769230769231
User 21415 AUC after training: 0.6730769230769231
User 21415 does not improve AUC. Reverting changes.
Training on augumented user 14815 3/50 current_auc = 0.6730769230769231
User 14815 AUC after training: 0.6730769230769231
User 14815 does not improve AUC. Reverting changes.
Training on augumented user 23209 4/50 current_auc = 0.6730769230769231
User 23209 AUC after training: 0.6730769230769231
User 23209 does not improve AUC. Reverting changes.
Training on augumented user 51237 5/50 current_auc = 0.6730769230769231
User 51237 AUC after training: 0.6730769230769231
User 51237 does not improve AUC. Reverting changes.
Training on augumented user 18855 6/50 current_auc = 0.6730769230769231
User 18855 AUC after training: 0.6730769230769231
User 18855 does not improve AUC. Reverting changes.
Training on augumented user 136003 7/50 current_auc = 0.6730769230769231
User 136003 AUC after training: 0.6730769230769231
User 136003 does not improve AUC. Reverting changes.
Training on augumented user 128062 8/50 current_auc = 0.6730769230769231
User 128062 AUC after training: 0.6730769230769231
User 128062 does not improve AUC. Reverting changes.
Training on augumented user 113600 9/50 current_auc = 0.6730769230769231
User 113600 AUC after training: 0.6730769230769231
User 113600 does not improve AUC. Reverting changes.
Training on augumented user 63801 10/50 current_auc = 0.6730769230769231
User 63801 AUC after training: 0.6730769230769231
User 63801 does not improve AUC. Reverting changes.
Training on augumented user 43751 11/50 current_auc = 0.6730769230769231
User 43751 AUC after training: 0.6730769230769231
User 43751 does not improve AUC. Reverting changes.
Training on augumented user 128486 12/50 current_auc = 0.6730769230769231
User 128486 AUC after training: 0.6730769230769231
User 128486 does not improve AUC. Reverting changes.
Training on augumented user 28306 13/50 current_auc = 0.6730769230769231
User 28306 AUC after training: 0.6730769230769231
User 28306 does not improve AUC. Reverting changes.
Training on augumented user 71948 14/50 current_auc = 0.6730769230769231
User 71948 AUC after training: 0.6730769230769231
User 71948 does not improve AUC. Reverting changes.
Training on augumented user 34487 15/50 current_auc = 0.6730769230769231
User 34487 AUC after training: 0.6730769230769231
User 34487 does not improve AUC. Reverting changes.
Training on augumented user 101160 16/50 current_auc = 0.6730769230769231
User 101160 AUC after training: 0.6730769230769231
User 101160 does not improve AUC. Reverting changes.
Training on augumented user 55605 17/50 current_auc = 0.6730769230769231
User 55605 AUC after training: 0.6730769230769231
User 55605 does not improve AUC. Reverting changes.
Training on augumented user 78534 18/50 current_auc = 0.6730769230769231
User 78534 AUC after training: 0.6730769230769231
User 78534 does not improve AUC. Reverting changes.
Training on augumented user 65177 19/50 current_auc = 0.6730769230769231
User 65177 AUC after training: 0.6730769230769231
User 65177 does not improve AUC. Reverting changes.
Training on augumented user 20173 20/50 current_auc = 0.6730769230769231
User 20173 AUC after training: 0.6730769230769231
User 20173 does not improve AUC. Reverting changes.
Training on augumented user 70045 21/50 current_auc = 0.6730769230769231
User 70045 AUC after training: 0.6730769230769231
User 70045 does not improve AUC. Reverting changes.
Training on augumented user 49885 22/50 current_auc = 0.6730769230769231
User 49885 AUC after training: 0.6730769230769231
User 49885 does not improve AUC. Reverting changes.
Training on augumented user 2761 23/50 current_auc = 0.6730769230769231
User 2761 AUC after training: 0.6730769230769231
User 2761 does not improve AUC. Reverting changes.
Training on augumented user 44734 24/50 current_auc = 0.6730769230769231
User 44734 AUC after training: 0.6730769230769231
User 44734 does not improve AUC. Reverting changes.
Training on augumented user 77980 25/50 current_auc = 0.6730769230769231
User 77980 AUC after training: 0.6730769230769231
User 77980 does not improve AUC. Reverting changes.
Training on augumented user 56242 26/50 current_auc = 0.6730769230769231
User 56242 AUC after training: 0.6730769230769231
User 56242 does not improve AUC. Reverting changes.
Training on augumented user 20255 27/50 current_auc = 0.6730769230769231
User 20255 AUC after training: 0.6730769230769231
User 20255 does not improve AUC. Reverting changes.
Training on augumented user 67062 28/50 current_auc = 0.6730769230769231
User 67062 AUC after training: 0.6730769230769231
User 67062 does not improve AUC. Reverting changes.
Training on augumented user 88769 29/50 current_auc = 0.6730769230769231
User 88769 AUC after training: 0.6730769230769231
User 88769 does not improve AUC. Reverting changes.
Training on augumented user 106728 30/50 current_auc = 0.6730769230769231
User 106728 AUC after training: 0.6730769230769231
User 106728 does not improve AUC. Reverting changes.
Training on augumented user 48266 31/50 current_auc = 0.6730769230769231
User 48266 AUC after training: 0.6730769230769231
User 48266 does not improve AUC. Reverting changes.
Training on augumented user 7725 32/50 current_auc = 0.6730769230769231
User 7725 AUC after training: 0.6730769230769231
User 7725 does not improve AUC. Reverting changes.
Training on augumented user 81929 33/50 current_auc = 0.6730769230769231
User 81929 AUC after training: 0.6730769230769231
User 81929 does not improve AUC. Reverting changes.
Training on augumented user 45146 34/50 current_auc = 0.6730769230769231
User 45146 AUC after training: 0.6730769230769231
User 45146 does not improve AUC. Reverting changes.
Training on augumented user 33866 35/50 current_auc = 0.6730769230769231
User 33866 AUC after training: 0.6730769230769231
User 33866 does not improve AUC. Reverting changes.
Training on augumented user 86067 36/50 current_auc = 0.6730769230769231
User 86067 AUC after training: 0.6730769230769231
User 86067 does not improve AUC. Reverting changes.
Training on augumented user 127818 37/50 current_auc = 0.6730769230769231
User 127818 AUC after training: 0.6730769230769231
User 127818 does not improve AUC. Reverting changes.
Training on augumented user 108006 38/50 current_auc = 0.6730769230769231
User 108006 AUC after training: 0.6730769230769231
User 108006 does not improve AUC. Reverting changes.
Training on augumented user 124004 39/50 current_auc = 0.6730769230769231
User 124004 AUC after training: 0.6730769230769231
User 124004 does not improve AUC. Reverting changes.
Training on augumented user 134156 40/50 current_auc = 0.6730769230769231
User 134156 AUC after training: 0.6666666666666666
User 134156 does not improve AUC. Reverting changes.
Training on augumented user 83749 41/50 current_auc = 0.6730769230769231
User 83749 AUC after training: 0.6730769230769231
User 83749 does not improve AUC. Reverting changes.
Training on augumented user 44499 42/50 current_auc = 0.6730769230769231
User 44499 AUC after training: 0.6730769230769231
User 44499 does not improve AUC. Reverting changes.
Training on augumented user 122471 43/50 current_auc = 0.6730769230769231
User 122471 AUC after training: 0.673076923076923
User 122471 does not improve AUC. Reverting changes.
Training on augumented user 74070 44/50 current_auc = 0.6730769230769231
User 74070 AUC after training: 0.6730769230769231
User 74070 does not improve AUC. Reverting changes.
Training on augumented user 2730 45/50 current_auc = 0.6730769230769231
User 2730 AUC after training: 0.6730769230769231
User 2730 does not improve AUC. Reverting changes.
Training on augumented user 99636 46/50 current_auc = 0.6730769230769231
User 99636 AUC after training: 0.6730769230769231
User 99636 does not improve AUC. Reverting changes.
Training on augumented user 92973 47/50 current_auc = 0.6730769230769231
User 92973 AUC after training: 0.6730769230769231
User 92973 does not improve AUC. Reverting changes.
Training on augumented user 138488 48/50 current_auc = 0.6730769230769231
User 138488 AUC after training: 0.6730769230769231
User 138488 does not improve AUC. Reverting changes.
Training on augumented user 64040 49/50 current_auc = 0.6730769230769231
User 64040 AUC after training: 0.6730769230769231
User 64040 does not improve AUC. Reverting changes.
[2024-12-02 19:26:28.908517] start test user 114764 199/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:26:29.640658] start test user 114764 199/567 recall augumented users by random, augumented_users = [43531, 95206, 120959, 42103, 76802, 55551, 99880, 51741, 73367, 112022, 53017, 36331, 53556, 3793, 130586, 59932, 125246, 137107, 17804, 39956, 20821, 9320, 92045, 105914, 102806, 2767, 73177, 65234, 35494, 90309, 20439, 11732, 84823, 113062, 132446, 13796, 92756, 35365, 80524, 25589, 114793, 128349, 99437, 119396, 45914, 53032, 84292, 35370, 51700, 44178]
[2024-12-02 19:26:29.658365] user = 114764 Cloud 199/567
[2024-12-02 19:26:29.684258] user = 114764 Local 199/567
[2024-12-02 19:26:29.798301] user = 114764 Local+ 199/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:26:31.468825] user = 114764 MPDA- 199/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5476190476190477
Training on augumented user 43531 0/50 current_auc = 0.5476190476190477
User 43531 AUC after training: 0.5515873015873016
User 43531 improves AUC. Keeping the model.
Training on augumented user 95206 1/50 current_auc = 0.5515873015873016
User 95206 AUC after training: 0.5515873015873016
User 95206 does not improve AUC. Reverting changes.
Training on augumented user 120959 2/50 current_auc = 0.5515873015873016
User 120959 AUC after training: 0.5515873015873016
User 120959 does not improve AUC. Reverting changes.
Training on augumented user 42103 3/50 current_auc = 0.5515873015873016
User 42103 AUC after training: 0.5436507936507937
User 42103 does not improve AUC. Reverting changes.
Training on augumented user 76802 4/50 current_auc = 0.5515873015873016
User 76802 AUC after training: 0.5515873015873016
User 76802 does not improve AUC. Reverting changes.
Training on augumented user 55551 5/50 current_auc = 0.5515873015873016
User 55551 AUC after training: 0.5476190476190477
User 55551 does not improve AUC. Reverting changes.
Training on augumented user 99880 6/50 current_auc = 0.5515873015873016
User 99880 AUC after training: 0.5515873015873016
User 99880 does not improve AUC. Reverting changes.
Training on augumented user 51741 7/50 current_auc = 0.5515873015873016
User 51741 AUC after training: 0.5515873015873016
User 51741 does not improve AUC. Reverting changes.
Training on augumented user 73367 8/50 current_auc = 0.5515873015873016
User 73367 AUC after training: 0.5436507936507937
User 73367 does not improve AUC. Reverting changes.
Training on augumented user 112022 9/50 current_auc = 0.5515873015873016
User 112022 AUC after training: 0.5476190476190477
User 112022 does not improve AUC. Reverting changes.
Training on augumented user 53017 10/50 current_auc = 0.5515873015873016
User 53017 AUC after training: 0.5476190476190477
User 53017 does not improve AUC. Reverting changes.
Training on augumented user 36331 11/50 current_auc = 0.5515873015873016
User 36331 AUC after training: 0.5476190476190477
User 36331 does not improve AUC. Reverting changes.
Training on augumented user 53556 12/50 current_auc = 0.5515873015873016
User 53556 AUC after training: 0.5515873015873016
User 53556 does not improve AUC. Reverting changes.
Training on augumented user 3793 13/50 current_auc = 0.5515873015873016
User 3793 AUC after training: 0.5515873015873016
User 3793 does not improve AUC. Reverting changes.
Training on augumented user 130586 14/50 current_auc = 0.5515873015873016
User 130586 AUC after training: 0.5476190476190477
User 130586 does not improve AUC. Reverting changes.
Training on augumented user 59932 15/50 current_auc = 0.5515873015873016
User 59932 AUC after training: 0.5515873015873016
User 59932 does not improve AUC. Reverting changes.
Training on augumented user 125246 16/50 current_auc = 0.5515873015873016
User 125246 AUC after training: 0.5515873015873016
User 125246 does not improve AUC. Reverting changes.
Training on augumented user 137107 17/50 current_auc = 0.5515873015873016
User 137107 AUC after training: 0.5476190476190477
User 137107 does not improve AUC. Reverting changes.
Training on augumented user 17804 18/50 current_auc = 0.5515873015873016
User 17804 AUC after training: 0.5515873015873016
User 17804 does not improve AUC. Reverting changes.
Training on augumented user 39956 19/50 current_auc = 0.5515873015873016
User 39956 AUC after training: 0.5476190476190477
User 39956 does not improve AUC. Reverting changes.
Training on augumented user 20821 20/50 current_auc = 0.5515873015873016
User 20821 AUC after training: 0.5515873015873016
User 20821 does not improve AUC. Reverting changes.
Training on augumented user 9320 21/50 current_auc = 0.5515873015873016
User 9320 AUC after training: 0.5476190476190477
User 9320 does not improve AUC. Reverting changes.
Training on augumented user 92045 22/50 current_auc = 0.5515873015873016
User 92045 AUC after training: 0.5515873015873016
User 92045 does not improve AUC. Reverting changes.
Training on augumented user 105914 23/50 current_auc = 0.5515873015873016
User 105914 AUC after training: 0.5515873015873016
User 105914 does not improve AUC. Reverting changes.
Training on augumented user 102806 24/50 current_auc = 0.5515873015873016
User 102806 AUC after training: 0.5476190476190477
User 102806 does not improve AUC. Reverting changes.
Training on augumented user 2767 25/50 current_auc = 0.5515873015873016
User 2767 AUC after training: 0.5515873015873016
User 2767 does not improve AUC. Reverting changes.
Training on augumented user 73177 26/50 current_auc = 0.5515873015873016
User 73177 AUC after training: 0.5476190476190477
User 73177 does not improve AUC. Reverting changes.
Training on augumented user 65234 27/50 current_auc = 0.5515873015873016
User 65234 AUC after training: 0.5476190476190477
User 65234 does not improve AUC. Reverting changes.
Training on augumented user 35494 28/50 current_auc = 0.5515873015873016
User 35494 AUC after training: 0.5476190476190477
User 35494 does not improve AUC. Reverting changes.
Training on augumented user 90309 29/50 current_auc = 0.5515873015873016
User 90309 AUC after training: 0.5476190476190477
User 90309 does not improve AUC. Reverting changes.
Training on augumented user 20439 30/50 current_auc = 0.5515873015873016
User 20439 AUC after training: 0.5476190476190477
User 20439 does not improve AUC. Reverting changes.
Training on augumented user 11732 31/50 current_auc = 0.5515873015873016
User 11732 AUC after training: 0.5476190476190477
User 11732 does not improve AUC. Reverting changes.
Training on augumented user 84823 32/50 current_auc = 0.5515873015873016
User 84823 AUC after training: 0.5436507936507937
User 84823 does not improve AUC. Reverting changes.
Training on augumented user 113062 33/50 current_auc = 0.5515873015873016
User 113062 AUC after training: 0.5515873015873016
User 113062 does not improve AUC. Reverting changes.
Training on augumented user 132446 34/50 current_auc = 0.5515873015873016
User 132446 AUC after training: 0.5476190476190477
User 132446 does not improve AUC. Reverting changes.
Training on augumented user 13796 35/50 current_auc = 0.5515873015873016
User 13796 AUC after training: 0.5476190476190477
User 13796 does not improve AUC. Reverting changes.
Training on augumented user 92756 36/50 current_auc = 0.5515873015873016
User 92756 AUC after training: 0.5515873015873016
User 92756 does not improve AUC. Reverting changes.
Training on augumented user 35365 37/50 current_auc = 0.5515873015873016
User 35365 AUC after training: 0.5476190476190477
User 35365 does not improve AUC. Reverting changes.
Training on augumented user 80524 38/50 current_auc = 0.5515873015873016
User 80524 AUC after training: 0.5515873015873016
User 80524 does not improve AUC. Reverting changes.
Training on augumented user 25589 39/50 current_auc = 0.5515873015873016
User 25589 AUC after training: 0.5476190476190477
User 25589 does not improve AUC. Reverting changes.
Training on augumented user 114793 40/50 current_auc = 0.5515873015873016
User 114793 AUC after training: 0.5515873015873016
User 114793 does not improve AUC. Reverting changes.
Training on augumented user 128349 41/50 current_auc = 0.5515873015873016
User 128349 AUC after training: 0.5476190476190477
User 128349 does not improve AUC. Reverting changes.
Training on augumented user 99437 42/50 current_auc = 0.5515873015873016
User 99437 AUC after training: 0.5515873015873016
User 99437 does not improve AUC. Reverting changes.
Training on augumented user 119396 43/50 current_auc = 0.5515873015873016
User 119396 AUC after training: 0.5476190476190477
User 119396 does not improve AUC. Reverting changes.
Training on augumented user 45914 44/50 current_auc = 0.5515873015873016
User 45914 AUC after training: 0.5515873015873016
User 45914 does not improve AUC. Reverting changes.
Training on augumented user 53032 45/50 current_auc = 0.5515873015873016
User 53032 AUC after training: 0.5515873015873016
User 53032 does not improve AUC. Reverting changes.
Training on augumented user 84292 46/50 current_auc = 0.5515873015873016
User 84292 AUC after training: 0.5476190476190477
User 84292 does not improve AUC. Reverting changes.
Training on augumented user 35370 47/50 current_auc = 0.5515873015873016
User 35370 AUC after training: 0.5476190476190477
User 35370 does not improve AUC. Reverting changes.
Training on augumented user 51700 48/50 current_auc = 0.5515873015873016
User 51700 AUC after training: 0.5476190476190477
User 51700 does not improve AUC. Reverting changes.
Training on augumented user 44178 49/50 current_auc = 0.5515873015873016
User 44178 AUC after training: 0.5515873015873016
User 44178 does not improve AUC. Reverting changes.
[2024-12-02 19:27:00.821228] start test user 114911 200/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:27:01.377270] start test user 114911 200/567 recall augumented users by random, augumented_users = [88150, 95429, 118324, 73091, 97082, 38907, 111426, 5430, 81303, 54831, 92177, 71472, 23456, 44372, 125583, 12444, 84280, 24278, 64007, 8195, 105487, 38705, 91361, 111100, 104797, 111448, 31574, 68243, 95989, 56403, 70083, 43578, 109051, 114095, 66676, 40549, 58129, 88018, 11599, 115988, 84251, 33796, 108253, 121063, 104915, 67613, 46277, 134493, 1935, 14341]
[2024-12-02 19:27:01.393602] user = 114911 Cloud 200/567
[2024-12-02 19:27:01.435395] user = 114911 Local 200/567
[2024-12-02 19:27:01.652443] user = 114911 Local+ 200/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:27:04.673655] user = 114911 MPDA- 200/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7918756530825497
Training on augumented user 88150 0/50 current_auc = 0.7918756530825497
User 88150 AUC after training: 0.7922413793103449
User 88150 improves AUC. Keeping the model.
Training on augumented user 95429 1/50 current_auc = 0.7922413793103449
User 95429 AUC after training: 0.7925287356321838
User 95429 improves AUC. Keeping the model.
Training on augumented user 118324 2/50 current_auc = 0.7925287356321838
User 118324 AUC after training: 0.7922152560083595
User 118324 does not improve AUC. Reverting changes.
Training on augumented user 73091 3/50 current_auc = 0.7925287356321838
User 73091 AUC after training: 0.7927638453500523
User 73091 improves AUC. Keeping the model.
Training on augumented user 97082 4/50 current_auc = 0.7927638453500523
User 97082 AUC after training: 0.7922936259143155
User 97082 does not improve AUC. Reverting changes.
Training on augumented user 38907 5/50 current_auc = 0.7927638453500523
User 38907 AUC after training: 0.7927115987460814
User 38907 does not improve AUC. Reverting changes.
Training on augumented user 111426 6/50 current_auc = 0.7927638453500523
User 111426 AUC after training: 0.7920585161964473
User 111426 does not improve AUC. Reverting changes.
Training on augumented user 5430 7/50 current_auc = 0.7927638453500523
User 5430 AUC after training: 0.7914315569487983
User 5430 does not improve AUC. Reverting changes.
Training on augumented user 81303 8/50 current_auc = 0.7927638453500523
User 81303 AUC after training: 0.7920062695924764
User 81303 does not improve AUC. Reverting changes.
Training on augumented user 54831 9/50 current_auc = 0.7927638453500523
User 54831 AUC after training: 0.7925809822361547
User 54831 does not improve AUC. Reverting changes.
Training on augumented user 92177 10/50 current_auc = 0.7927638453500523
User 92177 AUC after training: 0.7928683385579938
User 92177 improves AUC. Keeping the model.
Training on augumented user 71472 11/50 current_auc = 0.7928683385579938
User 71472 AUC after training: 0.7922152560083595
User 71472 does not improve AUC. Reverting changes.
Training on augumented user 23456 12/50 current_auc = 0.7928683385579938
User 23456 AUC after training: 0.7927115987460815
User 23456 does not improve AUC. Reverting changes.
Training on augumented user 44372 13/50 current_auc = 0.7928683385579938
User 44372 AUC after training: 0.7922413793103448
User 44372 does not improve AUC. Reverting changes.
Training on augumented user 125583 14/50 current_auc = 0.7928683385579938
User 125583 AUC after training: 0.7920846394984326
User 125583 does not improve AUC. Reverting changes.
Training on augumented user 12444 15/50 current_auc = 0.7928683385579938
User 12444 AUC after training: 0.7919278996865203
User 12444 does not improve AUC. Reverting changes.
Training on augumented user 84280 16/50 current_auc = 0.7928683385579938
User 84280 AUC after training: 0.7931295715778475
User 84280 improves AUC. Keeping the model.
Training on augumented user 24278 17/50 current_auc = 0.7931295715778475
User 24278 AUC after training: 0.7937042842215256
User 24278 improves AUC. Keeping the model.
Training on augumented user 64007 18/50 current_auc = 0.7937042842215256
User 64007 AUC after training: 0.7934952978056428
User 64007 does not improve AUC. Reverting changes.
Training on augumented user 8195 19/50 current_auc = 0.7937042842215256
User 8195 AUC after training: 0.7936259143155695
User 8195 does not improve AUC. Reverting changes.
Training on augumented user 105487 20/50 current_auc = 0.7937042842215256
User 105487 AUC after training: 0.7934430512016718
User 105487 does not improve AUC. Reverting changes.
Training on augumented user 38705 21/50 current_auc = 0.7937042842215256
User 38705 AUC after training: 0.7938610240334378
User 38705 improves AUC. Keeping the model.
Training on augumented user 91361 22/50 current_auc = 0.7938610240334378
User 91361 AUC after training: 0.7936781609195402
User 91361 does not improve AUC. Reverting changes.
Training on augumented user 111100 23/50 current_auc = 0.7938610240334378
User 111100 AUC after training: 0.7942789968652038
User 111100 improves AUC. Keeping the model.
Training on augumented user 104797 24/50 current_auc = 0.7942789968652038
User 104797 AUC after training: 0.7930773249738767
User 104797 does not improve AUC. Reverting changes.
Training on augumented user 111448 25/50 current_auc = 0.7942789968652038
User 111448 AUC after training: 0.7943834900731453
User 111448 improves AUC. Keeping the model.
Training on augumented user 31574 26/50 current_auc = 0.7943834900731453
User 31574 AUC after training: 0.7946185997910136
User 31574 improves AUC. Keeping the model.
Training on augumented user 68243 27/50 current_auc = 0.7946185997910136
User 68243 AUC after training: 0.7944618599791013
User 68243 does not improve AUC. Reverting changes.
Training on augumented user 95989 28/50 current_auc = 0.7946185997910136
User 95989 AUC after training: 0.7953761755485893
User 95989 improves AUC. Keeping the model.
Training on augumented user 56403 29/50 current_auc = 0.7953761755485893
User 56403 AUC after training: 0.7946447230929989
User 56403 does not improve AUC. Reverting changes.
Training on augumented user 70083 30/50 current_auc = 0.7953761755485893
User 70083 AUC after training: 0.7951671891327065
User 70083 does not improve AUC. Reverting changes.
Training on augumented user 43578 31/50 current_auc = 0.7953761755485893
User 43578 AUC after training: 0.7963688610240334
User 43578 improves AUC. Keeping the model.
Training on augumented user 109051 32/50 current_auc = 0.7963688610240334
User 109051 AUC after training: 0.7961337513061653
User 109051 does not improve AUC. Reverting changes.
Training on augumented user 114095 33/50 current_auc = 0.7963688610240334
User 114095 AUC after training: 0.7967737722048066
User 114095 improves AUC. Keeping the model.
Training on augumented user 66676 34/50 current_auc = 0.7967737722048066
User 66676 AUC after training: 0.7969958202716823
User 66676 improves AUC. Keeping the model.
Training on augumented user 40549 35/50 current_auc = 0.7969958202716823
User 40549 AUC after training: 0.796969696969697
User 40549 does not improve AUC. Reverting changes.
Training on augumented user 58129 36/50 current_auc = 0.7969958202716823
User 58129 AUC after training: 0.7972962382445141
User 58129 improves AUC. Keeping the model.
Training on augumented user 88018 37/50 current_auc = 0.7972962382445141
User 88018 AUC after training: 0.7970350052246604
User 88018 does not improve AUC. Reverting changes.
Training on augumented user 11599 38/50 current_auc = 0.7972962382445141
User 11599 AUC after training: 0.7975574712643678
User 11599 improves AUC. Keeping the model.
Training on augumented user 115988 39/50 current_auc = 0.7975574712643678
User 115988 AUC after training: 0.7978709508881923
User 115988 improves AUC. Keeping the model.
Training on augumented user 84251 40/50 current_auc = 0.7978709508881923
User 84251 AUC after training: 0.7972962382445141
User 84251 does not improve AUC. Reverting changes.
Training on augumented user 33796 41/50 current_auc = 0.7978709508881923
User 33796 AUC after training: 0.7979231974921629
User 33796 improves AUC. Keeping the model.
Training on augumented user 108253 42/50 current_auc = 0.7979231974921629
User 108253 AUC after training: 0.7981060606060606
User 108253 improves AUC. Keeping the model.
Training on augumented user 121063 43/50 current_auc = 0.7981060606060606
User 121063 AUC after training: 0.7982889237199582
User 121063 improves AUC. Keeping the model.
Training on augumented user 104915 44/50 current_auc = 0.7982889237199582
User 104915 AUC after training: 0.7980799373040752
User 104915 does not improve AUC. Reverting changes.
Training on augumented user 67613 45/50 current_auc = 0.7982889237199582
User 67613 AUC after training: 0.7985240334378265
User 67613 improves AUC. Keeping the model.
Training on augumented user 46277 46/50 current_auc = 0.7985240334378265
User 46277 AUC after training: 0.798550156739812
User 46277 improves AUC. Keeping the model.
Training on augumented user 134493 47/50 current_auc = 0.798550156739812
User 134493 AUC after training: 0.7985632183908045
User 134493 improves AUC. Keeping the model.
Training on augumented user 1935 48/50 current_auc = 0.7985632183908045
User 1935 AUC after training: 0.7976097178683386
User 1935 does not improve AUC. Reverting changes.
Training on augumented user 14341 49/50 current_auc = 0.7985632183908045
User 14341 AUC after training: 0.7983672936259143
User 14341 does not improve AUC. Reverting changes.
[2024-12-02 19:27:32.123318] start test user 114937 201/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:27:32.562303] start test user 114937 201/567 recall augumented users by random, augumented_users = [46573, 133231, 583, 51190, 90988, 46965, 34379, 90475, 88626, 125335, 98355, 49202, 96631, 96542, 37534, 111310, 46882, 124048, 56993, 3773, 439, 75765, 55157, 54183, 97784, 52861, 95255, 23389, 40896, 77976, 101437, 134271, 64835, 98956, 75833, 24193, 6052, 102779, 22731, 108632, 42480, 19618, 120706, 72318, 35029, 61688, 104297, 117801, 50072, 11628]
[2024-12-02 19:27:32.577279] user = 114937 Cloud 201/567
[2024-12-02 19:27:32.625272] user = 114937 Local 201/567
[2024-12-02 19:27:32.673913] user = 114937 Local+ 201/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:27:34.117263] user = 114937 MPDA- 201/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5682761413098492
Training on augumented user 46573 0/50 current_auc = 0.5682761413098492
User 46573 AUC after training: 0.5673651179269158
User 46573 does not improve AUC. Reverting changes.
Training on augumented user 133231 1/50 current_auc = 0.5682761413098492
User 133231 AUC after training: 0.5670614434659378
User 133231 does not improve AUC. Reverting changes.
Training on augumented user 583 2/50 current_auc = 0.5682761413098492
User 583 AUC after training: 0.5679724668488714
User 583 does not improve AUC. Reverting changes.
Training on augumented user 51190 3/50 current_auc = 0.5682761413098492
User 51190 AUC after training: 0.568681040591153
User 51190 improves AUC. Keeping the model.
Training on augumented user 90988 4/50 current_auc = 0.568681040591153
User 90988 AUC after training: 0.568681040591153
User 90988 does not improve AUC. Reverting changes.
Training on augumented user 46965 5/50 current_auc = 0.568681040591153
User 46965 AUC after training: 0.5671626682862638
User 46965 does not improve AUC. Reverting changes.
Training on augumented user 34379 6/50 current_auc = 0.568681040591153
User 34379 AUC after training: 0.5679724668488714
User 34379 does not improve AUC. Reverting changes.
Training on augumented user 90475 7/50 current_auc = 0.568681040591153
User 90475 AUC after training: 0.568478590950501
User 90475 does not improve AUC. Reverting changes.
Training on augumented user 88626 8/50 current_auc = 0.568681040591153
User 88626 AUC after training: 0.568579815770827
User 88626 does not improve AUC. Reverting changes.
Training on augumented user 125335 9/50 current_auc = 0.568681040591153
User 125335 AUC after training: 0.5673651179269157
User 125335 does not improve AUC. Reverting changes.
Training on augumented user 98355 10/50 current_auc = 0.568681040591153
User 98355 AUC after training: 0.568883490231805
User 98355 improves AUC. Keeping the model.
Training on augumented user 49202 11/50 current_auc = 0.568883490231805
User 49202 AUC after training: 0.5692883895131086
User 49202 improves AUC. Keeping the model.
Training on augumented user 96631 12/50 current_auc = 0.5692883895131086
User 96631 AUC after training: 0.5700981880757162
User 96631 improves AUC. Keeping the model.
Training on augumented user 96542 13/50 current_auc = 0.5700981880757162
User 96542 AUC after training: 0.5709079866383237
User 96542 improves AUC. Keeping the model.
Training on augumented user 37534 14/50 current_auc = 0.5709079866383237
User 37534 AUC after training: 0.5663528697236562
User 37534 does not improve AUC. Reverting changes.
Training on augumented user 111310 15/50 current_auc = 0.5709079866383237
User 111310 AUC after training: 0.5694908391537604
User 111310 does not improve AUC. Reverting changes.
Training on augumented user 46882 16/50 current_auc = 0.5709079866383237
User 46882 AUC after training: 0.5707055369976719
User 46882 does not improve AUC. Reverting changes.
Training on augumented user 124048 17/50 current_auc = 0.5709079866383237
User 124048 AUC after training: 0.5707055369976719
User 124048 does not improve AUC. Reverting changes.
Training on augumented user 56993 18/50 current_auc = 0.5709079866383237
User 56993 AUC after training: 0.5699969632553903
User 56993 does not improve AUC. Reverting changes.
Training on augumented user 3773 19/50 current_auc = 0.5709079866383237
User 3773 AUC after training: 0.5715153355602793
User 3773 improves AUC. Keeping the model.
Training on augumented user 439 20/50 current_auc = 0.5715153355602793
User 439 AUC after training: 0.570401862536694
User 439 does not improve AUC. Reverting changes.
Training on augumented user 75765 21/50 current_auc = 0.5715153355602793
User 75765 AUC after training: 0.5696932887944124
User 75765 does not improve AUC. Reverting changes.
Training on augumented user 55157 22/50 current_auc = 0.5715153355602793
User 55157 AUC after training: 0.5711104362789755
User 55157 does not improve AUC. Reverting changes.
Training on augumented user 54183 23/50 current_auc = 0.5715153355602793
User 54183 AUC after training: 0.5707055369976719
User 54183 does not improve AUC. Reverting changes.
Training on augumented user 97784 24/50 current_auc = 0.5715153355602793
User 97784 AUC after training: 0.5711104362789756
User 97784 does not improve AUC. Reverting changes.
Training on augumented user 52861 25/50 current_auc = 0.5715153355602793
User 52861 AUC after training: 0.5712116610993017
User 52861 does not improve AUC. Reverting changes.
Training on augumented user 95255 26/50 current_auc = 0.5715153355602793
User 95255 AUC after training: 0.5716165603806054
User 95255 improves AUC. Keeping the model.
Training on augumented user 23389 27/50 current_auc = 0.5716165603806054
User 23389 AUC after training: 0.5727300334041907
User 23389 improves AUC. Keeping the model.
Training on augumented user 40896 28/50 current_auc = 0.5727300334041907
User 40896 AUC after training: 0.5725275837635388
User 40896 does not improve AUC. Reverting changes.
Training on augumented user 77976 29/50 current_auc = 0.5727300334041907
User 77976 AUC after training: 0.5728312582245166
User 77976 improves AUC. Keeping the model.
Training on augumented user 101437 30/50 current_auc = 0.5728312582245166
User 101437 AUC after training: 0.571920234841583
User 101437 does not improve AUC. Reverting changes.
Training on augumented user 134271 31/50 current_auc = 0.5728312582245166
User 134271 AUC after training: 0.5727300334041907
User 134271 does not improve AUC. Reverting changes.
Training on augumented user 64835 32/50 current_auc = 0.5728312582245166
User 64835 AUC after training: 0.5718190100212572
User 64835 does not improve AUC. Reverting changes.
Training on augumented user 98956 33/50 current_auc = 0.5728312582245166
User 98956 AUC after training: 0.5726288085838648
User 98956 does not improve AUC. Reverting changes.
Training on augumented user 75833 34/50 current_auc = 0.5728312582245166
User 75833 AUC after training: 0.5724263589432129
User 75833 does not improve AUC. Reverting changes.
Training on augumented user 24193 35/50 current_auc = 0.5728312582245166
User 24193 AUC after training: 0.572223909302561
User 24193 does not improve AUC. Reverting changes.
Training on augumented user 6052 36/50 current_auc = 0.5728312582245166
User 6052 AUC after training: 0.5737422816074502
User 6052 improves AUC. Keeping the model.
Training on augumented user 102779 37/50 current_auc = 0.5737422816074502
User 102779 AUC after training: 0.5744508553497317
User 102779 improves AUC. Keeping the model.
Training on augumented user 22731 38/50 current_auc = 0.5744508553497317
User 22731 AUC after training: 0.573843506427776
User 22731 does not improve AUC. Reverting changes.
Training on augumented user 108632 39/50 current_auc = 0.5744508553497317
User 108632 AUC after training: 0.5739447312481021
User 108632 does not improve AUC. Reverting changes.
Training on augumented user 42480 40/50 current_auc = 0.5744508553497317
User 42480 AUC after training: 0.5737422816074501
User 42480 does not improve AUC. Reverting changes.
Training on augumented user 19618 41/50 current_auc = 0.5744508553497317
User 19618 AUC after training: 0.5736410567871242
User 19618 does not improve AUC. Reverting changes.
Training on augumented user 120706 42/50 current_auc = 0.5744508553497317
User 120706 AUC after training: 0.5743496305294058
User 120706 does not improve AUC. Reverting changes.
Training on augumented user 72318 43/50 current_auc = 0.5744508553497317
User 72318 AUC after training: 0.5744508553497317
User 72318 does not improve AUC. Reverting changes.
Training on augumented user 35029 44/50 current_auc = 0.5744508553497317
User 35029 AUC after training: 0.5739447312481021
User 35029 does not improve AUC. Reverting changes.
Training on augumented user 61688 45/50 current_auc = 0.5744508553497317
User 61688 AUC after training: 0.5742484057090799
User 61688 does not improve AUC. Reverting changes.
Training on augumented user 104297 46/50 current_auc = 0.5744508553497317
User 104297 AUC after training: 0.5741471808887539
User 104297 does not improve AUC. Reverting changes.
Training on augumented user 117801 47/50 current_auc = 0.5744508553497317
User 117801 AUC after training: 0.5737422816074501
User 117801 does not improve AUC. Reverting changes.
Training on augumented user 50072 48/50 current_auc = 0.5744508553497317
User 50072 AUC after training: 0.5742484057090799
User 50072 does not improve AUC. Reverting changes.
Training on augumented user 11628 49/50 current_auc = 0.5744508553497317
User 11628 AUC after training: 0.5737422816074501
User 11628 does not improve AUC. Reverting changes.
[2024-12-02 19:28:06.660867] start test user 114967 202/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:28:07.104655] start test user 114967 202/567 recall augumented users by random, augumented_users = [5069, 102769, 59786, 23588, 72274, 125688, 39658, 18401, 108585, 6176, 89399, 59881, 7078, 82534, 10289, 55380, 78035, 125926, 33655, 400, 109481, 58521, 64171, 79190, 50618, 10218, 94774, 88942, 20324, 122037, 43779, 107706, 46564, 27195, 104380, 102907, 82236, 76341, 53860, 58016, 4786, 40449, 10518, 123155, 30401, 15034, 25587, 15266, 79906, 68220]
[2024-12-02 19:28:07.120052] user = 114967 Cloud 202/567
[2024-12-02 19:28:07.129822] user = 114967 Local 202/567
[2024-12-02 19:28:07.172353] user = 114967 Local+ 202/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:28:10.026774] user = 114967 MPDA- 202/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.38333333333333336
Training on augumented user 5069 0/50 current_auc = 0.38333333333333336
User 5069 AUC after training: 0.3833333333333333
User 5069 does not improve AUC. Reverting changes.
Training on augumented user 102769 1/50 current_auc = 0.38333333333333336
User 102769 AUC after training: 0.3833333333333333
User 102769 does not improve AUC. Reverting changes.
Training on augumented user 59786 2/50 current_auc = 0.38333333333333336
User 59786 AUC after training: 0.41666666666666663
User 59786 improves AUC. Keeping the model.
Training on augumented user 23588 3/50 current_auc = 0.41666666666666663
User 23588 AUC after training: 0.41666666666666663
User 23588 does not improve AUC. Reverting changes.
Training on augumented user 72274 4/50 current_auc = 0.41666666666666663
User 72274 AUC after training: 0.41666666666666663
User 72274 does not improve AUC. Reverting changes.
Training on augumented user 125688 5/50 current_auc = 0.41666666666666663
User 125688 AUC after training: 0.41666666666666663
User 125688 does not improve AUC. Reverting changes.
Training on augumented user 39658 6/50 current_auc = 0.41666666666666663
User 39658 AUC after training: 0.41666666666666663
User 39658 does not improve AUC. Reverting changes.
Training on augumented user 18401 7/50 current_auc = 0.41666666666666663
User 18401 AUC after training: 0.41666666666666663
User 18401 does not improve AUC. Reverting changes.
Training on augumented user 108585 8/50 current_auc = 0.41666666666666663
User 108585 AUC after training: 0.41666666666666663
User 108585 does not improve AUC. Reverting changes.
Training on augumented user 6176 9/50 current_auc = 0.41666666666666663
User 6176 AUC after training: 0.41666666666666663
User 6176 does not improve AUC. Reverting changes.
Training on augumented user 89399 10/50 current_auc = 0.41666666666666663
User 89399 AUC after training: 0.41666666666666663
User 89399 does not improve AUC. Reverting changes.
Training on augumented user 59881 11/50 current_auc = 0.41666666666666663
User 59881 AUC after training: 0.39999999999999997
User 59881 does not improve AUC. Reverting changes.
Training on augumented user 7078 12/50 current_auc = 0.41666666666666663
User 7078 AUC after training: 0.41666666666666663
User 7078 does not improve AUC. Reverting changes.
Training on augumented user 82534 13/50 current_auc = 0.41666666666666663
User 82534 AUC after training: 0.41666666666666663
User 82534 does not improve AUC. Reverting changes.
Training on augumented user 10289 14/50 current_auc = 0.41666666666666663
User 10289 AUC after training: 0.41666666666666663
User 10289 does not improve AUC. Reverting changes.
Training on augumented user 55380 15/50 current_auc = 0.41666666666666663
User 55380 AUC after training: 0.41666666666666663
User 55380 does not improve AUC. Reverting changes.
Training on augumented user 78035 16/50 current_auc = 0.41666666666666663
User 78035 AUC after training: 0.39999999999999997
User 78035 does not improve AUC. Reverting changes.
Training on augumented user 125926 17/50 current_auc = 0.41666666666666663
User 125926 AUC after training: 0.41666666666666663
User 125926 does not improve AUC. Reverting changes.
Training on augumented user 33655 18/50 current_auc = 0.41666666666666663
User 33655 AUC after training: 0.39999999999999997
User 33655 does not improve AUC. Reverting changes.
Training on augumented user 400 19/50 current_auc = 0.41666666666666663
User 400 AUC after training: 0.4
User 400 does not improve AUC. Reverting changes.
Training on augumented user 109481 20/50 current_auc = 0.41666666666666663
User 109481 AUC after training: 0.3833333333333333
User 109481 does not improve AUC. Reverting changes.
Training on augumented user 58521 21/50 current_auc = 0.41666666666666663
User 58521 AUC after training: 0.41666666666666663
User 58521 does not improve AUC. Reverting changes.
Training on augumented user 64171 22/50 current_auc = 0.41666666666666663
User 64171 AUC after training: 0.41666666666666663
User 64171 does not improve AUC. Reverting changes.
Training on augumented user 79190 23/50 current_auc = 0.41666666666666663
User 79190 AUC after training: 0.41666666666666663
User 79190 does not improve AUC. Reverting changes.
Training on augumented user 50618 24/50 current_auc = 0.41666666666666663
User 50618 AUC after training: 0.41666666666666663
User 50618 does not improve AUC. Reverting changes.
Training on augumented user 10218 25/50 current_auc = 0.41666666666666663
User 10218 AUC after training: 0.41666666666666663
User 10218 does not improve AUC. Reverting changes.
Training on augumented user 94774 26/50 current_auc = 0.41666666666666663
User 94774 AUC after training: 0.41666666666666663
User 94774 does not improve AUC. Reverting changes.
Training on augumented user 88942 27/50 current_auc = 0.41666666666666663
User 88942 AUC after training: 0.41666666666666663
User 88942 does not improve AUC. Reverting changes.
Training on augumented user 20324 28/50 current_auc = 0.41666666666666663
User 20324 AUC after training: 0.41666666666666663
User 20324 does not improve AUC. Reverting changes.
Training on augumented user 122037 29/50 current_auc = 0.41666666666666663
User 122037 AUC after training: 0.41666666666666663
User 122037 does not improve AUC. Reverting changes.
Training on augumented user 43779 30/50 current_auc = 0.41666666666666663
User 43779 AUC after training: 0.39999999999999997
User 43779 does not improve AUC. Reverting changes.
Training on augumented user 107706 31/50 current_auc = 0.41666666666666663
User 107706 AUC after training: 0.41666666666666663
User 107706 does not improve AUC. Reverting changes.
Training on augumented user 46564 32/50 current_auc = 0.41666666666666663
User 46564 AUC after training: 0.41666666666666663
User 46564 does not improve AUC. Reverting changes.
Training on augumented user 27195 33/50 current_auc = 0.41666666666666663
User 27195 AUC after training: 0.3833333333333333
User 27195 does not improve AUC. Reverting changes.
Training on augumented user 104380 34/50 current_auc = 0.41666666666666663
User 104380 AUC after training: 0.41666666666666663
User 104380 does not improve AUC. Reverting changes.
Training on augumented user 102907 35/50 current_auc = 0.41666666666666663
User 102907 AUC after training: 0.39999999999999997
User 102907 does not improve AUC. Reverting changes.
Training on augumented user 82236 36/50 current_auc = 0.41666666666666663
User 82236 AUC after training: 0.41666666666666663
User 82236 does not improve AUC. Reverting changes.
Training on augumented user 76341 37/50 current_auc = 0.41666666666666663
User 76341 AUC after training: 0.41666666666666663
User 76341 does not improve AUC. Reverting changes.
Training on augumented user 53860 38/50 current_auc = 0.41666666666666663
User 53860 AUC after training: 0.41666666666666663
User 53860 does not improve AUC. Reverting changes.
Training on augumented user 58016 39/50 current_auc = 0.41666666666666663
User 58016 AUC after training: 0.4
User 58016 does not improve AUC. Reverting changes.
Training on augumented user 4786 40/50 current_auc = 0.41666666666666663
User 4786 AUC after training: 0.41666666666666663
User 4786 does not improve AUC. Reverting changes.
Training on augumented user 40449 41/50 current_auc = 0.41666666666666663
User 40449 AUC after training: 0.41666666666666663
User 40449 does not improve AUC. Reverting changes.
Training on augumented user 10518 42/50 current_auc = 0.41666666666666663
User 10518 AUC after training: 0.41666666666666663
User 10518 does not improve AUC. Reverting changes.
Training on augumented user 123155 43/50 current_auc = 0.41666666666666663
User 123155 AUC after training: 0.41666666666666663
User 123155 does not improve AUC. Reverting changes.
Training on augumented user 30401 44/50 current_auc = 0.41666666666666663
User 30401 AUC after training: 0.41666666666666663
User 30401 does not improve AUC. Reverting changes.
Training on augumented user 15034 45/50 current_auc = 0.41666666666666663
User 15034 AUC after training: 0.41666666666666663
User 15034 does not improve AUC. Reverting changes.
Training on augumented user 25587 46/50 current_auc = 0.41666666666666663
User 25587 AUC after training: 0.41666666666666663
User 25587 does not improve AUC. Reverting changes.
Training on augumented user 15266 47/50 current_auc = 0.41666666666666663
User 15266 AUC after training: 0.4
User 15266 does not improve AUC. Reverting changes.
Training on augumented user 79906 48/50 current_auc = 0.41666666666666663
User 79906 AUC after training: 0.41666666666666663
User 79906 does not improve AUC. Reverting changes.
Training on augumented user 68220 49/50 current_auc = 0.41666666666666663
User 68220 AUC after training: 0.41666666666666663
User 68220 does not improve AUC. Reverting changes.
[2024-12-02 19:28:34.709108] start test user 114993 203/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:28:35.157375] start test user 114993 203/567 recall augumented users by random, augumented_users = [131195, 1078, 78207, 136926, 132786, 110314, 137959, 117470, 123928, 103399, 22895, 27665, 33044, 72499, 28252, 83308, 79594, 18886, 70576, 9635, 2622, 67897, 72795, 30994, 56318, 347, 5258, 81779, 71659, 123982, 11296, 82945, 134177, 118061, 101157, 102888, 2386, 26856, 17042, 95499, 103723, 85640, 91163, 76459, 110840, 110695, 39054, 33785, 85904, 81156]
[2024-12-02 19:28:35.172572] user = 114993 Cloud 203/567
[2024-12-02 19:28:35.191117] user = 114993 Local 203/567
[2024-12-02 19:28:35.238272] user = 114993 Local+ 203/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:28:37.443042] user = 114993 MPDA- 203/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.537098623853211
Training on augumented user 131195 0/50 current_auc = 0.537098623853211
User 131195 AUC after training: 0.5375
User 131195 improves AUC. Keeping the model.
Training on augumented user 1078 1/50 current_auc = 0.5375
User 1078 AUC after training: 0.5380733944954128
User 1078 improves AUC. Keeping the model.
Training on augumented user 78207 2/50 current_auc = 0.5380733944954128
User 78207 AUC after training: 0.5377866972477064
User 78207 does not improve AUC. Reverting changes.
Training on augumented user 136926 3/50 current_auc = 0.5380733944954128
User 136926 AUC after training: 0.5376720183486239
User 136926 does not improve AUC. Reverting changes.
Training on augumented user 132786 4/50 current_auc = 0.5380733944954128
User 132786 AUC after training: 0.5384747706422018
User 132786 improves AUC. Keeping the model.
Training on augumented user 110314 5/50 current_auc = 0.5384747706422018
User 110314 AUC after training: 0.5392775229357799
User 110314 improves AUC. Keeping the model.
Training on augumented user 137959 6/50 current_auc = 0.5392775229357799
User 137959 AUC after training: 0.5393922018348625
User 137959 improves AUC. Keeping the model.
Training on augumented user 117470 7/50 current_auc = 0.5393922018348625
User 117470 AUC after training: 0.5379587155963304
User 117470 does not improve AUC. Reverting changes.
Training on augumented user 123928 8/50 current_auc = 0.5393922018348625
User 123928 AUC after training: 0.5378440366972478
User 123928 does not improve AUC. Reverting changes.
Training on augumented user 103399 9/50 current_auc = 0.5393922018348625
User 103399 AUC after training: 0.5392775229357798
User 103399 does not improve AUC. Reverting changes.
Training on augumented user 22895 10/50 current_auc = 0.5393922018348625
User 22895 AUC after training: 0.5400802752293579
User 22895 improves AUC. Keeping the model.
Training on augumented user 27665 11/50 current_auc = 0.5400802752293579
User 27665 AUC after training: 0.5396788990825688
User 27665 does not improve AUC. Reverting changes.
Training on augumented user 33044 12/50 current_auc = 0.5400802752293579
User 33044 AUC after training: 0.5395642201834863
User 33044 does not improve AUC. Reverting changes.
Training on augumented user 72499 13/50 current_auc = 0.5400802752293579
User 72499 AUC after training: 0.5381307339449541
User 72499 does not improve AUC. Reverting changes.
Training on augumented user 28252 14/50 current_auc = 0.5400802752293579
User 28252 AUC after training: 0.5405963302752295
User 28252 improves AUC. Keeping the model.
Training on augumented user 83308 15/50 current_auc = 0.5405963302752295
User 83308 AUC after training: 0.5405963302752294
User 83308 does not improve AUC. Reverting changes.
Training on augumented user 79594 16/50 current_auc = 0.5405963302752295
User 79594 AUC after training: 0.5397935779816514
User 79594 does not improve AUC. Reverting changes.
Training on augumented user 18886 17/50 current_auc = 0.5405963302752295
User 18886 AUC after training: 0.5402522935779817
User 18886 does not improve AUC. Reverting changes.
Training on augumented user 70576 18/50 current_auc = 0.5405963302752295
User 70576 AUC after training: 0.5424311926605505
User 70576 improves AUC. Keeping the model.
Training on augumented user 9635 19/50 current_auc = 0.5424311926605505
User 9635 AUC after training: 0.5423165137614678
User 9635 does not improve AUC. Reverting changes.
Training on augumented user 2622 20/50 current_auc = 0.5424311926605505
User 2622 AUC after training: 0.5434059633027524
User 2622 improves AUC. Keeping the model.
Training on augumented user 67897 21/50 current_auc = 0.5434059633027524
User 67897 AUC after training: 0.5426032110091744
User 67897 does not improve AUC. Reverting changes.
Training on augumented user 72795 22/50 current_auc = 0.5434059633027524
User 72795 AUC after training: 0.5436926605504587
User 72795 improves AUC. Keeping the model.
Training on augumented user 30994 23/50 current_auc = 0.5436926605504587
User 30994 AUC after training: 0.5422018348623854
User 30994 does not improve AUC. Reverting changes.
Training on augumented user 56318 24/50 current_auc = 0.5436926605504587
User 56318 AUC after training: 0.5426032110091743
User 56318 does not improve AUC. Reverting changes.
Training on augumented user 347 25/50 current_auc = 0.5436926605504587
User 347 AUC after training: 0.5424311926605504
User 347 does not improve AUC. Reverting changes.
Training on augumented user 5258 26/50 current_auc = 0.5436926605504587
User 5258 AUC after training: 0.5435779816513762
User 5258 does not improve AUC. Reverting changes.
Training on augumented user 81779 27/50 current_auc = 0.5436926605504587
User 81779 AUC after training: 0.543348623853211
User 81779 does not improve AUC. Reverting changes.
Training on augumented user 71659 28/50 current_auc = 0.5436926605504587
User 71659 AUC after training: 0.5430045871559633
User 71659 does not improve AUC. Reverting changes.
Training on augumented user 123982 29/50 current_auc = 0.5436926605504587
User 123982 AUC after training: 0.5435779816513762
User 123982 does not improve AUC. Reverting changes.
Training on augumented user 11296 30/50 current_auc = 0.5436926605504587
User 11296 AUC after training: 0.5430045871559633
User 11296 does not improve AUC. Reverting changes.
Training on augumented user 82945 31/50 current_auc = 0.5436926605504587
User 82945 AUC after training: 0.5435779816513762
User 82945 does not improve AUC. Reverting changes.
Training on augumented user 134177 32/50 current_auc = 0.5436926605504587
User 134177 AUC after training: 0.5438073394495413
User 134177 improves AUC. Keeping the model.
Training on augumented user 118061 33/50 current_auc = 0.5438073394495413
User 118061 AUC after training: 0.5420871559633028
User 118061 does not improve AUC. Reverting changes.
Training on augumented user 101157 34/50 current_auc = 0.5438073394495413
User 101157 AUC after training: 0.5428899082568808
User 101157 does not improve AUC. Reverting changes.
Training on augumented user 102888 35/50 current_auc = 0.5438073394495413
User 102888 AUC after training: 0.5401376146788991
User 102888 does not improve AUC. Reverting changes.
Training on augumented user 2386 36/50 current_auc = 0.5438073394495413
User 2386 AUC after training: 0.5448394495412844
User 2386 improves AUC. Keeping the model.
Training on augumented user 26856 37/50 current_auc = 0.5448394495412844
User 26856 AUC after training: 0.544954128440367
User 26856 improves AUC. Keeping the model.
Training on augumented user 17042 38/50 current_auc = 0.544954128440367
User 17042 AUC after training: 0.5443807339449541
User 17042 does not improve AUC. Reverting changes.
Training on augumented user 95499 39/50 current_auc = 0.544954128440367
User 95499 AUC after training: 0.5449541284403671
User 95499 improves AUC. Keeping the model.
Training on augumented user 103723 40/50 current_auc = 0.5449541284403671
User 103723 AUC after training: 0.5447247706422018
User 103723 does not improve AUC. Reverting changes.
Training on augumented user 85640 41/50 current_auc = 0.5449541284403671
User 85640 AUC after training: 0.5444954128440367
User 85640 does not improve AUC. Reverting changes.
Training on augumented user 91163 42/50 current_auc = 0.5449541284403671
User 91163 AUC after training: 0.545355504587156
User 91163 improves AUC. Keeping the model.
Training on augumented user 76459 43/50 current_auc = 0.545355504587156
User 76459 AUC after training: 0.5435779816513762
User 76459 does not improve AUC. Reverting changes.
Training on augumented user 110840 44/50 current_auc = 0.545355504587156
User 110840 AUC after training: 0.544151376146789
User 110840 does not improve AUC. Reverting changes.
Training on augumented user 110695 45/50 current_auc = 0.545355504587156
User 110695 AUC after training: 0.5450688073394495
User 110695 does not improve AUC. Reverting changes.
Training on augumented user 39054 46/50 current_auc = 0.545355504587156
User 39054 AUC after training: 0.5442660550458717
User 39054 does not improve AUC. Reverting changes.
Training on augumented user 33785 47/50 current_auc = 0.545355504587156
User 33785 AUC after training: 0.5448394495412844
User 33785 does not improve AUC. Reverting changes.
Training on augumented user 85904 48/50 current_auc = 0.545355504587156
User 85904 AUC after training: 0.544954128440367
User 85904 does not improve AUC. Reverting changes.
Training on augumented user 81156 49/50 current_auc = 0.545355504587156
User 81156 AUC after training: 0.543348623853211
User 81156 does not improve AUC. Reverting changes.
[2024-12-02 19:29:11.056314] start test user 115046 204/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:29:11.708238] start test user 115046 204/567 recall augumented users by random, augumented_users = [137042, 42602, 114380, 103552, 97780, 99443, 38749, 109778, 19032, 125662, 75146, 37033, 117977, 3927, 62500, 55143, 56340, 126762, 11591, 101284, 52821, 22442, 6344, 16763, 88526, 50166, 56228, 46630, 56, 66053, 77782, 84098, 16175, 89699, 41448, 131590, 72696, 33657, 106374, 29600, 49249, 16123, 10128, 119882, 136708, 70368, 47591, 53583, 93274, 50609]
[2024-12-02 19:29:11.724040] user = 115046 Cloud 204/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:29:11.730951] user = 115046 Local 204/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:29:11.783991] user = 115046 Local+ 204/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:29:14.105464] user = 115046 MPDA- 204/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 137042 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137042 AUC after training: 0.5
User 137042 does not improve AUC. Reverting changes.
Training on augumented user 42602 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42602 AUC after training: 0.5
User 42602 does not improve AUC. Reverting changes.
Training on augumented user 114380 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114380 AUC after training: 0.5
User 114380 does not improve AUC. Reverting changes.
Training on augumented user 103552 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103552 AUC after training: 0.5
User 103552 does not improve AUC. Reverting changes.
Training on augumented user 97780 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97780 AUC after training: 0.5
User 97780 does not improve AUC. Reverting changes.
Training on augumented user 99443 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99443 AUC after training: 0.5
User 99443 does not improve AUC. Reverting changes.
Training on augumented user 38749 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38749 AUC after training: 0.5
User 38749 does not improve AUC. Reverting changes.
Training on augumented user 109778 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109778 AUC after training: 0.5
User 109778 does not improve AUC. Reverting changes.
Training on augumented user 19032 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19032 AUC after training: 0.5
User 19032 does not improve AUC. Reverting changes.
Training on augumented user 125662 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 125662 AUC after training: 0.5
User 125662 does not improve AUC. Reverting changes.
Training on augumented user 75146 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75146 AUC after training: 0.5
User 75146 does not improve AUC. Reverting changes.
Training on augumented user 37033 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37033 AUC after training: 0.5
User 37033 does not improve AUC. Reverting changes.
Training on augumented user 117977 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117977 AUC after training: 0.5
User 117977 does not improve AUC. Reverting changes.
Training on augumented user 3927 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3927 AUC after training: 0.5
User 3927 does not improve AUC. Reverting changes.
Training on augumented user 62500 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62500 AUC after training: 0.5
User 62500 does not improve AUC. Reverting changes.
Training on augumented user 55143 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55143 AUC after training: 0.5
User 55143 does not improve AUC. Reverting changes.
Training on augumented user 56340 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56340 AUC after training: 0.5
User 56340 does not improve AUC. Reverting changes.
Training on augumented user 126762 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126762 AUC after training: 0.5
User 126762 does not improve AUC. Reverting changes.
Training on augumented user 11591 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11591 AUC after training: 0.5
User 11591 does not improve AUC. Reverting changes.
Training on augumented user 101284 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101284 AUC after training: 0.5
User 101284 does not improve AUC. Reverting changes.
Training on augumented user 52821 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 52821 AUC after training: 0.5
User 52821 does not improve AUC. Reverting changes.
Training on augumented user 22442 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22442 AUC after training: 0.5
User 22442 does not improve AUC. Reverting changes.
Training on augumented user 6344 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6344 AUC after training: 0.5
User 6344 does not improve AUC. Reverting changes.
Training on augumented user 16763 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16763 AUC after training: 0.5
User 16763 does not improve AUC. Reverting changes.
Training on augumented user 88526 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88526 AUC after training: 0.5
User 88526 does not improve AUC. Reverting changes.
Training on augumented user 50166 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50166 AUC after training: 0.5
User 50166 does not improve AUC. Reverting changes.
Training on augumented user 56228 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56228 AUC after training: 0.5
User 56228 does not improve AUC. Reverting changes.
Training on augumented user 46630 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 46630 AUC after training: 0.5
User 46630 does not improve AUC. Reverting changes.
Training on augumented user 56 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56 AUC after training: 0.5
User 56 does not improve AUC. Reverting changes.
Training on augumented user 66053 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66053 AUC after training: 0.5
User 66053 does not improve AUC. Reverting changes.
Training on augumented user 77782 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77782 AUC after training: 0.5
User 77782 does not improve AUC. Reverting changes.
Training on augumented user 84098 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84098 AUC after training: 0.5
User 84098 does not improve AUC. Reverting changes.
Training on augumented user 16175 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16175 AUC after training: 0.5
User 16175 does not improve AUC. Reverting changes.
Training on augumented user 89699 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89699 AUC after training: 0.5
User 89699 does not improve AUC. Reverting changes.
Training on augumented user 41448 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41448 AUC after training: 0.5
User 41448 does not improve AUC. Reverting changes.
Training on augumented user 131590 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131590 AUC after training: 0.5
User 131590 does not improve AUC. Reverting changes.
Training on augumented user 72696 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72696 AUC after training: 0.5
User 72696 does not improve AUC. Reverting changes.
Training on augumented user 33657 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33657 AUC after training: 0.5
User 33657 does not improve AUC. Reverting changes.
Training on augumented user 106374 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106374 AUC after training: 0.5
User 106374 does not improve AUC. Reverting changes.
Training on augumented user 29600 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29600 AUC after training: 0.5
User 29600 does not improve AUC. Reverting changes.
Training on augumented user 49249 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49249 AUC after training: 0.5
User 49249 does not improve AUC. Reverting changes.
Training on augumented user 16123 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16123 AUC after training: 0.5
User 16123 does not improve AUC. Reverting changes.
Training on augumented user 10128 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10128 AUC after training: 0.5
User 10128 does not improve AUC. Reverting changes.
Training on augumented user 119882 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 119882 AUC after training: 0.5
User 119882 does not improve AUC. Reverting changes.
Training on augumented user 136708 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136708 AUC after training: 0.5
User 136708 does not improve AUC. Reverting changes.
Training on augumented user 70368 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70368 AUC after training: 0.5
User 70368 does not improve AUC. Reverting changes.
Training on augumented user 47591 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47591 AUC after training: 0.5
User 47591 does not improve AUC. Reverting changes.
Training on augumented user 53583 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53583 AUC after training: 0.5
User 53583 does not improve AUC. Reverting changes.
Training on augumented user 93274 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93274 AUC after training: 0.5
User 93274 does not improve AUC. Reverting changes.
Training on augumented user 50609 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50609 AUC after training: 0.5
User 50609 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:29:45.170149] start test user 115048 205/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:29:45.945800] start test user 115048 205/567 recall augumented users by random, augumented_users = [14896, 122507, 43612, 49422, 91016, 7717, 16844, 90933, 19868, 73558, 90127, 100941, 85198, 57647, 111065, 62275, 116493, 44899, 12599, 130488, 48301, 9000, 113719, 138372, 97720, 99667, 68858, 33372, 80611, 79787, 79962, 89686, 6413, 78836, 61178, 97043, 20514, 3855, 51545, 74962, 39323, 130740, 59494, 36460, 28774, 133582, 18947, 91455, 51609, 61436]
[2024-12-02 19:29:45.983356] user = 115048 Cloud 205/567
[2024-12-02 19:29:46.004866] user = 115048 Local 205/567
[2024-12-02 19:29:46.065615] user = 115048 Local+ 205/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:29:48.496205] user = 115048 MPDA- 205/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6218487394957983
Training on augumented user 14896 0/50 current_auc = 0.6218487394957983
User 14896 AUC after training: 0.6386554621848739
User 14896 improves AUC. Keeping the model.
Training on augumented user 122507 1/50 current_auc = 0.6386554621848739
User 122507 AUC after training: 0.6470588235294118
User 122507 improves AUC. Keeping the model.
Training on augumented user 43612 2/50 current_auc = 0.6470588235294118
User 43612 AUC after training: 0.6386554621848739
User 43612 does not improve AUC. Reverting changes.
Training on augumented user 49422 3/50 current_auc = 0.6470588235294118
User 49422 AUC after training: 0.6554621848739496
User 49422 improves AUC. Keeping the model.
Training on augumented user 91016 4/50 current_auc = 0.6554621848739496
User 91016 AUC after training: 0.6638655462184875
User 91016 improves AUC. Keeping the model.
Training on augumented user 7717 5/50 current_auc = 0.6638655462184875
User 7717 AUC after training: 0.6470588235294118
User 7717 does not improve AUC. Reverting changes.
Training on augumented user 16844 6/50 current_auc = 0.6638655462184875
User 16844 AUC after training: 0.6470588235294118
User 16844 does not improve AUC. Reverting changes.
Training on augumented user 90933 7/50 current_auc = 0.6638655462184875
User 90933 AUC after training: 0.6722689075630253
User 90933 improves AUC. Keeping the model.
Training on augumented user 19868 8/50 current_auc = 0.6722689075630253
User 19868 AUC after training: 0.680672268907563
User 19868 improves AUC. Keeping the model.
Training on augumented user 73558 9/50 current_auc = 0.680672268907563
User 73558 AUC after training: 0.680672268907563
User 73558 does not improve AUC. Reverting changes.
Training on augumented user 90127 10/50 current_auc = 0.680672268907563
User 90127 AUC after training: 0.6722689075630253
User 90127 does not improve AUC. Reverting changes.
Training on augumented user 100941 11/50 current_auc = 0.680672268907563
User 100941 AUC after training: 0.6722689075630253
User 100941 does not improve AUC. Reverting changes.
Training on augumented user 85198 12/50 current_auc = 0.680672268907563
User 85198 AUC after training: 0.680672268907563
User 85198 does not improve AUC. Reverting changes.
Training on augumented user 57647 13/50 current_auc = 0.680672268907563
User 57647 AUC after training: 0.6722689075630253
User 57647 does not improve AUC. Reverting changes.
Training on augumented user 111065 14/50 current_auc = 0.680672268907563
User 111065 AUC after training: 0.6554621848739497
User 111065 does not improve AUC. Reverting changes.
Training on augumented user 62275 15/50 current_auc = 0.680672268907563
User 62275 AUC after training: 0.6722689075630253
User 62275 does not improve AUC. Reverting changes.
Training on augumented user 116493 16/50 current_auc = 0.680672268907563
User 116493 AUC after training: 0.680672268907563
User 116493 does not improve AUC. Reverting changes.
Training on augumented user 44899 17/50 current_auc = 0.680672268907563
User 44899 AUC after training: 0.6722689075630253
User 44899 does not improve AUC. Reverting changes.
Training on augumented user 12599 18/50 current_auc = 0.680672268907563
User 12599 AUC after training: 0.680672268907563
User 12599 does not improve AUC. Reverting changes.
Training on augumented user 130488 19/50 current_auc = 0.680672268907563
User 130488 AUC after training: 0.680672268907563
User 130488 does not improve AUC. Reverting changes.
Training on augumented user 48301 20/50 current_auc = 0.680672268907563
User 48301 AUC after training: 0.680672268907563
User 48301 does not improve AUC. Reverting changes.
Training on augumented user 9000 21/50 current_auc = 0.680672268907563
User 9000 AUC after training: 0.680672268907563
User 9000 does not improve AUC. Reverting changes.
Training on augumented user 113719 22/50 current_auc = 0.680672268907563
User 113719 AUC after training: 0.680672268907563
User 113719 does not improve AUC. Reverting changes.
Training on augumented user 138372 23/50 current_auc = 0.680672268907563
User 138372 AUC after training: 0.680672268907563
User 138372 does not improve AUC. Reverting changes.
Training on augumented user 97720 24/50 current_auc = 0.680672268907563
User 97720 AUC after training: 0.680672268907563
User 97720 does not improve AUC. Reverting changes.
Training on augumented user 99667 25/50 current_auc = 0.680672268907563
User 99667 AUC after training: 0.680672268907563
User 99667 does not improve AUC. Reverting changes.
Training on augumented user 68858 26/50 current_auc = 0.680672268907563
User 68858 AUC after training: 0.6722689075630253
User 68858 does not improve AUC. Reverting changes.
Training on augumented user 33372 27/50 current_auc = 0.680672268907563
User 33372 AUC after training: 0.680672268907563
User 33372 does not improve AUC. Reverting changes.
Training on augumented user 80611 28/50 current_auc = 0.680672268907563
User 80611 AUC after training: 0.680672268907563
User 80611 does not improve AUC. Reverting changes.
Training on augumented user 79787 29/50 current_auc = 0.680672268907563
User 79787 AUC after training: 0.680672268907563
User 79787 does not improve AUC. Reverting changes.
Training on augumented user 79962 30/50 current_auc = 0.680672268907563
User 79962 AUC after training: 0.680672268907563
User 79962 does not improve AUC. Reverting changes.
Training on augumented user 89686 31/50 current_auc = 0.680672268907563
User 89686 AUC after training: 0.680672268907563
User 89686 does not improve AUC. Reverting changes.
Training on augumented user 6413 32/50 current_auc = 0.680672268907563
User 6413 AUC after training: 0.680672268907563
User 6413 does not improve AUC. Reverting changes.
Training on augumented user 78836 33/50 current_auc = 0.680672268907563
User 78836 AUC after training: 0.680672268907563
User 78836 does not improve AUC. Reverting changes.
Training on augumented user 61178 34/50 current_auc = 0.680672268907563
User 61178 AUC after training: 0.680672268907563
User 61178 does not improve AUC. Reverting changes.
Training on augumented user 97043 35/50 current_auc = 0.680672268907563
User 97043 AUC after training: 0.680672268907563
User 97043 does not improve AUC. Reverting changes.
Training on augumented user 20514 36/50 current_auc = 0.680672268907563
User 20514 AUC after training: 0.680672268907563
User 20514 does not improve AUC. Reverting changes.
Training on augumented user 3855 37/50 current_auc = 0.680672268907563
User 3855 AUC after training: 0.680672268907563
User 3855 does not improve AUC. Reverting changes.
Training on augumented user 51545 38/50 current_auc = 0.680672268907563
User 51545 AUC after training: 0.680672268907563
User 51545 does not improve AUC. Reverting changes.
Training on augumented user 74962 39/50 current_auc = 0.680672268907563
User 74962 AUC after training: 0.6722689075630253
User 74962 does not improve AUC. Reverting changes.
Training on augumented user 39323 40/50 current_auc = 0.680672268907563
User 39323 AUC after training: 0.680672268907563
User 39323 does not improve AUC. Reverting changes.
Training on augumented user 130740 41/50 current_auc = 0.680672268907563
User 130740 AUC after training: 0.680672268907563
User 130740 does not improve AUC. Reverting changes.
Training on augumented user 59494 42/50 current_auc = 0.680672268907563
User 59494 AUC after training: 0.680672268907563
User 59494 does not improve AUC. Reverting changes.
Training on augumented user 36460 43/50 current_auc = 0.680672268907563
User 36460 AUC after training: 0.680672268907563
User 36460 does not improve AUC. Reverting changes.
Training on augumented user 28774 44/50 current_auc = 0.680672268907563
User 28774 AUC after training: 0.680672268907563
User 28774 does not improve AUC. Reverting changes.
Training on augumented user 133582 45/50 current_auc = 0.680672268907563
User 133582 AUC after training: 0.6470588235294118
User 133582 does not improve AUC. Reverting changes.
Training on augumented user 18947 46/50 current_auc = 0.680672268907563
User 18947 AUC after training: 0.680672268907563
User 18947 does not improve AUC. Reverting changes.
Training on augumented user 91455 47/50 current_auc = 0.680672268907563
User 91455 AUC after training: 0.680672268907563
User 91455 does not improve AUC. Reverting changes.
Training on augumented user 51609 48/50 current_auc = 0.680672268907563
User 51609 AUC after training: 0.680672268907563
User 51609 does not improve AUC. Reverting changes.
Training on augumented user 61436 49/50 current_auc = 0.680672268907563
User 61436 AUC after training: 0.680672268907563
User 61436 does not improve AUC. Reverting changes.
[2024-12-02 19:30:14.265052] start test user 115055 206/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:30:14.800457] start test user 115055 206/567 recall augumented users by random, augumented_users = [108792, 131687, 94396, 45180, 87234, 46700, 10747, 103178, 113991, 51548, 25681, 128767, 81721, 125066, 38610, 78861, 55744, 69764, 43525, 59180, 105670, 100985, 132905, 76326, 40267, 9399, 72311, 8808, 11575, 16358, 102439, 1152, 94938, 13901, 124095, 2195, 27309, 126457, 33688, 80156, 38851, 1170, 76771, 110039, 98360, 72067, 58142, 104578, 116724, 36630]
[2024-12-02 19:30:14.816023] user = 115055 Cloud 206/567
[2024-12-02 19:30:14.826749] user = 115055 Local 206/567
[2024-12-02 19:30:14.970322] user = 115055 Local+ 206/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:30:18.189930] user = 115055 MPDA- 206/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6497975708502024
Training on augumented user 108792 0/50 current_auc = 0.6497975708502024
User 108792 AUC after training: 0.6578947368421053
User 108792 improves AUC. Keeping the model.
Training on augumented user 131687 1/50 current_auc = 0.6578947368421053
User 131687 AUC after training: 0.6578947368421053
User 131687 does not improve AUC. Reverting changes.
Training on augumented user 94396 2/50 current_auc = 0.6578947368421053
User 94396 AUC after training: 0.6578947368421053
User 94396 does not improve AUC. Reverting changes.
Training on augumented user 45180 3/50 current_auc = 0.6578947368421053
User 45180 AUC after training: 0.6578947368421053
User 45180 does not improve AUC. Reverting changes.
Training on augumented user 87234 4/50 current_auc = 0.6578947368421053
User 87234 AUC after training: 0.6578947368421053
User 87234 does not improve AUC. Reverting changes.
Training on augumented user 46700 5/50 current_auc = 0.6578947368421053
User 46700 AUC after training: 0.6538461538461539
User 46700 does not improve AUC. Reverting changes.
Training on augumented user 10747 6/50 current_auc = 0.6578947368421053
User 10747 AUC after training: 0.6578947368421053
User 10747 does not improve AUC. Reverting changes.
Training on augumented user 103178 7/50 current_auc = 0.6578947368421053
User 103178 AUC after training: 0.6578947368421053
User 103178 does not improve AUC. Reverting changes.
Training on augumented user 113991 8/50 current_auc = 0.6578947368421053
User 113991 AUC after training: 0.6659919028340081
User 113991 improves AUC. Keeping the model.
Training on augumented user 51548 9/50 current_auc = 0.6659919028340081
User 51548 AUC after training: 0.6659919028340081
User 51548 does not improve AUC. Reverting changes.
Training on augumented user 25681 10/50 current_auc = 0.6659919028340081
User 25681 AUC after training: 0.6659919028340081
User 25681 does not improve AUC. Reverting changes.
Training on augumented user 128767 11/50 current_auc = 0.6659919028340081
User 128767 AUC after training: 0.6659919028340081
User 128767 does not improve AUC. Reverting changes.
Training on augumented user 81721 12/50 current_auc = 0.6659919028340081
User 81721 AUC after training: 0.6659919028340081
User 81721 does not improve AUC. Reverting changes.
Training on augumented user 125066 13/50 current_auc = 0.6659919028340081
User 125066 AUC after training: 0.6659919028340081
User 125066 does not improve AUC. Reverting changes.
Training on augumented user 38610 14/50 current_auc = 0.6659919028340081
User 38610 AUC after training: 0.6659919028340081
User 38610 does not improve AUC. Reverting changes.
Training on augumented user 78861 15/50 current_auc = 0.6659919028340081
User 78861 AUC after training: 0.6619433198380567
User 78861 does not improve AUC. Reverting changes.
Training on augumented user 55744 16/50 current_auc = 0.6659919028340081
User 55744 AUC after training: 0.6659919028340081
User 55744 does not improve AUC. Reverting changes.
Training on augumented user 69764 17/50 current_auc = 0.6659919028340081
User 69764 AUC after training: 0.6659919028340081
User 69764 does not improve AUC. Reverting changes.
Training on augumented user 43525 18/50 current_auc = 0.6659919028340081
User 43525 AUC after training: 0.6639676113360323
User 43525 does not improve AUC. Reverting changes.
Training on augumented user 59180 19/50 current_auc = 0.6659919028340081
User 59180 AUC after training: 0.6659919028340081
User 59180 does not improve AUC. Reverting changes.
Training on augumented user 105670 20/50 current_auc = 0.6659919028340081
User 105670 AUC after training: 0.6659919028340081
User 105670 does not improve AUC. Reverting changes.
Training on augumented user 100985 21/50 current_auc = 0.6659919028340081
User 100985 AUC after training: 0.6659919028340081
User 100985 does not improve AUC. Reverting changes.
Training on augumented user 132905 22/50 current_auc = 0.6659919028340081
User 132905 AUC after training: 0.6659919028340081
User 132905 does not improve AUC. Reverting changes.
Training on augumented user 76326 23/50 current_auc = 0.6659919028340081
User 76326 AUC after training: 0.6659919028340081
User 76326 does not improve AUC. Reverting changes.
Training on augumented user 40267 24/50 current_auc = 0.6659919028340081
User 40267 AUC after training: 0.6659919028340081
User 40267 does not improve AUC. Reverting changes.
Training on augumented user 9399 25/50 current_auc = 0.6659919028340081
User 9399 AUC after training: 0.6659919028340081
User 9399 does not improve AUC. Reverting changes.
Training on augumented user 72311 26/50 current_auc = 0.6659919028340081
User 72311 AUC after training: 0.6659919028340081
User 72311 does not improve AUC. Reverting changes.
Training on augumented user 8808 27/50 current_auc = 0.6659919028340081
User 8808 AUC after training: 0.6659919028340081
User 8808 does not improve AUC. Reverting changes.
Training on augumented user 11575 28/50 current_auc = 0.6659919028340081
User 11575 AUC after training: 0.6659919028340081
User 11575 does not improve AUC. Reverting changes.
Training on augumented user 16358 29/50 current_auc = 0.6659919028340081
User 16358 AUC after training: 0.6659919028340081
User 16358 does not improve AUC. Reverting changes.
Training on augumented user 102439 30/50 current_auc = 0.6659919028340081
User 102439 AUC after training: 0.6659919028340081
User 102439 does not improve AUC. Reverting changes.
Training on augumented user 1152 31/50 current_auc = 0.6659919028340081
User 1152 AUC after training: 0.6659919028340081
User 1152 does not improve AUC. Reverting changes.
Training on augumented user 94938 32/50 current_auc = 0.6659919028340081
User 94938 AUC after training: 0.6659919028340081
User 94938 does not improve AUC. Reverting changes.
Training on augumented user 13901 33/50 current_auc = 0.6659919028340081
User 13901 AUC after training: 0.6659919028340081
User 13901 does not improve AUC. Reverting changes.
Training on augumented user 124095 34/50 current_auc = 0.6659919028340081
User 124095 AUC after training: 0.6659919028340081
User 124095 does not improve AUC. Reverting changes.
Training on augumented user 2195 35/50 current_auc = 0.6659919028340081
User 2195 AUC after training: 0.6659919028340081
User 2195 does not improve AUC. Reverting changes.
Training on augumented user 27309 36/50 current_auc = 0.6659919028340081
User 27309 AUC after training: 0.6659919028340081
User 27309 does not improve AUC. Reverting changes.
Training on augumented user 126457 37/50 current_auc = 0.6659919028340081
User 126457 AUC after training: 0.6659919028340081
User 126457 does not improve AUC. Reverting changes.
Training on augumented user 33688 38/50 current_auc = 0.6659919028340081
User 33688 AUC after training: 0.6659919028340081
User 33688 does not improve AUC. Reverting changes.
Training on augumented user 80156 39/50 current_auc = 0.6659919028340081
User 80156 AUC after training: 0.6659919028340081
User 80156 does not improve AUC. Reverting changes.
Training on augumented user 38851 40/50 current_auc = 0.6659919028340081
User 38851 AUC after training: 0.6659919028340081
User 38851 does not improve AUC. Reverting changes.
Training on augumented user 1170 41/50 current_auc = 0.6659919028340081
User 1170 AUC after training: 0.6659919028340081
User 1170 does not improve AUC. Reverting changes.
Training on augumented user 76771 42/50 current_auc = 0.6659919028340081
User 76771 AUC after training: 0.6659919028340081
User 76771 does not improve AUC. Reverting changes.
Training on augumented user 110039 43/50 current_auc = 0.6659919028340081
User 110039 AUC after training: 0.6659919028340081
User 110039 does not improve AUC. Reverting changes.
Training on augumented user 98360 44/50 current_auc = 0.6659919028340081
User 98360 AUC after training: 0.6659919028340081
User 98360 does not improve AUC. Reverting changes.
Training on augumented user 72067 45/50 current_auc = 0.6659919028340081
User 72067 AUC after training: 0.6659919028340081
User 72067 does not improve AUC. Reverting changes.
Training on augumented user 58142 46/50 current_auc = 0.6659919028340081
User 58142 AUC after training: 0.6659919028340081
User 58142 does not improve AUC. Reverting changes.
Training on augumented user 104578 47/50 current_auc = 0.6659919028340081
User 104578 AUC after training: 0.6659919028340081
User 104578 does not improve AUC. Reverting changes.
Training on augumented user 116724 48/50 current_auc = 0.6659919028340081
User 116724 AUC after training: 0.6619433198380568
User 116724 does not improve AUC. Reverting changes.
Training on augumented user 36630 49/50 current_auc = 0.6659919028340081
User 36630 AUC after training: 0.6659919028340081
User 36630 does not improve AUC. Reverting changes.
[2024-12-02 19:30:47.343867] start test user 115081 207/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:30:47.789402] start test user 115081 207/567 recall augumented users by random, augumented_users = [27921, 24239, 45474, 94422, 27236, 75635, 57482, 39887, 100967, 17240, 93556, 20251, 73670, 23104, 114241, 111712, 76440, 90541, 12238, 129351, 72948, 17938, 79459, 51025, 29137, 77240, 49085, 133637, 78681, 26470, 85274, 68919, 113284, 58595, 68902, 6669, 120455, 71459, 20519, 8345, 44257, 29928, 5896, 5248, 9369, 3984, 16167, 61450, 30547, 130379]
[2024-12-02 19:30:47.804845] user = 115081 Cloud 207/567
[2024-12-02 19:30:47.814507] user = 115081 Local 207/567
[2024-12-02 19:30:47.834446] user = 115081 Local+ 207/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:30:49.766739] user = 115081 MPDA- 207/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4444444444444444
Training on augumented user 27921 0/50 current_auc = 0.4444444444444444
User 27921 AUC after training: 0.4722222222222222
User 27921 improves AUC. Keeping the model.
Training on augumented user 24239 1/50 current_auc = 0.4722222222222222
User 24239 AUC after training: 0.4166666666666667
User 24239 does not improve AUC. Reverting changes.
Training on augumented user 45474 2/50 current_auc = 0.4722222222222222
User 45474 AUC after training: 0.4722222222222222
User 45474 does not improve AUC. Reverting changes.
Training on augumented user 94422 3/50 current_auc = 0.4722222222222222
User 94422 AUC after training: 0.4166666666666667
User 94422 does not improve AUC. Reverting changes.
Training on augumented user 27236 4/50 current_auc = 0.4722222222222222
User 27236 AUC after training: 0.4444444444444444
User 27236 does not improve AUC. Reverting changes.
Training on augumented user 75635 5/50 current_auc = 0.4722222222222222
User 75635 AUC after training: 0.4444444444444444
User 75635 does not improve AUC. Reverting changes.
Training on augumented user 57482 6/50 current_auc = 0.4722222222222222
User 57482 AUC after training: 0.4722222222222222
User 57482 does not improve AUC. Reverting changes.
Training on augumented user 39887 7/50 current_auc = 0.4722222222222222
User 39887 AUC after training: 0.4722222222222222
User 39887 does not improve AUC. Reverting changes.
Training on augumented user 100967 8/50 current_auc = 0.4722222222222222
User 100967 AUC after training: 0.4722222222222222
User 100967 does not improve AUC. Reverting changes.
Training on augumented user 17240 9/50 current_auc = 0.4722222222222222
User 17240 AUC after training: 0.4722222222222222
User 17240 does not improve AUC. Reverting changes.
Training on augumented user 93556 10/50 current_auc = 0.4722222222222222
User 93556 AUC after training: 0.4722222222222222
User 93556 does not improve AUC. Reverting changes.
Training on augumented user 20251 11/50 current_auc = 0.4722222222222222
User 20251 AUC after training: 0.4722222222222222
User 20251 does not improve AUC. Reverting changes.
Training on augumented user 73670 12/50 current_auc = 0.4722222222222222
User 73670 AUC after training: 0.4722222222222222
User 73670 does not improve AUC. Reverting changes.
Training on augumented user 23104 13/50 current_auc = 0.4722222222222222
User 23104 AUC after training: 0.4166666666666667
User 23104 does not improve AUC. Reverting changes.
Training on augumented user 114241 14/50 current_auc = 0.4722222222222222
User 114241 AUC after training: 0.4722222222222222
User 114241 does not improve AUC. Reverting changes.
Training on augumented user 111712 15/50 current_auc = 0.4722222222222222
User 111712 AUC after training: 0.4722222222222222
User 111712 does not improve AUC. Reverting changes.
Training on augumented user 76440 16/50 current_auc = 0.4722222222222222
User 76440 AUC after training: 0.4722222222222222
User 76440 does not improve AUC. Reverting changes.
Training on augumented user 90541 17/50 current_auc = 0.4722222222222222
User 90541 AUC after training: 0.4722222222222222
User 90541 does not improve AUC. Reverting changes.
Training on augumented user 12238 18/50 current_auc = 0.4722222222222222
User 12238 AUC after training: 0.4444444444444444
User 12238 does not improve AUC. Reverting changes.
Training on augumented user 129351 19/50 current_auc = 0.4722222222222222
User 129351 AUC after training: 0.4166666666666667
User 129351 does not improve AUC. Reverting changes.
Training on augumented user 72948 20/50 current_auc = 0.4722222222222222
User 72948 AUC after training: 0.4444444444444444
User 72948 does not improve AUC. Reverting changes.
Training on augumented user 17938 21/50 current_auc = 0.4722222222222222
User 17938 AUC after training: 0.4166666666666667
User 17938 does not improve AUC. Reverting changes.
Training on augumented user 79459 22/50 current_auc = 0.4722222222222222
User 79459 AUC after training: 0.4166666666666667
User 79459 does not improve AUC. Reverting changes.
Training on augumented user 51025 23/50 current_auc = 0.4722222222222222
User 51025 AUC after training: 0.4722222222222222
User 51025 does not improve AUC. Reverting changes.
Training on augumented user 29137 24/50 current_auc = 0.4722222222222222
User 29137 AUC after training: 0.4722222222222222
User 29137 does not improve AUC. Reverting changes.
Training on augumented user 77240 25/50 current_auc = 0.4722222222222222
User 77240 AUC after training: 0.4722222222222222
User 77240 does not improve AUC. Reverting changes.
Training on augumented user 49085 26/50 current_auc = 0.4722222222222222
User 49085 AUC after training: 0.4722222222222222
User 49085 does not improve AUC. Reverting changes.
Training on augumented user 133637 27/50 current_auc = 0.4722222222222222
User 133637 AUC after training: 0.4722222222222222
User 133637 does not improve AUC. Reverting changes.
Training on augumented user 78681 28/50 current_auc = 0.4722222222222222
User 78681 AUC after training: 0.4166666666666667
User 78681 does not improve AUC. Reverting changes.
Training on augumented user 26470 29/50 current_auc = 0.4722222222222222
User 26470 AUC after training: 0.4722222222222222
User 26470 does not improve AUC. Reverting changes.
Training on augumented user 85274 30/50 current_auc = 0.4722222222222222
User 85274 AUC after training: 0.4166666666666667
User 85274 does not improve AUC. Reverting changes.
Training on augumented user 68919 31/50 current_auc = 0.4722222222222222
User 68919 AUC after training: 0.4722222222222222
User 68919 does not improve AUC. Reverting changes.
Training on augumented user 113284 32/50 current_auc = 0.4722222222222222
User 113284 AUC after training: 0.4166666666666667
User 113284 does not improve AUC. Reverting changes.
Training on augumented user 58595 33/50 current_auc = 0.4722222222222222
User 58595 AUC after training: 0.4722222222222222
User 58595 does not improve AUC. Reverting changes.
Training on augumented user 68902 34/50 current_auc = 0.4722222222222222
User 68902 AUC after training: 0.4722222222222222
User 68902 does not improve AUC. Reverting changes.
Training on augumented user 6669 35/50 current_auc = 0.4722222222222222
User 6669 AUC after training: 0.4166666666666667
User 6669 does not improve AUC. Reverting changes.
Training on augumented user 120455 36/50 current_auc = 0.4722222222222222
User 120455 AUC after training: 0.4722222222222222
User 120455 does not improve AUC. Reverting changes.
Training on augumented user 71459 37/50 current_auc = 0.4722222222222222
User 71459 AUC after training: 0.4722222222222222
User 71459 does not improve AUC. Reverting changes.
Training on augumented user 20519 38/50 current_auc = 0.4722222222222222
User 20519 AUC after training: 0.4722222222222222
User 20519 does not improve AUC. Reverting changes.
Training on augumented user 8345 39/50 current_auc = 0.4722222222222222
User 8345 AUC after training: 0.4722222222222222
User 8345 does not improve AUC. Reverting changes.
Training on augumented user 44257 40/50 current_auc = 0.4722222222222222
User 44257 AUC after training: 0.4722222222222222
User 44257 does not improve AUC. Reverting changes.
Training on augumented user 29928 41/50 current_auc = 0.4722222222222222
User 29928 AUC after training: 0.4722222222222222
User 29928 does not improve AUC. Reverting changes.
Training on augumented user 5896 42/50 current_auc = 0.4722222222222222
User 5896 AUC after training: 0.4722222222222222
User 5896 does not improve AUC. Reverting changes.
Training on augumented user 5248 43/50 current_auc = 0.4722222222222222
User 5248 AUC after training: 0.4166666666666667
User 5248 does not improve AUC. Reverting changes.
Training on augumented user 9369 44/50 current_auc = 0.4722222222222222
User 9369 AUC after training: 0.4722222222222222
User 9369 does not improve AUC. Reverting changes.
Training on augumented user 3984 45/50 current_auc = 0.4722222222222222
User 3984 AUC after training: 0.4722222222222222
User 3984 does not improve AUC. Reverting changes.
Training on augumented user 16167 46/50 current_auc = 0.4722222222222222
User 16167 AUC after training: 0.4166666666666667
User 16167 does not improve AUC. Reverting changes.
Training on augumented user 61450 47/50 current_auc = 0.4722222222222222
User 61450 AUC after training: 0.4722222222222222
User 61450 does not improve AUC. Reverting changes.
Training on augumented user 30547 48/50 current_auc = 0.4722222222222222
User 30547 AUC after training: 0.4722222222222222
User 30547 does not improve AUC. Reverting changes.
Training on augumented user 130379 49/50 current_auc = 0.4722222222222222
User 130379 AUC after training: 0.4722222222222222
User 130379 does not improve AUC. Reverting changes.
[2024-12-02 19:31:19.833934] start test user 115095 208/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:31:20.273680] start test user 115095 208/567 recall augumented users by random, augumented_users = [108735, 107044, 43886, 93465, 83862, 115149, 36297, 13370, 2022, 67008, 101254, 469, 120542, 61512, 54663, 56404, 89649, 82001, 104153, 126060, 86853, 91059, 124902, 43777, 61574, 36639, 132708, 90994, 129287, 48032, 126332, 41718, 38406, 4169, 103293, 41591, 14633, 118541, 83796, 135035, 73577, 74544, 124831, 125850, 128041, 84189, 60636, 39077, 36187, 102650]
[2024-12-02 19:31:20.300041] user = 115095 Cloud 208/567
[2024-12-02 19:31:20.333633] user = 115095 Local 208/567
[2024-12-02 19:31:20.414144] user = 115095 Local+ 208/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:31:23.963006] user = 115095 MPDA- 208/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7798165137614679
Training on augumented user 108735 0/50 current_auc = 0.7798165137614679
User 108735 AUC after training: 0.7782874617737003
User 108735 does not improve AUC. Reverting changes.
Training on augumented user 107044 1/50 current_auc = 0.7798165137614679
User 107044 AUC after training: 0.7793068297655454
User 107044 does not improve AUC. Reverting changes.
Training on augumented user 43886 2/50 current_auc = 0.7798165137614679
User 43886 AUC after training: 0.7782874617737003
User 43886 does not improve AUC. Reverting changes.
Training on augumented user 93465 3/50 current_auc = 0.7798165137614679
User 93465 AUC after training: 0.7803261977573904
User 93465 improves AUC. Keeping the model.
Training on augumented user 83862 4/50 current_auc = 0.7803261977573904
User 83862 AUC after training: 0.7798165137614679
User 83862 does not improve AUC. Reverting changes.
Training on augumented user 115149 5/50 current_auc = 0.7803261977573904
User 115149 AUC after training: 0.7772680937818552
User 115149 does not improve AUC. Reverting changes.
Training on augumented user 36297 6/50 current_auc = 0.7803261977573904
User 36297 AUC after training: 0.7803261977573904
User 36297 does not improve AUC. Reverting changes.
Training on augumented user 13370 7/50 current_auc = 0.7803261977573904
User 13370 AUC after training: 0.7777777777777778
User 13370 does not improve AUC. Reverting changes.
Training on augumented user 2022 8/50 current_auc = 0.7803261977573904
User 2022 AUC after training: 0.7762487257900103
User 2022 does not improve AUC. Reverting changes.
Training on augumented user 67008 9/50 current_auc = 0.7803261977573904
User 67008 AUC after training: 0.7803261977573904
User 67008 does not improve AUC. Reverting changes.
Training on augumented user 101254 10/50 current_auc = 0.7803261977573904
User 101254 AUC after training: 0.7777777777777778
User 101254 does not improve AUC. Reverting changes.
Training on augumented user 469 11/50 current_auc = 0.7803261977573904
User 469 AUC after training: 0.7762487257900101
User 469 does not improve AUC. Reverting changes.
Training on augumented user 120542 12/50 current_auc = 0.7803261977573904
User 120542 AUC after training: 0.7798165137614679
User 120542 does not improve AUC. Reverting changes.
Training on augumented user 61512 13/50 current_auc = 0.7803261977573904
User 61512 AUC after training: 0.780835881753313
User 61512 improves AUC. Keeping the model.
Training on augumented user 54663 14/50 current_auc = 0.780835881753313
User 54663 AUC after training: 0.7803261977573905
User 54663 does not improve AUC. Reverting changes.
Training on augumented user 56404 15/50 current_auc = 0.780835881753313
User 56404 AUC after training: 0.7798165137614679
User 56404 does not improve AUC. Reverting changes.
Training on augumented user 89649 16/50 current_auc = 0.780835881753313
User 89649 AUC after training: 0.780835881753313
User 89649 does not improve AUC. Reverting changes.
Training on augumented user 82001 17/50 current_auc = 0.780835881753313
User 82001 AUC after training: 0.7803261977573904
User 82001 does not improve AUC. Reverting changes.
Training on augumented user 104153 18/50 current_auc = 0.780835881753313
User 104153 AUC after training: 0.7798165137614679
User 104153 does not improve AUC. Reverting changes.
Training on augumented user 126060 19/50 current_auc = 0.780835881753313
User 126060 AUC after training: 0.780835881753313
User 126060 does not improve AUC. Reverting changes.
Training on augumented user 86853 20/50 current_auc = 0.780835881753313
User 86853 AUC after training: 0.7787971457696229
User 86853 does not improve AUC. Reverting changes.
Training on augumented user 91059 21/50 current_auc = 0.780835881753313
User 91059 AUC after training: 0.780835881753313
User 91059 does not improve AUC. Reverting changes.
Training on augumented user 124902 22/50 current_auc = 0.780835881753313
User 124902 AUC after training: 0.7818552497451581
User 124902 improves AUC. Keeping the model.
Training on augumented user 43777 23/50 current_auc = 0.7818552497451581
User 43777 AUC after training: 0.7813455657492354
User 43777 does not improve AUC. Reverting changes.
Training on augumented user 61574 24/50 current_auc = 0.7818552497451581
User 61574 AUC after training: 0.7823649337410805
User 61574 improves AUC. Keeping the model.
Training on augumented user 36639 25/50 current_auc = 0.7823649337410805
User 36639 AUC after training: 0.780835881753313
User 36639 does not improve AUC. Reverting changes.
Training on augumented user 132708 26/50 current_auc = 0.7823649337410805
User 132708 AUC after training: 0.7823649337410806
User 132708 improves AUC. Keeping the model.
Training on augumented user 90994 27/50 current_auc = 0.7823649337410806
User 90994 AUC after training: 0.7823649337410806
User 90994 does not improve AUC. Reverting changes.
Training on augumented user 129287 28/50 current_auc = 0.7823649337410806
User 129287 AUC after training: 0.7818552497451581
User 129287 does not improve AUC. Reverting changes.
Training on augumented user 48032 29/50 current_auc = 0.7823649337410806
User 48032 AUC after training: 0.7828746177370032
User 48032 improves AUC. Keeping the model.
Training on augumented user 126332 30/50 current_auc = 0.7828746177370032
User 126332 AUC after training: 0.7803261977573904
User 126332 does not improve AUC. Reverting changes.
Training on augumented user 41718 31/50 current_auc = 0.7828746177370032
User 41718 AUC after training: 0.7823649337410805
User 41718 does not improve AUC. Reverting changes.
Training on augumented user 38406 32/50 current_auc = 0.7828746177370032
User 38406 AUC after training: 0.7828746177370032
User 38406 does not improve AUC. Reverting changes.
Training on augumented user 4169 33/50 current_auc = 0.7828746177370032
User 4169 AUC after training: 0.7823649337410805
User 4169 does not improve AUC. Reverting changes.
Training on augumented user 103293 34/50 current_auc = 0.7828746177370032
User 103293 AUC after training: 0.7823649337410805
User 103293 does not improve AUC. Reverting changes.
Training on augumented user 41591 35/50 current_auc = 0.7828746177370032
User 41591 AUC after training: 0.7828746177370032
User 41591 does not improve AUC. Reverting changes.
Training on augumented user 14633 36/50 current_auc = 0.7828746177370032
User 14633 AUC after training: 0.7818552497451581
User 14633 does not improve AUC. Reverting changes.
Training on augumented user 118541 37/50 current_auc = 0.7828746177370032
User 118541 AUC after training: 0.7838939857288482
User 118541 improves AUC. Keeping the model.
Training on augumented user 83796 38/50 current_auc = 0.7838939857288482
User 83796 AUC after training: 0.7879714576962285
User 83796 improves AUC. Keeping the model.
Training on augumented user 135035 39/50 current_auc = 0.7879714576962285
User 135035 AUC after training: 0.7833843017329256
User 135035 does not improve AUC. Reverting changes.
Training on augumented user 73577 40/50 current_auc = 0.7879714576962285
User 73577 AUC after training: 0.789500509683996
User 73577 improves AUC. Keeping the model.
Training on augumented user 74544 41/50 current_auc = 0.789500509683996
User 74544 AUC after training: 0.7874617737003058
User 74544 does not improve AUC. Reverting changes.
Training on augumented user 124831 42/50 current_auc = 0.789500509683996
User 124831 AUC after training: 0.7838939857288482
User 124831 does not improve AUC. Reverting changes.
Training on augumented user 125850 43/50 current_auc = 0.789500509683996
User 125850 AUC after training: 0.7900101936799184
User 125850 improves AUC. Keeping the model.
Training on augumented user 128041 44/50 current_auc = 0.7900101936799184
User 128041 AUC after training: 0.789500509683996
User 128041 does not improve AUC. Reverting changes.
Training on augumented user 84189 45/50 current_auc = 0.7900101936799184
User 84189 AUC after training: 0.7879714576962283
User 84189 does not improve AUC. Reverting changes.
Training on augumented user 60636 46/50 current_auc = 0.7900101936799184
User 60636 AUC after training: 0.7900101936799184
User 60636 does not improve AUC. Reverting changes.
Training on augumented user 39077 47/50 current_auc = 0.7900101936799184
User 39077 AUC after training: 0.7900101936799184
User 39077 does not improve AUC. Reverting changes.
Training on augumented user 36187 48/50 current_auc = 0.7900101936799184
User 36187 AUC after training: 0.789500509683996
User 36187 does not improve AUC. Reverting changes.
Training on augumented user 102650 49/50 current_auc = 0.7900101936799184
User 102650 AUC after training: 0.7905198776758411
User 102650 improves AUC. Keeping the model.
[2024-12-02 19:31:54.564028] start test user 115115 209/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:31:54.988761] start test user 115115 209/567 recall augumented users by random, augumented_users = [33180, 45589, 97269, 129707, 75192, 65215, 107849, 54285, 132601, 118962, 112196, 77437, 15935, 55775, 76691, 78430, 118438, 22723, 91679, 138125, 57066, 102679, 67883, 67111, 102844, 46116, 32401, 4052, 135115, 69244, 56648, 40225, 11036, 63433, 436, 36688, 68200, 27530, 51612, 56344, 127640, 138240, 92233, 136242, 14696, 128388, 42682, 16287, 118163, 2325]
[2024-12-02 19:31:55.006104] user = 115115 Cloud 209/567
[2024-12-02 19:31:55.020377] user = 115115 Local 209/567
[2024-12-02 19:31:55.201646] user = 115115 Local+ 209/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:31:56.653425] user = 115115 MPDA- 209/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5916289592760181
Training on augumented user 33180 0/50 current_auc = 0.5916289592760181
User 33180 AUC after training: 0.5904977375565611
User 33180 does not improve AUC. Reverting changes.
Training on augumented user 45589 1/50 current_auc = 0.5916289592760181
User 45589 AUC after training: 0.5904977375565611
User 45589 does not improve AUC. Reverting changes.
Training on augumented user 97269 2/50 current_auc = 0.5916289592760181
User 97269 AUC after training: 0.5899321266968326
User 97269 does not improve AUC. Reverting changes.
Training on augumented user 129707 3/50 current_auc = 0.5916289592760181
User 129707 AUC after training: 0.585972850678733
User 129707 does not improve AUC. Reverting changes.
Training on augumented user 75192 4/50 current_auc = 0.5916289592760181
User 75192 AUC after training: 0.5904977375565611
User 75192 does not improve AUC. Reverting changes.
Training on augumented user 65215 5/50 current_auc = 0.5916289592760181
User 65215 AUC after training: 0.5904977375565611
User 65215 does not improve AUC. Reverting changes.
Training on augumented user 107849 6/50 current_auc = 0.5916289592760181
User 107849 AUC after training: 0.5842760180995475
User 107849 does not improve AUC. Reverting changes.
Training on augumented user 54285 7/50 current_auc = 0.5916289592760181
User 54285 AUC after training: 0.5904977375565612
User 54285 does not improve AUC. Reverting changes.
Training on augumented user 132601 8/50 current_auc = 0.5916289592760181
User 132601 AUC after training: 0.5899321266968326
User 132601 does not improve AUC. Reverting changes.
Training on augumented user 118962 9/50 current_auc = 0.5916289592760181
User 118962 AUC after training: 0.5933257918552036
User 118962 improves AUC. Keeping the model.
Training on augumented user 112196 10/50 current_auc = 0.5933257918552036
User 112196 AUC after training: 0.5921945701357466
User 112196 does not improve AUC. Reverting changes.
Training on augumented user 77437 11/50 current_auc = 0.5933257918552036
User 77437 AUC after training: 0.5921945701357467
User 77437 does not improve AUC. Reverting changes.
Training on augumented user 15935 12/50 current_auc = 0.5933257918552036
User 15935 AUC after training: 0.5921945701357466
User 15935 does not improve AUC. Reverting changes.
Training on augumented user 55775 13/50 current_auc = 0.5933257918552036
User 55775 AUC after training: 0.5882352941176471
User 55775 does not improve AUC. Reverting changes.
Training on augumented user 76691 14/50 current_auc = 0.5933257918552036
User 76691 AUC after training: 0.5933257918552037
User 76691 improves AUC. Keeping the model.
Training on augumented user 78430 15/50 current_auc = 0.5933257918552037
User 78430 AUC after training: 0.5899321266968326
User 78430 does not improve AUC. Reverting changes.
Training on augumented user 118438 16/50 current_auc = 0.5933257918552037
User 118438 AUC after training: 0.5893665158371041
User 118438 does not improve AUC. Reverting changes.
Training on augumented user 22723 17/50 current_auc = 0.5933257918552037
User 22723 AUC after training: 0.5916289592760181
User 22723 does not improve AUC. Reverting changes.
Training on augumented user 91679 18/50 current_auc = 0.5933257918552037
User 91679 AUC after training: 0.5910633484162896
User 91679 does not improve AUC. Reverting changes.
Training on augumented user 138125 19/50 current_auc = 0.5933257918552037
User 138125 AUC after training: 0.5899321266968326
User 138125 does not improve AUC. Reverting changes.
Training on augumented user 57066 20/50 current_auc = 0.5933257918552037
User 57066 AUC after training: 0.5899321266968326
User 57066 does not improve AUC. Reverting changes.
Training on augumented user 102679 21/50 current_auc = 0.5933257918552037
User 102679 AUC after training: 0.5916289592760181
User 102679 does not improve AUC. Reverting changes.
Training on augumented user 67883 22/50 current_auc = 0.5933257918552037
User 67883 AUC after training: 0.5916289592760181
User 67883 does not improve AUC. Reverting changes.
Training on augumented user 67111 23/50 current_auc = 0.5933257918552037
User 67111 AUC after training: 0.5854072398190044
User 67111 does not improve AUC. Reverting changes.
Training on augumented user 102844 24/50 current_auc = 0.5933257918552037
User 102844 AUC after training: 0.5899321266968326
User 102844 does not improve AUC. Reverting changes.
Training on augumented user 46116 25/50 current_auc = 0.5933257918552037
User 46116 AUC after training: 0.5904977375565611
User 46116 does not improve AUC. Reverting changes.
Training on augumented user 32401 26/50 current_auc = 0.5933257918552037
User 32401 AUC after training: 0.5910633484162896
User 32401 does not improve AUC. Reverting changes.
Training on augumented user 4052 27/50 current_auc = 0.5933257918552037
User 4052 AUC after training: 0.5933257918552036
User 4052 does not improve AUC. Reverting changes.
Training on augumented user 135115 28/50 current_auc = 0.5933257918552037
User 135115 AUC after training: 0.5904977375565611
User 135115 does not improve AUC. Reverting changes.
Training on augumented user 69244 29/50 current_auc = 0.5933257918552037
User 69244 AUC after training: 0.5916289592760181
User 69244 does not improve AUC. Reverting changes.
Training on augumented user 56648 30/50 current_auc = 0.5933257918552037
User 56648 AUC after training: 0.5927601809954751
User 56648 does not improve AUC. Reverting changes.
Training on augumented user 40225 31/50 current_auc = 0.5933257918552037
User 40225 AUC after training: 0.5910633484162896
User 40225 does not improve AUC. Reverting changes.
Training on augumented user 11036 32/50 current_auc = 0.5933257918552037
User 11036 AUC after training: 0.5876696832579185
User 11036 does not improve AUC. Reverting changes.
Training on augumented user 63433 33/50 current_auc = 0.5933257918552037
User 63433 AUC after training: 0.5893665158371041
User 63433 does not improve AUC. Reverting changes.
Training on augumented user 436 34/50 current_auc = 0.5933257918552037
User 436 AUC after training: 0.5899321266968326
User 436 does not improve AUC. Reverting changes.
Training on augumented user 36688 35/50 current_auc = 0.5933257918552037
User 36688 AUC after training: 0.5933257918552036
User 36688 does not improve AUC. Reverting changes.
Training on augumented user 68200 36/50 current_auc = 0.5933257918552037
User 68200 AUC after training: 0.5910633484162897
User 68200 does not improve AUC. Reverting changes.
Training on augumented user 27530 37/50 current_auc = 0.5933257918552037
User 27530 AUC after training: 0.5899321266968326
User 27530 does not improve AUC. Reverting changes.
Training on augumented user 51612 38/50 current_auc = 0.5933257918552037
User 51612 AUC after training: 0.5899321266968326
User 51612 does not improve AUC. Reverting changes.
Training on augumented user 56344 39/50 current_auc = 0.5933257918552037
User 56344 AUC after training: 0.5927601809954751
User 56344 does not improve AUC. Reverting changes.
Training on augumented user 127640 40/50 current_auc = 0.5933257918552037
User 127640 AUC after training: 0.5916289592760181
User 127640 does not improve AUC. Reverting changes.
Training on augumented user 138240 41/50 current_auc = 0.5933257918552037
User 138240 AUC after training: 0.5933257918552037
User 138240 does not improve AUC. Reverting changes.
Training on augumented user 92233 42/50 current_auc = 0.5933257918552037
User 92233 AUC after training: 0.5933257918552037
User 92233 does not improve AUC. Reverting changes.
Training on augumented user 136242 43/50 current_auc = 0.5933257918552037
User 136242 AUC after training: 0.5893665158371041
User 136242 does not improve AUC. Reverting changes.
Training on augumented user 14696 44/50 current_auc = 0.5933257918552037
User 14696 AUC after training: 0.5899321266968325
User 14696 does not improve AUC. Reverting changes.
Training on augumented user 128388 45/50 current_auc = 0.5933257918552037
User 128388 AUC after training: 0.5916289592760182
User 128388 does not improve AUC. Reverting changes.
Training on augumented user 42682 46/50 current_auc = 0.5933257918552037
User 42682 AUC after training: 0.5888009049773756
User 42682 does not improve AUC. Reverting changes.
Training on augumented user 16287 47/50 current_auc = 0.5933257918552037
User 16287 AUC after training: 0.5921945701357467
User 16287 does not improve AUC. Reverting changes.
Training on augumented user 118163 48/50 current_auc = 0.5933257918552037
User 118163 AUC after training: 0.5910633484162896
User 118163 does not improve AUC. Reverting changes.
Training on augumented user 2325 49/50 current_auc = 0.5933257918552037
User 2325 AUC after training: 0.5927601809954751
User 2325 does not improve AUC. Reverting changes.
[2024-12-02 19:32:23.705533] start test user 115121 210/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:32:24.171238] start test user 115121 210/567 recall augumented users by random, augumented_users = [91118, 8811, 67483, 39915, 1416, 101517, 62791, 42006, 119368, 124445, 100942, 52477, 110513, 134249, 75558, 32814, 130720, 59343, 79127, 92921, 26205, 16570, 29888, 4726, 13808, 126526, 13028, 84493, 51984, 83457, 29067, 126469, 14064, 65694, 45045, 29018, 129856, 123531, 7556, 38259, 105228, 133454, 32797, 22277, 70747, 21490, 18644, 122253, 27264, 94747]
[2024-12-02 19:32:24.228638] user = 115121 Cloud 210/567
[2024-12-02 19:32:24.254408] user = 115121 Local 210/567
[2024-12-02 19:32:24.374378] user = 115121 Local+ 210/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:32:26.874251] user = 115121 MPDA- 210/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.744435612082671
Training on augumented user 91118 0/50 current_auc = 0.744435612082671
User 91118 AUC after training: 0.744435612082671
User 91118 does not improve AUC. Reverting changes.
Training on augumented user 8811 1/50 current_auc = 0.744435612082671
User 8811 AUC after training: 0.7432432432432432
User 8811 does not improve AUC. Reverting changes.
Training on augumented user 67483 2/50 current_auc = 0.744435612082671
User 67483 AUC after training: 0.7448330683624801
User 67483 improves AUC. Keeping the model.
Training on augumented user 39915 3/50 current_auc = 0.7448330683624801
User 39915 AUC after training: 0.7436406995230526
User 39915 does not improve AUC. Reverting changes.
Training on augumented user 1416 4/50 current_auc = 0.7448330683624801
User 1416 AUC after training: 0.744435612082671
User 1416 does not improve AUC. Reverting changes.
Training on augumented user 101517 5/50 current_auc = 0.7448330683624801
User 101517 AUC after training: 0.7456279809220986
User 101517 improves AUC. Keeping the model.
Training on augumented user 62791 6/50 current_auc = 0.7456279809220986
User 62791 AUC after training: 0.7448330683624801
User 62791 does not improve AUC. Reverting changes.
Training on augumented user 42006 7/50 current_auc = 0.7456279809220986
User 42006 AUC after training: 0.7448330683624801
User 42006 does not improve AUC. Reverting changes.
Training on augumented user 119368 8/50 current_auc = 0.7456279809220986
User 119368 AUC after training: 0.7472178060413355
User 119368 improves AUC. Keeping the model.
Training on augumented user 124445 9/50 current_auc = 0.7472178060413355
User 124445 AUC after training: 0.7456279809220986
User 124445 does not improve AUC. Reverting changes.
Training on augumented user 100942 10/50 current_auc = 0.7472178060413355
User 100942 AUC after training: 0.746422893481717
User 100942 does not improve AUC. Reverting changes.
Training on augumented user 52477 11/50 current_auc = 0.7472178060413355
User 52477 AUC after training: 0.7448330683624802
User 52477 does not improve AUC. Reverting changes.
Training on augumented user 110513 12/50 current_auc = 0.7472178060413355
User 110513 AUC after training: 0.7448330683624802
User 110513 does not improve AUC. Reverting changes.
Training on augumented user 134249 13/50 current_auc = 0.7472178060413355
User 134249 AUC after training: 0.7452305246422894
User 134249 does not improve AUC. Reverting changes.
Training on augumented user 75558 14/50 current_auc = 0.7472178060413355
User 75558 AUC after training: 0.7472178060413355
User 75558 does not improve AUC. Reverting changes.
Training on augumented user 32814 15/50 current_auc = 0.7472178060413355
User 32814 AUC after training: 0.7472178060413355
User 32814 does not improve AUC. Reverting changes.
Training on augumented user 130720 16/50 current_auc = 0.7472178060413355
User 130720 AUC after training: 0.7456279809220986
User 130720 does not improve AUC. Reverting changes.
Training on augumented user 59343 17/50 current_auc = 0.7472178060413355
User 59343 AUC after training: 0.7472178060413355
User 59343 does not improve AUC. Reverting changes.
Training on augumented user 79127 18/50 current_auc = 0.7472178060413355
User 79127 AUC after training: 0.7456279809220986
User 79127 does not improve AUC. Reverting changes.
Training on augumented user 92921 19/50 current_auc = 0.7472178060413355
User 92921 AUC after training: 0.746422893481717
User 92921 does not improve AUC. Reverting changes.
Training on augumented user 26205 20/50 current_auc = 0.7472178060413355
User 26205 AUC after training: 0.7472178060413355
User 26205 does not improve AUC. Reverting changes.
Training on augumented user 16570 21/50 current_auc = 0.7472178060413355
User 16570 AUC after training: 0.7456279809220986
User 16570 does not improve AUC. Reverting changes.
Training on augumented user 29888 22/50 current_auc = 0.7472178060413355
User 29888 AUC after training: 0.746422893481717
User 29888 does not improve AUC. Reverting changes.
Training on augumented user 4726 23/50 current_auc = 0.7472178060413355
User 4726 AUC after training: 0.7464228934817171
User 4726 does not improve AUC. Reverting changes.
Training on augumented user 13808 24/50 current_auc = 0.7472178060413355
User 13808 AUC after training: 0.7448330683624802
User 13808 does not improve AUC. Reverting changes.
Training on augumented user 126526 25/50 current_auc = 0.7472178060413355
User 126526 AUC after training: 0.7464228934817171
User 126526 does not improve AUC. Reverting changes.
Training on augumented user 13028 26/50 current_auc = 0.7472178060413355
User 13028 AUC after training: 0.7456279809220986
User 13028 does not improve AUC. Reverting changes.
Training on augumented user 84493 27/50 current_auc = 0.7472178060413355
User 84493 AUC after training: 0.7464228934817171
User 84493 does not improve AUC. Reverting changes.
Training on augumented user 51984 28/50 current_auc = 0.7472178060413355
User 51984 AUC after training: 0.746422893481717
User 51984 does not improve AUC. Reverting changes.
Training on augumented user 83457 29/50 current_auc = 0.7472178060413355
User 83457 AUC after training: 0.7472178060413355
User 83457 does not improve AUC. Reverting changes.
Training on augumented user 29067 30/50 current_auc = 0.7472178060413355
User 29067 AUC after training: 0.7472178060413355
User 29067 does not improve AUC. Reverting changes.
Training on augumented user 126469 31/50 current_auc = 0.7472178060413355
User 126469 AUC after training: 0.7456279809220986
User 126469 does not improve AUC. Reverting changes.
Training on augumented user 14064 32/50 current_auc = 0.7472178060413355
User 14064 AUC after training: 0.746422893481717
User 14064 does not improve AUC. Reverting changes.
Training on augumented user 65694 33/50 current_auc = 0.7472178060413355
User 65694 AUC after training: 0.7436406995230526
User 65694 does not improve AUC. Reverting changes.
Training on augumented user 45045 34/50 current_auc = 0.7472178060413355
User 45045 AUC after training: 0.7456279809220986
User 45045 does not improve AUC. Reverting changes.
Training on augumented user 29018 35/50 current_auc = 0.7472178060413355
User 29018 AUC after training: 0.7464228934817171
User 29018 does not improve AUC. Reverting changes.
Training on augumented user 129856 36/50 current_auc = 0.7472178060413355
User 129856 AUC after training: 0.7456279809220986
User 129856 does not improve AUC. Reverting changes.
Training on augumented user 123531 37/50 current_auc = 0.7472178060413355
User 123531 AUC after training: 0.7448330683624802
User 123531 does not improve AUC. Reverting changes.
Training on augumented user 7556 38/50 current_auc = 0.7472178060413355
User 7556 AUC after training: 0.7440381558028617
User 7556 does not improve AUC. Reverting changes.
Training on augumented user 38259 39/50 current_auc = 0.7472178060413355
User 38259 AUC after training: 0.7456279809220986
User 38259 does not improve AUC. Reverting changes.
Training on augumented user 105228 40/50 current_auc = 0.7472178060413355
User 105228 AUC after training: 0.7472178060413355
User 105228 does not improve AUC. Reverting changes.
Training on augumented user 133454 41/50 current_auc = 0.7472178060413355
User 133454 AUC after training: 0.7456279809220986
User 133454 does not improve AUC. Reverting changes.
Training on augumented user 32797 42/50 current_auc = 0.7472178060413355
User 32797 AUC after training: 0.7440381558028617
User 32797 does not improve AUC. Reverting changes.
Training on augumented user 22277 43/50 current_auc = 0.7472178060413355
User 22277 AUC after training: 0.7412559618441972
User 22277 does not improve AUC. Reverting changes.
Training on augumented user 70747 44/50 current_auc = 0.7472178060413355
User 70747 AUC after training: 0.7436406995230526
User 70747 does not improve AUC. Reverting changes.
Training on augumented user 21490 45/50 current_auc = 0.7472178060413355
User 21490 AUC after training: 0.7472178060413355
User 21490 does not improve AUC. Reverting changes.
Training on augumented user 18644 46/50 current_auc = 0.7472178060413355
User 18644 AUC after training: 0.7456279809220986
User 18644 does not improve AUC. Reverting changes.
Training on augumented user 122253 47/50 current_auc = 0.7472178060413355
User 122253 AUC after training: 0.7456279809220986
User 122253 does not improve AUC. Reverting changes.
Training on augumented user 27264 48/50 current_auc = 0.7472178060413355
User 27264 AUC after training: 0.7448330683624802
User 27264 does not improve AUC. Reverting changes.
Training on augumented user 94747 49/50 current_auc = 0.7472178060413355
User 94747 AUC after training: 0.7440381558028617
User 94747 does not improve AUC. Reverting changes.
[2024-12-02 19:32:55.061735] start test user 115124 211/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:32:55.748740] start test user 115124 211/567 recall augumented users by random, augumented_users = [112947, 129078, 123734, 76545, 9029, 17678, 118603, 8573, 121147, 79028, 8057, 126952, 76567, 117543, 104884, 72952, 12924, 110860, 120982, 15902, 108101, 61260, 20493, 124221, 49118, 33259, 109997, 70981, 55604, 102112, 38366, 7572, 131319, 100323, 55276, 74910, 92494, 87238, 93509, 93249, 124666, 7588, 108626, 132169, 64880, 17754, 131376, 45034, 101542, 46046]
[2024-12-02 19:32:55.763963] user = 115124 Cloud 211/567
[2024-12-02 19:32:55.775204] user = 115124 Local 211/567
[2024-12-02 19:32:55.851237] user = 115124 Local+ 211/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:32:57.428226] user = 115124 MPDA- 211/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8255528255528255
Training on augumented user 112947 0/50 current_auc = 0.8255528255528255
User 112947 AUC after training: 0.8255528255528255
User 112947 does not improve AUC. Reverting changes.
Training on augumented user 129078 1/50 current_auc = 0.8255528255528255
User 129078 AUC after training: 0.8255528255528255
User 129078 does not improve AUC. Reverting changes.
Training on augumented user 123734 2/50 current_auc = 0.8255528255528255
User 123734 AUC after training: 0.8255528255528255
User 123734 does not improve AUC. Reverting changes.
Training on augumented user 76545 3/50 current_auc = 0.8255528255528255
User 76545 AUC after training: 0.8230958230958231
User 76545 does not improve AUC. Reverting changes.
Training on augumented user 9029 4/50 current_auc = 0.8255528255528255
User 9029 AUC after training: 0.8255528255528255
User 9029 does not improve AUC. Reverting changes.
Training on augumented user 17678 5/50 current_auc = 0.8255528255528255
User 17678 AUC after training: 0.8255528255528255
User 17678 does not improve AUC. Reverting changes.
Training on augumented user 118603 6/50 current_auc = 0.8255528255528255
User 118603 AUC after training: 0.8230958230958231
User 118603 does not improve AUC. Reverting changes.
Training on augumented user 8573 7/50 current_auc = 0.8255528255528255
User 8573 AUC after training: 0.8255528255528255
User 8573 does not improve AUC. Reverting changes.
Training on augumented user 121147 8/50 current_auc = 0.8255528255528255
User 121147 AUC after training: 0.8255528255528255
User 121147 does not improve AUC. Reverting changes.
Training on augumented user 79028 9/50 current_auc = 0.8255528255528255
User 79028 AUC after training: 0.828009828009828
User 79028 improves AUC. Keeping the model.
Training on augumented user 8057 10/50 current_auc = 0.828009828009828
User 8057 AUC after training: 0.8255528255528255
User 8057 does not improve AUC. Reverting changes.
Training on augumented user 126952 11/50 current_auc = 0.828009828009828
User 126952 AUC after training: 0.8255528255528255
User 126952 does not improve AUC. Reverting changes.
Training on augumented user 76567 12/50 current_auc = 0.828009828009828
User 76567 AUC after training: 0.8255528255528255
User 76567 does not improve AUC. Reverting changes.
Training on augumented user 117543 13/50 current_auc = 0.828009828009828
User 117543 AUC after training: 0.828009828009828
User 117543 does not improve AUC. Reverting changes.
Training on augumented user 104884 14/50 current_auc = 0.828009828009828
User 104884 AUC after training: 0.8230958230958231
User 104884 does not improve AUC. Reverting changes.
Training on augumented user 72952 15/50 current_auc = 0.828009828009828
User 72952 AUC after training: 0.8255528255528255
User 72952 does not improve AUC. Reverting changes.
Training on augumented user 12924 16/50 current_auc = 0.828009828009828
User 12924 AUC after training: 0.828009828009828
User 12924 does not improve AUC. Reverting changes.
Training on augumented user 110860 17/50 current_auc = 0.828009828009828
User 110860 AUC after training: 0.8230958230958232
User 110860 does not improve AUC. Reverting changes.
Training on augumented user 120982 18/50 current_auc = 0.828009828009828
User 120982 AUC after training: 0.8230958230958231
User 120982 does not improve AUC. Reverting changes.
Training on augumented user 15902 19/50 current_auc = 0.828009828009828
User 15902 AUC after training: 0.828009828009828
User 15902 does not improve AUC. Reverting changes.
Training on augumented user 108101 20/50 current_auc = 0.828009828009828
User 108101 AUC after training: 0.8255528255528255
User 108101 does not improve AUC. Reverting changes.
Training on augumented user 61260 21/50 current_auc = 0.828009828009828
User 61260 AUC after training: 0.8255528255528255
User 61260 does not improve AUC. Reverting changes.
Training on augumented user 20493 22/50 current_auc = 0.828009828009828
User 20493 AUC after training: 0.8255528255528255
User 20493 does not improve AUC. Reverting changes.
Training on augumented user 124221 23/50 current_auc = 0.828009828009828
User 124221 AUC after training: 0.8255528255528255
User 124221 does not improve AUC. Reverting changes.
Training on augumented user 49118 24/50 current_auc = 0.828009828009828
User 49118 AUC after training: 0.8255528255528255
User 49118 does not improve AUC. Reverting changes.
Training on augumented user 33259 25/50 current_auc = 0.828009828009828
User 33259 AUC after training: 0.8255528255528255
User 33259 does not improve AUC. Reverting changes.
Training on augumented user 109997 26/50 current_auc = 0.828009828009828
User 109997 AUC after training: 0.828009828009828
User 109997 does not improve AUC. Reverting changes.
Training on augumented user 70981 27/50 current_auc = 0.828009828009828
User 70981 AUC after training: 0.8230958230958232
User 70981 does not improve AUC. Reverting changes.
Training on augumented user 55604 28/50 current_auc = 0.828009828009828
User 55604 AUC after training: 0.8255528255528255
User 55604 does not improve AUC. Reverting changes.
Training on augumented user 102112 29/50 current_auc = 0.828009828009828
User 102112 AUC after training: 0.828009828009828
User 102112 does not improve AUC. Reverting changes.
Training on augumented user 38366 30/50 current_auc = 0.828009828009828
User 38366 AUC after training: 0.8255528255528255
User 38366 does not improve AUC. Reverting changes.
Training on augumented user 7572 31/50 current_auc = 0.828009828009828
User 7572 AUC after training: 0.8255528255528255
User 7572 does not improve AUC. Reverting changes.
Training on augumented user 131319 32/50 current_auc = 0.828009828009828
User 131319 AUC after training: 0.8230958230958231
User 131319 does not improve AUC. Reverting changes.
Training on augumented user 100323 33/50 current_auc = 0.828009828009828
User 100323 AUC after training: 0.8255528255528255
User 100323 does not improve AUC. Reverting changes.
Training on augumented user 55276 34/50 current_auc = 0.828009828009828
User 55276 AUC after training: 0.828009828009828
User 55276 does not improve AUC. Reverting changes.
Training on augumented user 74910 35/50 current_auc = 0.828009828009828
User 74910 AUC after training: 0.828009828009828
User 74910 does not improve AUC. Reverting changes.
Training on augumented user 92494 36/50 current_auc = 0.828009828009828
User 92494 AUC after training: 0.8255528255528255
User 92494 does not improve AUC. Reverting changes.
Training on augumented user 87238 37/50 current_auc = 0.828009828009828
User 87238 AUC after training: 0.8230958230958231
User 87238 does not improve AUC. Reverting changes.
Training on augumented user 93509 38/50 current_auc = 0.828009828009828
User 93509 AUC after training: 0.828009828009828
User 93509 does not improve AUC. Reverting changes.
Training on augumented user 93249 39/50 current_auc = 0.828009828009828
User 93249 AUC after training: 0.828009828009828
User 93249 does not improve AUC. Reverting changes.
Training on augumented user 124666 40/50 current_auc = 0.828009828009828
User 124666 AUC after training: 0.828009828009828
User 124666 does not improve AUC. Reverting changes.
Training on augumented user 7588 41/50 current_auc = 0.828009828009828
User 7588 AUC after training: 0.8230958230958231
User 7588 does not improve AUC. Reverting changes.
Training on augumented user 108626 42/50 current_auc = 0.828009828009828
User 108626 AUC after training: 0.8255528255528255
User 108626 does not improve AUC. Reverting changes.
Training on augumented user 132169 43/50 current_auc = 0.828009828009828
User 132169 AUC after training: 0.8255528255528255
User 132169 does not improve AUC. Reverting changes.
Training on augumented user 64880 44/50 current_auc = 0.828009828009828
User 64880 AUC after training: 0.828009828009828
User 64880 does not improve AUC. Reverting changes.
Training on augumented user 17754 45/50 current_auc = 0.828009828009828
User 17754 AUC after training: 0.8255528255528255
User 17754 does not improve AUC. Reverting changes.
Training on augumented user 131376 46/50 current_auc = 0.828009828009828
User 131376 AUC after training: 0.8255528255528255
User 131376 does not improve AUC. Reverting changes.
Training on augumented user 45034 47/50 current_auc = 0.828009828009828
User 45034 AUC after training: 0.8255528255528255
User 45034 does not improve AUC. Reverting changes.
Training on augumented user 101542 48/50 current_auc = 0.828009828009828
User 101542 AUC after training: 0.828009828009828
User 101542 does not improve AUC. Reverting changes.
Training on augumented user 46046 49/50 current_auc = 0.828009828009828
User 46046 AUC after training: 0.8255528255528255
User 46046 does not improve AUC. Reverting changes.
[2024-12-02 19:33:25.299396] start test user 115164 212/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:33:26.067537] start test user 115164 212/567 recall augumented users by random, augumented_users = [105258, 89455, 112209, 9764, 89866, 102642, 23569, 15498, 84162, 90392, 13389, 6914, 59780, 47370, 138411, 43948, 10948, 23974, 15771, 48178, 115323, 112805, 9973, 119991, 93408, 81667, 130531, 52890, 39937, 124339, 130529, 81201, 69604, 41713, 95275, 62866, 108381, 118399, 22002, 119990, 73161, 133897, 116698, 50458, 45620, 19557, 9469, 65130, 78246, 124335]
[2024-12-02 19:33:26.085987] user = 115164 Cloud 212/567
[2024-12-02 19:33:26.134570] user = 115164 Local 212/567
[2024-12-02 19:33:26.268477] user = 115164 Local+ 212/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:33:29.838281] user = 115164 MPDA- 212/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6431757478632478
Training on augumented user 105258 0/50 current_auc = 0.6431757478632478
User 105258 AUC after training: 0.6431089743589743
User 105258 does not improve AUC. Reverting changes.
Training on augumented user 89455 1/50 current_auc = 0.6431757478632478
User 89455 AUC after training: 0.6432158119658119
User 89455 improves AUC. Keeping the model.
Training on augumented user 112209 2/50 current_auc = 0.6432158119658119
User 112209 AUC after training: 0.6420673076923076
User 112209 does not improve AUC. Reverting changes.
Training on augumented user 9764 3/50 current_auc = 0.6432158119658119
User 9764 AUC after training: 0.643082264957265
User 9764 does not improve AUC. Reverting changes.
Training on augumented user 89866 4/50 current_auc = 0.6432158119658119
User 89866 AUC after training: 0.6430956196581197
User 89866 does not improve AUC. Reverting changes.
Training on augumented user 102642 5/50 current_auc = 0.6432158119658119
User 102642 AUC after training: 0.6428819444444445
User 102642 does not improve AUC. Reverting changes.
Training on augumented user 23569 6/50 current_auc = 0.6432158119658119
User 23569 AUC after training: 0.6430422008547008
User 23569 does not improve AUC. Reverting changes.
Training on augumented user 15498 7/50 current_auc = 0.6432158119658119
User 15498 AUC after training: 0.6428819444444445
User 15498 does not improve AUC. Reverting changes.
Training on augumented user 84162 8/50 current_auc = 0.6432158119658119
User 84162 AUC after training: 0.6425347222222223
User 84162 does not improve AUC. Reverting changes.
Training on augumented user 90392 9/50 current_auc = 0.6432158119658119
User 90392 AUC after training: 0.6430288461538461
User 90392 does not improve AUC. Reverting changes.
Training on augumented user 13389 10/50 current_auc = 0.6432158119658119
User 13389 AUC after training: 0.6426816239316239
User 13389 does not improve AUC. Reverting changes.
Training on augumented user 6914 11/50 current_auc = 0.6432158119658119
User 6914 AUC after training: 0.6427216880341879
User 6914 does not improve AUC. Reverting changes.
Training on augumented user 59780 12/50 current_auc = 0.6432158119658119
User 59780 AUC after training: 0.6421207264957265
User 59780 does not improve AUC. Reverting changes.
Training on augumented user 47370 13/50 current_auc = 0.6432158119658119
User 47370 AUC after training: 0.6429220085470086
User 47370 does not improve AUC. Reverting changes.
Training on augumented user 138411 14/50 current_auc = 0.6432158119658119
User 138411 AUC after training: 0.6422142094017094
User 138411 does not improve AUC. Reverting changes.
Training on augumented user 43948 15/50 current_auc = 0.6432158119658119
User 43948 AUC after training: 0.642855235042735
User 43948 does not improve AUC. Reverting changes.
Training on augumented user 10948 16/50 current_auc = 0.6432158119658119
User 10948 AUC after training: 0.6435229700854701
User 10948 improves AUC. Keeping the model.
Training on augumented user 23974 17/50 current_auc = 0.6435229700854701
User 23974 AUC after training: 0.6432959401709402
User 23974 does not improve AUC. Reverting changes.
Training on augumented user 15771 18/50 current_auc = 0.6435229700854701
User 15771 AUC after training: 0.6433360042735042
User 15771 does not improve AUC. Reverting changes.
Training on augumented user 48178 19/50 current_auc = 0.6435229700854701
User 48178 AUC after training: 0.6440304487179488
User 48178 improves AUC. Keeping the model.
Training on augumented user 115323 20/50 current_auc = 0.6440304487179488
User 115323 AUC after training: 0.6439903846153846
User 115323 does not improve AUC. Reverting changes.
Training on augumented user 112805 21/50 current_auc = 0.6440304487179488
User 112805 AUC after training: 0.6440304487179488
User 112805 does not improve AUC. Reverting changes.
Training on augumented user 9973 22/50 current_auc = 0.6440304487179488
User 9973 AUC after training: 0.6440705128205129
User 9973 improves AUC. Keeping the model.
Training on augumented user 119991 23/50 current_auc = 0.6440705128205129
User 119991 AUC after training: 0.6440972222222223
User 119991 improves AUC. Keeping the model.
Training on augumented user 93408 24/50 current_auc = 0.6440972222222223
User 93408 AUC after training: 0.6450787927350428
User 93408 improves AUC. Keeping the model.
Training on augumented user 81667 25/50 current_auc = 0.6450787927350428
User 81667 AUC after training: 0.6449919871794871
User 81667 does not improve AUC. Reverting changes.
Training on augumented user 130531 26/50 current_auc = 0.6450787927350428
User 130531 AUC after training: 0.6453525641025641
User 130531 improves AUC. Keeping the model.
Training on augumented user 52890 27/50 current_auc = 0.6453525641025641
User 52890 AUC after training: 0.6448183760683761
User 52890 does not improve AUC. Reverting changes.
Training on augumented user 39937 28/50 current_auc = 0.6453525641025641
User 39937 AUC after training: 0.6441105769230769
User 39937 does not improve AUC. Reverting changes.
Training on augumented user 124339 29/50 current_auc = 0.6453525641025641
User 124339 AUC after training: 0.6446581196581196
User 124339 does not improve AUC. Reverting changes.
Training on augumented user 130529 30/50 current_auc = 0.6453525641025641
User 130529 AUC after training: 0.6453525641025641
User 130529 does not improve AUC. Reverting changes.
Training on augumented user 81201 31/50 current_auc = 0.6453525641025641
User 81201 AUC after training: 0.6450988247863247
User 81201 does not improve AUC. Reverting changes.
Training on augumented user 69604 32/50 current_auc = 0.6453525641025641
User 69604 AUC after training: 0.645178952991453
User 69604 does not improve AUC. Reverting changes.
Training on augumented user 41713 33/50 current_auc = 0.6453525641025641
User 41713 AUC after training: 0.6444978632478633
User 41713 does not improve AUC. Reverting changes.
Training on augumented user 95275 34/50 current_auc = 0.6453525641025641
User 95275 AUC after training: 0.6444577991452991
User 95275 does not improve AUC. Reverting changes.
Training on augumented user 62866 35/50 current_auc = 0.6453525641025641
User 62866 AUC after training: 0.6456597222222222
User 62866 improves AUC. Keeping the model.
Training on augumented user 108381 36/50 current_auc = 0.6456597222222222
User 108381 AUC after training: 0.6452323717948718
User 108381 does not improve AUC. Reverting changes.
Training on augumented user 118399 37/50 current_auc = 0.6456597222222222
User 118399 AUC after training: 0.645405982905983
User 118399 does not improve AUC. Reverting changes.
Training on augumented user 22002 38/50 current_auc = 0.6456597222222222
User 22002 AUC after training: 0.6455128205128204
User 22002 does not improve AUC. Reverting changes.
Training on augumented user 119990 39/50 current_auc = 0.6456597222222222
User 119990 AUC after training: 0.644911858974359
User 119990 does not improve AUC. Reverting changes.
Training on augumented user 73161 40/50 current_auc = 0.6456597222222222
User 73161 AUC after training: 0.6445646367521367
User 73161 does not improve AUC. Reverting changes.
Training on augumented user 133897 41/50 current_auc = 0.6456597222222222
User 133897 AUC after training: 0.6455662393162394
User 133897 does not improve AUC. Reverting changes.
Training on augumented user 116698 42/50 current_auc = 0.6456597222222222
User 116698 AUC after training: 0.6454727564102565
User 116698 does not improve AUC. Reverting changes.
Training on augumented user 50458 43/50 current_auc = 0.6456597222222222
User 50458 AUC after training: 0.645579594017094
User 50458 does not improve AUC. Reverting changes.
Training on augumented user 45620 44/50 current_auc = 0.6456597222222222
User 45620 AUC after training: 0.6454393696581197
User 45620 does not improve AUC. Reverting changes.
Training on augumented user 19557 45/50 current_auc = 0.6456597222222222
User 19557 AUC after training: 0.6455795940170939
User 19557 does not improve AUC. Reverting changes.
Training on augumented user 9469 46/50 current_auc = 0.6456597222222222
User 9469 AUC after training: 0.6452056623931625
User 9469 does not improve AUC. Reverting changes.
Training on augumented user 65130 47/50 current_auc = 0.6456597222222222
User 65130 AUC after training: 0.6447916666666667
User 65130 does not improve AUC. Reverting changes.
Training on augumented user 78246 48/50 current_auc = 0.6456597222222222
User 78246 AUC after training: 0.644818376068376
User 78246 does not improve AUC. Reverting changes.
Training on augumented user 124335 49/50 current_auc = 0.6456597222222222
User 124335 AUC after training: 0.6456196581196582
User 124335 does not improve AUC. Reverting changes.
[2024-12-02 19:34:02.077909] start test user 115176 213/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:34:02.506012] start test user 115176 213/567 recall augumented users by random, augumented_users = [49408, 79760, 78990, 53930, 64846, 37325, 101563, 134801, 11330, 78191, 25220, 50934, 74583, 77107, 84142, 119144, 103649, 50394, 100189, 42064, 137810, 19723, 128863, 108065, 65034, 8077, 84824, 130272, 133242, 24951, 8974, 123026, 64809, 62753, 42675, 4560, 131077, 33277, 57401, 61020, 30313, 91122, 8964, 42877, 25346, 137621, 127760, 42761, 43978, 18654]
[2024-12-02 19:34:02.522555] user = 115176 Cloud 213/567
[2024-12-02 19:34:02.555419] user = 115176 Local 213/567
[2024-12-02 19:34:02.665801] user = 115176 Local+ 213/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:34:04.091953] user = 115176 MPDA- 213/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.723102002794597
Training on augumented user 49408 0/50 current_auc = 0.723102002794597
User 49408 AUC after training: 0.7229326332726426
User 49408 does not improve AUC. Reverting changes.
Training on augumented user 79760 1/50 current_auc = 0.723102002794597
User 79760 AUC after training: 0.7233137146970403
User 79760 improves AUC. Keeping the model.
Training on augumented user 78990 2/50 current_auc = 0.7233137146970403
User 78990 AUC after training: 0.7233560570775288
User 78990 improves AUC. Keeping the model.
Training on augumented user 53930 3/50 current_auc = 0.7233560570775288
User 53930 AUC after training: 0.7233772282677732
User 53930 improves AUC. Keeping the model.
Training on augumented user 64846 4/50 current_auc = 0.7233772282677732
User 64846 AUC after training: 0.7230490748189863
User 64846 does not improve AUC. Reverting changes.
Training on augumented user 37325 5/50 current_auc = 0.7233772282677732
User 37325 AUC after training: 0.7231655163653301
User 37325 does not improve AUC. Reverting changes.
Training on augumented user 101563 6/50 current_auc = 0.7233772282677732
User 101563 AUC after training: 0.7231020027945971
User 101563 does not improve AUC. Reverting changes.
Training on augumented user 134801 7/50 current_auc = 0.7233772282677732
User 134801 AUC after training: 0.7237265529068044
User 134801 improves AUC. Keeping the model.
Training on augumented user 11330 8/50 current_auc = 0.7237265529068044
User 11330 AUC after training: 0.7236630393360715
User 11330 does not improve AUC. Reverting changes.
Training on augumented user 78191 9/50 current_auc = 0.7237265529068044
User 78191 AUC after training: 0.7239806071897362
User 78191 improves AUC. Keeping the model.
Training on augumented user 25220 10/50 current_auc = 0.7239806071897362
User 25220 AUC after training: 0.7233983994580175
User 25220 does not improve AUC. Reverting changes.
Training on augumented user 50934 11/50 current_auc = 0.7239806071897362
User 50934 AUC after training: 0.7239382648092476
User 50934 does not improve AUC. Reverting changes.
Training on augumented user 74583 12/50 current_auc = 0.7239806071897362
User 74583 AUC after training: 0.7241605623068128
User 74583 improves AUC. Keeping the model.
Training on augumented user 77107 13/50 current_auc = 0.7241605623068128
User 77107 AUC after training: 0.7240758775458356
User 77107 does not improve AUC. Reverting changes.
Training on augumented user 84142 14/50 current_auc = 0.7241605623068128
User 84142 AUC after training: 0.7236630393360715
User 84142 does not improve AUC. Reverting changes.
Training on augumented user 119144 15/50 current_auc = 0.7241605623068128
User 119144 AUC after training: 0.7238747512385146
User 119144 does not improve AUC. Reverting changes.
Training on augumented user 103649 16/50 current_auc = 0.7241605623068128
User 103649 AUC after training: 0.7237794808824152
User 103649 does not improve AUC. Reverting changes.
Training on augumented user 50394 17/50 current_auc = 0.7241605623068128
User 50394 AUC after training: 0.7237477240970488
User 50394 does not improve AUC. Reverting changes.
Training on augumented user 100189 18/50 current_auc = 0.7241605623068128
User 100189 AUC after training: 0.7239065080238811
User 100189 does not improve AUC. Reverting changes.
Training on augumented user 42064 19/50 current_auc = 0.7241605623068128
User 42064 AUC after training: 0.7236418681458272
User 42064 does not improve AUC. Reverting changes.
Training on augumented user 137810 20/50 current_auc = 0.7241605623068128
User 137810 AUC after training: 0.7237477240970487
User 137810 does not improve AUC. Reverting changes.
Training on augumented user 19723 21/50 current_auc = 0.7241605623068128
User 19723 AUC after training: 0.7241605623068129
User 19723 improves AUC. Keeping the model.
Training on augumented user 128863 22/50 current_auc = 0.7241605623068129
User 128863 AUC after training: 0.723631282550705
User 128863 does not improve AUC. Reverting changes.
Training on augumented user 108065 23/50 current_auc = 0.7241605623068129
User 108065 AUC after training: 0.7238535800482703
User 108065 does not improve AUC. Reverting changes.
Training on augumented user 65034 24/50 current_auc = 0.7241605623068129
User 65034 AUC after training: 0.723504255409239
User 65034 does not improve AUC. Reverting changes.
Training on augumented user 8077 25/50 current_auc = 0.7241605623068129
User 8077 AUC after training: 0.7239911927848584
User 8077 does not improve AUC. Reverting changes.
Training on augumented user 84824 26/50 current_auc = 0.7241605623068129
User 84824 AUC after training: 0.7236736249311936
User 84824 does not improve AUC. Reverting changes.
Training on augumented user 130272 27/50 current_auc = 0.7241605623068129
User 130272 AUC after training: 0.7238429944531481
User 130272 does not improve AUC. Reverting changes.
Training on augumented user 133242 28/50 current_auc = 0.7241605623068129
User 133242 AUC after training: 0.7239911927848584
User 133242 does not improve AUC. Reverting changes.
Training on augumented user 24951 29/50 current_auc = 0.7241605623068129
User 24951 AUC after training: 0.7242875894482788
User 24951 improves AUC. Keeping the model.
Training on augumented user 8974 30/50 current_auc = 0.7242875894482788
User 8974 AUC after training: 0.723832408858026
User 8974 does not improve AUC. Reverting changes.
Training on augumented user 123026 31/50 current_auc = 0.7242875894482788
User 123026 AUC after training: 0.7239700215946141
User 123026 does not improve AUC. Reverting changes.
Training on augumented user 64809 32/50 current_auc = 0.7242875894482788
User 64809 AUC after training: 0.7240441207604691
User 64809 does not improve AUC. Reverting changes.
Training on augumented user 62753 33/50 current_auc = 0.7242875894482788
User 62753 AUC after training: 0.7238747512385145
User 62753 does not improve AUC. Reverting changes.
Training on augumented user 42675 34/50 current_auc = 0.7242875894482788
User 42675 AUC after training: 0.7240123639751027
User 42675 does not improve AUC. Reverting changes.
Training on augumented user 4560 35/50 current_auc = 0.7242875894482788
User 4560 AUC after training: 0.7241499767116908
User 4560 does not improve AUC. Reverting changes.
Training on augumented user 131077 36/50 current_auc = 0.7242875894482788
User 131077 AUC after training: 0.7237688952872932
User 131077 does not improve AUC. Reverting changes.
Training on augumented user 33277 37/50 current_auc = 0.7242875894482788
User 33277 AUC after training: 0.7242029046873013
User 33277 does not improve AUC. Reverting changes.
Training on augumented user 57401 38/50 current_auc = 0.7242875894482788
User 57401 AUC after training: 0.7235571833848499
User 57401 does not improve AUC. Reverting changes.
Training on augumented user 61020 39/50 current_auc = 0.7242875894482788
User 61020 AUC after training: 0.7242664182580344
User 61020 does not improve AUC. Reverting changes.
Training on augumented user 30313 40/50 current_auc = 0.7242875894482788
User 30313 AUC after training: 0.7240335351653471
User 30313 does not improve AUC. Reverting changes.
Training on augumented user 91122 41/50 current_auc = 0.7242875894482788
User 91122 AUC after training: 0.7239382648092475
User 91122 does not improve AUC. Reverting changes.
Training on augumented user 8964 42/50 current_auc = 0.7242875894482788
User 8964 AUC after training: 0.7238535800482703
User 8964 does not improve AUC. Reverting changes.
Training on augumented user 42877 43/50 current_auc = 0.7242875894482788
User 42877 AUC after training: 0.7236736249311936
User 42877 does not improve AUC. Reverting changes.
Training on augumented user 25346 44/50 current_auc = 0.7242875894482788
User 25346 AUC after training: 0.7234195706482618
User 25346 does not improve AUC. Reverting changes.
Training on augumented user 137621 45/50 current_auc = 0.7242875894482788
User 137621 AUC after training: 0.7233983994580175
User 137621 does not improve AUC. Reverting changes.
Training on augumented user 127760 46/50 current_auc = 0.7242875894482788
User 127760 AUC after training: 0.7239276792141254
User 127760 does not improve AUC. Reverting changes.
Training on augumented user 42761 47/50 current_auc = 0.7242875894482788
User 42761 AUC after training: 0.7240652919507133
User 42761 does not improve AUC. Reverting changes.
Training on augumented user 43978 48/50 current_auc = 0.7242875894482788
User 43978 AUC after training: 0.7240652919507135
User 43978 does not improve AUC. Reverting changes.
Training on augumented user 18654 49/50 current_auc = 0.7242875894482788
User 18654 AUC after training: 0.7241393911165686
User 18654 does not improve AUC. Reverting changes.
[2024-12-02 19:34:36.014753] start test user 115181 214/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:34:36.499335] start test user 115181 214/567 recall augumented users by random, augumented_users = [46963, 30220, 76666, 40992, 1803, 18028, 24185, 74578, 58267, 101935, 54092, 117133, 31933, 74179, 12585, 10161, 103693, 81885, 81243, 73168, 92298, 3185, 47105, 8690, 134443, 31699, 128126, 135094, 80032, 11037, 18512, 104221, 104476, 93678, 45130, 85101, 1285, 41542, 14768, 83336, 2823, 100581, 48540, 32113, 63803, 12671, 89362, 1543, 79221, 14328]
[2024-12-02 19:34:36.514364] user = 115181 Cloud 214/567
[2024-12-02 19:34:36.535219] user = 115181 Local 214/567
[2024-12-02 19:34:36.572138] user = 115181 Local+ 214/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:34:39.472902] user = 115181 MPDA- 214/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8125
Training on augumented user 46963 0/50 current_auc = 0.8125
User 46963 AUC after training: 0.8125
User 46963 does not improve AUC. Reverting changes.
Training on augumented user 30220 1/50 current_auc = 0.8125
User 30220 AUC after training: 0.8125
User 30220 does not improve AUC. Reverting changes.
Training on augumented user 76666 2/50 current_auc = 0.8125
User 76666 AUC after training: 0.8125
User 76666 does not improve AUC. Reverting changes.
Training on augumented user 40992 3/50 current_auc = 0.8125
User 40992 AUC after training: 0.8125
User 40992 does not improve AUC. Reverting changes.
Training on augumented user 1803 4/50 current_auc = 0.8125
User 1803 AUC after training: 0.8125
User 1803 does not improve AUC. Reverting changes.
Training on augumented user 18028 5/50 current_auc = 0.8125
User 18028 AUC after training: 0.8125
User 18028 does not improve AUC. Reverting changes.
Training on augumented user 24185 6/50 current_auc = 0.8125
User 24185 AUC after training: 0.8125
User 24185 does not improve AUC. Reverting changes.
Training on augumented user 74578 7/50 current_auc = 0.8125
User 74578 AUC after training: 0.8125
User 74578 does not improve AUC. Reverting changes.
Training on augumented user 58267 8/50 current_auc = 0.8125
User 58267 AUC after training: 0.8125
User 58267 does not improve AUC. Reverting changes.
Training on augumented user 101935 9/50 current_auc = 0.8125
User 101935 AUC after training: 0.8125
User 101935 does not improve AUC. Reverting changes.
Training on augumented user 54092 10/50 current_auc = 0.8125
User 54092 AUC after training: 0.8125
User 54092 does not improve AUC. Reverting changes.
Training on augumented user 117133 11/50 current_auc = 0.8125
User 117133 AUC after training: 0.8125
User 117133 does not improve AUC. Reverting changes.
Training on augumented user 31933 12/50 current_auc = 0.8125
User 31933 AUC after training: 0.8125
User 31933 does not improve AUC. Reverting changes.
Training on augumented user 74179 13/50 current_auc = 0.8125
User 74179 AUC after training: 0.8125
User 74179 does not improve AUC. Reverting changes.
Training on augumented user 12585 14/50 current_auc = 0.8125
User 12585 AUC after training: 0.8125
User 12585 does not improve AUC. Reverting changes.
Training on augumented user 10161 15/50 current_auc = 0.8125
User 10161 AUC after training: 0.8125
User 10161 does not improve AUC. Reverting changes.
Training on augumented user 103693 16/50 current_auc = 0.8125
User 103693 AUC after training: 0.8125
User 103693 does not improve AUC. Reverting changes.
Training on augumented user 81885 17/50 current_auc = 0.8125
User 81885 AUC after training: 0.8125
User 81885 does not improve AUC. Reverting changes.
Training on augumented user 81243 18/50 current_auc = 0.8125
User 81243 AUC after training: 0.8125
User 81243 does not improve AUC. Reverting changes.
Training on augumented user 73168 19/50 current_auc = 0.8125
User 73168 AUC after training: 0.8125
User 73168 does not improve AUC. Reverting changes.
Training on augumented user 92298 20/50 current_auc = 0.8125
User 92298 AUC after training: 0.8125
User 92298 does not improve AUC. Reverting changes.
Training on augumented user 3185 21/50 current_auc = 0.8125
User 3185 AUC after training: 0.8125
User 3185 does not improve AUC. Reverting changes.
Training on augumented user 47105 22/50 current_auc = 0.8125
User 47105 AUC after training: 0.8125
User 47105 does not improve AUC. Reverting changes.
Training on augumented user 8690 23/50 current_auc = 0.8125
User 8690 AUC after training: 0.8125
User 8690 does not improve AUC. Reverting changes.
Training on augumented user 134443 24/50 current_auc = 0.8125
User 134443 AUC after training: 0.8125
User 134443 does not improve AUC. Reverting changes.
Training on augumented user 31699 25/50 current_auc = 0.8125
User 31699 AUC after training: 0.8125
User 31699 does not improve AUC. Reverting changes.
Training on augumented user 128126 26/50 current_auc = 0.8125
User 128126 AUC after training: 0.8125
User 128126 does not improve AUC. Reverting changes.
Training on augumented user 135094 27/50 current_auc = 0.8125
User 135094 AUC after training: 0.8125
User 135094 does not improve AUC. Reverting changes.
Training on augumented user 80032 28/50 current_auc = 0.8125
User 80032 AUC after training: 0.8125
User 80032 does not improve AUC. Reverting changes.
Training on augumented user 11037 29/50 current_auc = 0.8125
User 11037 AUC after training: 0.8125
User 11037 does not improve AUC. Reverting changes.
Training on augumented user 18512 30/50 current_auc = 0.8125
User 18512 AUC after training: 0.8125
User 18512 does not improve AUC. Reverting changes.
Training on augumented user 104221 31/50 current_auc = 0.8125
User 104221 AUC after training: 0.8125
User 104221 does not improve AUC. Reverting changes.
Training on augumented user 104476 32/50 current_auc = 0.8125
User 104476 AUC after training: 0.8125
User 104476 does not improve AUC. Reverting changes.
Training on augumented user 93678 33/50 current_auc = 0.8125
User 93678 AUC after training: 0.8125
User 93678 does not improve AUC. Reverting changes.
Training on augumented user 45130 34/50 current_auc = 0.8125
User 45130 AUC after training: 0.8125
User 45130 does not improve AUC. Reverting changes.
Training on augumented user 85101 35/50 current_auc = 0.8125
User 85101 AUC after training: 0.8125
User 85101 does not improve AUC. Reverting changes.
Training on augumented user 1285 36/50 current_auc = 0.8125
User 1285 AUC after training: 0.8125
User 1285 does not improve AUC. Reverting changes.
Training on augumented user 41542 37/50 current_auc = 0.8125
User 41542 AUC after training: 0.8125
User 41542 does not improve AUC. Reverting changes.
Training on augumented user 14768 38/50 current_auc = 0.8125
User 14768 AUC after training: 0.8125
User 14768 does not improve AUC. Reverting changes.
Training on augumented user 83336 39/50 current_auc = 0.8125
User 83336 AUC after training: 0.8125
User 83336 does not improve AUC. Reverting changes.
Training on augumented user 2823 40/50 current_auc = 0.8125
User 2823 AUC after training: 0.875
User 2823 improves AUC. Keeping the model.
Training on augumented user 100581 41/50 current_auc = 0.875
User 100581 AUC after training: 0.8125
User 100581 does not improve AUC. Reverting changes.
Training on augumented user 48540 42/50 current_auc = 0.875
User 48540 AUC after training: 0.875
User 48540 does not improve AUC. Reverting changes.
Training on augumented user 32113 43/50 current_auc = 0.875
User 32113 AUC after training: 0.875
User 32113 does not improve AUC. Reverting changes.
Training on augumented user 63803 44/50 current_auc = 0.875
User 63803 AUC after training: 0.8125
User 63803 does not improve AUC. Reverting changes.
Training on augumented user 12671 45/50 current_auc = 0.875
User 12671 AUC after training: 0.875
User 12671 does not improve AUC. Reverting changes.
Training on augumented user 89362 46/50 current_auc = 0.875
User 89362 AUC after training: 0.875
User 89362 does not improve AUC. Reverting changes.
Training on augumented user 1543 47/50 current_auc = 0.875
User 1543 AUC after training: 0.875
User 1543 does not improve AUC. Reverting changes.
Training on augumented user 79221 48/50 current_auc = 0.875
User 79221 AUC after training: 0.875
User 79221 does not improve AUC. Reverting changes.
Training on augumented user 14328 49/50 current_auc = 0.875
User 14328 AUC after training: 0.8125
User 14328 does not improve AUC. Reverting changes.
[2024-12-02 19:35:06.815797] start test user 115200 215/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:35:07.712462] start test user 115200 215/567 recall augumented users by random, augumented_users = [8933, 106445, 50510, 104938, 126969, 127639, 43004, 25038, 50260, 94090, 137941, 101299, 82643, 2151, 19769, 137595, 101406, 92707, 317, 127702, 12720, 128263, 91861, 93190, 13961, 136854, 89993, 128174, 66161, 7556, 92437, 61249, 97999, 64891, 51759, 38410, 71346, 126695, 13129, 104592, 65633, 108937, 134252, 89554, 90906, 68610, 401, 119855, 129066, 70028]
[2024-12-02 19:35:07.730308] user = 115200 Cloud 215/567
[2024-12-02 19:35:07.747097] user = 115200 Local 215/567
[2024-12-02 19:35:07.776036] user = 115200 Local+ 215/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:35:09.543231] user = 115200 MPDA- 215/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6899399399399401
Training on augumented user 8933 0/50 current_auc = 0.6899399399399401
User 8933 AUC after training: 0.6929429429429429
User 8933 improves AUC. Keeping the model.
Training on augumented user 106445 1/50 current_auc = 0.6929429429429429
User 106445 AUC after training: 0.6944444444444445
User 106445 improves AUC. Keeping the model.
Training on augumented user 50510 2/50 current_auc = 0.6944444444444445
User 50510 AUC after training: 0.6944444444444445
User 50510 does not improve AUC. Reverting changes.
Training on augumented user 104938 3/50 current_auc = 0.6944444444444445
User 104938 AUC after training: 0.6884384384384384
User 104938 does not improve AUC. Reverting changes.
Training on augumented user 126969 4/50 current_auc = 0.6944444444444445
User 126969 AUC after training: 0.6906906906906908
User 126969 does not improve AUC. Reverting changes.
Training on augumented user 127639 5/50 current_auc = 0.6944444444444445
User 127639 AUC after training: 0.6996996996996997
User 127639 improves AUC. Keeping the model.
Training on augumented user 43004 6/50 current_auc = 0.6996996996996997
User 43004 AUC after training: 0.6936936936936937
User 43004 does not improve AUC. Reverting changes.
Training on augumented user 25038 7/50 current_auc = 0.6996996996996997
User 25038 AUC after training: 0.6981981981981983
User 25038 does not improve AUC. Reverting changes.
Training on augumented user 50260 8/50 current_auc = 0.6996996996996997
User 50260 AUC after training: 0.6996996996996997
User 50260 does not improve AUC. Reverting changes.
Training on augumented user 94090 9/50 current_auc = 0.6996996996996997
User 94090 AUC after training: 0.6921921921921922
User 94090 does not improve AUC. Reverting changes.
Training on augumented user 137941 10/50 current_auc = 0.6996996996996997
User 137941 AUC after training: 0.6959459459459459
User 137941 does not improve AUC. Reverting changes.
Training on augumented user 101299 11/50 current_auc = 0.6996996996996997
User 101299 AUC after training: 0.6996996996996998
User 101299 improves AUC. Keeping the model.
Training on augumented user 82643 12/50 current_auc = 0.6996996996996998
User 82643 AUC after training: 0.6959459459459459
User 82643 does not improve AUC. Reverting changes.
Training on augumented user 2151 13/50 current_auc = 0.6996996996996998
User 2151 AUC after training: 0.7012012012012012
User 2151 improves AUC. Keeping the model.
Training on augumented user 19769 14/50 current_auc = 0.7012012012012012
User 19769 AUC after training: 0.7012012012012012
User 19769 does not improve AUC. Reverting changes.
Training on augumented user 137595 15/50 current_auc = 0.7012012012012012
User 137595 AUC after training: 0.7012012012012012
User 137595 does not improve AUC. Reverting changes.
Training on augumented user 101406 16/50 current_auc = 0.7012012012012012
User 101406 AUC after training: 0.6996996996996998
User 101406 does not improve AUC. Reverting changes.
Training on augumented user 92707 17/50 current_auc = 0.7012012012012012
User 92707 AUC after training: 0.6936936936936937
User 92707 does not improve AUC. Reverting changes.
Training on augumented user 317 18/50 current_auc = 0.7012012012012012
User 317 AUC after training: 0.6966966966966968
User 317 does not improve AUC. Reverting changes.
Training on augumented user 127702 19/50 current_auc = 0.7012012012012012
User 127702 AUC after training: 0.7012012012012012
User 127702 does not improve AUC. Reverting changes.
Training on augumented user 12720 20/50 current_auc = 0.7012012012012012
User 12720 AUC after training: 0.6951951951951953
User 12720 does not improve AUC. Reverting changes.
Training on augumented user 128263 21/50 current_auc = 0.7012012012012012
User 128263 AUC after training: 0.6951951951951952
User 128263 does not improve AUC. Reverting changes.
Training on augumented user 91861 22/50 current_auc = 0.7012012012012012
User 91861 AUC after training: 0.7012012012012012
User 91861 does not improve AUC. Reverting changes.
Training on augumented user 93190 23/50 current_auc = 0.7012012012012012
User 93190 AUC after training: 0.6996996996996998
User 93190 does not improve AUC. Reverting changes.
Training on augumented user 13961 24/50 current_auc = 0.7012012012012012
User 13961 AUC after training: 0.6906906906906908
User 13961 does not improve AUC. Reverting changes.
Training on augumented user 136854 25/50 current_auc = 0.7012012012012012
User 136854 AUC after training: 0.6996996996996998
User 136854 does not improve AUC. Reverting changes.
Training on augumented user 89993 26/50 current_auc = 0.7012012012012012
User 89993 AUC after training: 0.7012012012012012
User 89993 does not improve AUC. Reverting changes.
Training on augumented user 128174 27/50 current_auc = 0.7012012012012012
User 128174 AUC after training: 0.6981981981981983
User 128174 does not improve AUC. Reverting changes.
Training on augumented user 66161 28/50 current_auc = 0.7012012012012012
User 66161 AUC after training: 0.6951951951951952
User 66161 does not improve AUC. Reverting changes.
Training on augumented user 7556 29/50 current_auc = 0.7012012012012012
User 7556 AUC after training: 0.6831831831831833
User 7556 does not improve AUC. Reverting changes.
Training on augumented user 92437 30/50 current_auc = 0.7012012012012012
User 92437 AUC after training: 0.7012012012012012
User 92437 does not improve AUC. Reverting changes.
Training on augumented user 61249 31/50 current_auc = 0.7012012012012012
User 61249 AUC after training: 0.6996996996996998
User 61249 does not improve AUC. Reverting changes.
Training on augumented user 97999 32/50 current_auc = 0.7012012012012012
User 97999 AUC after training: 0.6884384384384385
User 97999 does not improve AUC. Reverting changes.
Training on augumented user 64891 33/50 current_auc = 0.7012012012012012
User 64891 AUC after training: 0.7012012012012012
User 64891 does not improve AUC. Reverting changes.
Training on augumented user 51759 34/50 current_auc = 0.7012012012012012
User 51759 AUC after training: 0.6906906906906908
User 51759 does not improve AUC. Reverting changes.
Training on augumented user 38410 35/50 current_auc = 0.7012012012012012
User 38410 AUC after training: 0.7012012012012012
User 38410 does not improve AUC. Reverting changes.
Training on augumented user 71346 36/50 current_auc = 0.7012012012012012
User 71346 AUC after training: 0.7012012012012012
User 71346 does not improve AUC. Reverting changes.
Training on augumented user 126695 37/50 current_auc = 0.7012012012012012
User 126695 AUC after training: 0.6936936936936937
User 126695 does not improve AUC. Reverting changes.
Training on augumented user 13129 38/50 current_auc = 0.7012012012012012
User 13129 AUC after training: 0.7012012012012012
User 13129 does not improve AUC. Reverting changes.
Training on augumented user 104592 39/50 current_auc = 0.7012012012012012
User 104592 AUC after training: 0.7012012012012012
User 104592 does not improve AUC. Reverting changes.
Training on augumented user 65633 40/50 current_auc = 0.7012012012012012
User 65633 AUC after training: 0.7012012012012012
User 65633 does not improve AUC. Reverting changes.
Training on augumented user 108937 41/50 current_auc = 0.7012012012012012
User 108937 AUC after training: 0.7012012012012012
User 108937 does not improve AUC. Reverting changes.
Training on augumented user 134252 42/50 current_auc = 0.7012012012012012
User 134252 AUC after training: 0.6966966966966968
User 134252 does not improve AUC. Reverting changes.
Training on augumented user 89554 43/50 current_auc = 0.7012012012012012
User 89554 AUC after training: 0.6921921921921922
User 89554 does not improve AUC. Reverting changes.
Training on augumented user 90906 44/50 current_auc = 0.7012012012012012
User 90906 AUC after training: 0.7012012012012012
User 90906 does not improve AUC. Reverting changes.
Training on augumented user 68610 45/50 current_auc = 0.7012012012012012
User 68610 AUC after training: 0.7012012012012012
User 68610 does not improve AUC. Reverting changes.
Training on augumented user 401 46/50 current_auc = 0.7012012012012012
User 401 AUC after training: 0.6981981981981982
User 401 does not improve AUC. Reverting changes.
Training on augumented user 119855 47/50 current_auc = 0.7012012012012012
User 119855 AUC after training: 0.6996996996996998
User 119855 does not improve AUC. Reverting changes.
Training on augumented user 129066 48/50 current_auc = 0.7012012012012012
User 129066 AUC after training: 0.6996996996996998
User 129066 does not improve AUC. Reverting changes.
Training on augumented user 70028 49/50 current_auc = 0.7012012012012012
User 70028 AUC after training: 0.6876876876876877
User 70028 does not improve AUC. Reverting changes.
[2024-12-02 19:35:38.588283] start test user 115203 216/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:35:39.123634] start test user 115203 216/567 recall augumented users by random, augumented_users = [76592, 64111, 23481, 70725, 101383, 82908, 107450, 71798, 99028, 27915, 17091, 39749, 53301, 85427, 33148, 85413, 75499, 51899, 31648, 5826, 91784, 38017, 111297, 24350, 3042, 39499, 71247, 77244, 2637, 88492, 18082, 55011, 18787, 58492, 84876, 58679, 70927, 9612, 58307, 72104, 25032, 57167, 62868, 76640, 10711, 107408, 19818, 82076, 515, 38221]
[2024-12-02 19:35:39.140786] user = 115203 Cloud 216/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:35:39.148291] user = 115203 Local 216/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:35:39.165583] user = 115203 Local+ 216/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:35:41.432910] user = 115203 MPDA- 216/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 76592 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76592 AUC after training: 0.5
User 76592 does not improve AUC. Reverting changes.
Training on augumented user 64111 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64111 AUC after training: 0.5
User 64111 does not improve AUC. Reverting changes.
Training on augumented user 23481 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23481 AUC after training: 0.5
User 23481 does not improve AUC. Reverting changes.
Training on augumented user 70725 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70725 AUC after training: 0.5
User 70725 does not improve AUC. Reverting changes.
Training on augumented user 101383 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101383 AUC after training: 0.5
User 101383 does not improve AUC. Reverting changes.
Training on augumented user 82908 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82908 AUC after training: 0.5
User 82908 does not improve AUC. Reverting changes.
Training on augumented user 107450 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107450 AUC after training: 0.5
User 107450 does not improve AUC. Reverting changes.
Training on augumented user 71798 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71798 AUC after training: 0.5
User 71798 does not improve AUC. Reverting changes.
Training on augumented user 99028 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99028 AUC after training: 0.5
User 99028 does not improve AUC. Reverting changes.
Training on augumented user 27915 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27915 AUC after training: 0.5
User 27915 does not improve AUC. Reverting changes.
Training on augumented user 17091 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 17091 AUC after training: 0.5
User 17091 does not improve AUC. Reverting changes.
Training on augumented user 39749 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 39749 AUC after training: 0.5
User 39749 does not improve AUC. Reverting changes.
Training on augumented user 53301 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53301 AUC after training: 0.5
User 53301 does not improve AUC. Reverting changes.
Training on augumented user 85427 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85427 AUC after training: 0.5
User 85427 does not improve AUC. Reverting changes.
Training on augumented user 33148 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33148 AUC after training: 0.5
User 33148 does not improve AUC. Reverting changes.
Training on augumented user 85413 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85413 AUC after training: 0.5
User 85413 does not improve AUC. Reverting changes.
Training on augumented user 75499 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75499 AUC after training: 0.5
User 75499 does not improve AUC. Reverting changes.
Training on augumented user 51899 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51899 AUC after training: 0.5
User 51899 does not improve AUC. Reverting changes.
Training on augumented user 31648 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 31648 AUC after training: 0.5
User 31648 does not improve AUC. Reverting changes.
Training on augumented user 5826 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5826 AUC after training: 0.5
User 5826 does not improve AUC. Reverting changes.
Training on augumented user 91784 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91784 AUC after training: 0.5
User 91784 does not improve AUC. Reverting changes.
Training on augumented user 38017 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38017 AUC after training: 0.5
User 38017 does not improve AUC. Reverting changes.
Training on augumented user 111297 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111297 AUC after training: 0.5
User 111297 does not improve AUC. Reverting changes.
Training on augumented user 24350 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24350 AUC after training: 0.5
User 24350 does not improve AUC. Reverting changes.
Training on augumented user 3042 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3042 AUC after training: 0.5
User 3042 does not improve AUC. Reverting changes.
Training on augumented user 39499 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 39499 AUC after training: 0.5
User 39499 does not improve AUC. Reverting changes.
Training on augumented user 71247 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71247 AUC after training: 0.5
User 71247 does not improve AUC. Reverting changes.
Training on augumented user 77244 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77244 AUC after training: 0.5
User 77244 does not improve AUC. Reverting changes.
Training on augumented user 2637 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2637 AUC after training: 0.5
User 2637 does not improve AUC. Reverting changes.
Training on augumented user 88492 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88492 AUC after training: 0.5
User 88492 does not improve AUC. Reverting changes.
Training on augumented user 18082 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18082 AUC after training: 0.5
User 18082 does not improve AUC. Reverting changes.
Training on augumented user 55011 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55011 AUC after training: 0.5
User 55011 does not improve AUC. Reverting changes.
Training on augumented user 18787 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18787 AUC after training: 0.5
User 18787 does not improve AUC. Reverting changes.
Training on augumented user 58492 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58492 AUC after training: 0.5
User 58492 does not improve AUC. Reverting changes.
Training on augumented user 84876 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84876 AUC after training: 0.5
User 84876 does not improve AUC. Reverting changes.
Training on augumented user 58679 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58679 AUC after training: 0.5
User 58679 does not improve AUC. Reverting changes.
Training on augumented user 70927 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70927 AUC after training: 0.5
User 70927 does not improve AUC. Reverting changes.
Training on augumented user 9612 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9612 AUC after training: 0.5
User 9612 does not improve AUC. Reverting changes.
Training on augumented user 58307 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58307 AUC after training: 0.5
User 58307 does not improve AUC. Reverting changes.
Training on augumented user 72104 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72104 AUC after training: 0.5
User 72104 does not improve AUC. Reverting changes.
Training on augumented user 25032 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25032 AUC after training: 0.5
User 25032 does not improve AUC. Reverting changes.
Training on augumented user 57167 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57167 AUC after training: 0.5
User 57167 does not improve AUC. Reverting changes.
Training on augumented user 62868 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62868 AUC after training: 0.5
User 62868 does not improve AUC. Reverting changes.
Training on augumented user 76640 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76640 AUC after training: 0.5
User 76640 does not improve AUC. Reverting changes.
Training on augumented user 10711 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10711 AUC after training: 0.5
User 10711 does not improve AUC. Reverting changes.
Training on augumented user 107408 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107408 AUC after training: 0.5
User 107408 does not improve AUC. Reverting changes.
Training on augumented user 19818 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19818 AUC after training: 0.5
User 19818 does not improve AUC. Reverting changes.
Training on augumented user 82076 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82076 AUC after training: 0.5
User 82076 does not improve AUC. Reverting changes.
Training on augumented user 515 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 515 AUC after training: 0.5
User 515 does not improve AUC. Reverting changes.
Training on augumented user 38221 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38221 AUC after training: 0.5
User 38221 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:36:06.079156] start test user 115213 217/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:36:06.525975] start test user 115213 217/567 recall augumented users by random, augumented_users = [43369, 106063, 16816, 109686, 83427, 17890, 80255, 57819, 18187, 21558, 9692, 43772, 13602, 34250, 2198, 27610, 36365, 48878, 85550, 96326, 110891, 41089, 71388, 125793, 98509, 46251, 94426, 63120, 12255, 93560, 27565, 21671, 4923, 71492, 91281, 97137, 134116, 124741, 40400, 39996, 75184, 124957, 62799, 6607, 70258, 136188, 65766, 2158, 97801, 28913]
[2024-12-02 19:36:06.541041] user = 115213 Cloud 217/567
[2024-12-02 19:36:06.562952] user = 115213 Local 217/567
[2024-12-02 19:36:06.591152] user = 115213 Local+ 217/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:36:08.898338] user = 115213 MPDA- 217/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6207692307692307
Training on augumented user 43369 0/50 current_auc = 0.6207692307692307
User 43369 AUC after training: 0.6175384615384615
User 43369 does not improve AUC. Reverting changes.
Training on augumented user 106063 1/50 current_auc = 0.6207692307692307
User 106063 AUC after training: 0.6192307692307691
User 106063 does not improve AUC. Reverting changes.
Training on augumented user 16816 2/50 current_auc = 0.6207692307692307
User 16816 AUC after training: 0.6203076923076922
User 16816 does not improve AUC. Reverting changes.
Training on augumented user 109686 3/50 current_auc = 0.6207692307692307
User 109686 AUC after training: 0.622
User 109686 improves AUC. Keeping the model.
Training on augumented user 83427 4/50 current_auc = 0.622
User 83427 AUC after training: 0.6215384615384616
User 83427 does not improve AUC. Reverting changes.
Training on augumented user 17890 5/50 current_auc = 0.622
User 17890 AUC after training: 0.6216923076923077
User 17890 does not improve AUC. Reverting changes.
Training on augumented user 80255 6/50 current_auc = 0.622
User 80255 AUC after training: 0.6215384615384615
User 80255 does not improve AUC. Reverting changes.
Training on augumented user 57819 7/50 current_auc = 0.622
User 57819 AUC after training: 0.6229230769230769
User 57819 improves AUC. Keeping the model.
Training on augumented user 18187 8/50 current_auc = 0.6229230769230769
User 18187 AUC after training: 0.622
User 18187 does not improve AUC. Reverting changes.
Training on augumented user 21558 9/50 current_auc = 0.6229230769230769
User 21558 AUC after training: 0.6224615384615385
User 21558 does not improve AUC. Reverting changes.
Training on augumented user 9692 10/50 current_auc = 0.6229230769230769
User 9692 AUC after training: 0.6252307692307693
User 9692 improves AUC. Keeping the model.
Training on augumented user 43772 11/50 current_auc = 0.6252307692307693
User 43772 AUC after training: 0.6303076923076923
User 43772 improves AUC. Keeping the model.
Training on augumented user 13602 12/50 current_auc = 0.6303076923076923
User 13602 AUC after training: 0.6315384615384615
User 13602 improves AUC. Keeping the model.
Training on augumented user 34250 13/50 current_auc = 0.6315384615384615
User 34250 AUC after training: 0.6298461538461538
User 34250 does not improve AUC. Reverting changes.
Training on augumented user 2198 14/50 current_auc = 0.6315384615384615
User 2198 AUC after training: 0.6312307692307692
User 2198 does not improve AUC. Reverting changes.
Training on augumented user 27610 15/50 current_auc = 0.6315384615384615
User 27610 AUC after training: 0.6333846153846153
User 27610 improves AUC. Keeping the model.
Training on augumented user 36365 16/50 current_auc = 0.6333846153846153
User 36365 AUC after training: 0.6346153846153846
User 36365 improves AUC. Keeping the model.
Training on augumented user 48878 17/50 current_auc = 0.6346153846153846
User 48878 AUC after training: 0.6340000000000001
User 48878 does not improve AUC. Reverting changes.
Training on augumented user 85550 18/50 current_auc = 0.6346153846153846
User 85550 AUC after training: 0.6336923076923076
User 85550 does not improve AUC. Reverting changes.
Training on augumented user 96326 19/50 current_auc = 0.6346153846153846
User 96326 AUC after training: 0.6344615384615384
User 96326 does not improve AUC. Reverting changes.
Training on augumented user 110891 20/50 current_auc = 0.6346153846153846
User 110891 AUC after training: 0.6349230769230769
User 110891 improves AUC. Keeping the model.
Training on augumented user 41089 21/50 current_auc = 0.6349230769230769
User 41089 AUC after training: 0.635076923076923
User 41089 improves AUC. Keeping the model.
Training on augumented user 71388 22/50 current_auc = 0.635076923076923
User 71388 AUC after training: 0.6356923076923077
User 71388 improves AUC. Keeping the model.
Training on augumented user 125793 23/50 current_auc = 0.6356923076923077
User 125793 AUC after training: 0.636
User 125793 improves AUC. Keeping the model.
Training on augumented user 98509 24/50 current_auc = 0.636
User 98509 AUC after training: 0.6369230769230769
User 98509 improves AUC. Keeping the model.
Training on augumented user 46251 25/50 current_auc = 0.6369230769230769
User 46251 AUC after training: 0.6355384615384616
User 46251 does not improve AUC. Reverting changes.
Training on augumented user 94426 26/50 current_auc = 0.6369230769230769
User 94426 AUC after training: 0.6363076923076922
User 94426 does not improve AUC. Reverting changes.
Training on augumented user 63120 27/50 current_auc = 0.6369230769230769
User 63120 AUC after training: 0.6353846153846154
User 63120 does not improve AUC. Reverting changes.
Training on augumented user 12255 28/50 current_auc = 0.6369230769230769
User 12255 AUC after training: 0.6352307692307693
User 12255 does not improve AUC. Reverting changes.
Training on augumented user 93560 29/50 current_auc = 0.6369230769230769
User 93560 AUC after training: 0.6329230769230769
User 93560 does not improve AUC. Reverting changes.
Training on augumented user 27565 30/50 current_auc = 0.6369230769230769
User 27565 AUC after training: 0.6366153846153846
User 27565 does not improve AUC. Reverting changes.
Training on augumented user 21671 31/50 current_auc = 0.6369230769230769
User 21671 AUC after training: 0.6364615384615384
User 21671 does not improve AUC. Reverting changes.
Training on augumented user 4923 32/50 current_auc = 0.6369230769230769
User 4923 AUC after training: 0.6350769230769231
User 4923 does not improve AUC. Reverting changes.
Training on augumented user 71492 33/50 current_auc = 0.6369230769230769
User 71492 AUC after training: 0.6372307692307693
User 71492 improves AUC. Keeping the model.
Training on augumented user 91281 34/50 current_auc = 0.6372307692307693
User 91281 AUC after training: 0.6383076923076924
User 91281 improves AUC. Keeping the model.
Training on augumented user 97137 35/50 current_auc = 0.6383076923076924
User 97137 AUC after training: 0.6369230769230769
User 97137 does not improve AUC. Reverting changes.
Training on augumented user 134116 36/50 current_auc = 0.6383076923076924
User 134116 AUC after training: 0.637846153846154
User 134116 does not improve AUC. Reverting changes.
Training on augumented user 124741 37/50 current_auc = 0.6383076923076924
User 124741 AUC after training: 0.6390769230769231
User 124741 improves AUC. Keeping the model.
Training on augumented user 40400 38/50 current_auc = 0.6390769230769231
User 40400 AUC after training: 0.6389230769230769
User 40400 does not improve AUC. Reverting changes.
Training on augumented user 39996 39/50 current_auc = 0.6390769230769231
User 39996 AUC after training: 0.6390769230769231
User 39996 does not improve AUC. Reverting changes.
Training on augumented user 75184 40/50 current_auc = 0.6390769230769231
User 75184 AUC after training: 0.6369230769230769
User 75184 does not improve AUC. Reverting changes.
Training on augumented user 124957 41/50 current_auc = 0.6390769230769231
User 124957 AUC after training: 0.6395384615384616
User 124957 improves AUC. Keeping the model.
Training on augumented user 62799 42/50 current_auc = 0.6395384615384616
User 62799 AUC after training: 0.6384615384615384
User 62799 does not improve AUC. Reverting changes.
Training on augumented user 6607 43/50 current_auc = 0.6395384615384616
User 6607 AUC after training: 0.638
User 6607 does not improve AUC. Reverting changes.
Training on augumented user 70258 44/50 current_auc = 0.6395384615384616
User 70258 AUC after training: 0.64
User 70258 improves AUC. Keeping the model.
Training on augumented user 136188 45/50 current_auc = 0.64
User 136188 AUC after training: 0.6401538461538461
User 136188 improves AUC. Keeping the model.
Training on augumented user 65766 46/50 current_auc = 0.6401538461538461
User 65766 AUC after training: 0.6366153846153846
User 65766 does not improve AUC. Reverting changes.
Training on augumented user 2158 47/50 current_auc = 0.6401538461538461
User 2158 AUC after training: 0.6380000000000001
User 2158 does not improve AUC. Reverting changes.
Training on augumented user 97801 48/50 current_auc = 0.6401538461538461
User 97801 AUC after training: 0.6410769230769231
User 97801 improves AUC. Keeping the model.
Training on augumented user 28913 49/50 current_auc = 0.6410769230769231
User 28913 AUC after training: 0.6396923076923078
User 28913 does not improve AUC. Reverting changes.
[2024-12-02 19:36:37.637914] start test user 115226 218/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:36:38.460427] start test user 115226 218/567 recall augumented users by random, augumented_users = [103925, 113334, 49934, 15557, 24006, 127597, 57368, 114588, 19588, 23050, 130046, 129452, 40909, 121654, 36227, 43287, 30759, 118101, 3918, 118296, 23191, 123550, 39806, 53734, 112963, 63195, 134111, 83090, 73039, 40607, 115759, 133109, 24338, 42253, 52868, 100355, 35485, 98561, 137370, 34583, 99139, 111038, 90585, 5592, 80263, 30587, 30929, 113777, 118182, 94898]
[2024-12-02 19:36:38.480011] user = 115226 Cloud 218/567
[2024-12-02 19:36:38.502059] user = 115226 Local 218/567
[2024-12-02 19:36:38.688152] user = 115226 Local+ 218/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:36:42.597707] user = 115226 MPDA- 218/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6861111111111111
Training on augumented user 103925 0/50 current_auc = 0.6861111111111111
User 103925 AUC after training: 0.6848958333333334
User 103925 does not improve AUC. Reverting changes.
Training on augumented user 113334 1/50 current_auc = 0.6861111111111111
User 113334 AUC after training: 0.6864583333333333
User 113334 improves AUC. Keeping the model.
Training on augumented user 49934 2/50 current_auc = 0.6864583333333333
User 49934 AUC after training: 0.6861111111111111
User 49934 does not improve AUC. Reverting changes.
Training on augumented user 15557 3/50 current_auc = 0.6864583333333333
User 15557 AUC after training: 0.6859375
User 15557 does not improve AUC. Reverting changes.
Training on augumented user 24006 4/50 current_auc = 0.6864583333333333
User 24006 AUC after training: 0.6887152777777777
User 24006 improves AUC. Keeping the model.
Training on augumented user 127597 5/50 current_auc = 0.6887152777777777
User 127597 AUC after training: 0.6878472222222222
User 127597 does not improve AUC. Reverting changes.
Training on augumented user 57368 6/50 current_auc = 0.6887152777777777
User 57368 AUC after training: 0.6894097222222222
User 57368 improves AUC. Keeping the model.
Training on augumented user 114588 7/50 current_auc = 0.6894097222222222
User 114588 AUC after training: 0.689236111111111
User 114588 does not improve AUC. Reverting changes.
Training on augumented user 19588 8/50 current_auc = 0.6894097222222222
User 19588 AUC after training: 0.6899305555555556
User 19588 improves AUC. Keeping the model.
Training on augumented user 23050 9/50 current_auc = 0.6899305555555556
User 23050 AUC after training: 0.6895833333333333
User 23050 does not improve AUC. Reverting changes.
Training on augumented user 130046 10/50 current_auc = 0.6899305555555556
User 130046 AUC after training: 0.6890624999999999
User 130046 does not improve AUC. Reverting changes.
Training on augumented user 129452 11/50 current_auc = 0.6899305555555556
User 129452 AUC after training: 0.6901041666666666
User 129452 improves AUC. Keeping the model.
Training on augumented user 40909 12/50 current_auc = 0.6901041666666666
User 40909 AUC after training: 0.6899305555555555
User 40909 does not improve AUC. Reverting changes.
Training on augumented user 121654 13/50 current_auc = 0.6901041666666666
User 121654 AUC after training: 0.690625
User 121654 improves AUC. Keeping the model.
Training on augumented user 36227 14/50 current_auc = 0.690625
User 36227 AUC after training: 0.6897569444444445
User 36227 does not improve AUC. Reverting changes.
Training on augumented user 43287 15/50 current_auc = 0.690625
User 43287 AUC after training: 0.6902777777777778
User 43287 does not improve AUC. Reverting changes.
Training on augumented user 30759 16/50 current_auc = 0.690625
User 30759 AUC after training: 0.6901041666666667
User 30759 does not improve AUC. Reverting changes.
Training on augumented user 118101 17/50 current_auc = 0.690625
User 118101 AUC after training: 0.6887152777777777
User 118101 does not improve AUC. Reverting changes.
Training on augumented user 3918 18/50 current_auc = 0.690625
User 3918 AUC after training: 0.6904513888888888
User 3918 does not improve AUC. Reverting changes.
Training on augumented user 118296 19/50 current_auc = 0.690625
User 118296 AUC after training: 0.6911458333333333
User 118296 improves AUC. Keeping the model.
Training on augumented user 23191 20/50 current_auc = 0.6911458333333333
User 23191 AUC after training: 0.6909722222222222
User 23191 does not improve AUC. Reverting changes.
Training on augumented user 123550 21/50 current_auc = 0.6911458333333333
User 123550 AUC after training: 0.6909722222222222
User 123550 does not improve AUC. Reverting changes.
Training on augumented user 39806 22/50 current_auc = 0.6911458333333333
User 39806 AUC after training: 0.6906249999999999
User 39806 does not improve AUC. Reverting changes.
Training on augumented user 53734 23/50 current_auc = 0.6911458333333333
User 53734 AUC after training: 0.6897569444444445
User 53734 does not improve AUC. Reverting changes.
Training on augumented user 112963 24/50 current_auc = 0.6911458333333333
User 112963 AUC after training: 0.6901909722222223
User 112963 does not improve AUC. Reverting changes.
Training on augumented user 63195 25/50 current_auc = 0.6911458333333333
User 63195 AUC after training: 0.6907986111111111
User 63195 does not improve AUC. Reverting changes.
Training on augumented user 134111 26/50 current_auc = 0.6911458333333333
User 134111 AUC after training: 0.6909722222222222
User 134111 does not improve AUC. Reverting changes.
Training on augumented user 83090 27/50 current_auc = 0.6911458333333333
User 83090 AUC after training: 0.6949652777777777
User 83090 improves AUC. Keeping the model.
Training on augumented user 73039 28/50 current_auc = 0.6949652777777777
User 73039 AUC after training: 0.6965277777777777
User 73039 improves AUC. Keeping the model.
Training on augumented user 40607 29/50 current_auc = 0.6965277777777777
User 40607 AUC after training: 0.6967013888888889
User 40607 improves AUC. Keeping the model.
Training on augumented user 115759 30/50 current_auc = 0.6967013888888889
User 115759 AUC after training: 0.6954861111111111
User 115759 does not improve AUC. Reverting changes.
Training on augumented user 133109 31/50 current_auc = 0.6967013888888889
User 133109 AUC after training: 0.6963541666666667
User 133109 does not improve AUC. Reverting changes.
Training on augumented user 24338 32/50 current_auc = 0.6967013888888889
User 24338 AUC after training: 0.6961805555555556
User 24338 does not improve AUC. Reverting changes.
Training on augumented user 42253 33/50 current_auc = 0.6967013888888889
User 42253 AUC after training: 0.6958333333333333
User 42253 does not improve AUC. Reverting changes.
Training on augumented user 52868 34/50 current_auc = 0.6967013888888889
User 52868 AUC after training: 0.6961805555555556
User 52868 does not improve AUC. Reverting changes.
Training on augumented user 100355 35/50 current_auc = 0.6967013888888889
User 100355 AUC after training: 0.6944444444444444
User 100355 does not improve AUC. Reverting changes.
Training on augumented user 35485 36/50 current_auc = 0.6967013888888889
User 35485 AUC after training: 0.6953125
User 35485 does not improve AUC. Reverting changes.
Training on augumented user 98561 37/50 current_auc = 0.6967013888888889
User 98561 AUC after training: 0.6960069444444446
User 98561 does not improve AUC. Reverting changes.
Training on augumented user 137370 38/50 current_auc = 0.6967013888888889
User 137370 AUC after training: 0.6967013888888889
User 137370 does not improve AUC. Reverting changes.
Training on augumented user 34583 39/50 current_auc = 0.6967013888888889
User 34583 AUC after training: 0.695138888888889
User 34583 does not improve AUC. Reverting changes.
Training on augumented user 99139 40/50 current_auc = 0.6967013888888889
User 99139 AUC after training: 0.6947916666666667
User 99139 does not improve AUC. Reverting changes.
Training on augumented user 111038 41/50 current_auc = 0.6967013888888889
User 111038 AUC after training: 0.6961805555555556
User 111038 does not improve AUC. Reverting changes.
Training on augumented user 90585 42/50 current_auc = 0.6967013888888889
User 90585 AUC after training: 0.6956597222222223
User 90585 does not improve AUC. Reverting changes.
Training on augumented user 5592 43/50 current_auc = 0.6967013888888889
User 5592 AUC after training: 0.6965277777777779
User 5592 does not improve AUC. Reverting changes.
Training on augumented user 80263 44/50 current_auc = 0.6967013888888889
User 80263 AUC after training: 0.6963541666666667
User 80263 does not improve AUC. Reverting changes.
Training on augumented user 30587 45/50 current_auc = 0.6967013888888889
User 30587 AUC after training: 0.6968749999999999
User 30587 improves AUC. Keeping the model.
Training on augumented user 30929 46/50 current_auc = 0.6968749999999999
User 30929 AUC after training: 0.696875
User 30929 improves AUC. Keeping the model.
Training on augumented user 113777 47/50 current_auc = 0.696875
User 113777 AUC after training: 0.6961805555555556
User 113777 does not improve AUC. Reverting changes.
Training on augumented user 118182 48/50 current_auc = 0.696875
User 118182 AUC after training: 0.6970486111111112
User 118182 improves AUC. Keeping the model.
Training on augumented user 94898 49/50 current_auc = 0.6970486111111112
User 94898 AUC after training: 0.6977430555555555
User 94898 improves AUC. Keeping the model.
[2024-12-02 19:37:11.681838] start test user 115303 219/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:37:12.140167] start test user 115303 219/567 recall augumented users by random, augumented_users = [101832, 28019, 46260, 71941, 61527, 51879, 4337, 85154, 116745, 129487, 48372, 104525, 72230, 35025, 128999, 39775, 40438, 20029, 88139, 123941, 27172, 9390, 32547, 21102, 8733, 60791, 63975, 32570, 55328, 1379, 55638, 45792, 17249, 125567, 128462, 59872, 94855, 78695, 7591, 15965, 26453, 92273, 15001, 41889, 71143, 11727, 10344, 91507, 26027, 72137]
[2024-12-02 19:37:12.155278] user = 115303 Cloud 219/567
[2024-12-02 19:37:12.166466] user = 115303 Local 219/567
[2024-12-02 19:37:12.231656] user = 115303 Local+ 219/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:37:14.288099] user = 115303 MPDA- 219/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 1.0
Training on augumented user 101832 0/50 current_auc = 1.0
User 101832 AUC after training: 1.0
User 101832 does not improve AUC. Reverting changes.
Training on augumented user 28019 1/50 current_auc = 1.0
User 28019 AUC after training: 1.0
User 28019 does not improve AUC. Reverting changes.
Training on augumented user 46260 2/50 current_auc = 1.0
User 46260 AUC after training: 1.0
User 46260 does not improve AUC. Reverting changes.
Training on augumented user 71941 3/50 current_auc = 1.0
User 71941 AUC after training: 1.0
User 71941 does not improve AUC. Reverting changes.
Training on augumented user 61527 4/50 current_auc = 1.0
User 61527 AUC after training: 1.0
User 61527 does not improve AUC. Reverting changes.
Training on augumented user 51879 5/50 current_auc = 1.0
User 51879 AUC after training: 1.0
User 51879 does not improve AUC. Reverting changes.
Training on augumented user 4337 6/50 current_auc = 1.0
User 4337 AUC after training: 1.0
User 4337 does not improve AUC. Reverting changes.
Training on augumented user 85154 7/50 current_auc = 1.0
User 85154 AUC after training: 1.0
User 85154 does not improve AUC. Reverting changes.
Training on augumented user 116745 8/50 current_auc = 1.0
User 116745 AUC after training: 1.0
User 116745 does not improve AUC. Reverting changes.
Training on augumented user 129487 9/50 current_auc = 1.0
User 129487 AUC after training: 1.0
User 129487 does not improve AUC. Reverting changes.
Training on augumented user 48372 10/50 current_auc = 1.0
User 48372 AUC after training: 1.0
User 48372 does not improve AUC. Reverting changes.
Training on augumented user 104525 11/50 current_auc = 1.0
User 104525 AUC after training: 1.0
User 104525 does not improve AUC. Reverting changes.
Training on augumented user 72230 12/50 current_auc = 1.0
User 72230 AUC after training: 1.0
User 72230 does not improve AUC. Reverting changes.
Training on augumented user 35025 13/50 current_auc = 1.0
User 35025 AUC after training: 1.0
User 35025 does not improve AUC. Reverting changes.
Training on augumented user 128999 14/50 current_auc = 1.0
User 128999 AUC after training: 1.0
User 128999 does not improve AUC. Reverting changes.
Training on augumented user 39775 15/50 current_auc = 1.0
User 39775 AUC after training: 1.0
User 39775 does not improve AUC. Reverting changes.
Training on augumented user 40438 16/50 current_auc = 1.0
User 40438 AUC after training: 1.0
User 40438 does not improve AUC. Reverting changes.
Training on augumented user 20029 17/50 current_auc = 1.0
User 20029 AUC after training: 1.0
User 20029 does not improve AUC. Reverting changes.
Training on augumented user 88139 18/50 current_auc = 1.0
User 88139 AUC after training: 1.0
User 88139 does not improve AUC. Reverting changes.
Training on augumented user 123941 19/50 current_auc = 1.0
User 123941 AUC after training: 1.0
User 123941 does not improve AUC. Reverting changes.
Training on augumented user 27172 20/50 current_auc = 1.0
User 27172 AUC after training: 1.0
User 27172 does not improve AUC. Reverting changes.
Training on augumented user 9390 21/50 current_auc = 1.0
User 9390 AUC after training: 1.0
User 9390 does not improve AUC. Reverting changes.
Training on augumented user 32547 22/50 current_auc = 1.0
User 32547 AUC after training: 1.0
User 32547 does not improve AUC. Reverting changes.
Training on augumented user 21102 23/50 current_auc = 1.0
User 21102 AUC after training: 1.0
User 21102 does not improve AUC. Reverting changes.
Training on augumented user 8733 24/50 current_auc = 1.0
User 8733 AUC after training: 1.0
User 8733 does not improve AUC. Reverting changes.
Training on augumented user 60791 25/50 current_auc = 1.0
User 60791 AUC after training: 1.0
User 60791 does not improve AUC. Reverting changes.
Training on augumented user 63975 26/50 current_auc = 1.0
User 63975 AUC after training: 1.0
User 63975 does not improve AUC. Reverting changes.
Training on augumented user 32570 27/50 current_auc = 1.0
User 32570 AUC after training: 1.0
User 32570 does not improve AUC. Reverting changes.
Training on augumented user 55328 28/50 current_auc = 1.0
User 55328 AUC after training: 1.0
User 55328 does not improve AUC. Reverting changes.
Training on augumented user 1379 29/50 current_auc = 1.0
User 1379 AUC after training: 1.0
User 1379 does not improve AUC. Reverting changes.
Training on augumented user 55638 30/50 current_auc = 1.0
User 55638 AUC after training: 1.0
User 55638 does not improve AUC. Reverting changes.
Training on augumented user 45792 31/50 current_auc = 1.0
User 45792 AUC after training: 1.0
User 45792 does not improve AUC. Reverting changes.
Training on augumented user 17249 32/50 current_auc = 1.0
User 17249 AUC after training: 1.0
User 17249 does not improve AUC. Reverting changes.
Training on augumented user 125567 33/50 current_auc = 1.0
User 125567 AUC after training: 1.0
User 125567 does not improve AUC. Reverting changes.
Training on augumented user 128462 34/50 current_auc = 1.0
User 128462 AUC after training: 1.0
User 128462 does not improve AUC. Reverting changes.
Training on augumented user 59872 35/50 current_auc = 1.0
User 59872 AUC after training: 1.0
User 59872 does not improve AUC. Reverting changes.
Training on augumented user 94855 36/50 current_auc = 1.0
User 94855 AUC after training: 1.0
User 94855 does not improve AUC. Reverting changes.
Training on augumented user 78695 37/50 current_auc = 1.0
User 78695 AUC after training: 1.0
User 78695 does not improve AUC. Reverting changes.
Training on augumented user 7591 38/50 current_auc = 1.0
User 7591 AUC after training: 1.0
User 7591 does not improve AUC. Reverting changes.
Training on augumented user 15965 39/50 current_auc = 1.0
User 15965 AUC after training: 1.0
User 15965 does not improve AUC. Reverting changes.
Training on augumented user 26453 40/50 current_auc = 1.0
User 26453 AUC after training: 1.0
User 26453 does not improve AUC. Reverting changes.
Training on augumented user 92273 41/50 current_auc = 1.0
User 92273 AUC after training: 1.0
User 92273 does not improve AUC. Reverting changes.
Training on augumented user 15001 42/50 current_auc = 1.0
User 15001 AUC after training: 1.0
User 15001 does not improve AUC. Reverting changes.
Training on augumented user 41889 43/50 current_auc = 1.0
User 41889 AUC after training: 1.0
User 41889 does not improve AUC. Reverting changes.
Training on augumented user 71143 44/50 current_auc = 1.0
User 71143 AUC after training: 1.0
User 71143 does not improve AUC. Reverting changes.
Training on augumented user 11727 45/50 current_auc = 1.0
User 11727 AUC after training: 1.0
User 11727 does not improve AUC. Reverting changes.
Training on augumented user 10344 46/50 current_auc = 1.0
User 10344 AUC after training: 1.0
User 10344 does not improve AUC. Reverting changes.
Training on augumented user 91507 47/50 current_auc = 1.0
User 91507 AUC after training: 1.0
User 91507 does not improve AUC. Reverting changes.
Training on augumented user 26027 48/50 current_auc = 1.0
User 26027 AUC after training: 1.0
User 26027 does not improve AUC. Reverting changes.
Training on augumented user 72137 49/50 current_auc = 1.0
User 72137 AUC after training: 1.0
User 72137 does not improve AUC. Reverting changes.
[2024-12-02 19:37:43.142798] start test user 115312 220/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:37:44.024025] start test user 115312 220/567 recall augumented users by random, augumented_users = [123163, 48014, 106695, 11987, 12304, 3093, 11074, 4134, 79738, 132621, 137560, 73870, 136501, 26498, 74300, 86755, 135578, 95440, 19631, 71311, 123631, 136898, 124222, 45801, 14272, 69736, 39587, 2753, 117539, 120132, 13210, 50477, 60952, 37144, 79725, 4371, 118828, 108378, 118899, 15515, 63873, 24290, 54896, 6127, 65617, 3593, 50356, 88746, 49686, 93825]
[2024-12-02 19:37:44.039374] user = 115312 Cloud 220/567
[2024-12-02 19:37:44.069017] user = 115312 Local 220/567
[2024-12-02 19:37:44.149514] user = 115312 Local+ 220/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:37:46.679745] user = 115312 MPDA- 220/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6481203007518798
Training on augumented user 123163 0/50 current_auc = 0.6481203007518798
User 123163 AUC after training: 0.6496240601503759
User 123163 improves AUC. Keeping the model.
Training on augumented user 48014 1/50 current_auc = 0.6496240601503759
User 48014 AUC after training: 0.6526315789473685
User 48014 improves AUC. Keeping the model.
Training on augumented user 106695 2/50 current_auc = 0.6526315789473685
User 106695 AUC after training: 0.6518796992481203
User 106695 does not improve AUC. Reverting changes.
Training on augumented user 11987 3/50 current_auc = 0.6526315789473685
User 11987 AUC after training: 0.6496240601503759
User 11987 does not improve AUC. Reverting changes.
Training on augumented user 12304 4/50 current_auc = 0.6526315789473685
User 12304 AUC after training: 0.6541353383458647
User 12304 improves AUC. Keeping the model.
Training on augumented user 3093 5/50 current_auc = 0.6541353383458647
User 3093 AUC after training: 0.6563909774436091
User 3093 improves AUC. Keeping the model.
Training on augumented user 11074 6/50 current_auc = 0.6563909774436091
User 11074 AUC after training: 0.649624060150376
User 11074 does not improve AUC. Reverting changes.
Training on augumented user 4134 7/50 current_auc = 0.6563909774436091
User 4134 AUC after training: 0.6541353383458647
User 4134 does not improve AUC. Reverting changes.
Training on augumented user 79738 8/50 current_auc = 0.6563909774436091
User 79738 AUC after training: 0.6511278195488722
User 79738 does not improve AUC. Reverting changes.
Training on augumented user 132621 9/50 current_auc = 0.6563909774436091
User 132621 AUC after training: 0.6533834586466166
User 132621 does not improve AUC. Reverting changes.
Training on augumented user 137560 10/50 current_auc = 0.6563909774436091
User 137560 AUC after training: 0.6563909774436091
User 137560 does not improve AUC. Reverting changes.
Training on augumented user 73870 11/50 current_auc = 0.6563909774436091
User 73870 AUC after training: 0.6541353383458647
User 73870 does not improve AUC. Reverting changes.
Training on augumented user 136501 12/50 current_auc = 0.6563909774436091
User 136501 AUC after training: 0.6548872180451127
User 136501 does not improve AUC. Reverting changes.
Training on augumented user 26498 13/50 current_auc = 0.6563909774436091
User 26498 AUC after training: 0.6563909774436091
User 26498 does not improve AUC. Reverting changes.
Training on augumented user 74300 14/50 current_auc = 0.6563909774436091
User 74300 AUC after training: 0.6518796992481203
User 74300 does not improve AUC. Reverting changes.
Training on augumented user 86755 15/50 current_auc = 0.6563909774436091
User 86755 AUC after training: 0.6548872180451129
User 86755 does not improve AUC. Reverting changes.
Training on augumented user 135578 16/50 current_auc = 0.6563909774436091
User 135578 AUC after training: 0.6563909774436091
User 135578 does not improve AUC. Reverting changes.
Training on augumented user 95440 17/50 current_auc = 0.6563909774436091
User 95440 AUC after training: 0.6518796992481203
User 95440 does not improve AUC. Reverting changes.
Training on augumented user 19631 18/50 current_auc = 0.6563909774436091
User 19631 AUC after training: 0.6518796992481203
User 19631 does not improve AUC. Reverting changes.
Training on augumented user 71311 19/50 current_auc = 0.6563909774436091
User 71311 AUC after training: 0.6518796992481203
User 71311 does not improve AUC. Reverting changes.
Training on augumented user 123631 20/50 current_auc = 0.6563909774436091
User 123631 AUC after training: 0.6533834586466166
User 123631 does not improve AUC. Reverting changes.
Training on augumented user 136898 21/50 current_auc = 0.6563909774436091
User 136898 AUC after training: 0.6548872180451127
User 136898 does not improve AUC. Reverting changes.
Training on augumented user 124222 22/50 current_auc = 0.6563909774436091
User 124222 AUC after training: 0.6526315789473685
User 124222 does not improve AUC. Reverting changes.
Training on augumented user 45801 23/50 current_auc = 0.6563909774436091
User 45801 AUC after training: 0.6533834586466166
User 45801 does not improve AUC. Reverting changes.
Training on augumented user 14272 24/50 current_auc = 0.6563909774436091
User 14272 AUC after training: 0.6548872180451129
User 14272 does not improve AUC. Reverting changes.
Training on augumented user 69736 25/50 current_auc = 0.6563909774436091
User 69736 AUC after training: 0.6556390977443609
User 69736 does not improve AUC. Reverting changes.
Training on augumented user 39587 26/50 current_auc = 0.6563909774436091
User 39587 AUC after training: 0.6548872180451127
User 39587 does not improve AUC. Reverting changes.
Training on augumented user 2753 27/50 current_auc = 0.6563909774436091
User 2753 AUC after training: 0.6556390977443609
User 2753 does not improve AUC. Reverting changes.
Training on augumented user 117539 28/50 current_auc = 0.6563909774436091
User 117539 AUC after training: 0.6533834586466166
User 117539 does not improve AUC. Reverting changes.
Training on augumented user 120132 29/50 current_auc = 0.6563909774436091
User 120132 AUC after training: 0.6541353383458647
User 120132 does not improve AUC. Reverting changes.
Training on augumented user 13210 30/50 current_auc = 0.6563909774436091
User 13210 AUC after training: 0.6533834586466166
User 13210 does not improve AUC. Reverting changes.
Training on augumented user 50477 31/50 current_auc = 0.6563909774436091
User 50477 AUC after training: 0.6533834586466165
User 50477 does not improve AUC. Reverting changes.
Training on augumented user 60952 32/50 current_auc = 0.6563909774436091
User 60952 AUC after training: 0.6548872180451127
User 60952 does not improve AUC. Reverting changes.
Training on augumented user 37144 33/50 current_auc = 0.6563909774436091
User 37144 AUC after training: 0.6541353383458647
User 37144 does not improve AUC. Reverting changes.
Training on augumented user 79725 34/50 current_auc = 0.6563909774436091
User 79725 AUC after training: 0.6526315789473685
User 79725 does not improve AUC. Reverting changes.
Training on augumented user 4371 35/50 current_auc = 0.6563909774436091
User 4371 AUC after training: 0.6548872180451127
User 4371 does not improve AUC. Reverting changes.
Training on augumented user 118828 36/50 current_auc = 0.6563909774436091
User 118828 AUC after training: 0.6511278195488722
User 118828 does not improve AUC. Reverting changes.
Training on augumented user 108378 37/50 current_auc = 0.6563909774436091
User 108378 AUC after training: 0.6541353383458647
User 108378 does not improve AUC. Reverting changes.
Training on augumented user 118899 38/50 current_auc = 0.6563909774436091
User 118899 AUC after training: 0.6548872180451127
User 118899 does not improve AUC. Reverting changes.
Training on augumented user 15515 39/50 current_auc = 0.6563909774436091
User 15515 AUC after training: 0.6533834586466165
User 15515 does not improve AUC. Reverting changes.
Training on augumented user 63873 40/50 current_auc = 0.6563909774436091
User 63873 AUC after training: 0.6526315789473683
User 63873 does not improve AUC. Reverting changes.
Training on augumented user 24290 41/50 current_auc = 0.6563909774436091
User 24290 AUC after training: 0.6548872180451127
User 24290 does not improve AUC. Reverting changes.
Training on augumented user 54896 42/50 current_auc = 0.6563909774436091
User 54896 AUC after training: 0.6548872180451127
User 54896 does not improve AUC. Reverting changes.
Training on augumented user 6127 43/50 current_auc = 0.6563909774436091
User 6127 AUC after training: 0.6518796992481203
User 6127 does not improve AUC. Reverting changes.
Training on augumented user 65617 44/50 current_auc = 0.6563909774436091
User 65617 AUC after training: 0.6556390977443609
User 65617 does not improve AUC. Reverting changes.
Training on augumented user 3593 45/50 current_auc = 0.6563909774436091
User 3593 AUC after training: 0.6533834586466166
User 3593 does not improve AUC. Reverting changes.
Training on augumented user 50356 46/50 current_auc = 0.6563909774436091
User 50356 AUC after training: 0.6518796992481203
User 50356 does not improve AUC. Reverting changes.
Training on augumented user 88746 47/50 current_auc = 0.6563909774436091
User 88746 AUC after training: 0.6541353383458647
User 88746 does not improve AUC. Reverting changes.
Training on augumented user 49686 48/50 current_auc = 0.6563909774436091
User 49686 AUC after training: 0.6526315789473683
User 49686 does not improve AUC. Reverting changes.
Training on augumented user 93825 49/50 current_auc = 0.6563909774436091
User 93825 AUC after training: 0.6556390977443609
User 93825 does not improve AUC. Reverting changes.
[2024-12-02 19:38:15.472494] start test user 115333 221/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:38:15.924069] start test user 115333 221/567 recall augumented users by random, augumented_users = [118566, 136635, 89869, 13243, 60907, 100981, 9850, 99214, 114326, 110397, 63027, 133328, 62210, 50470, 22331, 109503, 129811, 41750, 130050, 89057, 21482, 43232, 84356, 34420, 84371, 136545, 83409, 34095, 22045, 85528, 61317, 58425, 135633, 5456, 40667, 24427, 82964, 68832, 16492, 127141, 2135, 28202, 26355, 37637, 51907, 59938, 9519, 69007, 67596, 28090]
[2024-12-02 19:38:15.938575] user = 115333 Cloud 221/567
[2024-12-02 19:38:15.947988] user = 115333 Local 221/567
[2024-12-02 19:38:16.007292] user = 115333 Local+ 221/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:38:17.955140] user = 115333 MPDA- 221/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.33333333333333337
Training on augumented user 118566 0/50 current_auc = 0.33333333333333337
User 118566 AUC after training: 0.33333333333333337
User 118566 does not improve AUC. Reverting changes.
Training on augumented user 136635 1/50 current_auc = 0.33333333333333337
User 136635 AUC after training: 0.33333333333333337
User 136635 does not improve AUC. Reverting changes.
Training on augumented user 89869 2/50 current_auc = 0.33333333333333337
User 89869 AUC after training: 0.33333333333333337
User 89869 does not improve AUC. Reverting changes.
Training on augumented user 13243 3/50 current_auc = 0.33333333333333337
User 13243 AUC after training: 0.33333333333333337
User 13243 does not improve AUC. Reverting changes.
Training on augumented user 60907 4/50 current_auc = 0.33333333333333337
User 60907 AUC after training: 0.33333333333333337
User 60907 does not improve AUC. Reverting changes.
Training on augumented user 100981 5/50 current_auc = 0.33333333333333337
User 100981 AUC after training: 0.33333333333333337
User 100981 does not improve AUC. Reverting changes.
Training on augumented user 9850 6/50 current_auc = 0.33333333333333337
User 9850 AUC after training: 0.33333333333333337
User 9850 does not improve AUC. Reverting changes.
Training on augumented user 99214 7/50 current_auc = 0.33333333333333337
User 99214 AUC after training: 0.33333333333333337
User 99214 does not improve AUC. Reverting changes.
Training on augumented user 114326 8/50 current_auc = 0.33333333333333337
User 114326 AUC after training: 0.33333333333333337
User 114326 does not improve AUC. Reverting changes.
Training on augumented user 110397 9/50 current_auc = 0.33333333333333337
User 110397 AUC after training: 0.22222222222222224
User 110397 does not improve AUC. Reverting changes.
Training on augumented user 63027 10/50 current_auc = 0.33333333333333337
User 63027 AUC after training: 0.33333333333333337
User 63027 does not improve AUC. Reverting changes.
Training on augumented user 133328 11/50 current_auc = 0.33333333333333337
User 133328 AUC after training: 0.33333333333333337
User 133328 does not improve AUC. Reverting changes.
Training on augumented user 62210 12/50 current_auc = 0.33333333333333337
User 62210 AUC after training: 0.33333333333333337
User 62210 does not improve AUC. Reverting changes.
Training on augumented user 50470 13/50 current_auc = 0.33333333333333337
User 50470 AUC after training: 0.33333333333333337
User 50470 does not improve AUC. Reverting changes.
Training on augumented user 22331 14/50 current_auc = 0.33333333333333337
User 22331 AUC after training: 0.33333333333333337
User 22331 does not improve AUC. Reverting changes.
Training on augumented user 109503 15/50 current_auc = 0.33333333333333337
User 109503 AUC after training: 0.33333333333333337
User 109503 does not improve AUC. Reverting changes.
Training on augumented user 129811 16/50 current_auc = 0.33333333333333337
User 129811 AUC after training: 0.4444444444444445
User 129811 improves AUC. Keeping the model.
Training on augumented user 41750 17/50 current_auc = 0.4444444444444445
User 41750 AUC after training: 0.4444444444444445
User 41750 does not improve AUC. Reverting changes.
Training on augumented user 130050 18/50 current_auc = 0.4444444444444445
User 130050 AUC after training: 0.33333333333333337
User 130050 does not improve AUC. Reverting changes.
Training on augumented user 89057 19/50 current_auc = 0.4444444444444445
User 89057 AUC after training: 0.33333333333333337
User 89057 does not improve AUC. Reverting changes.
Training on augumented user 21482 20/50 current_auc = 0.4444444444444445
User 21482 AUC after training: 0.33333333333333337
User 21482 does not improve AUC. Reverting changes.
Training on augumented user 43232 21/50 current_auc = 0.4444444444444445
User 43232 AUC after training: 0.33333333333333337
User 43232 does not improve AUC. Reverting changes.
Training on augumented user 84356 22/50 current_auc = 0.4444444444444445
User 84356 AUC after training: 0.4444444444444445
User 84356 does not improve AUC. Reverting changes.
Training on augumented user 34420 23/50 current_auc = 0.4444444444444445
User 34420 AUC after training: 0.33333333333333337
User 34420 does not improve AUC. Reverting changes.
Training on augumented user 84371 24/50 current_auc = 0.4444444444444445
User 84371 AUC after training: 0.4444444444444445
User 84371 does not improve AUC. Reverting changes.
Training on augumented user 136545 25/50 current_auc = 0.4444444444444445
User 136545 AUC after training: 0.4444444444444445
User 136545 does not improve AUC. Reverting changes.
Training on augumented user 83409 26/50 current_auc = 0.4444444444444445
User 83409 AUC after training: 0.4444444444444445
User 83409 does not improve AUC. Reverting changes.
Training on augumented user 34095 27/50 current_auc = 0.4444444444444445
User 34095 AUC after training: 0.33333333333333337
User 34095 does not improve AUC. Reverting changes.
Training on augumented user 22045 28/50 current_auc = 0.4444444444444445
User 22045 AUC after training: 0.33333333333333337
User 22045 does not improve AUC. Reverting changes.
Training on augumented user 85528 29/50 current_auc = 0.4444444444444445
User 85528 AUC after training: 0.4444444444444445
User 85528 does not improve AUC. Reverting changes.
Training on augumented user 61317 30/50 current_auc = 0.4444444444444445
User 61317 AUC after training: 0.4444444444444445
User 61317 does not improve AUC. Reverting changes.
Training on augumented user 58425 31/50 current_auc = 0.4444444444444445
User 58425 AUC after training: 0.4444444444444445
User 58425 does not improve AUC. Reverting changes.
Training on augumented user 135633 32/50 current_auc = 0.4444444444444445
User 135633 AUC after training: 0.33333333333333337
User 135633 does not improve AUC. Reverting changes.
Training on augumented user 5456 33/50 current_auc = 0.4444444444444445
User 5456 AUC after training: 0.4444444444444445
User 5456 does not improve AUC. Reverting changes.
Training on augumented user 40667 34/50 current_auc = 0.4444444444444445
User 40667 AUC after training: 0.33333333333333337
User 40667 does not improve AUC. Reverting changes.
Training on augumented user 24427 35/50 current_auc = 0.4444444444444445
User 24427 AUC after training: 0.4444444444444445
User 24427 does not improve AUC. Reverting changes.
Training on augumented user 82964 36/50 current_auc = 0.4444444444444445
User 82964 AUC after training: 0.33333333333333337
User 82964 does not improve AUC. Reverting changes.
Training on augumented user 68832 37/50 current_auc = 0.4444444444444445
User 68832 AUC after training: 0.33333333333333337
User 68832 does not improve AUC. Reverting changes.
Training on augumented user 16492 38/50 current_auc = 0.4444444444444445
User 16492 AUC after training: 0.33333333333333337
User 16492 does not improve AUC. Reverting changes.
Training on augumented user 127141 39/50 current_auc = 0.4444444444444445
User 127141 AUC after training: 0.33333333333333337
User 127141 does not improve AUC. Reverting changes.
Training on augumented user 2135 40/50 current_auc = 0.4444444444444445
User 2135 AUC after training: 0.4444444444444445
User 2135 does not improve AUC. Reverting changes.
Training on augumented user 28202 41/50 current_auc = 0.4444444444444445
User 28202 AUC after training: 0.4444444444444445
User 28202 does not improve AUC. Reverting changes.
Training on augumented user 26355 42/50 current_auc = 0.4444444444444445
User 26355 AUC after training: 0.33333333333333337
User 26355 does not improve AUC. Reverting changes.
Training on augumented user 37637 43/50 current_auc = 0.4444444444444445
User 37637 AUC after training: 0.33333333333333337
User 37637 does not improve AUC. Reverting changes.
Training on augumented user 51907 44/50 current_auc = 0.4444444444444445
User 51907 AUC after training: 0.4444444444444445
User 51907 does not improve AUC. Reverting changes.
Training on augumented user 59938 45/50 current_auc = 0.4444444444444445
User 59938 AUC after training: 0.4444444444444445
User 59938 does not improve AUC. Reverting changes.
Training on augumented user 9519 46/50 current_auc = 0.4444444444444445
User 9519 AUC after training: 0.4444444444444445
User 9519 does not improve AUC. Reverting changes.
Training on augumented user 69007 47/50 current_auc = 0.4444444444444445
User 69007 AUC after training: 0.33333333333333337
User 69007 does not improve AUC. Reverting changes.
Training on augumented user 67596 48/50 current_auc = 0.4444444444444445
User 67596 AUC after training: 0.33333333333333337
User 67596 does not improve AUC. Reverting changes.
Training on augumented user 28090 49/50 current_auc = 0.4444444444444445
User 28090 AUC after training: 0.33333333333333337
User 28090 does not improve AUC. Reverting changes.
[2024-12-02 19:38:37.032566] start test user 115353 222/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:38:37.636800] start test user 115353 222/567 recall augumented users by random, augumented_users = [39418, 13844, 28976, 27999, 77014, 74007, 53162, 99319, 5761, 127859, 41965, 85024, 541, 112744, 56311, 126308, 127189, 10857, 4157, 107567, 104476, 134304, 30257, 53732, 134858, 23702, 104081, 82891, 97268, 84426, 1058, 116185, 296, 1264, 92326, 23556, 105947, 130167, 64022, 10551, 90066, 86568, 9932, 93392, 82414, 7800, 55037, 115744, 137258, 42549]
[2024-12-02 19:38:37.651695] user = 115353 Cloud 222/567
[2024-12-02 19:38:37.666304] user = 115353 Local 222/567
[2024-12-02 19:38:37.730481] user = 115353 Local+ 222/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:38:40.169443] user = 115353 MPDA- 222/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.645280612244898
Training on augumented user 39418 0/50 current_auc = 0.645280612244898
User 39418 AUC after training: 0.6457908163265307
User 39418 improves AUC. Keeping the model.
Training on augumented user 13844 1/50 current_auc = 0.6457908163265307
User 13844 AUC after training: 0.6455357142857143
User 13844 does not improve AUC. Reverting changes.
Training on augumented user 28976 2/50 current_auc = 0.6457908163265307
User 28976 AUC after training: 0.6455357142857143
User 28976 does not improve AUC. Reverting changes.
Training on augumented user 27999 3/50 current_auc = 0.6457908163265307
User 27999 AUC after training: 0.646045918367347
User 27999 improves AUC. Keeping the model.
Training on augumented user 77014 4/50 current_auc = 0.646045918367347
User 77014 AUC after training: 0.6457908163265307
User 77014 does not improve AUC. Reverting changes.
Training on augumented user 74007 5/50 current_auc = 0.646045918367347
User 74007 AUC after training: 0.6457908163265307
User 74007 does not improve AUC. Reverting changes.
Training on augumented user 53162 6/50 current_auc = 0.646045918367347
User 53162 AUC after training: 0.6455357142857143
User 53162 does not improve AUC. Reverting changes.
Training on augumented user 99319 7/50 current_auc = 0.646045918367347
User 99319 AUC after training: 0.646045918367347
User 99319 does not improve AUC. Reverting changes.
Training on augumented user 5761 8/50 current_auc = 0.646045918367347
User 5761 AUC after training: 0.6465561224489796
User 5761 improves AUC. Keeping the model.
Training on augumented user 127859 9/50 current_auc = 0.6465561224489796
User 127859 AUC after training: 0.6470663265306122
User 127859 improves AUC. Keeping the model.
Training on augumented user 41965 10/50 current_auc = 0.6470663265306122
User 41965 AUC after training: 0.6470663265306122
User 41965 does not improve AUC. Reverting changes.
Training on augumented user 85024 11/50 current_auc = 0.6470663265306122
User 85024 AUC after training: 0.6457908163265307
User 85024 does not improve AUC. Reverting changes.
Training on augumented user 541 12/50 current_auc = 0.6470663265306122
User 541 AUC after training: 0.6468112244897959
User 541 does not improve AUC. Reverting changes.
Training on augumented user 112744 13/50 current_auc = 0.6470663265306122
User 112744 AUC after training: 0.6470663265306122
User 112744 does not improve AUC. Reverting changes.
Training on augumented user 56311 14/50 current_auc = 0.6470663265306122
User 56311 AUC after training: 0.6443877551020408
User 56311 does not improve AUC. Reverting changes.
Training on augumented user 126308 15/50 current_auc = 0.6470663265306122
User 126308 AUC after training: 0.6473214285714286
User 126308 improves AUC. Keeping the model.
Training on augumented user 127189 16/50 current_auc = 0.6473214285714286
User 127189 AUC after training: 0.647576530612245
User 127189 improves AUC. Keeping the model.
Training on augumented user 10857 17/50 current_auc = 0.647576530612245
User 10857 AUC after training: 0.6475765306122448
User 10857 does not improve AUC. Reverting changes.
Training on augumented user 4157 18/50 current_auc = 0.647576530612245
User 4157 AUC after training: 0.647576530612245
User 4157 does not improve AUC. Reverting changes.
Training on augumented user 107567 19/50 current_auc = 0.647576530612245
User 107567 AUC after training: 0.6478316326530612
User 107567 improves AUC. Keeping the model.
Training on augumented user 104476 20/50 current_auc = 0.6478316326530612
User 104476 AUC after training: 0.6470663265306124
User 104476 does not improve AUC. Reverting changes.
Training on augumented user 134304 21/50 current_auc = 0.6478316326530612
User 134304 AUC after training: 0.6468112244897959
User 134304 does not improve AUC. Reverting changes.
Training on augumented user 30257 22/50 current_auc = 0.6478316326530612
User 30257 AUC after training: 0.6463010204081633
User 30257 does not improve AUC. Reverting changes.
Training on augumented user 53732 23/50 current_auc = 0.6478316326530612
User 53732 AUC after training: 0.6470663265306122
User 53732 does not improve AUC. Reverting changes.
Training on augumented user 134858 24/50 current_auc = 0.6478316326530612
User 134858 AUC after training: 0.6463010204081632
User 134858 does not improve AUC. Reverting changes.
Training on augumented user 23702 25/50 current_auc = 0.6478316326530612
User 23702 AUC after training: 0.6464285714285715
User 23702 does not improve AUC. Reverting changes.
Training on augumented user 104081 26/50 current_auc = 0.6478316326530612
User 104081 AUC after training: 0.6469387755102042
User 104081 does not improve AUC. Reverting changes.
Training on augumented user 82891 27/50 current_auc = 0.6478316326530612
User 82891 AUC after training: 0.6463010204081633
User 82891 does not improve AUC. Reverting changes.
Training on augumented user 97268 28/50 current_auc = 0.6478316326530612
User 97268 AUC after training: 0.6473214285714286
User 97268 does not improve AUC. Reverting changes.
Training on augumented user 84426 29/50 current_auc = 0.6478316326530612
User 84426 AUC after training: 0.6463010204081633
User 84426 does not improve AUC. Reverting changes.
Training on augumented user 1058 30/50 current_auc = 0.6478316326530612
User 1058 AUC after training: 0.6463010204081633
User 1058 does not improve AUC. Reverting changes.
Training on augumented user 116185 31/50 current_auc = 0.6478316326530612
User 116185 AUC after training: 0.6485969387755102
User 116185 improves AUC. Keeping the model.
Training on augumented user 296 32/50 current_auc = 0.6485969387755102
User 296 AUC after training: 0.6491071428571429
User 296 improves AUC. Keeping the model.
Training on augumented user 1264 33/50 current_auc = 0.6491071428571429
User 1264 AUC after training: 0.6488520408163265
User 1264 does not improve AUC. Reverting changes.
Training on augumented user 92326 34/50 current_auc = 0.6491071428571429
User 92326 AUC after training: 0.6485969387755102
User 92326 does not improve AUC. Reverting changes.
Training on augumented user 23556 35/50 current_auc = 0.6491071428571429
User 23556 AUC after training: 0.647576530612245
User 23556 does not improve AUC. Reverting changes.
Training on augumented user 105947 36/50 current_auc = 0.6491071428571429
User 105947 AUC after training: 0.6483418367346939
User 105947 does not improve AUC. Reverting changes.
Training on augumented user 130167 37/50 current_auc = 0.6491071428571429
User 130167 AUC after training: 0.6491071428571429
User 130167 does not improve AUC. Reverting changes.
Training on augumented user 64022 38/50 current_auc = 0.6491071428571429
User 64022 AUC after training: 0.6485969387755103
User 64022 does not improve AUC. Reverting changes.
Training on augumented user 10551 39/50 current_auc = 0.6491071428571429
User 10551 AUC after training: 0.6491071428571429
User 10551 does not improve AUC. Reverting changes.
Training on augumented user 90066 40/50 current_auc = 0.6491071428571429
User 90066 AUC after training: 0.6491071428571429
User 90066 does not improve AUC. Reverting changes.
Training on augumented user 86568 41/50 current_auc = 0.6491071428571429
User 86568 AUC after training: 0.6488520408163265
User 86568 does not improve AUC. Reverting changes.
Training on augumented user 9932 42/50 current_auc = 0.6491071428571429
User 9932 AUC after training: 0.6496173469387755
User 9932 improves AUC. Keeping the model.
Training on augumented user 93392 43/50 current_auc = 0.6496173469387755
User 93392 AUC after training: 0.6487244897959183
User 93392 does not improve AUC. Reverting changes.
Training on augumented user 82414 44/50 current_auc = 0.6496173469387755
User 82414 AUC after training: 0.6480867346938776
User 82414 does not improve AUC. Reverting changes.
Training on augumented user 7800 45/50 current_auc = 0.6496173469387755
User 7800 AUC after training: 0.6498724489795918
User 7800 improves AUC. Keeping the model.
Training on augumented user 55037 46/50 current_auc = 0.6498724489795918
User 55037 AUC after training: 0.6485969387755103
User 55037 does not improve AUC. Reverting changes.
Training on augumented user 115744 47/50 current_auc = 0.6498724489795918
User 115744 AUC after training: 0.6491071428571429
User 115744 does not improve AUC. Reverting changes.
Training on augumented user 137258 48/50 current_auc = 0.6498724489795918
User 137258 AUC after training: 0.6488520408163265
User 137258 does not improve AUC. Reverting changes.
Training on augumented user 42549 49/50 current_auc = 0.6498724489795918
User 42549 AUC after training: 0.6483418367346939
User 42549 does not improve AUC. Reverting changes.
[2024-12-02 19:39:12.683314] start test user 115364 223/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:39:13.104803] start test user 115364 223/567 recall augumented users by random, augumented_users = [22453, 62961, 26158, 32340, 72178, 119615, 61060, 65848, 113442, 134766, 86001, 64362, 85025, 41611, 108116, 63577, 101961, 100213, 47629, 135358, 20227, 21832, 32198, 12414, 135564, 4673, 126031, 4965, 76939, 42609, 24752, 50091, 18687, 41568, 68027, 108854, 117927, 8381, 53249, 19908, 88180, 109801, 67399, 91583, 53906, 70556, 85057, 86161, 123126, 91165]
[2024-12-02 19:39:13.120261] user = 115364 Cloud 223/567
[2024-12-02 19:39:13.150992] user = 115364 Local 223/567
[2024-12-02 19:39:13.231209] user = 115364 Local+ 223/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:39:15.993347] user = 115364 MPDA- 223/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6259313249109167
Training on augumented user 22453 0/50 current_auc = 0.6259313249109167
User 22453 AUC after training: 0.6264172335600907
User 22453 improves AUC. Keeping the model.
Training on augumented user 62961 1/50 current_auc = 0.6264172335600907
User 62961 AUC after training: 0.6264172335600906
User 62961 does not improve AUC. Reverting changes.
Training on augumented user 26158 2/50 current_auc = 0.6264172335600907
User 26158 AUC after training: 0.6260932944606414
User 26158 does not improve AUC. Reverting changes.
Training on augumented user 32340 3/50 current_auc = 0.6264172335600907
User 32340 AUC after training: 0.6265792031098153
User 32340 improves AUC. Keeping the model.
Training on augumented user 72178 4/50 current_auc = 0.6265792031098153
User 72178 AUC after training: 0.6275510204081634
User 72178 improves AUC. Keeping the model.
Training on augumented user 119615 5/50 current_auc = 0.6275510204081634
User 119615 AUC after training: 0.627227081308714
User 119615 does not improve AUC. Reverting changes.
Training on augumented user 61060 6/50 current_auc = 0.6275510204081634
User 61060 AUC after training: 0.6273890508584385
User 61060 does not improve AUC. Reverting changes.
Training on augumented user 65848 7/50 current_auc = 0.6275510204081634
User 65848 AUC after training: 0.6278749595076125
User 65848 improves AUC. Keeping the model.
Training on augumented user 113442 8/50 current_auc = 0.6278749595076125
User 113442 AUC after training: 0.6270651117589893
User 113442 does not improve AUC. Reverting changes.
Training on augumented user 134766 9/50 current_auc = 0.6278749595076125
User 134766 AUC after training: 0.6275510204081632
User 134766 does not improve AUC. Reverting changes.
Training on augumented user 86001 10/50 current_auc = 0.6278749595076125
User 86001 AUC after training: 0.6277129899578879
User 86001 does not improve AUC. Reverting changes.
Training on augumented user 64362 11/50 current_auc = 0.6278749595076125
User 64362 AUC after training: 0.6275510204081632
User 64362 does not improve AUC. Reverting changes.
Training on augumented user 85025 12/50 current_auc = 0.6278749595076125
User 85025 AUC after training: 0.6275510204081632
User 85025 does not improve AUC. Reverting changes.
Training on augumented user 41611 13/50 current_auc = 0.6278749595076125
User 41611 AUC after training: 0.6273890508584387
User 41611 does not improve AUC. Reverting changes.
Training on augumented user 108116 14/50 current_auc = 0.6278749595076125
User 108116 AUC after training: 0.6264172335600907
User 108116 does not improve AUC. Reverting changes.
Training on augumented user 63577 15/50 current_auc = 0.6278749595076125
User 63577 AUC after training: 0.6270651117589893
User 63577 does not improve AUC. Reverting changes.
Training on augumented user 101961 16/50 current_auc = 0.6278749595076125
User 101961 AUC after training: 0.6278749595076125
User 101961 does not improve AUC. Reverting changes.
Training on augumented user 100213 17/50 current_auc = 0.6278749595076125
User 100213 AUC after training: 0.6260932944606414
User 100213 does not improve AUC. Reverting changes.
Training on augumented user 47629 18/50 current_auc = 0.6278749595076125
User 47629 AUC after training: 0.6271460965338517
User 47629 does not improve AUC. Reverting changes.
Training on augumented user 135358 19/50 current_auc = 0.6278749595076125
User 135358 AUC after training: 0.6265792031098153
User 135358 does not improve AUC. Reverting changes.
Training on augumented user 20227 20/50 current_auc = 0.6278749595076125
User 20227 AUC after training: 0.6280369290573372
User 20227 improves AUC. Keeping the model.
Training on augumented user 21832 21/50 current_auc = 0.6280369290573372
User 21832 AUC after training: 0.6270651117589893
User 21832 does not improve AUC. Reverting changes.
Training on augumented user 32198 22/50 current_auc = 0.6280369290573372
User 32198 AUC after training: 0.627227081308714
User 32198 does not improve AUC. Reverting changes.
Training on augumented user 12414 23/50 current_auc = 0.6280369290573372
User 12414 AUC after training: 0.6277129899578879
User 12414 does not improve AUC. Reverting changes.
Training on augumented user 135564 24/50 current_auc = 0.6280369290573372
User 135564 AUC after training: 0.6277129899578879
User 135564 does not improve AUC. Reverting changes.
Training on augumented user 4673 25/50 current_auc = 0.6280369290573372
User 4673 AUC after training: 0.6269031422092646
User 4673 does not improve AUC. Reverting changes.
Training on augumented user 126031 26/50 current_auc = 0.6280369290573372
User 126031 AUC after training: 0.6277129899578879
User 126031 does not improve AUC. Reverting changes.
Training on augumented user 4965 27/50 current_auc = 0.6280369290573372
User 4965 AUC after training: 0.6265792031098154
User 4965 does not improve AUC. Reverting changes.
Training on augumented user 76939 28/50 current_auc = 0.6280369290573372
User 76939 AUC after training: 0.6275510204081632
User 76939 does not improve AUC. Reverting changes.
Training on augumented user 42609 29/50 current_auc = 0.6280369290573372
User 42609 AUC after training: 0.6278749595076125
User 42609 does not improve AUC. Reverting changes.
Training on augumented user 24752 30/50 current_auc = 0.6280369290573372
User 24752 AUC after training: 0.6275510204081632
User 24752 does not improve AUC. Reverting changes.
Training on augumented user 50091 31/50 current_auc = 0.6280369290573372
User 50091 AUC after training: 0.6264172335600907
User 50091 does not improve AUC. Reverting changes.
Training on augumented user 18687 32/50 current_auc = 0.6280369290573372
User 18687 AUC after training: 0.6273890508584387
User 18687 does not improve AUC. Reverting changes.
Training on augumented user 41568 33/50 current_auc = 0.6280369290573372
User 41568 AUC after training: 0.6281988986070619
User 41568 improves AUC. Keeping the model.
Training on augumented user 68027 34/50 current_auc = 0.6281988986070619
User 68027 AUC after training: 0.6277129899578879
User 68027 does not improve AUC. Reverting changes.
Training on augumented user 108854 35/50 current_auc = 0.6281988986070619
User 108854 AUC after training: 0.6275510204081632
User 108854 does not improve AUC. Reverting changes.
Training on augumented user 117927 36/50 current_auc = 0.6281988986070619
User 117927 AUC after training: 0.6275510204081634
User 117927 does not improve AUC. Reverting changes.
Training on augumented user 8381 37/50 current_auc = 0.6281988986070619
User 8381 AUC after training: 0.6291707159054098
User 8381 improves AUC. Keeping the model.
Training on augumented user 53249 38/50 current_auc = 0.6291707159054098
User 53249 AUC after training: 0.6286848072562359
User 53249 does not improve AUC. Reverting changes.
Training on augumented user 19908 39/50 current_auc = 0.6291707159054098
User 19908 AUC after training: 0.6283608681567865
User 19908 does not improve AUC. Reverting changes.
Training on augumented user 88180 40/50 current_auc = 0.6291707159054098
User 88180 AUC after training: 0.6290087463556852
User 88180 does not improve AUC. Reverting changes.
Training on augumented user 109801 41/50 current_auc = 0.6291707159054098
User 109801 AUC after training: 0.6288467768059605
User 109801 does not improve AUC. Reverting changes.
Training on augumented user 67399 42/50 current_auc = 0.6291707159054098
User 67399 AUC after training: 0.6283608681567865
User 67399 does not improve AUC. Reverting changes.
Training on augumented user 91583 43/50 current_auc = 0.6291707159054098
User 91583 AUC after training: 0.6285228377065112
User 91583 does not improve AUC. Reverting changes.
Training on augumented user 53906 44/50 current_auc = 0.6291707159054098
User 53906 AUC after training: 0.6290087463556852
User 53906 does not improve AUC. Reverting changes.
Training on augumented user 70556 45/50 current_auc = 0.6291707159054098
User 70556 AUC after training: 0.6286848072562359
User 70556 does not improve AUC. Reverting changes.
Training on augumented user 85057 46/50 current_auc = 0.6291707159054098
User 85057 AUC after training: 0.6290087463556852
User 85057 does not improve AUC. Reverting changes.
Training on augumented user 86161 47/50 current_auc = 0.6291707159054098
User 86161 AUC after training: 0.6291707159054097
User 86161 does not improve AUC. Reverting changes.
Training on augumented user 123126 48/50 current_auc = 0.6291707159054098
User 123126 AUC after training: 0.6290087463556852
User 123126 does not improve AUC. Reverting changes.
Training on augumented user 91165 49/50 current_auc = 0.6291707159054098
User 91165 AUC after training: 0.6283608681567865
User 91165 does not improve AUC. Reverting changes.
[2024-12-02 19:39:43.709760] start test user 115368 224/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:39:44.141195] start test user 115368 224/567 recall augumented users by random, augumented_users = [127670, 57456, 97165, 134113, 133006, 41558, 8677, 23563, 50622, 59954, 38981, 27297, 116555, 114289, 126410, 71433, 127751, 57989, 104873, 131272, 91732, 66142, 23736, 126401, 36864, 66717, 75028, 91427, 46602, 99238, 71919, 88748, 37623, 99935, 37900, 2055, 88472, 12478, 119259, 50902, 69615, 64092, 42142, 44566, 135853, 127453, 132548, 921, 43970, 70540]
[2024-12-02 19:39:44.156065] user = 115368 Cloud 224/567
[2024-12-02 19:39:44.167224] user = 115368 Local 224/567
[2024-12-02 19:39:44.200743] user = 115368 Local+ 224/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:39:46.955408] user = 115368 MPDA- 224/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6
Training on augumented user 127670 0/50 current_auc = 0.6
User 127670 AUC after training: 0.6
User 127670 does not improve AUC. Reverting changes.
Training on augumented user 57456 1/50 current_auc = 0.6
User 57456 AUC after training: 0.6
User 57456 does not improve AUC. Reverting changes.
Training on augumented user 97165 2/50 current_auc = 0.6
User 97165 AUC after training: 0.6
User 97165 does not improve AUC. Reverting changes.
Training on augumented user 134113 3/50 current_auc = 0.6
User 134113 AUC after training: 0.6
User 134113 does not improve AUC. Reverting changes.
Training on augumented user 133006 4/50 current_auc = 0.6
User 133006 AUC after training: 0.6
User 133006 does not improve AUC. Reverting changes.
Training on augumented user 41558 5/50 current_auc = 0.6
User 41558 AUC after training: 0.6
User 41558 does not improve AUC. Reverting changes.
Training on augumented user 8677 6/50 current_auc = 0.6
User 8677 AUC after training: 0.6
User 8677 does not improve AUC. Reverting changes.
Training on augumented user 23563 7/50 current_auc = 0.6
User 23563 AUC after training: 0.6
User 23563 does not improve AUC. Reverting changes.
Training on augumented user 50622 8/50 current_auc = 0.6
User 50622 AUC after training: 0.6
User 50622 does not improve AUC. Reverting changes.
Training on augumented user 59954 9/50 current_auc = 0.6
User 59954 AUC after training: 0.6
User 59954 does not improve AUC. Reverting changes.
Training on augumented user 38981 10/50 current_auc = 0.6
User 38981 AUC after training: 0.6
User 38981 does not improve AUC. Reverting changes.
Training on augumented user 27297 11/50 current_auc = 0.6
User 27297 AUC after training: 0.6
User 27297 does not improve AUC. Reverting changes.
Training on augumented user 116555 12/50 current_auc = 0.6
User 116555 AUC after training: 0.6
User 116555 does not improve AUC. Reverting changes.
Training on augumented user 114289 13/50 current_auc = 0.6
User 114289 AUC after training: 0.6
User 114289 does not improve AUC. Reverting changes.
Training on augumented user 126410 14/50 current_auc = 0.6
User 126410 AUC after training: 0.6
User 126410 does not improve AUC. Reverting changes.
Training on augumented user 71433 15/50 current_auc = 0.6
User 71433 AUC after training: 0.6
User 71433 does not improve AUC. Reverting changes.
Training on augumented user 127751 16/50 current_auc = 0.6
User 127751 AUC after training: 0.6
User 127751 does not improve AUC. Reverting changes.
Training on augumented user 57989 17/50 current_auc = 0.6
User 57989 AUC after training: 0.6
User 57989 does not improve AUC. Reverting changes.
Training on augumented user 104873 18/50 current_auc = 0.6
User 104873 AUC after training: 0.6
User 104873 does not improve AUC. Reverting changes.
Training on augumented user 131272 19/50 current_auc = 0.6
User 131272 AUC after training: 0.6
User 131272 does not improve AUC. Reverting changes.
Training on augumented user 91732 20/50 current_auc = 0.6
User 91732 AUC after training: 0.6
User 91732 does not improve AUC. Reverting changes.
Training on augumented user 66142 21/50 current_auc = 0.6
User 66142 AUC after training: 0.6
User 66142 does not improve AUC. Reverting changes.
Training on augumented user 23736 22/50 current_auc = 0.6
User 23736 AUC after training: 0.6
User 23736 does not improve AUC. Reverting changes.
Training on augumented user 126401 23/50 current_auc = 0.6
User 126401 AUC after training: 0.6
User 126401 does not improve AUC. Reverting changes.
Training on augumented user 36864 24/50 current_auc = 0.6
User 36864 AUC after training: 0.6
User 36864 does not improve AUC. Reverting changes.
Training on augumented user 66717 25/50 current_auc = 0.6
User 66717 AUC after training: 0.6
User 66717 does not improve AUC. Reverting changes.
Training on augumented user 75028 26/50 current_auc = 0.6
User 75028 AUC after training: 0.6
User 75028 does not improve AUC. Reverting changes.
Training on augumented user 91427 27/50 current_auc = 0.6
User 91427 AUC after training: 0.6
User 91427 does not improve AUC. Reverting changes.
Training on augumented user 46602 28/50 current_auc = 0.6
User 46602 AUC after training: 0.6
User 46602 does not improve AUC. Reverting changes.
Training on augumented user 99238 29/50 current_auc = 0.6
User 99238 AUC after training: 0.6
User 99238 does not improve AUC. Reverting changes.
Training on augumented user 71919 30/50 current_auc = 0.6
User 71919 AUC after training: 0.6
User 71919 does not improve AUC. Reverting changes.
Training on augumented user 88748 31/50 current_auc = 0.6
User 88748 AUC after training: 0.6
User 88748 does not improve AUC. Reverting changes.
Training on augumented user 37623 32/50 current_auc = 0.6
User 37623 AUC after training: 0.6
User 37623 does not improve AUC. Reverting changes.
Training on augumented user 99935 33/50 current_auc = 0.6
User 99935 AUC after training: 0.6
User 99935 does not improve AUC. Reverting changes.
Training on augumented user 37900 34/50 current_auc = 0.6
User 37900 AUC after training: 0.6
User 37900 does not improve AUC. Reverting changes.
Training on augumented user 2055 35/50 current_auc = 0.6
User 2055 AUC after training: 0.6
User 2055 does not improve AUC. Reverting changes.
Training on augumented user 88472 36/50 current_auc = 0.6
User 88472 AUC after training: 0.6
User 88472 does not improve AUC. Reverting changes.
Training on augumented user 12478 37/50 current_auc = 0.6
User 12478 AUC after training: 0.6
User 12478 does not improve AUC. Reverting changes.
Training on augumented user 119259 38/50 current_auc = 0.6
User 119259 AUC after training: 0.6
User 119259 does not improve AUC. Reverting changes.
Training on augumented user 50902 39/50 current_auc = 0.6
User 50902 AUC after training: 0.6
User 50902 does not improve AUC. Reverting changes.
Training on augumented user 69615 40/50 current_auc = 0.6
User 69615 AUC after training: 0.6
User 69615 does not improve AUC. Reverting changes.
Training on augumented user 64092 41/50 current_auc = 0.6
User 64092 AUC after training: 0.6
User 64092 does not improve AUC. Reverting changes.
Training on augumented user 42142 42/50 current_auc = 0.6
User 42142 AUC after training: 0.6
User 42142 does not improve AUC. Reverting changes.
Training on augumented user 44566 43/50 current_auc = 0.6
User 44566 AUC after training: 0.6
User 44566 does not improve AUC. Reverting changes.
Training on augumented user 135853 44/50 current_auc = 0.6
User 135853 AUC after training: 0.6
User 135853 does not improve AUC. Reverting changes.
Training on augumented user 127453 45/50 current_auc = 0.6
User 127453 AUC after training: 0.6
User 127453 does not improve AUC. Reverting changes.
Training on augumented user 132548 46/50 current_auc = 0.6
User 132548 AUC after training: 0.6
User 132548 does not improve AUC. Reverting changes.
Training on augumented user 921 47/50 current_auc = 0.6
User 921 AUC after training: 0.6
User 921 does not improve AUC. Reverting changes.
Training on augumented user 43970 48/50 current_auc = 0.6
User 43970 AUC after training: 0.6
User 43970 does not improve AUC. Reverting changes.
Training on augumented user 70540 49/50 current_auc = 0.6
User 70540 AUC after training: 0.6
User 70540 does not improve AUC. Reverting changes.
[2024-12-02 19:40:19.647509] start test user 115408 225/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:40:20.250044] start test user 115408 225/567 recall augumented users by random, augumented_users = [61388, 123703, 90388, 82666, 102209, 35076, 96463, 61386, 38620, 111149, 55815, 83875, 135329, 34972, 87649, 134252, 129388, 28216, 87486, 52397, 95729, 104364, 63825, 48265, 116605, 60314, 36570, 67551, 68450, 71423, 128019, 29744, 110847, 107951, 42330, 136785, 77168, 115262, 59878, 26381, 52849, 109558, 123298, 43254, 125372, 14432, 40245, 7666, 25507, 54528]
[2024-12-02 19:40:20.279923] user = 115408 Cloud 225/567
[2024-12-02 19:40:20.296256] user = 115408 Local 225/567
[2024-12-02 19:40:20.452554] user = 115408 Local+ 225/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:40:22.859421] user = 115408 MPDA- 225/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8424242424242424
Training on augumented user 61388 0/50 current_auc = 0.8424242424242424
User 61388 AUC after training: 0.8424242424242424
User 61388 does not improve AUC. Reverting changes.
Training on augumented user 123703 1/50 current_auc = 0.8424242424242424
User 123703 AUC after training: 0.8424242424242424
User 123703 does not improve AUC. Reverting changes.
Training on augumented user 90388 2/50 current_auc = 0.8424242424242424
User 90388 AUC after training: 0.8424242424242424
User 90388 does not improve AUC. Reverting changes.
Training on augumented user 82666 3/50 current_auc = 0.8424242424242424
User 82666 AUC after training: 0.8424242424242424
User 82666 does not improve AUC. Reverting changes.
Training on augumented user 102209 4/50 current_auc = 0.8424242424242424
User 102209 AUC after training: 0.8424242424242424
User 102209 does not improve AUC. Reverting changes.
Training on augumented user 35076 5/50 current_auc = 0.8424242424242424
User 35076 AUC after training: 0.8424242424242424
User 35076 does not improve AUC. Reverting changes.
Training on augumented user 96463 6/50 current_auc = 0.8424242424242424
User 96463 AUC after training: 0.8424242424242424
User 96463 does not improve AUC. Reverting changes.
Training on augumented user 61386 7/50 current_auc = 0.8424242424242424
User 61386 AUC after training: 0.8424242424242424
User 61386 does not improve AUC. Reverting changes.
Training on augumented user 38620 8/50 current_auc = 0.8424242424242424
User 38620 AUC after training: 0.8393939393939394
User 38620 does not improve AUC. Reverting changes.
Training on augumented user 111149 9/50 current_auc = 0.8424242424242424
User 111149 AUC after training: 0.8424242424242424
User 111149 does not improve AUC. Reverting changes.
Training on augumented user 55815 10/50 current_auc = 0.8424242424242424
User 55815 AUC after training: 0.8424242424242424
User 55815 does not improve AUC. Reverting changes.
Training on augumented user 83875 11/50 current_auc = 0.8424242424242424
User 83875 AUC after training: 0.8424242424242424
User 83875 does not improve AUC. Reverting changes.
Training on augumented user 135329 12/50 current_auc = 0.8424242424242424
User 135329 AUC after training: 0.8424242424242424
User 135329 does not improve AUC. Reverting changes.
Training on augumented user 34972 13/50 current_auc = 0.8424242424242424
User 34972 AUC after training: 0.8424242424242424
User 34972 does not improve AUC. Reverting changes.
Training on augumented user 87649 14/50 current_auc = 0.8424242424242424
User 87649 AUC after training: 0.8424242424242424
User 87649 does not improve AUC. Reverting changes.
Training on augumented user 134252 15/50 current_auc = 0.8424242424242424
User 134252 AUC after training: 0.8424242424242424
User 134252 does not improve AUC. Reverting changes.
Training on augumented user 129388 16/50 current_auc = 0.8424242424242424
User 129388 AUC after training: 0.8424242424242424
User 129388 does not improve AUC. Reverting changes.
Training on augumented user 28216 17/50 current_auc = 0.8424242424242424
User 28216 AUC after training: 0.8424242424242424
User 28216 does not improve AUC. Reverting changes.
Training on augumented user 87486 18/50 current_auc = 0.8424242424242424
User 87486 AUC after training: 0.8393939393939394
User 87486 does not improve AUC. Reverting changes.
Training on augumented user 52397 19/50 current_auc = 0.8424242424242424
User 52397 AUC after training: 0.8424242424242424
User 52397 does not improve AUC. Reverting changes.
Training on augumented user 95729 20/50 current_auc = 0.8424242424242424
User 95729 AUC after training: 0.8424242424242424
User 95729 does not improve AUC. Reverting changes.
Training on augumented user 104364 21/50 current_auc = 0.8424242424242424
User 104364 AUC after training: 0.8424242424242424
User 104364 does not improve AUC. Reverting changes.
Training on augumented user 63825 22/50 current_auc = 0.8424242424242424
User 63825 AUC after training: 0.843939393939394
User 63825 improves AUC. Keeping the model.
Training on augumented user 48265 23/50 current_auc = 0.843939393939394
User 48265 AUC after training: 0.843939393939394
User 48265 does not improve AUC. Reverting changes.
Training on augumented user 116605 24/50 current_auc = 0.843939393939394
User 116605 AUC after training: 0.8409090909090909
User 116605 does not improve AUC. Reverting changes.
Training on augumented user 60314 25/50 current_auc = 0.843939393939394
User 60314 AUC after training: 0.8409090909090909
User 60314 does not improve AUC. Reverting changes.
Training on augumented user 36570 26/50 current_auc = 0.843939393939394
User 36570 AUC after training: 0.8409090909090909
User 36570 does not improve AUC. Reverting changes.
Training on augumented user 67551 27/50 current_auc = 0.843939393939394
User 67551 AUC after training: 0.843939393939394
User 67551 does not improve AUC. Reverting changes.
Training on augumented user 68450 28/50 current_auc = 0.843939393939394
User 68450 AUC after training: 0.843939393939394
User 68450 does not improve AUC. Reverting changes.
Training on augumented user 71423 29/50 current_auc = 0.843939393939394
User 71423 AUC after training: 0.843939393939394
User 71423 does not improve AUC. Reverting changes.
Training on augumented user 128019 30/50 current_auc = 0.843939393939394
User 128019 AUC after training: 0.843939393939394
User 128019 does not improve AUC. Reverting changes.
Training on augumented user 29744 31/50 current_auc = 0.843939393939394
User 29744 AUC after training: 0.843939393939394
User 29744 does not improve AUC. Reverting changes.
Training on augumented user 110847 32/50 current_auc = 0.843939393939394
User 110847 AUC after training: 0.8409090909090909
User 110847 does not improve AUC. Reverting changes.
Training on augumented user 107951 33/50 current_auc = 0.843939393939394
User 107951 AUC after training: 0.843939393939394
User 107951 does not improve AUC. Reverting changes.
Training on augumented user 42330 34/50 current_auc = 0.843939393939394
User 42330 AUC after training: 0.8409090909090909
User 42330 does not improve AUC. Reverting changes.
Training on augumented user 136785 35/50 current_auc = 0.843939393939394
User 136785 AUC after training: 0.8409090909090909
User 136785 does not improve AUC. Reverting changes.
Training on augumented user 77168 36/50 current_auc = 0.843939393939394
User 77168 AUC after training: 0.843939393939394
User 77168 does not improve AUC. Reverting changes.
Training on augumented user 115262 37/50 current_auc = 0.843939393939394
User 115262 AUC after training: 0.8409090909090909
User 115262 does not improve AUC. Reverting changes.
Training on augumented user 59878 38/50 current_auc = 0.843939393939394
User 59878 AUC after training: 0.843939393939394
User 59878 does not improve AUC. Reverting changes.
Training on augumented user 26381 39/50 current_auc = 0.843939393939394
User 26381 AUC after training: 0.843939393939394
User 26381 does not improve AUC. Reverting changes.
Training on augumented user 52849 40/50 current_auc = 0.843939393939394
User 52849 AUC after training: 0.8409090909090909
User 52849 does not improve AUC. Reverting changes.
Training on augumented user 109558 41/50 current_auc = 0.843939393939394
User 109558 AUC after training: 0.843939393939394
User 109558 does not improve AUC. Reverting changes.
Training on augumented user 123298 42/50 current_auc = 0.843939393939394
User 123298 AUC after training: 0.8409090909090909
User 123298 does not improve AUC. Reverting changes.
Training on augumented user 43254 43/50 current_auc = 0.843939393939394
User 43254 AUC after training: 0.843939393939394
User 43254 does not improve AUC. Reverting changes.
Training on augumented user 125372 44/50 current_auc = 0.843939393939394
User 125372 AUC after training: 0.8409090909090909
User 125372 does not improve AUC. Reverting changes.
Training on augumented user 14432 45/50 current_auc = 0.843939393939394
User 14432 AUC after training: 0.8409090909090909
User 14432 does not improve AUC. Reverting changes.
Training on augumented user 40245 46/50 current_auc = 0.843939393939394
User 40245 AUC after training: 0.843939393939394
User 40245 does not improve AUC. Reverting changes.
Training on augumented user 7666 47/50 current_auc = 0.843939393939394
User 7666 AUC after training: 0.8409090909090909
User 7666 does not improve AUC. Reverting changes.
Training on augumented user 25507 48/50 current_auc = 0.843939393939394
User 25507 AUC after training: 0.843939393939394
User 25507 does not improve AUC. Reverting changes.
Training on augumented user 54528 49/50 current_auc = 0.843939393939394
User 54528 AUC after training: 0.843939393939394
User 54528 does not improve AUC. Reverting changes.
[2024-12-02 19:40:52.594430] start test user 115416 226/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:40:52.994244] start test user 115416 226/567 recall augumented users by random, augumented_users = [80200, 135992, 21809, 88645, 43751, 43767, 78641, 20262, 5712, 125188, 11993, 101345, 277, 64438, 9445, 56783, 60560, 32074, 3573, 94597, 124831, 95126, 2188, 119428, 31867, 120288, 126169, 86075, 101310, 42785, 65503, 133865, 25414, 68501, 56577, 39609, 118667, 133838, 126499, 48863, 105199, 53465, 72468, 90379, 51299, 55727, 123661, 44744, 72766, 49157]
[2024-12-02 19:40:53.009739] user = 115416 Cloud 226/567
[2024-12-02 19:40:53.019763] user = 115416 Local 226/567
[2024-12-02 19:40:53.167475] user = 115416 Local+ 226/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:40:56.104438] user = 115416 MPDA- 226/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7878787878787878
Training on augumented user 80200 0/50 current_auc = 0.7878787878787878
User 80200 AUC after training: 0.7727272727272727
User 80200 does not improve AUC. Reverting changes.
Training on augumented user 135992 1/50 current_auc = 0.7878787878787878
User 135992 AUC after training: 0.7878787878787878
User 135992 does not improve AUC. Reverting changes.
Training on augumented user 21809 2/50 current_auc = 0.7878787878787878
User 21809 AUC after training: 0.7727272727272727
User 21809 does not improve AUC. Reverting changes.
Training on augumented user 88645 3/50 current_auc = 0.7878787878787878
User 88645 AUC after training: 0.7878787878787878
User 88645 does not improve AUC. Reverting changes.
Training on augumented user 43751 4/50 current_auc = 0.7878787878787878
User 43751 AUC after training: 0.7878787878787878
User 43751 does not improve AUC. Reverting changes.
Training on augumented user 43767 5/50 current_auc = 0.7878787878787878
User 43767 AUC after training: 0.7878787878787878
User 43767 does not improve AUC. Reverting changes.
Training on augumented user 78641 6/50 current_auc = 0.7878787878787878
User 78641 AUC after training: 0.7878787878787878
User 78641 does not improve AUC. Reverting changes.
Training on augumented user 20262 7/50 current_auc = 0.7878787878787878
User 20262 AUC after training: 0.7878787878787878
User 20262 does not improve AUC. Reverting changes.
Training on augumented user 5712 8/50 current_auc = 0.7878787878787878
User 5712 AUC after training: 0.7878787878787878
User 5712 does not improve AUC. Reverting changes.
Training on augumented user 125188 9/50 current_auc = 0.7878787878787878
User 125188 AUC after training: 0.7727272727272727
User 125188 does not improve AUC. Reverting changes.
Training on augumented user 11993 10/50 current_auc = 0.7878787878787878
User 11993 AUC after training: 0.7878787878787878
User 11993 does not improve AUC. Reverting changes.
Training on augumented user 101345 11/50 current_auc = 0.7878787878787878
User 101345 AUC after training: 0.7727272727272727
User 101345 does not improve AUC. Reverting changes.
Training on augumented user 277 12/50 current_auc = 0.7878787878787878
User 277 AUC after training: 0.7727272727272727
User 277 does not improve AUC. Reverting changes.
Training on augumented user 64438 13/50 current_auc = 0.7878787878787878
User 64438 AUC after training: 0.7878787878787878
User 64438 does not improve AUC. Reverting changes.
Training on augumented user 9445 14/50 current_auc = 0.7878787878787878
User 9445 AUC after training: 0.7878787878787878
User 9445 does not improve AUC. Reverting changes.
Training on augumented user 56783 15/50 current_auc = 0.7878787878787878
User 56783 AUC after training: 0.7727272727272727
User 56783 does not improve AUC. Reverting changes.
Training on augumented user 60560 16/50 current_auc = 0.7878787878787878
User 60560 AUC after training: 0.7878787878787878
User 60560 does not improve AUC. Reverting changes.
Training on augumented user 32074 17/50 current_auc = 0.7878787878787878
User 32074 AUC after training: 0.7878787878787878
User 32074 does not improve AUC. Reverting changes.
Training on augumented user 3573 18/50 current_auc = 0.7878787878787878
User 3573 AUC after training: 0.803030303030303
User 3573 improves AUC. Keeping the model.
Training on augumented user 94597 19/50 current_auc = 0.803030303030303
User 94597 AUC after training: 0.803030303030303
User 94597 does not improve AUC. Reverting changes.
Training on augumented user 124831 20/50 current_auc = 0.803030303030303
User 124831 AUC after training: 0.7424242424242424
User 124831 does not improve AUC. Reverting changes.
Training on augumented user 95126 21/50 current_auc = 0.803030303030303
User 95126 AUC after training: 0.803030303030303
User 95126 does not improve AUC. Reverting changes.
Training on augumented user 2188 22/50 current_auc = 0.803030303030303
User 2188 AUC after training: 0.7878787878787878
User 2188 does not improve AUC. Reverting changes.
Training on augumented user 119428 23/50 current_auc = 0.803030303030303
User 119428 AUC after training: 0.7878787878787878
User 119428 does not improve AUC. Reverting changes.
Training on augumented user 31867 24/50 current_auc = 0.803030303030303
User 31867 AUC after training: 0.803030303030303
User 31867 does not improve AUC. Reverting changes.
Training on augumented user 120288 25/50 current_auc = 0.803030303030303
User 120288 AUC after training: 0.803030303030303
User 120288 does not improve AUC. Reverting changes.
Training on augumented user 126169 26/50 current_auc = 0.803030303030303
User 126169 AUC after training: 0.803030303030303
User 126169 does not improve AUC. Reverting changes.
Training on augumented user 86075 27/50 current_auc = 0.803030303030303
User 86075 AUC after training: 0.803030303030303
User 86075 does not improve AUC. Reverting changes.
Training on augumented user 101310 28/50 current_auc = 0.803030303030303
User 101310 AUC after training: 0.803030303030303
User 101310 does not improve AUC. Reverting changes.
Training on augumented user 42785 29/50 current_auc = 0.803030303030303
User 42785 AUC after training: 0.803030303030303
User 42785 does not improve AUC. Reverting changes.
Training on augumented user 65503 30/50 current_auc = 0.803030303030303
User 65503 AUC after training: 0.7878787878787878
User 65503 does not improve AUC. Reverting changes.
Training on augumented user 133865 31/50 current_auc = 0.803030303030303
User 133865 AUC after training: 0.7878787878787878
User 133865 does not improve AUC. Reverting changes.
Training on augumented user 25414 32/50 current_auc = 0.803030303030303
User 25414 AUC after training: 0.7878787878787878
User 25414 does not improve AUC. Reverting changes.
Training on augumented user 68501 33/50 current_auc = 0.803030303030303
User 68501 AUC after training: 0.803030303030303
User 68501 does not improve AUC. Reverting changes.
Training on augumented user 56577 34/50 current_auc = 0.803030303030303
User 56577 AUC after training: 0.803030303030303
User 56577 does not improve AUC. Reverting changes.
Training on augumented user 39609 35/50 current_auc = 0.803030303030303
User 39609 AUC after training: 0.7878787878787878
User 39609 does not improve AUC. Reverting changes.
Training on augumented user 118667 36/50 current_auc = 0.803030303030303
User 118667 AUC after training: 0.803030303030303
User 118667 does not improve AUC. Reverting changes.
Training on augumented user 133838 37/50 current_auc = 0.803030303030303
User 133838 AUC after training: 0.803030303030303
User 133838 does not improve AUC. Reverting changes.
Training on augumented user 126499 38/50 current_auc = 0.803030303030303
User 126499 AUC after training: 0.803030303030303
User 126499 does not improve AUC. Reverting changes.
Training on augumented user 48863 39/50 current_auc = 0.803030303030303
User 48863 AUC after training: 0.803030303030303
User 48863 does not improve AUC. Reverting changes.
Training on augumented user 105199 40/50 current_auc = 0.803030303030303
User 105199 AUC after training: 0.803030303030303
User 105199 does not improve AUC. Reverting changes.
Training on augumented user 53465 41/50 current_auc = 0.803030303030303
User 53465 AUC after training: 0.803030303030303
User 53465 does not improve AUC. Reverting changes.
Training on augumented user 72468 42/50 current_auc = 0.803030303030303
User 72468 AUC after training: 0.803030303030303
User 72468 does not improve AUC. Reverting changes.
Training on augumented user 90379 43/50 current_auc = 0.803030303030303
User 90379 AUC after training: 0.803030303030303
User 90379 does not improve AUC. Reverting changes.
Training on augumented user 51299 44/50 current_auc = 0.803030303030303
User 51299 AUC after training: 0.803030303030303
User 51299 does not improve AUC. Reverting changes.
Training on augumented user 55727 45/50 current_auc = 0.803030303030303
User 55727 AUC after training: 0.803030303030303
User 55727 does not improve AUC. Reverting changes.
Training on augumented user 123661 46/50 current_auc = 0.803030303030303
User 123661 AUC after training: 0.803030303030303
User 123661 does not improve AUC. Reverting changes.
Training on augumented user 44744 47/50 current_auc = 0.803030303030303
User 44744 AUC after training: 0.803030303030303
User 44744 does not improve AUC. Reverting changes.
Training on augumented user 72766 48/50 current_auc = 0.803030303030303
User 72766 AUC after training: 0.803030303030303
User 72766 does not improve AUC. Reverting changes.
Training on augumented user 49157 49/50 current_auc = 0.803030303030303
User 49157 AUC after training: 0.803030303030303
User 49157 does not improve AUC. Reverting changes.
[2024-12-02 19:41:24.045242] start test user 115424 227/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:41:24.728052] start test user 115424 227/567 recall augumented users by random, augumented_users = [100393, 78209, 121235, 138402, 13425, 74847, 73898, 131745, 132666, 68320, 27694, 74199, 72594, 82910, 101669, 131762, 98697, 128765, 43423, 117100, 126670, 110694, 38142, 18116, 130130, 124912, 106231, 53364, 102854, 10731, 32942, 97195, 112926, 61969, 54217, 133060, 86935, 70065, 106157, 81080, 28427, 57112, 105408, 106192, 35092, 1999, 48174, 36469, 89087, 84025]
[2024-12-02 19:41:24.759618] user = 115424 Cloud 227/567
[2024-12-02 19:41:24.777557] user = 115424 Local 227/567
[2024-12-02 19:41:25.031097] user = 115424 Local+ 227/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:41:27.799111] user = 115424 MPDA- 227/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6240409207161125
Training on augumented user 100393 0/50 current_auc = 0.6240409207161125
User 100393 AUC after training: 0.6265984654731457
User 100393 improves AUC. Keeping the model.
Training on augumented user 78209 1/50 current_auc = 0.6265984654731457
User 78209 AUC after training: 0.6265984654731458
User 78209 improves AUC. Keeping the model.
Training on augumented user 121235 2/50 current_auc = 0.6265984654731458
User 121235 AUC after training: 0.629156010230179
User 121235 improves AUC. Keeping the model.
Training on augumented user 138402 3/50 current_auc = 0.629156010230179
User 138402 AUC after training: 0.629156010230179
User 138402 does not improve AUC. Reverting changes.
Training on augumented user 13425 4/50 current_auc = 0.629156010230179
User 13425 AUC after training: 0.629156010230179
User 13425 does not improve AUC. Reverting changes.
Training on augumented user 74847 5/50 current_auc = 0.629156010230179
User 74847 AUC after training: 0.629156010230179
User 74847 does not improve AUC. Reverting changes.
Training on augumented user 73898 6/50 current_auc = 0.629156010230179
User 73898 AUC after training: 0.6265984654731458
User 73898 does not improve AUC. Reverting changes.
Training on augumented user 131745 7/50 current_auc = 0.629156010230179
User 131745 AUC after training: 0.6265984654731458
User 131745 does not improve AUC. Reverting changes.
Training on augumented user 132666 8/50 current_auc = 0.629156010230179
User 132666 AUC after training: 0.6214833759590792
User 132666 does not improve AUC. Reverting changes.
Training on augumented user 68320 9/50 current_auc = 0.629156010230179
User 68320 AUC after training: 0.6265984654731457
User 68320 does not improve AUC. Reverting changes.
Training on augumented user 27694 10/50 current_auc = 0.629156010230179
User 27694 AUC after training: 0.629156010230179
User 27694 does not improve AUC. Reverting changes.
Training on augumented user 74199 11/50 current_auc = 0.629156010230179
User 74199 AUC after training: 0.6342710997442454
User 74199 improves AUC. Keeping the model.
Training on augumented user 72594 12/50 current_auc = 0.6342710997442454
User 72594 AUC after training: 0.6317135549872123
User 72594 does not improve AUC. Reverting changes.
Training on augumented user 82910 13/50 current_auc = 0.6342710997442454
User 82910 AUC after training: 0.6342710997442454
User 82910 does not improve AUC. Reverting changes.
Training on augumented user 101669 14/50 current_auc = 0.6342710997442454
User 101669 AUC after training: 0.6317135549872123
User 101669 does not improve AUC. Reverting changes.
Training on augumented user 131762 15/50 current_auc = 0.6342710997442454
User 131762 AUC after training: 0.6265984654731458
User 131762 does not improve AUC. Reverting changes.
Training on augumented user 98697 16/50 current_auc = 0.6342710997442454
User 98697 AUC after training: 0.6342710997442454
User 98697 does not improve AUC. Reverting changes.
Training on augumented user 128765 17/50 current_auc = 0.6342710997442454
User 128765 AUC after training: 0.6317135549872123
User 128765 does not improve AUC. Reverting changes.
Training on augumented user 43423 18/50 current_auc = 0.6342710997442454
User 43423 AUC after training: 0.6317135549872123
User 43423 does not improve AUC. Reverting changes.
Training on augumented user 117100 19/50 current_auc = 0.6342710997442454
User 117100 AUC after training: 0.629156010230179
User 117100 does not improve AUC. Reverting changes.
Training on augumented user 126670 20/50 current_auc = 0.6342710997442454
User 126670 AUC after training: 0.6342710997442454
User 126670 does not improve AUC. Reverting changes.
Training on augumented user 110694 21/50 current_auc = 0.6342710997442454
User 110694 AUC after training: 0.6342710997442454
User 110694 does not improve AUC. Reverting changes.
Training on augumented user 38142 22/50 current_auc = 0.6342710997442454
User 38142 AUC after training: 0.6342710997442454
User 38142 does not improve AUC. Reverting changes.
Training on augumented user 18116 23/50 current_auc = 0.6342710997442454
User 18116 AUC after training: 0.6317135549872123
User 18116 does not improve AUC. Reverting changes.
Training on augumented user 130130 24/50 current_auc = 0.6342710997442454
User 130130 AUC after training: 0.6342710997442454
User 130130 does not improve AUC. Reverting changes.
Training on augumented user 124912 25/50 current_auc = 0.6342710997442454
User 124912 AUC after training: 0.6317135549872123
User 124912 does not improve AUC. Reverting changes.
Training on augumented user 106231 26/50 current_auc = 0.6342710997442454
User 106231 AUC after training: 0.6342710997442454
User 106231 does not improve AUC. Reverting changes.
Training on augumented user 53364 27/50 current_auc = 0.6342710997442454
User 53364 AUC after training: 0.6317135549872122
User 53364 does not improve AUC. Reverting changes.
Training on augumented user 102854 28/50 current_auc = 0.6342710997442454
User 102854 AUC after training: 0.6317135549872123
User 102854 does not improve AUC. Reverting changes.
Training on augumented user 10731 29/50 current_auc = 0.6342710997442454
User 10731 AUC after training: 0.6342710997442454
User 10731 does not improve AUC. Reverting changes.
Training on augumented user 32942 30/50 current_auc = 0.6342710997442454
User 32942 AUC after training: 0.6342710997442454
User 32942 does not improve AUC. Reverting changes.
Training on augumented user 97195 31/50 current_auc = 0.6342710997442454
User 97195 AUC after training: 0.6342710997442456
User 97195 improves AUC. Keeping the model.
Training on augumented user 112926 32/50 current_auc = 0.6342710997442456
User 112926 AUC after training: 0.6342710997442456
User 112926 does not improve AUC. Reverting changes.
Training on augumented user 61969 33/50 current_auc = 0.6342710997442456
User 61969 AUC after training: 0.6342710997442456
User 61969 does not improve AUC. Reverting changes.
Training on augumented user 54217 34/50 current_auc = 0.6342710997442456
User 54217 AUC after training: 0.6342710997442456
User 54217 does not improve AUC. Reverting changes.
Training on augumented user 133060 35/50 current_auc = 0.6342710997442456
User 133060 AUC after training: 0.6342710997442456
User 133060 does not improve AUC. Reverting changes.
Training on augumented user 86935 36/50 current_auc = 0.6342710997442456
User 86935 AUC after training: 0.629156010230179
User 86935 does not improve AUC. Reverting changes.
Training on augumented user 70065 37/50 current_auc = 0.6342710997442456
User 70065 AUC after training: 0.6317135549872123
User 70065 does not improve AUC. Reverting changes.
Training on augumented user 106157 38/50 current_auc = 0.6342710997442456
User 106157 AUC after training: 0.6342710997442456
User 106157 does not improve AUC. Reverting changes.
Training on augumented user 81080 39/50 current_auc = 0.6342710997442456
User 81080 AUC after training: 0.6317135549872123
User 81080 does not improve AUC. Reverting changes.
Training on augumented user 28427 40/50 current_auc = 0.6342710997442456
User 28427 AUC after training: 0.6317135549872123
User 28427 does not improve AUC. Reverting changes.
Training on augumented user 57112 41/50 current_auc = 0.6342710997442456
User 57112 AUC after training: 0.6342710997442456
User 57112 does not improve AUC. Reverting changes.
Training on augumented user 105408 42/50 current_auc = 0.6342710997442456
User 105408 AUC after training: 0.6342710997442456
User 105408 does not improve AUC. Reverting changes.
Training on augumented user 106192 43/50 current_auc = 0.6342710997442456
User 106192 AUC after training: 0.6342710997442456
User 106192 does not improve AUC. Reverting changes.
Training on augumented user 35092 44/50 current_auc = 0.6342710997442456
User 35092 AUC after training: 0.6342710997442456
User 35092 does not improve AUC. Reverting changes.
Training on augumented user 1999 45/50 current_auc = 0.6342710997442456
User 1999 AUC after training: 0.6342710997442456
User 1999 does not improve AUC. Reverting changes.
Training on augumented user 48174 46/50 current_auc = 0.6342710997442456
User 48174 AUC after training: 0.6317135549872123
User 48174 does not improve AUC. Reverting changes.
Training on augumented user 36469 47/50 current_auc = 0.6342710997442456
User 36469 AUC after training: 0.6317135549872123
User 36469 does not improve AUC. Reverting changes.
Training on augumented user 89087 48/50 current_auc = 0.6342710997442456
User 89087 AUC after training: 0.6342710997442456
User 89087 does not improve AUC. Reverting changes.
Training on augumented user 84025 49/50 current_auc = 0.6342710997442456
User 84025 AUC after training: 0.6342710997442456
User 84025 does not improve AUC. Reverting changes.
[2024-12-02 19:41:55.903829] start test user 115467 228/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:41:56.432829] start test user 115467 228/567 recall augumented users by random, augumented_users = [73649, 49457, 133015, 4295, 46690, 117031, 137012, 56675, 126338, 38752, 128665, 110247, 115494, 133830, 25548, 21871, 92453, 102755, 17544, 99386, 99829, 127081, 44132, 83462, 85785, 124014, 6590, 12071, 78634, 123076, 31576, 16999, 112977, 63932, 82469, 26077, 90779, 62620, 117296, 72005, 67908, 96641, 84224, 111333, 80861, 102421, 1562, 119832, 92711, 89525]
[2024-12-02 19:41:56.447916] user = 115467 Cloud 228/567
[2024-12-02 19:41:56.457788] user = 115467 Local 228/567
[2024-12-02 19:41:56.500896] user = 115467 Local+ 228/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:41:59.699703] user = 115467 MPDA- 228/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5925925925925926
Training on augumented user 73649 0/50 current_auc = 0.5925925925925926
User 73649 AUC after training: 0.5925925925925926
User 73649 does not improve AUC. Reverting changes.
Training on augumented user 49457 1/50 current_auc = 0.5925925925925926
User 49457 AUC after training: 0.5925925925925926
User 49457 does not improve AUC. Reverting changes.
Training on augumented user 133015 2/50 current_auc = 0.5925925925925926
User 133015 AUC after training: 0.5925925925925926
User 133015 does not improve AUC. Reverting changes.
Training on augumented user 4295 3/50 current_auc = 0.5925925925925926
User 4295 AUC after training: 0.6
User 4295 improves AUC. Keeping the model.
Training on augumented user 46690 4/50 current_auc = 0.6
User 46690 AUC after training: 0.6
User 46690 does not improve AUC. Reverting changes.
Training on augumented user 117031 5/50 current_auc = 0.6
User 117031 AUC after training: 0.6
User 117031 does not improve AUC. Reverting changes.
Training on augumented user 137012 6/50 current_auc = 0.6
User 137012 AUC after training: 0.5925925925925926
User 137012 does not improve AUC. Reverting changes.
Training on augumented user 56675 7/50 current_auc = 0.6
User 56675 AUC after training: 0.5925925925925926
User 56675 does not improve AUC. Reverting changes.
Training on augumented user 126338 8/50 current_auc = 0.6
User 126338 AUC after training: 0.5925925925925926
User 126338 does not improve AUC. Reverting changes.
Training on augumented user 38752 9/50 current_auc = 0.6
User 38752 AUC after training: 0.6
User 38752 does not improve AUC. Reverting changes.
Training on augumented user 128665 10/50 current_auc = 0.6
User 128665 AUC after training: 0.5925925925925926
User 128665 does not improve AUC. Reverting changes.
Training on augumented user 110247 11/50 current_auc = 0.6
User 110247 AUC after training: 0.5925925925925926
User 110247 does not improve AUC. Reverting changes.
Training on augumented user 115494 12/50 current_auc = 0.6
User 115494 AUC after training: 0.6
User 115494 does not improve AUC. Reverting changes.
Training on augumented user 133830 13/50 current_auc = 0.6
User 133830 AUC after training: 0.6
User 133830 does not improve AUC. Reverting changes.
Training on augumented user 25548 14/50 current_auc = 0.6
User 25548 AUC after training: 0.6
User 25548 does not improve AUC. Reverting changes.
Training on augumented user 21871 15/50 current_auc = 0.6
User 21871 AUC after training: 0.6
User 21871 does not improve AUC. Reverting changes.
Training on augumented user 92453 16/50 current_auc = 0.6
User 92453 AUC after training: 0.6
User 92453 does not improve AUC. Reverting changes.
Training on augumented user 102755 17/50 current_auc = 0.6
User 102755 AUC after training: 0.6
User 102755 does not improve AUC. Reverting changes.
Training on augumented user 17544 18/50 current_auc = 0.6
User 17544 AUC after training: 0.6
User 17544 does not improve AUC. Reverting changes.
Training on augumented user 99386 19/50 current_auc = 0.6
User 99386 AUC after training: 0.5851851851851851
User 99386 does not improve AUC. Reverting changes.
Training on augumented user 99829 20/50 current_auc = 0.6
User 99829 AUC after training: 0.6
User 99829 does not improve AUC. Reverting changes.
Training on augumented user 127081 21/50 current_auc = 0.6
User 127081 AUC after training: 0.6
User 127081 does not improve AUC. Reverting changes.
Training on augumented user 44132 22/50 current_auc = 0.6
User 44132 AUC after training: 0.6
User 44132 does not improve AUC. Reverting changes.
Training on augumented user 83462 23/50 current_auc = 0.6
User 83462 AUC after training: 0.6
User 83462 does not improve AUC. Reverting changes.
Training on augumented user 85785 24/50 current_auc = 0.6
User 85785 AUC after training: 0.6
User 85785 does not improve AUC. Reverting changes.
Training on augumented user 124014 25/50 current_auc = 0.6
User 124014 AUC after training: 0.6
User 124014 does not improve AUC. Reverting changes.
Training on augumented user 6590 26/50 current_auc = 0.6
User 6590 AUC after training: 0.6
User 6590 does not improve AUC. Reverting changes.
Training on augumented user 12071 27/50 current_auc = 0.6
User 12071 AUC after training: 0.5925925925925926
User 12071 does not improve AUC. Reverting changes.
Training on augumented user 78634 28/50 current_auc = 0.6
User 78634 AUC after training: 0.6
User 78634 does not improve AUC. Reverting changes.
Training on augumented user 123076 29/50 current_auc = 0.6
User 123076 AUC after training: 0.5925925925925926
User 123076 does not improve AUC. Reverting changes.
Training on augumented user 31576 30/50 current_auc = 0.6
User 31576 AUC after training: 0.5925925925925926
User 31576 does not improve AUC. Reverting changes.
Training on augumented user 16999 31/50 current_auc = 0.6
User 16999 AUC after training: 0.6
User 16999 does not improve AUC. Reverting changes.
Training on augumented user 112977 32/50 current_auc = 0.6
User 112977 AUC after training: 0.5925925925925926
User 112977 does not improve AUC. Reverting changes.
Training on augumented user 63932 33/50 current_auc = 0.6
User 63932 AUC after training: 0.5851851851851851
User 63932 does not improve AUC. Reverting changes.
Training on augumented user 82469 34/50 current_auc = 0.6
User 82469 AUC after training: 0.6
User 82469 does not improve AUC. Reverting changes.
Training on augumented user 26077 35/50 current_auc = 0.6
User 26077 AUC after training: 0.6
User 26077 does not improve AUC. Reverting changes.
Training on augumented user 90779 36/50 current_auc = 0.6
User 90779 AUC after training: 0.6
User 90779 does not improve AUC. Reverting changes.
Training on augumented user 62620 37/50 current_auc = 0.6
User 62620 AUC after training: 0.6
User 62620 does not improve AUC. Reverting changes.
Training on augumented user 117296 38/50 current_auc = 0.6
User 117296 AUC after training: 0.5925925925925926
User 117296 does not improve AUC. Reverting changes.
Training on augumented user 72005 39/50 current_auc = 0.6
User 72005 AUC after training: 0.6
User 72005 does not improve AUC. Reverting changes.
Training on augumented user 67908 40/50 current_auc = 0.6
User 67908 AUC after training: 0.6
User 67908 does not improve AUC. Reverting changes.
Training on augumented user 96641 41/50 current_auc = 0.6
User 96641 AUC after training: 0.6
User 96641 does not improve AUC. Reverting changes.
Training on augumented user 84224 42/50 current_auc = 0.6
User 84224 AUC after training: 0.6
User 84224 does not improve AUC. Reverting changes.
Training on augumented user 111333 43/50 current_auc = 0.6
User 111333 AUC after training: 0.6
User 111333 does not improve AUC. Reverting changes.
Training on augumented user 80861 44/50 current_auc = 0.6
User 80861 AUC after training: 0.6
User 80861 does not improve AUC. Reverting changes.
Training on augumented user 102421 45/50 current_auc = 0.6
User 102421 AUC after training: 0.5851851851851851
User 102421 does not improve AUC. Reverting changes.
Training on augumented user 1562 46/50 current_auc = 0.6
User 1562 AUC after training: 0.6
User 1562 does not improve AUC. Reverting changes.
Training on augumented user 119832 47/50 current_auc = 0.6
User 119832 AUC after training: 0.6
User 119832 does not improve AUC. Reverting changes.
Training on augumented user 92711 48/50 current_auc = 0.6
User 92711 AUC after training: 0.6
User 92711 does not improve AUC. Reverting changes.
Training on augumented user 89525 49/50 current_auc = 0.6
User 89525 AUC after training: 0.6
User 89525 does not improve AUC. Reverting changes.
[2024-12-02 19:42:24.963304] start test user 115496 229/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:42:25.496490] start test user 115496 229/567 recall augumented users by random, augumented_users = [6712, 123167, 131882, 116413, 115226, 50651, 134470, 52048, 36285, 28155, 46228, 118385, 58469, 80557, 54649, 51370, 75415, 95820, 94505, 101402, 123297, 83369, 116701, 80701, 20069, 121866, 63172, 46067, 55625, 100522, 124823, 6681, 58855, 104333, 90924, 25457, 114212, 67284, 57712, 44804, 25654, 48031, 33455, 73266, 53608, 121225, 5405, 58717, 125954, 71392]
[2024-12-02 19:42:25.513550] user = 115496 Cloud 229/567
[2024-12-02 19:42:25.552706] user = 115496 Local 229/567
[2024-12-02 19:42:25.796385] user = 115496 Local+ 229/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:42:28.090542] user = 115496 MPDA- 229/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6774365111022471
Training on augumented user 6712 0/50 current_auc = 0.6774365111022471
User 6712 AUC after training: 0.6787661215263927
User 6712 improves AUC. Keeping the model.
Training on augumented user 123167 1/50 current_auc = 0.6787661215263927
User 123167 AUC after training: 0.678367238399149
User 123167 does not improve AUC. Reverting changes.
Training on augumented user 131882 2/50 current_auc = 0.6787661215263927
User 131882 AUC after training: 0.6787661215263927
User 131882 does not improve AUC. Reverting changes.
Training on augumented user 116413 3/50 current_auc = 0.6787661215263927
User 116413 AUC after training: 0.6775694721446616
User 116413 does not improve AUC. Reverting changes.
Training on augumented user 115226 4/50 current_auc = 0.6787661215263927
User 115226 AUC after training: 0.6779683552719054
User 115226 does not improve AUC. Reverting changes.
Training on augumented user 50651 5/50 current_auc = 0.6787661215263927
User 50651 AUC after training: 0.6790320436112218
User 50651 improves AUC. Keeping the model.
Training on augumented user 134470 6/50 current_auc = 0.6790320436112218
User 134470 AUC after training: 0.6791650046536365
User 134470 improves AUC. Keeping the model.
Training on augumented user 52048 7/50 current_auc = 0.6791650046536365
User 52048 AUC after training: 0.6794309267384656
User 52048 improves AUC. Keeping the model.
Training on augumented user 36285 8/50 current_auc = 0.6794309267384656
User 36285 AUC after training: 0.6794309267384656
User 36285 does not improve AUC. Reverting changes.
Training on augumented user 28155 9/50 current_auc = 0.6794309267384656
User 28155 AUC after training: 0.6785001994415637
User 28155 does not improve AUC. Reverting changes.
Training on augumented user 46228 10/50 current_auc = 0.6794309267384656
User 46228 AUC after training: 0.6800957319505385
User 46228 improves AUC. Keeping the model.
Training on augumented user 118385 11/50 current_auc = 0.6800957319505385
User 118385 AUC after training: 0.6798298098657093
User 118385 does not improve AUC. Reverting changes.
Training on augumented user 58469 12/50 current_auc = 0.6800957319505385
User 58469 AUC after training: 0.680228692992953
User 58469 improves AUC. Keeping the model.
Training on augumented user 80557 13/50 current_auc = 0.680228692992953
User 80557 AUC after training: 0.6800957319505385
User 80557 does not improve AUC. Reverting changes.
Training on augumented user 54649 14/50 current_auc = 0.680228692992953
User 54649 AUC after training: 0.6800957319505384
User 54649 does not improve AUC. Reverting changes.
Training on augumented user 51370 15/50 current_auc = 0.680228692992953
User 51370 AUC after training: 0.6790320436112219
User 51370 does not improve AUC. Reverting changes.
Training on augumented user 75415 16/50 current_auc = 0.680228692992953
User 75415 AUC after training: 0.6800957319505384
User 75415 does not improve AUC. Reverting changes.
Training on augumented user 95820 17/50 current_auc = 0.680228692992953
User 95820 AUC after training: 0.6800957319505385
User 95820 does not improve AUC. Reverting changes.
Training on augumented user 94505 18/50 current_auc = 0.680228692992953
User 94505 AUC after training: 0.679962770908124
User 94505 does not improve AUC. Reverting changes.
Training on augumented user 101402 19/50 current_auc = 0.680228692992953
User 101402 AUC after training: 0.6799627709081238
User 101402 does not improve AUC. Reverting changes.
Training on augumented user 123297 20/50 current_auc = 0.680228692992953
User 123297 AUC after training: 0.6791650046536365
User 123297 does not improve AUC. Reverting changes.
Training on augumented user 83369 21/50 current_auc = 0.680228692992953
User 83369 AUC after training: 0.6800957319505385
User 83369 does not improve AUC. Reverting changes.
Training on augumented user 116701 22/50 current_auc = 0.680228692992953
User 116701 AUC after training: 0.679962770908124
User 116701 does not improve AUC. Reverting changes.
Training on augumented user 80701 23/50 current_auc = 0.680228692992953
User 80701 AUC after training: 0.6790320436112219
User 80701 does not improve AUC. Reverting changes.
Training on augumented user 20069 24/50 current_auc = 0.680228692992953
User 20069 AUC after training: 0.6800957319505385
User 20069 does not improve AUC. Reverting changes.
Training on augumented user 121866 25/50 current_auc = 0.680228692992953
User 121866 AUC after training: 0.6800957319505384
User 121866 does not improve AUC. Reverting changes.
Training on augumented user 63172 26/50 current_auc = 0.680228692992953
User 63172 AUC after training: 0.679962770908124
User 63172 does not improve AUC. Reverting changes.
Training on augumented user 46067 27/50 current_auc = 0.680228692992953
User 46067 AUC after training: 0.6799627709081238
User 46067 does not improve AUC. Reverting changes.
Training on augumented user 55625 28/50 current_auc = 0.680228692992953
User 55625 AUC after training: 0.6800957319505385
User 55625 does not improve AUC. Reverting changes.
Training on augumented user 100522 29/50 current_auc = 0.680228692992953
User 100522 AUC after training: 0.6791650046536365
User 100522 does not improve AUC. Reverting changes.
Training on augumented user 124823 30/50 current_auc = 0.680228692992953
User 124823 AUC after training: 0.6802286929929531
User 124823 improves AUC. Keeping the model.
Training on augumented user 6681 31/50 current_auc = 0.6802286929929531
User 6681 AUC after training: 0.6800957319505385
User 6681 does not improve AUC. Reverting changes.
Training on augumented user 58855 32/50 current_auc = 0.6802286929929531
User 58855 AUC after training: 0.6796968488232948
User 58855 does not improve AUC. Reverting changes.
Training on augumented user 104333 33/50 current_auc = 0.6802286929929531
User 104333 AUC after training: 0.6800957319505385
User 104333 does not improve AUC. Reverting changes.
Training on augumented user 90924 34/50 current_auc = 0.6802286929929531
User 90924 AUC after training: 0.6799627709081238
User 90924 does not improve AUC. Reverting changes.
Training on augumented user 25457 35/50 current_auc = 0.6802286929929531
User 25457 AUC after training: 0.6795638877808802
User 25457 does not improve AUC. Reverting changes.
Training on augumented user 114212 36/50 current_auc = 0.6802286929929531
User 114212 AUC after training: 0.6796968488232948
User 114212 does not improve AUC. Reverting changes.
Training on augumented user 67284 37/50 current_auc = 0.6802286929929531
User 67284 AUC after training: 0.6802286929929531
User 67284 does not improve AUC. Reverting changes.
Training on augumented user 57712 38/50 current_auc = 0.6802286929929531
User 57712 AUC after training: 0.679297965696051
User 57712 does not improve AUC. Reverting changes.
Training on augumented user 44804 39/50 current_auc = 0.6802286929929531
User 44804 AUC after training: 0.6804946150777822
User 44804 improves AUC. Keeping the model.
Training on augumented user 25654 40/50 current_auc = 0.6804946150777822
User 25654 AUC after training: 0.679962770908124
User 25654 does not improve AUC. Reverting changes.
Training on augumented user 48031 41/50 current_auc = 0.6804946150777822
User 48031 AUC after training: 0.6800957319505384
User 48031 does not improve AUC. Reverting changes.
Training on augumented user 33455 42/50 current_auc = 0.6804946150777822
User 33455 AUC after training: 0.6798298098657094
User 33455 does not improve AUC. Reverting changes.
Training on augumented user 73266 43/50 current_auc = 0.6804946150777822
User 73266 AUC after training: 0.6799627709081238
User 73266 does not improve AUC. Reverting changes.
Training on augumented user 53608 44/50 current_auc = 0.6804946150777822
User 53608 AUC after training: 0.6798298098657094
User 53608 does not improve AUC. Reverting changes.
Training on augumented user 121225 45/50 current_auc = 0.6804946150777822
User 121225 AUC after training: 0.6803616540353676
User 121225 does not improve AUC. Reverting changes.
Training on augumented user 5405 46/50 current_auc = 0.6804946150777822
User 5405 AUC after training: 0.6806275761201968
User 5405 improves AUC. Keeping the model.
Training on augumented user 58717 47/50 current_auc = 0.6806275761201968
User 58717 AUC after training: 0.6796968488232948
User 58717 does not improve AUC. Reverting changes.
Training on augumented user 125954 48/50 current_auc = 0.6806275761201968
User 125954 AUC after training: 0.6806275761201969
User 125954 improves AUC. Keeping the model.
Training on augumented user 71392 49/50 current_auc = 0.6806275761201969
User 71392 AUC after training: 0.6798298098657094
User 71392 does not improve AUC. Reverting changes.
[2024-12-02 19:42:59.898359] start test user 115502 230/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:43:00.310527] start test user 115502 230/567 recall augumented users by random, augumented_users = [97114, 90579, 120281, 15869, 59572, 70100, 76470, 5003, 77662, 45767, 8196, 136829, 68629, 9828, 12037, 52737, 72208, 55906, 98860, 135844, 18478, 43741, 72522, 15859, 17247, 11174, 41298, 53857, 90500, 136658, 101965, 83089, 128822, 24145, 124092, 23350, 91127, 73803, 83661, 71741, 106246, 59950, 52147, 80445, 67350, 60790, 95155, 66699, 105035, 10184]
[2024-12-02 19:43:00.326206] user = 115502 Cloud 230/567
[2024-12-02 19:43:00.339422] user = 115502 Local 230/567
[2024-12-02 19:43:00.570547] user = 115502 Local+ 230/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:43:03.440016] user = 115502 MPDA- 230/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8215488215488216
Training on augumented user 97114 0/50 current_auc = 0.8215488215488216
User 97114 AUC after training: 0.8232323232323233
User 97114 improves AUC. Keeping the model.
Training on augumented user 90579 1/50 current_auc = 0.8232323232323233
User 90579 AUC after training: 0.8215488215488216
User 90579 does not improve AUC. Reverting changes.
Training on augumented user 120281 2/50 current_auc = 0.8232323232323233
User 120281 AUC after training: 0.8223905723905724
User 120281 does not improve AUC. Reverting changes.
Training on augumented user 15869 3/50 current_auc = 0.8232323232323233
User 15869 AUC after training: 0.8232323232323233
User 15869 does not improve AUC. Reverting changes.
Training on augumented user 59572 4/50 current_auc = 0.8232323232323233
User 59572 AUC after training: 0.8240740740740742
User 59572 improves AUC. Keeping the model.
Training on augumented user 70100 5/50 current_auc = 0.8240740740740742
User 70100 AUC after training: 0.8240740740740741
User 70100 does not improve AUC. Reverting changes.
Training on augumented user 76470 6/50 current_auc = 0.8240740740740742
User 76470 AUC after training: 0.8249158249158249
User 76470 improves AUC. Keeping the model.
Training on augumented user 5003 7/50 current_auc = 0.8249158249158249
User 5003 AUC after training: 0.8249158249158249
User 5003 does not improve AUC. Reverting changes.
Training on augumented user 77662 8/50 current_auc = 0.8249158249158249
User 77662 AUC after training: 0.8249158249158249
User 77662 does not improve AUC. Reverting changes.
Training on augumented user 45767 9/50 current_auc = 0.8249158249158249
User 45767 AUC after training: 0.8240740740740742
User 45767 does not improve AUC. Reverting changes.
Training on augumented user 8196 10/50 current_auc = 0.8249158249158249
User 8196 AUC after training: 0.8249158249158249
User 8196 does not improve AUC. Reverting changes.
Training on augumented user 136829 11/50 current_auc = 0.8249158249158249
User 136829 AUC after training: 0.8249158249158249
User 136829 does not improve AUC. Reverting changes.
Training on augumented user 68629 12/50 current_auc = 0.8249158249158249
User 68629 AUC after training: 0.8249158249158249
User 68629 does not improve AUC. Reverting changes.
Training on augumented user 9828 13/50 current_auc = 0.8249158249158249
User 9828 AUC after training: 0.8249158249158249
User 9828 does not improve AUC. Reverting changes.
Training on augumented user 12037 14/50 current_auc = 0.8249158249158249
User 12037 AUC after training: 0.8215488215488216
User 12037 does not improve AUC. Reverting changes.
Training on augumented user 52737 15/50 current_auc = 0.8249158249158249
User 52737 AUC after training: 0.8249158249158249
User 52737 does not improve AUC. Reverting changes.
Training on augumented user 72208 16/50 current_auc = 0.8249158249158249
User 72208 AUC after training: 0.8240740740740742
User 72208 does not improve AUC. Reverting changes.
Training on augumented user 55906 17/50 current_auc = 0.8249158249158249
User 55906 AUC after training: 0.8249158249158249
User 55906 does not improve AUC. Reverting changes.
Training on augumented user 98860 18/50 current_auc = 0.8249158249158249
User 98860 AUC after training: 0.8240740740740742
User 98860 does not improve AUC. Reverting changes.
Training on augumented user 135844 19/50 current_auc = 0.8249158249158249
User 135844 AUC after training: 0.8249158249158249
User 135844 does not improve AUC. Reverting changes.
Training on augumented user 18478 20/50 current_auc = 0.8249158249158249
User 18478 AUC after training: 0.8249158249158249
User 18478 does not improve AUC. Reverting changes.
Training on augumented user 43741 21/50 current_auc = 0.8249158249158249
User 43741 AUC after training: 0.8249158249158249
User 43741 does not improve AUC. Reverting changes.
Training on augumented user 72522 22/50 current_auc = 0.8249158249158249
User 72522 AUC after training: 0.8249158249158249
User 72522 does not improve AUC. Reverting changes.
Training on augumented user 15859 23/50 current_auc = 0.8249158249158249
User 15859 AUC after training: 0.8249158249158249
User 15859 does not improve AUC. Reverting changes.
Training on augumented user 17247 24/50 current_auc = 0.8249158249158249
User 17247 AUC after training: 0.8240740740740742
User 17247 does not improve AUC. Reverting changes.
Training on augumented user 11174 25/50 current_auc = 0.8249158249158249
User 11174 AUC after training: 0.8249158249158249
User 11174 does not improve AUC. Reverting changes.
Training on augumented user 41298 26/50 current_auc = 0.8249158249158249
User 41298 AUC after training: 0.8232323232323233
User 41298 does not improve AUC. Reverting changes.
Training on augumented user 53857 27/50 current_auc = 0.8249158249158249
User 53857 AUC after training: 0.8249158249158249
User 53857 does not improve AUC. Reverting changes.
Training on augumented user 90500 28/50 current_auc = 0.8249158249158249
User 90500 AUC after training: 0.8232323232323233
User 90500 does not improve AUC. Reverting changes.
Training on augumented user 136658 29/50 current_auc = 0.8249158249158249
User 136658 AUC after training: 0.8240740740740742
User 136658 does not improve AUC. Reverting changes.
Training on augumented user 101965 30/50 current_auc = 0.8249158249158249
User 101965 AUC after training: 0.8232323232323232
User 101965 does not improve AUC. Reverting changes.
Training on augumented user 83089 31/50 current_auc = 0.8249158249158249
User 83089 AUC after training: 0.8240740740740742
User 83089 does not improve AUC. Reverting changes.
Training on augumented user 128822 32/50 current_auc = 0.8249158249158249
User 128822 AUC after training: 0.8249158249158249
User 128822 does not improve AUC. Reverting changes.
Training on augumented user 24145 33/50 current_auc = 0.8249158249158249
User 24145 AUC after training: 0.8249158249158249
User 24145 does not improve AUC. Reverting changes.
Training on augumented user 124092 34/50 current_auc = 0.8249158249158249
User 124092 AUC after training: 0.8249158249158249
User 124092 does not improve AUC. Reverting changes.
Training on augumented user 23350 35/50 current_auc = 0.8249158249158249
User 23350 AUC after training: 0.8249158249158249
User 23350 does not improve AUC. Reverting changes.
Training on augumented user 91127 36/50 current_auc = 0.8249158249158249
User 91127 AUC after training: 0.8232323232323233
User 91127 does not improve AUC. Reverting changes.
Training on augumented user 73803 37/50 current_auc = 0.8249158249158249
User 73803 AUC after training: 0.8249158249158249
User 73803 does not improve AUC. Reverting changes.
Training on augumented user 83661 38/50 current_auc = 0.8249158249158249
User 83661 AUC after training: 0.8240740740740742
User 83661 does not improve AUC. Reverting changes.
Training on augumented user 71741 39/50 current_auc = 0.8249158249158249
User 71741 AUC after training: 0.8257575757575758
User 71741 improves AUC. Keeping the model.
Training on augumented user 106246 40/50 current_auc = 0.8257575757575758
User 106246 AUC after training: 0.8240740740740742
User 106246 does not improve AUC. Reverting changes.
Training on augumented user 59950 41/50 current_auc = 0.8257575757575758
User 59950 AUC after training: 0.8257575757575758
User 59950 does not improve AUC. Reverting changes.
Training on augumented user 52147 42/50 current_auc = 0.8257575757575758
User 52147 AUC after training: 0.8249158249158249
User 52147 does not improve AUC. Reverting changes.
Training on augumented user 80445 43/50 current_auc = 0.8257575757575758
User 80445 AUC after training: 0.8240740740740742
User 80445 does not improve AUC. Reverting changes.
Training on augumented user 67350 44/50 current_auc = 0.8257575757575758
User 67350 AUC after training: 0.8265993265993266
User 67350 improves AUC. Keeping the model.
Training on augumented user 60790 45/50 current_auc = 0.8265993265993266
User 60790 AUC after training: 0.8257575757575758
User 60790 does not improve AUC. Reverting changes.
Training on augumented user 95155 46/50 current_auc = 0.8265993265993266
User 95155 AUC after training: 0.8257575757575758
User 95155 does not improve AUC. Reverting changes.
Training on augumented user 66699 47/50 current_auc = 0.8265993265993266
User 66699 AUC after training: 0.8257575757575758
User 66699 does not improve AUC. Reverting changes.
Training on augumented user 105035 48/50 current_auc = 0.8265993265993266
User 105035 AUC after training: 0.8240740740740742
User 105035 does not improve AUC. Reverting changes.
Training on augumented user 10184 49/50 current_auc = 0.8265993265993266
User 10184 AUC after training: 0.8249158249158249
User 10184 does not improve AUC. Reverting changes.
[2024-12-02 19:43:31.123829] start test user 115585 231/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:43:31.795057] start test user 115585 231/567 recall augumented users by random, augumented_users = [36388, 51166, 97317, 1547, 8771, 8050, 40246, 9825, 133873, 81215, 97341, 66861, 4031, 64886, 106515, 83636, 25203, 100083, 105288, 54791, 124163, 3030, 2107, 118686, 119773, 81676, 103412, 20570, 3249, 54184, 67197, 41405, 82963, 53532, 134356, 98121, 130334, 132757, 41935, 125623, 6635, 14224, 2643, 39684, 23901, 123412, 86776, 113604, 38328, 89832]
[2024-12-02 19:43:31.816661] user = 115585 Cloud 231/567
[2024-12-02 19:43:31.827294] user = 115585 Local 231/567
[2024-12-02 19:43:31.888841] user = 115585 Local+ 231/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:43:34.504194] user = 115585 MPDA- 231/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7534722222222222
Training on augumented user 36388 0/50 current_auc = 0.7534722222222222
User 36388 AUC after training: 0.7546296296296297
User 36388 improves AUC. Keeping the model.
Training on augumented user 51166 1/50 current_auc = 0.7546296296296297
User 51166 AUC after training: 0.755787037037037
User 51166 improves AUC. Keeping the model.
Training on augumented user 97317 2/50 current_auc = 0.755787037037037
User 97317 AUC after training: 0.7569444444444444
User 97317 improves AUC. Keeping the model.
Training on augumented user 1547 3/50 current_auc = 0.7569444444444444
User 1547 AUC after training: 0.7523148148148149
User 1547 does not improve AUC. Reverting changes.
Training on augumented user 8771 4/50 current_auc = 0.7569444444444444
User 8771 AUC after training: 0.755787037037037
User 8771 does not improve AUC. Reverting changes.
Training on augumented user 8050 5/50 current_auc = 0.7569444444444444
User 8050 AUC after training: 0.7615740740740742
User 8050 improves AUC. Keeping the model.
Training on augumented user 40246 6/50 current_auc = 0.7615740740740742
User 40246 AUC after training: 0.7569444444444444
User 40246 does not improve AUC. Reverting changes.
Training on augumented user 9825 7/50 current_auc = 0.7615740740740742
User 9825 AUC after training: 0.755787037037037
User 9825 does not improve AUC. Reverting changes.
Training on augumented user 133873 8/50 current_auc = 0.7615740740740742
User 133873 AUC after training: 0.7615740740740742
User 133873 does not improve AUC. Reverting changes.
Training on augumented user 81215 9/50 current_auc = 0.7615740740740742
User 81215 AUC after training: 0.7581018518518519
User 81215 does not improve AUC. Reverting changes.
Training on augumented user 97341 10/50 current_auc = 0.7615740740740742
User 97341 AUC after training: 0.7592592592592593
User 97341 does not improve AUC. Reverting changes.
Training on augumented user 66861 11/50 current_auc = 0.7615740740740742
User 66861 AUC after training: 0.7592592592592593
User 66861 does not improve AUC. Reverting changes.
Training on augumented user 4031 12/50 current_auc = 0.7615740740740742
User 4031 AUC after training: 0.7592592592592593
User 4031 does not improve AUC. Reverting changes.
Training on augumented user 64886 13/50 current_auc = 0.7615740740740742
User 64886 AUC after training: 0.7592592592592593
User 64886 does not improve AUC. Reverting changes.
Training on augumented user 106515 14/50 current_auc = 0.7615740740740742
User 106515 AUC after training: 0.7592592592592593
User 106515 does not improve AUC. Reverting changes.
Training on augumented user 83636 15/50 current_auc = 0.7615740740740742
User 83636 AUC after training: 0.7592592592592593
User 83636 does not improve AUC. Reverting changes.
Training on augumented user 25203 16/50 current_auc = 0.7615740740740742
User 25203 AUC after training: 0.7569444444444444
User 25203 does not improve AUC. Reverting changes.
Training on augumented user 100083 17/50 current_auc = 0.7615740740740742
User 100083 AUC after training: 0.7592592592592593
User 100083 does not improve AUC. Reverting changes.
Training on augumented user 105288 18/50 current_auc = 0.7615740740740742
User 105288 AUC after training: 0.7604166666666667
User 105288 does not improve AUC. Reverting changes.
Training on augumented user 54791 19/50 current_auc = 0.7615740740740742
User 54791 AUC after training: 0.7604166666666667
User 54791 does not improve AUC. Reverting changes.
Training on augumented user 124163 20/50 current_auc = 0.7615740740740742
User 124163 AUC after training: 0.7534722222222223
User 124163 does not improve AUC. Reverting changes.
Training on augumented user 3030 21/50 current_auc = 0.7615740740740742
User 3030 AUC after training: 0.7615740740740742
User 3030 does not improve AUC. Reverting changes.
Training on augumented user 2107 22/50 current_auc = 0.7615740740740742
User 2107 AUC after training: 0.7534722222222222
User 2107 does not improve AUC. Reverting changes.
Training on augumented user 118686 23/50 current_auc = 0.7615740740740742
User 118686 AUC after training: 0.7604166666666667
User 118686 does not improve AUC. Reverting changes.
Training on augumented user 119773 24/50 current_auc = 0.7615740740740742
User 119773 AUC after training: 0.7592592592592593
User 119773 does not improve AUC. Reverting changes.
Training on augumented user 81676 25/50 current_auc = 0.7615740740740742
User 81676 AUC after training: 0.7592592592592593
User 81676 does not improve AUC. Reverting changes.
Training on augumented user 103412 26/50 current_auc = 0.7615740740740742
User 103412 AUC after training: 0.7604166666666667
User 103412 does not improve AUC. Reverting changes.
Training on augumented user 20570 27/50 current_auc = 0.7615740740740742
User 20570 AUC after training: 0.7569444444444444
User 20570 does not improve AUC. Reverting changes.
Training on augumented user 3249 28/50 current_auc = 0.7615740740740742
User 3249 AUC after training: 0.7581018518518519
User 3249 does not improve AUC. Reverting changes.
Training on augumented user 54184 29/50 current_auc = 0.7615740740740742
User 54184 AUC after training: 0.7592592592592593
User 54184 does not improve AUC. Reverting changes.
Training on augumented user 67197 30/50 current_auc = 0.7615740740740742
User 67197 AUC after training: 0.7604166666666667
User 67197 does not improve AUC. Reverting changes.
Training on augumented user 41405 31/50 current_auc = 0.7615740740740742
User 41405 AUC after training: 0.7604166666666667
User 41405 does not improve AUC. Reverting changes.
Training on augumented user 82963 32/50 current_auc = 0.7615740740740742
User 82963 AUC after training: 0.7592592592592593
User 82963 does not improve AUC. Reverting changes.
Training on augumented user 53532 33/50 current_auc = 0.7615740740740742
User 53532 AUC after training: 0.7604166666666667
User 53532 does not improve AUC. Reverting changes.
Training on augumented user 134356 34/50 current_auc = 0.7615740740740742
User 134356 AUC after training: 0.7581018518518519
User 134356 does not improve AUC. Reverting changes.
Training on augumented user 98121 35/50 current_auc = 0.7615740740740742
User 98121 AUC after training: 0.7604166666666667
User 98121 does not improve AUC. Reverting changes.
Training on augumented user 130334 36/50 current_auc = 0.7615740740740742
User 130334 AUC after training: 0.7581018518518519
User 130334 does not improve AUC. Reverting changes.
Training on augumented user 132757 37/50 current_auc = 0.7615740740740742
User 132757 AUC after training: 0.7604166666666667
User 132757 does not improve AUC. Reverting changes.
Training on augumented user 41935 38/50 current_auc = 0.7615740740740742
User 41935 AUC after training: 0.7604166666666667
User 41935 does not improve AUC. Reverting changes.
Training on augumented user 125623 39/50 current_auc = 0.7615740740740742
User 125623 AUC after training: 0.7604166666666667
User 125623 does not improve AUC. Reverting changes.
Training on augumented user 6635 40/50 current_auc = 0.7615740740740742
User 6635 AUC after training: 0.7604166666666667
User 6635 does not improve AUC. Reverting changes.
Training on augumented user 14224 41/50 current_auc = 0.7615740740740742
User 14224 AUC after training: 0.7592592592592593
User 14224 does not improve AUC. Reverting changes.
Training on augumented user 2643 42/50 current_auc = 0.7615740740740742
User 2643 AUC after training: 0.755787037037037
User 2643 does not improve AUC. Reverting changes.
Training on augumented user 39684 43/50 current_auc = 0.7615740740740742
User 39684 AUC after training: 0.7604166666666667
User 39684 does not improve AUC. Reverting changes.
Training on augumented user 23901 44/50 current_auc = 0.7615740740740742
User 23901 AUC after training: 0.7581018518518519
User 23901 does not improve AUC. Reverting changes.
Training on augumented user 123412 45/50 current_auc = 0.7615740740740742
User 123412 AUC after training: 0.7592592592592593
User 123412 does not improve AUC. Reverting changes.
Training on augumented user 86776 46/50 current_auc = 0.7615740740740742
User 86776 AUC after training: 0.7592592592592593
User 86776 does not improve AUC. Reverting changes.
Training on augumented user 113604 47/50 current_auc = 0.7615740740740742
User 113604 AUC after training: 0.7569444444444444
User 113604 does not improve AUC. Reverting changes.
Training on augumented user 38328 48/50 current_auc = 0.7615740740740742
User 38328 AUC after training: 0.7604166666666667
User 38328 does not improve AUC. Reverting changes.
Training on augumented user 89832 49/50 current_auc = 0.7615740740740742
User 89832 AUC after training: 0.7581018518518519
User 89832 does not improve AUC. Reverting changes.
[2024-12-02 19:44:05.018960] start test user 115604 232/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:44:05.435163] start test user 115604 232/567 recall augumented users by random, augumented_users = [118604, 33002, 115338, 137605, 125565, 63757, 10357, 104932, 88520, 131009, 94312, 102803, 38646, 126961, 103553, 98235, 112407, 79585, 100691, 109048, 71353, 20090, 91871, 74554, 25337, 119614, 132571, 84260, 121354, 120490, 59587, 132360, 91930, 105944, 71534, 313, 43520, 11949, 8865, 116927, 55670, 31771, 138148, 41429, 10860, 92139, 853, 117795, 11563, 122856]
[2024-12-02 19:44:05.451709] user = 115604 Cloud 232/567
[2024-12-02 19:44:05.460808] user = 115604 Local 232/567
[2024-12-02 19:44:05.627404] user = 115604 Local+ 232/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:44:07.642727] user = 115604 MPDA- 232/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 118604 0/50 current_auc = 0.5
User 118604 AUC after training: 0.5
User 118604 does not improve AUC. Reverting changes.
Training on augumented user 33002 1/50 current_auc = 0.5
User 33002 AUC after training: 0.5
User 33002 does not improve AUC. Reverting changes.
Training on augumented user 115338 2/50 current_auc = 0.5
User 115338 AUC after training: 0.5
User 115338 does not improve AUC. Reverting changes.
Training on augumented user 137605 3/50 current_auc = 0.5
User 137605 AUC after training: 0.5
User 137605 does not improve AUC. Reverting changes.
Training on augumented user 125565 4/50 current_auc = 0.5
User 125565 AUC after training: 0.5
User 125565 does not improve AUC. Reverting changes.
Training on augumented user 63757 5/50 current_auc = 0.5
User 63757 AUC after training: 0.5
User 63757 does not improve AUC. Reverting changes.
Training on augumented user 10357 6/50 current_auc = 0.5
User 10357 AUC after training: 0.5
User 10357 does not improve AUC. Reverting changes.
Training on augumented user 104932 7/50 current_auc = 0.5
User 104932 AUC after training: 0.5
User 104932 does not improve AUC. Reverting changes.
Training on augumented user 88520 8/50 current_auc = 0.5
User 88520 AUC after training: 0.5
User 88520 does not improve AUC. Reverting changes.
Training on augumented user 131009 9/50 current_auc = 0.5
User 131009 AUC after training: 0.5
User 131009 does not improve AUC. Reverting changes.
Training on augumented user 94312 10/50 current_auc = 0.5
User 94312 AUC after training: 0.5
User 94312 does not improve AUC. Reverting changes.
Training on augumented user 102803 11/50 current_auc = 0.5
User 102803 AUC after training: 0.5
User 102803 does not improve AUC. Reverting changes.
Training on augumented user 38646 12/50 current_auc = 0.5
User 38646 AUC after training: 0.5
User 38646 does not improve AUC. Reverting changes.
Training on augumented user 126961 13/50 current_auc = 0.5
User 126961 AUC after training: 0.5
User 126961 does not improve AUC. Reverting changes.
Training on augumented user 103553 14/50 current_auc = 0.5
User 103553 AUC after training: 0.5
User 103553 does not improve AUC. Reverting changes.
Training on augumented user 98235 15/50 current_auc = 0.5
User 98235 AUC after training: 0.5
User 98235 does not improve AUC. Reverting changes.
Training on augumented user 112407 16/50 current_auc = 0.5
User 112407 AUC after training: 0.5
User 112407 does not improve AUC. Reverting changes.
Training on augumented user 79585 17/50 current_auc = 0.5
User 79585 AUC after training: 0.5
User 79585 does not improve AUC. Reverting changes.
Training on augumented user 100691 18/50 current_auc = 0.5
User 100691 AUC after training: 0.5
User 100691 does not improve AUC. Reverting changes.
Training on augumented user 109048 19/50 current_auc = 0.5
User 109048 AUC after training: 0.5
User 109048 does not improve AUC. Reverting changes.
Training on augumented user 71353 20/50 current_auc = 0.5
User 71353 AUC after training: 0.5
User 71353 does not improve AUC. Reverting changes.
Training on augumented user 20090 21/50 current_auc = 0.5
User 20090 AUC after training: 0.5
User 20090 does not improve AUC. Reverting changes.
Training on augumented user 91871 22/50 current_auc = 0.5
User 91871 AUC after training: 0.5
User 91871 does not improve AUC. Reverting changes.
Training on augumented user 74554 23/50 current_auc = 0.5
User 74554 AUC after training: 0.5
User 74554 does not improve AUC. Reverting changes.
Training on augumented user 25337 24/50 current_auc = 0.5
User 25337 AUC after training: 0.5
User 25337 does not improve AUC. Reverting changes.
Training on augumented user 119614 25/50 current_auc = 0.5
User 119614 AUC after training: 0.5
User 119614 does not improve AUC. Reverting changes.
Training on augumented user 132571 26/50 current_auc = 0.5
User 132571 AUC after training: 0.5
User 132571 does not improve AUC. Reverting changes.
Training on augumented user 84260 27/50 current_auc = 0.5
User 84260 AUC after training: 0.5
User 84260 does not improve AUC. Reverting changes.
Training on augumented user 121354 28/50 current_auc = 0.5
User 121354 AUC after training: 0.5
User 121354 does not improve AUC. Reverting changes.
Training on augumented user 120490 29/50 current_auc = 0.5
User 120490 AUC after training: 0.5
User 120490 does not improve AUC. Reverting changes.
Training on augumented user 59587 30/50 current_auc = 0.5
User 59587 AUC after training: 0.5
User 59587 does not improve AUC. Reverting changes.
Training on augumented user 132360 31/50 current_auc = 0.5
User 132360 AUC after training: 0.5
User 132360 does not improve AUC. Reverting changes.
Training on augumented user 91930 32/50 current_auc = 0.5
User 91930 AUC after training: 0.5
User 91930 does not improve AUC. Reverting changes.
Training on augumented user 105944 33/50 current_auc = 0.5
User 105944 AUC after training: 0.5
User 105944 does not improve AUC. Reverting changes.
Training on augumented user 71534 34/50 current_auc = 0.5
User 71534 AUC after training: 0.5
User 71534 does not improve AUC. Reverting changes.
Training on augumented user 313 35/50 current_auc = 0.5
User 313 AUC after training: 0.5
User 313 does not improve AUC. Reverting changes.
Training on augumented user 43520 36/50 current_auc = 0.5
User 43520 AUC after training: 0.5
User 43520 does not improve AUC. Reverting changes.
Training on augumented user 11949 37/50 current_auc = 0.5
User 11949 AUC after training: 0.5
User 11949 does not improve AUC. Reverting changes.
Training on augumented user 8865 38/50 current_auc = 0.5
User 8865 AUC after training: 0.5
User 8865 does not improve AUC. Reverting changes.
Training on augumented user 116927 39/50 current_auc = 0.5
User 116927 AUC after training: 0.5
User 116927 does not improve AUC. Reverting changes.
Training on augumented user 55670 40/50 current_auc = 0.5
User 55670 AUC after training: 0.5
User 55670 does not improve AUC. Reverting changes.
Training on augumented user 31771 41/50 current_auc = 0.5
User 31771 AUC after training: 0.5
User 31771 does not improve AUC. Reverting changes.
Training on augumented user 138148 42/50 current_auc = 0.5
User 138148 AUC after training: 0.5
User 138148 does not improve AUC. Reverting changes.
Training on augumented user 41429 43/50 current_auc = 0.5
User 41429 AUC after training: 0.5
User 41429 does not improve AUC. Reverting changes.
Training on augumented user 10860 44/50 current_auc = 0.5
User 10860 AUC after training: 0.5
User 10860 does not improve AUC. Reverting changes.
Training on augumented user 92139 45/50 current_auc = 0.5
User 92139 AUC after training: 0.5
User 92139 does not improve AUC. Reverting changes.
Training on augumented user 853 46/50 current_auc = 0.5
User 853 AUC after training: 0.5
User 853 does not improve AUC. Reverting changes.
Training on augumented user 117795 47/50 current_auc = 0.5
User 117795 AUC after training: 0.5
User 117795 does not improve AUC. Reverting changes.
Training on augumented user 11563 48/50 current_auc = 0.5
User 11563 AUC after training: 0.5
User 11563 does not improve AUC. Reverting changes.
Training on augumented user 122856 49/50 current_auc = 0.5
User 122856 AUC after training: 0.5
User 122856 does not improve AUC. Reverting changes.
[2024-12-02 19:44:33.825336] start test user 115606 233/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:44:34.246902] start test user 115606 233/567 recall augumented users by random, augumented_users = [128613, 106939, 52610, 104936, 76356, 98915, 92457, 102620, 112856, 4514, 8998, 92107, 126579, 31358, 30962, 98149, 134107, 74012, 98507, 137194, 136475, 118037, 28956, 108116, 1417, 60383, 11287, 26039, 85810, 37219, 60788, 77903, 103305, 58423, 92754, 120637, 101074, 105706, 27455, 6487, 113851, 25229, 58137, 56223, 8833, 23167, 98494, 709, 23582, 50790]
[2024-12-02 19:44:34.264909] user = 115606 Cloud 233/567
[2024-12-02 19:44:34.384531] user = 115606 Local 233/567
[2024-12-02 19:44:34.535413] user = 115606 Local+ 233/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:44:36.701071] user = 115606 MPDA- 233/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7212553509564117
Training on augumented user 128613 0/50 current_auc = 0.7212553509564117
User 128613 AUC after training: 0.72072344420464
User 128613 does not improve AUC. Reverting changes.
Training on augumented user 106939 1/50 current_auc = 0.7212553509564117
User 106939 AUC after training: 0.722039817748593
User 106939 improves AUC. Keeping the model.
Training on augumented user 52610 2/50 current_auc = 0.722039817748593
User 52610 AUC after training: 0.7210480731454695
User 52610 does not improve AUC. Reverting changes.
Training on augumented user 104936 3/50 current_auc = 0.722039817748593
User 104936 AUC after training: 0.722025786635237
User 104936 does not improve AUC. Reverting changes.
Training on augumented user 76356 4/50 current_auc = 0.722039817748593
User 76356 AUC after training: 0.7218593266086033
User 76356 does not improve AUC. Reverting changes.
Training on augumented user 98915 5/50 current_auc = 0.722039817748593
User 98915 AUC after training: 0.7220430066379923
User 98915 improves AUC. Keeping the model.
Training on augumented user 92457 6/50 current_auc = 0.7220430066379923
User 92457 AUC after training: 0.7222706933410888
User 92457 improves AUC. Keeping the model.
Training on augumented user 102620 7/50 current_auc = 0.7222706933410888
User 102620 AUC after training: 0.7220965799798973
User 102620 does not improve AUC. Reverting changes.
Training on augumented user 112856 8/50 current_auc = 0.7222706933410888
User 112856 AUC after training: 0.7225640711658069
User 112856 improves AUC. Keeping the model.
Training on augumented user 4514 9/50 current_auc = 0.7225640711658069
User 4514 AUC after training: 0.721990071073967
User 4514 does not improve AUC. Reverting changes.
Training on augumented user 8998 10/50 current_auc = 0.7225640711658069
User 8998 AUC after training: 0.7229320690024644
User 8998 improves AUC. Keeping the model.
Training on augumented user 92107 11/50 current_auc = 0.7229320690024644
User 92107 AUC after training: 0.7225781022791631
User 92107 does not improve AUC. Reverting changes.
Training on augumented user 126579 12/50 current_auc = 0.7229320690024644
User 126579 AUC after training: 0.7229773512319317
User 126579 improves AUC. Keeping the model.
Training on augumented user 31358 13/50 current_auc = 0.7229773512319317
User 31358 AUC after training: 0.723575586883205
User 31358 improves AUC. Keeping the model.
Training on augumented user 30962 14/50 current_auc = 0.723575586883205
User 30962 AUC after training: 0.7234658890878756
User 30962 does not improve AUC. Reverting changes.
Training on augumented user 98149 15/50 current_auc = 0.723575586883205
User 98149 AUC after training: 0.7236336246702688
User 98149 improves AUC. Keeping the model.
Training on augumented user 134107 16/50 current_auc = 0.7236336246702688
User 134107 AUC after training: 0.7232573357211737
User 134107 does not improve AUC. Reverting changes.
Training on augumented user 74012 17/50 current_auc = 0.7236336246702688
User 74012 AUC after training: 0.7236878357900537
User 74012 improves AUC. Keeping the model.
Training on augumented user 98507 18/50 current_auc = 0.7236878357900537
User 98507 AUC after training: 0.7240143780645226
User 98507 improves AUC. Keeping the model.
Training on augumented user 137194 19/50 current_auc = 0.7240143780645226
User 137194 AUC after training: 0.7240373380681963
User 137194 improves AUC. Keeping the model.
Training on augumented user 136475 20/50 current_auc = 0.7240373380681963
User 136475 AUC after training: 0.7238542958166874
User 136475 does not improve AUC. Reverting changes.
Training on augumented user 118037 21/50 current_auc = 0.7240373380681963
User 118037 AUC after training: 0.7238880980443179
User 118037 does not improve AUC. Reverting changes.
Training on augumented user 28956 22/50 current_auc = 0.7240373380681963
User 28956 AUC after training: 0.7235692091044068
User 28956 does not improve AUC. Reverting changes.
Training on augumented user 108116 23/50 current_auc = 0.7240373380681963
User 108116 AUC after training: 0.7238421780369707
User 108116 does not improve AUC. Reverting changes.
Training on augumented user 1417 24/50 current_auc = 0.7240373380681963
User 1417 AUC after training: 0.7232949646160833
User 1417 does not improve AUC. Reverting changes.
Training on augumented user 60383 25/50 current_auc = 0.7240373380681963
User 60383 AUC after training: 0.724189129203594
User 60383 improves AUC. Keeping the model.
Training on augumented user 11287 26/50 current_auc = 0.724189129203594
User 11287 AUC after training: 0.7244735781379947
User 11287 improves AUC. Keeping the model.
Training on augumented user 26039 27/50 current_auc = 0.7244735781379947
User 26039 AUC after training: 0.7246827692825764
User 26039 improves AUC. Keeping the model.
Training on augumented user 85810 28/50 current_auc = 0.7246827692825764
User 85810 AUC after training: 0.7246712892807396
User 85810 does not improve AUC. Reverting changes.
Training on augumented user 37219 29/50 current_auc = 0.7246827692825764
User 37219 AUC after training: 0.7250960493487012
User 37219 improves AUC. Keeping the model.
Training on augumented user 60788 30/50 current_auc = 0.7250960493487012
User 60788 AUC after training: 0.7250424760067962
User 60788 does not improve AUC. Reverting changes.
Training on augumented user 77903 31/50 current_auc = 0.7250960493487012
User 77903 AUC after training: 0.7241610669768819
User 77903 does not improve AUC. Reverting changes.
Training on augumented user 103305 32/50 current_auc = 0.7250960493487012
User 103305 AUC after training: 0.7248084115249014
User 103305 does not improve AUC. Reverting changes.
Training on augumented user 58423 33/50 current_auc = 0.7250960493487012
User 58423 AUC after training: 0.7249850759976122
User 58423 does not improve AUC. Reverting changes.
Training on augumented user 92754 34/50 current_auc = 0.7250960493487012
User 92754 AUC after training: 0.7249251248769089
User 92754 does not improve AUC. Reverting changes.
Training on augumented user 120637 35/50 current_auc = 0.7250960493487012
User 120637 AUC after training: 0.7248613470889267
User 120637 does not improve AUC. Reverting changes.
Training on augumented user 101074 36/50 current_auc = 0.7250960493487012
User 101074 AUC after training: 0.725190440474915
User 101074 improves AUC. Keeping the model.
Training on augumented user 105706 37/50 current_auc = 0.725190440474915
User 105706 AUC after training: 0.7251285760205721
User 105706 does not improve AUC. Reverting changes.
Training on augumented user 27455 38/50 current_auc = 0.725190440474915
User 27455 AUC after training: 0.7251802360288377
User 27455 does not improve AUC. Reverting changes.
Training on augumented user 6487 39/50 current_auc = 0.725190440474915
User 6487 AUC after training: 0.7252210538131463
User 6487 improves AUC. Keeping the model.
Training on augumented user 113851 40/50 current_auc = 0.7252210538131463
User 113851 AUC after training: 0.7252810049338496
User 113851 improves AUC. Keeping the model.
Training on augumented user 25229 41/50 current_auc = 0.7252810049338496
User 25229 AUC after training: 0.7220889266453394
User 25229 does not improve AUC. Reverting changes.
Training on augumented user 58137 42/50 current_auc = 0.7252810049338496
User 58137 AUC after training: 0.7252542182628972
User 58137 does not improve AUC. Reverting changes.
Training on augumented user 56223 43/50 current_auc = 0.7252810049338496
User 56223 AUC after training: 0.7256241294331941
User 56223 improves AUC. Keeping the model.
Training on augumented user 8833 44/50 current_auc = 0.7256241294331941
User 8833 AUC after training: 0.7254366227365263
User 8833 does not improve AUC. Reverting changes.
Training on augumented user 23167 45/50 current_auc = 0.7256241294331941
User 23167 AUC after training: 0.725768267234034
User 23167 improves AUC. Keeping the model.
Training on augumented user 98494 46/50 current_auc = 0.725768267234034
User 98494 AUC after training: 0.7252963116029655
User 98494 does not improve AUC. Reverting changes.
Training on augumented user 709 47/50 current_auc = 0.725768267234034
User 709 AUC after training: 0.7256343338792712
User 709 does not improve AUC. Reverting changes.
Training on augumented user 23582 48/50 current_auc = 0.725768267234034
User 23582 AUC after training: 0.7257523227870384
User 23582 does not improve AUC. Reverting changes.
Training on augumented user 50790 49/50 current_auc = 0.725768267234034
User 50790 AUC after training: 0.7249659426612175
User 50790 does not improve AUC. Reverting changes.
[2024-12-02 19:45:17.827383] start test user 115617 234/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:45:18.313800] start test user 115617 234/567 recall augumented users by random, augumented_users = [123988, 1121, 67537, 64344, 68719, 2390, 36562, 133302, 80669, 60416, 67942, 148, 7961, 10619, 60832, 70494, 115520, 79856, 131081, 131810, 41502, 130033, 14516, 134866, 128815, 79419, 101099, 63814, 19882, 88199, 32392, 90796, 19121, 67119, 98729, 87312, 86726, 103007, 34019, 128916, 61015, 137776, 42397, 97487, 98709, 61408, 82320, 21702, 124336, 114791]
[2024-12-02 19:45:18.330190] user = 115617 Cloud 234/567
[2024-12-02 19:45:18.339949] user = 115617 Local 234/567
[2024-12-02 19:45:18.589580] user = 115617 Local+ 234/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:45:22.088716] user = 115617 MPDA- 234/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5476190476190477
Training on augumented user 123988 0/50 current_auc = 0.5476190476190477
User 123988 AUC after training: 0.5476190476190477
User 123988 does not improve AUC. Reverting changes.
Training on augumented user 1121 1/50 current_auc = 0.5476190476190477
User 1121 AUC after training: 0.5476190476190477
User 1121 does not improve AUC. Reverting changes.
Training on augumented user 67537 2/50 current_auc = 0.5476190476190477
User 67537 AUC after training: 0.5476190476190477
User 67537 does not improve AUC. Reverting changes.
Training on augumented user 64344 3/50 current_auc = 0.5476190476190477
User 64344 AUC after training: 0.5476190476190477
User 64344 does not improve AUC. Reverting changes.
Training on augumented user 68719 4/50 current_auc = 0.5476190476190477
User 68719 AUC after training: 0.5476190476190477
User 68719 does not improve AUC. Reverting changes.
Training on augumented user 2390 5/50 current_auc = 0.5476190476190477
User 2390 AUC after training: 0.5476190476190477
User 2390 does not improve AUC. Reverting changes.
Training on augumented user 36562 6/50 current_auc = 0.5476190476190477
User 36562 AUC after training: 0.5476190476190477
User 36562 does not improve AUC. Reverting changes.
Training on augumented user 133302 7/50 current_auc = 0.5476190476190477
User 133302 AUC after training: 0.5476190476190477
User 133302 does not improve AUC. Reverting changes.
Training on augumented user 80669 8/50 current_auc = 0.5476190476190477
User 80669 AUC after training: 0.5476190476190477
User 80669 does not improve AUC. Reverting changes.
Training on augumented user 60416 9/50 current_auc = 0.5476190476190477
User 60416 AUC after training: 0.5476190476190477
User 60416 does not improve AUC. Reverting changes.
Training on augumented user 67942 10/50 current_auc = 0.5476190476190477
User 67942 AUC after training: 0.5476190476190477
User 67942 does not improve AUC. Reverting changes.
Training on augumented user 148 11/50 current_auc = 0.5476190476190477
User 148 AUC after training: 0.5476190476190477
User 148 does not improve AUC. Reverting changes.
Training on augumented user 7961 12/50 current_auc = 0.5476190476190477
User 7961 AUC after training: 0.5476190476190477
User 7961 does not improve AUC. Reverting changes.
Training on augumented user 10619 13/50 current_auc = 0.5476190476190477
User 10619 AUC after training: 0.5396825396825397
User 10619 does not improve AUC. Reverting changes.
Training on augumented user 60832 14/50 current_auc = 0.5476190476190477
User 60832 AUC after training: 0.5476190476190477
User 60832 does not improve AUC. Reverting changes.
Training on augumented user 70494 15/50 current_auc = 0.5476190476190477
User 70494 AUC after training: 0.5476190476190477
User 70494 does not improve AUC. Reverting changes.
Training on augumented user 115520 16/50 current_auc = 0.5476190476190477
User 115520 AUC after training: 0.5476190476190477
User 115520 does not improve AUC. Reverting changes.
Training on augumented user 79856 17/50 current_auc = 0.5476190476190477
User 79856 AUC after training: 0.5476190476190477
User 79856 does not improve AUC. Reverting changes.
Training on augumented user 131081 18/50 current_auc = 0.5476190476190477
User 131081 AUC after training: 0.5317460317460317
User 131081 does not improve AUC. Reverting changes.
Training on augumented user 131810 19/50 current_auc = 0.5476190476190477
User 131810 AUC after training: 0.5476190476190477
User 131810 does not improve AUC. Reverting changes.
Training on augumented user 41502 20/50 current_auc = 0.5476190476190477
User 41502 AUC after training: 0.5476190476190477
User 41502 does not improve AUC. Reverting changes.
Training on augumented user 130033 21/50 current_auc = 0.5476190476190477
User 130033 AUC after training: 0.5476190476190477
User 130033 does not improve AUC. Reverting changes.
Training on augumented user 14516 22/50 current_auc = 0.5476190476190477
User 14516 AUC after training: 0.5476190476190477
User 14516 does not improve AUC. Reverting changes.
Training on augumented user 134866 23/50 current_auc = 0.5476190476190477
User 134866 AUC after training: 0.5238095238095238
User 134866 does not improve AUC. Reverting changes.
Training on augumented user 128815 24/50 current_auc = 0.5476190476190477
User 128815 AUC after training: 0.5396825396825398
User 128815 does not improve AUC. Reverting changes.
Training on augumented user 79419 25/50 current_auc = 0.5476190476190477
User 79419 AUC after training: 0.5396825396825397
User 79419 does not improve AUC. Reverting changes.
Training on augumented user 101099 26/50 current_auc = 0.5476190476190477
User 101099 AUC after training: 0.5476190476190477
User 101099 does not improve AUC. Reverting changes.
Training on augumented user 63814 27/50 current_auc = 0.5476190476190477
User 63814 AUC after training: 0.5476190476190477
User 63814 does not improve AUC. Reverting changes.
Training on augumented user 19882 28/50 current_auc = 0.5476190476190477
User 19882 AUC after training: 0.5476190476190477
User 19882 does not improve AUC. Reverting changes.
Training on augumented user 88199 29/50 current_auc = 0.5476190476190477
User 88199 AUC after training: 0.5476190476190477
User 88199 does not improve AUC. Reverting changes.
Training on augumented user 32392 30/50 current_auc = 0.5476190476190477
User 32392 AUC after training: 0.5476190476190477
User 32392 does not improve AUC. Reverting changes.
Training on augumented user 90796 31/50 current_auc = 0.5476190476190477
User 90796 AUC after training: 0.5396825396825398
User 90796 does not improve AUC. Reverting changes.
Training on augumented user 19121 32/50 current_auc = 0.5476190476190477
User 19121 AUC after training: 0.5476190476190477
User 19121 does not improve AUC. Reverting changes.
Training on augumented user 67119 33/50 current_auc = 0.5476190476190477
User 67119 AUC after training: 0.5396825396825398
User 67119 does not improve AUC. Reverting changes.
Training on augumented user 98729 34/50 current_auc = 0.5476190476190477
User 98729 AUC after training: 0.5396825396825398
User 98729 does not improve AUC. Reverting changes.
Training on augumented user 87312 35/50 current_auc = 0.5476190476190477
User 87312 AUC after training: 0.5476190476190477
User 87312 does not improve AUC. Reverting changes.
Training on augumented user 86726 36/50 current_auc = 0.5476190476190477
User 86726 AUC after training: 0.5476190476190477
User 86726 does not improve AUC. Reverting changes.
Training on augumented user 103007 37/50 current_auc = 0.5476190476190477
User 103007 AUC after training: 0.5476190476190477
User 103007 does not improve AUC. Reverting changes.
Training on augumented user 34019 38/50 current_auc = 0.5476190476190477
User 34019 AUC after training: 0.5476190476190477
User 34019 does not improve AUC. Reverting changes.
Training on augumented user 128916 39/50 current_auc = 0.5476190476190477
User 128916 AUC after training: 0.5476190476190477
User 128916 does not improve AUC. Reverting changes.
Training on augumented user 61015 40/50 current_auc = 0.5476190476190477
User 61015 AUC after training: 0.5476190476190477
User 61015 does not improve AUC. Reverting changes.
Training on augumented user 137776 41/50 current_auc = 0.5476190476190477
User 137776 AUC after training: 0.5476190476190477
User 137776 does not improve AUC. Reverting changes.
Training on augumented user 42397 42/50 current_auc = 0.5476190476190477
User 42397 AUC after training: 0.5476190476190477
User 42397 does not improve AUC. Reverting changes.
Training on augumented user 97487 43/50 current_auc = 0.5476190476190477
User 97487 AUC after training: 0.5476190476190477
User 97487 does not improve AUC. Reverting changes.
Training on augumented user 98709 44/50 current_auc = 0.5476190476190477
User 98709 AUC after training: 0.5396825396825397
User 98709 does not improve AUC. Reverting changes.
Training on augumented user 61408 45/50 current_auc = 0.5476190476190477
User 61408 AUC after training: 0.5476190476190477
User 61408 does not improve AUC. Reverting changes.
Training on augumented user 82320 46/50 current_auc = 0.5476190476190477
User 82320 AUC after training: 0.5396825396825397
User 82320 does not improve AUC. Reverting changes.
Training on augumented user 21702 47/50 current_auc = 0.5476190476190477
User 21702 AUC after training: 0.5476190476190477
User 21702 does not improve AUC. Reverting changes.
Training on augumented user 124336 48/50 current_auc = 0.5476190476190477
User 124336 AUC after training: 0.5476190476190477
User 124336 does not improve AUC. Reverting changes.
Training on augumented user 114791 49/50 current_auc = 0.5476190476190477
User 114791 AUC after training: 0.5476190476190477
User 114791 does not improve AUC. Reverting changes.
[2024-12-02 19:45:49.377313] start test user 115620 235/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:45:49.913892] start test user 115620 235/567 recall augumented users by random, augumented_users = [61636, 74678, 13398, 90863, 45650, 115244, 32006, 136882, 8454, 127246, 125676, 43213, 49906, 27248, 24151, 129421, 73289, 138225, 126186, 7769, 117084, 99209, 51709, 55972, 59593, 487, 66641, 84283, 77298, 68706, 84345, 131880, 23011, 32423, 56763, 129909, 137641, 105981, 73885, 62236, 130213, 120870, 8556, 79159, 9115, 121937, 9880, 101471, 44249, 61852]
[2024-12-02 19:45:49.936652] user = 115620 Cloud 235/567
[2024-12-02 19:45:49.952953] user = 115620 Local 235/567
[2024-12-02 19:45:50.069660] user = 115620 Local+ 235/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:45:52.522036] user = 115620 MPDA- 235/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5350912778904665
Training on augumented user 61636 0/50 current_auc = 0.5350912778904665
User 61636 AUC after training: 0.5314401622718053
User 61636 does not improve AUC. Reverting changes.
Training on augumented user 74678 1/50 current_auc = 0.5350912778904665
User 74678 AUC after training: 0.5340770791075051
User 74678 does not improve AUC. Reverting changes.
Training on augumented user 13398 2/50 current_auc = 0.5350912778904665
User 13398 AUC after training: 0.5348884381338742
User 13398 does not improve AUC. Reverting changes.
Training on augumented user 90863 3/50 current_auc = 0.5350912778904665
User 90863 AUC after training: 0.5338742393509128
User 90863 does not improve AUC. Reverting changes.
Training on augumented user 45650 4/50 current_auc = 0.5350912778904665
User 45650 AUC after training: 0.5338742393509128
User 45650 does not improve AUC. Reverting changes.
Training on augumented user 115244 5/50 current_auc = 0.5350912778904665
User 115244 AUC after training: 0.5369168356997972
User 115244 improves AUC. Keeping the model.
Training on augumented user 32006 6/50 current_auc = 0.5369168356997972
User 32006 AUC after training: 0.5371196754563895
User 32006 improves AUC. Keeping the model.
Training on augumented user 136882 7/50 current_auc = 0.5371196754563895
User 136882 AUC after training: 0.5369168356997971
User 136882 does not improve AUC. Reverting changes.
Training on augumented user 8454 8/50 current_auc = 0.5371196754563895
User 8454 AUC after training: 0.5379310344827586
User 8454 improves AUC. Keeping the model.
Training on augumented user 127246 9/50 current_auc = 0.5379310344827586
User 127246 AUC after training: 0.5399594320486816
User 127246 improves AUC. Keeping the model.
Training on augumented user 125676 10/50 current_auc = 0.5399594320486816
User 125676 AUC after training: 0.5387423935091278
User 125676 does not improve AUC. Reverting changes.
Training on augumented user 43213 11/50 current_auc = 0.5399594320486816
User 43213 AUC after training: 0.5440162271805273
User 43213 improves AUC. Keeping the model.
Training on augumented user 49906 12/50 current_auc = 0.5440162271805273
User 49906 AUC after training: 0.5427991886409737
User 49906 does not improve AUC. Reverting changes.
Training on augumented user 27248 13/50 current_auc = 0.5440162271805273
User 27248 AUC after training: 0.5334685598377282
User 27248 does not improve AUC. Reverting changes.
Training on augumented user 24151 14/50 current_auc = 0.5440162271805273
User 24151 AUC after training: 0.5403651115618662
User 24151 does not improve AUC. Reverting changes.
Training on augumented user 129421 15/50 current_auc = 0.5440162271805273
User 129421 AUC after training: 0.5448275862068964
User 129421 improves AUC. Keeping the model.
Training on augumented user 73289 16/50 current_auc = 0.5448275862068964
User 73289 AUC after training: 0.545841784989858
User 73289 improves AUC. Keeping the model.
Training on augumented user 138225 17/50 current_auc = 0.545841784989858
User 138225 AUC after training: 0.5446247464503041
User 138225 does not improve AUC. Reverting changes.
Training on augumented user 126186 18/50 current_auc = 0.545841784989858
User 126186 AUC after training: 0.5444219066937118
User 126186 does not improve AUC. Reverting changes.
Training on augumented user 7769 19/50 current_auc = 0.545841784989858
User 7769 AUC after training: 0.5460446247464503
User 7769 improves AUC. Keeping the model.
Training on augumented user 117084 20/50 current_auc = 0.5460446247464503
User 117084 AUC after training: 0.5448275862068966
User 117084 does not improve AUC. Reverting changes.
Training on augumented user 99209 21/50 current_auc = 0.5460446247464503
User 99209 AUC after training: 0.5454361054766733
User 99209 does not improve AUC. Reverting changes.
Training on augumented user 51709 22/50 current_auc = 0.5460446247464503
User 51709 AUC after training: 0.544421906693712
User 51709 does not improve AUC. Reverting changes.
Training on augumented user 55972 23/50 current_auc = 0.5460446247464503
User 55972 AUC after training: 0.5436105476673427
User 55972 does not improve AUC. Reverting changes.
Training on augumented user 59593 24/50 current_auc = 0.5460446247464503
User 59593 AUC after training: 0.545841784989858
User 59593 does not improve AUC. Reverting changes.
Training on augumented user 487 25/50 current_auc = 0.5460446247464503
User 487 AUC after training: 0.5460446247464503
User 487 does not improve AUC. Reverting changes.
Training on augumented user 66641 26/50 current_auc = 0.5460446247464503
User 66641 AUC after training: 0.5456389452332657
User 66641 does not improve AUC. Reverting changes.
Training on augumented user 84283 27/50 current_auc = 0.5460446247464503
User 84283 AUC after training: 0.5452332657200811
User 84283 does not improve AUC. Reverting changes.
Training on augumented user 77298 28/50 current_auc = 0.5460446247464503
User 77298 AUC after training: 0.5446247464503042
User 77298 does not improve AUC. Reverting changes.
Training on augumented user 68706 29/50 current_auc = 0.5460446247464503
User 68706 AUC after training: 0.543002028397566
User 68706 does not improve AUC. Reverting changes.
Training on augumented user 84345 30/50 current_auc = 0.5460446247464503
User 84345 AUC after training: 0.5460446247464503
User 84345 does not improve AUC. Reverting changes.
Training on augumented user 131880 31/50 current_auc = 0.5460446247464503
User 131880 AUC after training: 0.5454361054766734
User 131880 does not improve AUC. Reverting changes.
Training on augumented user 23011 32/50 current_auc = 0.5460446247464503
User 23011 AUC after training: 0.5460446247464502
User 23011 does not improve AUC. Reverting changes.
Training on augumented user 32423 33/50 current_auc = 0.5460446247464503
User 32423 AUC after training: 0.5454361054766733
User 32423 does not improve AUC. Reverting changes.
Training on augumented user 56763 34/50 current_auc = 0.5460446247464503
User 56763 AUC after training: 0.545841784989858
User 56763 does not improve AUC. Reverting changes.
Training on augumented user 129909 35/50 current_auc = 0.5460446247464503
User 129909 AUC after training: 0.5448275862068965
User 129909 does not improve AUC. Reverting changes.
Training on augumented user 137641 36/50 current_auc = 0.5460446247464503
User 137641 AUC after training: 0.5432048681541581
User 137641 does not improve AUC. Reverting changes.
Training on augumented user 105981 37/50 current_auc = 0.5460446247464503
User 105981 AUC after training: 0.5452332657200811
User 105981 does not improve AUC. Reverting changes.
Training on augumented user 73885 38/50 current_auc = 0.5460446247464503
User 73885 AUC after training: 0.5446247464503042
User 73885 does not improve AUC. Reverting changes.
Training on augumented user 62236 39/50 current_auc = 0.5460446247464503
User 62236 AUC after training: 0.5460446247464503
User 62236 does not improve AUC. Reverting changes.
Training on augumented user 130213 40/50 current_auc = 0.5460446247464503
User 130213 AUC after training: 0.5450304259634888
User 130213 does not improve AUC. Reverting changes.
Training on augumented user 120870 41/50 current_auc = 0.5460446247464503
User 120870 AUC after training: 0.5454361054766734
User 120870 does not improve AUC. Reverting changes.
Training on augumented user 8556 42/50 current_auc = 0.5460446247464503
User 8556 AUC after training: 0.5458417849898579
User 8556 does not improve AUC. Reverting changes.
Training on augumented user 79159 43/50 current_auc = 0.5460446247464503
User 79159 AUC after training: 0.5393509127789046
User 79159 does not improve AUC. Reverting changes.
Training on augumented user 9115 44/50 current_auc = 0.5460446247464503
User 9115 AUC after training: 0.545841784989858
User 9115 does not improve AUC. Reverting changes.
Training on augumented user 121937 45/50 current_auc = 0.5460446247464503
User 121937 AUC after training: 0.5446247464503042
User 121937 does not improve AUC. Reverting changes.
Training on augumented user 9880 46/50 current_auc = 0.5460446247464503
User 9880 AUC after training: 0.5446247464503042
User 9880 does not improve AUC. Reverting changes.
Training on augumented user 101471 47/50 current_auc = 0.5460446247464503
User 101471 AUC after training: 0.5452332657200811
User 101471 does not improve AUC. Reverting changes.
Training on augumented user 44249 48/50 current_auc = 0.5460446247464503
User 44249 AUC after training: 0.5454361054766734
User 44249 does not improve AUC. Reverting changes.
Training on augumented user 61852 49/50 current_auc = 0.5460446247464503
User 61852 AUC after training: 0.5456389452332657
User 61852 does not improve AUC. Reverting changes.
[2024-12-02 19:46:27.558831] start test user 115626 236/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:46:28.232321] start test user 115626 236/567 recall augumented users by random, augumented_users = [73015, 101337, 124154, 13690, 59823, 120110, 92496, 75206, 115187, 78188, 10713, 76126, 12982, 27298, 105921, 111103, 39891, 135400, 128815, 111750, 131585, 10707, 137757, 30301, 129502, 30056, 19905, 809, 124436, 14957, 31088, 105326, 115340, 85978, 17161, 70584, 31296, 102126, 70205, 117712, 6033, 124022, 39814, 9995, 22996, 128897, 98381, 93192, 87402, 79775]
[2024-12-02 19:46:28.248152] user = 115626 Cloud 236/567
[2024-12-02 19:46:28.258747] user = 115626 Local 236/567
[2024-12-02 19:46:28.291350] user = 115626 Local+ 236/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:46:30.907154] user = 115626 MPDA- 236/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6547619047619048
Training on augumented user 73015 0/50 current_auc = 0.6547619047619048
User 73015 AUC after training: 0.653061224489796
User 73015 does not improve AUC. Reverting changes.
Training on augumented user 101337 1/50 current_auc = 0.6547619047619048
User 101337 AUC after training: 0.6539115646258504
User 101337 does not improve AUC. Reverting changes.
Training on augumented user 124154 2/50 current_auc = 0.6547619047619048
User 124154 AUC after training: 0.653061224489796
User 124154 does not improve AUC. Reverting changes.
Training on augumented user 13690 3/50 current_auc = 0.6547619047619048
User 13690 AUC after training: 0.653061224489796
User 13690 does not improve AUC. Reverting changes.
Training on augumented user 59823 4/50 current_auc = 0.6547619047619048
User 59823 AUC after training: 0.6556122448979591
User 59823 improves AUC. Keeping the model.
Training on augumented user 120110 5/50 current_auc = 0.6556122448979591
User 120110 AUC after training: 0.6556122448979591
User 120110 does not improve AUC. Reverting changes.
Training on augumented user 92496 6/50 current_auc = 0.6556122448979591
User 92496 AUC after training: 0.6556122448979591
User 92496 does not improve AUC. Reverting changes.
Training on augumented user 75206 7/50 current_auc = 0.6556122448979591
User 75206 AUC after training: 0.6547619047619049
User 75206 does not improve AUC. Reverting changes.
Training on augumented user 115187 8/50 current_auc = 0.6556122448979591
User 115187 AUC after training: 0.6556122448979591
User 115187 does not improve AUC. Reverting changes.
Training on augumented user 78188 9/50 current_auc = 0.6556122448979591
User 78188 AUC after training: 0.6496598639455782
User 78188 does not improve AUC. Reverting changes.
Training on augumented user 10713 10/50 current_auc = 0.6556122448979591
User 10713 AUC after training: 0.6539115646258504
User 10713 does not improve AUC. Reverting changes.
Training on augumented user 76126 11/50 current_auc = 0.6556122448979591
User 76126 AUC after training: 0.6556122448979591
User 76126 does not improve AUC. Reverting changes.
Training on augumented user 12982 12/50 current_auc = 0.6556122448979591
User 12982 AUC after training: 0.6539115646258504
User 12982 does not improve AUC. Reverting changes.
Training on augumented user 27298 13/50 current_auc = 0.6556122448979591
User 27298 AUC after training: 0.6556122448979591
User 27298 does not improve AUC. Reverting changes.
Training on augumented user 105921 14/50 current_auc = 0.6556122448979591
User 105921 AUC after training: 0.657312925170068
User 105921 improves AUC. Keeping the model.
Training on augumented user 111103 15/50 current_auc = 0.657312925170068
User 111103 AUC after training: 0.6522108843537415
User 111103 does not improve AUC. Reverting changes.
Training on augumented user 39891 16/50 current_auc = 0.657312925170068
User 39891 AUC after training: 0.6462585034013606
User 39891 does not improve AUC. Reverting changes.
Training on augumented user 135400 17/50 current_auc = 0.657312925170068
User 135400 AUC after training: 0.6556122448979591
User 135400 does not improve AUC. Reverting changes.
Training on augumented user 128815 18/50 current_auc = 0.657312925170068
User 128815 AUC after training: 0.6547619047619047
User 128815 does not improve AUC. Reverting changes.
Training on augumented user 111750 19/50 current_auc = 0.657312925170068
User 111750 AUC after training: 0.6496598639455782
User 111750 does not improve AUC. Reverting changes.
Training on augumented user 131585 20/50 current_auc = 0.657312925170068
User 131585 AUC after training: 0.6522108843537415
User 131585 does not improve AUC. Reverting changes.
Training on augumented user 10707 21/50 current_auc = 0.657312925170068
User 10707 AUC after training: 0.657312925170068
User 10707 does not improve AUC. Reverting changes.
Training on augumented user 137757 22/50 current_auc = 0.657312925170068
User 137757 AUC after training: 0.653061224489796
User 137757 does not improve AUC. Reverting changes.
Training on augumented user 30301 23/50 current_auc = 0.657312925170068
User 30301 AUC after training: 0.6556122448979591
User 30301 does not improve AUC. Reverting changes.
Training on augumented user 129502 24/50 current_auc = 0.657312925170068
User 129502 AUC after training: 0.6556122448979591
User 129502 does not improve AUC. Reverting changes.
Training on augumented user 30056 25/50 current_auc = 0.657312925170068
User 30056 AUC after training: 0.6556122448979591
User 30056 does not improve AUC. Reverting changes.
Training on augumented user 19905 26/50 current_auc = 0.657312925170068
User 19905 AUC after training: 0.6556122448979591
User 19905 does not improve AUC. Reverting changes.
Training on augumented user 809 27/50 current_auc = 0.657312925170068
User 809 AUC after training: 0.653061224489796
User 809 does not improve AUC. Reverting changes.
Training on augumented user 124436 28/50 current_auc = 0.657312925170068
User 124436 AUC after training: 0.6547619047619047
User 124436 does not improve AUC. Reverting changes.
Training on augumented user 14957 29/50 current_auc = 0.657312925170068
User 14957 AUC after training: 0.657312925170068
User 14957 does not improve AUC. Reverting changes.
Training on augumented user 31088 30/50 current_auc = 0.657312925170068
User 31088 AUC after training: 0.657312925170068
User 31088 does not improve AUC. Reverting changes.
Training on augumented user 105326 31/50 current_auc = 0.657312925170068
User 105326 AUC after training: 0.6556122448979591
User 105326 does not improve AUC. Reverting changes.
Training on augumented user 115340 32/50 current_auc = 0.657312925170068
User 115340 AUC after training: 0.6556122448979591
User 115340 does not improve AUC. Reverting changes.
Training on augumented user 85978 33/50 current_auc = 0.657312925170068
User 85978 AUC after training: 0.6556122448979591
User 85978 does not improve AUC. Reverting changes.
Training on augumented user 17161 34/50 current_auc = 0.657312925170068
User 17161 AUC after training: 0.6479591836734694
User 17161 does not improve AUC. Reverting changes.
Training on augumented user 70584 35/50 current_auc = 0.657312925170068
User 70584 AUC after training: 0.657312925170068
User 70584 does not improve AUC. Reverting changes.
Training on augumented user 31296 36/50 current_auc = 0.657312925170068
User 31296 AUC after training: 0.6539115646258504
User 31296 does not improve AUC. Reverting changes.
Training on augumented user 102126 37/50 current_auc = 0.657312925170068
User 102126 AUC after training: 0.6539115646258504
User 102126 does not improve AUC. Reverting changes.
Training on augumented user 70205 38/50 current_auc = 0.657312925170068
User 70205 AUC after training: 0.6479591836734695
User 70205 does not improve AUC. Reverting changes.
Training on augumented user 117712 39/50 current_auc = 0.657312925170068
User 117712 AUC after training: 0.6539115646258504
User 117712 does not improve AUC. Reverting changes.
Training on augumented user 6033 40/50 current_auc = 0.657312925170068
User 6033 AUC after training: 0.657312925170068
User 6033 does not improve AUC. Reverting changes.
Training on augumented user 124022 41/50 current_auc = 0.657312925170068
User 124022 AUC after training: 0.6556122448979591
User 124022 does not improve AUC. Reverting changes.
Training on augumented user 39814 42/50 current_auc = 0.657312925170068
User 39814 AUC after training: 0.6556122448979591
User 39814 does not improve AUC. Reverting changes.
Training on augumented user 9995 43/50 current_auc = 0.657312925170068
User 9995 AUC after training: 0.657312925170068
User 9995 does not improve AUC. Reverting changes.
Training on augumented user 22996 44/50 current_auc = 0.657312925170068
User 22996 AUC after training: 0.6556122448979591
User 22996 does not improve AUC. Reverting changes.
Training on augumented user 128897 45/50 current_auc = 0.657312925170068
User 128897 AUC after training: 0.6556122448979591
User 128897 does not improve AUC. Reverting changes.
Training on augumented user 98381 46/50 current_auc = 0.657312925170068
User 98381 AUC after training: 0.6556122448979591
User 98381 does not improve AUC. Reverting changes.
Training on augumented user 93192 47/50 current_auc = 0.657312925170068
User 93192 AUC after training: 0.6513605442176871
User 93192 does not improve AUC. Reverting changes.
Training on augumented user 87402 48/50 current_auc = 0.657312925170068
User 87402 AUC after training: 0.6556122448979591
User 87402 does not improve AUC. Reverting changes.
Training on augumented user 79775 49/50 current_auc = 0.657312925170068
User 79775 AUC after training: 0.653061224489796
User 79775 does not improve AUC. Reverting changes.
[2024-12-02 19:46:56.298503] start test user 115686 237/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:46:56.712838] start test user 115686 237/567 recall augumented users by random, augumented_users = [118880, 53662, 108170, 1014, 38816, 20226, 87326, 1208, 36796, 73434, 28280, 94521, 83749, 107060, 95100, 9140, 70369, 50408, 71179, 34212, 16935, 100735, 65070, 88769, 62833, 101757, 82202, 18840, 91654, 81945, 15974, 111246, 15572, 89868, 61715, 126744, 66703, 134684, 15785, 110740, 4506, 46498, 11194, 64776, 41460, 128626, 61257, 83909, 29620, 128475]
[2024-12-02 19:46:56.728410] user = 115686 Cloud 237/567
[2024-12-02 19:46:56.738136] user = 115686 Local 237/567
[2024-12-02 19:46:56.825263] user = 115686 Local+ 237/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:46:59.556040] user = 115686 MPDA- 237/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5555555555555556
Training on augumented user 118880 0/50 current_auc = 0.5555555555555556
User 118880 AUC after training: 0.5555555555555556
User 118880 does not improve AUC. Reverting changes.
Training on augumented user 53662 1/50 current_auc = 0.5555555555555556
User 53662 AUC after training: 0.5555555555555556
User 53662 does not improve AUC. Reverting changes.
Training on augumented user 108170 2/50 current_auc = 0.5555555555555556
User 108170 AUC after training: 0.5555555555555556
User 108170 does not improve AUC. Reverting changes.
Training on augumented user 1014 3/50 current_auc = 0.5555555555555556
User 1014 AUC after training: 0.5555555555555556
User 1014 does not improve AUC. Reverting changes.
Training on augumented user 38816 4/50 current_auc = 0.5555555555555556
User 38816 AUC after training: 0.5555555555555556
User 38816 does not improve AUC. Reverting changes.
Training on augumented user 20226 5/50 current_auc = 0.5555555555555556
User 20226 AUC after training: 0.5555555555555556
User 20226 does not improve AUC. Reverting changes.
Training on augumented user 87326 6/50 current_auc = 0.5555555555555556
User 87326 AUC after training: 0.5555555555555556
User 87326 does not improve AUC. Reverting changes.
Training on augumented user 1208 7/50 current_auc = 0.5555555555555556
User 1208 AUC after training: 0.5555555555555556
User 1208 does not improve AUC. Reverting changes.
Training on augumented user 36796 8/50 current_auc = 0.5555555555555556
User 36796 AUC after training: 0.5555555555555556
User 36796 does not improve AUC. Reverting changes.
Training on augumented user 73434 9/50 current_auc = 0.5555555555555556
User 73434 AUC after training: 0.5555555555555556
User 73434 does not improve AUC. Reverting changes.
Training on augumented user 28280 10/50 current_auc = 0.5555555555555556
User 28280 AUC after training: 0.5555555555555556
User 28280 does not improve AUC. Reverting changes.
Training on augumented user 94521 11/50 current_auc = 0.5555555555555556
User 94521 AUC after training: 0.5555555555555556
User 94521 does not improve AUC. Reverting changes.
Training on augumented user 83749 12/50 current_auc = 0.5555555555555556
User 83749 AUC after training: 0.5555555555555556
User 83749 does not improve AUC. Reverting changes.
Training on augumented user 107060 13/50 current_auc = 0.5555555555555556
User 107060 AUC after training: 0.5555555555555556
User 107060 does not improve AUC. Reverting changes.
Training on augumented user 95100 14/50 current_auc = 0.5555555555555556
User 95100 AUC after training: 0.5555555555555556
User 95100 does not improve AUC. Reverting changes.
Training on augumented user 9140 15/50 current_auc = 0.5555555555555556
User 9140 AUC after training: 0.5555555555555556
User 9140 does not improve AUC. Reverting changes.
Training on augumented user 70369 16/50 current_auc = 0.5555555555555556
User 70369 AUC after training: 0.5555555555555556
User 70369 does not improve AUC. Reverting changes.
Training on augumented user 50408 17/50 current_auc = 0.5555555555555556
User 50408 AUC after training: 0.5555555555555556
User 50408 does not improve AUC. Reverting changes.
Training on augumented user 71179 18/50 current_auc = 0.5555555555555556
User 71179 AUC after training: 0.5555555555555556
User 71179 does not improve AUC. Reverting changes.
Training on augumented user 34212 19/50 current_auc = 0.5555555555555556
User 34212 AUC after training: 0.5555555555555556
User 34212 does not improve AUC. Reverting changes.
Training on augumented user 16935 20/50 current_auc = 0.5555555555555556
User 16935 AUC after training: 0.5555555555555556
User 16935 does not improve AUC. Reverting changes.
Training on augumented user 100735 21/50 current_auc = 0.5555555555555556
User 100735 AUC after training: 0.5555555555555556
User 100735 does not improve AUC. Reverting changes.
Training on augumented user 65070 22/50 current_auc = 0.5555555555555556
User 65070 AUC after training: 0.5555555555555556
User 65070 does not improve AUC. Reverting changes.
Training on augumented user 88769 23/50 current_auc = 0.5555555555555556
User 88769 AUC after training: 0.5555555555555556
User 88769 does not improve AUC. Reverting changes.
Training on augumented user 62833 24/50 current_auc = 0.5555555555555556
User 62833 AUC after training: 0.5555555555555556
User 62833 does not improve AUC. Reverting changes.
Training on augumented user 101757 25/50 current_auc = 0.5555555555555556
User 101757 AUC after training: 0.5555555555555556
User 101757 does not improve AUC. Reverting changes.
Training on augumented user 82202 26/50 current_auc = 0.5555555555555556
User 82202 AUC after training: 0.5555555555555556
User 82202 does not improve AUC. Reverting changes.
Training on augumented user 18840 27/50 current_auc = 0.5555555555555556
User 18840 AUC after training: 0.5555555555555556
User 18840 does not improve AUC. Reverting changes.
Training on augumented user 91654 28/50 current_auc = 0.5555555555555556
User 91654 AUC after training: 0.5555555555555556
User 91654 does not improve AUC. Reverting changes.
Training on augumented user 81945 29/50 current_auc = 0.5555555555555556
User 81945 AUC after training: 0.5555555555555556
User 81945 does not improve AUC. Reverting changes.
Training on augumented user 15974 30/50 current_auc = 0.5555555555555556
User 15974 AUC after training: 0.5555555555555556
User 15974 does not improve AUC. Reverting changes.
Training on augumented user 111246 31/50 current_auc = 0.5555555555555556
User 111246 AUC after training: 0.5555555555555556
User 111246 does not improve AUC. Reverting changes.
Training on augumented user 15572 32/50 current_auc = 0.5555555555555556
User 15572 AUC after training: 0.5555555555555556
User 15572 does not improve AUC. Reverting changes.
Training on augumented user 89868 33/50 current_auc = 0.5555555555555556
User 89868 AUC after training: 0.5555555555555556
User 89868 does not improve AUC. Reverting changes.
Training on augumented user 61715 34/50 current_auc = 0.5555555555555556
User 61715 AUC after training: 0.5555555555555556
User 61715 does not improve AUC. Reverting changes.
Training on augumented user 126744 35/50 current_auc = 0.5555555555555556
User 126744 AUC after training: 0.5555555555555556
User 126744 does not improve AUC. Reverting changes.
Training on augumented user 66703 36/50 current_auc = 0.5555555555555556
User 66703 AUC after training: 0.5555555555555556
User 66703 does not improve AUC. Reverting changes.
Training on augumented user 134684 37/50 current_auc = 0.5555555555555556
User 134684 AUC after training: 0.5555555555555556
User 134684 does not improve AUC. Reverting changes.
Training on augumented user 15785 38/50 current_auc = 0.5555555555555556
User 15785 AUC after training: 0.5555555555555556
User 15785 does not improve AUC. Reverting changes.
Training on augumented user 110740 39/50 current_auc = 0.5555555555555556
User 110740 AUC after training: 0.5555555555555556
User 110740 does not improve AUC. Reverting changes.
Training on augumented user 4506 40/50 current_auc = 0.5555555555555556
User 4506 AUC after training: 0.5555555555555556
User 4506 does not improve AUC. Reverting changes.
Training on augumented user 46498 41/50 current_auc = 0.5555555555555556
User 46498 AUC after training: 0.5555555555555556
User 46498 does not improve AUC. Reverting changes.
Training on augumented user 11194 42/50 current_auc = 0.5555555555555556
User 11194 AUC after training: 0.5555555555555556
User 11194 does not improve AUC. Reverting changes.
Training on augumented user 64776 43/50 current_auc = 0.5555555555555556
User 64776 AUC after training: 0.5555555555555556
User 64776 does not improve AUC. Reverting changes.
Training on augumented user 41460 44/50 current_auc = 0.5555555555555556
User 41460 AUC after training: 0.5555555555555556
User 41460 does not improve AUC. Reverting changes.
Training on augumented user 128626 45/50 current_auc = 0.5555555555555556
User 128626 AUC after training: 0.5555555555555556
User 128626 does not improve AUC. Reverting changes.
Training on augumented user 61257 46/50 current_auc = 0.5555555555555556
User 61257 AUC after training: 0.5555555555555556
User 61257 does not improve AUC. Reverting changes.
Training on augumented user 83909 47/50 current_auc = 0.5555555555555556
User 83909 AUC after training: 0.5555555555555556
User 83909 does not improve AUC. Reverting changes.
Training on augumented user 29620 48/50 current_auc = 0.5555555555555556
User 29620 AUC after training: 0.5555555555555556
User 29620 does not improve AUC. Reverting changes.
Training on augumented user 128475 49/50 current_auc = 0.5555555555555556
User 128475 AUC after training: 0.5555555555555556
User 128475 does not improve AUC. Reverting changes.
[2024-12-02 19:47:28.296853] start test user 115701 238/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:47:29.070445] start test user 115701 238/567 recall augumented users by random, augumented_users = [30853, 34273, 124264, 53491, 48322, 113415, 64666, 58620, 69564, 57219, 132249, 130383, 93726, 107854, 89768, 48148, 13540, 29186, 14026, 85501, 79285, 116836, 100103, 37666, 130075, 129403, 502, 102065, 27155, 55346, 111395, 98590, 46827, 37049, 33881, 102451, 43711, 25086, 13597, 116950, 8064, 41009, 120810, 59685, 43202, 23465, 23583, 30287, 107548, 84141]
[2024-12-02 19:47:29.104742] user = 115701 Cloud 238/567
[2024-12-02 19:47:29.123572] user = 115701 Local 238/567
[2024-12-02 19:47:29.186299] user = 115701 Local+ 238/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:47:31.789372] user = 115701 MPDA- 238/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.53375
Training on augumented user 30853 0/50 current_auc = 0.53375
User 30853 AUC after training: 0.5375
User 30853 improves AUC. Keeping the model.
Training on augumented user 34273 1/50 current_auc = 0.5375
User 34273 AUC after training: 0.5349999999999999
User 34273 does not improve AUC. Reverting changes.
Training on augumented user 124264 2/50 current_auc = 0.5375
User 124264 AUC after training: 0.53875
User 124264 improves AUC. Keeping the model.
Training on augumented user 53491 3/50 current_auc = 0.53875
User 53491 AUC after training: 0.53875
User 53491 does not improve AUC. Reverting changes.
Training on augumented user 48322 4/50 current_auc = 0.53875
User 48322 AUC after training: 0.53625
User 48322 does not improve AUC. Reverting changes.
Training on augumented user 113415 5/50 current_auc = 0.53875
User 113415 AUC after training: 0.5375
User 113415 does not improve AUC. Reverting changes.
Training on augumented user 64666 6/50 current_auc = 0.53875
User 64666 AUC after training: 0.5375
User 64666 does not improve AUC. Reverting changes.
Training on augumented user 58620 7/50 current_auc = 0.53875
User 58620 AUC after training: 0.54
User 58620 improves AUC. Keeping the model.
Training on augumented user 69564 8/50 current_auc = 0.54
User 69564 AUC after training: 0.54
User 69564 does not improve AUC. Reverting changes.
Training on augumented user 57219 9/50 current_auc = 0.54
User 57219 AUC after training: 0.53625
User 57219 does not improve AUC. Reverting changes.
Training on augumented user 132249 10/50 current_auc = 0.54
User 132249 AUC after training: 0.5375
User 132249 does not improve AUC. Reverting changes.
Training on augumented user 130383 11/50 current_auc = 0.54
User 130383 AUC after training: 0.53875
User 130383 does not improve AUC. Reverting changes.
Training on augumented user 93726 12/50 current_auc = 0.54
User 93726 AUC after training: 0.53875
User 93726 does not improve AUC. Reverting changes.
Training on augumented user 107854 13/50 current_auc = 0.54
User 107854 AUC after training: 0.53625
User 107854 does not improve AUC. Reverting changes.
Training on augumented user 89768 14/50 current_auc = 0.54
User 89768 AUC after training: 0.53625
User 89768 does not improve AUC. Reverting changes.
Training on augumented user 48148 15/50 current_auc = 0.54
User 48148 AUC after training: 0.5375
User 48148 does not improve AUC. Reverting changes.
Training on augumented user 13540 16/50 current_auc = 0.54
User 13540 AUC after training: 0.5387500000000001
User 13540 does not improve AUC. Reverting changes.
Training on augumented user 29186 17/50 current_auc = 0.54
User 29186 AUC after training: 0.53625
User 29186 does not improve AUC. Reverting changes.
Training on augumented user 14026 18/50 current_auc = 0.54
User 14026 AUC after training: 0.53875
User 14026 does not improve AUC. Reverting changes.
Training on augumented user 85501 19/50 current_auc = 0.54
User 85501 AUC after training: 0.5375000000000001
User 85501 does not improve AUC. Reverting changes.
Training on augumented user 79285 20/50 current_auc = 0.54
User 79285 AUC after training: 0.53
User 79285 does not improve AUC. Reverting changes.
Training on augumented user 116836 21/50 current_auc = 0.54
User 116836 AUC after training: 0.5375
User 116836 does not improve AUC. Reverting changes.
Training on augumented user 100103 22/50 current_auc = 0.54
User 100103 AUC after training: 0.5349999999999999
User 100103 does not improve AUC. Reverting changes.
Training on augumented user 37666 23/50 current_auc = 0.54
User 37666 AUC after training: 0.5375
User 37666 does not improve AUC. Reverting changes.
Training on augumented user 130075 24/50 current_auc = 0.54
User 130075 AUC after training: 0.53625
User 130075 does not improve AUC. Reverting changes.
Training on augumented user 129403 25/50 current_auc = 0.54
User 129403 AUC after training: 0.53625
User 129403 does not improve AUC. Reverting changes.
Training on augumented user 502 26/50 current_auc = 0.54
User 502 AUC after training: 0.54
User 502 does not improve AUC. Reverting changes.
Training on augumented user 102065 27/50 current_auc = 0.54
User 102065 AUC after training: 0.53875
User 102065 does not improve AUC. Reverting changes.
Training on augumented user 27155 28/50 current_auc = 0.54
User 27155 AUC after training: 0.5387500000000001
User 27155 does not improve AUC. Reverting changes.
Training on augumented user 55346 29/50 current_auc = 0.54
User 55346 AUC after training: 0.54
User 55346 does not improve AUC. Reverting changes.
Training on augumented user 111395 30/50 current_auc = 0.54
User 111395 AUC after training: 0.53625
User 111395 does not improve AUC. Reverting changes.
Training on augumented user 98590 31/50 current_auc = 0.54
User 98590 AUC after training: 0.53875
User 98590 does not improve AUC. Reverting changes.
Training on augumented user 46827 32/50 current_auc = 0.54
User 46827 AUC after training: 0.53625
User 46827 does not improve AUC. Reverting changes.
Training on augumented user 37049 33/50 current_auc = 0.54
User 37049 AUC after training: 0.5375
User 37049 does not improve AUC. Reverting changes.
Training on augumented user 33881 34/50 current_auc = 0.54
User 33881 AUC after training: 0.5349999999999999
User 33881 does not improve AUC. Reverting changes.
Training on augumented user 102451 35/50 current_auc = 0.54
User 102451 AUC after training: 0.535
User 102451 does not improve AUC. Reverting changes.
Training on augumented user 43711 36/50 current_auc = 0.54
User 43711 AUC after training: 0.5375000000000001
User 43711 does not improve AUC. Reverting changes.
Training on augumented user 25086 37/50 current_auc = 0.54
User 25086 AUC after training: 0.5375
User 25086 does not improve AUC. Reverting changes.
Training on augumented user 13597 38/50 current_auc = 0.54
User 13597 AUC after training: 0.5425
User 13597 improves AUC. Keeping the model.
Training on augumented user 116950 39/50 current_auc = 0.5425
User 116950 AUC after training: 0.5412499999999999
User 116950 does not improve AUC. Reverting changes.
Training on augumented user 8064 40/50 current_auc = 0.5425
User 8064 AUC after training: 0.5387500000000001
User 8064 does not improve AUC. Reverting changes.
Training on augumented user 41009 41/50 current_auc = 0.5425
User 41009 AUC after training: 0.54125
User 41009 does not improve AUC. Reverting changes.
Training on augumented user 120810 42/50 current_auc = 0.5425
User 120810 AUC after training: 0.54125
User 120810 does not improve AUC. Reverting changes.
Training on augumented user 59685 43/50 current_auc = 0.5425
User 59685 AUC after training: 0.54
User 59685 does not improve AUC. Reverting changes.
Training on augumented user 43202 44/50 current_auc = 0.5425
User 43202 AUC after training: 0.54125
User 43202 does not improve AUC. Reverting changes.
Training on augumented user 23465 45/50 current_auc = 0.5425
User 23465 AUC after training: 0.53875
User 23465 does not improve AUC. Reverting changes.
Training on augumented user 23583 46/50 current_auc = 0.5425
User 23583 AUC after training: 0.54125
User 23583 does not improve AUC. Reverting changes.
Training on augumented user 30287 47/50 current_auc = 0.5425
User 30287 AUC after training: 0.5375
User 30287 does not improve AUC. Reverting changes.
Training on augumented user 107548 48/50 current_auc = 0.5425
User 107548 AUC after training: 0.54125
User 107548 does not improve AUC. Reverting changes.
Training on augumented user 84141 49/50 current_auc = 0.5425
User 84141 AUC after training: 0.5387500000000001
User 84141 does not improve AUC. Reverting changes.
[2024-12-02 19:48:03.131002] start test user 115702 239/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:48:03.714755] start test user 115702 239/567 recall augumented users by random, augumented_users = [29301, 50821, 28207, 38148, 27601, 129756, 12531, 48636, 43578, 29868, 62494, 117134, 99661, 108552, 112930, 10187, 115839, 125628, 84535, 60790, 76278, 94962, 56579, 138220, 96724, 116330, 49954, 30033, 58212, 61762, 69155, 13551, 31843, 91253, 35146, 26776, 136974, 128345, 30917, 62942, 26405, 31322, 84100, 50785, 87020, 123879, 76326, 72941, 95911, 106858]
[2024-12-02 19:48:03.729691] user = 115702 Cloud 239/567
[2024-12-02 19:48:03.738889] user = 115702 Local 239/567
[2024-12-02 19:48:03.770098] user = 115702 Local+ 239/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:48:05.598897] user = 115702 MPDA- 239/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.64
Training on augumented user 29301 0/50 current_auc = 0.64
User 29301 AUC after training: 0.64
User 29301 does not improve AUC. Reverting changes.
Training on augumented user 50821 1/50 current_auc = 0.64
User 50821 AUC after training: 0.64
User 50821 does not improve AUC. Reverting changes.
Training on augumented user 28207 2/50 current_auc = 0.64
User 28207 AUC after training: 0.64
User 28207 does not improve AUC. Reverting changes.
Training on augumented user 38148 3/50 current_auc = 0.64
User 38148 AUC after training: 0.64
User 38148 does not improve AUC. Reverting changes.
Training on augumented user 27601 4/50 current_auc = 0.64
User 27601 AUC after training: 0.64
User 27601 does not improve AUC. Reverting changes.
Training on augumented user 129756 5/50 current_auc = 0.64
User 129756 AUC after training: 0.64
User 129756 does not improve AUC. Reverting changes.
Training on augumented user 12531 6/50 current_auc = 0.64
User 12531 AUC after training: 0.64
User 12531 does not improve AUC. Reverting changes.
Training on augumented user 48636 7/50 current_auc = 0.64
User 48636 AUC after training: 0.64
User 48636 does not improve AUC. Reverting changes.
Training on augumented user 43578 8/50 current_auc = 0.64
User 43578 AUC after training: 0.64
User 43578 does not improve AUC. Reverting changes.
Training on augumented user 29868 9/50 current_auc = 0.64
User 29868 AUC after training: 0.64
User 29868 does not improve AUC. Reverting changes.
Training on augumented user 62494 10/50 current_auc = 0.64
User 62494 AUC after training: 0.64
User 62494 does not improve AUC. Reverting changes.
Training on augumented user 117134 11/50 current_auc = 0.64
User 117134 AUC after training: 0.64
User 117134 does not improve AUC. Reverting changes.
Training on augumented user 99661 12/50 current_auc = 0.64
User 99661 AUC after training: 0.64
User 99661 does not improve AUC. Reverting changes.
Training on augumented user 108552 13/50 current_auc = 0.64
User 108552 AUC after training: 0.64
User 108552 does not improve AUC. Reverting changes.
Training on augumented user 112930 14/50 current_auc = 0.64
User 112930 AUC after training: 0.64
User 112930 does not improve AUC. Reverting changes.
Training on augumented user 10187 15/50 current_auc = 0.64
User 10187 AUC after training: 0.64
User 10187 does not improve AUC. Reverting changes.
Training on augumented user 115839 16/50 current_auc = 0.64
User 115839 AUC after training: 0.64
User 115839 does not improve AUC. Reverting changes.
Training on augumented user 125628 17/50 current_auc = 0.64
User 125628 AUC after training: 0.64
User 125628 does not improve AUC. Reverting changes.
Training on augumented user 84535 18/50 current_auc = 0.64
User 84535 AUC after training: 0.64
User 84535 does not improve AUC. Reverting changes.
Training on augumented user 60790 19/50 current_auc = 0.64
User 60790 AUC after training: 0.64
User 60790 does not improve AUC. Reverting changes.
Training on augumented user 76278 20/50 current_auc = 0.64
User 76278 AUC after training: 0.64
User 76278 does not improve AUC. Reverting changes.
Training on augumented user 94962 21/50 current_auc = 0.64
User 94962 AUC after training: 0.64
User 94962 does not improve AUC. Reverting changes.
Training on augumented user 56579 22/50 current_auc = 0.64
User 56579 AUC after training: 0.64
User 56579 does not improve AUC. Reverting changes.
Training on augumented user 138220 23/50 current_auc = 0.64
User 138220 AUC after training: 0.64
User 138220 does not improve AUC. Reverting changes.
Training on augumented user 96724 24/50 current_auc = 0.64
User 96724 AUC after training: 0.64
User 96724 does not improve AUC. Reverting changes.
Training on augumented user 116330 25/50 current_auc = 0.64
User 116330 AUC after training: 0.64
User 116330 does not improve AUC. Reverting changes.
Training on augumented user 49954 26/50 current_auc = 0.64
User 49954 AUC after training: 0.64
User 49954 does not improve AUC. Reverting changes.
Training on augumented user 30033 27/50 current_auc = 0.64
User 30033 AUC after training: 0.64
User 30033 does not improve AUC. Reverting changes.
Training on augumented user 58212 28/50 current_auc = 0.64
User 58212 AUC after training: 0.64
User 58212 does not improve AUC. Reverting changes.
Training on augumented user 61762 29/50 current_auc = 0.64
User 61762 AUC after training: 0.64
User 61762 does not improve AUC. Reverting changes.
Training on augumented user 69155 30/50 current_auc = 0.64
User 69155 AUC after training: 0.64
User 69155 does not improve AUC. Reverting changes.
Training on augumented user 13551 31/50 current_auc = 0.64
User 13551 AUC after training: 0.64
User 13551 does not improve AUC. Reverting changes.
Training on augumented user 31843 32/50 current_auc = 0.64
User 31843 AUC after training: 0.64
User 31843 does not improve AUC. Reverting changes.
Training on augumented user 91253 33/50 current_auc = 0.64
User 91253 AUC after training: 0.64
User 91253 does not improve AUC. Reverting changes.
Training on augumented user 35146 34/50 current_auc = 0.64
User 35146 AUC after training: 0.64
User 35146 does not improve AUC. Reverting changes.
Training on augumented user 26776 35/50 current_auc = 0.64
User 26776 AUC after training: 0.64
User 26776 does not improve AUC. Reverting changes.
Training on augumented user 136974 36/50 current_auc = 0.64
User 136974 AUC after training: 0.64
User 136974 does not improve AUC. Reverting changes.
Training on augumented user 128345 37/50 current_auc = 0.64
User 128345 AUC after training: 0.64
User 128345 does not improve AUC. Reverting changes.
Training on augumented user 30917 38/50 current_auc = 0.64
User 30917 AUC after training: 0.64
User 30917 does not improve AUC. Reverting changes.
Training on augumented user 62942 39/50 current_auc = 0.64
User 62942 AUC after training: 0.64
User 62942 does not improve AUC. Reverting changes.
Training on augumented user 26405 40/50 current_auc = 0.64
User 26405 AUC after training: 0.64
User 26405 does not improve AUC. Reverting changes.
Training on augumented user 31322 41/50 current_auc = 0.64
User 31322 AUC after training: 0.64
User 31322 does not improve AUC. Reverting changes.
Training on augumented user 84100 42/50 current_auc = 0.64
User 84100 AUC after training: 0.64
User 84100 does not improve AUC. Reverting changes.
Training on augumented user 50785 43/50 current_auc = 0.64
User 50785 AUC after training: 0.64
User 50785 does not improve AUC. Reverting changes.
Training on augumented user 87020 44/50 current_auc = 0.64
User 87020 AUC after training: 0.64
User 87020 does not improve AUC. Reverting changes.
Training on augumented user 123879 45/50 current_auc = 0.64
User 123879 AUC after training: 0.64
User 123879 does not improve AUC. Reverting changes.
Training on augumented user 76326 46/50 current_auc = 0.64
User 76326 AUC after training: 0.64
User 76326 does not improve AUC. Reverting changes.
Training on augumented user 72941 47/50 current_auc = 0.64
User 72941 AUC after training: 0.64
User 72941 does not improve AUC. Reverting changes.
Training on augumented user 95911 48/50 current_auc = 0.64
User 95911 AUC after training: 0.64
User 95911 does not improve AUC. Reverting changes.
Training on augumented user 106858 49/50 current_auc = 0.64
User 106858 AUC after training: 0.64
User 106858 does not improve AUC. Reverting changes.
[2024-12-02 19:48:30.006174] start test user 115721 240/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:48:30.550869] start test user 115721 240/567 recall augumented users by random, augumented_users = [105136, 60076, 86745, 41280, 79226, 104722, 69187, 101256, 87714, 131839, 123019, 10740, 134207, 42071, 46613, 49738, 55789, 3639, 61321, 4414, 62258, 23502, 132000, 56307, 48374, 88892, 94701, 107335, 20599, 20397, 76884, 57239, 126993, 99897, 87202, 53402, 12774, 7691, 65709, 8192, 106179, 96591, 79179, 75899, 42972, 10409, 64339, 128254, 1137, 66513]
[2024-12-02 19:48:30.566259] user = 115721 Cloud 240/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:48:30.572386] user = 115721 Local 240/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:48:30.740057] user = 115721 Local+ 240/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:48:32.407033] user = 115721 MPDA- 240/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 105136 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105136 AUC after training: 0.5
User 105136 does not improve AUC. Reverting changes.
Training on augumented user 60076 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60076 AUC after training: 0.5
User 60076 does not improve AUC. Reverting changes.
Training on augumented user 86745 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86745 AUC after training: 0.5
User 86745 does not improve AUC. Reverting changes.
Training on augumented user 41280 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41280 AUC after training: 0.5
User 41280 does not improve AUC. Reverting changes.
Training on augumented user 79226 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79226 AUC after training: 0.5
User 79226 does not improve AUC. Reverting changes.
Training on augumented user 104722 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104722 AUC after training: 0.5
User 104722 does not improve AUC. Reverting changes.
Training on augumented user 69187 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 69187 AUC after training: 0.5
User 69187 does not improve AUC. Reverting changes.
Training on augumented user 101256 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101256 AUC after training: 0.5
User 101256 does not improve AUC. Reverting changes.
Training on augumented user 87714 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87714 AUC after training: 0.5
User 87714 does not improve AUC. Reverting changes.
Training on augumented user 131839 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131839 AUC after training: 0.5
User 131839 does not improve AUC. Reverting changes.
Training on augumented user 123019 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123019 AUC after training: 0.5
User 123019 does not improve AUC. Reverting changes.
Training on augumented user 10740 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10740 AUC after training: 0.5
User 10740 does not improve AUC. Reverting changes.
Training on augumented user 134207 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134207 AUC after training: 0.5
User 134207 does not improve AUC. Reverting changes.
Training on augumented user 42071 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42071 AUC after training: 0.5
User 42071 does not improve AUC. Reverting changes.
Training on augumented user 46613 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 46613 AUC after training: 0.5
User 46613 does not improve AUC. Reverting changes.
Training on augumented user 49738 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49738 AUC after training: 0.5
User 49738 does not improve AUC. Reverting changes.
Training on augumented user 55789 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55789 AUC after training: 0.5
User 55789 does not improve AUC. Reverting changes.
Training on augumented user 3639 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3639 AUC after training: 0.5
User 3639 does not improve AUC. Reverting changes.
Training on augumented user 61321 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61321 AUC after training: 0.5
User 61321 does not improve AUC. Reverting changes.
Training on augumented user 4414 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4414 AUC after training: 0.5
User 4414 does not improve AUC. Reverting changes.
Training on augumented user 62258 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62258 AUC after training: 0.5
User 62258 does not improve AUC. Reverting changes.
Training on augumented user 23502 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23502 AUC after training: 0.5
User 23502 does not improve AUC. Reverting changes.
Training on augumented user 132000 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132000 AUC after training: 0.5
User 132000 does not improve AUC. Reverting changes.
Training on augumented user 56307 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56307 AUC after training: 0.5
User 56307 does not improve AUC. Reverting changes.
Training on augumented user 48374 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48374 AUC after training: 0.5
User 48374 does not improve AUC. Reverting changes.
Training on augumented user 88892 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88892 AUC after training: 0.5
User 88892 does not improve AUC. Reverting changes.
Training on augumented user 94701 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94701 AUC after training: 0.5
User 94701 does not improve AUC. Reverting changes.
Training on augumented user 107335 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107335 AUC after training: 0.5
User 107335 does not improve AUC. Reverting changes.
Training on augumented user 20599 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20599 AUC after training: 0.5
User 20599 does not improve AUC. Reverting changes.
Training on augumented user 20397 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20397 AUC after training: 0.5
User 20397 does not improve AUC. Reverting changes.
Training on augumented user 76884 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76884 AUC after training: 0.5
User 76884 does not improve AUC. Reverting changes.
Training on augumented user 57239 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57239 AUC after training: 0.5
User 57239 does not improve AUC. Reverting changes.
Training on augumented user 126993 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126993 AUC after training: 0.5
User 126993 does not improve AUC. Reverting changes.
Training on augumented user 99897 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99897 AUC after training: 0.5
User 99897 does not improve AUC. Reverting changes.
Training on augumented user 87202 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87202 AUC after training: 0.5
User 87202 does not improve AUC. Reverting changes.
Training on augumented user 53402 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53402 AUC after training: 0.5
User 53402 does not improve AUC. Reverting changes.
Training on augumented user 12774 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12774 AUC after training: 0.5
User 12774 does not improve AUC. Reverting changes.
Training on augumented user 7691 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7691 AUC after training: 0.5
User 7691 does not improve AUC. Reverting changes.
Training on augumented user 65709 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 65709 AUC after training: 0.5
User 65709 does not improve AUC. Reverting changes.
Training on augumented user 8192 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8192 AUC after training: 0.5
User 8192 does not improve AUC. Reverting changes.
Training on augumented user 106179 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106179 AUC after training: 0.5
User 106179 does not improve AUC. Reverting changes.
Training on augumented user 96591 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96591 AUC after training: 0.5
User 96591 does not improve AUC. Reverting changes.
Training on augumented user 79179 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79179 AUC after training: 0.5
User 79179 does not improve AUC. Reverting changes.
Training on augumented user 75899 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75899 AUC after training: 0.5
User 75899 does not improve AUC. Reverting changes.
Training on augumented user 42972 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42972 AUC after training: 0.5
User 42972 does not improve AUC. Reverting changes.
Training on augumented user 10409 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10409 AUC after training: 0.5
User 10409 does not improve AUC. Reverting changes.
Training on augumented user 64339 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64339 AUC after training: 0.5
User 64339 does not improve AUC. Reverting changes.
Training on augumented user 128254 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128254 AUC after training: 0.5
User 128254 does not improve AUC. Reverting changes.
Training on augumented user 1137 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1137 AUC after training: 0.5
User 1137 does not improve AUC. Reverting changes.
Training on augumented user 66513 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66513 AUC after training: 0.5
User 66513 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:49:00.058701] start test user 115762 241/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:49:00.902160] start test user 115762 241/567 recall augumented users by random, augumented_users = [33440, 78426, 11011, 135701, 74677, 463, 53672, 9964, 54246, 76335, 67931, 82023, 76185, 110732, 114497, 120980, 122940, 97192, 32167, 134046, 44231, 45865, 91319, 110392, 61469, 98341, 108118, 138215, 130611, 4098, 60527, 72335, 21249, 117347, 39640, 4524, 93302, 94370, 53510, 95557, 115005, 32233, 90734, 7745, 94834, 7431, 764, 135403, 46249, 26872]
[2024-12-02 19:49:00.915630] user = 115762 Cloud 241/567
[2024-12-02 19:49:00.929224] user = 115762 Local 241/567
[2024-12-02 19:49:00.983885] user = 115762 Local+ 241/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:49:03.962818] user = 115762 MPDA- 241/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7244623655913979
Training on augumented user 33440 0/50 current_auc = 0.7244623655913979
User 33440 AUC after training: 0.7244623655913979
User 33440 does not improve AUC. Reverting changes.
Training on augumented user 78426 1/50 current_auc = 0.7244623655913979
User 78426 AUC after training: 0.7204301075268817
User 78426 does not improve AUC. Reverting changes.
Training on augumented user 11011 2/50 current_auc = 0.7244623655913979
User 11011 AUC after training: 0.7244623655913979
User 11011 does not improve AUC. Reverting changes.
Training on augumented user 135701 3/50 current_auc = 0.7244623655913979
User 135701 AUC after training: 0.7231182795698925
User 135701 does not improve AUC. Reverting changes.
Training on augumented user 74677 4/50 current_auc = 0.7244623655913979
User 74677 AUC after training: 0.7217741935483871
User 74677 does not improve AUC. Reverting changes.
Training on augumented user 463 5/50 current_auc = 0.7244623655913979
User 463 AUC after training: 0.7204301075268817
User 463 does not improve AUC. Reverting changes.
Training on augumented user 53672 6/50 current_auc = 0.7244623655913979
User 53672 AUC after training: 0.7231182795698925
User 53672 does not improve AUC. Reverting changes.
Training on augumented user 9964 7/50 current_auc = 0.7244623655913979
User 9964 AUC after training: 0.7217741935483871
User 9964 does not improve AUC. Reverting changes.
Training on augumented user 54246 8/50 current_auc = 0.7244623655913979
User 54246 AUC after training: 0.7244623655913979
User 54246 does not improve AUC. Reverting changes.
Training on augumented user 76335 9/50 current_auc = 0.7244623655913979
User 76335 AUC after training: 0.7244623655913979
User 76335 does not improve AUC. Reverting changes.
Training on augumented user 67931 10/50 current_auc = 0.7244623655913979
User 67931 AUC after training: 0.7150537634408602
User 67931 does not improve AUC. Reverting changes.
Training on augumented user 82023 11/50 current_auc = 0.7244623655913979
User 82023 AUC after training: 0.721774193548387
User 82023 does not improve AUC. Reverting changes.
Training on augumented user 76185 12/50 current_auc = 0.7244623655913979
User 76185 AUC after training: 0.721774193548387
User 76185 does not improve AUC. Reverting changes.
Training on augumented user 110732 13/50 current_auc = 0.7244623655913979
User 110732 AUC after training: 0.7217741935483871
User 110732 does not improve AUC. Reverting changes.
Training on augumented user 114497 14/50 current_auc = 0.7244623655913979
User 114497 AUC after training: 0.7231182795698925
User 114497 does not improve AUC. Reverting changes.
Training on augumented user 120980 15/50 current_auc = 0.7244623655913979
User 120980 AUC after training: 0.7231182795698925
User 120980 does not improve AUC. Reverting changes.
Training on augumented user 122940 16/50 current_auc = 0.7244623655913979
User 122940 AUC after training: 0.7244623655913979
User 122940 does not improve AUC. Reverting changes.
Training on augumented user 97192 17/50 current_auc = 0.7244623655913979
User 97192 AUC after training: 0.7231182795698925
User 97192 does not improve AUC. Reverting changes.
Training on augumented user 32167 18/50 current_auc = 0.7244623655913979
User 32167 AUC after training: 0.7204301075268817
User 32167 does not improve AUC. Reverting changes.
Training on augumented user 134046 19/50 current_auc = 0.7244623655913979
User 134046 AUC after training: 0.721774193548387
User 134046 does not improve AUC. Reverting changes.
Training on augumented user 44231 20/50 current_auc = 0.7244623655913979
User 44231 AUC after training: 0.7231182795698925
User 44231 does not improve AUC. Reverting changes.
Training on augumented user 45865 21/50 current_auc = 0.7244623655913979
User 45865 AUC after training: 0.721774193548387
User 45865 does not improve AUC. Reverting changes.
Training on augumented user 91319 22/50 current_auc = 0.7244623655913979
User 91319 AUC after training: 0.721774193548387
User 91319 does not improve AUC. Reverting changes.
Training on augumented user 110392 23/50 current_auc = 0.7244623655913979
User 110392 AUC after training: 0.717741935483871
User 110392 does not improve AUC. Reverting changes.
Training on augumented user 61469 24/50 current_auc = 0.7244623655913979
User 61469 AUC after training: 0.7231182795698925
User 61469 does not improve AUC. Reverting changes.
Training on augumented user 98341 25/50 current_auc = 0.7244623655913979
User 98341 AUC after training: 0.7231182795698925
User 98341 does not improve AUC. Reverting changes.
Training on augumented user 108118 26/50 current_auc = 0.7244623655913979
User 108118 AUC after training: 0.7231182795698925
User 108118 does not improve AUC. Reverting changes.
Training on augumented user 138215 27/50 current_auc = 0.7244623655913979
User 138215 AUC after training: 0.7244623655913979
User 138215 does not improve AUC. Reverting changes.
Training on augumented user 130611 28/50 current_auc = 0.7244623655913979
User 130611 AUC after training: 0.7244623655913979
User 130611 does not improve AUC. Reverting changes.
Training on augumented user 4098 29/50 current_auc = 0.7244623655913979
User 4098 AUC after training: 0.7244623655913979
User 4098 does not improve AUC. Reverting changes.
Training on augumented user 60527 30/50 current_auc = 0.7244623655913979
User 60527 AUC after training: 0.721774193548387
User 60527 does not improve AUC. Reverting changes.
Training on augumented user 72335 31/50 current_auc = 0.7244623655913979
User 72335 AUC after training: 0.7244623655913979
User 72335 does not improve AUC. Reverting changes.
Training on augumented user 21249 32/50 current_auc = 0.7244623655913979
User 21249 AUC after training: 0.7244623655913979
User 21249 does not improve AUC. Reverting changes.
Training on augumented user 117347 33/50 current_auc = 0.7244623655913979
User 117347 AUC after training: 0.7231182795698925
User 117347 does not improve AUC. Reverting changes.
Training on augumented user 39640 34/50 current_auc = 0.7244623655913979
User 39640 AUC after training: 0.7231182795698925
User 39640 does not improve AUC. Reverting changes.
Training on augumented user 4524 35/50 current_auc = 0.7244623655913979
User 4524 AUC after training: 0.7244623655913979
User 4524 does not improve AUC. Reverting changes.
Training on augumented user 93302 36/50 current_auc = 0.7244623655913979
User 93302 AUC after training: 0.7204301075268817
User 93302 does not improve AUC. Reverting changes.
Training on augumented user 94370 37/50 current_auc = 0.7244623655913979
User 94370 AUC after training: 0.7244623655913978
User 94370 does not improve AUC. Reverting changes.
Training on augumented user 53510 38/50 current_auc = 0.7244623655913979
User 53510 AUC after training: 0.7244623655913979
User 53510 does not improve AUC. Reverting changes.
Training on augumented user 95557 39/50 current_auc = 0.7244623655913979
User 95557 AUC after training: 0.7231182795698925
User 95557 does not improve AUC. Reverting changes.
Training on augumented user 115005 40/50 current_auc = 0.7244623655913979
User 115005 AUC after training: 0.7244623655913979
User 115005 does not improve AUC. Reverting changes.
Training on augumented user 32233 41/50 current_auc = 0.7244623655913979
User 32233 AUC after training: 0.7231182795698925
User 32233 does not improve AUC. Reverting changes.
Training on augumented user 90734 42/50 current_auc = 0.7244623655913979
User 90734 AUC after training: 0.717741935483871
User 90734 does not improve AUC. Reverting changes.
Training on augumented user 7745 43/50 current_auc = 0.7244623655913979
User 7745 AUC after training: 0.721774193548387
User 7745 does not improve AUC. Reverting changes.
Training on augumented user 94834 44/50 current_auc = 0.7244623655913979
User 94834 AUC after training: 0.7258064516129032
User 94834 improves AUC. Keeping the model.
Training on augumented user 7431 45/50 current_auc = 0.7258064516129032
User 7431 AUC after training: 0.7258064516129032
User 7431 does not improve AUC. Reverting changes.
Training on augumented user 764 46/50 current_auc = 0.7258064516129032
User 764 AUC after training: 0.7258064516129032
User 764 does not improve AUC. Reverting changes.
Training on augumented user 135403 47/50 current_auc = 0.7258064516129032
User 135403 AUC after training: 0.721774193548387
User 135403 does not improve AUC. Reverting changes.
Training on augumented user 46249 48/50 current_auc = 0.7258064516129032
User 46249 AUC after training: 0.7244623655913978
User 46249 does not improve AUC. Reverting changes.
Training on augumented user 26872 49/50 current_auc = 0.7258064516129032
User 26872 AUC after training: 0.7258064516129032
User 26872 does not improve AUC. Reverting changes.
[2024-12-02 19:49:31.359330] start test user 115767 242/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:49:31.767549] start test user 115767 242/567 recall augumented users by random, augumented_users = [14929, 11691, 13913, 116434, 88375, 31292, 87257, 31210, 87807, 7305, 76033, 110493, 36693, 21256, 44322, 3909, 104566, 33502, 123232, 133705, 8682, 88127, 137990, 13040, 20728, 133830, 58289, 112094, 33614, 93713, 63016, 114057, 72984, 43703, 105655, 30645, 60829, 28667, 37238, 122421, 58261, 3592, 96211, 20851, 59302, 75048, 75851, 14378, 3269, 2051]
[2024-12-02 19:49:31.782807] user = 115767 Cloud 242/567
[2024-12-02 19:49:31.792172] user = 115767 Local 242/567
[2024-12-02 19:49:31.847258] user = 115767 Local+ 242/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:49:34.701890] user = 115767 MPDA- 242/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.75
Training on augumented user 14929 0/50 current_auc = 0.75
User 14929 AUC after training: 0.75
User 14929 does not improve AUC. Reverting changes.
Training on augumented user 11691 1/50 current_auc = 0.75
User 11691 AUC after training: 0.75
User 11691 does not improve AUC. Reverting changes.
Training on augumented user 13913 2/50 current_auc = 0.75
User 13913 AUC after training: 0.75
User 13913 does not improve AUC. Reverting changes.
Training on augumented user 116434 3/50 current_auc = 0.75
User 116434 AUC after training: 0.75
User 116434 does not improve AUC. Reverting changes.
Training on augumented user 88375 4/50 current_auc = 0.75
User 88375 AUC after training: 0.75
User 88375 does not improve AUC. Reverting changes.
Training on augumented user 31292 5/50 current_auc = 0.75
User 31292 AUC after training: 0.75
User 31292 does not improve AUC. Reverting changes.
Training on augumented user 87257 6/50 current_auc = 0.75
User 87257 AUC after training: 0.75
User 87257 does not improve AUC. Reverting changes.
Training on augumented user 31210 7/50 current_auc = 0.75
User 31210 AUC after training: 0.75
User 31210 does not improve AUC. Reverting changes.
Training on augumented user 87807 8/50 current_auc = 0.75
User 87807 AUC after training: 0.75
User 87807 does not improve AUC. Reverting changes.
Training on augumented user 7305 9/50 current_auc = 0.75
User 7305 AUC after training: 0.75
User 7305 does not improve AUC. Reverting changes.
Training on augumented user 76033 10/50 current_auc = 0.75
User 76033 AUC after training: 0.75
User 76033 does not improve AUC. Reverting changes.
Training on augumented user 110493 11/50 current_auc = 0.75
User 110493 AUC after training: 0.75
User 110493 does not improve AUC. Reverting changes.
Training on augumented user 36693 12/50 current_auc = 0.75
User 36693 AUC after training: 0.75
User 36693 does not improve AUC. Reverting changes.
Training on augumented user 21256 13/50 current_auc = 0.75
User 21256 AUC after training: 0.75
User 21256 does not improve AUC. Reverting changes.
Training on augumented user 44322 14/50 current_auc = 0.75
User 44322 AUC after training: 0.75
User 44322 does not improve AUC. Reverting changes.
Training on augumented user 3909 15/50 current_auc = 0.75
User 3909 AUC after training: 0.75
User 3909 does not improve AUC. Reverting changes.
Training on augumented user 104566 16/50 current_auc = 0.75
User 104566 AUC after training: 0.75
User 104566 does not improve AUC. Reverting changes.
Training on augumented user 33502 17/50 current_auc = 0.75
User 33502 AUC after training: 0.75
User 33502 does not improve AUC. Reverting changes.
Training on augumented user 123232 18/50 current_auc = 0.75
User 123232 AUC after training: 0.75
User 123232 does not improve AUC. Reverting changes.
Training on augumented user 133705 19/50 current_auc = 0.75
User 133705 AUC after training: 0.75
User 133705 does not improve AUC. Reverting changes.
Training on augumented user 8682 20/50 current_auc = 0.75
User 8682 AUC after training: 0.75
User 8682 does not improve AUC. Reverting changes.
Training on augumented user 88127 21/50 current_auc = 0.75
User 88127 AUC after training: 0.75
User 88127 does not improve AUC. Reverting changes.
Training on augumented user 137990 22/50 current_auc = 0.75
User 137990 AUC after training: 0.75
User 137990 does not improve AUC. Reverting changes.
Training on augumented user 13040 23/50 current_auc = 0.75
User 13040 AUC after training: 0.75
User 13040 does not improve AUC. Reverting changes.
Training on augumented user 20728 24/50 current_auc = 0.75
User 20728 AUC after training: 0.75
User 20728 does not improve AUC. Reverting changes.
Training on augumented user 133830 25/50 current_auc = 0.75
User 133830 AUC after training: 0.75
User 133830 does not improve AUC. Reverting changes.
Training on augumented user 58289 26/50 current_auc = 0.75
User 58289 AUC after training: 0.75
User 58289 does not improve AUC. Reverting changes.
Training on augumented user 112094 27/50 current_auc = 0.75
User 112094 AUC after training: 0.75
User 112094 does not improve AUC. Reverting changes.
Training on augumented user 33614 28/50 current_auc = 0.75
User 33614 AUC after training: 0.75
User 33614 does not improve AUC. Reverting changes.
Training on augumented user 93713 29/50 current_auc = 0.75
User 93713 AUC after training: 0.75
User 93713 does not improve AUC. Reverting changes.
Training on augumented user 63016 30/50 current_auc = 0.75
User 63016 AUC after training: 0.75
User 63016 does not improve AUC. Reverting changes.
Training on augumented user 114057 31/50 current_auc = 0.75
User 114057 AUC after training: 0.75
User 114057 does not improve AUC. Reverting changes.
Training on augumented user 72984 32/50 current_auc = 0.75
User 72984 AUC after training: 0.75
User 72984 does not improve AUC. Reverting changes.
Training on augumented user 43703 33/50 current_auc = 0.75
User 43703 AUC after training: 0.75
User 43703 does not improve AUC. Reverting changes.
Training on augumented user 105655 34/50 current_auc = 0.75
User 105655 AUC after training: 0.75
User 105655 does not improve AUC. Reverting changes.
Training on augumented user 30645 35/50 current_auc = 0.75
User 30645 AUC after training: 0.75
User 30645 does not improve AUC. Reverting changes.
Training on augumented user 60829 36/50 current_auc = 0.75
User 60829 AUC after training: 0.75
User 60829 does not improve AUC. Reverting changes.
Training on augumented user 28667 37/50 current_auc = 0.75
User 28667 AUC after training: 0.75
User 28667 does not improve AUC. Reverting changes.
Training on augumented user 37238 38/50 current_auc = 0.75
User 37238 AUC after training: 0.75
User 37238 does not improve AUC. Reverting changes.
Training on augumented user 122421 39/50 current_auc = 0.75
User 122421 AUC after training: 0.75
User 122421 does not improve AUC. Reverting changes.
Training on augumented user 58261 40/50 current_auc = 0.75
User 58261 AUC after training: 0.75
User 58261 does not improve AUC. Reverting changes.
Training on augumented user 3592 41/50 current_auc = 0.75
User 3592 AUC after training: 0.75
User 3592 does not improve AUC. Reverting changes.
Training on augumented user 96211 42/50 current_auc = 0.75
User 96211 AUC after training: 0.75
User 96211 does not improve AUC. Reverting changes.
Training on augumented user 20851 43/50 current_auc = 0.75
User 20851 AUC after training: 0.75
User 20851 does not improve AUC. Reverting changes.
Training on augumented user 59302 44/50 current_auc = 0.75
User 59302 AUC after training: 0.75
User 59302 does not improve AUC. Reverting changes.
Training on augumented user 75048 45/50 current_auc = 0.75
User 75048 AUC after training: 0.75
User 75048 does not improve AUC. Reverting changes.
Training on augumented user 75851 46/50 current_auc = 0.75
User 75851 AUC after training: 0.75
User 75851 does not improve AUC. Reverting changes.
Training on augumented user 14378 47/50 current_auc = 0.75
User 14378 AUC after training: 0.75
User 14378 does not improve AUC. Reverting changes.
Training on augumented user 3269 48/50 current_auc = 0.75
User 3269 AUC after training: 0.75
User 3269 does not improve AUC. Reverting changes.
Training on augumented user 2051 49/50 current_auc = 0.75
User 2051 AUC after training: 0.75
User 2051 does not improve AUC. Reverting changes.
[2024-12-02 19:50:06.564928] start test user 115768 243/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:50:07.317049] start test user 115768 243/567 recall augumented users by random, augumented_users = [94778, 35890, 95014, 7405, 131086, 135699, 13237, 108059, 34370, 18577, 20679, 68392, 29442, 34557, 26824, 122113, 40627, 7990, 18233, 80182, 109513, 84068, 11148, 135115, 59329, 38944, 123833, 56807, 47838, 49353, 39296, 118584, 23992, 111035, 42997, 117872, 38901, 111357, 112595, 75388, 3570, 7260, 40874, 38363, 29463, 111183, 47160, 20648, 12074, 41391]
[2024-12-02 19:50:07.338898] user = 115768 Cloud 243/567
[2024-12-02 19:50:07.353061] user = 115768 Local 243/567
[2024-12-02 19:50:07.386626] user = 115768 Local+ 243/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:50:09.704662] user = 115768 MPDA- 243/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7636363636363637
Training on augumented user 94778 0/50 current_auc = 0.7636363636363637
User 94778 AUC after training: 0.7636363636363637
User 94778 does not improve AUC. Reverting changes.
Training on augumented user 35890 1/50 current_auc = 0.7636363636363637
User 35890 AUC after training: 0.761038961038961
User 35890 does not improve AUC. Reverting changes.
Training on augumented user 95014 2/50 current_auc = 0.7636363636363637
User 95014 AUC after training: 0.7662337662337662
User 95014 improves AUC. Keeping the model.
Training on augumented user 7405 3/50 current_auc = 0.7662337662337662
User 7405 AUC after training: 0.7636363636363637
User 7405 does not improve AUC. Reverting changes.
Training on augumented user 131086 4/50 current_auc = 0.7662337662337662
User 131086 AUC after training: 0.7662337662337662
User 131086 does not improve AUC. Reverting changes.
Training on augumented user 135699 5/50 current_auc = 0.7662337662337662
User 135699 AUC after training: 0.761038961038961
User 135699 does not improve AUC. Reverting changes.
Training on augumented user 13237 6/50 current_auc = 0.7662337662337662
User 13237 AUC after training: 0.7636363636363637
User 13237 does not improve AUC. Reverting changes.
Training on augumented user 108059 7/50 current_auc = 0.7662337662337662
User 108059 AUC after training: 0.7662337662337662
User 108059 does not improve AUC. Reverting changes.
Training on augumented user 34370 8/50 current_auc = 0.7662337662337662
User 34370 AUC after training: 0.7662337662337662
User 34370 does not improve AUC. Reverting changes.
Training on augumented user 18577 9/50 current_auc = 0.7662337662337662
User 18577 AUC after training: 0.7636363636363637
User 18577 does not improve AUC. Reverting changes.
Training on augumented user 20679 10/50 current_auc = 0.7662337662337662
User 20679 AUC after training: 0.7636363636363637
User 20679 does not improve AUC. Reverting changes.
Training on augumented user 68392 11/50 current_auc = 0.7662337662337662
User 68392 AUC after training: 0.7636363636363637
User 68392 does not improve AUC. Reverting changes.
Training on augumented user 29442 12/50 current_auc = 0.7662337662337662
User 29442 AUC after training: 0.7636363636363637
User 29442 does not improve AUC. Reverting changes.
Training on augumented user 34557 13/50 current_auc = 0.7662337662337662
User 34557 AUC after training: 0.761038961038961
User 34557 does not improve AUC. Reverting changes.
Training on augumented user 26824 14/50 current_auc = 0.7662337662337662
User 26824 AUC after training: 0.7636363636363637
User 26824 does not improve AUC. Reverting changes.
Training on augumented user 122113 15/50 current_auc = 0.7662337662337662
User 122113 AUC after training: 0.7636363636363637
User 122113 does not improve AUC. Reverting changes.
Training on augumented user 40627 16/50 current_auc = 0.7662337662337662
User 40627 AUC after training: 0.7636363636363637
User 40627 does not improve AUC. Reverting changes.
Training on augumented user 7990 17/50 current_auc = 0.7662337662337662
User 7990 AUC after training: 0.7662337662337662
User 7990 does not improve AUC. Reverting changes.
Training on augumented user 18233 18/50 current_auc = 0.7662337662337662
User 18233 AUC after training: 0.7688311688311689
User 18233 improves AUC. Keeping the model.
Training on augumented user 80182 19/50 current_auc = 0.7688311688311689
User 80182 AUC after training: 0.7662337662337662
User 80182 does not improve AUC. Reverting changes.
Training on augumented user 109513 20/50 current_auc = 0.7688311688311689
User 109513 AUC after training: 0.7636363636363637
User 109513 does not improve AUC. Reverting changes.
Training on augumented user 84068 21/50 current_auc = 0.7688311688311689
User 84068 AUC after training: 0.7688311688311689
User 84068 does not improve AUC. Reverting changes.
Training on augumented user 11148 22/50 current_auc = 0.7688311688311689
User 11148 AUC after training: 0.7636363636363637
User 11148 does not improve AUC. Reverting changes.
Training on augumented user 135115 23/50 current_auc = 0.7688311688311689
User 135115 AUC after training: 0.7636363636363637
User 135115 does not improve AUC. Reverting changes.
Training on augumented user 59329 24/50 current_auc = 0.7688311688311689
User 59329 AUC after training: 0.7662337662337662
User 59329 does not improve AUC. Reverting changes.
Training on augumented user 38944 25/50 current_auc = 0.7688311688311689
User 38944 AUC after training: 0.7688311688311689
User 38944 does not improve AUC. Reverting changes.
Training on augumented user 123833 26/50 current_auc = 0.7688311688311689
User 123833 AUC after training: 0.7662337662337662
User 123833 does not improve AUC. Reverting changes.
Training on augumented user 56807 27/50 current_auc = 0.7688311688311689
User 56807 AUC after training: 0.7688311688311689
User 56807 does not improve AUC. Reverting changes.
Training on augumented user 47838 28/50 current_auc = 0.7688311688311689
User 47838 AUC after training: 0.7662337662337662
User 47838 does not improve AUC. Reverting changes.
Training on augumented user 49353 29/50 current_auc = 0.7688311688311689
User 49353 AUC after training: 0.7688311688311689
User 49353 does not improve AUC. Reverting changes.
Training on augumented user 39296 30/50 current_auc = 0.7688311688311689
User 39296 AUC after training: 0.7688311688311689
User 39296 does not improve AUC. Reverting changes.
Training on augumented user 118584 31/50 current_auc = 0.7688311688311689
User 118584 AUC after training: 0.7688311688311689
User 118584 does not improve AUC. Reverting changes.
Training on augumented user 23992 32/50 current_auc = 0.7688311688311689
User 23992 AUC after training: 0.761038961038961
User 23992 does not improve AUC. Reverting changes.
Training on augumented user 111035 33/50 current_auc = 0.7688311688311689
User 111035 AUC after training: 0.7688311688311689
User 111035 does not improve AUC. Reverting changes.
Training on augumented user 42997 34/50 current_auc = 0.7688311688311689
User 42997 AUC after training: 0.7636363636363637
User 42997 does not improve AUC. Reverting changes.
Training on augumented user 117872 35/50 current_auc = 0.7688311688311689
User 117872 AUC after training: 0.7662337662337662
User 117872 does not improve AUC. Reverting changes.
Training on augumented user 38901 36/50 current_auc = 0.7688311688311689
User 38901 AUC after training: 0.7662337662337662
User 38901 does not improve AUC. Reverting changes.
Training on augumented user 111357 37/50 current_auc = 0.7688311688311689
User 111357 AUC after training: 0.7714285714285714
User 111357 improves AUC. Keeping the model.
Training on augumented user 112595 38/50 current_auc = 0.7714285714285714
User 112595 AUC after training: 0.7688311688311689
User 112595 does not improve AUC. Reverting changes.
Training on augumented user 75388 39/50 current_auc = 0.7714285714285714
User 75388 AUC after training: 0.7688311688311689
User 75388 does not improve AUC. Reverting changes.
Training on augumented user 3570 40/50 current_auc = 0.7714285714285714
User 3570 AUC after training: 0.7714285714285714
User 3570 does not improve AUC. Reverting changes.
Training on augumented user 7260 41/50 current_auc = 0.7714285714285714
User 7260 AUC after training: 0.7662337662337662
User 7260 does not improve AUC. Reverting changes.
Training on augumented user 40874 42/50 current_auc = 0.7714285714285714
User 40874 AUC after training: 0.7688311688311689
User 40874 does not improve AUC. Reverting changes.
Training on augumented user 38363 43/50 current_auc = 0.7714285714285714
User 38363 AUC after training: 0.7662337662337662
User 38363 does not improve AUC. Reverting changes.
Training on augumented user 29463 44/50 current_auc = 0.7714285714285714
User 29463 AUC after training: 0.7688311688311689
User 29463 does not improve AUC. Reverting changes.
Training on augumented user 111183 45/50 current_auc = 0.7714285714285714
User 111183 AUC after training: 0.7662337662337662
User 111183 does not improve AUC. Reverting changes.
Training on augumented user 47160 46/50 current_auc = 0.7714285714285714
User 47160 AUC after training: 0.7662337662337662
User 47160 does not improve AUC. Reverting changes.
Training on augumented user 20648 47/50 current_auc = 0.7714285714285714
User 20648 AUC after training: 0.7688311688311689
User 20648 does not improve AUC. Reverting changes.
Training on augumented user 12074 48/50 current_auc = 0.7714285714285714
User 12074 AUC after training: 0.7688311688311689
User 12074 does not improve AUC. Reverting changes.
Training on augumented user 41391 49/50 current_auc = 0.7714285714285714
User 41391 AUC after training: 0.7688311688311689
User 41391 does not improve AUC. Reverting changes.
[2024-12-02 19:50:38.353823] start test user 115799 244/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:50:38.942949] start test user 115799 244/567 recall augumented users by random, augumented_users = [128961, 78868, 92590, 97848, 126029, 95501, 14938, 81694, 56143, 70286, 86361, 5658, 61865, 7675, 58087, 50822, 47473, 94349, 47480, 121808, 50898, 97527, 11825, 117084, 100964, 125791, 46718, 62214, 63222, 49276, 32091, 63126, 89311, 39110, 40724, 113189, 18119, 34184, 32690, 133785, 68850, 78934, 138044, 23785, 53199, 12361, 53253, 81872, 22354, 86083]
[2024-12-02 19:50:38.964804] user = 115799 Cloud 244/567
[2024-12-02 19:50:38.988558] user = 115799 Local 244/567
[2024-12-02 19:50:39.029292] user = 115799 Local+ 244/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:50:42.221406] user = 115799 MPDA- 244/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.787878787878788
Training on augumented user 128961 0/50 current_auc = 0.787878787878788
User 128961 AUC after training: 0.787878787878788
User 128961 does not improve AUC. Reverting changes.
Training on augumented user 78868 1/50 current_auc = 0.787878787878788
User 78868 AUC after training: 0.7979797979797979
User 78868 improves AUC. Keeping the model.
Training on augumented user 92590 2/50 current_auc = 0.7979797979797979
User 92590 AUC after training: 0.803030303030303
User 92590 improves AUC. Keeping the model.
Training on augumented user 97848 3/50 current_auc = 0.803030303030303
User 97848 AUC after training: 0.787878787878788
User 97848 does not improve AUC. Reverting changes.
Training on augumented user 126029 4/50 current_auc = 0.803030303030303
User 126029 AUC after training: 0.8080808080808081
User 126029 improves AUC. Keeping the model.
Training on augumented user 95501 5/50 current_auc = 0.8080808080808081
User 95501 AUC after training: 0.803030303030303
User 95501 does not improve AUC. Reverting changes.
Training on augumented user 14938 6/50 current_auc = 0.8080808080808081
User 14938 AUC after training: 0.803030303030303
User 14938 does not improve AUC. Reverting changes.
Training on augumented user 81694 7/50 current_auc = 0.8080808080808081
User 81694 AUC after training: 0.797979797979798
User 81694 does not improve AUC. Reverting changes.
Training on augumented user 56143 8/50 current_auc = 0.8080808080808081
User 56143 AUC after training: 0.803030303030303
User 56143 does not improve AUC. Reverting changes.
Training on augumented user 70286 9/50 current_auc = 0.8080808080808081
User 70286 AUC after training: 0.803030303030303
User 70286 does not improve AUC. Reverting changes.
Training on augumented user 86361 10/50 current_auc = 0.8080808080808081
User 86361 AUC after training: 0.8080808080808081
User 86361 does not improve AUC. Reverting changes.
Training on augumented user 5658 11/50 current_auc = 0.8080808080808081
User 5658 AUC after training: 0.7979797979797979
User 5658 does not improve AUC. Reverting changes.
Training on augumented user 61865 12/50 current_auc = 0.8080808080808081
User 61865 AUC after training: 0.7929292929292929
User 61865 does not improve AUC. Reverting changes.
Training on augumented user 7675 13/50 current_auc = 0.8080808080808081
User 7675 AUC after training: 0.7929292929292929
User 7675 does not improve AUC. Reverting changes.
Training on augumented user 58087 14/50 current_auc = 0.8080808080808081
User 58087 AUC after training: 0.803030303030303
User 58087 does not improve AUC. Reverting changes.
Training on augumented user 50822 15/50 current_auc = 0.8080808080808081
User 50822 AUC after training: 0.8333333333333333
User 50822 improves AUC. Keeping the model.
Training on augumented user 47473 16/50 current_auc = 0.8333333333333333
User 47473 AUC after training: 0.8282828282828283
User 47473 does not improve AUC. Reverting changes.
Training on augumented user 94349 17/50 current_auc = 0.8333333333333333
User 94349 AUC after training: 0.8333333333333333
User 94349 does not improve AUC. Reverting changes.
Training on augumented user 47480 18/50 current_auc = 0.8333333333333333
User 47480 AUC after training: 0.8333333333333333
User 47480 does not improve AUC. Reverting changes.
Training on augumented user 121808 19/50 current_auc = 0.8333333333333333
User 121808 AUC after training: 0.8181818181818181
User 121808 does not improve AUC. Reverting changes.
Training on augumented user 50898 20/50 current_auc = 0.8333333333333333
User 50898 AUC after training: 0.8080808080808081
User 50898 does not improve AUC. Reverting changes.
Training on augumented user 97527 21/50 current_auc = 0.8333333333333333
User 97527 AUC after training: 0.8333333333333333
User 97527 does not improve AUC. Reverting changes.
Training on augumented user 11825 22/50 current_auc = 0.8333333333333333
User 11825 AUC after training: 0.8080808080808081
User 11825 does not improve AUC. Reverting changes.
Training on augumented user 117084 23/50 current_auc = 0.8333333333333333
User 117084 AUC after training: 0.8333333333333333
User 117084 does not improve AUC. Reverting changes.
Training on augumented user 100964 24/50 current_auc = 0.8333333333333333
User 100964 AUC after training: 0.8333333333333333
User 100964 does not improve AUC. Reverting changes.
Training on augumented user 125791 25/50 current_auc = 0.8333333333333333
User 125791 AUC after training: 0.8282828282828283
User 125791 does not improve AUC. Reverting changes.
Training on augumented user 46718 26/50 current_auc = 0.8333333333333333
User 46718 AUC after training: 0.8080808080808081
User 46718 does not improve AUC. Reverting changes.
Training on augumented user 62214 27/50 current_auc = 0.8333333333333333
User 62214 AUC after training: 0.8282828282828283
User 62214 does not improve AUC. Reverting changes.
Training on augumented user 63222 28/50 current_auc = 0.8333333333333333
User 63222 AUC after training: 0.8333333333333333
User 63222 does not improve AUC. Reverting changes.
Training on augumented user 49276 29/50 current_auc = 0.8333333333333333
User 49276 AUC after training: 0.813131313131313
User 49276 does not improve AUC. Reverting changes.
Training on augumented user 32091 30/50 current_auc = 0.8333333333333333
User 32091 AUC after training: 0.8282828282828283
User 32091 does not improve AUC. Reverting changes.
Training on augumented user 63126 31/50 current_auc = 0.8333333333333333
User 63126 AUC after training: 0.8282828282828283
User 63126 does not improve AUC. Reverting changes.
Training on augumented user 89311 32/50 current_auc = 0.8333333333333333
User 89311 AUC after training: 0.8282828282828283
User 89311 does not improve AUC. Reverting changes.
Training on augumented user 39110 33/50 current_auc = 0.8333333333333333
User 39110 AUC after training: 0.8181818181818181
User 39110 does not improve AUC. Reverting changes.
Training on augumented user 40724 34/50 current_auc = 0.8333333333333333
User 40724 AUC after training: 0.8282828282828283
User 40724 does not improve AUC. Reverting changes.
Training on augumented user 113189 35/50 current_auc = 0.8333333333333333
User 113189 AUC after training: 0.8333333333333333
User 113189 does not improve AUC. Reverting changes.
Training on augumented user 18119 36/50 current_auc = 0.8333333333333333
User 18119 AUC after training: 0.8181818181818181
User 18119 does not improve AUC. Reverting changes.
Training on augumented user 34184 37/50 current_auc = 0.8333333333333333
User 34184 AUC after training: 0.8181818181818181
User 34184 does not improve AUC. Reverting changes.
Training on augumented user 32690 38/50 current_auc = 0.8333333333333333
User 32690 AUC after training: 0.8333333333333333
User 32690 does not improve AUC. Reverting changes.
Training on augumented user 133785 39/50 current_auc = 0.8333333333333333
User 133785 AUC after training: 0.8282828282828283
User 133785 does not improve AUC. Reverting changes.
Training on augumented user 68850 40/50 current_auc = 0.8333333333333333
User 68850 AUC after training: 0.8333333333333333
User 68850 does not improve AUC. Reverting changes.
Training on augumented user 78934 41/50 current_auc = 0.8333333333333333
User 78934 AUC after training: 0.8333333333333333
User 78934 does not improve AUC. Reverting changes.
Training on augumented user 138044 42/50 current_auc = 0.8333333333333333
User 138044 AUC after training: 0.8181818181818181
User 138044 does not improve AUC. Reverting changes.
Training on augumented user 23785 43/50 current_auc = 0.8333333333333333
User 23785 AUC after training: 0.8333333333333333
User 23785 does not improve AUC. Reverting changes.
Training on augumented user 53199 44/50 current_auc = 0.8333333333333333
User 53199 AUC after training: 0.8181818181818181
User 53199 does not improve AUC. Reverting changes.
Training on augumented user 12361 45/50 current_auc = 0.8333333333333333
User 12361 AUC after training: 0.8282828282828283
User 12361 does not improve AUC. Reverting changes.
Training on augumented user 53253 46/50 current_auc = 0.8333333333333333
User 53253 AUC after training: 0.8282828282828283
User 53253 does not improve AUC. Reverting changes.
Training on augumented user 81872 47/50 current_auc = 0.8333333333333333
User 81872 AUC after training: 0.8181818181818181
User 81872 does not improve AUC. Reverting changes.
Training on augumented user 22354 48/50 current_auc = 0.8333333333333333
User 22354 AUC after training: 0.803030303030303
User 22354 does not improve AUC. Reverting changes.
Training on augumented user 86083 49/50 current_auc = 0.8333333333333333
User 86083 AUC after training: 0.8282828282828283
User 86083 does not improve AUC. Reverting changes.
[2024-12-02 19:51:10.132328] start test user 115829 245/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:51:10.926197] start test user 115829 245/567 recall augumented users by random, augumented_users = [80073, 109113, 23613, 113703, 77740, 50805, 125360, 49009, 57328, 60472, 55318, 74869, 110395, 117213, 92143, 116313, 81134, 22184, 62951, 89394, 86934, 115463, 77779, 134520, 12899, 10905, 98075, 58383, 19813, 75659, 183, 8580, 42765, 97721, 58277, 64728, 137651, 7507, 5358, 82340, 40173, 112998, 114724, 121124, 100809, 69403, 84132, 15631, 85323, 73713]
[2024-12-02 19:51:10.951493] user = 115829 Cloud 245/567
[2024-12-02 19:51:10.970389] user = 115829 Local 245/567
[2024-12-02 19:51:11.220664] user = 115829 Local+ 245/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:51:13.504259] user = 115829 MPDA- 245/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6344086021505376
Training on augumented user 80073 0/50 current_auc = 0.6344086021505376
User 80073 AUC after training: 0.6346843121036669
User 80073 improves AUC. Keeping the model.
Training on augumented user 109113 1/50 current_auc = 0.6346843121036669
User 109113 AUC after training: 0.6349600220567962
User 109113 improves AUC. Keeping the model.
Training on augumented user 23613 2/50 current_auc = 0.6349600220567962
User 23613 AUC after training: 0.6352357320099256
User 23613 improves AUC. Keeping the model.
Training on augumented user 113703 3/50 current_auc = 0.6352357320099256
User 113703 AUC after training: 0.6363385718224427
User 113703 improves AUC. Keeping the model.
Training on augumented user 77740 4/50 current_auc = 0.6363385718224427
User 77740 AUC after training: 0.6360628618693134
User 77740 does not improve AUC. Reverting changes.
Training on augumented user 50805 5/50 current_auc = 0.6363385718224427
User 50805 AUC after training: 0.6360628618693135
User 50805 does not improve AUC. Reverting changes.
Training on augumented user 125360 6/50 current_auc = 0.6363385718224427
User 125360 AUC after training: 0.6355114419630549
User 125360 does not improve AUC. Reverting changes.
Training on augumented user 49009 7/50 current_auc = 0.6363385718224427
User 49009 AUC after training: 0.6379928315412187
User 49009 improves AUC. Keeping the model.
Training on augumented user 57328 8/50 current_auc = 0.6379928315412187
User 57328 AUC after training: 0.6363385718224428
User 57328 does not improve AUC. Reverting changes.
Training on augumented user 60472 9/50 current_auc = 0.6379928315412187
User 60472 AUC after training: 0.6360628618693135
User 60472 does not improve AUC. Reverting changes.
Training on augumented user 55318 10/50 current_auc = 0.6379928315412187
User 55318 AUC after training: 0.6371657016818307
User 55318 does not improve AUC. Reverting changes.
Training on augumented user 74869 11/50 current_auc = 0.6379928315412187
User 74869 AUC after training: 0.6366142817755721
User 74869 does not improve AUC. Reverting changes.
Training on augumented user 110395 12/50 current_auc = 0.6379928315412187
User 110395 AUC after training: 0.6346843121036669
User 110395 does not improve AUC. Reverting changes.
Training on augumented user 117213 13/50 current_auc = 0.6379928315412187
User 117213 AUC after training: 0.6377171215880892
User 117213 does not improve AUC. Reverting changes.
Training on augumented user 92143 14/50 current_auc = 0.6379928315412187
User 92143 AUC after training: 0.6377171215880894
User 92143 does not improve AUC. Reverting changes.
Training on augumented user 116313 15/50 current_auc = 0.6379928315412187
User 116313 AUC after training: 0.6366142817755721
User 116313 does not improve AUC. Reverting changes.
Training on augumented user 81134 16/50 current_auc = 0.6379928315412187
User 81134 AUC after training: 0.6377171215880894
User 81134 does not improve AUC. Reverting changes.
Training on augumented user 22184 17/50 current_auc = 0.6379928315412187
User 22184 AUC after training: 0.6388199614006065
User 22184 improves AUC. Keeping the model.
Training on augumented user 62951 18/50 current_auc = 0.6388199614006065
User 62951 AUC after training: 0.6396470912599945
User 62951 improves AUC. Keeping the model.
Training on augumented user 89394 19/50 current_auc = 0.6396470912599945
User 89394 AUC after training: 0.640198511166253
User 89394 improves AUC. Keeping the model.
Training on augumented user 86934 20/50 current_auc = 0.640198511166253
User 86934 AUC after training: 0.6399228012131237
User 86934 does not improve AUC. Reverting changes.
Training on augumented user 115463 21/50 current_auc = 0.640198511166253
User 115463 AUC after training: 0.638268541494348
User 115463 does not improve AUC. Reverting changes.
Training on augumented user 77779 22/50 current_auc = 0.640198511166253
User 77779 AUC after training: 0.6399228012131238
User 77779 does not improve AUC. Reverting changes.
Training on augumented user 134520 23/50 current_auc = 0.640198511166253
User 134520 AUC after training: 0.6399228012131238
User 134520 does not improve AUC. Reverting changes.
Training on augumented user 12899 24/50 current_auc = 0.640198511166253
User 12899 AUC after training: 0.6407499310725118
User 12899 improves AUC. Keeping the model.
Training on augumented user 10905 25/50 current_auc = 0.6407499310725118
User 10905 AUC after training: 0.6401985111662531
User 10905 does not improve AUC. Reverting changes.
Training on augumented user 98075 26/50 current_auc = 0.6407499310725118
User 98075 AUC after training: 0.6399228012131238
User 98075 does not improve AUC. Reverting changes.
Training on augumented user 58383 27/50 current_auc = 0.6407499310725118
User 58383 AUC after training: 0.6404742211193823
User 58383 does not improve AUC. Reverting changes.
Training on augumented user 19813 28/50 current_auc = 0.6407499310725118
User 19813 AUC after training: 0.6385442514474772
User 19813 does not improve AUC. Reverting changes.
Training on augumented user 75659 29/50 current_auc = 0.6407499310725118
User 75659 AUC after training: 0.6401985111662531
User 75659 does not improve AUC. Reverting changes.
Training on augumented user 183 30/50 current_auc = 0.6407499310725118
User 183 AUC after training: 0.6410256410256411
User 183 improves AUC. Keeping the model.
Training on augumented user 8580 31/50 current_auc = 0.6410256410256411
User 8580 AUC after training: 0.6407499310725118
User 8580 does not improve AUC. Reverting changes.
Training on augumented user 42765 32/50 current_auc = 0.6410256410256411
User 42765 AUC after training: 0.6404742211193823
User 42765 does not improve AUC. Reverting changes.
Training on augumented user 97721 33/50 current_auc = 0.6410256410256411
User 97721 AUC after training: 0.641025641025641
User 97721 does not improve AUC. Reverting changes.
Training on augumented user 58277 34/50 current_auc = 0.6410256410256411
User 58277 AUC after training: 0.6388199614006065
User 58277 does not improve AUC. Reverting changes.
Training on augumented user 64728 35/50 current_auc = 0.6410256410256411
User 64728 AUC after training: 0.6410256410256411
User 64728 does not improve AUC. Reverting changes.
Training on augumented user 137651 36/50 current_auc = 0.6410256410256411
User 137651 AUC after training: 0.6407499310725118
User 137651 does not improve AUC. Reverting changes.
Training on augumented user 7507 37/50 current_auc = 0.6410256410256411
User 7507 AUC after training: 0.6407499310725118
User 7507 does not improve AUC. Reverting changes.
Training on augumented user 5358 38/50 current_auc = 0.6410256410256411
User 5358 AUC after training: 0.6418527708850289
User 5358 improves AUC. Keeping the model.
Training on augumented user 82340 39/50 current_auc = 0.6418527708850289
User 82340 AUC after training: 0.6393713813068651
User 82340 does not improve AUC. Reverting changes.
Training on augumented user 40173 40/50 current_auc = 0.6418527708850289
User 40173 AUC after training: 0.6407499310725118
User 40173 does not improve AUC. Reverting changes.
Training on augumented user 112998 41/50 current_auc = 0.6418527708850289
User 112998 AUC after training: 0.6410256410256411
User 112998 does not improve AUC. Reverting changes.
Training on augumented user 114724 42/50 current_auc = 0.6418527708850289
User 114724 AUC after training: 0.6407499310725118
User 114724 does not improve AUC. Reverting changes.
Training on augumented user 121124 43/50 current_auc = 0.6418527708850289
User 121124 AUC after training: 0.6404742211193825
User 121124 does not improve AUC. Reverting changes.
Training on augumented user 100809 44/50 current_auc = 0.6418527708850289
User 100809 AUC after training: 0.6399228012131238
User 100809 does not improve AUC. Reverting changes.
Training on augumented user 69403 45/50 current_auc = 0.6418527708850289
User 69403 AUC after training: 0.6393713813068652
User 69403 does not improve AUC. Reverting changes.
Training on augumented user 84132 46/50 current_auc = 0.6418527708850289
User 84132 AUC after training: 0.6401985111662531
User 84132 does not improve AUC. Reverting changes.
Training on augumented user 15631 47/50 current_auc = 0.6418527708850289
User 15631 AUC after training: 0.6396470912599944
User 15631 does not improve AUC. Reverting changes.
Training on augumented user 85323 48/50 current_auc = 0.6418527708850289
User 85323 AUC after training: 0.6407499310725118
User 85323 does not improve AUC. Reverting changes.
Training on augumented user 73713 49/50 current_auc = 0.6418527708850289
User 73713 AUC after training: 0.6393713813068651
User 73713 does not improve AUC. Reverting changes.
[2024-12-02 19:51:46.805805] start test user 115852 246/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:51:47.358282] start test user 115852 246/567 recall augumented users by random, augumented_users = [14713, 28584, 48833, 130730, 83157, 118446, 114544, 123001, 104843, 64303, 116954, 57283, 9991, 28911, 37821, 15834, 8238, 11236, 66310, 29464, 31526, 8900, 108413, 70275, 15741, 1783, 63293, 38667, 30023, 17381, 118724, 19768, 113361, 95517, 19845, 30130, 131603, 119890, 104043, 78225, 83956, 103760, 93892, 66162, 92047, 66274, 62676, 133137, 86802, 116366]
[2024-12-02 19:51:47.388299] user = 115852 Cloud 246/567
[2024-12-02 19:51:47.409251] user = 115852 Local 246/567
[2024-12-02 19:51:47.617089] user = 115852 Local+ 246/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:51:50.516055] user = 115852 MPDA- 246/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5687645687645688
Training on augumented user 14713 0/50 current_auc = 0.5687645687645688
User 14713 AUC after training: 0.5681818181818181
User 14713 does not improve AUC. Reverting changes.
Training on augumented user 28584 1/50 current_auc = 0.5687645687645688
User 28584 AUC after training: 0.5684731934731935
User 28584 does not improve AUC. Reverting changes.
Training on augumented user 48833 2/50 current_auc = 0.5687645687645688
User 48833 AUC after training: 0.5684731934731935
User 48833 does not improve AUC. Reverting changes.
Training on augumented user 130730 3/50 current_auc = 0.5687645687645688
User 130730 AUC after training: 0.5678904428904429
User 130730 does not improve AUC. Reverting changes.
Training on augumented user 83157 4/50 current_auc = 0.5687645687645688
User 83157 AUC after training: 0.5681818181818181
User 83157 does not improve AUC. Reverting changes.
Training on augumented user 118446 5/50 current_auc = 0.5687645687645688
User 118446 AUC after training: 0.5693473193473193
User 118446 improves AUC. Keeping the model.
Training on augumented user 114544 6/50 current_auc = 0.5693473193473193
User 114544 AUC after training: 0.5690559440559441
User 114544 does not improve AUC. Reverting changes.
Training on augumented user 123001 7/50 current_auc = 0.5693473193473193
User 123001 AUC after training: 0.5696386946386947
User 123001 improves AUC. Keeping the model.
Training on augumented user 104843 8/50 current_auc = 0.5696386946386947
User 104843 AUC after training: 0.5696386946386947
User 104843 does not improve AUC. Reverting changes.
Training on augumented user 64303 9/50 current_auc = 0.5696386946386947
User 64303 AUC after training: 0.56993006993007
User 64303 improves AUC. Keeping the model.
Training on augumented user 116954 10/50 current_auc = 0.56993006993007
User 116954 AUC after training: 0.5699300699300699
User 116954 does not improve AUC. Reverting changes.
Training on augumented user 57283 11/50 current_auc = 0.56993006993007
User 57283 AUC after training: 0.5696386946386947
User 57283 does not improve AUC. Reverting changes.
Training on augumented user 9991 12/50 current_auc = 0.56993006993007
User 9991 AUC after training: 0.5693473193473193
User 9991 does not improve AUC. Reverting changes.
Training on augumented user 28911 13/50 current_auc = 0.56993006993007
User 28911 AUC after training: 0.5693473193473193
User 28911 does not improve AUC. Reverting changes.
Training on augumented user 37821 14/50 current_auc = 0.56993006993007
User 37821 AUC after training: 0.5696386946386947
User 37821 does not improve AUC. Reverting changes.
Training on augumented user 15834 15/50 current_auc = 0.56993006993007
User 15834 AUC after training: 0.5696386946386947
User 15834 does not improve AUC. Reverting changes.
Training on augumented user 8238 16/50 current_auc = 0.56993006993007
User 8238 AUC after training: 0.569055944055944
User 8238 does not improve AUC. Reverting changes.
Training on augumented user 11236 17/50 current_auc = 0.56993006993007
User 11236 AUC after training: 0.5702214452214452
User 11236 improves AUC. Keeping the model.
Training on augumented user 66310 18/50 current_auc = 0.5702214452214452
User 66310 AUC after training: 0.5687645687645688
User 66310 does not improve AUC. Reverting changes.
Training on augumented user 29464 19/50 current_auc = 0.5702214452214452
User 29464 AUC after training: 0.5678904428904428
User 29464 does not improve AUC. Reverting changes.
Training on augumented user 31526 20/50 current_auc = 0.5702214452214452
User 31526 AUC after training: 0.5705128205128205
User 31526 improves AUC. Keeping the model.
Training on augumented user 8900 21/50 current_auc = 0.5705128205128205
User 8900 AUC after training: 0.5693473193473193
User 8900 does not improve AUC. Reverting changes.
Training on augumented user 108413 22/50 current_auc = 0.5705128205128205
User 108413 AUC after training: 0.5708041958041958
User 108413 improves AUC. Keeping the model.
Training on augumented user 70275 23/50 current_auc = 0.5708041958041958
User 70275 AUC after training: 0.5696386946386947
User 70275 does not improve AUC. Reverting changes.
Training on augumented user 15741 24/50 current_auc = 0.5708041958041958
User 15741 AUC after training: 0.5708041958041958
User 15741 does not improve AUC. Reverting changes.
Training on augumented user 1783 25/50 current_auc = 0.5708041958041958
User 1783 AUC after training: 0.56993006993007
User 1783 does not improve AUC. Reverting changes.
Training on augumented user 63293 26/50 current_auc = 0.5708041958041958
User 63293 AUC after training: 0.5690559440559441
User 63293 does not improve AUC. Reverting changes.
Training on augumented user 38667 27/50 current_auc = 0.5708041958041958
User 38667 AUC after training: 0.5690559440559441
User 38667 does not improve AUC. Reverting changes.
Training on augumented user 30023 28/50 current_auc = 0.5708041958041958
User 30023 AUC after training: 0.56993006993007
User 30023 does not improve AUC. Reverting changes.
Training on augumented user 17381 29/50 current_auc = 0.5708041958041958
User 17381 AUC after training: 0.5696386946386947
User 17381 does not improve AUC. Reverting changes.
Training on augumented user 118724 30/50 current_auc = 0.5708041958041958
User 118724 AUC after training: 0.5708041958041958
User 118724 does not improve AUC. Reverting changes.
Training on augumented user 19768 31/50 current_auc = 0.5708041958041958
User 19768 AUC after training: 0.5708041958041958
User 19768 does not improve AUC. Reverting changes.
Training on augumented user 113361 32/50 current_auc = 0.5708041958041958
User 113361 AUC after training: 0.5684731934731935
User 113361 does not improve AUC. Reverting changes.
Training on augumented user 95517 33/50 current_auc = 0.5708041958041958
User 95517 AUC after training: 0.5702214452214452
User 95517 does not improve AUC. Reverting changes.
Training on augumented user 19845 34/50 current_auc = 0.5708041958041958
User 19845 AUC after training: 0.5705128205128205
User 19845 does not improve AUC. Reverting changes.
Training on augumented user 30130 35/50 current_auc = 0.5708041958041958
User 30130 AUC after training: 0.5675990675990675
User 30130 does not improve AUC. Reverting changes.
Training on augumented user 131603 36/50 current_auc = 0.5708041958041958
User 131603 AUC after training: 0.5690559440559441
User 131603 does not improve AUC. Reverting changes.
Training on augumented user 119890 37/50 current_auc = 0.5708041958041958
User 119890 AUC after training: 0.5690559440559441
User 119890 does not improve AUC. Reverting changes.
Training on augumented user 104043 38/50 current_auc = 0.5708041958041958
User 104043 AUC after training: 0.5681818181818181
User 104043 does not improve AUC. Reverting changes.
Training on augumented user 78225 39/50 current_auc = 0.5708041958041958
User 78225 AUC after training: 0.5684731934731935
User 78225 does not improve AUC. Reverting changes.
Training on augumented user 83956 40/50 current_auc = 0.5708041958041958
User 83956 AUC after training: 0.569055944055944
User 83956 does not improve AUC. Reverting changes.
Training on augumented user 103760 41/50 current_auc = 0.5708041958041958
User 103760 AUC after training: 0.5693473193473193
User 103760 does not improve AUC. Reverting changes.
Training on augumented user 93892 42/50 current_auc = 0.5708041958041958
User 93892 AUC after training: 0.5690559440559441
User 93892 does not improve AUC. Reverting changes.
Training on augumented user 66162 43/50 current_auc = 0.5708041958041958
User 66162 AUC after training: 0.5713869463869463
User 66162 improves AUC. Keeping the model.
Training on augumented user 92047 44/50 current_auc = 0.5713869463869463
User 92047 AUC after training: 0.5696386946386947
User 92047 does not improve AUC. Reverting changes.
Training on augumented user 66274 45/50 current_auc = 0.5713869463869463
User 66274 AUC after training: 0.5705128205128205
User 66274 does not improve AUC. Reverting changes.
Training on augumented user 62676 46/50 current_auc = 0.5713869463869463
User 62676 AUC after training: 0.5690559440559441
User 62676 does not improve AUC. Reverting changes.
Training on augumented user 133137 47/50 current_auc = 0.5713869463869463
User 133137 AUC after training: 0.5702214452214452
User 133137 does not improve AUC. Reverting changes.
Training on augumented user 86802 48/50 current_auc = 0.5713869463869463
User 86802 AUC after training: 0.5705128205128205
User 86802 does not improve AUC. Reverting changes.
Training on augumented user 116366 49/50 current_auc = 0.5713869463869463
User 116366 AUC after training: 0.5693473193473193
User 116366 does not improve AUC. Reverting changes.
[2024-12-02 19:52:21.247401] start test user 115870 247/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:52:21.795308] start test user 115870 247/567 recall augumented users by random, augumented_users = [1633, 9118, 34770, 115151, 21040, 118887, 18575, 18485, 103000, 85049, 113157, 51836, 129511, 113515, 102683, 42150, 137560, 115444, 122068, 44531, 90131, 98247, 30027, 113143, 105124, 92511, 23658, 27881, 11808, 84337, 68786, 106463, 79537, 10111, 88832, 72854, 83058, 71496, 95441, 41456, 54489, 56267, 51803, 132369, 109048, 51822, 133210, 83934, 79601, 106190]
[2024-12-02 19:52:21.811939] user = 115870 Cloud 247/567
[2024-12-02 19:52:21.828808] user = 115870 Local 247/567
[2024-12-02 19:52:22.024558] user = 115870 Local+ 247/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:52:24.644607] user = 115870 MPDA- 247/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7351081191350469
Training on augumented user 1633 0/50 current_auc = 0.7351081191350469
User 1633 AUC after training: 0.7349041207670339
User 1633 does not improve AUC. Reverting changes.
Training on augumented user 9118 1/50 current_auc = 0.7351081191350469
User 9118 AUC after training: 0.7342921256629946
User 9118 does not improve AUC. Reverting changes.
Training on augumented user 34770 2/50 current_auc = 0.7351081191350469
User 34770 AUC after training: 0.7337821297429621
User 34770 does not improve AUC. Reverting changes.
Training on augumented user 115151 3/50 current_auc = 0.7351081191350469
User 115151 AUC after training: 0.7351081191350469
User 115151 does not improve AUC. Reverting changes.
Training on augumented user 21040 4/50 current_auc = 0.7351081191350469
User 21040 AUC after training: 0.7347001223990208
User 21040 does not improve AUC. Reverting changes.
Training on augumented user 118887 5/50 current_auc = 0.7351081191350469
User 118887 AUC after training: 0.7339861281109752
User 118887 does not improve AUC. Reverting changes.
Training on augumented user 18575 6/50 current_auc = 0.7351081191350469
User 18575 AUC after training: 0.7349041207670339
User 18575 does not improve AUC. Reverting changes.
Training on augumented user 18485 7/50 current_auc = 0.7351081191350469
User 18485 AUC after training: 0.7344961240310077
User 18485 does not improve AUC. Reverting changes.
Training on augumented user 103000 8/50 current_auc = 0.7351081191350469
User 103000 AUC after training: 0.7358221134230927
User 103000 improves AUC. Keeping the model.
Training on augumented user 85049 9/50 current_auc = 0.7358221134230927
User 85049 AUC after training: 0.7354141166870665
User 85049 does not improve AUC. Reverting changes.
Training on augumented user 113157 10/50 current_auc = 0.7358221134230927
User 113157 AUC after training: 0.7350061199510405
User 113157 does not improve AUC. Reverting changes.
Training on augumented user 51836 11/50 current_auc = 0.7358221134230927
User 51836 AUC after training: 0.7358221134230927
User 51836 does not improve AUC. Reverting changes.
Training on augumented user 129511 12/50 current_auc = 0.7358221134230927
User 129511 AUC after training: 0.7347001223990208
User 129511 does not improve AUC. Reverting changes.
Training on augumented user 113515 13/50 current_auc = 0.7358221134230927
User 113515 AUC after training: 0.7343941248470012
User 113515 does not improve AUC. Reverting changes.
Training on augumented user 102683 14/50 current_auc = 0.7358221134230927
User 102683 AUC after training: 0.7350061199510404
User 102683 does not improve AUC. Reverting changes.
Training on augumented user 42150 15/50 current_auc = 0.7358221134230927
User 42150 AUC after training: 0.7339861281109752
User 42150 does not improve AUC. Reverting changes.
Training on augumented user 137560 16/50 current_auc = 0.7358221134230927
User 137560 AUC after training: 0.7350061199510405
User 137560 does not improve AUC. Reverting changes.
Training on augumented user 115444 17/50 current_auc = 0.7358221134230927
User 115444 AUC after training: 0.7339861281109752
User 115444 does not improve AUC. Reverting changes.
Training on augumented user 122068 18/50 current_auc = 0.7358221134230927
User 122068 AUC after training: 0.7358221134230927
User 122068 does not improve AUC. Reverting changes.
Training on augumented user 44531 19/50 current_auc = 0.7358221134230927
User 44531 AUC after training: 0.7341901264789882
User 44531 does not improve AUC. Reverting changes.
Training on augumented user 90131 20/50 current_auc = 0.7358221134230927
User 90131 AUC after training: 0.7356181150550796
User 90131 does not improve AUC. Reverting changes.
Training on augumented user 98247 21/50 current_auc = 0.7358221134230927
User 98247 AUC after training: 0.735516115871073
User 98247 does not improve AUC. Reverting changes.
Training on augumented user 30027 22/50 current_auc = 0.7358221134230927
User 30027 AUC after training: 0.7360261117911057
User 30027 improves AUC. Keeping the model.
Training on augumented user 113143 23/50 current_auc = 0.7360261117911057
User 113143 AUC after training: 0.7364341085271318
User 113143 improves AUC. Keeping the model.
Training on augumented user 105124 24/50 current_auc = 0.7364341085271318
User 105124 AUC after training: 0.7347001223990208
User 105124 does not improve AUC. Reverting changes.
Training on augumented user 92511 25/50 current_auc = 0.7364341085271318
User 92511 AUC after training: 0.7358221134230927
User 92511 does not improve AUC. Reverting changes.
Training on augumented user 23658 26/50 current_auc = 0.7364341085271318
User 23658 AUC after training: 0.7356181150550796
User 23658 does not improve AUC. Reverting changes.
Training on augumented user 27881 27/50 current_auc = 0.7364341085271318
User 27881 AUC after training: 0.7352101183190534
User 27881 does not improve AUC. Reverting changes.
Training on augumented user 11808 28/50 current_auc = 0.7364341085271318
User 11808 AUC after training: 0.7352101183190534
User 11808 does not improve AUC. Reverting changes.
Training on augumented user 84337 29/50 current_auc = 0.7364341085271318
User 84337 AUC after training: 0.7354141166870665
User 84337 does not improve AUC. Reverting changes.
Training on augumented user 68786 30/50 current_auc = 0.7364341085271318
User 68786 AUC after training: 0.7364341085271319
User 68786 improves AUC. Keeping the model.
Training on augumented user 106463 31/50 current_auc = 0.7364341085271319
User 106463 AUC after training: 0.7341901264789881
User 106463 does not improve AUC. Reverting changes.
Training on augumented user 79537 32/50 current_auc = 0.7364341085271319
User 79537 AUC after training: 0.7350061199510404
User 79537 does not improve AUC. Reverting changes.
Training on augumented user 10111 33/50 current_auc = 0.7364341085271319
User 10111 AUC after training: 0.7352101183190535
User 10111 does not improve AUC. Reverting changes.
Training on augumented user 88832 34/50 current_auc = 0.7364341085271319
User 88832 AUC after training: 0.7337821297429621
User 88832 does not improve AUC. Reverting changes.
Training on augumented user 72854 35/50 current_auc = 0.7364341085271319
User 72854 AUC after training: 0.7356181150550796
User 72854 does not improve AUC. Reverting changes.
Training on augumented user 83058 36/50 current_auc = 0.7364341085271319
User 83058 AUC after training: 0.7348021215830273
User 83058 does not improve AUC. Reverting changes.
Training on augumented user 71496 37/50 current_auc = 0.7364341085271319
User 71496 AUC after training: 0.7354141166870666
User 71496 does not improve AUC. Reverting changes.
Training on augumented user 95441 38/50 current_auc = 0.7364341085271319
User 95441 AUC after training: 0.7356181150550796
User 95441 does not improve AUC. Reverting changes.
Training on augumented user 41456 39/50 current_auc = 0.7364341085271319
User 41456 AUC after training: 0.7356181150550796
User 41456 does not improve AUC. Reverting changes.
Training on augumented user 54489 40/50 current_auc = 0.7364341085271319
User 54489 AUC after training: 0.7352101183190534
User 54489 does not improve AUC. Reverting changes.
Training on augumented user 56267 41/50 current_auc = 0.7364341085271319
User 56267 AUC after training: 0.7343941248470013
User 56267 does not improve AUC. Reverting changes.
Training on augumented user 51803 42/50 current_auc = 0.7364341085271319
User 51803 AUC after training: 0.7356181150550796
User 51803 does not improve AUC. Reverting changes.
Training on augumented user 132369 43/50 current_auc = 0.7364341085271319
User 132369 AUC after training: 0.7342921256629947
User 132369 does not improve AUC. Reverting changes.
Training on augumented user 109048 44/50 current_auc = 0.7364341085271319
User 109048 AUC after training: 0.7362301101591188
User 109048 does not improve AUC. Reverting changes.
Training on augumented user 51822 45/50 current_auc = 0.7364341085271319
User 51822 AUC after training: 0.7358221134230926
User 51822 does not improve AUC. Reverting changes.
Training on augumented user 133210 46/50 current_auc = 0.7364341085271319
User 133210 AUC after training: 0.7354141166870665
User 133210 does not improve AUC. Reverting changes.
Training on augumented user 83934 47/50 current_auc = 0.7364341085271319
User 83934 AUC after training: 0.7342921256629946
User 83934 does not improve AUC. Reverting changes.
Training on augumented user 79601 48/50 current_auc = 0.7364341085271319
User 79601 AUC after training: 0.7324561403508771
User 79601 does not improve AUC. Reverting changes.
Training on augumented user 106190 49/50 current_auc = 0.7364341085271319
User 106190 AUC after training: 0.7362301101591188
User 106190 does not improve AUC. Reverting changes.
[2024-12-02 19:52:52.919374] start test user 115959 248/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:52:53.693705] start test user 115959 248/567 recall augumented users by random, augumented_users = [16063, 73254, 124690, 59974, 15938, 127235, 16961, 1392, 52398, 69444, 26599, 606, 83650, 59882, 41652, 36157, 119264, 83486, 35630, 88158, 43454, 24067, 15484, 40253, 29120, 42450, 23020, 99729, 64504, 119111, 71326, 30868, 43636, 22890, 86003, 124980, 99383, 45057, 593, 89079, 78128, 19854, 102749, 9973, 11853, 19366, 60693, 8354, 25856, 67729]
[2024-12-02 19:52:53.711073] user = 115959 Cloud 248/567
[2024-12-02 19:52:53.723239] user = 115959 Local 248/567
[2024-12-02 19:52:53.780260] user = 115959 Local+ 248/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:52:55.847347] user = 115959 MPDA- 248/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7878787878787878
Training on augumented user 16063 0/50 current_auc = 0.7878787878787878
User 16063 AUC after training: 0.7878787878787878
User 16063 does not improve AUC. Reverting changes.
Training on augumented user 73254 1/50 current_auc = 0.7878787878787878
User 73254 AUC after training: 0.7878787878787878
User 73254 does not improve AUC. Reverting changes.
Training on augumented user 124690 2/50 current_auc = 0.7878787878787878
User 124690 AUC after training: 0.7878787878787878
User 124690 does not improve AUC. Reverting changes.
Training on augumented user 59974 3/50 current_auc = 0.7878787878787878
User 59974 AUC after training: 0.7878787878787878
User 59974 does not improve AUC. Reverting changes.
Training on augumented user 15938 4/50 current_auc = 0.7878787878787878
User 15938 AUC after training: 0.7878787878787878
User 15938 does not improve AUC. Reverting changes.
Training on augumented user 127235 5/50 current_auc = 0.7878787878787878
User 127235 AUC after training: 0.7878787878787878
User 127235 does not improve AUC. Reverting changes.
Training on augumented user 16961 6/50 current_auc = 0.7878787878787878
User 16961 AUC after training: 0.7878787878787878
User 16961 does not improve AUC. Reverting changes.
Training on augumented user 1392 7/50 current_auc = 0.7878787878787878
User 1392 AUC after training: 0.7878787878787878
User 1392 does not improve AUC. Reverting changes.
Training on augumented user 52398 8/50 current_auc = 0.7878787878787878
User 52398 AUC after training: 0.7878787878787878
User 52398 does not improve AUC. Reverting changes.
Training on augumented user 69444 9/50 current_auc = 0.7878787878787878
User 69444 AUC after training: 0.7878787878787878
User 69444 does not improve AUC. Reverting changes.
Training on augumented user 26599 10/50 current_auc = 0.7878787878787878
User 26599 AUC after training: 0.7878787878787878
User 26599 does not improve AUC. Reverting changes.
Training on augumented user 606 11/50 current_auc = 0.7878787878787878
User 606 AUC after training: 0.7878787878787878
User 606 does not improve AUC. Reverting changes.
Training on augumented user 83650 12/50 current_auc = 0.7878787878787878
User 83650 AUC after training: 0.7878787878787878
User 83650 does not improve AUC. Reverting changes.
Training on augumented user 59882 13/50 current_auc = 0.7878787878787878
User 59882 AUC after training: 0.7878787878787878
User 59882 does not improve AUC. Reverting changes.
Training on augumented user 41652 14/50 current_auc = 0.7878787878787878
User 41652 AUC after training: 0.7878787878787878
User 41652 does not improve AUC. Reverting changes.
Training on augumented user 36157 15/50 current_auc = 0.7878787878787878
User 36157 AUC after training: 0.7878787878787878
User 36157 does not improve AUC. Reverting changes.
Training on augumented user 119264 16/50 current_auc = 0.7878787878787878
User 119264 AUC after training: 0.7878787878787878
User 119264 does not improve AUC. Reverting changes.
Training on augumented user 83486 17/50 current_auc = 0.7878787878787878
User 83486 AUC after training: 0.7878787878787878
User 83486 does not improve AUC. Reverting changes.
Training on augumented user 35630 18/50 current_auc = 0.7878787878787878
User 35630 AUC after training: 0.7878787878787878
User 35630 does not improve AUC. Reverting changes.
Training on augumented user 88158 19/50 current_auc = 0.7878787878787878
User 88158 AUC after training: 0.7878787878787878
User 88158 does not improve AUC. Reverting changes.
Training on augumented user 43454 20/50 current_auc = 0.7878787878787878
User 43454 AUC after training: 0.7878787878787878
User 43454 does not improve AUC. Reverting changes.
Training on augumented user 24067 21/50 current_auc = 0.7878787878787878
User 24067 AUC after training: 0.7878787878787878
User 24067 does not improve AUC. Reverting changes.
Training on augumented user 15484 22/50 current_auc = 0.7878787878787878
User 15484 AUC after training: 0.7878787878787878
User 15484 does not improve AUC. Reverting changes.
Training on augumented user 40253 23/50 current_auc = 0.7878787878787878
User 40253 AUC after training: 0.7878787878787878
User 40253 does not improve AUC. Reverting changes.
Training on augumented user 29120 24/50 current_auc = 0.7878787878787878
User 29120 AUC after training: 0.7878787878787878
User 29120 does not improve AUC. Reverting changes.
Training on augumented user 42450 25/50 current_auc = 0.7878787878787878
User 42450 AUC after training: 0.7878787878787878
User 42450 does not improve AUC. Reverting changes.
Training on augumented user 23020 26/50 current_auc = 0.7878787878787878
User 23020 AUC after training: 0.7878787878787878
User 23020 does not improve AUC. Reverting changes.
Training on augumented user 99729 27/50 current_auc = 0.7878787878787878
User 99729 AUC after training: 0.7878787878787878
User 99729 does not improve AUC. Reverting changes.
Training on augumented user 64504 28/50 current_auc = 0.7878787878787878
User 64504 AUC after training: 0.7878787878787878
User 64504 does not improve AUC. Reverting changes.
Training on augumented user 119111 29/50 current_auc = 0.7878787878787878
User 119111 AUC after training: 0.7878787878787878
User 119111 does not improve AUC. Reverting changes.
Training on augumented user 71326 30/50 current_auc = 0.7878787878787878
User 71326 AUC after training: 0.7878787878787878
User 71326 does not improve AUC. Reverting changes.
Training on augumented user 30868 31/50 current_auc = 0.7878787878787878
User 30868 AUC after training: 0.7878787878787878
User 30868 does not improve AUC. Reverting changes.
Training on augumented user 43636 32/50 current_auc = 0.7878787878787878
User 43636 AUC after training: 0.7878787878787878
User 43636 does not improve AUC. Reverting changes.
Training on augumented user 22890 33/50 current_auc = 0.7878787878787878
User 22890 AUC after training: 0.7878787878787878
User 22890 does not improve AUC. Reverting changes.
Training on augumented user 86003 34/50 current_auc = 0.7878787878787878
User 86003 AUC after training: 0.7878787878787878
User 86003 does not improve AUC. Reverting changes.
Training on augumented user 124980 35/50 current_auc = 0.7878787878787878
User 124980 AUC after training: 0.7878787878787878
User 124980 does not improve AUC. Reverting changes.
Training on augumented user 99383 36/50 current_auc = 0.7878787878787878
User 99383 AUC after training: 0.7878787878787878
User 99383 does not improve AUC. Reverting changes.
Training on augumented user 45057 37/50 current_auc = 0.7878787878787878
User 45057 AUC after training: 0.7878787878787878
User 45057 does not improve AUC. Reverting changes.
Training on augumented user 593 38/50 current_auc = 0.7878787878787878
User 593 AUC after training: 0.7878787878787878
User 593 does not improve AUC. Reverting changes.
Training on augumented user 89079 39/50 current_auc = 0.7878787878787878
User 89079 AUC after training: 0.7878787878787878
User 89079 does not improve AUC. Reverting changes.
Training on augumented user 78128 40/50 current_auc = 0.7878787878787878
User 78128 AUC after training: 0.7878787878787878
User 78128 does not improve AUC. Reverting changes.
Training on augumented user 19854 41/50 current_auc = 0.7878787878787878
User 19854 AUC after training: 0.7878787878787878
User 19854 does not improve AUC. Reverting changes.
Training on augumented user 102749 42/50 current_auc = 0.7878787878787878
User 102749 AUC after training: 0.7878787878787878
User 102749 does not improve AUC. Reverting changes.
Training on augumented user 9973 43/50 current_auc = 0.7878787878787878
User 9973 AUC after training: 0.7878787878787878
User 9973 does not improve AUC. Reverting changes.
Training on augumented user 11853 44/50 current_auc = 0.7878787878787878
User 11853 AUC after training: 0.7878787878787878
User 11853 does not improve AUC. Reverting changes.
Training on augumented user 19366 45/50 current_auc = 0.7878787878787878
User 19366 AUC after training: 0.7878787878787878
User 19366 does not improve AUC. Reverting changes.
Training on augumented user 60693 46/50 current_auc = 0.7878787878787878
User 60693 AUC after training: 0.7878787878787878
User 60693 does not improve AUC. Reverting changes.
Training on augumented user 8354 47/50 current_auc = 0.7878787878787878
User 8354 AUC after training: 0.7878787878787878
User 8354 does not improve AUC. Reverting changes.
Training on augumented user 25856 48/50 current_auc = 0.7878787878787878
User 25856 AUC after training: 0.7878787878787878
User 25856 does not improve AUC. Reverting changes.
Training on augumented user 67729 49/50 current_auc = 0.7878787878787878
User 67729 AUC after training: 0.7878787878787878
User 67729 does not improve AUC. Reverting changes.
[2024-12-02 19:53:25.645799] start test user 115974 249/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:53:26.113522] start test user 115974 249/567 recall augumented users by random, augumented_users = [29223, 2515, 90277, 30990, 19831, 22908, 30762, 75070, 109086, 21281, 67253, 124856, 10630, 81419, 12997, 16663, 52049, 39725, 54898, 85213, 58924, 2616, 75505, 106824, 89608, 18245, 87665, 121292, 136564, 111005, 69151, 26109, 77679, 20779, 113006, 9431, 26591, 131019, 133030, 29076, 2110, 8726, 36730, 126098, 91083, 55220, 123239, 93740, 113281, 35389]
[2024-12-02 19:53:26.128897] user = 115974 Cloud 249/567
[2024-12-02 19:53:26.145038] user = 115974 Local 249/567
[2024-12-02 19:53:26.273326] user = 115974 Local+ 249/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:53:28.660329] user = 115974 MPDA- 249/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7072222222222221
Training on augumented user 29223 0/50 current_auc = 0.7072222222222221
User 29223 AUC after training: 0.7069444444444445
User 29223 does not improve AUC. Reverting changes.
Training on augumented user 2515 1/50 current_auc = 0.7072222222222221
User 2515 AUC after training: 0.7094444444444444
User 2515 improves AUC. Keeping the model.
Training on augumented user 90277 2/50 current_auc = 0.7094444444444444
User 90277 AUC after training: 0.7072222222222222
User 90277 does not improve AUC. Reverting changes.
Training on augumented user 30990 3/50 current_auc = 0.7094444444444444
User 30990 AUC after training: 0.7088888888888889
User 30990 does not improve AUC. Reverting changes.
Training on augumented user 19831 4/50 current_auc = 0.7094444444444444
User 19831 AUC after training: 0.7091666666666666
User 19831 does not improve AUC. Reverting changes.
Training on augumented user 22908 5/50 current_auc = 0.7094444444444444
User 22908 AUC after training: 0.7086111111111111
User 22908 does not improve AUC. Reverting changes.
Training on augumented user 30762 6/50 current_auc = 0.7094444444444444
User 30762 AUC after training: 0.7088888888888889
User 30762 does not improve AUC. Reverting changes.
Training on augumented user 75070 7/50 current_auc = 0.7094444444444444
User 75070 AUC after training: 0.7077777777777778
User 75070 does not improve AUC. Reverting changes.
Training on augumented user 109086 8/50 current_auc = 0.7094444444444444
User 109086 AUC after training: 0.7094444444444444
User 109086 does not improve AUC. Reverting changes.
Training on augumented user 21281 9/50 current_auc = 0.7094444444444444
User 21281 AUC after training: 0.7083333333333334
User 21281 does not improve AUC. Reverting changes.
Training on augumented user 67253 10/50 current_auc = 0.7094444444444444
User 67253 AUC after training: 0.7102777777777778
User 67253 improves AUC. Keeping the model.
Training on augumented user 124856 11/50 current_auc = 0.7102777777777778
User 124856 AUC after training: 0.7097222222222223
User 124856 does not improve AUC. Reverting changes.
Training on augumented user 10630 12/50 current_auc = 0.7102777777777778
User 10630 AUC after training: 0.7105555555555556
User 10630 improves AUC. Keeping the model.
Training on augumented user 81419 13/50 current_auc = 0.7105555555555556
User 81419 AUC after training: 0.7102777777777778
User 81419 does not improve AUC. Reverting changes.
Training on augumented user 12997 14/50 current_auc = 0.7105555555555556
User 12997 AUC after training: 0.71
User 12997 does not improve AUC. Reverting changes.
Training on augumented user 16663 15/50 current_auc = 0.7105555555555556
User 16663 AUC after training: 0.7100000000000001
User 16663 does not improve AUC. Reverting changes.
Training on augumented user 52049 16/50 current_auc = 0.7105555555555556
User 52049 AUC after training: 0.711388888888889
User 52049 improves AUC. Keeping the model.
Training on augumented user 39725 17/50 current_auc = 0.711388888888889
User 39725 AUC after training: 0.7108333333333333
User 39725 does not improve AUC. Reverting changes.
Training on augumented user 54898 18/50 current_auc = 0.711388888888889
User 54898 AUC after training: 0.7102777777777778
User 54898 does not improve AUC. Reverting changes.
Training on augumented user 85213 19/50 current_auc = 0.711388888888889
User 85213 AUC after training: 0.7105555555555556
User 85213 does not improve AUC. Reverting changes.
Training on augumented user 58924 20/50 current_auc = 0.711388888888889
User 58924 AUC after training: 0.71
User 58924 does not improve AUC. Reverting changes.
Training on augumented user 2616 21/50 current_auc = 0.711388888888889
User 2616 AUC after training: 0.7102777777777778
User 2616 does not improve AUC. Reverting changes.
Training on augumented user 75505 22/50 current_auc = 0.711388888888889
User 75505 AUC after training: 0.7116666666666667
User 75505 improves AUC. Keeping the model.
Training on augumented user 106824 23/50 current_auc = 0.7116666666666667
User 106824 AUC after training: 0.7108333333333333
User 106824 does not improve AUC. Reverting changes.
Training on augumented user 89608 24/50 current_auc = 0.7116666666666667
User 89608 AUC after training: 0.7097222222222223
User 89608 does not improve AUC. Reverting changes.
Training on augumented user 18245 25/50 current_auc = 0.7116666666666667
User 18245 AUC after training: 0.7108333333333334
User 18245 does not improve AUC. Reverting changes.
Training on augumented user 87665 26/50 current_auc = 0.7116666666666667
User 87665 AUC after training: 0.7105555555555555
User 87665 does not improve AUC. Reverting changes.
Training on augumented user 121292 27/50 current_auc = 0.7116666666666667
User 121292 AUC after training: 0.7097222222222223
User 121292 does not improve AUC. Reverting changes.
Training on augumented user 136564 28/50 current_auc = 0.7116666666666667
User 136564 AUC after training: 0.7102777777777778
User 136564 does not improve AUC. Reverting changes.
Training on augumented user 111005 29/50 current_auc = 0.7116666666666667
User 111005 AUC after training: 0.7091666666666667
User 111005 does not improve AUC. Reverting changes.
Training on augumented user 69151 30/50 current_auc = 0.7116666666666667
User 69151 AUC after training: 0.7100000000000001
User 69151 does not improve AUC. Reverting changes.
Training on augumented user 26109 31/50 current_auc = 0.7116666666666667
User 26109 AUC after training: 0.7102777777777778
User 26109 does not improve AUC. Reverting changes.
Training on augumented user 77679 32/50 current_auc = 0.7116666666666667
User 77679 AUC after training: 0.7108333333333333
User 77679 does not improve AUC. Reverting changes.
Training on augumented user 20779 33/50 current_auc = 0.7116666666666667
User 20779 AUC after training: 0.7105555555555556
User 20779 does not improve AUC. Reverting changes.
Training on augumented user 113006 34/50 current_auc = 0.7116666666666667
User 113006 AUC after training: 0.7102777777777778
User 113006 does not improve AUC. Reverting changes.
Training on augumented user 9431 35/50 current_auc = 0.7116666666666667
User 9431 AUC after training: 0.71
User 9431 does not improve AUC. Reverting changes.
Training on augumented user 26591 36/50 current_auc = 0.7116666666666667
User 26591 AUC after training: 0.7102777777777778
User 26591 does not improve AUC. Reverting changes.
Training on augumented user 131019 37/50 current_auc = 0.7116666666666667
User 131019 AUC after training: 0.7108333333333333
User 131019 does not improve AUC. Reverting changes.
Training on augumented user 133030 38/50 current_auc = 0.7116666666666667
User 133030 AUC after training: 0.7097222222222221
User 133030 does not improve AUC. Reverting changes.
Training on augumented user 29076 39/50 current_auc = 0.7116666666666667
User 29076 AUC after training: 0.711388888888889
User 29076 does not improve AUC. Reverting changes.
Training on augumented user 2110 40/50 current_auc = 0.7116666666666667
User 2110 AUC after training: 0.7108333333333333
User 2110 does not improve AUC. Reverting changes.
Training on augumented user 8726 41/50 current_auc = 0.7116666666666667
User 8726 AUC after training: 0.7108333333333333
User 8726 does not improve AUC. Reverting changes.
Training on augumented user 36730 42/50 current_auc = 0.7116666666666667
User 36730 AUC after training: 0.711388888888889
User 36730 does not improve AUC. Reverting changes.
Training on augumented user 126098 43/50 current_auc = 0.7116666666666667
User 126098 AUC after training: 0.7105555555555556
User 126098 does not improve AUC. Reverting changes.
Training on augumented user 91083 44/50 current_auc = 0.7116666666666667
User 91083 AUC after training: 0.7105555555555555
User 91083 does not improve AUC. Reverting changes.
Training on augumented user 55220 45/50 current_auc = 0.7116666666666667
User 55220 AUC after training: 0.7111111111111111
User 55220 does not improve AUC. Reverting changes.
Training on augumented user 123239 46/50 current_auc = 0.7116666666666667
User 123239 AUC after training: 0.7108333333333334
User 123239 does not improve AUC. Reverting changes.
Training on augumented user 93740 47/50 current_auc = 0.7116666666666667
User 93740 AUC after training: 0.7111111111111111
User 93740 does not improve AUC. Reverting changes.
Training on augumented user 113281 48/50 current_auc = 0.7116666666666667
User 113281 AUC after training: 0.7108333333333334
User 113281 does not improve AUC. Reverting changes.
Training on augumented user 35389 49/50 current_auc = 0.7116666666666667
User 35389 AUC after training: 0.7108333333333333
User 35389 does not improve AUC. Reverting changes.
[2024-12-02 19:54:00.075419] start test user 115982 250/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:54:00.725448] start test user 115982 250/567 recall augumented users by random, augumented_users = [127443, 29180, 57838, 97603, 44886, 67548, 58550, 112857, 111951, 26815, 53121, 65944, 110798, 28035, 25455, 23179, 9185, 23940, 10989, 80354, 5498, 96126, 36498, 125995, 77377, 129682, 27241, 101448, 92322, 100028, 52083, 92415, 48116, 74506, 48759, 84171, 126270, 105258, 130046, 60880, 37831, 133829, 51503, 126474, 64813, 89236, 90480, 108938, 4898, 134706]
[2024-12-02 19:54:00.767352] user = 115982 Cloud 250/567
[2024-12-02 19:54:00.808488] user = 115982 Local 250/567
[2024-12-02 19:54:01.024289] user = 115982 Local+ 250/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:54:03.285110] user = 115982 MPDA- 250/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5817376167115049
Training on augumented user 127443 0/50 current_auc = 0.5817376167115049
User 127443 AUC after training: 0.5814211109352745
User 127443 does not improve AUC. Reverting changes.
Training on augumented user 29180 1/50 current_auc = 0.5817376167115049
User 29180 AUC after training: 0.5842696629213483
User 29180 improves AUC. Keeping the model.
Training on augumented user 57838 2/50 current_auc = 0.5842696629213483
User 57838 AUC after training: 0.5836366513688874
User 57838 does not improve AUC. Reverting changes.
Training on augumented user 97603 3/50 current_auc = 0.5842696629213483
User 97603 AUC after training: 0.5845861686975787
User 97603 improves AUC. Keeping the model.
Training on augumented user 44886 4/50 current_auc = 0.5845861686975787
User 44886 AUC after training: 0.5830827662604843
User 44886 does not improve AUC. Reverting changes.
Training on augumented user 67548 5/50 current_auc = 0.5845861686975787
User 67548 AUC after training: 0.5835575249248299
User 67548 does not improve AUC. Reverting changes.
Training on augumented user 58550 6/50 current_auc = 0.5845861686975787
User 58550 AUC after training: 0.5829245133723691
User 58550 does not improve AUC. Reverting changes.
Training on augumented user 112857 7/50 current_auc = 0.5845861686975787
User 112857 AUC after training: 0.5838740307010603
User 112857 does not improve AUC. Reverting changes.
Training on augumented user 111951 8/50 current_auc = 0.5845861686975787
User 111951 AUC after training: 0.5852191802500396
User 111951 improves AUC. Keeping the model.
Training on augumented user 26815 9/50 current_auc = 0.5852191802500396
User 26815 AUC after training: 0.581539800601361
User 26815 does not improve AUC. Reverting changes.
Training on augumented user 53121 10/50 current_auc = 0.5852191802500396
User 53121 AUC after training: 0.5845070422535211
User 53121 does not improve AUC. Reverting changes.
Training on augumented user 65944 11/50 current_auc = 0.5852191802500396
User 65944 AUC after training: 0.5854565595822123
User 65944 improves AUC. Keeping the model.
Training on augumented user 110798 12/50 current_auc = 0.5854565595822123
User 110798 AUC after training: 0.5853774331381547
User 110798 does not improve AUC. Reverting changes.
Training on augumented user 28035 13/50 current_auc = 0.5854565595822123
User 28035 AUC after training: 0.5856939389143851
User 28035 improves AUC. Keeping the model.
Training on augumented user 25455 14/50 current_auc = 0.5856939389143851
User 25455 AUC after training: 0.5842696629213484
User 25455 does not improve AUC. Reverting changes.
Training on augumented user 23179 15/50 current_auc = 0.5856939389143851
User 23179 AUC after training: 0.5867225826871341
User 23179 improves AUC. Keeping the model.
Training on augumented user 9185 16/50 current_auc = 0.5867225826871341
User 9185 AUC after training: 0.5863269504668459
User 9185 does not improve AUC. Reverting changes.
Training on augumented user 23940 17/50 current_auc = 0.5867225826871341
User 23940 AUC after training: 0.5870390884633645
User 23940 improves AUC. Keeping the model.
Training on augumented user 10989 18/50 current_auc = 0.5870390884633645
User 10989 AUC after training: 0.584744421585694
User 10989 does not improve AUC. Reverting changes.
Training on augumented user 80354 19/50 current_auc = 0.5870390884633645
User 80354 AUC after training: 0.5867225826871341
User 80354 does not improve AUC. Reverting changes.
Training on augumented user 5498 20/50 current_auc = 0.5870390884633645
User 5498 AUC after training: 0.585931318246558
User 5498 does not improve AUC. Reverting changes.
Training on augumented user 96126 21/50 current_auc = 0.5870390884633645
User 96126 AUC after training: 0.5862478240227884
User 96126 does not improve AUC. Reverting changes.
Training on augumented user 36498 22/50 current_auc = 0.5870390884633645
User 36498 AUC after training: 0.5864060769109036
User 36498 does not improve AUC. Reverting changes.
Training on augumented user 125995 23/50 current_auc = 0.5870390884633645
User 125995 AUC after training: 0.5872764677955373
User 125995 improves AUC. Keeping the model.
Training on augumented user 77377 24/50 current_auc = 0.5872764677955373
User 77377 AUC after training: 0.5877512264598829
User 77377 improves AUC. Keeping the model.
Training on augumented user 129682 25/50 current_auc = 0.5877512264598829
User 129682 AUC after training: 0.5872764677955372
User 129682 does not improve AUC. Reverting changes.
Training on augumented user 27241 26/50 current_auc = 0.5877512264598829
User 27241 AUC after training: 0.5852191802500396
User 27241 does not improve AUC. Reverting changes.
Training on augumented user 101448 27/50 current_auc = 0.5877512264598829
User 101448 AUC after training: 0.5879886057920557
User 101448 improves AUC. Keeping the model.
Training on augumented user 92322 28/50 current_auc = 0.5879886057920557
User 92322 AUC after training: 0.5880677322361133
User 92322 improves AUC. Keeping the model.
Training on augumented user 100028 29/50 current_auc = 0.5880677322361133
User 100028 AUC after training: 0.5880677322361133
User 100028 does not improve AUC. Reverting changes.
Training on augumented user 52083 30/50 current_auc = 0.5880677322361133
User 52083 AUC after training: 0.5875929735717678
User 52083 does not improve AUC. Reverting changes.
Training on augumented user 92415 31/50 current_auc = 0.5880677322361133
User 92415 AUC after training: 0.5874347206836525
User 92415 does not improve AUC. Reverting changes.
Training on augumented user 48116 32/50 current_auc = 0.5880677322361133
User 48116 AUC after training: 0.5881468586801709
User 48116 improves AUC. Keeping the model.
Training on augumented user 74506 33/50 current_auc = 0.5881468586801709
User 74506 AUC after training: 0.5876721000158254
User 74506 does not improve AUC. Reverting changes.
Training on augumented user 48759 34/50 current_auc = 0.5881468586801709
User 48759 AUC after training: 0.5845861686975787
User 48759 does not improve AUC. Reverting changes.
Training on augumented user 84171 35/50 current_auc = 0.5881468586801709
User 84171 AUC after training: 0.5887798702326318
User 84171 improves AUC. Keeping the model.
Training on augumented user 126270 36/50 current_auc = 0.5887798702326318
User 126270 AUC after training: 0.5882259851242285
User 126270 does not improve AUC. Reverting changes.
Training on augumented user 105258 37/50 current_auc = 0.5887798702326318
User 105258 AUC after training: 0.5894128817850927
User 105258 improves AUC. Keeping the model.
Training on augumented user 130046 38/50 current_auc = 0.5894128817850927
User 130046 AUC after training: 0.5890963760088621
User 130046 does not improve AUC. Reverting changes.
Training on augumented user 60880 39/50 current_auc = 0.5894128817850927
User 60880 AUC after training: 0.5890963760088621
User 60880 does not improve AUC. Reverting changes.
Training on augumented user 37831 40/50 current_auc = 0.5894128817850927
User 37831 AUC after training: 0.5890172495648046
User 37831 does not improve AUC. Reverting changes.
Training on augumented user 133829 41/50 current_auc = 0.5894128817850927
User 133829 AUC after training: 0.5878303529039406
User 133829 does not improve AUC. Reverting changes.
Training on augumented user 51503 42/50 current_auc = 0.5894128817850927
User 51503 AUC after training: 0.5890172495648045
User 51503 does not improve AUC. Reverting changes.
Training on augumented user 126474 43/50 current_auc = 0.5894128817850927
User 126474 AUC after training: 0.587118214907422
User 126474 does not improve AUC. Reverting changes.
Training on augumented user 64813 44/50 current_auc = 0.5894128817850927
User 64813 AUC after training: 0.5879094793479981
User 64813 does not improve AUC. Reverting changes.
Training on augumented user 89236 45/50 current_auc = 0.5894128817850927
User 89236 AUC after training: 0.5883842380123437
User 89236 does not improve AUC. Reverting changes.
Training on augumented user 90480 46/50 current_auc = 0.5894128817850927
User 90480 AUC after training: 0.5891755024529196
User 90480 does not improve AUC. Reverting changes.
Training on augumented user 108938 47/50 current_auc = 0.5894128817850927
User 108938 AUC after training: 0.5893337553410349
User 108938 does not improve AUC. Reverting changes.
Training on augumented user 4898 48/50 current_auc = 0.5894128817850927
User 4898 AUC after training: 0.5890172495648046
User 4898 does not improve AUC. Reverting changes.
Training on augumented user 134706 49/50 current_auc = 0.5894128817850927
User 134706 AUC after training: 0.5887007437885742
User 134706 does not improve AUC. Reverting changes.
[2024-12-02 19:54:31.926120] start test user 116001 251/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:54:32.694528] start test user 116001 251/567 recall augumented users by random, augumented_users = [121411, 47198, 6845, 132930, 103018, 102441, 61644, 30710, 78313, 59301, 97751, 32176, 15119, 66792, 53795, 129516, 106558, 96685, 109956, 120344, 54829, 95768, 54150, 65063, 46440, 73015, 70623, 109879, 54521, 41374, 40448, 71413, 136446, 9226, 4473, 124956, 35368, 36710, 107730, 30731, 114738, 87353, 30600, 60428, 136644, 84155, 14281, 102754, 99880, 96979]
[2024-12-02 19:54:32.712444] user = 116001 Cloud 251/567
[2024-12-02 19:54:32.733950] user = 116001 Local 251/567
[2024-12-02 19:54:32.785397] user = 116001 Local+ 251/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:54:35.281597] user = 116001 MPDA- 251/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4890403635391607
Training on augumented user 121411 0/50 current_auc = 0.4890403635391607
User 121411 AUC after training: 0.4889067094359797
User 121411 does not improve AUC. Reverting changes.
Training on augumented user 47198 1/50 current_auc = 0.4890403635391607
User 47198 AUC after training: 0.48783747661053195
User 47198 does not improve AUC. Reverting changes.
Training on augumented user 6845 2/50 current_auc = 0.4890403635391607
User 6845 AUC after training: 0.4914461373964181
User 6845 improves AUC. Keeping the model.
Training on augumented user 132930 3/50 current_auc = 0.4914461373964181
User 132930 AUC after training: 0.4901095963646084
User 132930 does not improve AUC. Reverting changes.
Training on augumented user 103018 4/50 current_auc = 0.4914461373964181
User 103018 AUC after training: 0.4895749799518846
User 103018 does not improve AUC. Reverting changes.
Training on augumented user 102441 5/50 current_auc = 0.4914461373964181
User 102441 AUC after training: 0.49064421277733217
User 102441 does not improve AUC. Reverting changes.
Training on augumented user 61644 6/50 current_auc = 0.4914461373964181
User 61644 AUC after training: 0.4910451750868752
User 61644 does not improve AUC. Reverting changes.
Training on augumented user 30710 7/50 current_auc = 0.4914461373964181
User 30710 AUC after training: 0.48997594226142743
User 30710 does not improve AUC. Reverting changes.
Training on augumented user 78313 8/50 current_auc = 0.4914461373964181
User 78313 AUC after training: 0.4909115209836942
User 78313 does not improve AUC. Reverting changes.
Training on augumented user 59301 9/50 current_auc = 0.4914461373964181
User 59301 AUC after training: 0.4907778668805133
User 59301 does not improve AUC. Reverting changes.
Training on augumented user 97751 10/50 current_auc = 0.4914461373964181
User 97751 AUC after training: 0.4908446939321037
User 97751 does not improve AUC. Reverting changes.
Training on augumented user 32176 11/50 current_auc = 0.4914461373964181
User 32176 AUC after training: 0.49111200213846573
User 32176 does not improve AUC. Reverting changes.
Training on augumented user 15119 12/50 current_auc = 0.4914461373964181
User 15119 AUC after training: 0.4911788291900561
User 15119 does not improve AUC. Reverting changes.
Training on augumented user 66792 13/50 current_auc = 0.4914461373964181
User 66792 AUC after training: 0.48970863405506543
User 66792 does not improve AUC. Reverting changes.
Training on augumented user 53795 14/50 current_auc = 0.4914461373964181
User 53795 AUC after training: 0.48850574712643674
User 53795 does not improve AUC. Reverting changes.
Training on augumented user 129516 15/50 current_auc = 0.4914461373964181
User 129516 AUC after training: 0.49151296444800857
User 129516 improves AUC. Keeping the model.
Training on augumented user 106558 16/50 current_auc = 0.49151296444800857
User 106558 AUC after training: 0.4913124832932372
User 106558 does not improve AUC. Reverting changes.
Training on augumented user 96685 17/50 current_auc = 0.49151296444800857
User 96685 AUC after training: 0.4913124832932371
User 96685 does not improve AUC. Reverting changes.
Training on augumented user 109956 18/50 current_auc = 0.49151296444800857
User 109956 AUC after training: 0.4913793103448276
User 109956 does not improve AUC. Reverting changes.
Training on augumented user 120344 19/50 current_auc = 0.49151296444800857
User 120344 AUC after training: 0.4912456562416466
User 120344 does not improve AUC. Reverting changes.
Training on augumented user 54829 20/50 current_auc = 0.49151296444800857
User 54829 AUC after training: 0.49178027265437047
User 54829 improves AUC. Keeping the model.
Training on augumented user 95768 21/50 current_auc = 0.49178027265437047
User 95768 AUC after training: 0.48930767174552264
User 95768 does not improve AUC. Reverting changes.
Training on augumented user 54150 22/50 current_auc = 0.49178027265437047
User 54150 AUC after training: 0.4909783480352847
User 54150 does not improve AUC. Reverting changes.
Training on augumented user 65063 23/50 current_auc = 0.49178027265437047
User 65063 AUC after training: 0.4911120021384656
User 65063 does not improve AUC. Reverting changes.
Training on augumented user 46440 24/50 current_auc = 0.49178027265437047
User 46440 AUC after training: 0.4913793103448276
User 46440 does not improve AUC. Reverting changes.
Training on augumented user 73015 25/50 current_auc = 0.49178027265437047
User 73015 AUC after training: 0.49037690457097033
User 73015 does not improve AUC. Reverting changes.
Training on augumented user 70623 26/50 current_auc = 0.49178027265437047
User 70623 AUC after training: 0.4911120021384656
User 70623 does not improve AUC. Reverting changes.
Training on augumented user 109879 27/50 current_auc = 0.49178027265437047
User 109879 AUC after training: 0.4916466185511895
User 109879 does not improve AUC. Reverting changes.
Training on augumented user 54521 28/50 current_auc = 0.49178027265437047
User 54521 AUC after training: 0.4907778668805133
User 54521 does not improve AUC. Reverting changes.
Training on augumented user 41374 29/50 current_auc = 0.49178027265437047
User 41374 AUC after training: 0.49057738572574183
User 41374 does not improve AUC. Reverting changes.
Training on augumented user 40448 30/50 current_auc = 0.49178027265437047
User 40448 AUC after training: 0.48917401764234164
User 40448 does not improve AUC. Reverting changes.
Training on augumented user 71413 31/50 current_auc = 0.49178027265437047
User 71413 AUC after training: 0.4907778668805132
User 71413 does not improve AUC. Reverting changes.
Training on augumented user 136446 32/50 current_auc = 0.49178027265437047
User 136446 AUC after training: 0.4911120021384656
User 136446 does not improve AUC. Reverting changes.
Training on augumented user 9226 33/50 current_auc = 0.49178027265437047
User 9226 AUC after training: 0.4909783480352847
User 9226 does not improve AUC. Reverting changes.
Training on augumented user 4473 34/50 current_auc = 0.49178027265437047
User 4473 AUC after training: 0.4913793103448276
User 4473 does not improve AUC. Reverting changes.
Training on augumented user 124956 35/50 current_auc = 0.49178027265437047
User 124956 AUC after training: 0.4907778668805132
User 124956 does not improve AUC. Reverting changes.
Training on augumented user 35368 36/50 current_auc = 0.49178027265437047
User 35368 AUC after training: 0.49091152098369417
User 35368 does not improve AUC. Reverting changes.
Training on augumented user 36710 37/50 current_auc = 0.49178027265437047
User 36710 AUC after training: 0.49084469393210367
User 36710 does not improve AUC. Reverting changes.
Training on augumented user 107730 38/50 current_auc = 0.49178027265437047
User 107730 AUC after training: 0.48977546110665593
User 107730 does not improve AUC. Reverting changes.
Training on augumented user 30731 39/50 current_auc = 0.49178027265437047
User 30731 AUC after training: 0.4898422881582465
User 30731 does not improve AUC. Reverting changes.
Training on augumented user 114738 40/50 current_auc = 0.49178027265437047
User 114738 AUC after training: 0.48970863405506543
User 114738 does not improve AUC. Reverting changes.
Training on augumented user 87353 41/50 current_auc = 0.49178027265437047
User 87353 AUC after training: 0.4916466185511895
User 87353 does not improve AUC. Reverting changes.
Training on augumented user 30600 42/50 current_auc = 0.49178027265437047
User 30600 AUC after training: 0.49010959636460844
User 30600 does not improve AUC. Reverting changes.
Training on augumented user 60428 43/50 current_auc = 0.49178027265437047
User 60428 AUC after training: 0.4915129644480085
User 60428 does not improve AUC. Reverting changes.
Training on augumented user 136644 44/50 current_auc = 0.49178027265437047
User 136644 AUC after training: 0.49164661855118946
User 136644 does not improve AUC. Reverting changes.
Training on augumented user 84155 45/50 current_auc = 0.49178027265437047
User 84155 AUC after training: 0.49137931034482757
User 84155 does not improve AUC. Reverting changes.
Training on augumented user 14281 46/50 current_auc = 0.49178027265437047
User 14281 AUC after training: 0.4910451750868752
User 14281 does not improve AUC. Reverting changes.
Training on augumented user 102754 47/50 current_auc = 0.49178027265437047
User 102754 AUC after training: 0.4913124832932371
User 102754 does not improve AUC. Reverting changes.
Training on augumented user 99880 48/50 current_auc = 0.49178027265437047
User 99880 AUC after training: 0.4913793103448276
User 99880 does not improve AUC. Reverting changes.
Training on augumented user 96979 49/50 current_auc = 0.49178027265437047
User 96979 AUC after training: 0.4916466185511895
User 96979 does not improve AUC. Reverting changes.
[2024-12-02 19:55:05.269264] start test user 116057 252/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:55:06.055694] start test user 116057 252/567 recall augumented users by random, augumented_users = [117987, 125005, 25701, 16315, 58214, 45145, 42610, 50559, 101845, 17245, 75679, 3566, 82247, 65801, 89623, 30335, 21359, 51090, 115048, 30743, 110564, 130639, 74761, 76801, 133526, 128401, 72024, 74083, 34154, 110420, 52921, 35291, 31403, 50776, 101887, 132771, 32777, 129382, 103948, 101796, 90999, 5193, 117068, 59415, 134928, 9990, 9776, 15456, 18239, 118835]
[2024-12-02 19:55:06.071376] user = 116057 Cloud 252/567
[2024-12-02 19:55:06.102342] user = 116057 Local 252/567
[2024-12-02 19:55:06.266460] user = 116057 Local+ 252/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:55:08.231292] user = 116057 MPDA- 252/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6084357923497267
Training on augumented user 117987 0/50 current_auc = 0.6084357923497267
User 117987 AUC after training: 0.6075478142076502
User 117987 does not improve AUC. Reverting changes.
Training on augumented user 125005 1/50 current_auc = 0.6084357923497267
User 125005 AUC after training: 0.6077527322404371
User 125005 does not improve AUC. Reverting changes.
Training on augumented user 25701 2/50 current_auc = 0.6084357923497267
User 25701 AUC after training: 0.6076844262295081
User 25701 does not improve AUC. Reverting changes.
Training on augumented user 16315 3/50 current_auc = 0.6084357923497267
User 16315 AUC after training: 0.6077527322404371
User 16315 does not improve AUC. Reverting changes.
Training on augumented user 58214 4/50 current_auc = 0.6084357923497267
User 58214 AUC after training: 0.6076844262295081
User 58214 does not improve AUC. Reverting changes.
Training on augumented user 45145 5/50 current_auc = 0.6084357923497267
User 45145 AUC after training: 0.6070355191256831
User 45145 does not improve AUC. Reverting changes.
Training on augumented user 42610 6/50 current_auc = 0.6084357923497267
User 42610 AUC after training: 0.6077527322404371
User 42610 does not improve AUC. Reverting changes.
Training on augumented user 50559 7/50 current_auc = 0.6084357923497267
User 50559 AUC after training: 0.6079234972677595
User 50559 does not improve AUC. Reverting changes.
Training on augumented user 101845 8/50 current_auc = 0.6084357923497267
User 101845 AUC after training: 0.6070696721311476
User 101845 does not improve AUC. Reverting changes.
Training on augumented user 17245 9/50 current_auc = 0.6084357923497267
User 17245 AUC after training: 0.6076502732240436
User 17245 does not improve AUC. Reverting changes.
Training on augumented user 75679 10/50 current_auc = 0.6084357923497267
User 75679 AUC after training: 0.6076161202185791
User 75679 does not improve AUC. Reverting changes.
Training on augumented user 3566 11/50 current_auc = 0.6084357923497267
User 3566 AUC after training: 0.6072062841530054
User 3566 does not improve AUC. Reverting changes.
Training on augumented user 82247 12/50 current_auc = 0.6084357923497267
User 82247 AUC after training: 0.6078893442622951
User 82247 does not improve AUC. Reverting changes.
Training on augumented user 65801 13/50 current_auc = 0.6084357923497267
User 65801 AUC after training: 0.607957650273224
User 65801 does not improve AUC. Reverting changes.
Training on augumented user 89623 14/50 current_auc = 0.6084357923497267
User 89623 AUC after training: 0.607172131147541
User 89623 does not improve AUC. Reverting changes.
Training on augumented user 30335 15/50 current_auc = 0.6084357923497267
User 30335 AUC after training: 0.6085724043715848
User 30335 improves AUC. Keeping the model.
Training on augumented user 21359 16/50 current_auc = 0.6085724043715848
User 21359 AUC after training: 0.6096994535519126
User 21359 improves AUC. Keeping the model.
Training on augumented user 51090 17/50 current_auc = 0.6096994535519126
User 51090 AUC after training: 0.6094945355191256
User 51090 does not improve AUC. Reverting changes.
Training on augumented user 115048 18/50 current_auc = 0.6096994535519126
User 115048 AUC after training: 0.6096994535519126
User 115048 does not improve AUC. Reverting changes.
Training on augumented user 30743 19/50 current_auc = 0.6096994535519126
User 30743 AUC after training: 0.6098360655737706
User 30743 improves AUC. Keeping the model.
Training on augumented user 110564 20/50 current_auc = 0.6098360655737706
User 110564 AUC after training: 0.6097677595628415
User 110564 does not improve AUC. Reverting changes.
Training on augumented user 130639 21/50 current_auc = 0.6098360655737706
User 130639 AUC after training: 0.6080601092896175
User 130639 does not improve AUC. Reverting changes.
Training on augumented user 74761 22/50 current_auc = 0.6098360655737706
User 74761 AUC after training: 0.6097677595628415
User 74761 does not improve AUC. Reverting changes.
Training on augumented user 76801 23/50 current_auc = 0.6098360655737706
User 76801 AUC after training: 0.6099043715846993
User 76801 improves AUC. Keeping the model.
Training on augumented user 133526 24/50 current_auc = 0.6099043715846993
User 133526 AUC after training: 0.6084016393442623
User 133526 does not improve AUC. Reverting changes.
Training on augumented user 128401 25/50 current_auc = 0.6099043715846993
User 128401 AUC after training: 0.6102459016393442
User 128401 improves AUC. Keeping the model.
Training on augumented user 72024 26/50 current_auc = 0.6102459016393442
User 72024 AUC after training: 0.6100409836065573
User 72024 does not improve AUC. Reverting changes.
Training on augumented user 74083 27/50 current_auc = 0.6102459016393442
User 74083 AUC after training: 0.6100409836065573
User 74083 does not improve AUC. Reverting changes.
Training on augumented user 34154 28/50 current_auc = 0.6102459016393442
User 34154 AUC after training: 0.6100409836065573
User 34154 does not improve AUC. Reverting changes.
Training on augumented user 110420 29/50 current_auc = 0.6102459016393442
User 110420 AUC after training: 0.6109289617486339
User 110420 improves AUC. Keeping the model.
Training on augumented user 52921 30/50 current_auc = 0.6109289617486339
User 52921 AUC after training: 0.6107240437158471
User 52921 does not improve AUC. Reverting changes.
Training on augumented user 35291 31/50 current_auc = 0.6109289617486339
User 35291 AUC after training: 0.6114071038251366
User 35291 improves AUC. Keeping the model.
Training on augumented user 31403 32/50 current_auc = 0.6114071038251366
User 31403 AUC after training: 0.6118169398907104
User 31403 improves AUC. Keeping the model.
Training on augumented user 50776 33/50 current_auc = 0.6118169398907104
User 50776 AUC after training: 0.6119535519125684
User 50776 improves AUC. Keeping the model.
Training on augumented user 101887 34/50 current_auc = 0.6119535519125684
User 101887 AUC after training: 0.610724043715847
User 101887 does not improve AUC. Reverting changes.
Training on augumented user 132771 35/50 current_auc = 0.6119535519125684
User 132771 AUC after training: 0.6116120218579235
User 132771 does not improve AUC. Reverting changes.
Training on augumented user 32777 36/50 current_auc = 0.6119535519125684
User 32777 AUC after training: 0.6120218579234973
User 32777 improves AUC. Keeping the model.
Training on augumented user 129382 37/50 current_auc = 0.6120218579234973
User 129382 AUC after training: 0.6118169398907104
User 129382 does not improve AUC. Reverting changes.
Training on augumented user 103948 38/50 current_auc = 0.6120218579234973
User 103948 AUC after training: 0.6120218579234973
User 103948 does not improve AUC. Reverting changes.
Training on augumented user 101796 39/50 current_auc = 0.6120218579234973
User 101796 AUC after training: 0.6119535519125683
User 101796 does not improve AUC. Reverting changes.
Training on augumented user 90999 40/50 current_auc = 0.6120218579234973
User 90999 AUC after training: 0.6121584699453552
User 90999 improves AUC. Keeping the model.
Training on augumented user 5193 41/50 current_auc = 0.6121584699453552
User 5193 AUC after training: 0.6116120218579234
User 5193 does not improve AUC. Reverting changes.
Training on augumented user 117068 42/50 current_auc = 0.6121584699453552
User 117068 AUC after training: 0.6125341530054644
User 117068 improves AUC. Keeping the model.
Training on augumented user 59415 43/50 current_auc = 0.6125341530054644
User 59415 AUC after training: 0.6125
User 59415 does not improve AUC. Reverting changes.
Training on augumented user 134928 44/50 current_auc = 0.6125341530054644
User 134928 AUC after training: 0.6112021857923496
User 134928 does not improve AUC. Reverting changes.
Training on augumented user 9990 45/50 current_auc = 0.6125341530054644
User 9990 AUC after training: 0.612295081967213
User 9990 does not improve AUC. Reverting changes.
Training on augumented user 9776 46/50 current_auc = 0.6125341530054644
User 9776 AUC after training: 0.6134562841530056
User 9776 improves AUC. Keeping the model.
Training on augumented user 15456 47/50 current_auc = 0.6134562841530056
User 15456 AUC after training: 0.6138661202185792
User 15456 improves AUC. Keeping the model.
Training on augumented user 18239 48/50 current_auc = 0.6138661202185792
User 18239 AUC after training: 0.6127732240437157
User 18239 does not improve AUC. Reverting changes.
Training on augumented user 118835 49/50 current_auc = 0.6138661202185792
User 118835 AUC after training: 0.6127732240437158
User 118835 does not improve AUC. Reverting changes.
[2024-12-02 19:55:38.951777] start test user 116095 253/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:55:39.388246] start test user 116095 253/567 recall augumented users by random, augumented_users = [41107, 15020, 107748, 97207, 28241, 136780, 130510, 81684, 101781, 109130, 43780, 53719, 14113, 33687, 24040, 21172, 33219, 95266, 62466, 83566, 121400, 137569, 120938, 134353, 100622, 106082, 130004, 29285, 53452, 122195, 81032, 74593, 56126, 104362, 42547, 60143, 70050, 37755, 13640, 21882, 81979, 31765, 43567, 48192, 86216, 102742, 22444, 34169, 18878, 123731]
[2024-12-02 19:55:39.404532] user = 116095 Cloud 253/567
[2024-12-02 19:55:39.427700] user = 116095 Local 253/567
[2024-12-02 19:55:39.536690] user = 116095 Local+ 253/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:55:42.155713] user = 116095 MPDA- 253/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.566397652237711
Training on augumented user 41107 0/50 current_auc = 0.566397652237711
User 41107 AUC after training: 0.5649303008070432
User 41107 does not improve AUC. Reverting changes.
Training on augumented user 15020 1/50 current_auc = 0.566397652237711
User 15020 AUC after training: 0.5663976522377109
User 15020 does not improve AUC. Reverting changes.
Training on augumented user 107748 2/50 current_auc = 0.566397652237711
User 107748 AUC after training: 0.5663976522377109
User 107748 does not improve AUC. Reverting changes.
Training on augumented user 97207 3/50 current_auc = 0.566397652237711
User 97207 AUC after training: 0.5656639765223772
User 97207 does not improve AUC. Reverting changes.
Training on augumented user 28241 4/50 current_auc = 0.566397652237711
User 28241 AUC after training: 0.5671313279530448
User 28241 improves AUC. Keeping the model.
Training on augumented user 136780 5/50 current_auc = 0.5671313279530448
User 136780 AUC after training: 0.5671313279530448
User 136780 does not improve AUC. Reverting changes.
Training on augumented user 130510 6/50 current_auc = 0.5671313279530448
User 130510 AUC after training: 0.566397652237711
User 130510 does not improve AUC. Reverting changes.
Training on augumented user 81684 7/50 current_auc = 0.5671313279530448
User 81684 AUC after training: 0.5649303008070432
User 81684 does not improve AUC. Reverting changes.
Training on augumented user 101781 8/50 current_auc = 0.5671313279530448
User 101781 AUC after training: 0.5634629493763756
User 101781 does not improve AUC. Reverting changes.
Training on augumented user 109130 9/50 current_auc = 0.5671313279530448
User 109130 AUC after training: 0.5671313279530448
User 109130 does not improve AUC. Reverting changes.
Training on augumented user 43780 10/50 current_auc = 0.5671313279530448
User 43780 AUC after training: 0.5678650036683786
User 43780 improves AUC. Keeping the model.
Training on augumented user 53719 11/50 current_auc = 0.5678650036683786
User 53719 AUC after training: 0.5649303008070433
User 53719 does not improve AUC. Reverting changes.
Training on augumented user 14113 12/50 current_auc = 0.5678650036683786
User 14113 AUC after training: 0.5649303008070432
User 14113 does not improve AUC. Reverting changes.
Training on augumented user 33687 13/50 current_auc = 0.5678650036683786
User 33687 AUC after training: 0.566397652237711
User 33687 does not improve AUC. Reverting changes.
Training on augumented user 24040 14/50 current_auc = 0.5678650036683786
User 24040 AUC after training: 0.5671313279530448
User 24040 does not improve AUC. Reverting changes.
Training on augumented user 21172 15/50 current_auc = 0.5678650036683786
User 21172 AUC after training: 0.5678650036683786
User 21172 does not improve AUC. Reverting changes.
Training on augumented user 33219 16/50 current_auc = 0.5678650036683786
User 33219 AUC after training: 0.5678650036683786
User 33219 does not improve AUC. Reverting changes.
Training on augumented user 95266 17/50 current_auc = 0.5678650036683786
User 95266 AUC after training: 0.5649303008070432
User 95266 does not improve AUC. Reverting changes.
Training on augumented user 62466 18/50 current_auc = 0.5678650036683786
User 62466 AUC after training: 0.566397652237711
User 62466 does not improve AUC. Reverting changes.
Training on augumented user 83566 19/50 current_auc = 0.5678650036683786
User 83566 AUC after training: 0.566397652237711
User 83566 does not improve AUC. Reverting changes.
Training on augumented user 121400 20/50 current_auc = 0.5678650036683786
User 121400 AUC after training: 0.5671313279530448
User 121400 does not improve AUC. Reverting changes.
Training on augumented user 137569 21/50 current_auc = 0.5678650036683786
User 137569 AUC after training: 0.5656639765223771
User 137569 does not improve AUC. Reverting changes.
Training on augumented user 120938 22/50 current_auc = 0.5678650036683786
User 120938 AUC after training: 0.5685986793837123
User 120938 improves AUC. Keeping the model.
Training on augumented user 134353 23/50 current_auc = 0.5685986793837123
User 134353 AUC after training: 0.5685986793837123
User 134353 does not improve AUC. Reverting changes.
Training on augumented user 100622 24/50 current_auc = 0.5685986793837123
User 100622 AUC after training: 0.5671313279530448
User 100622 does not improve AUC. Reverting changes.
Training on augumented user 106082 25/50 current_auc = 0.5685986793837123
User 106082 AUC after training: 0.5678650036683786
User 106082 does not improve AUC. Reverting changes.
Training on augumented user 130004 26/50 current_auc = 0.5685986793837123
User 130004 AUC after training: 0.566397652237711
User 130004 does not improve AUC. Reverting changes.
Training on augumented user 29285 27/50 current_auc = 0.5685986793837123
User 29285 AUC after training: 0.5649303008070432
User 29285 does not improve AUC. Reverting changes.
Training on augumented user 53452 28/50 current_auc = 0.5685986793837123
User 53452 AUC after training: 0.5678650036683786
User 53452 does not improve AUC. Reverting changes.
Training on augumented user 122195 29/50 current_auc = 0.5685986793837123
User 122195 AUC after training: 0.5685986793837123
User 122195 does not improve AUC. Reverting changes.
Training on augumented user 81032 30/50 current_auc = 0.5685986793837123
User 81032 AUC after training: 0.5678650036683786
User 81032 does not improve AUC. Reverting changes.
Training on augumented user 74593 31/50 current_auc = 0.5685986793837123
User 74593 AUC after training: 0.5671313279530448
User 74593 does not improve AUC. Reverting changes.
Training on augumented user 56126 32/50 current_auc = 0.5685986793837123
User 56126 AUC after training: 0.5685986793837123
User 56126 does not improve AUC. Reverting changes.
Training on augumented user 104362 33/50 current_auc = 0.5685986793837123
User 104362 AUC after training: 0.566397652237711
User 104362 does not improve AUC. Reverting changes.
Training on augumented user 42547 34/50 current_auc = 0.5685986793837123
User 42547 AUC after training: 0.566397652237711
User 42547 does not improve AUC. Reverting changes.
Training on augumented user 60143 35/50 current_auc = 0.5685986793837123
User 60143 AUC after training: 0.5678650036683786
User 60143 does not improve AUC. Reverting changes.
Training on augumented user 70050 36/50 current_auc = 0.5685986793837123
User 70050 AUC after training: 0.5671313279530448
User 70050 does not improve AUC. Reverting changes.
Training on augumented user 37755 37/50 current_auc = 0.5685986793837123
User 37755 AUC after training: 0.5663976522377109
User 37755 does not improve AUC. Reverting changes.
Training on augumented user 13640 38/50 current_auc = 0.5685986793837123
User 13640 AUC after training: 0.5685986793837123
User 13640 does not improve AUC. Reverting changes.
Training on augumented user 21882 39/50 current_auc = 0.5685986793837123
User 21882 AUC after training: 0.5700660308143801
User 21882 improves AUC. Keeping the model.
Training on augumented user 81979 40/50 current_auc = 0.5700660308143801
User 81979 AUC after training: 0.566397652237711
User 81979 does not improve AUC. Reverting changes.
Training on augumented user 31765 41/50 current_auc = 0.5700660308143801
User 31765 AUC after training: 0.5678650036683786
User 31765 does not improve AUC. Reverting changes.
Training on augumented user 43567 42/50 current_auc = 0.5700660308143801
User 43567 AUC after training: 0.5685986793837124
User 43567 does not improve AUC. Reverting changes.
Training on augumented user 48192 43/50 current_auc = 0.5700660308143801
User 48192 AUC after training: 0.5685986793837123
User 48192 does not improve AUC. Reverting changes.
Training on augumented user 86216 44/50 current_auc = 0.5700660308143801
User 86216 AUC after training: 0.5693323550990463
User 86216 does not improve AUC. Reverting changes.
Training on augumented user 102742 45/50 current_auc = 0.5700660308143801
User 102742 AUC after training: 0.5685986793837123
User 102742 does not improve AUC. Reverting changes.
Training on augumented user 22444 46/50 current_auc = 0.5700660308143801
User 22444 AUC after training: 0.5685986793837123
User 22444 does not improve AUC. Reverting changes.
Training on augumented user 34169 47/50 current_auc = 0.5700660308143801
User 34169 AUC after training: 0.5685986793837124
User 34169 does not improve AUC. Reverting changes.
Training on augumented user 18878 48/50 current_auc = 0.5700660308143801
User 18878 AUC after training: 0.5693323550990463
User 18878 does not improve AUC. Reverting changes.
Training on augumented user 123731 49/50 current_auc = 0.5700660308143801
User 123731 AUC after training: 0.5671313279530448
User 123731 does not improve AUC. Reverting changes.
[2024-12-02 19:56:10.419025] start test user 116106 254/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:56:11.055298] start test user 116106 254/567 recall augumented users by random, augumented_users = [40202, 11485, 117029, 18572, 138189, 71245, 119796, 114650, 41972, 4330, 114249, 24434, 40447, 105709, 63585, 11734, 130112, 20275, 16859, 111091, 138015, 6226, 82381, 40570, 34989, 126764, 46958, 27417, 23513, 124759, 62555, 93262, 63999, 4278, 23262, 98955, 70469, 84001, 59714, 109474, 107236, 77739, 122943, 90518, 7242, 134407, 117412, 103461, 137484, 135892]
[2024-12-02 19:56:11.083215] user = 116106 Cloud 254/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:56:11.097474] user = 116106 Local 254/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:56:11.119727] user = 116106 Local+ 254/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:56:14.020340] user = 116106 MPDA- 254/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 40202 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40202 AUC after training: 0.5
User 40202 does not improve AUC. Reverting changes.
Training on augumented user 11485 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11485 AUC after training: 0.5
User 11485 does not improve AUC. Reverting changes.
Training on augumented user 117029 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117029 AUC after training: 0.5
User 117029 does not improve AUC. Reverting changes.
Training on augumented user 18572 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18572 AUC after training: 0.5
User 18572 does not improve AUC. Reverting changes.
Training on augumented user 138189 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 138189 AUC after training: 0.5
User 138189 does not improve AUC. Reverting changes.
Training on augumented user 71245 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71245 AUC after training: 0.5
User 71245 does not improve AUC. Reverting changes.
Training on augumented user 119796 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 119796 AUC after training: 0.5
User 119796 does not improve AUC. Reverting changes.
Training on augumented user 114650 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114650 AUC after training: 0.5
User 114650 does not improve AUC. Reverting changes.
Training on augumented user 41972 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41972 AUC after training: 0.5
User 41972 does not improve AUC. Reverting changes.
Training on augumented user 4330 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4330 AUC after training: 0.5
User 4330 does not improve AUC. Reverting changes.
Training on augumented user 114249 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114249 AUC after training: 0.5
User 114249 does not improve AUC. Reverting changes.
Training on augumented user 24434 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24434 AUC after training: 0.5
User 24434 does not improve AUC. Reverting changes.
Training on augumented user 40447 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40447 AUC after training: 0.5
User 40447 does not improve AUC. Reverting changes.
Training on augumented user 105709 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105709 AUC after training: 0.5
User 105709 does not improve AUC. Reverting changes.
Training on augumented user 63585 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63585 AUC after training: 0.5
User 63585 does not improve AUC. Reverting changes.
Training on augumented user 11734 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11734 AUC after training: 0.5
User 11734 does not improve AUC. Reverting changes.
Training on augumented user 130112 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130112 AUC after training: 0.5
User 130112 does not improve AUC. Reverting changes.
Training on augumented user 20275 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20275 AUC after training: 0.5
User 20275 does not improve AUC. Reverting changes.
Training on augumented user 16859 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16859 AUC after training: 0.5
User 16859 does not improve AUC. Reverting changes.
Training on augumented user 111091 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111091 AUC after training: 0.5
User 111091 does not improve AUC. Reverting changes.
Training on augumented user 138015 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 138015 AUC after training: 0.5
User 138015 does not improve AUC. Reverting changes.
Training on augumented user 6226 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6226 AUC after training: 0.5
User 6226 does not improve AUC. Reverting changes.
Training on augumented user 82381 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82381 AUC after training: 0.5
User 82381 does not improve AUC. Reverting changes.
Training on augumented user 40570 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40570 AUC after training: 0.5
User 40570 does not improve AUC. Reverting changes.
Training on augumented user 34989 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 34989 AUC after training: 0.5
User 34989 does not improve AUC. Reverting changes.
Training on augumented user 126764 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126764 AUC after training: 0.5
User 126764 does not improve AUC. Reverting changes.
Training on augumented user 46958 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 46958 AUC after training: 0.5
User 46958 does not improve AUC. Reverting changes.
Training on augumented user 27417 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27417 AUC after training: 0.5
User 27417 does not improve AUC. Reverting changes.
Training on augumented user 23513 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23513 AUC after training: 0.5
User 23513 does not improve AUC. Reverting changes.
Training on augumented user 124759 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124759 AUC after training: 0.5
User 124759 does not improve AUC. Reverting changes.
Training on augumented user 62555 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62555 AUC after training: 0.5
User 62555 does not improve AUC. Reverting changes.
Training on augumented user 93262 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93262 AUC after training: 0.5
User 93262 does not improve AUC. Reverting changes.
Training on augumented user 63999 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63999 AUC after training: 0.5
User 63999 does not improve AUC. Reverting changes.
Training on augumented user 4278 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4278 AUC after training: 0.5
User 4278 does not improve AUC. Reverting changes.
Training on augumented user 23262 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23262 AUC after training: 0.5
User 23262 does not improve AUC. Reverting changes.
Training on augumented user 98955 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98955 AUC after training: 0.5
User 98955 does not improve AUC. Reverting changes.
Training on augumented user 70469 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70469 AUC after training: 0.5
User 70469 does not improve AUC. Reverting changes.
Training on augumented user 84001 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84001 AUC after training: 0.5
User 84001 does not improve AUC. Reverting changes.
Training on augumented user 59714 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59714 AUC after training: 0.5
User 59714 does not improve AUC. Reverting changes.
Training on augumented user 109474 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109474 AUC after training: 0.5
User 109474 does not improve AUC. Reverting changes.
Training on augumented user 107236 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107236 AUC after training: 0.5
User 107236 does not improve AUC. Reverting changes.
Training on augumented user 77739 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77739 AUC after training: 0.5
User 77739 does not improve AUC. Reverting changes.
Training on augumented user 122943 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122943 AUC after training: 0.5
User 122943 does not improve AUC. Reverting changes.
Training on augumented user 90518 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90518 AUC after training: 0.5
User 90518 does not improve AUC. Reverting changes.
Training on augumented user 7242 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7242 AUC after training: 0.5
User 7242 does not improve AUC. Reverting changes.
Training on augumented user 134407 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134407 AUC after training: 0.5
User 134407 does not improve AUC. Reverting changes.
Training on augumented user 117412 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117412 AUC after training: 0.5
User 117412 does not improve AUC. Reverting changes.
Training on augumented user 103461 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103461 AUC after training: 0.5
User 103461 does not improve AUC. Reverting changes.
Training on augumented user 137484 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137484 AUC after training: 0.5
User 137484 does not improve AUC. Reverting changes.
Training on augumented user 135892 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 135892 AUC after training: 0.5
User 135892 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:56:41.373864] start test user 116113 255/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:56:41.795524] start test user 116113 255/567 recall augumented users by random, augumented_users = [15433, 45505, 98794, 126369, 32578, 55643, 121387, 35886, 38599, 20821, 42571, 102619, 65159, 70425, 51881, 16573, 90057, 48206, 25151, 56138, 39165, 24521, 120818, 102365, 50485, 109326, 128146, 28827, 52550, 16142, 14346, 9344, 137790, 119881, 7885, 55151, 131679, 49239, 1126, 74830, 70008, 53607, 99910, 14972, 80125, 106203, 18125, 79359, 44762, 38522]
[2024-12-02 19:56:41.811416] user = 116113 Cloud 255/567
[2024-12-02 19:56:41.849068] user = 116113 Local 255/567
[2024-12-02 19:56:41.947698] user = 116113 Local+ 255/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:56:43.330788] user = 116113 MPDA- 255/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7773109243697479
Training on augumented user 15433 0/50 current_auc = 0.7773109243697479
User 15433 AUC after training: 0.7769607843137255
User 15433 does not improve AUC. Reverting changes.
Training on augumented user 45505 1/50 current_auc = 0.7773109243697479
User 45505 AUC after training: 0.7783613445378151
User 45505 improves AUC. Keeping the model.
Training on augumented user 98794 2/50 current_auc = 0.7783613445378151
User 98794 AUC after training: 0.7769607843137256
User 98794 does not improve AUC. Reverting changes.
Training on augumented user 126369 3/50 current_auc = 0.7783613445378151
User 126369 AUC after training: 0.7776610644257703
User 126369 does not improve AUC. Reverting changes.
Training on augumented user 32578 4/50 current_auc = 0.7783613445378151
User 32578 AUC after training: 0.7766106442577031
User 32578 does not improve AUC. Reverting changes.
Training on augumented user 55643 5/50 current_auc = 0.7783613445378151
User 55643 AUC after training: 0.7776610644257703
User 55643 does not improve AUC. Reverting changes.
Training on augumented user 121387 6/50 current_auc = 0.7783613445378151
User 121387 AUC after training: 0.7769607843137255
User 121387 does not improve AUC. Reverting changes.
Training on augumented user 35886 7/50 current_auc = 0.7783613445378151
User 35886 AUC after training: 0.7755602240896358
User 35886 does not improve AUC. Reverting changes.
Training on augumented user 38599 8/50 current_auc = 0.7783613445378151
User 38599 AUC after training: 0.7769607843137255
User 38599 does not improve AUC. Reverting changes.
Training on augumented user 20821 9/50 current_auc = 0.7783613445378151
User 20821 AUC after training: 0.7759103641456583
User 20821 does not improve AUC. Reverting changes.
Training on augumented user 42571 10/50 current_auc = 0.7783613445378151
User 42571 AUC after training: 0.7773109243697479
User 42571 does not improve AUC. Reverting changes.
Training on augumented user 102619 11/50 current_auc = 0.7783613445378151
User 102619 AUC after training: 0.7762605042016808
User 102619 does not improve AUC. Reverting changes.
Training on augumented user 65159 12/50 current_auc = 0.7783613445378151
User 65159 AUC after training: 0.7776610644257703
User 65159 does not improve AUC. Reverting changes.
Training on augumented user 70425 13/50 current_auc = 0.7783613445378151
User 70425 AUC after training: 0.7762605042016808
User 70425 does not improve AUC. Reverting changes.
Training on augumented user 51881 14/50 current_auc = 0.7783613445378151
User 51881 AUC after training: 0.7776610644257703
User 51881 does not improve AUC. Reverting changes.
Training on augumented user 16573 15/50 current_auc = 0.7783613445378151
User 16573 AUC after training: 0.7759103641456583
User 16573 does not improve AUC. Reverting changes.
Training on augumented user 90057 16/50 current_auc = 0.7783613445378151
User 90057 AUC after training: 0.7762605042016807
User 90057 does not improve AUC. Reverting changes.
Training on augumented user 48206 17/50 current_auc = 0.7783613445378151
User 48206 AUC after training: 0.7769607843137255
User 48206 does not improve AUC. Reverting changes.
Training on augumented user 25151 18/50 current_auc = 0.7783613445378151
User 25151 AUC after training: 0.7776610644257703
User 25151 does not improve AUC. Reverting changes.
Training on augumented user 56138 19/50 current_auc = 0.7783613445378151
User 56138 AUC after training: 0.7776610644257703
User 56138 does not improve AUC. Reverting changes.
Training on augumented user 39165 20/50 current_auc = 0.7783613445378151
User 39165 AUC after training: 0.7776610644257703
User 39165 does not improve AUC. Reverting changes.
Training on augumented user 24521 21/50 current_auc = 0.7783613445378151
User 24521 AUC after training: 0.7769607843137255
User 24521 does not improve AUC. Reverting changes.
Training on augumented user 120818 22/50 current_auc = 0.7783613445378151
User 120818 AUC after training: 0.7783613445378151
User 120818 does not improve AUC. Reverting changes.
Training on augumented user 102365 23/50 current_auc = 0.7783613445378151
User 102365 AUC after training: 0.7755602240896359
User 102365 does not improve AUC. Reverting changes.
Training on augumented user 50485 24/50 current_auc = 0.7783613445378151
User 50485 AUC after training: 0.7769607843137255
User 50485 does not improve AUC. Reverting changes.
Training on augumented user 109326 25/50 current_auc = 0.7783613445378151
User 109326 AUC after training: 0.7766106442577031
User 109326 does not improve AUC. Reverting changes.
Training on augumented user 128146 26/50 current_auc = 0.7783613445378151
User 128146 AUC after training: 0.7766106442577031
User 128146 does not improve AUC. Reverting changes.
Training on augumented user 28827 27/50 current_auc = 0.7783613445378151
User 28827 AUC after training: 0.7762605042016807
User 28827 does not improve AUC. Reverting changes.
Training on augumented user 52550 28/50 current_auc = 0.7783613445378151
User 52550 AUC after training: 0.7776610644257704
User 52550 does not improve AUC. Reverting changes.
Training on augumented user 16142 29/50 current_auc = 0.7783613445378151
User 16142 AUC after training: 0.7769607843137255
User 16142 does not improve AUC. Reverting changes.
Training on augumented user 14346 30/50 current_auc = 0.7783613445378151
User 14346 AUC after training: 0.7762605042016807
User 14346 does not improve AUC. Reverting changes.
Training on augumented user 9344 31/50 current_auc = 0.7783613445378151
User 9344 AUC after training: 0.7769607843137254
User 9344 does not improve AUC. Reverting changes.
Training on augumented user 137790 32/50 current_auc = 0.7783613445378151
User 137790 AUC after training: 0.7776610644257703
User 137790 does not improve AUC. Reverting changes.
Training on augumented user 119881 33/50 current_auc = 0.7783613445378151
User 119881 AUC after training: 0.7783613445378151
User 119881 does not improve AUC. Reverting changes.
Training on augumented user 7885 34/50 current_auc = 0.7783613445378151
User 7885 AUC after training: 0.7776610644257703
User 7885 does not improve AUC. Reverting changes.
Training on augumented user 55151 35/50 current_auc = 0.7783613445378151
User 55151 AUC after training: 0.7769607843137255
User 55151 does not improve AUC. Reverting changes.
Training on augumented user 131679 36/50 current_auc = 0.7783613445378151
User 131679 AUC after training: 0.7773109243697479
User 131679 does not improve AUC. Reverting changes.
Training on augumented user 49239 37/50 current_auc = 0.7783613445378151
User 49239 AUC after training: 0.7769607843137255
User 49239 does not improve AUC. Reverting changes.
Training on augumented user 1126 38/50 current_auc = 0.7783613445378151
User 1126 AUC after training: 0.7766106442577031
User 1126 does not improve AUC. Reverting changes.
Training on augumented user 74830 39/50 current_auc = 0.7783613445378151
User 74830 AUC after training: 0.7762605042016808
User 74830 does not improve AUC. Reverting changes.
Training on augumented user 70008 40/50 current_auc = 0.7783613445378151
User 70008 AUC after training: 0.7762605042016808
User 70008 does not improve AUC. Reverting changes.
Training on augumented user 53607 41/50 current_auc = 0.7783613445378151
User 53607 AUC after training: 0.7752100840336135
User 53607 does not improve AUC. Reverting changes.
Training on augumented user 99910 42/50 current_auc = 0.7783613445378151
User 99910 AUC after training: 0.7783613445378151
User 99910 does not improve AUC. Reverting changes.
Training on augumented user 14972 43/50 current_auc = 0.7783613445378151
User 14972 AUC after training: 0.7776610644257703
User 14972 does not improve AUC. Reverting changes.
Training on augumented user 80125 44/50 current_auc = 0.7783613445378151
User 80125 AUC after training: 0.7776610644257703
User 80125 does not improve AUC. Reverting changes.
Training on augumented user 106203 45/50 current_auc = 0.7783613445378151
User 106203 AUC after training: 0.7769607843137255
User 106203 does not improve AUC. Reverting changes.
Training on augumented user 18125 46/50 current_auc = 0.7783613445378151
User 18125 AUC after training: 0.7762605042016806
User 18125 does not improve AUC. Reverting changes.
Training on augumented user 79359 47/50 current_auc = 0.7783613445378151
User 79359 AUC after training: 0.7769607843137255
User 79359 does not improve AUC. Reverting changes.
Training on augumented user 44762 48/50 current_auc = 0.7783613445378151
User 44762 AUC after training: 0.7773109243697478
User 44762 does not improve AUC. Reverting changes.
Training on augumented user 38522 49/50 current_auc = 0.7783613445378151
User 38522 AUC after training: 0.7769607843137256
User 38522 does not improve AUC. Reverting changes.
[2024-12-02 19:57:14.753637] start test user 116189 256/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:57:15.338061] start test user 116189 256/567 recall augumented users by random, augumented_users = [107159, 75655, 47666, 59279, 89666, 46052, 105773, 103477, 49232, 58828, 83764, 134992, 53236, 70280, 31246, 92300, 16437, 113837, 103980, 105042, 27998, 124369, 20688, 126683, 107747, 11938, 79786, 138327, 54650, 85641, 32694, 64603, 16431, 64033, 67450, 6826, 58361, 123411, 102131, 13670, 27823, 22259, 80580, 1773, 32930, 36019, 3644, 121050, 23716, 119344]
[2024-12-02 19:57:15.361853] user = 116189 Cloud 256/567
[2024-12-02 19:57:15.422670] user = 116189 Local 256/567
[2024-12-02 19:57:15.812831] user = 116189 Local+ 256/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:57:17.887136] user = 116189 MPDA- 256/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6458636407719911
Training on augumented user 107159 0/50 current_auc = 0.6458636407719911
User 107159 AUC after training: 0.6460673067597711
User 107159 improves AUC. Keeping the model.
Training on augumented user 75655 1/50 current_auc = 0.6460673067597711
User 75655 AUC after training: 0.6461206478518088
User 75655 improves AUC. Keeping the model.
Training on augumented user 47666 2/50 current_auc = 0.6461206478518088
User 47666 AUC after training: 0.645902434293473
User 47666 does not improve AUC. Reverting changes.
Training on augumented user 59279 3/50 current_auc = 0.6461206478518088
User 59279 AUC after training: 0.6461061002812529
User 59279 does not improve AUC. Reverting changes.
Training on augumented user 89666 4/50 current_auc = 0.6461206478518088
User 89666 AUC after training: 0.6460867035205121
User 89666 does not improve AUC. Reverting changes.
Training on augumented user 46052 5/50 current_auc = 0.6461206478518088
User 46052 AUC after training: 0.6461739889438464
User 46052 improves AUC. Keeping the model.
Training on augumented user 105773 6/50 current_auc = 0.6461739889438464
User 105773 AUC after training: 0.6463679565512559
User 105773 improves AUC. Keeping the model.
Training on augumented user 103477 7/50 current_auc = 0.6463679565512559
User 103477 AUC after training: 0.6459994180971778
User 103477 does not improve AUC. Reverting changes.
Training on augumented user 49232 8/50 current_auc = 0.6463679565512559
User 49232 AUC after training: 0.6463340122199592
User 49232 does not improve AUC. Reverting changes.
Training on augumented user 58828 9/50 current_auc = 0.6463679565512559
User 58828 AUC after training: 0.6463437106003298
User 58828 does not improve AUC. Reverting changes.
Training on augumented user 83764 10/50 current_auc = 0.6463679565512559
User 83764 AUC after training: 0.6467122490544079
User 83764 improves AUC. Keeping the model.
Training on augumented user 134992 11/50 current_auc = 0.6467122490544079
User 134992 AUC after training: 0.6466007176801475
User 134992 does not improve AUC. Reverting changes.
Training on augumented user 53236 12/50 current_auc = 0.6467122490544079
User 53236 AUC after training: 0.6465570749684802
User 53236 does not improve AUC. Reverting changes.
Training on augumented user 70280 13/50 current_auc = 0.6467122490544079
User 70280 AUC after training: 0.6467025506740374
User 70280 does not improve AUC. Reverting changes.
Training on augumented user 31246 14/50 current_auc = 0.6467122490544079
User 31246 AUC after training: 0.6462515759868102
User 31246 does not improve AUC. Reverting changes.
Training on augumented user 92300 15/50 current_auc = 0.6467122490544079
User 92300 AUC after training: 0.6468868199010767
User 92300 improves AUC. Keeping the model.
Training on augumented user 16437 16/50 current_auc = 0.6468868199010767
User 16437 AUC after training: 0.6469595577538552
User 16437 improves AUC. Keeping the model.
Training on augumented user 113837 17/50 current_auc = 0.6469595577538552
User 113837 AUC after training: 0.6471147318397827
User 113837 improves AUC. Keeping the model.
Training on augumented user 103980 18/50 current_auc = 0.6471147318397827
User 103980 AUC after training: 0.6468189312384832
User 103980 does not improve AUC. Reverting changes.
Training on augumented user 105042 19/50 current_auc = 0.6471147318397827
User 105042 AUC after training: 0.6468916690912617
User 105042 does not improve AUC. Reverting changes.
Training on augumented user 27998 20/50 current_auc = 0.6471147318397827
User 27998 AUC after training: 0.6470710891281156
User 27998 does not improve AUC. Reverting changes.
Training on augumented user 124369 21/50 current_auc = 0.6471147318397827
User 124369 AUC after training: 0.6472796043060809
User 124369 improves AUC. Keeping the model.
Training on augumented user 20688 22/50 current_auc = 0.6472796043060809
User 20688 AUC after training: 0.6472796043060809
User 20688 does not improve AUC. Reverting changes.
Training on augumented user 126683 23/50 current_auc = 0.6472796043060809
User 126683 AUC after training: 0.6470274464164485
User 126683 does not improve AUC. Reverting changes.
Training on augumented user 107747 24/50 current_auc = 0.6472796043060809
User 107747 AUC after training: 0.6471438269808941
User 107747 does not improve AUC. Reverting changes.
Training on augumented user 11938 25/50 current_auc = 0.6472796043060809
User 11938 AUC after training: 0.6468528755697798
User 11938 does not improve AUC. Reverting changes.
Training on augumented user 79786 26/50 current_auc = 0.6472796043060809
User 79786 AUC after training: 0.6470468431771894
User 79786 does not improve AUC. Reverting changes.
Training on augumented user 138327 27/50 current_auc = 0.6472796043060809
User 138327 AUC after training: 0.6473086994471923
User 138327 improves AUC. Keeping the model.
Training on augumented user 54650 28/50 current_auc = 0.6473086994471923
User 54650 AUC after training: 0.6468480263795946
User 54650 does not improve AUC. Reverting changes.
Training on augumented user 85641 29/50 current_auc = 0.6473086994471923
User 85641 AUC after training: 0.6468480263795946
User 85641 does not improve AUC. Reverting changes.
Training on augumented user 32694 30/50 current_auc = 0.6473086994471923
User 32694 AUC after training: 0.647240810784599
User 32694 does not improve AUC. Reverting changes.
Training on augumented user 64603 31/50 current_auc = 0.6473086994471923
User 64603 AUC after training: 0.6471535253612647
User 64603 does not improve AUC. Reverting changes.
Training on augumented user 16431 32/50 current_auc = 0.6473086994471923
User 16431 AUC after training: 0.6473086994471923
User 16431 does not improve AUC. Reverting changes.
Training on augumented user 64033 33/50 current_auc = 0.6473086994471923
User 64033 AUC after training: 0.6474590243429348
User 64033 improves AUC. Keeping the model.
Training on augumented user 67450 34/50 current_auc = 0.6474590243429348
User 67450 AUC after training: 0.6473329453981185
User 67450 does not improve AUC. Reverting changes.
Training on augumented user 6826 35/50 current_auc = 0.6474590243429348
User 6826 AUC after training: 0.6474105324410824
User 6826 does not improve AUC. Reverting changes.
Training on augumented user 58361 36/50 current_auc = 0.6474590243429348
User 58361 AUC after training: 0.6474881194840462
User 58361 improves AUC. Keeping the model.
Training on augumented user 123411 37/50 current_auc = 0.6474881194840462
User 123411 AUC after training: 0.64736204053923
User 123411 does not improve AUC. Reverting changes.
Training on augumented user 102131 38/50 current_auc = 0.6474881194840462
User 102131 AUC after training: 0.6464794879255165
User 102131 does not improve AUC. Reverting changes.
Training on augumented user 13670 39/50 current_auc = 0.6474881194840462
User 13670 AUC after training: 0.6474396275821939
User 13670 does not improve AUC. Reverting changes.
Training on augumented user 27823 40/50 current_auc = 0.6474881194840462
User 27823 AUC after training: 0.64736204053923
User 27823 does not improve AUC. Reverting changes.
Training on augumented user 22259 41/50 current_auc = 0.6474881194840462
User 22259 AUC after training: 0.64736204053923
User 22259 does not improve AUC. Reverting changes.
Training on augumented user 80580 42/50 current_auc = 0.6474881194840462
User 80580 AUC after training: 0.6474202308214528
User 80580 does not improve AUC. Reverting changes.
Training on augumented user 1773 43/50 current_auc = 0.6474881194840462
User 1773 AUC after training: 0.6474687227233052
User 1773 does not improve AUC. Reverting changes.
Training on augumented user 32930 44/50 current_auc = 0.6474881194840462
User 32930 AUC after training: 0.6474056832508971
User 32930 does not improve AUC. Reverting changes.
Training on augumented user 36019 45/50 current_auc = 0.6474881194840462
User 36019 AUC after training: 0.6473911356803415
User 36019 does not improve AUC. Reverting changes.
Training on augumented user 3644 46/50 current_auc = 0.6474881194840462
User 3644 AUC after training: 0.6476141984288624
User 3644 improves AUC. Keeping the model.
Training on augumented user 121050 47/50 current_auc = 0.6476141984288624
User 121050 AUC after training: 0.6478275627970129
User 121050 improves AUC. Keeping the model.
Training on augumented user 23716 48/50 current_auc = 0.6478275627970129
User 23716 AUC after training: 0.6476529919503442
User 23716 does not improve AUC. Reverting changes.
Training on augumented user 119344 49/50 current_auc = 0.6478275627970129
User 119344 AUC after training: 0.6477596741344196
User 119344 does not improve AUC. Reverting changes.
[2024-12-02 19:57:51.118718] start test user 116204 257/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:57:51.571402] start test user 116204 257/567 recall augumented users by random, augumented_users = [49186, 73704, 84366, 32105, 13106, 10766, 131126, 40489, 47508, 70263, 30684, 46635, 101372, 30270, 33935, 45865, 46483, 95776, 54021, 30483, 5255, 74997, 2399, 118787, 12072, 82440, 114887, 27918, 32079, 122096, 88622, 22425, 20637, 100462, 83994, 11920, 97826, 27120, 71154, 57239, 117805, 24071, 97165, 86522, 43547, 122281, 2457, 26990, 18502, 49110]
[2024-12-02 19:57:51.588816] user = 116204 Cloud 257/567
[2024-12-02 19:57:51.606585] user = 116204 Local 257/567
[2024-12-02 19:57:51.652263] user = 116204 Local+ 257/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:57:54.420499] user = 116204 MPDA- 257/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.695945945945946
Training on augumented user 49186 0/50 current_auc = 0.695945945945946
User 49186 AUC after training: 0.6938122332859177
User 49186 does not improve AUC. Reverting changes.
Training on augumented user 73704 1/50 current_auc = 0.695945945945946
User 73704 AUC after training: 0.695945945945946
User 73704 does not improve AUC. Reverting changes.
Training on augumented user 84366 2/50 current_auc = 0.695945945945946
User 84366 AUC after training: 0.695945945945946
User 84366 does not improve AUC. Reverting changes.
Training on augumented user 32105 3/50 current_auc = 0.695945945945946
User 32105 AUC after training: 0.695945945945946
User 32105 does not improve AUC. Reverting changes.
Training on augumented user 13106 4/50 current_auc = 0.695945945945946
User 13106 AUC after training: 0.695945945945946
User 13106 does not improve AUC. Reverting changes.
Training on augumented user 10766 5/50 current_auc = 0.695945945945946
User 10766 AUC after training: 0.6973684210526317
User 10766 improves AUC. Keeping the model.
Training on augumented user 131126 6/50 current_auc = 0.6973684210526317
User 131126 AUC after training: 0.6966571834992888
User 131126 does not improve AUC. Reverting changes.
Training on augumented user 40489 7/50 current_auc = 0.6973684210526317
User 40489 AUC after training: 0.6952347083926033
User 40489 does not improve AUC. Reverting changes.
Training on augumented user 47508 8/50 current_auc = 0.6973684210526317
User 47508 AUC after training: 0.696657183499289
User 47508 does not improve AUC. Reverting changes.
Training on augumented user 70263 9/50 current_auc = 0.6973684210526317
User 70263 AUC after training: 0.6938122332859177
User 70263 does not improve AUC. Reverting changes.
Training on augumented user 30684 10/50 current_auc = 0.6973684210526317
User 30684 AUC after training: 0.6973684210526317
User 30684 does not improve AUC. Reverting changes.
Training on augumented user 46635 11/50 current_auc = 0.6973684210526317
User 46635 AUC after training: 0.6984352773826458
User 46635 improves AUC. Keeping the model.
Training on augumented user 101372 12/50 current_auc = 0.6984352773826458
User 101372 AUC after training: 0.6931009957325749
User 101372 does not improve AUC. Reverting changes.
Training on augumented user 30270 13/50 current_auc = 0.6984352773826458
User 30270 AUC after training: 0.697724039829303
User 30270 does not improve AUC. Reverting changes.
Training on augumented user 33935 14/50 current_auc = 0.6984352773826458
User 33935 AUC after training: 0.6980796586059744
User 33935 does not improve AUC. Reverting changes.
Training on augumented user 45865 15/50 current_auc = 0.6984352773826458
User 45865 AUC after training: 0.6970128022759602
User 45865 does not improve AUC. Reverting changes.
Training on augumented user 46483 16/50 current_auc = 0.6984352773826458
User 46483 AUC after training: 0.7023470839260313
User 46483 improves AUC. Keeping the model.
Training on augumented user 95776 17/50 current_auc = 0.7023470839260313
User 95776 AUC after training: 0.7023470839260313
User 95776 does not improve AUC. Reverting changes.
Training on augumented user 54021 18/50 current_auc = 0.7023470839260313
User 54021 AUC after training: 0.7016358463726884
User 54021 does not improve AUC. Reverting changes.
Training on augumented user 30483 19/50 current_auc = 0.7023470839260313
User 30483 AUC after training: 0.7009246088193456
User 30483 does not improve AUC. Reverting changes.
Training on augumented user 5255 20/50 current_auc = 0.7023470839260313
User 5255 AUC after training: 0.7030583214793741
User 5255 improves AUC. Keeping the model.
Training on augumented user 74997 21/50 current_auc = 0.7030583214793741
User 74997 AUC after training: 0.7023470839260313
User 74997 does not improve AUC. Reverting changes.
Training on augumented user 2399 22/50 current_auc = 0.7030583214793741
User 2399 AUC after training: 0.7019914651493601
User 2399 does not improve AUC. Reverting changes.
Training on augumented user 118787 23/50 current_auc = 0.7030583214793741
User 118787 AUC after training: 0.7044807965860597
User 118787 improves AUC. Keeping the model.
Training on augumented user 12072 24/50 current_auc = 0.7044807965860597
User 12072 AUC after training: 0.7030583214793741
User 12072 does not improve AUC. Reverting changes.
Training on augumented user 82440 25/50 current_auc = 0.7044807965860597
User 82440 AUC after training: 0.7044807965860597
User 82440 does not improve AUC. Reverting changes.
Training on augumented user 114887 26/50 current_auc = 0.7044807965860597
User 114887 AUC after training: 0.7030583214793743
User 114887 does not improve AUC. Reverting changes.
Training on augumented user 27918 27/50 current_auc = 0.7044807965860597
User 27918 AUC after training: 0.703769559032717
User 27918 does not improve AUC. Reverting changes.
Training on augumented user 32079 28/50 current_auc = 0.7044807965860597
User 32079 AUC after training: 0.7044807965860597
User 32079 does not improve AUC. Reverting changes.
Training on augumented user 122096 29/50 current_auc = 0.7044807965860597
User 122096 AUC after training: 0.7030583214793742
User 122096 does not improve AUC. Reverting changes.
Training on augumented user 88622 30/50 current_auc = 0.7044807965860597
User 88622 AUC after training: 0.7023470839260314
User 88622 does not improve AUC. Reverting changes.
Training on augumented user 22425 31/50 current_auc = 0.7044807965860597
User 22425 AUC after training: 0.7027027027027027
User 22425 does not improve AUC. Reverting changes.
Training on augumented user 20637 32/50 current_auc = 0.7044807965860597
User 20637 AUC after training: 0.7023470839260314
User 20637 does not improve AUC. Reverting changes.
Training on augumented user 100462 33/50 current_auc = 0.7044807965860597
User 100462 AUC after training: 0.7037695590327171
User 100462 does not improve AUC. Reverting changes.
Training on augumented user 83994 34/50 current_auc = 0.7044807965860597
User 83994 AUC after training: 0.7048364153627313
User 83994 improves AUC. Keeping the model.
Training on augumented user 11920 35/50 current_auc = 0.7048364153627313
User 11920 AUC after training: 0.7048364153627313
User 11920 does not improve AUC. Reverting changes.
Training on augumented user 97826 36/50 current_auc = 0.7048364153627313
User 97826 AUC after training: 0.70199146514936
User 97826 does not improve AUC. Reverting changes.
Training on augumented user 27120 37/50 current_auc = 0.7048364153627313
User 27120 AUC after training: 0.7048364153627313
User 27120 does not improve AUC. Reverting changes.
Training on augumented user 71154 38/50 current_auc = 0.7048364153627313
User 71154 AUC after training: 0.7034139402560456
User 71154 does not improve AUC. Reverting changes.
Training on augumented user 57239 39/50 current_auc = 0.7048364153627313
User 57239 AUC after training: 0.70199146514936
User 57239 does not improve AUC. Reverting changes.
Training on augumented user 117805 40/50 current_auc = 0.7048364153627313
User 117805 AUC after training: 0.7027027027027027
User 117805 does not improve AUC. Reverting changes.
Training on augumented user 24071 41/50 current_auc = 0.7048364153627313
User 24071 AUC after training: 0.70199146514936
User 24071 does not improve AUC. Reverting changes.
Training on augumented user 97165 42/50 current_auc = 0.7048364153627313
User 97165 AUC after training: 0.70199146514936
User 97165 does not improve AUC. Reverting changes.
Training on augumented user 86522 43/50 current_auc = 0.7048364153627313
User 86522 AUC after training: 0.7062588904694169
User 86522 improves AUC. Keeping the model.
Training on augumented user 43547 44/50 current_auc = 0.7062588904694169
User 43547 AUC after training: 0.7069701280227596
User 43547 improves AUC. Keeping the model.
Training on augumented user 122281 45/50 current_auc = 0.7069701280227596
User 122281 AUC after training: 0.7048364153627311
User 122281 does not improve AUC. Reverting changes.
Training on augumented user 2457 46/50 current_auc = 0.7069701280227596
User 2457 AUC after training: 0.705547652916074
User 2457 does not improve AUC. Reverting changes.
Training on augumented user 26990 47/50 current_auc = 0.7069701280227596
User 26990 AUC after training: 0.7005689900426743
User 26990 does not improve AUC. Reverting changes.
Training on augumented user 18502 48/50 current_auc = 0.7069701280227596
User 18502 AUC after training: 0.7051920341394027
User 18502 does not improve AUC. Reverting changes.
Training on augumented user 49110 49/50 current_auc = 0.7069701280227596
User 49110 AUC after training: 0.7062588904694169
User 49110 does not improve AUC. Reverting changes.
[2024-12-02 19:58:23.364377] start test user 116215 258/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:58:23.803526] start test user 116215 258/567 recall augumented users by random, augumented_users = [102961, 39766, 89505, 31700, 128585, 25062, 75069, 22346, 75494, 50243, 34918, 18840, 55375, 125483, 102266, 36856, 70888, 55512, 39197, 74365, 39614, 67722, 61, 8978, 45857, 85525, 73362, 75469, 47474, 132317, 6584, 99606, 83285, 100615, 3706, 72358, 94253, 122180, 123812, 8767, 5340, 66470, 67389, 104734, 19360, 14780, 20773, 2455, 110527, 129121]
[2024-12-02 19:58:23.819484] user = 116215 Cloud 258/567
[2024-12-02 19:58:23.839443] user = 116215 Local 258/567
[2024-12-02 19:58:24.009814] user = 116215 Local+ 258/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:58:26.334637] user = 116215 MPDA- 258/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6666666666666667
Training on augumented user 102961 0/50 current_auc = 0.6666666666666667
User 102961 AUC after training: 0.6666666666666667
User 102961 does not improve AUC. Reverting changes.
Training on augumented user 39766 1/50 current_auc = 0.6666666666666667
User 39766 AUC after training: 0.6666666666666667
User 39766 does not improve AUC. Reverting changes.
Training on augumented user 89505 2/50 current_auc = 0.6666666666666667
User 89505 AUC after training: 0.6666666666666667
User 89505 does not improve AUC. Reverting changes.
Training on augumented user 31700 3/50 current_auc = 0.6666666666666667
User 31700 AUC after training: 0.6666666666666667
User 31700 does not improve AUC. Reverting changes.
Training on augumented user 128585 4/50 current_auc = 0.6666666666666667
User 128585 AUC after training: 0.6666666666666667
User 128585 does not improve AUC. Reverting changes.
Training on augumented user 25062 5/50 current_auc = 0.6666666666666667
User 25062 AUC after training: 0.6666666666666667
User 25062 does not improve AUC. Reverting changes.
Training on augumented user 75069 6/50 current_auc = 0.6666666666666667
User 75069 AUC after training: 0.6666666666666667
User 75069 does not improve AUC. Reverting changes.
Training on augumented user 22346 7/50 current_auc = 0.6666666666666667
User 22346 AUC after training: 0.6666666666666667
User 22346 does not improve AUC. Reverting changes.
Training on augumented user 75494 8/50 current_auc = 0.6666666666666667
User 75494 AUC after training: 0.6666666666666667
User 75494 does not improve AUC. Reverting changes.
Training on augumented user 50243 9/50 current_auc = 0.6666666666666667
User 50243 AUC after training: 0.6666666666666667
User 50243 does not improve AUC. Reverting changes.
Training on augumented user 34918 10/50 current_auc = 0.6666666666666667
User 34918 AUC after training: 0.6666666666666667
User 34918 does not improve AUC. Reverting changes.
Training on augumented user 18840 11/50 current_auc = 0.6666666666666667
User 18840 AUC after training: 0.6666666666666667
User 18840 does not improve AUC. Reverting changes.
Training on augumented user 55375 12/50 current_auc = 0.6666666666666667
User 55375 AUC after training: 0.6666666666666667
User 55375 does not improve AUC. Reverting changes.
Training on augumented user 125483 13/50 current_auc = 0.6666666666666667
User 125483 AUC after training: 0.6666666666666667
User 125483 does not improve AUC. Reverting changes.
Training on augumented user 102266 14/50 current_auc = 0.6666666666666667
User 102266 AUC after training: 0.6666666666666667
User 102266 does not improve AUC. Reverting changes.
Training on augumented user 36856 15/50 current_auc = 0.6666666666666667
User 36856 AUC after training: 0.6666666666666667
User 36856 does not improve AUC. Reverting changes.
Training on augumented user 70888 16/50 current_auc = 0.6666666666666667
User 70888 AUC after training: 0.6666666666666667
User 70888 does not improve AUC. Reverting changes.
Training on augumented user 55512 17/50 current_auc = 0.6666666666666667
User 55512 AUC after training: 0.6666666666666667
User 55512 does not improve AUC. Reverting changes.
Training on augumented user 39197 18/50 current_auc = 0.6666666666666667
User 39197 AUC after training: 0.6666666666666667
User 39197 does not improve AUC. Reverting changes.
Training on augumented user 74365 19/50 current_auc = 0.6666666666666667
User 74365 AUC after training: 0.6666666666666667
User 74365 does not improve AUC. Reverting changes.
Training on augumented user 39614 20/50 current_auc = 0.6666666666666667
User 39614 AUC after training: 0.6666666666666667
User 39614 does not improve AUC. Reverting changes.
Training on augumented user 67722 21/50 current_auc = 0.6666666666666667
User 67722 AUC after training: 0.6666666666666667
User 67722 does not improve AUC. Reverting changes.
Training on augumented user 61 22/50 current_auc = 0.6666666666666667
User 61 AUC after training: 0.6666666666666667
User 61 does not improve AUC. Reverting changes.
Training on augumented user 8978 23/50 current_auc = 0.6666666666666667
User 8978 AUC after training: 0.6666666666666667
User 8978 does not improve AUC. Reverting changes.
Training on augumented user 45857 24/50 current_auc = 0.6666666666666667
User 45857 AUC after training: 0.6666666666666667
User 45857 does not improve AUC. Reverting changes.
Training on augumented user 85525 25/50 current_auc = 0.6666666666666667
User 85525 AUC after training: 0.6666666666666667
User 85525 does not improve AUC. Reverting changes.
Training on augumented user 73362 26/50 current_auc = 0.6666666666666667
User 73362 AUC after training: 0.6666666666666667
User 73362 does not improve AUC. Reverting changes.
Training on augumented user 75469 27/50 current_auc = 0.6666666666666667
User 75469 AUC after training: 0.6666666666666667
User 75469 does not improve AUC. Reverting changes.
Training on augumented user 47474 28/50 current_auc = 0.6666666666666667
User 47474 AUC after training: 0.6666666666666667
User 47474 does not improve AUC. Reverting changes.
Training on augumented user 132317 29/50 current_auc = 0.6666666666666667
User 132317 AUC after training: 0.6666666666666667
User 132317 does not improve AUC. Reverting changes.
Training on augumented user 6584 30/50 current_auc = 0.6666666666666667
User 6584 AUC after training: 0.6666666666666667
User 6584 does not improve AUC. Reverting changes.
Training on augumented user 99606 31/50 current_auc = 0.6666666666666667
User 99606 AUC after training: 0.6666666666666667
User 99606 does not improve AUC. Reverting changes.
Training on augumented user 83285 32/50 current_auc = 0.6666666666666667
User 83285 AUC after training: 0.6666666666666667
User 83285 does not improve AUC. Reverting changes.
Training on augumented user 100615 33/50 current_auc = 0.6666666666666667
User 100615 AUC after training: 0.6666666666666667
User 100615 does not improve AUC. Reverting changes.
Training on augumented user 3706 34/50 current_auc = 0.6666666666666667
User 3706 AUC after training: 0.6666666666666667
User 3706 does not improve AUC. Reverting changes.
Training on augumented user 72358 35/50 current_auc = 0.6666666666666667
User 72358 AUC after training: 0.6666666666666667
User 72358 does not improve AUC. Reverting changes.
Training on augumented user 94253 36/50 current_auc = 0.6666666666666667
User 94253 AUC after training: 0.6666666666666667
User 94253 does not improve AUC. Reverting changes.
Training on augumented user 122180 37/50 current_auc = 0.6666666666666667
User 122180 AUC after training: 0.6666666666666667
User 122180 does not improve AUC. Reverting changes.
Training on augumented user 123812 38/50 current_auc = 0.6666666666666667
User 123812 AUC after training: 0.6666666666666667
User 123812 does not improve AUC. Reverting changes.
Training on augumented user 8767 39/50 current_auc = 0.6666666666666667
User 8767 AUC after training: 0.6666666666666667
User 8767 does not improve AUC. Reverting changes.
Training on augumented user 5340 40/50 current_auc = 0.6666666666666667
User 5340 AUC after training: 0.6666666666666667
User 5340 does not improve AUC. Reverting changes.
Training on augumented user 66470 41/50 current_auc = 0.6666666666666667
User 66470 AUC after training: 0.6666666666666667
User 66470 does not improve AUC. Reverting changes.
Training on augumented user 67389 42/50 current_auc = 0.6666666666666667
User 67389 AUC after training: 0.6666666666666667
User 67389 does not improve AUC. Reverting changes.
Training on augumented user 104734 43/50 current_auc = 0.6666666666666667
User 104734 AUC after training: 0.6666666666666667
User 104734 does not improve AUC. Reverting changes.
Training on augumented user 19360 44/50 current_auc = 0.6666666666666667
User 19360 AUC after training: 0.6666666666666667
User 19360 does not improve AUC. Reverting changes.
Training on augumented user 14780 45/50 current_auc = 0.6666666666666667
User 14780 AUC after training: 0.6666666666666667
User 14780 does not improve AUC. Reverting changes.
Training on augumented user 20773 46/50 current_auc = 0.6666666666666667
User 20773 AUC after training: 0.6666666666666667
User 20773 does not improve AUC. Reverting changes.
Training on augumented user 2455 47/50 current_auc = 0.6666666666666667
User 2455 AUC after training: 0.6666666666666667
User 2455 does not improve AUC. Reverting changes.
Training on augumented user 110527 48/50 current_auc = 0.6666666666666667
User 110527 AUC after training: 0.6666666666666667
User 110527 does not improve AUC. Reverting changes.
Training on augumented user 129121 49/50 current_auc = 0.6666666666666667
User 129121 AUC after training: 0.6666666666666667
User 129121 does not improve AUC. Reverting changes.
[2024-12-02 19:58:57.722274] start test user 116261 259/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:58:58.671979] start test user 116261 259/567 recall augumented users by random, augumented_users = [62990, 19323, 116252, 79883, 111684, 89941, 117885, 77070, 33689, 20274, 27704, 97640, 122413, 38542, 104092, 129449, 63259, 29835, 22128, 101391, 11840, 123668, 92422, 84349, 88901, 76538, 132625, 30076, 20893, 39242, 99133, 19903, 64304, 5741, 113245, 133794, 26947, 10947, 20952, 39355, 106670, 2581, 133031, 101117, 96073, 55241, 19639, 87693, 45406, 81422]
[2024-12-02 19:58:58.687250] user = 116261 Cloud 259/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:58:58.704053] user = 116261 Local 259/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:58:58.738003] user = 116261 Local+ 259/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:59:00.976301] user = 116261 MPDA- 259/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 62990 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62990 AUC after training: 0.5
User 62990 does not improve AUC. Reverting changes.
Training on augumented user 19323 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19323 AUC after training: 0.5
User 19323 does not improve AUC. Reverting changes.
Training on augumented user 116252 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116252 AUC after training: 0.5
User 116252 does not improve AUC. Reverting changes.
Training on augumented user 79883 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79883 AUC after training: 0.5
User 79883 does not improve AUC. Reverting changes.
Training on augumented user 111684 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111684 AUC after training: 0.5
User 111684 does not improve AUC. Reverting changes.
Training on augumented user 89941 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89941 AUC after training: 0.5
User 89941 does not improve AUC. Reverting changes.
Training on augumented user 117885 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117885 AUC after training: 0.5
User 117885 does not improve AUC. Reverting changes.
Training on augumented user 77070 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77070 AUC after training: 0.5
User 77070 does not improve AUC. Reverting changes.
Training on augumented user 33689 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33689 AUC after training: 0.5
User 33689 does not improve AUC. Reverting changes.
Training on augumented user 20274 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20274 AUC after training: 0.5
User 20274 does not improve AUC. Reverting changes.
Training on augumented user 27704 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27704 AUC after training: 0.5
User 27704 does not improve AUC. Reverting changes.
Training on augumented user 97640 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97640 AUC after training: 0.5
User 97640 does not improve AUC. Reverting changes.
Training on augumented user 122413 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122413 AUC after training: 0.5
User 122413 does not improve AUC. Reverting changes.
Training on augumented user 38542 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38542 AUC after training: 0.5
User 38542 does not improve AUC. Reverting changes.
Training on augumented user 104092 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104092 AUC after training: 0.5
User 104092 does not improve AUC. Reverting changes.
Training on augumented user 129449 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129449 AUC after training: 0.5
User 129449 does not improve AUC. Reverting changes.
Training on augumented user 63259 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63259 AUC after training: 0.5
User 63259 does not improve AUC. Reverting changes.
Training on augumented user 29835 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29835 AUC after training: 0.5
User 29835 does not improve AUC. Reverting changes.
Training on augumented user 22128 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22128 AUC after training: 0.5
User 22128 does not improve AUC. Reverting changes.
Training on augumented user 101391 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101391 AUC after training: 0.5
User 101391 does not improve AUC. Reverting changes.
Training on augumented user 11840 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11840 AUC after training: 0.5
User 11840 does not improve AUC. Reverting changes.
Training on augumented user 123668 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123668 AUC after training: 0.5
User 123668 does not improve AUC. Reverting changes.
Training on augumented user 92422 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92422 AUC after training: 0.5
User 92422 does not improve AUC. Reverting changes.
Training on augumented user 84349 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84349 AUC after training: 0.5
User 84349 does not improve AUC. Reverting changes.
Training on augumented user 88901 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88901 AUC after training: 0.5
User 88901 does not improve AUC. Reverting changes.
Training on augumented user 76538 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76538 AUC after training: 0.5
User 76538 does not improve AUC. Reverting changes.
Training on augumented user 132625 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132625 AUC after training: 0.5
User 132625 does not improve AUC. Reverting changes.
Training on augumented user 30076 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30076 AUC after training: 0.5
User 30076 does not improve AUC. Reverting changes.
Training on augumented user 20893 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20893 AUC after training: 0.5
User 20893 does not improve AUC. Reverting changes.
Training on augumented user 39242 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 39242 AUC after training: 0.5
User 39242 does not improve AUC. Reverting changes.
Training on augumented user 99133 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99133 AUC after training: 0.5
User 99133 does not improve AUC. Reverting changes.
Training on augumented user 19903 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19903 AUC after training: 0.5
User 19903 does not improve AUC. Reverting changes.
Training on augumented user 64304 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64304 AUC after training: 0.5
User 64304 does not improve AUC. Reverting changes.
Training on augumented user 5741 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5741 AUC after training: 0.5
User 5741 does not improve AUC. Reverting changes.
Training on augumented user 113245 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113245 AUC after training: 0.5
User 113245 does not improve AUC. Reverting changes.
Training on augumented user 133794 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133794 AUC after training: 0.5
User 133794 does not improve AUC. Reverting changes.
Training on augumented user 26947 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26947 AUC after training: 0.5
User 26947 does not improve AUC. Reverting changes.
Training on augumented user 10947 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10947 AUC after training: 0.5
User 10947 does not improve AUC. Reverting changes.
Training on augumented user 20952 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20952 AUC after training: 0.5
User 20952 does not improve AUC. Reverting changes.
Training on augumented user 39355 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 39355 AUC after training: 0.5
User 39355 does not improve AUC. Reverting changes.
Training on augumented user 106670 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106670 AUC after training: 0.5
User 106670 does not improve AUC. Reverting changes.
Training on augumented user 2581 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2581 AUC after training: 0.5
User 2581 does not improve AUC. Reverting changes.
Training on augumented user 133031 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133031 AUC after training: 0.5
User 133031 does not improve AUC. Reverting changes.
Training on augumented user 101117 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101117 AUC after training: 0.5
User 101117 does not improve AUC. Reverting changes.
Training on augumented user 96073 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96073 AUC after training: 0.5
User 96073 does not improve AUC. Reverting changes.
Training on augumented user 55241 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55241 AUC after training: 0.5
User 55241 does not improve AUC. Reverting changes.
Training on augumented user 19639 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19639 AUC after training: 0.5
User 19639 does not improve AUC. Reverting changes.
Training on augumented user 87693 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87693 AUC after training: 0.5
User 87693 does not improve AUC. Reverting changes.
Training on augumented user 45406 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45406 AUC after training: 0.5
User 45406 does not improve AUC. Reverting changes.
Training on augumented user 81422 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81422 AUC after training: 0.5
User 81422 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:59:33.953461] start test user 116263 260/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:59:34.502054] start test user 116263 260/567 recall augumented users by random, augumented_users = [54055, 85983, 52939, 1380, 27304, 114397, 125801, 91026, 123244, 130782, 13102, 116359, 83933, 124912, 94182, 95696, 4661, 82457, 40854, 44147, 27465, 83934, 26958, 45597, 61590, 42672, 120423, 51242, 129464, 8365, 60133, 123775, 68451, 42766, 10598, 38097, 8204, 94222, 15236, 110106, 32613, 48494, 9106, 26166, 11541, 10994, 12918, 14583, 115910, 15497]
[2024-12-02 19:59:34.523353] user = 116263 Cloud 260/567
[2024-12-02 19:59:34.636635] user = 116263 Local 260/567
[2024-12-02 19:59:35.104145] user = 116263 Local+ 260/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:59:38.198431] user = 116263 MPDA- 260/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5384368836291914
Training on augumented user 54055 0/50 current_auc = 0.5384368836291914
User 54055 AUC after training: 0.5383185404339251
User 54055 does not improve AUC. Reverting changes.
Training on augumented user 85983 1/50 current_auc = 0.5384368836291914
User 85983 AUC after training: 0.538387573964497
User 85983 does not improve AUC. Reverting changes.
Training on augumented user 52939 2/50 current_auc = 0.5384368836291914
User 52939 AUC after training: 0.5388856015779093
User 52939 improves AUC. Keeping the model.
Training on augumented user 1380 3/50 current_auc = 0.5388856015779093
User 1380 AUC after training: 0.5388412228796844
User 1380 does not improve AUC. Reverting changes.
Training on augumented user 27304 4/50 current_auc = 0.5388856015779093
User 27304 AUC after training: 0.5389447731755425
User 27304 improves AUC. Keeping the model.
Training on augumented user 114397 5/50 current_auc = 0.5389447731755425
User 114397 AUC after training: 0.5389595660749508
User 114397 improves AUC. Keeping the model.
Training on augumented user 125801 6/50 current_auc = 0.5389595660749508
User 125801 AUC after training: 0.5389299802761341
User 125801 does not improve AUC. Reverting changes.
Training on augumented user 91026 7/50 current_auc = 0.5389595660749508
User 91026 AUC after training: 0.5388856015779093
User 91026 does not improve AUC. Reverting changes.
Training on augumented user 123244 8/50 current_auc = 0.5389595660749508
User 123244 AUC after training: 0.5390039447731756
User 123244 improves AUC. Keeping the model.
Training on augumented user 130782 9/50 current_auc = 0.5390039447731756
User 130782 AUC after training: 0.5389250493096647
User 130782 does not improve AUC. Reverting changes.
Training on augumented user 13102 10/50 current_auc = 0.5390039447731756
User 13102 AUC after training: 0.5389990138067061
User 13102 does not improve AUC. Reverting changes.
Training on augumented user 116359 11/50 current_auc = 0.5390039447731756
User 116359 AUC after training: 0.5390039447731755
User 116359 does not improve AUC. Reverting changes.
Training on augumented user 83933 12/50 current_auc = 0.5390039447731756
User 83933 AUC after training: 0.5389940828402366
User 83933 does not improve AUC. Reverting changes.
Training on augumented user 124912 13/50 current_auc = 0.5390039447731756
User 124912 AUC after training: 0.5390483234714004
User 124912 improves AUC. Keeping the model.
Training on augumented user 94182 14/50 current_auc = 0.5390483234714004
User 94182 AUC after training: 0.5390187376725839
User 94182 does not improve AUC. Reverting changes.
Training on augumented user 95696 15/50 current_auc = 0.5390483234714004
User 95696 AUC after training: 0.5390877712031559
User 95696 improves AUC. Keeping the model.
Training on augumented user 4661 16/50 current_auc = 0.5390877712031559
User 4661 AUC after training: 0.5388609467455621
User 4661 does not improve AUC. Reverting changes.
Training on augumented user 82457 17/50 current_auc = 0.5390877712031559
User 82457 AUC after training: 0.5391074950690335
User 82457 improves AUC. Keeping the model.
Training on augumented user 40854 18/50 current_auc = 0.5391074950690335
User 40854 AUC after training: 0.5390729783037475
User 40854 does not improve AUC. Reverting changes.
Training on augumented user 44147 19/50 current_auc = 0.5391074950690335
User 44147 AUC after training: 0.5390828402366864
User 44147 does not improve AUC. Reverting changes.
Training on augumented user 27465 20/50 current_auc = 0.5391074950690335
User 27465 AUC after training: 0.5391272189349112
User 27465 improves AUC. Keeping the model.
Training on augumented user 83934 21/50 current_auc = 0.5391272189349112
User 83934 AUC after training: 0.539206114398422
User 83934 improves AUC. Keeping the model.
Training on augumented user 26958 22/50 current_auc = 0.539206114398422
User 26958 AUC after training: 0.5391272189349112
User 26958 does not improve AUC. Reverting changes.
Training on augumented user 45597 23/50 current_auc = 0.539206114398422
User 45597 AUC after training: 0.5391568047337278
User 45597 does not improve AUC. Reverting changes.
Training on augumented user 61590 24/50 current_auc = 0.539206114398422
User 61590 AUC after training: 0.5392455621301775
User 61590 improves AUC. Keeping the model.
Training on augumented user 42672 25/50 current_auc = 0.5392455621301775
User 42672 AUC after training: 0.5391617357001972
User 42672 does not improve AUC. Reverting changes.
Training on augumented user 120423 26/50 current_auc = 0.5392455621301775
User 120423 AUC after training: 0.5390483234714004
User 120423 does not improve AUC. Reverting changes.
Training on augumented user 51242 27/50 current_auc = 0.5392455621301775
User 51242 AUC after training: 0.539171597633136
User 51242 does not improve AUC. Reverting changes.
Training on augumented user 129464 28/50 current_auc = 0.5392455621301775
User 129464 AUC after training: 0.5391617357001973
User 129464 does not improve AUC. Reverting changes.
Training on augumented user 8365 29/50 current_auc = 0.5392455621301775
User 8365 AUC after training: 0.5391962524654832
User 8365 does not improve AUC. Reverting changes.
Training on augumented user 60133 30/50 current_auc = 0.5392455621301775
User 60133 AUC after training: 0.5392011834319527
User 60133 does not improve AUC. Reverting changes.
Training on augumented user 123775 31/50 current_auc = 0.5392455621301775
User 123775 AUC after training: 0.5390138067061144
User 123775 does not improve AUC. Reverting changes.
Training on augumented user 68451 32/50 current_auc = 0.5392455621301775
User 68451 AUC after training: 0.5391568047337278
User 68451 does not improve AUC. Reverting changes.
Training on augumented user 42766 33/50 current_auc = 0.5392455621301775
User 42766 AUC after training: 0.5392258382642998
User 42766 does not improve AUC. Reverting changes.
Training on augumented user 10598 34/50 current_auc = 0.5392455621301775
User 10598 AUC after training: 0.539215976331361
User 10598 does not improve AUC. Reverting changes.
Training on augumented user 38097 35/50 current_auc = 0.5392455621301775
User 38097 AUC after training: 0.5391863905325444
User 38097 does not improve AUC. Reverting changes.
Training on augumented user 8204 36/50 current_auc = 0.5392455621301775
User 8204 AUC after training: 0.5387475345167653
User 8204 does not improve AUC. Reverting changes.
Training on augumented user 94222 37/50 current_auc = 0.5392455621301775
User 94222 AUC after training: 0.5391765285996055
User 94222 does not improve AUC. Reverting changes.
Training on augumented user 15236 38/50 current_auc = 0.5392455621301775
User 15236 AUC after training: 0.539171597633136
User 15236 does not improve AUC. Reverting changes.
Training on augumented user 110106 39/50 current_auc = 0.5392455621301775
User 110106 AUC after training: 0.5392011834319527
User 110106 does not improve AUC. Reverting changes.
Training on augumented user 32613 40/50 current_auc = 0.5392455621301775
User 32613 AUC after training: 0.5389497041420119
User 32613 does not improve AUC. Reverting changes.
Training on augumented user 48494 41/50 current_auc = 0.5392455621301775
User 48494 AUC after training: 0.5391469428007889
User 48494 does not improve AUC. Reverting changes.
Training on augumented user 9106 42/50 current_auc = 0.5392455621301775
User 9106 AUC after training: 0.5391617357001972
User 9106 does not improve AUC. Reverting changes.
Training on augumented user 26166 43/50 current_auc = 0.5392455621301775
User 26166 AUC after training: 0.539250493096647
User 26166 improves AUC. Keeping the model.
Training on augumented user 11541 44/50 current_auc = 0.539250493096647
User 11541 AUC after training: 0.5389250493096646
User 11541 does not improve AUC. Reverting changes.
Training on augumented user 10994 45/50 current_auc = 0.539250493096647
User 10994 AUC after training: 0.5391617357001972
User 10994 does not improve AUC. Reverting changes.
Training on augumented user 12918 46/50 current_auc = 0.539250493096647
User 12918 AUC after training: 0.5391518737672584
User 12918 does not improve AUC. Reverting changes.
Training on augumented user 14583 47/50 current_auc = 0.539250493096647
User 14583 AUC after training: 0.5392455621301776
User 14583 does not improve AUC. Reverting changes.
Training on augumented user 115910 48/50 current_auc = 0.539250493096647
User 115910 AUC after training: 0.5392702169625246
User 115910 improves AUC. Keeping the model.
Training on augumented user 15497 49/50 current_auc = 0.5392702169625246
User 15497 AUC after training: 0.5388412228796844
User 15497 does not improve AUC. Reverting changes.
[2024-12-02 20:00:17.290520] start test user 116298 261/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:00:17.804643] start test user 116298 261/567 recall augumented users by random, augumented_users = [10707, 135552, 128897, 40951, 95939, 26976, 133336, 73940, 15461, 24989, 99223, 66302, 122214, 53748, 4859, 99331, 43615, 66516, 108477, 127933, 74824, 9132, 46687, 1159, 79616, 117274, 57392, 92829, 10783, 84525, 85114, 43836, 109337, 22458, 134988, 119816, 39654, 86466, 101504, 50664, 110818, 129552, 10215, 60308, 30497, 112029, 56291, 117448, 30818, 24494]
[2024-12-02 20:00:17.840686] user = 116298 Cloud 261/567
[2024-12-02 20:00:17.859277] user = 116298 Local 261/567
[2024-12-02 20:00:18.137465] user = 116298 Local+ 261/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:00:20.597724] user = 116298 MPDA- 261/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8975609756097561
Training on augumented user 10707 0/50 current_auc = 0.8975609756097561
User 10707 AUC after training: 0.8975609756097561
User 10707 does not improve AUC. Reverting changes.
Training on augumented user 135552 1/50 current_auc = 0.8975609756097561
User 135552 AUC after training: 0.8975609756097561
User 135552 does not improve AUC. Reverting changes.
Training on augumented user 128897 2/50 current_auc = 0.8975609756097561
User 128897 AUC after training: 0.8975609756097561
User 128897 does not improve AUC. Reverting changes.
Training on augumented user 40951 3/50 current_auc = 0.8975609756097561
User 40951 AUC after training: 0.8975609756097561
User 40951 does not improve AUC. Reverting changes.
Training on augumented user 95939 4/50 current_auc = 0.8975609756097561
User 95939 AUC after training: 0.8975609756097561
User 95939 does not improve AUC. Reverting changes.
Training on augumented user 26976 5/50 current_auc = 0.8975609756097561
User 26976 AUC after training: 0.8975609756097561
User 26976 does not improve AUC. Reverting changes.
Training on augumented user 133336 6/50 current_auc = 0.8975609756097561
User 133336 AUC after training: 0.8943089430894309
User 133336 does not improve AUC. Reverting changes.
Training on augumented user 73940 7/50 current_auc = 0.8975609756097561
User 73940 AUC after training: 0.8967479674796748
User 73940 does not improve AUC. Reverting changes.
Training on augumented user 15461 8/50 current_auc = 0.8975609756097561
User 15461 AUC after training: 0.8975609756097561
User 15461 does not improve AUC. Reverting changes.
Training on augumented user 24989 9/50 current_auc = 0.8975609756097561
User 24989 AUC after training: 0.8975609756097561
User 24989 does not improve AUC. Reverting changes.
Training on augumented user 99223 10/50 current_auc = 0.8975609756097561
User 99223 AUC after training: 0.8975609756097561
User 99223 does not improve AUC. Reverting changes.
Training on augumented user 66302 11/50 current_auc = 0.8975609756097561
User 66302 AUC after training: 0.8975609756097561
User 66302 does not improve AUC. Reverting changes.
Training on augumented user 122214 12/50 current_auc = 0.8975609756097561
User 122214 AUC after training: 0.8975609756097561
User 122214 does not improve AUC. Reverting changes.
Training on augumented user 53748 13/50 current_auc = 0.8975609756097561
User 53748 AUC after training: 0.8975609756097561
User 53748 does not improve AUC. Reverting changes.
Training on augumented user 4859 14/50 current_auc = 0.8975609756097561
User 4859 AUC after training: 0.8943089430894309
User 4859 does not improve AUC. Reverting changes.
Training on augumented user 99331 15/50 current_auc = 0.8975609756097561
User 99331 AUC after training: 0.8991869918699187
User 99331 improves AUC. Keeping the model.
Training on augumented user 43615 16/50 current_auc = 0.8991869918699187
User 43615 AUC after training: 0.8991869918699187
User 43615 does not improve AUC. Reverting changes.
Training on augumented user 66516 17/50 current_auc = 0.8991869918699187
User 66516 AUC after training: 0.8991869918699187
User 66516 does not improve AUC. Reverting changes.
Training on augumented user 108477 18/50 current_auc = 0.8991869918699187
User 108477 AUC after training: 0.8975609756097561
User 108477 does not improve AUC. Reverting changes.
Training on augumented user 127933 19/50 current_auc = 0.8991869918699187
User 127933 AUC after training: 0.8991869918699187
User 127933 does not improve AUC. Reverting changes.
Training on augumented user 74824 20/50 current_auc = 0.8991869918699187
User 74824 AUC after training: 0.8991869918699187
User 74824 does not improve AUC. Reverting changes.
Training on augumented user 9132 21/50 current_auc = 0.8991869918699187
User 9132 AUC after training: 0.8991869918699187
User 9132 does not improve AUC. Reverting changes.
Training on augumented user 46687 22/50 current_auc = 0.8991869918699187
User 46687 AUC after training: 0.8975609756097561
User 46687 does not improve AUC. Reverting changes.
Training on augumented user 1159 23/50 current_auc = 0.8991869918699187
User 1159 AUC after training: 0.8943089430894309
User 1159 does not improve AUC. Reverting changes.
Training on augumented user 79616 24/50 current_auc = 0.8991869918699187
User 79616 AUC after training: 0.8975609756097561
User 79616 does not improve AUC. Reverting changes.
Training on augumented user 117274 25/50 current_auc = 0.8991869918699187
User 117274 AUC after training: 0.8943089430894309
User 117274 does not improve AUC. Reverting changes.
Training on augumented user 57392 26/50 current_auc = 0.8991869918699187
User 57392 AUC after training: 0.8943089430894309
User 57392 does not improve AUC. Reverting changes.
Training on augumented user 92829 27/50 current_auc = 0.8991869918699187
User 92829 AUC after training: 0.8991869918699187
User 92829 does not improve AUC. Reverting changes.
Training on augumented user 10783 28/50 current_auc = 0.8991869918699187
User 10783 AUC after training: 0.8991869918699187
User 10783 does not improve AUC. Reverting changes.
Training on augumented user 84525 29/50 current_auc = 0.8991869918699187
User 84525 AUC after training: 0.8991869918699187
User 84525 does not improve AUC. Reverting changes.
Training on augumented user 85114 30/50 current_auc = 0.8991869918699187
User 85114 AUC after training: 0.8991869918699187
User 85114 does not improve AUC. Reverting changes.
Training on augumented user 43836 31/50 current_auc = 0.8991869918699187
User 43836 AUC after training: 0.8991869918699187
User 43836 does not improve AUC. Reverting changes.
Training on augumented user 109337 32/50 current_auc = 0.8991869918699187
User 109337 AUC after training: 0.8991869918699187
User 109337 does not improve AUC. Reverting changes.
Training on augumented user 22458 33/50 current_auc = 0.8991869918699187
User 22458 AUC after training: 0.8943089430894309
User 22458 does not improve AUC. Reverting changes.
Training on augumented user 134988 34/50 current_auc = 0.8991869918699187
User 134988 AUC after training: 0.8991869918699187
User 134988 does not improve AUC. Reverting changes.
Training on augumented user 119816 35/50 current_auc = 0.8991869918699187
User 119816 AUC after training: 0.8975609756097561
User 119816 does not improve AUC. Reverting changes.
Training on augumented user 39654 36/50 current_auc = 0.8991869918699187
User 39654 AUC after training: 0.8959349593495936
User 39654 does not improve AUC. Reverting changes.
Training on augumented user 86466 37/50 current_auc = 0.8991869918699187
User 86466 AUC after training: 0.8991869918699187
User 86466 does not improve AUC. Reverting changes.
Training on augumented user 101504 38/50 current_auc = 0.8991869918699187
User 101504 AUC after training: 0.8991869918699187
User 101504 does not improve AUC. Reverting changes.
Training on augumented user 50664 39/50 current_auc = 0.8991869918699187
User 50664 AUC after training: 0.8975609756097561
User 50664 does not improve AUC. Reverting changes.
Training on augumented user 110818 40/50 current_auc = 0.8991869918699187
User 110818 AUC after training: 0.8991869918699187
User 110818 does not improve AUC. Reverting changes.
Training on augumented user 129552 41/50 current_auc = 0.8991869918699187
User 129552 AUC after training: 0.8991869918699187
User 129552 does not improve AUC. Reverting changes.
Training on augumented user 10215 42/50 current_auc = 0.8991869918699187
User 10215 AUC after training: 0.8991869918699187
User 10215 does not improve AUC. Reverting changes.
Training on augumented user 60308 43/50 current_auc = 0.8991869918699187
User 60308 AUC after training: 0.8975609756097561
User 60308 does not improve AUC. Reverting changes.
Training on augumented user 30497 44/50 current_auc = 0.8991869918699187
User 30497 AUC after training: 0.8991869918699187
User 30497 does not improve AUC. Reverting changes.
Training on augumented user 112029 45/50 current_auc = 0.8991869918699187
User 112029 AUC after training: 0.8991869918699187
User 112029 does not improve AUC. Reverting changes.
Training on augumented user 56291 46/50 current_auc = 0.8991869918699187
User 56291 AUC after training: 0.8991869918699187
User 56291 does not improve AUC. Reverting changes.
Training on augumented user 117448 47/50 current_auc = 0.8991869918699187
User 117448 AUC after training: 0.8943089430894309
User 117448 does not improve AUC. Reverting changes.
Training on augumented user 30818 48/50 current_auc = 0.8991869918699187
User 30818 AUC after training: 0.8991869918699187
User 30818 does not improve AUC. Reverting changes.
Training on augumented user 24494 49/50 current_auc = 0.8991869918699187
User 24494 AUC after training: 0.8975609756097561
User 24494 does not improve AUC. Reverting changes.
[2024-12-02 20:00:49.630318] start test user 116302 262/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:00:50.363703] start test user 116302 262/567 recall augumented users by random, augumented_users = [126502, 6442, 110323, 22849, 77599, 101824, 74826, 93082, 38224, 109365, 64669, 69302, 96638, 19229, 39890, 92995, 31470, 113904, 125851, 66744, 118573, 128032, 46078, 130638, 123487, 118299, 138469, 102778, 42394, 67501, 129205, 39281, 122561, 135808, 35379, 95564, 70289, 129133, 56701, 17273, 136139, 85756, 109861, 99881, 107062, 106059, 72882, 114495, 27039, 117478]
[2024-12-02 20:00:50.385600] user = 116302 Cloud 262/567
[2024-12-02 20:00:50.503591] user = 116302 Local 262/567
[2024-12-02 20:00:51.018573] user = 116302 Local+ 262/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:00:53.919548] user = 116302 MPDA- 262/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6588226645887854
Training on augumented user 126502 0/50 current_auc = 0.6588226645887854
User 126502 AUC after training: 0.6585609691552237
User 126502 does not improve AUC. Reverting changes.
Training on augumented user 6442 1/50 current_auc = 0.6588226645887854
User 6442 AUC after training: 0.6586315387103414
User 6442 does not improve AUC. Reverting changes.
Training on augumented user 110323 2/50 current_auc = 0.6588226645887854
User 110323 AUC after training: 0.6585345055720545
User 110323 does not improve AUC. Reverting changes.
Training on augumented user 22849 3/50 current_auc = 0.6588226645887854
User 22849 AUC after training: 0.6585874327383928
User 22849 does not improve AUC. Reverting changes.
Training on augumented user 77599 4/50 current_auc = 0.6588226645887854
User 77599 AUC after training: 0.658646240700991
User 77599 does not improve AUC. Reverting changes.
Training on augumented user 101824 5/50 current_auc = 0.6588226645887854
User 101824 AUC after training: 0.6588844129495134
User 101824 improves AUC. Keeping the model.
Training on augumented user 74826 6/50 current_auc = 0.6588844129495134
User 74826 AUC after training: 0.6586991678673293
User 74826 does not improve AUC. Reverting changes.
Training on augumented user 93082 7/50 current_auc = 0.6588844129495134
User 93082 AUC after training: 0.6587021082654592
User 93082 does not improve AUC. Reverting changes.
Training on augumented user 38224 8/50 current_auc = 0.6588844129495134
User 38224 AUC after training: 0.6585286247757945
User 38224 does not improve AUC. Reverting changes.
Training on augumented user 109365 9/50 current_auc = 0.6588844129495134
User 109365 AUC after training: 0.6588726513569937
User 109365 does not improve AUC. Reverting changes.
Training on augumented user 64669 10/50 current_auc = 0.6588844129495134
User 64669 AUC after training: 0.658707989061719
User 64669 does not improve AUC. Reverting changes.
Training on augumented user 69302 11/50 current_auc = 0.6588844129495134
User 69302 AUC after training: 0.6587932606074862
User 69302 does not improve AUC. Reverting changes.
Training on augumented user 96638 12/50 current_auc = 0.6588844129495134
User 96638 AUC after training: 0.6588197241906554
User 96638 does not improve AUC. Reverting changes.
Training on augumented user 19229 13/50 current_auc = 0.6588844129495134
User 19229 AUC after training: 0.6586491810991209
User 19229 does not improve AUC. Reverting changes.
Training on augumented user 39890 14/50 current_auc = 0.6588844129495134
User 39890 AUC after training: 0.6584433532300273
User 39890 does not improve AUC. Reverting changes.
Training on augumented user 92995 15/50 current_auc = 0.6588844129495134
User 92995 AUC after training: 0.6589373401158517
User 92995 improves AUC. Keeping the model.
Training on augumented user 31470 16/50 current_auc = 0.6589373401158517
User 31470 AUC after training: 0.6587197506542385
User 31470 does not improve AUC. Reverting changes.
Training on augumented user 113904 17/50 current_auc = 0.6589373401158517
User 113904 AUC after training: 0.6586344791084713
User 113904 does not improve AUC. Reverting changes.
Training on augumented user 125851 18/50 current_auc = 0.6589373401158517
User 125851 AUC after training: 0.6588432473756947
User 125851 does not improve AUC. Reverting changes.
Training on augumented user 66744 19/50 current_auc = 0.6589373401158517
User 66744 AUC after training: 0.6587138698579789
User 66744 does not improve AUC. Reverting changes.
Training on augumented user 118573 20/50 current_auc = 0.6589373401158517
User 118573 AUC after training: 0.6587814990149665
User 118573 does not improve AUC. Reverting changes.
Training on augumented user 128032 21/50 current_auc = 0.6589373401158517
User 128032 AUC after training: 0.6590255520597489
User 128032 improves AUC. Keeping the model.
Training on augumented user 46078 22/50 current_auc = 0.6590255520597489
User 46078 AUC after training: 0.6589961480784499
User 46078 does not improve AUC. Reverting changes.
Training on augumented user 130638 23/50 current_auc = 0.6590255520597489
User 130638 AUC after training: 0.6586462407009909
User 130638 does not improve AUC. Reverting changes.
Training on augumented user 123487 24/50 current_auc = 0.6590255520597489
User 123487 AUC after training: 0.6586050751271721
User 123487 does not improve AUC. Reverting changes.
Training on augumented user 118299 25/50 current_auc = 0.6590255520597489
User 118299 AUC after training: 0.6590137904672293
User 118299 does not improve AUC. Reverting changes.
Training on augumented user 138469 26/50 current_auc = 0.6590255520597489
User 138469 AUC after training: 0.6589638036990209
User 138469 does not improve AUC. Reverting changes.
Training on augumented user 102778 27/50 current_auc = 0.6590255520597489
User 102778 AUC after training: 0.6592372607251022
User 102778 improves AUC. Keeping the model.
Training on augumented user 42394 28/50 current_auc = 0.6592372607251022
User 42394 AUC after training: 0.6589755652915404
User 42394 does not improve AUC. Reverting changes.
Training on augumented user 67501 29/50 current_auc = 0.6592372607251022
User 67501 AUC after training: 0.6591960951512834
User 67501 does not improve AUC. Reverting changes.
Training on augumented user 129205 30/50 current_auc = 0.6592372607251022
User 129205 AUC after training: 0.6590284924578788
User 129205 does not improve AUC. Reverting changes.
Training on augumented user 39281 31/50 current_auc = 0.6592372607251022
User 39281 AUC after training: 0.6590931812167367
User 39281 does not improve AUC. Reverting changes.
Training on augumented user 122561 32/50 current_auc = 0.6592372607251022
User 122561 AUC after training: 0.6589314593195919
User 122561 does not improve AUC. Reverting changes.
Training on augumented user 135808 33/50 current_auc = 0.6592372607251022
User 135808 AUC after training: 0.6580316974918405
User 135808 does not improve AUC. Reverting changes.
Training on augumented user 35379 34/50 current_auc = 0.6592372607251022
User 35379 AUC after training: 0.6591725719662443
User 35379 does not improve AUC. Reverting changes.
Training on augumented user 95564 35/50 current_auc = 0.6592372607251022
User 95564 AUC after training: 0.6592666647064013
User 95564 improves AUC. Keeping the model.
Training on augumented user 70289 36/50 current_auc = 0.6592666647064013
User 70289 AUC after training: 0.659272545502661
User 70289 improves AUC. Keeping the model.
Training on augumented user 129133 37/50 current_auc = 0.659272545502661
User 129133 AUC after training: 0.6590490752447882
User 129133 does not improve AUC. Reverting changes.
Training on augumented user 56701 38/50 current_auc = 0.659272545502661
User 56701 AUC after training: 0.6591519891793349
User 56701 does not improve AUC. Reverting changes.
Training on augumented user 17273 39/50 current_auc = 0.659272545502661
User 17273 AUC after training: 0.6590431944485283
User 17273 does not improve AUC. Reverting changes.
Training on augumented user 136139 40/50 current_auc = 0.659272545502661
User 136139 AUC after training: 0.6593048898820901
User 136139 improves AUC. Keeping the model.
Training on augumented user 85756 41/50 current_auc = 0.6593048898820901
User 85756 AUC after training: 0.6592225587344527
User 85756 does not improve AUC. Reverting changes.
Training on augumented user 109861 42/50 current_auc = 0.6593048898820901
User 109861 AUC after training: 0.6589343997177218
User 109861 does not improve AUC. Reverting changes.
Training on augumented user 99881 43/50 current_auc = 0.6593048898820901
User 99881 AUC after training: 0.6592343203269723
User 99881 does not improve AUC. Reverting changes.
Training on augumented user 107062 44/50 current_auc = 0.6593048898820901
User 107062 AUC after training: 0.6593166514746096
User 107062 improves AUC. Keeping the model.
Training on augumented user 106059 45/50 current_auc = 0.6593166514746096
User 106059 AUC after training: 0.6590490752447881
User 106059 does not improve AUC. Reverting changes.
Training on augumented user 72882 46/50 current_auc = 0.6593166514746096
User 72882 AUC after training: 0.6591578699755947
User 72882 does not improve AUC. Reverting changes.
Training on augumented user 114495 47/50 current_auc = 0.6593166514746096
User 114495 AUC after training: 0.6593284130671293
User 114495 improves AUC. Keeping the model.
Training on augumented user 27039 48/50 current_auc = 0.6593284130671293
User 27039 AUC after training: 0.6589549825046312
User 27039 does not improve AUC. Reverting changes.
Training on augumented user 117478 49/50 current_auc = 0.6593284130671293
User 117478 AUC after training: 0.6588344261813049
User 117478 does not improve AUC. Reverting changes.
[2024-12-02 20:01:25.609201] start test user 116342 263/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:01:26.037651] start test user 116342 263/567 recall augumented users by random, augumented_users = [97575, 106104, 46592, 31432, 126430, 45356, 108803, 114870, 18937, 29906, 63774, 107405, 132467, 88267, 33134, 4505, 115940, 120139, 122316, 42117, 11877, 78592, 43699, 71860, 3280, 65679, 119280, 70115, 37789, 9364, 79391, 89683, 22068, 74920, 29959, 125538, 92030, 77313, 128386, 101785, 62252, 30196, 7711, 96253, 81488, 92115, 14264, 60724, 28213, 42453]
[2024-12-02 20:01:26.053656] user = 116342 Cloud 263/567
[2024-12-02 20:01:26.076053] user = 116342 Local 263/567
[2024-12-02 20:01:26.192083] user = 116342 Local+ 263/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:01:28.498148] user = 116342 MPDA- 263/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6677657873701038
Training on augumented user 97575 0/50 current_auc = 0.6677657873701038
User 97575 AUC after training: 0.6675659472422062
User 97575 does not improve AUC. Reverting changes.
Training on augumented user 106104 1/50 current_auc = 0.6677657873701038
User 106104 AUC after training: 0.6681654676258992
User 106104 improves AUC. Keeping the model.
Training on augumented user 46592 2/50 current_auc = 0.6681654676258992
User 46592 AUC after training: 0.6680655475619505
User 46592 does not improve AUC. Reverting changes.
Training on augumented user 31432 3/50 current_auc = 0.6681654676258992
User 31432 AUC after training: 0.6672661870503597
User 31432 does not improve AUC. Reverting changes.
Training on augumented user 126430 4/50 current_auc = 0.6681654676258992
User 126430 AUC after training: 0.6674660271782574
User 126430 does not improve AUC. Reverting changes.
Training on augumented user 45356 5/50 current_auc = 0.6681654676258992
User 45356 AUC after training: 0.6674660271782574
User 45356 does not improve AUC. Reverting changes.
Training on augumented user 108803 6/50 current_auc = 0.6681654676258992
User 108803 AUC after training: 0.6678657074340528
User 108803 does not improve AUC. Reverting changes.
Training on augumented user 114870 7/50 current_auc = 0.6681654676258992
User 114870 AUC after training: 0.6676658673061551
User 114870 does not improve AUC. Reverting changes.
Training on augumented user 18937 8/50 current_auc = 0.6681654676258992
User 18937 AUC after training: 0.6671662669864109
User 18937 does not improve AUC. Reverting changes.
Training on augumented user 29906 9/50 current_auc = 0.6681654676258992
User 29906 AUC after training: 0.6676658673061551
User 29906 does not improve AUC. Reverting changes.
Training on augumented user 63774 10/50 current_auc = 0.6681654676258992
User 63774 AUC after training: 0.6678657074340527
User 63774 does not improve AUC. Reverting changes.
Training on augumented user 107405 11/50 current_auc = 0.6681654676258992
User 107405 AUC after training: 0.6662669864108713
User 107405 does not improve AUC. Reverting changes.
Training on augumented user 132467 12/50 current_auc = 0.6681654676258992
User 132467 AUC after training: 0.6687649880095924
User 132467 improves AUC. Keeping the model.
Training on augumented user 88267 13/50 current_auc = 0.6687649880095924
User 88267 AUC after training: 0.6673661071143085
User 88267 does not improve AUC. Reverting changes.
Training on augumented user 33134 14/50 current_auc = 0.6687649880095924
User 33134 AUC after training: 0.6675659472422063
User 33134 does not improve AUC. Reverting changes.
Training on augumented user 4505 15/50 current_auc = 0.6687649880095924
User 4505 AUC after training: 0.6682653876898481
User 4505 does not improve AUC. Reverting changes.
Training on augumented user 115940 16/50 current_auc = 0.6687649880095924
User 115940 AUC after training: 0.6684652278177458
User 115940 does not improve AUC. Reverting changes.
Training on augumented user 120139 17/50 current_auc = 0.6687649880095924
User 120139 AUC after training: 0.6684652278177458
User 120139 does not improve AUC. Reverting changes.
Training on augumented user 122316 18/50 current_auc = 0.6687649880095924
User 122316 AUC after training: 0.6682653876898481
User 122316 does not improve AUC. Reverting changes.
Training on augumented user 42117 19/50 current_auc = 0.6687649880095924
User 42117 AUC after training: 0.6684652278177459
User 42117 does not improve AUC. Reverting changes.
Training on augumented user 11877 20/50 current_auc = 0.6687649880095924
User 11877 AUC after training: 0.6666666666666666
User 11877 does not improve AUC. Reverting changes.
Training on augumented user 78592 21/50 current_auc = 0.6687649880095924
User 78592 AUC after training: 0.6680655475619505
User 78592 does not improve AUC. Reverting changes.
Training on augumented user 43699 22/50 current_auc = 0.6687649880095924
User 43699 AUC after training: 0.6680655475619505
User 43699 does not improve AUC. Reverting changes.
Training on augumented user 71860 23/50 current_auc = 0.6687649880095924
User 71860 AUC after training: 0.6676658673061552
User 71860 does not improve AUC. Reverting changes.
Training on augumented user 3280 24/50 current_auc = 0.6687649880095924
User 3280 AUC after training: 0.667765787370104
User 3280 does not improve AUC. Reverting changes.
Training on augumented user 65679 25/50 current_auc = 0.6687649880095924
User 65679 AUC after training: 0.6684652278177456
User 65679 does not improve AUC. Reverting changes.
Training on augumented user 119280 26/50 current_auc = 0.6687649880095924
User 119280 AUC after training: 0.6684652278177458
User 119280 does not improve AUC. Reverting changes.
Training on augumented user 70115 27/50 current_auc = 0.6687649880095924
User 70115 AUC after training: 0.6682653876898481
User 70115 does not improve AUC. Reverting changes.
Training on augumented user 37789 28/50 current_auc = 0.6687649880095924
User 37789 AUC after training: 0.6675659472422062
User 37789 does not improve AUC. Reverting changes.
Training on augumented user 9364 29/50 current_auc = 0.6687649880095924
User 9364 AUC after training: 0.6682653876898482
User 9364 does not improve AUC. Reverting changes.
Training on augumented user 79391 30/50 current_auc = 0.6687649880095924
User 79391 AUC after training: 0.6681654676258992
User 79391 does not improve AUC. Reverting changes.
Training on augumented user 89683 31/50 current_auc = 0.6687649880095924
User 89683 AUC after training: 0.6683653077537971
User 89683 does not improve AUC. Reverting changes.
Training on augumented user 22068 32/50 current_auc = 0.6687649880095924
User 22068 AUC after training: 0.6687649880095924
User 22068 does not improve AUC. Reverting changes.
Training on augumented user 74920 33/50 current_auc = 0.6687649880095924
User 74920 AUC after training: 0.6680655475619504
User 74920 does not improve AUC. Reverting changes.
Training on augumented user 29959 34/50 current_auc = 0.6687649880095924
User 29959 AUC after training: 0.6675659472422062
User 29959 does not improve AUC. Reverting changes.
Training on augumented user 125538 35/50 current_auc = 0.6687649880095924
User 125538 AUC after training: 0.6680655475619505
User 125538 does not improve AUC. Reverting changes.
Training on augumented user 92030 36/50 current_auc = 0.6687649880095924
User 92030 AUC after training: 0.6684652278177459
User 92030 does not improve AUC. Reverting changes.
Training on augumented user 77313 37/50 current_auc = 0.6687649880095924
User 77313 AUC after training: 0.6676658673061551
User 77313 does not improve AUC. Reverting changes.
Training on augumented user 128386 38/50 current_auc = 0.6687649880095924
User 128386 AUC after training: 0.6682653876898482
User 128386 does not improve AUC. Reverting changes.
Training on augumented user 101785 39/50 current_auc = 0.6687649880095924
User 101785 AUC after training: 0.6660671462829736
User 101785 does not improve AUC. Reverting changes.
Training on augumented user 62252 40/50 current_auc = 0.6687649880095924
User 62252 AUC after training: 0.6677657873701038
User 62252 does not improve AUC. Reverting changes.
Training on augumented user 30196 41/50 current_auc = 0.6687649880095924
User 30196 AUC after training: 0.6678657074340528
User 30196 does not improve AUC. Reverting changes.
Training on augumented user 7711 42/50 current_auc = 0.6687649880095924
User 7711 AUC after training: 0.6685651478816946
User 7711 does not improve AUC. Reverting changes.
Training on augumented user 96253 43/50 current_auc = 0.6687649880095924
User 96253 AUC after training: 0.6679656274980015
User 96253 does not improve AUC. Reverting changes.
Training on augumented user 81488 44/50 current_auc = 0.6687649880095924
User 81488 AUC after training: 0.6688649080735412
User 81488 improves AUC. Keeping the model.
Training on augumented user 92115 45/50 current_auc = 0.6688649080735412
User 92115 AUC after training: 0.6680655475619505
User 92115 does not improve AUC. Reverting changes.
Training on augumented user 14264 46/50 current_auc = 0.6688649080735412
User 14264 AUC after training: 0.6681654676258993
User 14264 does not improve AUC. Reverting changes.
Training on augumented user 60724 47/50 current_auc = 0.6688649080735412
User 60724 AUC after training: 0.6676658673061551
User 60724 does not improve AUC. Reverting changes.
Training on augumented user 28213 48/50 current_auc = 0.6688649080735412
User 28213 AUC after training: 0.6682653876898481
User 28213 does not improve AUC. Reverting changes.
Training on augumented user 42453 49/50 current_auc = 0.6688649080735412
User 42453 AUC after training: 0.6683653077537971
User 42453 does not improve AUC. Reverting changes.
[2024-12-02 20:01:56.784430] start test user 116346 264/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:01:57.209651] start test user 116346 264/567 recall augumented users by random, augumented_users = [9832, 21515, 83923, 42182, 23905, 116752, 102364, 2080, 70275, 105820, 103783, 23262, 85761, 50519, 135397, 62598, 73949, 7812, 87405, 15235, 85902, 80106, 83892, 55077, 23835, 78520, 105287, 25166, 28388, 54546, 135920, 58253, 101889, 96534, 85216, 126230, 88564, 35886, 70667, 29716, 11481, 72012, 104765, 80787, 70134, 80177, 112911, 71391, 31334, 113545]
[2024-12-02 20:01:57.224578] user = 116346 Cloud 264/567
[2024-12-02 20:01:57.234119] user = 116346 Local 264/567
[2024-12-02 20:01:57.253436] user = 116346 Local+ 264/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:01:59.701350] user = 116346 MPDA- 264/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.125
Training on augumented user 9832 0/50 current_auc = 0.125
User 9832 AUC after training: 0.0
User 9832 does not improve AUC. Reverting changes.
Training on augumented user 21515 1/50 current_auc = 0.125
User 21515 AUC after training: 0.125
User 21515 does not improve AUC. Reverting changes.
Training on augumented user 83923 2/50 current_auc = 0.125
User 83923 AUC after training: 0.125
User 83923 does not improve AUC. Reverting changes.
Training on augumented user 42182 3/50 current_auc = 0.125
User 42182 AUC after training: 0.125
User 42182 does not improve AUC. Reverting changes.
Training on augumented user 23905 4/50 current_auc = 0.125
User 23905 AUC after training: 0.125
User 23905 does not improve AUC. Reverting changes.
Training on augumented user 116752 5/50 current_auc = 0.125
User 116752 AUC after training: 0.125
User 116752 does not improve AUC. Reverting changes.
Training on augumented user 102364 6/50 current_auc = 0.125
User 102364 AUC after training: 0.125
User 102364 does not improve AUC. Reverting changes.
Training on augumented user 2080 7/50 current_auc = 0.125
User 2080 AUC after training: 0.125
User 2080 does not improve AUC. Reverting changes.
Training on augumented user 70275 8/50 current_auc = 0.125
User 70275 AUC after training: 0.125
User 70275 does not improve AUC. Reverting changes.
Training on augumented user 105820 9/50 current_auc = 0.125
User 105820 AUC after training: 0.125
User 105820 does not improve AUC. Reverting changes.
Training on augumented user 103783 10/50 current_auc = 0.125
User 103783 AUC after training: 0.125
User 103783 does not improve AUC. Reverting changes.
Training on augumented user 23262 11/50 current_auc = 0.125
User 23262 AUC after training: 0.0
User 23262 does not improve AUC. Reverting changes.
Training on augumented user 85761 12/50 current_auc = 0.125
User 85761 AUC after training: 0.125
User 85761 does not improve AUC. Reverting changes.
Training on augumented user 50519 13/50 current_auc = 0.125
User 50519 AUC after training: 0.125
User 50519 does not improve AUC. Reverting changes.
Training on augumented user 135397 14/50 current_auc = 0.125
User 135397 AUC after training: 0.0
User 135397 does not improve AUC. Reverting changes.
Training on augumented user 62598 15/50 current_auc = 0.125
User 62598 AUC after training: 0.125
User 62598 does not improve AUC. Reverting changes.
Training on augumented user 73949 16/50 current_auc = 0.125
User 73949 AUC after training: 0.125
User 73949 does not improve AUC. Reverting changes.
Training on augumented user 7812 17/50 current_auc = 0.125
User 7812 AUC after training: 0.125
User 7812 does not improve AUC. Reverting changes.
Training on augumented user 87405 18/50 current_auc = 0.125
User 87405 AUC after training: 0.125
User 87405 does not improve AUC. Reverting changes.
Training on augumented user 15235 19/50 current_auc = 0.125
User 15235 AUC after training: 0.125
User 15235 does not improve AUC. Reverting changes.
Training on augumented user 85902 20/50 current_auc = 0.125
User 85902 AUC after training: 0.125
User 85902 does not improve AUC. Reverting changes.
Training on augumented user 80106 21/50 current_auc = 0.125
User 80106 AUC after training: 0.125
User 80106 does not improve AUC. Reverting changes.
Training on augumented user 83892 22/50 current_auc = 0.125
User 83892 AUC after training: 0.125
User 83892 does not improve AUC. Reverting changes.
Training on augumented user 55077 23/50 current_auc = 0.125
User 55077 AUC after training: 0.125
User 55077 does not improve AUC. Reverting changes.
Training on augumented user 23835 24/50 current_auc = 0.125
User 23835 AUC after training: 0.125
User 23835 does not improve AUC. Reverting changes.
Training on augumented user 78520 25/50 current_auc = 0.125
User 78520 AUC after training: 0.125
User 78520 does not improve AUC. Reverting changes.
Training on augumented user 105287 26/50 current_auc = 0.125
User 105287 AUC after training: 0.125
User 105287 does not improve AUC. Reverting changes.
Training on augumented user 25166 27/50 current_auc = 0.125
User 25166 AUC after training: 0.125
User 25166 does not improve AUC. Reverting changes.
Training on augumented user 28388 28/50 current_auc = 0.125
User 28388 AUC after training: 0.125
User 28388 does not improve AUC. Reverting changes.
Training on augumented user 54546 29/50 current_auc = 0.125
User 54546 AUC after training: 0.125
User 54546 does not improve AUC. Reverting changes.
Training on augumented user 135920 30/50 current_auc = 0.125
User 135920 AUC after training: 0.125
User 135920 does not improve AUC. Reverting changes.
Training on augumented user 58253 31/50 current_auc = 0.125
User 58253 AUC after training: 0.125
User 58253 does not improve AUC. Reverting changes.
Training on augumented user 101889 32/50 current_auc = 0.125
User 101889 AUC after training: 0.0
User 101889 does not improve AUC. Reverting changes.
Training on augumented user 96534 33/50 current_auc = 0.125
User 96534 AUC after training: 0.125
User 96534 does not improve AUC. Reverting changes.
Training on augumented user 85216 34/50 current_auc = 0.125
User 85216 AUC after training: 0.125
User 85216 does not improve AUC. Reverting changes.
Training on augumented user 126230 35/50 current_auc = 0.125
User 126230 AUC after training: 0.125
User 126230 does not improve AUC. Reverting changes.
Training on augumented user 88564 36/50 current_auc = 0.125
User 88564 AUC after training: 0.125
User 88564 does not improve AUC. Reverting changes.
Training on augumented user 35886 37/50 current_auc = 0.125
User 35886 AUC after training: 0.125
User 35886 does not improve AUC. Reverting changes.
Training on augumented user 70667 38/50 current_auc = 0.125
User 70667 AUC after training: 0.125
User 70667 does not improve AUC. Reverting changes.
Training on augumented user 29716 39/50 current_auc = 0.125
User 29716 AUC after training: 0.125
User 29716 does not improve AUC. Reverting changes.
Training on augumented user 11481 40/50 current_auc = 0.125
User 11481 AUC after training: 0.125
User 11481 does not improve AUC. Reverting changes.
Training on augumented user 72012 41/50 current_auc = 0.125
User 72012 AUC after training: 0.125
User 72012 does not improve AUC. Reverting changes.
Training on augumented user 104765 42/50 current_auc = 0.125
User 104765 AUC after training: 0.125
User 104765 does not improve AUC. Reverting changes.
Training on augumented user 80787 43/50 current_auc = 0.125
User 80787 AUC after training: 0.125
User 80787 does not improve AUC. Reverting changes.
Training on augumented user 70134 44/50 current_auc = 0.125
User 70134 AUC after training: 0.125
User 70134 does not improve AUC. Reverting changes.
Training on augumented user 80177 45/50 current_auc = 0.125
User 80177 AUC after training: 0.125
User 80177 does not improve AUC. Reverting changes.
Training on augumented user 112911 46/50 current_auc = 0.125
User 112911 AUC after training: 0.125
User 112911 does not improve AUC. Reverting changes.
Training on augumented user 71391 47/50 current_auc = 0.125
User 71391 AUC after training: 0.125
User 71391 does not improve AUC. Reverting changes.
Training on augumented user 31334 48/50 current_auc = 0.125
User 31334 AUC after training: 0.125
User 31334 does not improve AUC. Reverting changes.
Training on augumented user 113545 49/50 current_auc = 0.125
User 113545 AUC after training: 0.125
User 113545 does not improve AUC. Reverting changes.
[2024-12-02 20:02:26.140827] start test user 116353 265/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:02:26.575126] start test user 116353 265/567 recall augumented users by random, augumented_users = [93582, 115541, 44123, 10979, 124612, 67839, 103091, 89052, 108269, 54174, 11764, 50136, 86236, 13326, 12396, 11601, 5014, 5405, 51748, 87256, 130178, 56582, 93990, 16198, 119803, 53795, 96767, 108677, 18673, 25467, 82673, 3552, 120460, 22919, 4282, 106044, 33315, 106891, 11582, 18582, 136919, 54404, 13374, 87456, 85210, 25100, 46344, 122644, 9970, 94886]
[2024-12-02 20:02:26.590475] user = 116353 Cloud 265/567
[2024-12-02 20:02:26.600245] user = 116353 Local 265/567
[2024-12-02 20:02:26.671375] user = 116353 Local+ 265/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:02:29.322323] user = 116353 MPDA- 265/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7202380952380952
Training on augumented user 93582 0/50 current_auc = 0.7202380952380952
User 93582 AUC after training: 0.7321428571428572
User 93582 improves AUC. Keeping the model.
Training on augumented user 115541 1/50 current_auc = 0.7321428571428572
User 115541 AUC after training: 0.7321428571428572
User 115541 does not improve AUC. Reverting changes.
Training on augumented user 44123 2/50 current_auc = 0.7321428571428572
User 44123 AUC after training: 0.7321428571428572
User 44123 does not improve AUC. Reverting changes.
Training on augumented user 10979 3/50 current_auc = 0.7321428571428572
User 10979 AUC after training: 0.7261904761904762
User 10979 does not improve AUC. Reverting changes.
Training on augumented user 124612 4/50 current_auc = 0.7321428571428572
User 124612 AUC after training: 0.7321428571428572
User 124612 does not improve AUC. Reverting changes.
Training on augumented user 67839 5/50 current_auc = 0.7321428571428572
User 67839 AUC after training: 0.7321428571428572
User 67839 does not improve AUC. Reverting changes.
Training on augumented user 103091 6/50 current_auc = 0.7321428571428572
User 103091 AUC after training: 0.7261904761904762
User 103091 does not improve AUC. Reverting changes.
Training on augumented user 89052 7/50 current_auc = 0.7321428571428572
User 89052 AUC after training: 0.7321428571428572
User 89052 does not improve AUC. Reverting changes.
Training on augumented user 108269 8/50 current_auc = 0.7321428571428572
User 108269 AUC after training: 0.7261904761904762
User 108269 does not improve AUC. Reverting changes.
Training on augumented user 54174 9/50 current_auc = 0.7321428571428572
User 54174 AUC after training: 0.7321428571428572
User 54174 does not improve AUC. Reverting changes.
Training on augumented user 11764 10/50 current_auc = 0.7321428571428572
User 11764 AUC after training: 0.7261904761904762
User 11764 does not improve AUC. Reverting changes.
Training on augumented user 50136 11/50 current_auc = 0.7321428571428572
User 50136 AUC after training: 0.7261904761904762
User 50136 does not improve AUC. Reverting changes.
Training on augumented user 86236 12/50 current_auc = 0.7321428571428572
User 86236 AUC after training: 0.7321428571428572
User 86236 does not improve AUC. Reverting changes.
Training on augumented user 13326 13/50 current_auc = 0.7321428571428572
User 13326 AUC after training: 0.7321428571428572
User 13326 does not improve AUC. Reverting changes.
Training on augumented user 12396 14/50 current_auc = 0.7321428571428572
User 12396 AUC after training: 0.7321428571428572
User 12396 does not improve AUC. Reverting changes.
Training on augumented user 11601 15/50 current_auc = 0.7321428571428572
User 11601 AUC after training: 0.7321428571428572
User 11601 does not improve AUC. Reverting changes.
Training on augumented user 5014 16/50 current_auc = 0.7321428571428572
User 5014 AUC after training: 0.7321428571428572
User 5014 does not improve AUC. Reverting changes.
Training on augumented user 5405 17/50 current_auc = 0.7321428571428572
User 5405 AUC after training: 0.7321428571428572
User 5405 does not improve AUC. Reverting changes.
Training on augumented user 51748 18/50 current_auc = 0.7321428571428572
User 51748 AUC after training: 0.7261904761904762
User 51748 does not improve AUC. Reverting changes.
Training on augumented user 87256 19/50 current_auc = 0.7321428571428572
User 87256 AUC after training: 0.7321428571428572
User 87256 does not improve AUC. Reverting changes.
Training on augumented user 130178 20/50 current_auc = 0.7321428571428572
User 130178 AUC after training: 0.7321428571428572
User 130178 does not improve AUC. Reverting changes.
Training on augumented user 56582 21/50 current_auc = 0.7321428571428572
User 56582 AUC after training: 0.7321428571428572
User 56582 does not improve AUC. Reverting changes.
Training on augumented user 93990 22/50 current_auc = 0.7321428571428572
User 93990 AUC after training: 0.7261904761904762
User 93990 does not improve AUC. Reverting changes.
Training on augumented user 16198 23/50 current_auc = 0.7321428571428572
User 16198 AUC after training: 0.7321428571428572
User 16198 does not improve AUC. Reverting changes.
Training on augumented user 119803 24/50 current_auc = 0.7321428571428572
User 119803 AUC after training: 0.7321428571428572
User 119803 does not improve AUC. Reverting changes.
Training on augumented user 53795 25/50 current_auc = 0.7321428571428572
User 53795 AUC after training: 0.7261904761904762
User 53795 does not improve AUC. Reverting changes.
Training on augumented user 96767 26/50 current_auc = 0.7321428571428572
User 96767 AUC after training: 0.7321428571428572
User 96767 does not improve AUC. Reverting changes.
Training on augumented user 108677 27/50 current_auc = 0.7321428571428572
User 108677 AUC after training: 0.7321428571428572
User 108677 does not improve AUC. Reverting changes.
Training on augumented user 18673 28/50 current_auc = 0.7321428571428572
User 18673 AUC after training: 0.7321428571428572
User 18673 does not improve AUC. Reverting changes.
Training on augumented user 25467 29/50 current_auc = 0.7321428571428572
User 25467 AUC after training: 0.7321428571428572
User 25467 does not improve AUC. Reverting changes.
Training on augumented user 82673 30/50 current_auc = 0.7321428571428572
User 82673 AUC after training: 0.7261904761904762
User 82673 does not improve AUC. Reverting changes.
Training on augumented user 3552 31/50 current_auc = 0.7321428571428572
User 3552 AUC after training: 0.7321428571428572
User 3552 does not improve AUC. Reverting changes.
Training on augumented user 120460 32/50 current_auc = 0.7321428571428572
User 120460 AUC after training: 0.7321428571428572
User 120460 does not improve AUC. Reverting changes.
Training on augumented user 22919 33/50 current_auc = 0.7321428571428572
User 22919 AUC after training: 0.7321428571428572
User 22919 does not improve AUC. Reverting changes.
Training on augumented user 4282 34/50 current_auc = 0.7321428571428572
User 4282 AUC after training: 0.7321428571428572
User 4282 does not improve AUC. Reverting changes.
Training on augumented user 106044 35/50 current_auc = 0.7321428571428572
User 106044 AUC after training: 0.7261904761904762
User 106044 does not improve AUC. Reverting changes.
Training on augumented user 33315 36/50 current_auc = 0.7321428571428572
User 33315 AUC after training: 0.7321428571428572
User 33315 does not improve AUC. Reverting changes.
Training on augumented user 106891 37/50 current_auc = 0.7321428571428572
User 106891 AUC after training: 0.7261904761904762
User 106891 does not improve AUC. Reverting changes.
Training on augumented user 11582 38/50 current_auc = 0.7321428571428572
User 11582 AUC after training: 0.7321428571428572
User 11582 does not improve AUC. Reverting changes.
Training on augumented user 18582 39/50 current_auc = 0.7321428571428572
User 18582 AUC after training: 0.7321428571428572
User 18582 does not improve AUC. Reverting changes.
Training on augumented user 136919 40/50 current_auc = 0.7321428571428572
User 136919 AUC after training: 0.7321428571428572
User 136919 does not improve AUC. Reverting changes.
Training on augumented user 54404 41/50 current_auc = 0.7321428571428572
User 54404 AUC after training: 0.7261904761904762
User 54404 does not improve AUC. Reverting changes.
Training on augumented user 13374 42/50 current_auc = 0.7321428571428572
User 13374 AUC after training: 0.7321428571428572
User 13374 does not improve AUC. Reverting changes.
Training on augumented user 87456 43/50 current_auc = 0.7321428571428572
User 87456 AUC after training: 0.7321428571428572
User 87456 does not improve AUC. Reverting changes.
Training on augumented user 85210 44/50 current_auc = 0.7321428571428572
User 85210 AUC after training: 0.7261904761904762
User 85210 does not improve AUC. Reverting changes.
Training on augumented user 25100 45/50 current_auc = 0.7321428571428572
User 25100 AUC after training: 0.7261904761904762
User 25100 does not improve AUC. Reverting changes.
Training on augumented user 46344 46/50 current_auc = 0.7321428571428572
User 46344 AUC after training: 0.7321428571428572
User 46344 does not improve AUC. Reverting changes.
Training on augumented user 122644 47/50 current_auc = 0.7321428571428572
User 122644 AUC after training: 0.7261904761904762
User 122644 does not improve AUC. Reverting changes.
Training on augumented user 9970 48/50 current_auc = 0.7321428571428572
User 9970 AUC after training: 0.7321428571428572
User 9970 does not improve AUC. Reverting changes.
Training on augumented user 94886 49/50 current_auc = 0.7321428571428572
User 94886 AUC after training: 0.7321428571428572
User 94886 does not improve AUC. Reverting changes.
[2024-12-02 20:03:01.803084] start test user 116361 266/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:03:02.221163] start test user 116361 266/567 recall augumented users by random, augumented_users = [46040, 1130, 85044, 19588, 130296, 27712, 17584, 110409, 46299, 24625, 50212, 9417, 55090, 43933, 71118, 34148, 66932, 132978, 27568, 92778, 96234, 109992, 129711, 12748, 107351, 16735, 28836, 110083, 105760, 64041, 123502, 2006, 77883, 1674, 52182, 100986, 35745, 103405, 134393, 42740, 28911, 61483, 135807, 64167, 86879, 52502, 105742, 42557, 129517, 69170]
[2024-12-02 20:03:02.240500] user = 116361 Cloud 266/567
[2024-12-02 20:03:02.315986] user = 116361 Local 266/567
[2024-12-02 20:03:02.644940] user = 116361 Local+ 266/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:03:05.218716] user = 116361 MPDA- 266/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5623872203683105
Training on augumented user 46040 0/50 current_auc = 0.5623872203683105
User 46040 AUC after training: 0.5628352490421455
User 46040 improves AUC. Keeping the model.
Training on augumented user 1130 1/50 current_auc = 0.5628352490421455
User 1130 AUC after training: 0.5629217649239897
User 1130 improves AUC. Keeping the model.
Training on augumented user 85044 2/50 current_auc = 0.5629217649239897
User 85044 AUC after training: 0.5628846866889137
User 85044 does not improve AUC. Reverting changes.
Training on augumented user 19588 3/50 current_auc = 0.5629217649239897
User 19588 AUC after training: 0.5628785069830676
User 19588 does not improve AUC. Reverting changes.
Training on augumented user 130296 4/50 current_auc = 0.5629217649239897
User 130296 AUC after training: 0.5627610925719936
User 130296 does not improve AUC. Reverting changes.
Training on augumented user 27712 5/50 current_auc = 0.5629217649239897
User 27712 AUC after training: 0.5630268199233717
User 27712 improves AUC. Keeping the model.
Training on augumented user 17584 6/50 current_auc = 0.5630268199233717
User 17584 AUC after training: 0.5631751328636757
User 17584 improves AUC. Keeping the model.
Training on augumented user 110409 7/50 current_auc = 0.5631751328636757
User 110409 AUC after training: 0.5632801878630577
User 110409 improves AUC. Keeping the model.
Training on augumented user 46299 8/50 current_auc = 0.5632801878630577
User 46299 AUC after training: 0.5632678284513657
User 46299 does not improve AUC. Reverting changes.
Training on augumented user 24625 9/50 current_auc = 0.5632801878630577
User 24625 AUC after training: 0.5631874922753677
User 24625 does not improve AUC. Reverting changes.
Training on augumented user 50212 10/50 current_auc = 0.5632801878630577
User 50212 AUC after training: 0.5639537758002718
User 50212 improves AUC. Keeping the model.
Training on augumented user 9417 11/50 current_auc = 0.5639537758002718
User 9417 AUC after training: 0.5639908540353479
User 9417 improves AUC. Keeping the model.
Training on augumented user 55090 12/50 current_auc = 0.5639908540353479
User 55090 AUC after training: 0.5637683846248919
User 55090 does not improve AUC. Reverting changes.
Training on augumented user 43933 13/50 current_auc = 0.5639908540353479
User 43933 AUC after training: 0.5638857990359659
User 43933 does not improve AUC. Reverting changes.
Training on augumented user 71118 14/50 current_auc = 0.5639908540353479
User 71118 AUC after training: 0.5638270918304289
User 71118 does not improve AUC. Reverting changes.
Training on augumented user 34148 15/50 current_auc = 0.5639908540353479
User 34148 AUC after training: 0.563811642565814
User 34148 does not improve AUC. Reverting changes.
Training on augumented user 66932 16/50 current_auc = 0.5639908540353479
User 66932 AUC after training: 0.5623037943393895
User 66932 does not improve AUC. Reverting changes.
Training on augumented user 132978 17/50 current_auc = 0.5639908540353479
User 132978 AUC after training: 0.56400321344704
User 132978 improves AUC. Keeping the model.
Training on augumented user 27568 18/50 current_auc = 0.56400321344704
User 27568 AUC after training: 0.5637622049190458
User 27568 does not improve AUC. Reverting changes.
Training on augumented user 92778 19/50 current_auc = 0.56400321344704
User 92778 AUC after training: 0.5639445062415028
User 92778 does not improve AUC. Reverting changes.
Training on augumented user 96234 20/50 current_auc = 0.56400321344704
User 96234 AUC after training: 0.5638549005067359
User 96234 does not improve AUC. Reverting changes.
Training on augumented user 109992 21/50 current_auc = 0.56400321344704
User 109992 AUC after training: 0.5640650105055
User 109992 improves AUC. Keeping the model.
Training on augumented user 129711 22/50 current_auc = 0.5640650105055
User 129711 AUC after training: 0.5639692250648869
User 129711 does not improve AUC. Reverting changes.
Training on augumented user 12748 23/50 current_auc = 0.5640650105055
User 12748 AUC after training: 0.5641731553578049
User 12748 improves AUC. Keeping the model.
Training on augumented user 107351 24/50 current_auc = 0.5641731553578049
User 107351 AUC after training: 0.564123717711037
User 107351 does not improve AUC. Reverting changes.
Training on augumented user 16735 25/50 current_auc = 0.5641731553578049
User 16735 AUC after training: 0.564105178593499
User 16735 does not improve AUC. Reverting changes.
Training on augumented user 28836 26/50 current_auc = 0.5641731553578049
User 28836 AUC after training: 0.564170065504882
User 28836 does not improve AUC. Reverting changes.
Training on augumented user 110083 27/50 current_auc = 0.5641731553578049
User 110083 AUC after training: 0.5639506859473489
User 110083 does not improve AUC. Reverting changes.
Training on augumented user 105760 28/50 current_auc = 0.5641731553578049
User 105760 AUC after training: 0.564355456680262
User 105760 improves AUC. Keeping the model.
Training on augumented user 64041 29/50 current_auc = 0.564355456680262
User 64041 AUC after training: 0.564327648003955
User 64041 does not improve AUC. Reverting changes.
Training on augumented user 123502 30/50 current_auc = 0.564355456680262
User 123502 AUC after training: 0.564052651093808
User 123502 does not improve AUC. Reverting changes.
Training on augumented user 2006 31/50 current_auc = 0.564355456680262
User 2006 AUC after training: 0.5642504016808799
User 2006 does not improve AUC. Reverting changes.
Training on augumented user 77883 32/50 current_auc = 0.564355456680262
User 77883 AUC after training: 0.564132987269806
User 77883 does not improve AUC. Reverting changes.
Training on augumented user 1674 33/50 current_auc = 0.564355456680262
User 1674 AUC after training: 0.564262761092572
User 1674 does not improve AUC. Reverting changes.
Training on augumented user 52182 34/50 current_auc = 0.564355456680262
User 52182 AUC after training: 0.564213323445804
User 52182 does not improve AUC. Reverting changes.
Training on augumented user 100986 35/50 current_auc = 0.564355456680262
User 100986 AUC after training: 0.5642195031516499
User 100986 does not improve AUC. Reverting changes.
Training on augumented user 35745 36/50 current_auc = 0.564355456680262
User 35745 AUC after training: 0.5636633296255098
User 35745 does not improve AUC. Reverting changes.
Training on augumented user 103405 37/50 current_auc = 0.564355456680262
User 103405 AUC after training: 0.5642442219750341
User 103405 does not improve AUC. Reverting changes.
Training on augumented user 134393 38/50 current_auc = 0.564355456680262
User 134393 AUC after training: 0.564361636386108
User 134393 improves AUC. Keeping the model.
Training on augumented user 42740 39/50 current_auc = 0.564361636386108
User 42740 AUC after training: 0.5643739957978
User 42740 improves AUC. Keeping the model.
Training on augumented user 28911 40/50 current_auc = 0.5643739957978
User 28911 AUC after training: 0.564355456680262
User 28911 does not improve AUC. Reverting changes.
Training on augumented user 61483 41/50 current_auc = 0.5643739957978
User 61483 AUC after training: 0.564176245210728
User 61483 does not improve AUC. Reverting changes.
Training on augumented user 135807 42/50 current_auc = 0.5643739957978
User 135807 AUC after training: 0.5639414163885799
User 135807 does not improve AUC. Reverting changes.
Training on augumented user 64167 43/50 current_auc = 0.5643739957978
User 64167 AUC after training: 0.564383265356569
User 64167 improves AUC. Keeping the model.
Training on augumented user 86879 44/50 current_auc = 0.564383265356569
User 86879 AUC after training: 0.5644666913854901
User 86879 improves AUC. Keeping the model.
Training on augumented user 52502 45/50 current_auc = 0.5644666913854901
User 52502 AUC after training: 0.564151526387344
User 52502 does not improve AUC. Reverting changes.
Training on augumented user 105742 46/50 current_auc = 0.5644666913854901
User 105742 AUC after training: 0.564327648003955
User 105742 does not improve AUC. Reverting changes.
Training on augumented user 42557 47/50 current_auc = 0.5644666913854901
User 42557 AUC after training: 0.5644852305030281
User 42557 improves AUC. Keeping the model.
Training on augumented user 129517 48/50 current_auc = 0.5644852305030281
User 129517 AUC after training: 0.5645655666790261
User 129517 improves AUC. Keeping the model.
Training on augumented user 69170 49/50 current_auc = 0.5645655666790261
User 69170 AUC after training: 0.5644481522679521
User 69170 does not improve AUC. Reverting changes.
[2024-12-02 20:03:40.442050] start test user 116373 267/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:03:41.167857] start test user 116373 267/567 recall augumented users by random, augumented_users = [112558, 10969, 51773, 105930, 120551, 41288, 11533, 36990, 111754, 108150, 14040, 83617, 64346, 82104, 118431, 35521, 38280, 57017, 28157, 56364, 32374, 45932, 106304, 90242, 101472, 1056, 81672, 22679, 118812, 9329, 22485, 121628, 88389, 135375, 38003, 20963, 72191, 48201, 44851, 117202, 104624, 46984, 130892, 55941, 90127, 135932, 67913, 26357, 56790, 5831]
[2024-12-02 20:03:41.185316] user = 116373 Cloud 267/567
[2024-12-02 20:03:41.207676] user = 116373 Local 267/567
[2024-12-02 20:03:41.239752] user = 116373 Local+ 267/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:03:43.233478] user = 116373 MPDA- 267/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7492877492877492
Training on augumented user 112558 0/50 current_auc = 0.7492877492877492
User 112558 AUC after training: 0.7521367521367521
User 112558 improves AUC. Keeping the model.
Training on augumented user 10969 1/50 current_auc = 0.7521367521367521
User 10969 AUC after training: 0.7521367521367521
User 10969 does not improve AUC. Reverting changes.
Training on augumented user 51773 2/50 current_auc = 0.7521367521367521
User 51773 AUC after training: 0.7521367521367521
User 51773 does not improve AUC. Reverting changes.
Training on augumented user 105930 3/50 current_auc = 0.7521367521367521
User 105930 AUC after training: 0.7521367521367521
User 105930 does not improve AUC. Reverting changes.
Training on augumented user 120551 4/50 current_auc = 0.7521367521367521
User 120551 AUC after training: 0.754985754985755
User 120551 improves AUC. Keeping the model.
Training on augumented user 41288 5/50 current_auc = 0.754985754985755
User 41288 AUC after training: 0.754985754985755
User 41288 does not improve AUC. Reverting changes.
Training on augumented user 11533 6/50 current_auc = 0.754985754985755
User 11533 AUC after training: 0.7578347578347577
User 11533 improves AUC. Keeping the model.
Training on augumented user 36990 7/50 current_auc = 0.7578347578347577
User 36990 AUC after training: 0.754985754985755
User 36990 does not improve AUC. Reverting changes.
Training on augumented user 111754 8/50 current_auc = 0.7578347578347577
User 111754 AUC after training: 0.7521367521367521
User 111754 does not improve AUC. Reverting changes.
Training on augumented user 108150 9/50 current_auc = 0.7578347578347577
User 108150 AUC after training: 0.7578347578347577
User 108150 does not improve AUC. Reverting changes.
Training on augumented user 14040 10/50 current_auc = 0.7578347578347577
User 14040 AUC after training: 0.7549857549857549
User 14040 does not improve AUC. Reverting changes.
Training on augumented user 83617 11/50 current_auc = 0.7578347578347577
User 83617 AUC after training: 0.7521367521367521
User 83617 does not improve AUC. Reverting changes.
Training on augumented user 64346 12/50 current_auc = 0.7578347578347577
User 64346 AUC after training: 0.7492877492877492
User 64346 does not improve AUC. Reverting changes.
Training on augumented user 82104 13/50 current_auc = 0.7578347578347577
User 82104 AUC after training: 0.754985754985755
User 82104 does not improve AUC. Reverting changes.
Training on augumented user 118431 14/50 current_auc = 0.7578347578347577
User 118431 AUC after training: 0.754985754985755
User 118431 does not improve AUC. Reverting changes.
Training on augumented user 35521 15/50 current_auc = 0.7578347578347577
User 35521 AUC after training: 0.7521367521367521
User 35521 does not improve AUC. Reverting changes.
Training on augumented user 38280 16/50 current_auc = 0.7578347578347577
User 38280 AUC after training: 0.7578347578347577
User 38280 does not improve AUC. Reverting changes.
Training on augumented user 57017 17/50 current_auc = 0.7578347578347577
User 57017 AUC after training: 0.7521367521367521
User 57017 does not improve AUC. Reverting changes.
Training on augumented user 28157 18/50 current_auc = 0.7578347578347577
User 28157 AUC after training: 0.7578347578347577
User 28157 does not improve AUC. Reverting changes.
Training on augumented user 56364 19/50 current_auc = 0.7578347578347577
User 56364 AUC after training: 0.7578347578347577
User 56364 does not improve AUC. Reverting changes.
Training on augumented user 32374 20/50 current_auc = 0.7578347578347577
User 32374 AUC after training: 0.754985754985755
User 32374 does not improve AUC. Reverting changes.
Training on augumented user 45932 21/50 current_auc = 0.7578347578347577
User 45932 AUC after training: 0.7578347578347577
User 45932 does not improve AUC. Reverting changes.
Training on augumented user 106304 22/50 current_auc = 0.7578347578347577
User 106304 AUC after training: 0.7578347578347577
User 106304 does not improve AUC. Reverting changes.
Training on augumented user 90242 23/50 current_auc = 0.7578347578347577
User 90242 AUC after training: 0.7549857549857549
User 90242 does not improve AUC. Reverting changes.
Training on augumented user 101472 24/50 current_auc = 0.7578347578347577
User 101472 AUC after training: 0.7606837606837606
User 101472 improves AUC. Keeping the model.
Training on augumented user 1056 25/50 current_auc = 0.7606837606837606
User 1056 AUC after training: 0.7606837606837606
User 1056 does not improve AUC. Reverting changes.
Training on augumented user 81672 26/50 current_auc = 0.7606837606837606
User 81672 AUC after training: 0.7606837606837606
User 81672 does not improve AUC. Reverting changes.
Training on augumented user 22679 27/50 current_auc = 0.7606837606837606
User 22679 AUC after training: 0.7578347578347578
User 22679 does not improve AUC. Reverting changes.
Training on augumented user 118812 28/50 current_auc = 0.7606837606837606
User 118812 AUC after training: 0.7521367521367521
User 118812 does not improve AUC. Reverting changes.
Training on augumented user 9329 29/50 current_auc = 0.7606837606837606
User 9329 AUC after training: 0.7606837606837606
User 9329 does not improve AUC. Reverting changes.
Training on augumented user 22485 30/50 current_auc = 0.7606837606837606
User 22485 AUC after training: 0.7578347578347577
User 22485 does not improve AUC. Reverting changes.
Training on augumented user 121628 31/50 current_auc = 0.7606837606837606
User 121628 AUC after training: 0.7492877492877493
User 121628 does not improve AUC. Reverting changes.
Training on augumented user 88389 32/50 current_auc = 0.7606837606837606
User 88389 AUC after training: 0.7578347578347577
User 88389 does not improve AUC. Reverting changes.
Training on augumented user 135375 33/50 current_auc = 0.7606837606837606
User 135375 AUC after training: 0.7578347578347577
User 135375 does not improve AUC. Reverting changes.
Training on augumented user 38003 34/50 current_auc = 0.7606837606837606
User 38003 AUC after training: 0.7578347578347577
User 38003 does not improve AUC. Reverting changes.
Training on augumented user 20963 35/50 current_auc = 0.7606837606837606
User 20963 AUC after training: 0.754985754985755
User 20963 does not improve AUC. Reverting changes.
Training on augumented user 72191 36/50 current_auc = 0.7606837606837606
User 72191 AUC after training: 0.7521367521367521
User 72191 does not improve AUC. Reverting changes.
Training on augumented user 48201 37/50 current_auc = 0.7606837606837606
User 48201 AUC after training: 0.754985754985755
User 48201 does not improve AUC. Reverting changes.
Training on augumented user 44851 38/50 current_auc = 0.7606837606837606
User 44851 AUC after training: 0.7578347578347577
User 44851 does not improve AUC. Reverting changes.
Training on augumented user 117202 39/50 current_auc = 0.7606837606837606
User 117202 AUC after training: 0.7578347578347577
User 117202 does not improve AUC. Reverting changes.
Training on augumented user 104624 40/50 current_auc = 0.7606837606837606
User 104624 AUC after training: 0.7578347578347577
User 104624 does not improve AUC. Reverting changes.
Training on augumented user 46984 41/50 current_auc = 0.7606837606837606
User 46984 AUC after training: 0.7606837606837606
User 46984 does not improve AUC. Reverting changes.
Training on augumented user 130892 42/50 current_auc = 0.7606837606837606
User 130892 AUC after training: 0.754985754985755
User 130892 does not improve AUC. Reverting changes.
Training on augumented user 55941 43/50 current_auc = 0.7606837606837606
User 55941 AUC after training: 0.7521367521367521
User 55941 does not improve AUC. Reverting changes.
Training on augumented user 90127 44/50 current_auc = 0.7606837606837606
User 90127 AUC after training: 0.7578347578347577
User 90127 does not improve AUC. Reverting changes.
Training on augumented user 135932 45/50 current_auc = 0.7606837606837606
User 135932 AUC after training: 0.7578347578347577
User 135932 does not improve AUC. Reverting changes.
Training on augumented user 67913 46/50 current_auc = 0.7606837606837606
User 67913 AUC after training: 0.7578347578347578
User 67913 does not improve AUC. Reverting changes.
Training on augumented user 26357 47/50 current_auc = 0.7606837606837606
User 26357 AUC after training: 0.7578347578347578
User 26357 does not improve AUC. Reverting changes.
Training on augumented user 56790 48/50 current_auc = 0.7606837606837606
User 56790 AUC after training: 0.7578347578347578
User 56790 does not improve AUC. Reverting changes.
Training on augumented user 5831 49/50 current_auc = 0.7606837606837606
User 5831 AUC after training: 0.7521367521367521
User 5831 does not improve AUC. Reverting changes.
[2024-12-02 20:04:09.468695] start test user 116375 268/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:04:09.947979] start test user 116375 268/567 recall augumented users by random, augumented_users = [102143, 39631, 86162, 49644, 24923, 27661, 35893, 100764, 81795, 6388, 88122, 105858, 3621, 105973, 15471, 82863, 4521, 19817, 60943, 15406, 122240, 96210, 121620, 81975, 77009, 92028, 72310, 85767, 3927, 87554, 72434, 66203, 101026, 50377, 43537, 22142, 20521, 15132, 104797, 53685, 66131, 128392, 64659, 34370, 104321, 12304, 115858, 109021, 4342, 17858]
[2024-12-02 20:04:09.964521] user = 116375 Cloud 268/567
[2024-12-02 20:04:09.982261] user = 116375 Local 268/567
[2024-12-02 20:04:10.128795] user = 116375 Local+ 268/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:04:12.391856] user = 116375 MPDA- 268/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.763374485596708
Training on augumented user 102143 0/50 current_auc = 0.763374485596708
User 102143 AUC after training: 0.764122708567153
User 102143 improves AUC. Keeping the model.
Training on augumented user 39631 1/50 current_auc = 0.764122708567153
User 39631 AUC after training: 0.7607557052001497
User 39631 does not improve AUC. Reverting changes.
Training on augumented user 86162 2/50 current_auc = 0.764122708567153
User 86162 AUC after training: 0.7613168724279835
User 86162 does not improve AUC. Reverting changes.
Training on augumented user 49644 3/50 current_auc = 0.764122708567153
User 49644 AUC after training: 0.7637485970819304
User 49644 does not improve AUC. Reverting changes.
Training on augumented user 24923 4/50 current_auc = 0.764122708567153
User 24923 AUC after training: 0.7635615413393191
User 24923 does not improve AUC. Reverting changes.
Training on augumented user 27661 5/50 current_auc = 0.764122708567153
User 27661 AUC after training: 0.7637485970819304
User 27661 does not improve AUC. Reverting changes.
Training on augumented user 35893 6/50 current_auc = 0.764122708567153
User 35893 AUC after training: 0.7639356528245418
User 35893 does not improve AUC. Reverting changes.
Training on augumented user 100764 7/50 current_auc = 0.764122708567153
User 100764 AUC after training: 0.7633744855967078
User 100764 does not improve AUC. Reverting changes.
Training on augumented user 81795 8/50 current_auc = 0.764122708567153
User 81795 AUC after training: 0.7633744855967078
User 81795 does not improve AUC. Reverting changes.
Training on augumented user 6388 9/50 current_auc = 0.764122708567153
User 6388 AUC after training: 0.7607557052001497
User 6388 does not improve AUC. Reverting changes.
Training on augumented user 88122 10/50 current_auc = 0.764122708567153
User 88122 AUC after training: 0.7616909839132062
User 88122 does not improve AUC. Reverting changes.
Training on augumented user 105858 11/50 current_auc = 0.764122708567153
User 105858 AUC after training: 0.763374485596708
User 105858 does not improve AUC. Reverting changes.
Training on augumented user 3621 12/50 current_auc = 0.764122708567153
User 3621 AUC after training: 0.7626262626262627
User 3621 does not improve AUC. Reverting changes.
Training on augumented user 105973 13/50 current_auc = 0.764122708567153
User 105973 AUC after training: 0.7637485970819304
User 105973 does not improve AUC. Reverting changes.
Training on augumented user 15471 14/50 current_auc = 0.764122708567153
User 15471 AUC after training: 0.7633744855967077
User 15471 does not improve AUC. Reverting changes.
Training on augumented user 82863 15/50 current_auc = 0.764122708567153
User 82863 AUC after training: 0.7637485970819304
User 82863 does not improve AUC. Reverting changes.
Training on augumented user 4521 16/50 current_auc = 0.764122708567153
User 4521 AUC after training: 0.7631874298540965
User 4521 does not improve AUC. Reverting changes.
Training on augumented user 19817 17/50 current_auc = 0.764122708567153
User 19817 AUC after training: 0.7635615413393191
User 19817 does not improve AUC. Reverting changes.
Training on augumented user 60943 18/50 current_auc = 0.764122708567153
User 60943 AUC after training: 0.7631874298540966
User 60943 does not improve AUC. Reverting changes.
Training on augumented user 15406 19/50 current_auc = 0.764122708567153
User 15406 AUC after training: 0.7631874298540966
User 15406 does not improve AUC. Reverting changes.
Training on augumented user 122240 20/50 current_auc = 0.764122708567153
User 122240 AUC after training: 0.7633744855967078
User 122240 does not improve AUC. Reverting changes.
Training on augumented user 96210 21/50 current_auc = 0.764122708567153
User 96210 AUC after training: 0.7630003741114852
User 96210 does not improve AUC. Reverting changes.
Training on augumented user 121620 22/50 current_auc = 0.764122708567153
User 121620 AUC after training: 0.7607557052001497
User 121620 does not improve AUC. Reverting changes.
Training on augumented user 81975 23/50 current_auc = 0.764122708567153
User 81975 AUC after training: 0.7637485970819304
User 81975 does not improve AUC. Reverting changes.
Training on augumented user 77009 24/50 current_auc = 0.764122708567153
User 77009 AUC after training: 0.7622521511410401
User 77009 does not improve AUC. Reverting changes.
Training on augumented user 92028 25/50 current_auc = 0.764122708567153
User 92028 AUC after training: 0.7635615413393191
User 92028 does not improve AUC. Reverting changes.
Training on augumented user 72310 26/50 current_auc = 0.764122708567153
User 72310 AUC after training: 0.7626262626262627
User 72310 does not improve AUC. Reverting changes.
Training on augumented user 85767 27/50 current_auc = 0.764122708567153
User 85767 AUC after training: 0.7635615413393191
User 85767 does not improve AUC. Reverting changes.
Training on augumented user 3927 28/50 current_auc = 0.764122708567153
User 3927 AUC after training: 0.7596333707444819
User 3927 does not improve AUC. Reverting changes.
Training on augumented user 87554 29/50 current_auc = 0.764122708567153
User 87554 AUC after training: 0.7624392068836513
User 87554 does not improve AUC. Reverting changes.
Training on augumented user 72434 30/50 current_auc = 0.764122708567153
User 72434 AUC after training: 0.7633744855967077
User 72434 does not improve AUC. Reverting changes.
Training on augumented user 66203 31/50 current_auc = 0.764122708567153
User 66203 AUC after training: 0.7639356528245417
User 66203 does not improve AUC. Reverting changes.
Training on augumented user 101026 32/50 current_auc = 0.764122708567153
User 101026 AUC after training: 0.7613168724279835
User 101026 does not improve AUC. Reverting changes.
Training on augumented user 50377 33/50 current_auc = 0.764122708567153
User 50377 AUC after training: 0.7633744855967078
User 50377 does not improve AUC. Reverting changes.
Training on augumented user 43537 34/50 current_auc = 0.764122708567153
User 43537 AUC after training: 0.7637485970819304
User 43537 does not improve AUC. Reverting changes.
Training on augumented user 22142 35/50 current_auc = 0.764122708567153
User 22142 AUC after training: 0.764122708567153
User 22142 does not improve AUC. Reverting changes.
Training on augumented user 20521 36/50 current_auc = 0.764122708567153
User 20521 AUC after training: 0.7622521511410401
User 20521 does not improve AUC. Reverting changes.
Training on augumented user 15132 37/50 current_auc = 0.764122708567153
User 15132 AUC after training: 0.7624392068836514
User 15132 does not improve AUC. Reverting changes.
Training on augumented user 104797 38/50 current_auc = 0.764122708567153
User 104797 AUC after training: 0.7620650953984287
User 104797 does not improve AUC. Reverting changes.
Training on augumented user 53685 39/50 current_auc = 0.764122708567153
User 53685 AUC after training: 0.7630003741114852
User 53685 does not improve AUC. Reverting changes.
Training on augumented user 66131 40/50 current_auc = 0.764122708567153
User 66131 AUC after training: 0.7637485970819304
User 66131 does not improve AUC. Reverting changes.
Training on augumented user 128392 41/50 current_auc = 0.764122708567153
User 128392 AUC after training: 0.7639356528245418
User 128392 does not improve AUC. Reverting changes.
Training on augumented user 64659 42/50 current_auc = 0.764122708567153
User 64659 AUC after training: 0.7630003741114852
User 64659 does not improve AUC. Reverting changes.
Training on augumented user 34370 43/50 current_auc = 0.764122708567153
User 34370 AUC after training: 0.7637485970819304
User 34370 does not improve AUC. Reverting changes.
Training on augumented user 104321 44/50 current_auc = 0.764122708567153
User 104321 AUC after training: 0.7643097643097643
User 104321 improves AUC. Keeping the model.
Training on augumented user 12304 45/50 current_auc = 0.7643097643097643
User 12304 AUC after training: 0.7613168724279835
User 12304 does not improve AUC. Reverting changes.
Training on augumented user 115858 46/50 current_auc = 0.7643097643097643
User 115858 AUC after training: 0.7630003741114852
User 115858 does not improve AUC. Reverting changes.
Training on augumented user 109021 47/50 current_auc = 0.7643097643097643
User 109021 AUC after training: 0.7626262626262628
User 109021 does not improve AUC. Reverting changes.
Training on augumented user 4342 48/50 current_auc = 0.7643097643097643
User 4342 AUC after training: 0.7622521511410401
User 4342 does not improve AUC. Reverting changes.
Training on augumented user 17858 49/50 current_auc = 0.7643097643097643
User 17858 AUC after training: 0.7652450430228208
User 17858 improves AUC. Keeping the model.
[2024-12-02 20:04:37.168031] start test user 116436 269/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:04:37.607581] start test user 116436 269/567 recall augumented users by random, augumented_users = [66541, 57002, 131627, 90290, 51144, 67743, 106379, 22549, 25018, 60548, 125559, 136544, 44924, 61264, 96555, 109877, 96210, 21346, 43937, 106829, 133305, 122572, 81917, 63973, 138352, 119339, 85988, 76750, 5033, 66566, 66827, 26468, 89117, 42358, 31944, 45668, 61906, 13698, 6800, 36967, 105749, 56076, 48154, 1069, 26810, 131076, 29190, 6270, 46501, 76141]
[2024-12-02 20:04:37.622938] user = 116436 Cloud 269/567
[2024-12-02 20:04:37.637676] user = 116436 Local 269/567
[2024-12-02 20:04:37.713080] user = 116436 Local+ 269/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:04:39.963609] user = 116436 MPDA- 269/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6879551820728291
Training on augumented user 66541 0/50 current_auc = 0.6879551820728291
User 66541 AUC after training: 0.6879551820728291
User 66541 does not improve AUC. Reverting changes.
Training on augumented user 57002 1/50 current_auc = 0.6879551820728291
User 57002 AUC after training: 0.6879551820728291
User 57002 does not improve AUC. Reverting changes.
Training on augumented user 131627 2/50 current_auc = 0.6879551820728291
User 131627 AUC after training: 0.6873949579831933
User 131627 does not improve AUC. Reverting changes.
Training on augumented user 90290 3/50 current_auc = 0.6879551820728291
User 90290 AUC after training: 0.6879551820728292
User 90290 improves AUC. Keeping the model.
Training on augumented user 51144 4/50 current_auc = 0.6879551820728292
User 51144 AUC after training: 0.6879551820728292
User 51144 does not improve AUC. Reverting changes.
Training on augumented user 67743 5/50 current_auc = 0.6879551820728292
User 67743 AUC after training: 0.6879551820728291
User 67743 does not improve AUC. Reverting changes.
Training on augumented user 106379 6/50 current_auc = 0.6879551820728292
User 106379 AUC after training: 0.6873949579831934
User 106379 does not improve AUC. Reverting changes.
Training on augumented user 22549 7/50 current_auc = 0.6879551820728292
User 22549 AUC after training: 0.6879551820728291
User 22549 does not improve AUC. Reverting changes.
Training on augumented user 25018 8/50 current_auc = 0.6879551820728292
User 25018 AUC after training: 0.6873949579831933
User 25018 does not improve AUC. Reverting changes.
Training on augumented user 60548 9/50 current_auc = 0.6879551820728292
User 60548 AUC after training: 0.6868347338935574
User 60548 does not improve AUC. Reverting changes.
Training on augumented user 125559 10/50 current_auc = 0.6879551820728292
User 125559 AUC after training: 0.6873949579831933
User 125559 does not improve AUC. Reverting changes.
Training on augumented user 136544 11/50 current_auc = 0.6879551820728292
User 136544 AUC after training: 0.6879551820728292
User 136544 does not improve AUC. Reverting changes.
Training on augumented user 44924 12/50 current_auc = 0.6879551820728292
User 44924 AUC after training: 0.6879551820728292
User 44924 does not improve AUC. Reverting changes.
Training on augumented user 61264 13/50 current_auc = 0.6879551820728292
User 61264 AUC after training: 0.6879551820728291
User 61264 does not improve AUC. Reverting changes.
Training on augumented user 96555 14/50 current_auc = 0.6879551820728292
User 96555 AUC after training: 0.6873949579831934
User 96555 does not improve AUC. Reverting changes.
Training on augumented user 109877 15/50 current_auc = 0.6879551820728292
User 109877 AUC after training: 0.6873949579831933
User 109877 does not improve AUC. Reverting changes.
Training on augumented user 96210 16/50 current_auc = 0.6879551820728292
User 96210 AUC after training: 0.6885154061624651
User 96210 improves AUC. Keeping the model.
Training on augumented user 21346 17/50 current_auc = 0.6885154061624651
User 21346 AUC after training: 0.688515406162465
User 21346 does not improve AUC. Reverting changes.
Training on augumented user 43937 18/50 current_auc = 0.6885154061624651
User 43937 AUC after training: 0.6890756302521008
User 43937 improves AUC. Keeping the model.
Training on augumented user 106829 19/50 current_auc = 0.6890756302521008
User 106829 AUC after training: 0.6896358543417367
User 106829 improves AUC. Keeping the model.
Training on augumented user 133305 20/50 current_auc = 0.6896358543417367
User 133305 AUC after training: 0.6896358543417367
User 133305 does not improve AUC. Reverting changes.
Training on augumented user 122572 21/50 current_auc = 0.6896358543417367
User 122572 AUC after training: 0.6879551820728291
User 122572 does not improve AUC. Reverting changes.
Training on augumented user 81917 22/50 current_auc = 0.6896358543417367
User 81917 AUC after training: 0.688515406162465
User 81917 does not improve AUC. Reverting changes.
Training on augumented user 63973 23/50 current_auc = 0.6896358543417367
User 63973 AUC after training: 0.689075630252101
User 63973 does not improve AUC. Reverting changes.
Training on augumented user 138352 24/50 current_auc = 0.6896358543417367
User 138352 AUC after training: 0.6890756302521008
User 138352 does not improve AUC. Reverting changes.
Training on augumented user 119339 25/50 current_auc = 0.6896358543417367
User 119339 AUC after training: 0.6879551820728291
User 119339 does not improve AUC. Reverting changes.
Training on augumented user 85988 26/50 current_auc = 0.6896358543417367
User 85988 AUC after training: 0.6907563025210085
User 85988 improves AUC. Keeping the model.
Training on augumented user 76750 27/50 current_auc = 0.6907563025210085
User 76750 AUC after training: 0.6890756302521008
User 76750 does not improve AUC. Reverting changes.
Training on augumented user 5033 28/50 current_auc = 0.6907563025210085
User 5033 AUC after training: 0.6896358543417368
User 5033 does not improve AUC. Reverting changes.
Training on augumented user 66566 29/50 current_auc = 0.6907563025210085
User 66566 AUC after training: 0.6896358543417368
User 66566 does not improve AUC. Reverting changes.
Training on augumented user 66827 30/50 current_auc = 0.6907563025210085
User 66827 AUC after training: 0.6857142857142857
User 66827 does not improve AUC. Reverting changes.
Training on augumented user 26468 31/50 current_auc = 0.6907563025210085
User 26468 AUC after training: 0.689075630252101
User 26468 does not improve AUC. Reverting changes.
Training on augumented user 89117 32/50 current_auc = 0.6907563025210085
User 89117 AUC after training: 0.689075630252101
User 89117 does not improve AUC. Reverting changes.
Training on augumented user 42358 33/50 current_auc = 0.6907563025210085
User 42358 AUC after training: 0.6901960784313727
User 42358 does not improve AUC. Reverting changes.
Training on augumented user 31944 34/50 current_auc = 0.6907563025210085
User 31944 AUC after training: 0.6890756302521008
User 31944 does not improve AUC. Reverting changes.
Training on augumented user 45668 35/50 current_auc = 0.6907563025210085
User 45668 AUC after training: 0.6901960784313725
User 45668 does not improve AUC. Reverting changes.
Training on augumented user 61906 36/50 current_auc = 0.6907563025210085
User 61906 AUC after training: 0.688515406162465
User 61906 does not improve AUC. Reverting changes.
Training on augumented user 13698 37/50 current_auc = 0.6907563025210085
User 13698 AUC after training: 0.6901960784313725
User 13698 does not improve AUC. Reverting changes.
Training on augumented user 6800 38/50 current_auc = 0.6907563025210085
User 6800 AUC after training: 0.6896358543417367
User 6800 does not improve AUC. Reverting changes.
Training on augumented user 36967 39/50 current_auc = 0.6907563025210085
User 36967 AUC after training: 0.6896358543417368
User 36967 does not improve AUC. Reverting changes.
Training on augumented user 105749 40/50 current_auc = 0.6907563025210085
User 105749 AUC after training: 0.6890756302521008
User 105749 does not improve AUC. Reverting changes.
Training on augumented user 56076 41/50 current_auc = 0.6907563025210085
User 56076 AUC after training: 0.6901960784313727
User 56076 does not improve AUC. Reverting changes.
Training on augumented user 48154 42/50 current_auc = 0.6907563025210085
User 48154 AUC after training: 0.6896358543417367
User 48154 does not improve AUC. Reverting changes.
Training on augumented user 1069 43/50 current_auc = 0.6907563025210085
User 1069 AUC after training: 0.6896358543417368
User 1069 does not improve AUC. Reverting changes.
Training on augumented user 26810 44/50 current_auc = 0.6907563025210085
User 26810 AUC after training: 0.6896358543417367
User 26810 does not improve AUC. Reverting changes.
Training on augumented user 131076 45/50 current_auc = 0.6907563025210085
User 131076 AUC after training: 0.6901960784313727
User 131076 does not improve AUC. Reverting changes.
Training on augumented user 29190 46/50 current_auc = 0.6907563025210085
User 29190 AUC after training: 0.6907563025210085
User 29190 does not improve AUC. Reverting changes.
Training on augumented user 6270 47/50 current_auc = 0.6907563025210085
User 6270 AUC after training: 0.6896358543417368
User 6270 does not improve AUC. Reverting changes.
Training on augumented user 46501 48/50 current_auc = 0.6907563025210085
User 46501 AUC after training: 0.6901960784313727
User 46501 does not improve AUC. Reverting changes.
Training on augumented user 76141 49/50 current_auc = 0.6907563025210085
User 76141 AUC after training: 0.6913165266106442
User 76141 improves AUC. Keeping the model.
[2024-12-02 20:05:07.745489] start test user 116460 270/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:05:08.361880] start test user 116460 270/567 recall augumented users by random, augumented_users = [34132, 3880, 125195, 98464, 33306, 92883, 18189, 80388, 32859, 101787, 130508, 9555, 24270, 50244, 33668, 129740, 88921, 31961, 39495, 43163, 6138, 92456, 76844, 45037, 136039, 21935, 6367, 64582, 103256, 39523, 43986, 64778, 123845, 126054, 46068, 94433, 72234, 112672, 20061, 89202, 119791, 16682, 56243, 28410, 80965, 49362, 45969, 89070, 28784, 17521]
[2024-12-02 20:05:08.390636] user = 116460 Cloud 270/567
[2024-12-02 20:05:08.401663] user = 116460 Local 270/567
[2024-12-02 20:05:08.466872] user = 116460 Local+ 270/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:05:10.861997] user = 116460 MPDA- 270/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6262626262626263
Training on augumented user 34132 0/50 current_auc = 0.6262626262626263
User 34132 AUC after training: 0.6262626262626262
User 34132 does not improve AUC. Reverting changes.
Training on augumented user 3880 1/50 current_auc = 0.6262626262626263
User 3880 AUC after training: 0.6195286195286195
User 3880 does not improve AUC. Reverting changes.
Training on augumented user 125195 2/50 current_auc = 0.6262626262626263
User 125195 AUC after training: 0.6262626262626263
User 125195 does not improve AUC. Reverting changes.
Training on augumented user 98464 3/50 current_auc = 0.6262626262626263
User 98464 AUC after training: 0.569023569023569
User 98464 does not improve AUC. Reverting changes.
Training on augumented user 33306 4/50 current_auc = 0.6262626262626263
User 33306 AUC after training: 0.6127946127946128
User 33306 does not improve AUC. Reverting changes.
Training on augumented user 92883 5/50 current_auc = 0.6262626262626263
User 92883 AUC after training: 0.622895622895623
User 92883 does not improve AUC. Reverting changes.
Training on augumented user 18189 6/50 current_auc = 0.6262626262626263
User 18189 AUC after training: 0.6161616161616162
User 18189 does not improve AUC. Reverting changes.
Training on augumented user 80388 7/50 current_auc = 0.6262626262626263
User 80388 AUC after training: 0.6262626262626263
User 80388 does not improve AUC. Reverting changes.
Training on augumented user 32859 8/50 current_auc = 0.6262626262626263
User 32859 AUC after training: 0.6262626262626263
User 32859 does not improve AUC. Reverting changes.
Training on augumented user 101787 9/50 current_auc = 0.6262626262626263
User 101787 AUC after training: 0.622895622895623
User 101787 does not improve AUC. Reverting changes.
Training on augumented user 130508 10/50 current_auc = 0.6262626262626263
User 130508 AUC after training: 0.6195286195286195
User 130508 does not improve AUC. Reverting changes.
Training on augumented user 9555 11/50 current_auc = 0.6262626262626263
User 9555 AUC after training: 0.622895622895623
User 9555 does not improve AUC. Reverting changes.
Training on augumented user 24270 12/50 current_auc = 0.6262626262626263
User 24270 AUC after training: 0.6195286195286195
User 24270 does not improve AUC. Reverting changes.
Training on augumented user 50244 13/50 current_auc = 0.6262626262626263
User 50244 AUC after training: 0.622895622895623
User 50244 does not improve AUC. Reverting changes.
Training on augumented user 33668 14/50 current_auc = 0.6262626262626263
User 33668 AUC after training: 0.6262626262626263
User 33668 does not improve AUC. Reverting changes.
Training on augumented user 129740 15/50 current_auc = 0.6262626262626263
User 129740 AUC after training: 0.6262626262626263
User 129740 does not improve AUC. Reverting changes.
Training on augumented user 88921 16/50 current_auc = 0.6262626262626263
User 88921 AUC after training: 0.622895622895623
User 88921 does not improve AUC. Reverting changes.
Training on augumented user 31961 17/50 current_auc = 0.6262626262626263
User 31961 AUC after training: 0.622895622895623
User 31961 does not improve AUC. Reverting changes.
Training on augumented user 39495 18/50 current_auc = 0.6262626262626263
User 39495 AUC after training: 0.6262626262626263
User 39495 does not improve AUC. Reverting changes.
Training on augumented user 43163 19/50 current_auc = 0.6262626262626263
User 43163 AUC after training: 0.6094276094276094
User 43163 does not improve AUC. Reverting changes.
Training on augumented user 6138 20/50 current_auc = 0.6262626262626263
User 6138 AUC after training: 0.6262626262626263
User 6138 does not improve AUC. Reverting changes.
Training on augumented user 92456 21/50 current_auc = 0.6262626262626263
User 92456 AUC after training: 0.622895622895623
User 92456 does not improve AUC. Reverting changes.
Training on augumented user 76844 22/50 current_auc = 0.6262626262626263
User 76844 AUC after training: 0.6161616161616162
User 76844 does not improve AUC. Reverting changes.
Training on augumented user 45037 23/50 current_auc = 0.6262626262626263
User 45037 AUC after training: 0.6127946127946129
User 45037 does not improve AUC. Reverting changes.
Training on augumented user 136039 24/50 current_auc = 0.6262626262626263
User 136039 AUC after training: 0.6262626262626263
User 136039 does not improve AUC. Reverting changes.
Training on augumented user 21935 25/50 current_auc = 0.6262626262626263
User 21935 AUC after training: 0.622895622895623
User 21935 does not improve AUC. Reverting changes.
Training on augumented user 6367 26/50 current_auc = 0.6262626262626263
User 6367 AUC after training: 0.6262626262626263
User 6367 does not improve AUC. Reverting changes.
Training on augumented user 64582 27/50 current_auc = 0.6262626262626263
User 64582 AUC after training: 0.6262626262626263
User 64582 does not improve AUC. Reverting changes.
Training on augumented user 103256 28/50 current_auc = 0.6262626262626263
User 103256 AUC after training: 0.6262626262626263
User 103256 does not improve AUC. Reverting changes.
Training on augumented user 39523 29/50 current_auc = 0.6262626262626263
User 39523 AUC after training: 0.6262626262626263
User 39523 does not improve AUC. Reverting changes.
Training on augumented user 43986 30/50 current_auc = 0.6262626262626263
User 43986 AUC after training: 0.6262626262626263
User 43986 does not improve AUC. Reverting changes.
Training on augumented user 64778 31/50 current_auc = 0.6262626262626263
User 64778 AUC after training: 0.622895622895623
User 64778 does not improve AUC. Reverting changes.
Training on augumented user 123845 32/50 current_auc = 0.6262626262626263
User 123845 AUC after training: 0.6195286195286195
User 123845 does not improve AUC. Reverting changes.
Training on augumented user 126054 33/50 current_auc = 0.6262626262626263
User 126054 AUC after training: 0.6161616161616162
User 126054 does not improve AUC. Reverting changes.
Training on augumented user 46068 34/50 current_auc = 0.6262626262626263
User 46068 AUC after training: 0.6161616161616162
User 46068 does not improve AUC. Reverting changes.
Training on augumented user 94433 35/50 current_auc = 0.6262626262626263
User 94433 AUC after training: 0.622895622895623
User 94433 does not improve AUC. Reverting changes.
Training on augumented user 72234 36/50 current_auc = 0.6262626262626263
User 72234 AUC after training: 0.6262626262626263
User 72234 does not improve AUC. Reverting changes.
Training on augumented user 112672 37/50 current_auc = 0.6262626262626263
User 112672 AUC after training: 0.6262626262626263
User 112672 does not improve AUC. Reverting changes.
Training on augumented user 20061 38/50 current_auc = 0.6262626262626263
User 20061 AUC after training: 0.622895622895623
User 20061 does not improve AUC. Reverting changes.
Training on augumented user 89202 39/50 current_auc = 0.6262626262626263
User 89202 AUC after training: 0.6262626262626263
User 89202 does not improve AUC. Reverting changes.
Training on augumented user 119791 40/50 current_auc = 0.6262626262626263
User 119791 AUC after training: 0.6161616161616162
User 119791 does not improve AUC. Reverting changes.
Training on augumented user 16682 41/50 current_auc = 0.6262626262626263
User 16682 AUC after training: 0.6161616161616161
User 16682 does not improve AUC. Reverting changes.
Training on augumented user 56243 42/50 current_auc = 0.6262626262626263
User 56243 AUC after training: 0.6262626262626263
User 56243 does not improve AUC. Reverting changes.
Training on augumented user 28410 43/50 current_auc = 0.6262626262626263
User 28410 AUC after training: 0.6195286195286195
User 28410 does not improve AUC. Reverting changes.
Training on augumented user 80965 44/50 current_auc = 0.6262626262626263
User 80965 AUC after training: 0.6262626262626263
User 80965 does not improve AUC. Reverting changes.
Training on augumented user 49362 45/50 current_auc = 0.6262626262626263
User 49362 AUC after training: 0.6161616161616161
User 49362 does not improve AUC. Reverting changes.
Training on augumented user 45969 46/50 current_auc = 0.6262626262626263
User 45969 AUC after training: 0.6262626262626263
User 45969 does not improve AUC. Reverting changes.
Training on augumented user 89070 47/50 current_auc = 0.6262626262626263
User 89070 AUC after training: 0.6195286195286195
User 89070 does not improve AUC. Reverting changes.
Training on augumented user 28784 48/50 current_auc = 0.6262626262626263
User 28784 AUC after training: 0.622895622895623
User 28784 does not improve AUC. Reverting changes.
Training on augumented user 17521 49/50 current_auc = 0.6262626262626263
User 17521 AUC after training: 0.622895622895623
User 17521 does not improve AUC. Reverting changes.
[2024-12-02 20:05:40.837596] start test user 116498 271/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:05:41.703873] start test user 116498 271/567 recall augumented users by random, augumented_users = [38691, 74602, 22523, 105891, 113073, 38216, 40661, 33240, 43894, 45289, 12350, 121026, 53947, 23948, 23062, 94581, 31771, 84792, 91219, 129690, 128010, 43970, 125629, 67972, 110461, 113877, 127035, 30114, 126625, 122995, 126484, 89029, 109420, 61484, 80161, 9051, 126407, 21522, 73591, 42631, 79704, 46189, 104834, 29366, 87157, 102655, 3783, 89781, 47218, 33203]
[2024-12-02 20:05:41.751977] user = 116498 Cloud 271/567
[2024-12-02 20:05:41.806390] user = 116498 Local 271/567
[2024-12-02 20:05:42.161551] user = 116498 Local+ 271/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:05:45.895116] user = 116498 MPDA- 271/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.48322344322344324
Training on augumented user 38691 0/50 current_auc = 0.48322344322344324
User 38691 AUC after training: 0.48356532356532356
User 38691 improves AUC. Keeping the model.
Training on augumented user 74602 1/50 current_auc = 0.48356532356532356
User 74602 AUC after training: 0.48324786324786323
User 74602 does not improve AUC. Reverting changes.
Training on augumented user 22523 2/50 current_auc = 0.48356532356532356
User 22523 AUC after training: 0.48300366300366304
User 22523 does not improve AUC. Reverting changes.
Training on augumented user 105891 3/50 current_auc = 0.48356532356532356
User 105891 AUC after training: 0.48295482295482295
User 105891 does not improve AUC. Reverting changes.
Training on augumented user 113073 4/50 current_auc = 0.48356532356532356
User 113073 AUC after training: 0.4831257631257631
User 113073 does not improve AUC. Reverting changes.
Training on augumented user 38216 5/50 current_auc = 0.48356532356532356
User 38216 AUC after training: 0.4838095238095238
User 38216 improves AUC. Keeping the model.
Training on augumented user 40661 6/50 current_auc = 0.4838095238095238
User 40661 AUC after training: 0.48300366300366304
User 40661 does not improve AUC. Reverting changes.
Training on augumented user 33240 7/50 current_auc = 0.4838095238095238
User 33240 AUC after training: 0.4834676434676435
User 33240 does not improve AUC. Reverting changes.
Training on augumented user 43894 8/50 current_auc = 0.4838095238095238
User 43894 AUC after training: 0.4837118437118437
User 43894 does not improve AUC. Reverting changes.
Training on augumented user 45289 9/50 current_auc = 0.4838095238095238
User 45289 AUC after training: 0.4838095238095238
User 45289 does not improve AUC. Reverting changes.
Training on augumented user 12350 10/50 current_auc = 0.4838095238095238
User 12350 AUC after training: 0.48322344322344324
User 12350 does not improve AUC. Reverting changes.
Training on augumented user 121026 11/50 current_auc = 0.4838095238095238
User 121026 AUC after training: 0.4835164835164835
User 121026 does not improve AUC. Reverting changes.
Training on augumented user 53947 12/50 current_auc = 0.4838095238095238
User 53947 AUC after training: 0.48312576312576316
User 53947 does not improve AUC. Reverting changes.
Training on augumented user 23948 13/50 current_auc = 0.4838095238095238
User 23948 AUC after training: 0.48361416361416365
User 23948 does not improve AUC. Reverting changes.
Training on augumented user 23062 14/50 current_auc = 0.4838095238095238
User 23062 AUC after training: 0.4825885225885226
User 23062 does not improve AUC. Reverting changes.
Training on augumented user 94581 15/50 current_auc = 0.4838095238095238
User 94581 AUC after training: 0.4836630036630037
User 94581 does not improve AUC. Reverting changes.
Training on augumented user 31771 16/50 current_auc = 0.4838095238095238
User 31771 AUC after training: 0.4837606837606838
User 31771 does not improve AUC. Reverting changes.
Training on augumented user 84792 17/50 current_auc = 0.4838095238095238
User 84792 AUC after training: 0.48249084249084245
User 84792 does not improve AUC. Reverting changes.
Training on augumented user 91219 18/50 current_auc = 0.4838095238095238
User 91219 AUC after training: 0.48322344322344324
User 91219 does not improve AUC. Reverting changes.
Training on augumented user 129690 19/50 current_auc = 0.4838095238095238
User 129690 AUC after training: 0.48336996336996335
User 129690 does not improve AUC. Reverting changes.
Training on augumented user 128010 20/50 current_auc = 0.4838095238095238
User 128010 AUC after training: 0.4825885225885226
User 128010 does not improve AUC. Reverting changes.
Training on augumented user 43970 21/50 current_auc = 0.4838095238095238
User 43970 AUC after training: 0.4834188034188034
User 43970 does not improve AUC. Reverting changes.
Training on augumented user 125629 22/50 current_auc = 0.4838095238095238
User 125629 AUC after training: 0.48256410256410254
User 125629 does not improve AUC. Reverting changes.
Training on augumented user 67972 23/50 current_auc = 0.4838095238095238
User 67972 AUC after training: 0.48380952380952374
User 67972 does not improve AUC. Reverting changes.
Training on augumented user 110461 24/50 current_auc = 0.4838095238095238
User 110461 AUC after training: 0.48356532356532356
User 110461 does not improve AUC. Reverting changes.
Training on augumented user 113877 25/50 current_auc = 0.4838095238095238
User 113877 AUC after training: 0.48395604395604397
User 113877 improves AUC. Keeping the model.
Training on augumented user 127035 26/50 current_auc = 0.48395604395604397
User 127035 AUC after training: 0.48356532356532356
User 127035 does not improve AUC. Reverting changes.
Training on augumented user 30114 27/50 current_auc = 0.48395604395604397
User 30114 AUC after training: 0.4841025641025641
User 30114 improves AUC. Keeping the model.
Training on augumented user 126625 28/50 current_auc = 0.4841025641025641
User 126625 AUC after training: 0.4838583638583639
User 126625 does not improve AUC. Reverting changes.
Training on augumented user 122995 29/50 current_auc = 0.4841025641025641
User 122995 AUC after training: 0.4832722832722832
User 122995 does not improve AUC. Reverting changes.
Training on augumented user 126484 30/50 current_auc = 0.4841025641025641
User 126484 AUC after training: 0.48351648351648346
User 126484 does not improve AUC. Reverting changes.
Training on augumented user 89029 31/50 current_auc = 0.4841025641025641
User 89029 AUC after training: 0.48371184371184367
User 89029 does not improve AUC. Reverting changes.
Training on augumented user 109420 32/50 current_auc = 0.4841025641025641
User 109420 AUC after training: 0.4837118437118437
User 109420 does not improve AUC. Reverting changes.
Training on augumented user 61484 33/50 current_auc = 0.4841025641025641
User 61484 AUC after training: 0.4837118437118437
User 61484 does not improve AUC. Reverting changes.
Training on augumented user 80161 34/50 current_auc = 0.4841025641025641
User 80161 AUC after training: 0.4834676434676435
User 80161 does not improve AUC. Reverting changes.
Training on augumented user 9051 35/50 current_auc = 0.4841025641025641
User 9051 AUC after training: 0.48307692307692307
User 9051 does not improve AUC. Reverting changes.
Training on augumented user 126407 36/50 current_auc = 0.4841025641025641
User 126407 AUC after training: 0.48390720390720393
User 126407 does not improve AUC. Reverting changes.
Training on augumented user 21522 37/50 current_auc = 0.4841025641025641
User 21522 AUC after training: 0.48376068376068376
User 21522 does not improve AUC. Reverting changes.
Training on augumented user 73591 38/50 current_auc = 0.4841025641025641
User 73591 AUC after training: 0.48400488400488395
User 73591 does not improve AUC. Reverting changes.
Training on augumented user 42631 39/50 current_auc = 0.4841025641025641
User 42631 AUC after training: 0.48405372405372404
User 42631 does not improve AUC. Reverting changes.
Training on augumented user 79704 40/50 current_auc = 0.4841025641025641
User 79704 AUC after training: 0.48351648351648346
User 79704 does not improve AUC. Reverting changes.
Training on augumented user 46189 41/50 current_auc = 0.4841025641025641
User 46189 AUC after training: 0.48380952380952386
User 46189 does not improve AUC. Reverting changes.
Training on augumented user 104834 42/50 current_auc = 0.4841025641025641
User 104834 AUC after training: 0.48336996336996335
User 104834 does not improve AUC. Reverting changes.
Training on augumented user 29366 43/50 current_auc = 0.4841025641025641
User 29366 AUC after training: 0.4841514041514041
User 29366 improves AUC. Keeping the model.
Training on augumented user 87157 44/50 current_auc = 0.4841514041514041
User 87157 AUC after training: 0.48293040293040296
User 87157 does not improve AUC. Reverting changes.
Training on augumented user 102655 45/50 current_auc = 0.4841514041514041
User 102655 AUC after training: 0.48317460317460315
User 102655 does not improve AUC. Reverting changes.
Training on augumented user 3783 46/50 current_auc = 0.4841514041514041
User 3783 AUC after training: 0.48324786324786323
User 3783 does not improve AUC. Reverting changes.
Training on augumented user 89781 47/50 current_auc = 0.4841514041514041
User 89781 AUC after training: 0.483028083028083
User 89781 does not improve AUC. Reverting changes.
Training on augumented user 47218 48/50 current_auc = 0.4841514041514041
User 47218 AUC after training: 0.48454212454212453
User 47218 improves AUC. Keeping the model.
Training on augumented user 33203 49/50 current_auc = 0.48454212454212453
User 33203 AUC after training: 0.4834188034188034
User 33203 does not improve AUC. Reverting changes.
[2024-12-02 20:06:11.862796] start test user 116506 272/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:06:12.446122] start test user 116506 272/567 recall augumented users by random, augumented_users = [49748, 126022, 13215, 77589, 39540, 52637, 84472, 19267, 283, 86661, 73289, 137402, 28641, 57502, 4169, 132222, 66786, 66009, 68679, 17666, 7123, 39215, 119529, 23661, 52575, 36172, 13928, 52587, 82626, 68087, 67291, 30078, 81378, 11189, 43227, 25128, 82883, 36346, 17881, 6318, 38681, 30172, 95324, 128575, 76789, 39125, 802, 41937, 72598, 15506]
[2024-12-02 20:06:12.461261] user = 116506 Cloud 272/567
[2024-12-02 20:06:12.491372] user = 116506 Local 272/567
[2024-12-02 20:06:12.514862] user = 116506 Local+ 272/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:06:16.333168] user = 116506 MPDA- 272/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7519893899204243
Training on augumented user 49748 0/50 current_auc = 0.7519893899204243
User 49748 AUC after training: 0.7480106100795756
User 49748 does not improve AUC. Reverting changes.
Training on augumented user 126022 1/50 current_auc = 0.7519893899204243
User 126022 AUC after training: 0.753315649867374
User 126022 improves AUC. Keeping the model.
Training on augumented user 13215 2/50 current_auc = 0.753315649867374
User 13215 AUC after training: 0.7506631299734748
User 13215 does not improve AUC. Reverting changes.
Training on augumented user 77589 3/50 current_auc = 0.753315649867374
User 77589 AUC after training: 0.7493368700265253
User 77589 does not improve AUC. Reverting changes.
Training on augumented user 39540 4/50 current_auc = 0.753315649867374
User 39540 AUC after training: 0.7519893899204243
User 39540 does not improve AUC. Reverting changes.
Training on augumented user 52637 5/50 current_auc = 0.753315649867374
User 52637 AUC after training: 0.753315649867374
User 52637 does not improve AUC. Reverting changes.
Training on augumented user 84472 6/50 current_auc = 0.753315649867374
User 84472 AUC after training: 0.7519893899204243
User 84472 does not improve AUC. Reverting changes.
Training on augumented user 19267 7/50 current_auc = 0.753315649867374
User 19267 AUC after training: 0.753315649867374
User 19267 does not improve AUC. Reverting changes.
Training on augumented user 283 8/50 current_auc = 0.753315649867374
User 283 AUC after training: 0.753315649867374
User 283 does not improve AUC. Reverting changes.
Training on augumented user 86661 9/50 current_auc = 0.753315649867374
User 86661 AUC after training: 0.753315649867374
User 86661 does not improve AUC. Reverting changes.
Training on augumented user 73289 10/50 current_auc = 0.753315649867374
User 73289 AUC after training: 0.753315649867374
User 73289 does not improve AUC. Reverting changes.
Training on augumented user 137402 11/50 current_auc = 0.753315649867374
User 137402 AUC after training: 0.7506631299734748
User 137402 does not improve AUC. Reverting changes.
Training on augumented user 28641 12/50 current_auc = 0.753315649867374
User 28641 AUC after training: 0.753315649867374
User 28641 does not improve AUC. Reverting changes.
Training on augumented user 57502 13/50 current_auc = 0.753315649867374
User 57502 AUC after training: 0.7519893899204243
User 57502 does not improve AUC. Reverting changes.
Training on augumented user 4169 14/50 current_auc = 0.753315649867374
User 4169 AUC after training: 0.7506631299734747
User 4169 does not improve AUC. Reverting changes.
Training on augumented user 132222 15/50 current_auc = 0.753315649867374
User 132222 AUC after training: 0.7506631299734748
User 132222 does not improve AUC. Reverting changes.
Training on augumented user 66786 16/50 current_auc = 0.753315649867374
User 66786 AUC after training: 0.7519893899204243
User 66786 does not improve AUC. Reverting changes.
Training on augumented user 66009 17/50 current_auc = 0.753315649867374
User 66009 AUC after training: 0.7506631299734748
User 66009 does not improve AUC. Reverting changes.
Training on augumented user 68679 18/50 current_auc = 0.753315649867374
User 68679 AUC after training: 0.7519893899204243
User 68679 does not improve AUC. Reverting changes.
Training on augumented user 17666 19/50 current_auc = 0.753315649867374
User 17666 AUC after training: 0.753315649867374
User 17666 does not improve AUC. Reverting changes.
Training on augumented user 7123 20/50 current_auc = 0.753315649867374
User 7123 AUC after training: 0.7466843501326259
User 7123 does not improve AUC. Reverting changes.
Training on augumented user 39215 21/50 current_auc = 0.753315649867374
User 39215 AUC after training: 0.753315649867374
User 39215 does not improve AUC. Reverting changes.
Training on augumented user 119529 22/50 current_auc = 0.753315649867374
User 119529 AUC after training: 0.7519893899204243
User 119529 does not improve AUC. Reverting changes.
Training on augumented user 23661 23/50 current_auc = 0.753315649867374
User 23661 AUC after training: 0.7519893899204243
User 23661 does not improve AUC. Reverting changes.
Training on augumented user 52575 24/50 current_auc = 0.753315649867374
User 52575 AUC after training: 0.753315649867374
User 52575 does not improve AUC. Reverting changes.
Training on augumented user 36172 25/50 current_auc = 0.753315649867374
User 36172 AUC after training: 0.7519893899204243
User 36172 does not improve AUC. Reverting changes.
Training on augumented user 13928 26/50 current_auc = 0.753315649867374
User 13928 AUC after training: 0.7506631299734748
User 13928 does not improve AUC. Reverting changes.
Training on augumented user 52587 27/50 current_auc = 0.753315649867374
User 52587 AUC after training: 0.753315649867374
User 52587 does not improve AUC. Reverting changes.
Training on augumented user 82626 28/50 current_auc = 0.753315649867374
User 82626 AUC after training: 0.753315649867374
User 82626 does not improve AUC. Reverting changes.
Training on augumented user 68087 29/50 current_auc = 0.753315649867374
User 68087 AUC after training: 0.7493368700265253
User 68087 does not improve AUC. Reverting changes.
Training on augumented user 67291 30/50 current_auc = 0.753315649867374
User 67291 AUC after training: 0.7519893899204243
User 67291 does not improve AUC. Reverting changes.
Training on augumented user 30078 31/50 current_auc = 0.753315649867374
User 30078 AUC after training: 0.753315649867374
User 30078 does not improve AUC. Reverting changes.
Training on augumented user 81378 32/50 current_auc = 0.753315649867374
User 81378 AUC after training: 0.7519893899204243
User 81378 does not improve AUC. Reverting changes.
Training on augumented user 11189 33/50 current_auc = 0.753315649867374
User 11189 AUC after training: 0.7519893899204243
User 11189 does not improve AUC. Reverting changes.
Training on augumented user 43227 34/50 current_auc = 0.753315649867374
User 43227 AUC after training: 0.7519893899204243
User 43227 does not improve AUC. Reverting changes.
Training on augumented user 25128 35/50 current_auc = 0.753315649867374
User 25128 AUC after training: 0.753315649867374
User 25128 does not improve AUC. Reverting changes.
Training on augumented user 82883 36/50 current_auc = 0.753315649867374
User 82883 AUC after training: 0.7546419098143234
User 82883 improves AUC. Keeping the model.
Training on augumented user 36346 37/50 current_auc = 0.7546419098143234
User 36346 AUC after training: 0.753315649867374
User 36346 does not improve AUC. Reverting changes.
Training on augumented user 17881 38/50 current_auc = 0.7546419098143234
User 17881 AUC after training: 0.753315649867374
User 17881 does not improve AUC. Reverting changes.
Training on augumented user 6318 39/50 current_auc = 0.7546419098143234
User 6318 AUC after training: 0.7466843501326261
User 6318 does not improve AUC. Reverting changes.
Training on augumented user 38681 40/50 current_auc = 0.7546419098143234
User 38681 AUC after training: 0.7480106100795755
User 38681 does not improve AUC. Reverting changes.
Training on augumented user 30172 41/50 current_auc = 0.7546419098143234
User 30172 AUC after training: 0.7559681697612731
User 30172 improves AUC. Keeping the model.
Training on augumented user 95324 42/50 current_auc = 0.7559681697612731
User 95324 AUC after training: 0.7559681697612731
User 95324 does not improve AUC. Reverting changes.
Training on augumented user 128575 43/50 current_auc = 0.7559681697612731
User 128575 AUC after training: 0.7493368700265252
User 128575 does not improve AUC. Reverting changes.
Training on augumented user 76789 44/50 current_auc = 0.7559681697612731
User 76789 AUC after training: 0.753315649867374
User 76789 does not improve AUC. Reverting changes.
Training on augumented user 39125 45/50 current_auc = 0.7559681697612731
User 39125 AUC after training: 0.7559681697612731
User 39125 does not improve AUC. Reverting changes.
Training on augumented user 802 46/50 current_auc = 0.7559681697612731
User 802 AUC after training: 0.753315649867374
User 802 does not improve AUC. Reverting changes.
Training on augumented user 41937 47/50 current_auc = 0.7559681697612731
User 41937 AUC after training: 0.7506631299734747
User 41937 does not improve AUC. Reverting changes.
Training on augumented user 72598 48/50 current_auc = 0.7559681697612731
User 72598 AUC after training: 0.7519893899204243
User 72598 does not improve AUC. Reverting changes.
Training on augumented user 15506 49/50 current_auc = 0.7559681697612731
User 15506 AUC after training: 0.7506631299734747
User 15506 does not improve AUC. Reverting changes.
[2024-12-02 20:06:51.491247] start test user 116526 273/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:06:52.171668] start test user 116526 273/567 recall augumented users by random, augumented_users = [76811, 895, 70614, 128778, 16225, 65826, 12260, 137612, 95800, 134892, 97924, 18298, 73758, 75539, 104878, 103399, 112740, 28913, 74423, 130385, 20269, 96383, 137956, 33442, 55781, 129313, 127123, 56279, 97414, 96537, 47619, 32357, 17026, 96900, 48279, 20437, 69451, 37259, 21369, 85350, 5428, 13246, 105939, 74673, 31342, 122923, 35953, 72080, 7710, 51116]
[2024-12-02 20:06:52.194025] user = 116526 Cloud 273/567
[2024-12-02 20:06:52.250575] user = 116526 Local 273/567
[2024-12-02 20:06:52.407948] user = 116526 Local+ 273/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:06:54.250931] user = 116526 MPDA- 273/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6842105263157894
Training on augumented user 76811 0/50 current_auc = 0.6842105263157894
User 76811 AUC after training: 0.6842105263157894
User 76811 does not improve AUC. Reverting changes.
Training on augumented user 895 1/50 current_auc = 0.6842105263157894
User 895 AUC after training: 0.6836384439359268
User 895 does not improve AUC. Reverting changes.
Training on augumented user 70614 2/50 current_auc = 0.6842105263157894
User 70614 AUC after training: 0.6836384439359268
User 70614 does not improve AUC. Reverting changes.
Training on augumented user 128778 3/50 current_auc = 0.6842105263157894
User 128778 AUC after training: 0.6836384439359268
User 128778 does not improve AUC. Reverting changes.
Training on augumented user 16225 4/50 current_auc = 0.6842105263157894
User 16225 AUC after training: 0.6842105263157895
User 16225 improves AUC. Keeping the model.
Training on augumented user 65826 5/50 current_auc = 0.6842105263157895
User 65826 AUC after training: 0.6853546910755148
User 65826 improves AUC. Keeping the model.
Training on augumented user 12260 6/50 current_auc = 0.6853546910755148
User 12260 AUC after training: 0.6853546910755148
User 12260 does not improve AUC. Reverting changes.
Training on augumented user 137612 7/50 current_auc = 0.6853546910755148
User 137612 AUC after training: 0.6830663615560641
User 137612 does not improve AUC. Reverting changes.
Training on augumented user 95800 8/50 current_auc = 0.6853546910755148
User 95800 AUC after training: 0.6847826086956522
User 95800 does not improve AUC. Reverting changes.
Training on augumented user 134892 9/50 current_auc = 0.6853546910755148
User 134892 AUC after training: 0.6859267734553776
User 134892 improves AUC. Keeping the model.
Training on augumented user 97924 10/50 current_auc = 0.6859267734553776
User 97924 AUC after training: 0.6853546910755149
User 97924 does not improve AUC. Reverting changes.
Training on augumented user 18298 11/50 current_auc = 0.6859267734553776
User 18298 AUC after training: 0.6853546910755149
User 18298 does not improve AUC. Reverting changes.
Training on augumented user 73758 12/50 current_auc = 0.6859267734553776
User 73758 AUC after training: 0.687070938215103
User 73758 improves AUC. Keeping the model.
Training on augumented user 75539 13/50 current_auc = 0.687070938215103
User 75539 AUC after training: 0.6836384439359268
User 75539 does not improve AUC. Reverting changes.
Training on augumented user 104878 14/50 current_auc = 0.687070938215103
User 104878 AUC after training: 0.6842105263157895
User 104878 does not improve AUC. Reverting changes.
Training on augumented user 103399 15/50 current_auc = 0.687070938215103
User 103399 AUC after training: 0.6882151029748284
User 103399 improves AUC. Keeping the model.
Training on augumented user 112740 16/50 current_auc = 0.6882151029748284
User 112740 AUC after training: 0.6876430205949657
User 112740 does not improve AUC. Reverting changes.
Training on augumented user 28913 17/50 current_auc = 0.6882151029748284
User 28913 AUC after training: 0.6853546910755148
User 28913 does not improve AUC. Reverting changes.
Training on augumented user 74423 18/50 current_auc = 0.6882151029748284
User 74423 AUC after training: 0.6859267734553776
User 74423 does not improve AUC. Reverting changes.
Training on augumented user 130385 19/50 current_auc = 0.6882151029748284
User 130385 AUC after training: 0.6933638443935927
User 130385 improves AUC. Keeping the model.
Training on augumented user 20269 20/50 current_auc = 0.6933638443935927
User 20269 AUC after training: 0.6910755148741419
User 20269 does not improve AUC. Reverting changes.
Training on augumented user 96383 21/50 current_auc = 0.6933638443935927
User 96383 AUC after training: 0.6927917620137299
User 96383 does not improve AUC. Reverting changes.
Training on augumented user 137956 22/50 current_auc = 0.6933638443935927
User 137956 AUC after training: 0.6910755148741419
User 137956 does not improve AUC. Reverting changes.
Training on augumented user 33442 23/50 current_auc = 0.6933638443935927
User 33442 AUC after training: 0.6922196796338672
User 33442 does not improve AUC. Reverting changes.
Training on augumented user 55781 24/50 current_auc = 0.6933638443935927
User 55781 AUC after training: 0.6939359267734554
User 55781 improves AUC. Keeping the model.
Training on augumented user 129313 25/50 current_auc = 0.6939359267734554
User 129313 AUC after training: 0.6962242562929062
User 129313 improves AUC. Keeping the model.
Training on augumented user 127123 26/50 current_auc = 0.6962242562929062
User 127123 AUC after training: 0.6939359267734554
User 127123 does not improve AUC. Reverting changes.
Training on augumented user 56279 27/50 current_auc = 0.6962242562929062
User 56279 AUC after training: 0.6939359267734554
User 56279 does not improve AUC. Reverting changes.
Training on augumented user 97414 28/50 current_auc = 0.6962242562929062
User 97414 AUC after training: 0.6933638443935927
User 97414 does not improve AUC. Reverting changes.
Training on augumented user 96537 29/50 current_auc = 0.6962242562929062
User 96537 AUC after training: 0.6950800915331808
User 96537 does not improve AUC. Reverting changes.
Training on augumented user 47619 30/50 current_auc = 0.6962242562929062
User 47619 AUC after training: 0.6962242562929062
User 47619 does not improve AUC. Reverting changes.
Training on augumented user 32357 31/50 current_auc = 0.6962242562929062
User 32357 AUC after training: 0.6922196796338673
User 32357 does not improve AUC. Reverting changes.
Training on augumented user 17026 32/50 current_auc = 0.6962242562929062
User 17026 AUC after training: 0.6945080091533181
User 17026 does not improve AUC. Reverting changes.
Training on augumented user 96900 33/50 current_auc = 0.6962242562929062
User 96900 AUC after training: 0.6956521739130435
User 96900 does not improve AUC. Reverting changes.
Training on augumented user 48279 34/50 current_auc = 0.6962242562929062
User 48279 AUC after training: 0.694508009153318
User 48279 does not improve AUC. Reverting changes.
Training on augumented user 20437 35/50 current_auc = 0.6962242562929062
User 20437 AUC after training: 0.6962242562929063
User 20437 improves AUC. Keeping the model.
Training on augumented user 69451 36/50 current_auc = 0.6962242562929063
User 69451 AUC after training: 0.696796338672769
User 69451 improves AUC. Keeping the model.
Training on augumented user 37259 37/50 current_auc = 0.696796338672769
User 37259 AUC after training: 0.6979405034324943
User 37259 improves AUC. Keeping the model.
Training on augumented user 21369 38/50 current_auc = 0.6979405034324943
User 21369 AUC after training: 0.6979405034324943
User 21369 does not improve AUC. Reverting changes.
Training on augumented user 85350 39/50 current_auc = 0.6979405034324943
User 85350 AUC after training: 0.6956521739130435
User 85350 does not improve AUC. Reverting changes.
Training on augumented user 5428 40/50 current_auc = 0.6979405034324943
User 5428 AUC after training: 0.7002288329519452
User 5428 improves AUC. Keeping the model.
Training on augumented user 13246 41/50 current_auc = 0.7002288329519452
User 13246 AUC after training: 0.7013729977116705
User 13246 improves AUC. Keeping the model.
Training on augumented user 105939 42/50 current_auc = 0.7013729977116705
User 105939 AUC after training: 0.7008009153318079
User 105939 does not improve AUC. Reverting changes.
Training on augumented user 74673 43/50 current_auc = 0.7013729977116705
User 74673 AUC after training: 0.6939359267734554
User 74673 does not improve AUC. Reverting changes.
Training on augumented user 31342 44/50 current_auc = 0.7013729977116705
User 31342 AUC after training: 0.7013729977116705
User 31342 does not improve AUC. Reverting changes.
Training on augumented user 122923 45/50 current_auc = 0.7013729977116705
User 122923 AUC after training: 0.6996567505720824
User 122923 does not improve AUC. Reverting changes.
Training on augumented user 35953 46/50 current_auc = 0.7013729977116705
User 35953 AUC after training: 0.7030892448512586
User 35953 improves AUC. Keeping the model.
Training on augumented user 72080 47/50 current_auc = 0.7030892448512586
User 72080 AUC after training: 0.7008009153318079
User 72080 does not improve AUC. Reverting changes.
Training on augumented user 7710 48/50 current_auc = 0.7030892448512586
User 7710 AUC after training: 0.7053775743707095
User 7710 improves AUC. Keeping the model.
Training on augumented user 51116 49/50 current_auc = 0.7053775743707095
User 51116 AUC after training: 0.6990846681922197
User 51116 does not improve AUC. Reverting changes.
[2024-12-02 20:07:27.354235] start test user 116544 274/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:07:28.177145] start test user 116544 274/567 recall augumented users by random, augumented_users = [132758, 22814, 135178, 79316, 135106, 93038, 93234, 33777, 101658, 56809, 41765, 51765, 99557, 1724, 83309, 6166, 132263, 115808, 138213, 101915, 78687, 5070, 45793, 90867, 67430, 107262, 79913, 48004, 112378, 136853, 52853, 86914, 25881, 130774, 121274, 84153, 58433, 7496, 58005, 121887, 95119, 122807, 195, 122512, 89691, 44772, 47945, 97362, 26368, 4118]
[2024-12-02 20:07:28.199824] user = 116544 Cloud 274/567
[2024-12-02 20:07:28.222330] user = 116544 Local 274/567
[2024-12-02 20:07:28.354307] user = 116544 Local+ 274/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:07:30.894006] user = 116544 MPDA- 274/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.15833333333333333
Training on augumented user 132758 0/50 current_auc = 0.15833333333333333
User 132758 AUC after training: 0.15833333333333333
User 132758 does not improve AUC. Reverting changes.
Training on augumented user 22814 1/50 current_auc = 0.15833333333333333
User 22814 AUC after training: 0.15833333333333333
User 22814 does not improve AUC. Reverting changes.
Training on augumented user 135178 2/50 current_auc = 0.15833333333333333
User 135178 AUC after training: 0.15833333333333333
User 135178 does not improve AUC. Reverting changes.
Training on augumented user 79316 3/50 current_auc = 0.15833333333333333
User 79316 AUC after training: 0.15000000000000002
User 79316 does not improve AUC. Reverting changes.
Training on augumented user 135106 4/50 current_auc = 0.15833333333333333
User 135106 AUC after training: 0.15000000000000002
User 135106 does not improve AUC. Reverting changes.
Training on augumented user 93038 5/50 current_auc = 0.15833333333333333
User 93038 AUC after training: 0.15000000000000002
User 93038 does not improve AUC. Reverting changes.
Training on augumented user 93234 6/50 current_auc = 0.15833333333333333
User 93234 AUC after training: 0.15833333333333333
User 93234 does not improve AUC. Reverting changes.
Training on augumented user 33777 7/50 current_auc = 0.15833333333333333
User 33777 AUC after training: 0.15000000000000002
User 33777 does not improve AUC. Reverting changes.
Training on augumented user 101658 8/50 current_auc = 0.15833333333333333
User 101658 AUC after training: 0.15833333333333333
User 101658 does not improve AUC. Reverting changes.
Training on augumented user 56809 9/50 current_auc = 0.15833333333333333
User 56809 AUC after training: 0.15833333333333333
User 56809 does not improve AUC. Reverting changes.
Training on augumented user 41765 10/50 current_auc = 0.15833333333333333
User 41765 AUC after training: 0.15000000000000002
User 41765 does not improve AUC. Reverting changes.
Training on augumented user 51765 11/50 current_auc = 0.15833333333333333
User 51765 AUC after training: 0.15833333333333333
User 51765 does not improve AUC. Reverting changes.
Training on augumented user 99557 12/50 current_auc = 0.15833333333333333
User 99557 AUC after training: 0.15
User 99557 does not improve AUC. Reverting changes.
Training on augumented user 1724 13/50 current_auc = 0.15833333333333333
User 1724 AUC after training: 0.15
User 1724 does not improve AUC. Reverting changes.
Training on augumented user 83309 14/50 current_auc = 0.15833333333333333
User 83309 AUC after training: 0.15833333333333333
User 83309 does not improve AUC. Reverting changes.
Training on augumented user 6166 15/50 current_auc = 0.15833333333333333
User 6166 AUC after training: 0.15833333333333333
User 6166 does not improve AUC. Reverting changes.
Training on augumented user 132263 16/50 current_auc = 0.15833333333333333
User 132263 AUC after training: 0.15833333333333333
User 132263 does not improve AUC. Reverting changes.
Training on augumented user 115808 17/50 current_auc = 0.15833333333333333
User 115808 AUC after training: 0.15833333333333333
User 115808 does not improve AUC. Reverting changes.
Training on augumented user 138213 18/50 current_auc = 0.15833333333333333
User 138213 AUC after training: 0.15833333333333333
User 138213 does not improve AUC. Reverting changes.
Training on augumented user 101915 19/50 current_auc = 0.15833333333333333
User 101915 AUC after training: 0.15000000000000002
User 101915 does not improve AUC. Reverting changes.
Training on augumented user 78687 20/50 current_auc = 0.15833333333333333
User 78687 AUC after training: 0.15833333333333333
User 78687 does not improve AUC. Reverting changes.
Training on augumented user 5070 21/50 current_auc = 0.15833333333333333
User 5070 AUC after training: 0.15833333333333333
User 5070 does not improve AUC. Reverting changes.
Training on augumented user 45793 22/50 current_auc = 0.15833333333333333
User 45793 AUC after training: 0.15000000000000002
User 45793 does not improve AUC. Reverting changes.
Training on augumented user 90867 23/50 current_auc = 0.15833333333333333
User 90867 AUC after training: 0.15000000000000002
User 90867 does not improve AUC. Reverting changes.
Training on augumented user 67430 24/50 current_auc = 0.15833333333333333
User 67430 AUC after training: 0.15833333333333333
User 67430 does not improve AUC. Reverting changes.
Training on augumented user 107262 25/50 current_auc = 0.15833333333333333
User 107262 AUC after training: 0.15000000000000002
User 107262 does not improve AUC. Reverting changes.
Training on augumented user 79913 26/50 current_auc = 0.15833333333333333
User 79913 AUC after training: 0.15833333333333333
User 79913 does not improve AUC. Reverting changes.
Training on augumented user 48004 27/50 current_auc = 0.15833333333333333
User 48004 AUC after training: 0.15833333333333333
User 48004 does not improve AUC. Reverting changes.
Training on augumented user 112378 28/50 current_auc = 0.15833333333333333
User 112378 AUC after training: 0.15833333333333333
User 112378 does not improve AUC. Reverting changes.
Training on augumented user 136853 29/50 current_auc = 0.15833333333333333
User 136853 AUC after training: 0.15833333333333333
User 136853 does not improve AUC. Reverting changes.
Training on augumented user 52853 30/50 current_auc = 0.15833333333333333
User 52853 AUC after training: 0.15833333333333333
User 52853 does not improve AUC. Reverting changes.
Training on augumented user 86914 31/50 current_auc = 0.15833333333333333
User 86914 AUC after training: 0.15000000000000002
User 86914 does not improve AUC. Reverting changes.
Training on augumented user 25881 32/50 current_auc = 0.15833333333333333
User 25881 AUC after training: 0.14166666666666666
User 25881 does not improve AUC. Reverting changes.
Training on augumented user 130774 33/50 current_auc = 0.15833333333333333
User 130774 AUC after training: 0.15833333333333333
User 130774 does not improve AUC. Reverting changes.
Training on augumented user 121274 34/50 current_auc = 0.15833333333333333
User 121274 AUC after training: 0.15000000000000002
User 121274 does not improve AUC. Reverting changes.
Training on augumented user 84153 35/50 current_auc = 0.15833333333333333
User 84153 AUC after training: 0.15000000000000002
User 84153 does not improve AUC. Reverting changes.
Training on augumented user 58433 36/50 current_auc = 0.15833333333333333
User 58433 AUC after training: 0.15833333333333333
User 58433 does not improve AUC. Reverting changes.
Training on augumented user 7496 37/50 current_auc = 0.15833333333333333
User 7496 AUC after training: 0.15000000000000002
User 7496 does not improve AUC. Reverting changes.
Training on augumented user 58005 38/50 current_auc = 0.15833333333333333
User 58005 AUC after training: 0.15000000000000002
User 58005 does not improve AUC. Reverting changes.
Training on augumented user 121887 39/50 current_auc = 0.15833333333333333
User 121887 AUC after training: 0.15
User 121887 does not improve AUC. Reverting changes.
Training on augumented user 95119 40/50 current_auc = 0.15833333333333333
User 95119 AUC after training: 0.15833333333333333
User 95119 does not improve AUC. Reverting changes.
Training on augumented user 122807 41/50 current_auc = 0.15833333333333333
User 122807 AUC after training: 0.15000000000000002
User 122807 does not improve AUC. Reverting changes.
Training on augumented user 195 42/50 current_auc = 0.15833333333333333
User 195 AUC after training: 0.15000000000000002
User 195 does not improve AUC. Reverting changes.
Training on augumented user 122512 43/50 current_auc = 0.15833333333333333
User 122512 AUC after training: 0.15
User 122512 does not improve AUC. Reverting changes.
Training on augumented user 89691 44/50 current_auc = 0.15833333333333333
User 89691 AUC after training: 0.15833333333333333
User 89691 does not improve AUC. Reverting changes.
Training on augumented user 44772 45/50 current_auc = 0.15833333333333333
User 44772 AUC after training: 0.15
User 44772 does not improve AUC. Reverting changes.
Training on augumented user 47945 46/50 current_auc = 0.15833333333333333
User 47945 AUC after training: 0.15000000000000002
User 47945 does not improve AUC. Reverting changes.
Training on augumented user 97362 47/50 current_auc = 0.15833333333333333
User 97362 AUC after training: 0.15833333333333333
User 97362 does not improve AUC. Reverting changes.
Training on augumented user 26368 48/50 current_auc = 0.15833333333333333
User 26368 AUC after training: 0.15833333333333333
User 26368 does not improve AUC. Reverting changes.
Training on augumented user 4118 49/50 current_auc = 0.15833333333333333
User 4118 AUC after training: 0.15833333333333333
User 4118 does not improve AUC. Reverting changes.
[2024-12-02 20:08:00.498653] start test user 116556 275/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:08:01.127938] start test user 116556 275/567 recall augumented users by random, augumented_users = [92453, 103733, 135742, 1698, 66049, 22540, 84722, 72091, 3365, 44231, 80380, 126774, 120132, 48701, 15379, 118041, 121880, 22721, 96587, 31964, 7860, 57228, 42420, 6219, 130500, 47735, 39599, 80449, 104285, 97783, 90811, 98605, 41581, 25922, 85778, 38973, 64999, 21114, 51157, 31898, 127876, 134421, 113298, 65630, 72657, 137021, 92958, 96746, 8480, 46215]
[2024-12-02 20:08:01.174487] user = 116556 Cloud 275/567
[2024-12-02 20:08:01.185798] user = 116556 Local 275/567
[2024-12-02 20:08:01.523759] user = 116556 Local+ 275/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:08:03.632167] user = 116556 MPDA- 275/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5545454545454546
Training on augumented user 92453 0/50 current_auc = 0.5545454545454546
User 92453 AUC after training: 0.5568181818181819
User 92453 improves AUC. Keeping the model.
Training on augumented user 103733 1/50 current_auc = 0.5568181818181819
User 103733 AUC after training: 0.5579545454545455
User 103733 improves AUC. Keeping the model.
Training on augumented user 135742 2/50 current_auc = 0.5579545454545455
User 135742 AUC after training: 0.5556818181818182
User 135742 does not improve AUC. Reverting changes.
Training on augumented user 1698 3/50 current_auc = 0.5579545454545455
User 1698 AUC after training: 0.553409090909091
User 1698 does not improve AUC. Reverting changes.
Training on augumented user 66049 4/50 current_auc = 0.5579545454545455
User 66049 AUC after training: 0.5545454545454545
User 66049 does not improve AUC. Reverting changes.
Training on augumented user 22540 5/50 current_auc = 0.5579545454545455
User 22540 AUC after training: 0.5545454545454546
User 22540 does not improve AUC. Reverting changes.
Training on augumented user 84722 6/50 current_auc = 0.5579545454545455
User 84722 AUC after training: 0.553409090909091
User 84722 does not improve AUC. Reverting changes.
Training on augumented user 72091 7/50 current_auc = 0.5579545454545455
User 72091 AUC after training: 0.5568181818181819
User 72091 does not improve AUC. Reverting changes.
Training on augumented user 3365 8/50 current_auc = 0.5579545454545455
User 3365 AUC after training: 0.553409090909091
User 3365 does not improve AUC. Reverting changes.
Training on augumented user 44231 9/50 current_auc = 0.5579545454545455
User 44231 AUC after training: 0.5579545454545454
User 44231 does not improve AUC. Reverting changes.
Training on augumented user 80380 10/50 current_auc = 0.5579545454545455
User 80380 AUC after training: 0.5545454545454545
User 80380 does not improve AUC. Reverting changes.
Training on augumented user 126774 11/50 current_auc = 0.5579545454545455
User 126774 AUC after training: 0.5545454545454545
User 126774 does not improve AUC. Reverting changes.
Training on augumented user 120132 12/50 current_auc = 0.5579545454545455
User 120132 AUC after training: 0.5579545454545454
User 120132 does not improve AUC. Reverting changes.
Training on augumented user 48701 13/50 current_auc = 0.5579545454545455
User 48701 AUC after training: 0.5556818181818182
User 48701 does not improve AUC. Reverting changes.
Training on augumented user 15379 14/50 current_auc = 0.5579545454545455
User 15379 AUC after training: 0.5534090909090909
User 15379 does not improve AUC. Reverting changes.
Training on augumented user 118041 15/50 current_auc = 0.5579545454545455
User 118041 AUC after training: 0.5568181818181818
User 118041 does not improve AUC. Reverting changes.
Training on augumented user 121880 16/50 current_auc = 0.5579545454545455
User 121880 AUC after training: 0.553409090909091
User 121880 does not improve AUC. Reverting changes.
Training on augumented user 22721 17/50 current_auc = 0.5579545454545455
User 22721 AUC after training: 0.5556818181818182
User 22721 does not improve AUC. Reverting changes.
Training on augumented user 96587 18/50 current_auc = 0.5579545454545455
User 96587 AUC after training: 0.5568181818181819
User 96587 does not improve AUC. Reverting changes.
Training on augumented user 31964 19/50 current_auc = 0.5579545454545455
User 31964 AUC after training: 0.5534090909090909
User 31964 does not improve AUC. Reverting changes.
Training on augumented user 7860 20/50 current_auc = 0.5579545454545455
User 7860 AUC after training: 0.5579545454545455
User 7860 does not improve AUC. Reverting changes.
Training on augumented user 57228 21/50 current_auc = 0.5579545454545455
User 57228 AUC after training: 0.5556818181818182
User 57228 does not improve AUC. Reverting changes.
Training on augumented user 42420 22/50 current_auc = 0.5579545454545455
User 42420 AUC after training: 0.5545454545454546
User 42420 does not improve AUC. Reverting changes.
Training on augumented user 6219 23/50 current_auc = 0.5579545454545455
User 6219 AUC after training: 0.5522727272727272
User 6219 does not improve AUC. Reverting changes.
Training on augumented user 130500 24/50 current_auc = 0.5579545454545455
User 130500 AUC after training: 0.5522727272727272
User 130500 does not improve AUC. Reverting changes.
Training on augumented user 47735 25/50 current_auc = 0.5579545454545455
User 47735 AUC after training: 0.5579545454545455
User 47735 does not improve AUC. Reverting changes.
Training on augumented user 39599 26/50 current_auc = 0.5579545454545455
User 39599 AUC after training: 0.5556818181818182
User 39599 does not improve AUC. Reverting changes.
Training on augumented user 80449 27/50 current_auc = 0.5579545454545455
User 80449 AUC after training: 0.553409090909091
User 80449 does not improve AUC. Reverting changes.
Training on augumented user 104285 28/50 current_auc = 0.5579545454545455
User 104285 AUC after training: 0.5522727272727272
User 104285 does not improve AUC. Reverting changes.
Training on augumented user 97783 29/50 current_auc = 0.5579545454545455
User 97783 AUC after training: 0.5522727272727272
User 97783 does not improve AUC. Reverting changes.
Training on augumented user 90811 30/50 current_auc = 0.5579545454545455
User 90811 AUC after training: 0.5590909090909091
User 90811 improves AUC. Keeping the model.
Training on augumented user 98605 31/50 current_auc = 0.5590909090909091
User 98605 AUC after training: 0.5545454545454546
User 98605 does not improve AUC. Reverting changes.
Training on augumented user 41581 32/50 current_auc = 0.5590909090909091
User 41581 AUC after training: 0.5579545454545455
User 41581 does not improve AUC. Reverting changes.
Training on augumented user 25922 33/50 current_auc = 0.5590909090909091
User 25922 AUC after training: 0.5590909090909091
User 25922 does not improve AUC. Reverting changes.
Training on augumented user 85778 34/50 current_auc = 0.5590909090909091
User 85778 AUC after training: 0.5602272727272728
User 85778 improves AUC. Keeping the model.
Training on augumented user 38973 35/50 current_auc = 0.5602272727272728
User 38973 AUC after training: 0.5579545454545454
User 38973 does not improve AUC. Reverting changes.
Training on augumented user 64999 36/50 current_auc = 0.5602272727272728
User 64999 AUC after training: 0.5602272727272728
User 64999 does not improve AUC. Reverting changes.
Training on augumented user 21114 37/50 current_auc = 0.5602272727272728
User 21114 AUC after training: 0.5590909090909091
User 21114 does not improve AUC. Reverting changes.
Training on augumented user 51157 38/50 current_auc = 0.5602272727272728
User 51157 AUC after training: 0.5590909090909091
User 51157 does not improve AUC. Reverting changes.
Training on augumented user 31898 39/50 current_auc = 0.5602272727272728
User 31898 AUC after training: 0.5590909090909091
User 31898 does not improve AUC. Reverting changes.
Training on augumented user 127876 40/50 current_auc = 0.5602272727272728
User 127876 AUC after training: 0.5522727272727272
User 127876 does not improve AUC. Reverting changes.
Training on augumented user 134421 41/50 current_auc = 0.5602272727272728
User 134421 AUC after training: 0.55
User 134421 does not improve AUC. Reverting changes.
Training on augumented user 113298 42/50 current_auc = 0.5602272727272728
User 113298 AUC after training: 0.5579545454545454
User 113298 does not improve AUC. Reverting changes.
Training on augumented user 65630 43/50 current_auc = 0.5602272727272728
User 65630 AUC after training: 0.555681818181818
User 65630 does not improve AUC. Reverting changes.
Training on augumented user 72657 44/50 current_auc = 0.5602272727272728
User 72657 AUC after training: 0.5568181818181819
User 72657 does not improve AUC. Reverting changes.
Training on augumented user 137021 45/50 current_auc = 0.5602272727272728
User 137021 AUC after training: 0.553409090909091
User 137021 does not improve AUC. Reverting changes.
Training on augumented user 92958 46/50 current_auc = 0.5602272727272728
User 92958 AUC after training: 0.5590909090909091
User 92958 does not improve AUC. Reverting changes.
Training on augumented user 96746 47/50 current_auc = 0.5602272727272728
User 96746 AUC after training: 0.5568181818181818
User 96746 does not improve AUC. Reverting changes.
Training on augumented user 8480 48/50 current_auc = 0.5602272727272728
User 8480 AUC after training: 0.5499999999999999
User 8480 does not improve AUC. Reverting changes.
Training on augumented user 46215 49/50 current_auc = 0.5602272727272728
User 46215 AUC after training: 0.5579545454545455
User 46215 does not improve AUC. Reverting changes.
[2024-12-02 20:08:28.775666] start test user 116603 276/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:08:29.318681] start test user 116603 276/567 recall augumented users by random, augumented_users = [135927, 131925, 66585, 34170, 102311, 133623, 112010, 34722, 45518, 15753, 53453, 23511, 63033, 94606, 24945, 77317, 63228, 111859, 127341, 32531, 50184, 98554, 55890, 56823, 43690, 51718, 121300, 136402, 64995, 108350, 60878, 2506, 96424, 43245, 81715, 98109, 70652, 94290, 77303, 16183, 46464, 109669, 5552, 120500, 19439, 136975, 122995, 74816, 59223, 16718]
[2024-12-02 20:08:29.334258] user = 116603 Cloud 276/567
[2024-12-02 20:08:29.350390] user = 116603 Local 276/567
[2024-12-02 20:08:29.420762] user = 116603 Local+ 276/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:08:32.436388] user = 116603 MPDA- 276/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6746031746031746
Training on augumented user 135927 0/50 current_auc = 0.6746031746031746
User 135927 AUC after training: 0.6741071428571429
User 135927 does not improve AUC. Reverting changes.
Training on augumented user 131925 1/50 current_auc = 0.6746031746031746
User 131925 AUC after training: 0.6731150793650794
User 131925 does not improve AUC. Reverting changes.
Training on augumented user 66585 2/50 current_auc = 0.6746031746031746
User 66585 AUC after training: 0.6741071428571429
User 66585 does not improve AUC. Reverting changes.
Training on augumented user 34170 3/50 current_auc = 0.6746031746031746
User 34170 AUC after training: 0.6746031746031746
User 34170 does not improve AUC. Reverting changes.
Training on augumented user 102311 4/50 current_auc = 0.6746031746031746
User 102311 AUC after training: 0.6741071428571429
User 102311 does not improve AUC. Reverting changes.
Training on augumented user 133623 5/50 current_auc = 0.6746031746031746
User 133623 AUC after training: 0.6741071428571429
User 133623 does not improve AUC. Reverting changes.
Training on augumented user 112010 6/50 current_auc = 0.6746031746031746
User 112010 AUC after training: 0.6746031746031746
User 112010 does not improve AUC. Reverting changes.
Training on augumented user 34722 7/50 current_auc = 0.6746031746031746
User 34722 AUC after training: 0.6731150793650794
User 34722 does not improve AUC. Reverting changes.
Training on augumented user 45518 8/50 current_auc = 0.6746031746031746
User 45518 AUC after training: 0.673611111111111
User 45518 does not improve AUC. Reverting changes.
Training on augumented user 15753 9/50 current_auc = 0.6746031746031746
User 15753 AUC after training: 0.6755952380952381
User 15753 improves AUC. Keeping the model.
Training on augumented user 53453 10/50 current_auc = 0.6755952380952381
User 53453 AUC after training: 0.6750992063492064
User 53453 does not improve AUC. Reverting changes.
Training on augumented user 23511 11/50 current_auc = 0.6755952380952381
User 23511 AUC after training: 0.6760912698412698
User 23511 improves AUC. Keeping the model.
Training on augumented user 63033 12/50 current_auc = 0.6760912698412698
User 63033 AUC after training: 0.6755952380952381
User 63033 does not improve AUC. Reverting changes.
Training on augumented user 94606 13/50 current_auc = 0.6760912698412698
User 94606 AUC after training: 0.6750992063492064
User 94606 does not improve AUC. Reverting changes.
Training on augumented user 24945 14/50 current_auc = 0.6760912698412698
User 24945 AUC after training: 0.6765873015873016
User 24945 improves AUC. Keeping the model.
Training on augumented user 77317 15/50 current_auc = 0.6765873015873016
User 77317 AUC after training: 0.6765873015873016
User 77317 does not improve AUC. Reverting changes.
Training on augumented user 63228 16/50 current_auc = 0.6765873015873016
User 63228 AUC after training: 0.6760912698412699
User 63228 does not improve AUC. Reverting changes.
Training on augumented user 111859 17/50 current_auc = 0.6765873015873016
User 111859 AUC after training: 0.6780753968253967
User 111859 improves AUC. Keeping the model.
Training on augumented user 127341 18/50 current_auc = 0.6780753968253967
User 127341 AUC after training: 0.6760912698412698
User 127341 does not improve AUC. Reverting changes.
Training on augumented user 32531 19/50 current_auc = 0.6780753968253967
User 32531 AUC after training: 0.6760912698412698
User 32531 does not improve AUC. Reverting changes.
Training on augumented user 50184 20/50 current_auc = 0.6780753968253967
User 50184 AUC after training: 0.6785714285714286
User 50184 improves AUC. Keeping the model.
Training on augumented user 98554 21/50 current_auc = 0.6785714285714286
User 98554 AUC after training: 0.6780753968253969
User 98554 does not improve AUC. Reverting changes.
Training on augumented user 55890 22/50 current_auc = 0.6785714285714286
User 55890 AUC after training: 0.6770833333333334
User 55890 does not improve AUC. Reverting changes.
Training on augumented user 56823 23/50 current_auc = 0.6785714285714286
User 56823 AUC after training: 0.6800595238095238
User 56823 improves AUC. Keeping the model.
Training on augumented user 43690 24/50 current_auc = 0.6800595238095238
User 43690 AUC after training: 0.6800595238095238
User 43690 does not improve AUC. Reverting changes.
Training on augumented user 51718 25/50 current_auc = 0.6800595238095238
User 51718 AUC after training: 0.6785714285714286
User 51718 does not improve AUC. Reverting changes.
Training on augumented user 121300 26/50 current_auc = 0.6800595238095238
User 121300 AUC after training: 0.6790674603174603
User 121300 does not improve AUC. Reverting changes.
Training on augumented user 136402 27/50 current_auc = 0.6800595238095238
User 136402 AUC after training: 0.6790674603174603
User 136402 does not improve AUC. Reverting changes.
Training on augumented user 64995 28/50 current_auc = 0.6800595238095238
User 64995 AUC after training: 0.6805555555555556
User 64995 improves AUC. Keeping the model.
Training on augumented user 108350 29/50 current_auc = 0.6805555555555556
User 108350 AUC after training: 0.6795634920634921
User 108350 does not improve AUC. Reverting changes.
Training on augumented user 60878 30/50 current_auc = 0.6805555555555556
User 60878 AUC after training: 0.6805555555555556
User 60878 does not improve AUC. Reverting changes.
Training on augumented user 2506 31/50 current_auc = 0.6805555555555556
User 2506 AUC after training: 0.6800595238095238
User 2506 does not improve AUC. Reverting changes.
Training on augumented user 96424 32/50 current_auc = 0.6805555555555556
User 96424 AUC after training: 0.6775793650793651
User 96424 does not improve AUC. Reverting changes.
Training on augumented user 43245 33/50 current_auc = 0.6805555555555556
User 43245 AUC after training: 0.6790674603174603
User 43245 does not improve AUC. Reverting changes.
Training on augumented user 81715 34/50 current_auc = 0.6805555555555556
User 81715 AUC after training: 0.6815476190476191
User 81715 improves AUC. Keeping the model.
Training on augumented user 98109 35/50 current_auc = 0.6815476190476191
User 98109 AUC after training: 0.6810515873015873
User 98109 does not improve AUC. Reverting changes.
Training on augumented user 70652 36/50 current_auc = 0.6815476190476191
User 70652 AUC after training: 0.6810515873015873
User 70652 does not improve AUC. Reverting changes.
Training on augumented user 94290 37/50 current_auc = 0.6815476190476191
User 94290 AUC after training: 0.6800595238095237
User 94290 does not improve AUC. Reverting changes.
Training on augumented user 77303 38/50 current_auc = 0.6815476190476191
User 77303 AUC after training: 0.6805555555555556
User 77303 does not improve AUC. Reverting changes.
Training on augumented user 16183 39/50 current_auc = 0.6815476190476191
User 16183 AUC after training: 0.6805555555555556
User 16183 does not improve AUC. Reverting changes.
Training on augumented user 46464 40/50 current_auc = 0.6815476190476191
User 46464 AUC after training: 0.6755952380952381
User 46464 does not improve AUC. Reverting changes.
Training on augumented user 109669 41/50 current_auc = 0.6815476190476191
User 109669 AUC after training: 0.6790674603174603
User 109669 does not improve AUC. Reverting changes.
Training on augumented user 5552 42/50 current_auc = 0.6815476190476191
User 5552 AUC after training: 0.6795634920634921
User 5552 does not improve AUC. Reverting changes.
Training on augumented user 120500 43/50 current_auc = 0.6815476190476191
User 120500 AUC after training: 0.6830357142857143
User 120500 improves AUC. Keeping the model.
Training on augumented user 19439 44/50 current_auc = 0.6830357142857143
User 19439 AUC after training: 0.6815476190476191
User 19439 does not improve AUC. Reverting changes.
Training on augumented user 136975 45/50 current_auc = 0.6830357142857143
User 136975 AUC after training: 0.6790674603174603
User 136975 does not improve AUC. Reverting changes.
Training on augumented user 122995 46/50 current_auc = 0.6830357142857143
User 122995 AUC after training: 0.6775793650793651
User 122995 does not improve AUC. Reverting changes.
Training on augumented user 74816 47/50 current_auc = 0.6830357142857143
User 74816 AUC after training: 0.6805555555555556
User 74816 does not improve AUC. Reverting changes.
Training on augumented user 59223 48/50 current_auc = 0.6830357142857143
User 59223 AUC after training: 0.6810515873015873
User 59223 does not improve AUC. Reverting changes.
Training on augumented user 16718 49/50 current_auc = 0.6830357142857143
User 16718 AUC after training: 0.6815476190476191
User 16718 does not improve AUC. Reverting changes.
[2024-12-02 20:09:04.233743] start test user 116677 277/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:09:04.705484] start test user 116677 277/567 recall augumented users by random, augumented_users = [5845, 112404, 106420, 14384, 20437, 81058, 46198, 67900, 34394, 138258, 121730, 86307, 130078, 71186, 106831, 70026, 28897, 136275, 128049, 58421, 131157, 36060, 63842, 86363, 111153, 46843, 23264, 34175, 59828, 45329, 63402, 796, 69624, 63030, 121106, 2066, 40436, 137670, 107364, 6064, 119966, 57783, 49676, 54919, 76461, 51311, 96483, 51890, 52070, 90210]
[2024-12-02 20:09:04.726501] user = 116677 Cloud 277/567
[2024-12-02 20:09:04.736322] user = 116677 Local 277/567
[2024-12-02 20:09:04.817538] user = 116677 Local+ 277/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:09:06.838586] user = 116677 MPDA- 277/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4602272727272727
Training on augumented user 5845 0/50 current_auc = 0.4602272727272727
User 5845 AUC after training: 0.4602272727272727
User 5845 does not improve AUC. Reverting changes.
Training on augumented user 112404 1/50 current_auc = 0.4602272727272727
User 112404 AUC after training: 0.4602272727272727
User 112404 does not improve AUC. Reverting changes.
Training on augumented user 106420 2/50 current_auc = 0.4602272727272727
User 106420 AUC after training: 0.4602272727272727
User 106420 does not improve AUC. Reverting changes.
Training on augumented user 14384 3/50 current_auc = 0.4602272727272727
User 14384 AUC after training: 0.4602272727272727
User 14384 does not improve AUC. Reverting changes.
Training on augumented user 20437 4/50 current_auc = 0.4602272727272727
User 20437 AUC after training: 0.4602272727272727
User 20437 does not improve AUC. Reverting changes.
Training on augumented user 81058 5/50 current_auc = 0.4602272727272727
User 81058 AUC after training: 0.4602272727272727
User 81058 does not improve AUC. Reverting changes.
Training on augumented user 46198 6/50 current_auc = 0.4602272727272727
User 46198 AUC after training: 0.4602272727272727
User 46198 does not improve AUC. Reverting changes.
Training on augumented user 67900 7/50 current_auc = 0.4602272727272727
User 67900 AUC after training: 0.4602272727272727
User 67900 does not improve AUC. Reverting changes.
Training on augumented user 34394 8/50 current_auc = 0.4602272727272727
User 34394 AUC after training: 0.4602272727272727
User 34394 does not improve AUC. Reverting changes.
Training on augumented user 138258 9/50 current_auc = 0.4602272727272727
User 138258 AUC after training: 0.4602272727272727
User 138258 does not improve AUC. Reverting changes.
Training on augumented user 121730 10/50 current_auc = 0.4602272727272727
User 121730 AUC after training: 0.4602272727272727
User 121730 does not improve AUC. Reverting changes.
Training on augumented user 86307 11/50 current_auc = 0.4602272727272727
User 86307 AUC after training: 0.4602272727272727
User 86307 does not improve AUC. Reverting changes.
Training on augumented user 130078 12/50 current_auc = 0.4602272727272727
User 130078 AUC after training: 0.4602272727272727
User 130078 does not improve AUC. Reverting changes.
Training on augumented user 71186 13/50 current_auc = 0.4602272727272727
User 71186 AUC after training: 0.4602272727272727
User 71186 does not improve AUC. Reverting changes.
Training on augumented user 106831 14/50 current_auc = 0.4602272727272727
User 106831 AUC after training: 0.4602272727272727
User 106831 does not improve AUC. Reverting changes.
Training on augumented user 70026 15/50 current_auc = 0.4602272727272727
User 70026 AUC after training: 0.4602272727272727
User 70026 does not improve AUC. Reverting changes.
Training on augumented user 28897 16/50 current_auc = 0.4602272727272727
User 28897 AUC after training: 0.4602272727272727
User 28897 does not improve AUC. Reverting changes.
Training on augumented user 136275 17/50 current_auc = 0.4602272727272727
User 136275 AUC after training: 0.4602272727272727
User 136275 does not improve AUC. Reverting changes.
Training on augumented user 128049 18/50 current_auc = 0.4602272727272727
User 128049 AUC after training: 0.4602272727272727
User 128049 does not improve AUC. Reverting changes.
Training on augumented user 58421 19/50 current_auc = 0.4602272727272727
User 58421 AUC after training: 0.4659090909090909
User 58421 improves AUC. Keeping the model.
Training on augumented user 131157 20/50 current_auc = 0.4659090909090909
User 131157 AUC after training: 0.4715909090909091
User 131157 improves AUC. Keeping the model.
Training on augumented user 36060 21/50 current_auc = 0.4715909090909091
User 36060 AUC after training: 0.4602272727272727
User 36060 does not improve AUC. Reverting changes.
Training on augumented user 63842 22/50 current_auc = 0.4715909090909091
User 63842 AUC after training: 0.4659090909090909
User 63842 does not improve AUC. Reverting changes.
Training on augumented user 86363 23/50 current_auc = 0.4715909090909091
User 86363 AUC after training: 0.4659090909090909
User 86363 does not improve AUC. Reverting changes.
Training on augumented user 111153 24/50 current_auc = 0.4715909090909091
User 111153 AUC after training: 0.4659090909090909
User 111153 does not improve AUC. Reverting changes.
Training on augumented user 46843 25/50 current_auc = 0.4715909090909091
User 46843 AUC after training: 0.4659090909090909
User 46843 does not improve AUC. Reverting changes.
Training on augumented user 23264 26/50 current_auc = 0.4715909090909091
User 23264 AUC after training: 0.4715909090909091
User 23264 does not improve AUC. Reverting changes.
Training on augumented user 34175 27/50 current_auc = 0.4715909090909091
User 34175 AUC after training: 0.4602272727272727
User 34175 does not improve AUC. Reverting changes.
Training on augumented user 59828 28/50 current_auc = 0.4715909090909091
User 59828 AUC after training: 0.4659090909090909
User 59828 does not improve AUC. Reverting changes.
Training on augumented user 45329 29/50 current_auc = 0.4715909090909091
User 45329 AUC after training: 0.4715909090909091
User 45329 does not improve AUC. Reverting changes.
Training on augumented user 63402 30/50 current_auc = 0.4715909090909091
User 63402 AUC after training: 0.4715909090909091
User 63402 does not improve AUC. Reverting changes.
Training on augumented user 796 31/50 current_auc = 0.4715909090909091
User 796 AUC after training: 0.4659090909090909
User 796 does not improve AUC. Reverting changes.
Training on augumented user 69624 32/50 current_auc = 0.4715909090909091
User 69624 AUC after training: 0.4659090909090909
User 69624 does not improve AUC. Reverting changes.
Training on augumented user 63030 33/50 current_auc = 0.4715909090909091
User 63030 AUC after training: 0.4659090909090909
User 63030 does not improve AUC. Reverting changes.
Training on augumented user 121106 34/50 current_auc = 0.4715909090909091
User 121106 AUC after training: 0.4715909090909091
User 121106 does not improve AUC. Reverting changes.
Training on augumented user 2066 35/50 current_auc = 0.4715909090909091
User 2066 AUC after training: 0.4659090909090909
User 2066 does not improve AUC. Reverting changes.
Training on augumented user 40436 36/50 current_auc = 0.4715909090909091
User 40436 AUC after training: 0.4659090909090909
User 40436 does not improve AUC. Reverting changes.
Training on augumented user 137670 37/50 current_auc = 0.4715909090909091
User 137670 AUC after training: 0.4659090909090909
User 137670 does not improve AUC. Reverting changes.
Training on augumented user 107364 38/50 current_auc = 0.4715909090909091
User 107364 AUC after training: 0.4659090909090909
User 107364 does not improve AUC. Reverting changes.
Training on augumented user 6064 39/50 current_auc = 0.4715909090909091
User 6064 AUC after training: 0.4659090909090909
User 6064 does not improve AUC. Reverting changes.
Training on augumented user 119966 40/50 current_auc = 0.4715909090909091
User 119966 AUC after training: 0.4715909090909091
User 119966 does not improve AUC. Reverting changes.
Training on augumented user 57783 41/50 current_auc = 0.4715909090909091
User 57783 AUC after training: 0.4715909090909091
User 57783 does not improve AUC. Reverting changes.
Training on augumented user 49676 42/50 current_auc = 0.4715909090909091
User 49676 AUC after training: 0.4659090909090909
User 49676 does not improve AUC. Reverting changes.
Training on augumented user 54919 43/50 current_auc = 0.4715909090909091
User 54919 AUC after training: 0.4659090909090909
User 54919 does not improve AUC. Reverting changes.
Training on augumented user 76461 44/50 current_auc = 0.4715909090909091
User 76461 AUC after training: 0.4602272727272727
User 76461 does not improve AUC. Reverting changes.
Training on augumented user 51311 45/50 current_auc = 0.4715909090909091
User 51311 AUC after training: 0.4715909090909091
User 51311 does not improve AUC. Reverting changes.
Training on augumented user 96483 46/50 current_auc = 0.4715909090909091
User 96483 AUC after training: 0.4659090909090909
User 96483 does not improve AUC. Reverting changes.
Training on augumented user 51890 47/50 current_auc = 0.4715909090909091
User 51890 AUC after training: 0.4659090909090909
User 51890 does not improve AUC. Reverting changes.
Training on augumented user 52070 48/50 current_auc = 0.4715909090909091
User 52070 AUC after training: 0.4715909090909091
User 52070 does not improve AUC. Reverting changes.
Training on augumented user 90210 49/50 current_auc = 0.4715909090909091
User 90210 AUC after training: 0.4715909090909091
User 90210 does not improve AUC. Reverting changes.
[2024-12-02 20:09:35.514260] start test user 116687 278/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:09:36.139331] start test user 116687 278/567 recall augumented users by random, augumented_users = [99832, 63968, 63604, 18788, 61481, 40807, 4858, 91410, 77697, 68994, 138007, 136514, 46514, 26230, 11094, 41572, 128125, 34843, 22351, 101030, 62818, 86259, 51043, 52122, 80546, 106614, 84453, 7574, 88232, 60373, 91638, 23510, 129077, 99521, 22834, 21408, 11141, 124282, 55179, 7287, 42801, 2599, 133592, 87934, 66974, 93629, 86876, 81760, 90691, 124481]
[2024-12-02 20:09:36.154615] user = 116687 Cloud 278/567
[2024-12-02 20:09:36.170462] user = 116687 Local 278/567
[2024-12-02 20:09:36.204667] user = 116687 Local+ 278/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:09:38.350541] user = 116687 MPDA- 278/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.696969696969697
Training on augumented user 99832 0/50 current_auc = 0.696969696969697
User 99832 AUC after training: 0.696969696969697
User 99832 does not improve AUC. Reverting changes.
Training on augumented user 63968 1/50 current_auc = 0.696969696969697
User 63968 AUC after training: 0.696969696969697
User 63968 does not improve AUC. Reverting changes.
Training on augumented user 63604 2/50 current_auc = 0.696969696969697
User 63604 AUC after training: 0.696969696969697
User 63604 does not improve AUC. Reverting changes.
Training on augumented user 18788 3/50 current_auc = 0.696969696969697
User 18788 AUC after training: 0.696969696969697
User 18788 does not improve AUC. Reverting changes.
Training on augumented user 61481 4/50 current_auc = 0.696969696969697
User 61481 AUC after training: 0.696969696969697
User 61481 does not improve AUC. Reverting changes.
Training on augumented user 40807 5/50 current_auc = 0.696969696969697
User 40807 AUC after training: 0.696969696969697
User 40807 does not improve AUC. Reverting changes.
Training on augumented user 4858 6/50 current_auc = 0.696969696969697
User 4858 AUC after training: 0.696969696969697
User 4858 does not improve AUC. Reverting changes.
Training on augumented user 91410 7/50 current_auc = 0.696969696969697
User 91410 AUC after training: 0.696969696969697
User 91410 does not improve AUC. Reverting changes.
Training on augumented user 77697 8/50 current_auc = 0.696969696969697
User 77697 AUC after training: 0.696969696969697
User 77697 does not improve AUC. Reverting changes.
Training on augumented user 68994 9/50 current_auc = 0.696969696969697
User 68994 AUC after training: 0.696969696969697
User 68994 does not improve AUC. Reverting changes.
Training on augumented user 138007 10/50 current_auc = 0.696969696969697
User 138007 AUC after training: 0.7272727272727273
User 138007 improves AUC. Keeping the model.
Training on augumented user 136514 11/50 current_auc = 0.7272727272727273
User 136514 AUC after training: 0.696969696969697
User 136514 does not improve AUC. Reverting changes.
Training on augumented user 46514 12/50 current_auc = 0.7272727272727273
User 46514 AUC after training: 0.7272727272727273
User 46514 does not improve AUC. Reverting changes.
Training on augumented user 26230 13/50 current_auc = 0.7272727272727273
User 26230 AUC after training: 0.7272727272727273
User 26230 does not improve AUC. Reverting changes.
Training on augumented user 11094 14/50 current_auc = 0.7272727272727273
User 11094 AUC after training: 0.696969696969697
User 11094 does not improve AUC. Reverting changes.
Training on augumented user 41572 15/50 current_auc = 0.7272727272727273
User 41572 AUC after training: 0.7272727272727273
User 41572 does not improve AUC. Reverting changes.
Training on augumented user 128125 16/50 current_auc = 0.7272727272727273
User 128125 AUC after training: 0.7272727272727273
User 128125 does not improve AUC. Reverting changes.
Training on augumented user 34843 17/50 current_auc = 0.7272727272727273
User 34843 AUC after training: 0.7272727272727273
User 34843 does not improve AUC. Reverting changes.
Training on augumented user 22351 18/50 current_auc = 0.7272727272727273
User 22351 AUC after training: 0.7272727272727273
User 22351 does not improve AUC. Reverting changes.
Training on augumented user 101030 19/50 current_auc = 0.7272727272727273
User 101030 AUC after training: 0.7272727272727273
User 101030 does not improve AUC. Reverting changes.
Training on augumented user 62818 20/50 current_auc = 0.7272727272727273
User 62818 AUC after training: 0.7272727272727273
User 62818 does not improve AUC. Reverting changes.
Training on augumented user 86259 21/50 current_auc = 0.7272727272727273
User 86259 AUC after training: 0.7272727272727273
User 86259 does not improve AUC. Reverting changes.
Training on augumented user 51043 22/50 current_auc = 0.7272727272727273
User 51043 AUC after training: 0.7272727272727273
User 51043 does not improve AUC. Reverting changes.
Training on augumented user 52122 23/50 current_auc = 0.7272727272727273
User 52122 AUC after training: 0.7272727272727273
User 52122 does not improve AUC. Reverting changes.
Training on augumented user 80546 24/50 current_auc = 0.7272727272727273
User 80546 AUC after training: 0.7272727272727273
User 80546 does not improve AUC. Reverting changes.
Training on augumented user 106614 25/50 current_auc = 0.7272727272727273
User 106614 AUC after training: 0.7272727272727273
User 106614 does not improve AUC. Reverting changes.
Training on augumented user 84453 26/50 current_auc = 0.7272727272727273
User 84453 AUC after training: 0.7272727272727273
User 84453 does not improve AUC. Reverting changes.
Training on augumented user 7574 27/50 current_auc = 0.7272727272727273
User 7574 AUC after training: 0.7272727272727273
User 7574 does not improve AUC. Reverting changes.
Training on augumented user 88232 28/50 current_auc = 0.7272727272727273
User 88232 AUC after training: 0.7272727272727273
User 88232 does not improve AUC. Reverting changes.
Training on augumented user 60373 29/50 current_auc = 0.7272727272727273
User 60373 AUC after training: 0.696969696969697
User 60373 does not improve AUC. Reverting changes.
Training on augumented user 91638 30/50 current_auc = 0.7272727272727273
User 91638 AUC after training: 0.7272727272727273
User 91638 does not improve AUC. Reverting changes.
Training on augumented user 23510 31/50 current_auc = 0.7272727272727273
User 23510 AUC after training: 0.7272727272727273
User 23510 does not improve AUC. Reverting changes.
Training on augumented user 129077 32/50 current_auc = 0.7272727272727273
User 129077 AUC after training: 0.7272727272727273
User 129077 does not improve AUC. Reverting changes.
Training on augumented user 99521 33/50 current_auc = 0.7272727272727273
User 99521 AUC after training: 0.7272727272727273
User 99521 does not improve AUC. Reverting changes.
Training on augumented user 22834 34/50 current_auc = 0.7272727272727273
User 22834 AUC after training: 0.696969696969697
User 22834 does not improve AUC. Reverting changes.
Training on augumented user 21408 35/50 current_auc = 0.7272727272727273
User 21408 AUC after training: 0.7272727272727273
User 21408 does not improve AUC. Reverting changes.
Training on augumented user 11141 36/50 current_auc = 0.7272727272727273
User 11141 AUC after training: 0.7272727272727273
User 11141 does not improve AUC. Reverting changes.
Training on augumented user 124282 37/50 current_auc = 0.7272727272727273
User 124282 AUC after training: 0.7272727272727273
User 124282 does not improve AUC. Reverting changes.
Training on augumented user 55179 38/50 current_auc = 0.7272727272727273
User 55179 AUC after training: 0.7272727272727273
User 55179 does not improve AUC. Reverting changes.
Training on augumented user 7287 39/50 current_auc = 0.7272727272727273
User 7287 AUC after training: 0.7272727272727273
User 7287 does not improve AUC. Reverting changes.
Training on augumented user 42801 40/50 current_auc = 0.7272727272727273
User 42801 AUC after training: 0.7272727272727273
User 42801 does not improve AUC. Reverting changes.
Training on augumented user 2599 41/50 current_auc = 0.7272727272727273
User 2599 AUC after training: 0.7272727272727273
User 2599 does not improve AUC. Reverting changes.
Training on augumented user 133592 42/50 current_auc = 0.7272727272727273
User 133592 AUC after training: 0.7272727272727273
User 133592 does not improve AUC. Reverting changes.
Training on augumented user 87934 43/50 current_auc = 0.7272727272727273
User 87934 AUC after training: 0.7272727272727273
User 87934 does not improve AUC. Reverting changes.
Training on augumented user 66974 44/50 current_auc = 0.7272727272727273
User 66974 AUC after training: 0.7272727272727273
User 66974 does not improve AUC. Reverting changes.
Training on augumented user 93629 45/50 current_auc = 0.7272727272727273
User 93629 AUC after training: 0.7272727272727273
User 93629 does not improve AUC. Reverting changes.
Training on augumented user 86876 46/50 current_auc = 0.7272727272727273
User 86876 AUC after training: 0.7272727272727273
User 86876 does not improve AUC. Reverting changes.
Training on augumented user 81760 47/50 current_auc = 0.7272727272727273
User 81760 AUC after training: 0.7272727272727273
User 81760 does not improve AUC. Reverting changes.
Training on augumented user 90691 48/50 current_auc = 0.7272727272727273
User 90691 AUC after training: 0.7272727272727273
User 90691 does not improve AUC. Reverting changes.
Training on augumented user 124481 49/50 current_auc = 0.7272727272727273
User 124481 AUC after training: 0.7272727272727273
User 124481 does not improve AUC. Reverting changes.
[2024-12-02 20:10:04.077091] start test user 116763 279/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:10:04.860378] start test user 116763 279/567 recall augumented users by random, augumented_users = [89269, 49032, 137225, 95927, 133561, 54667, 30050, 79300, 102577, 21666, 41944, 137596, 119647, 56585, 14510, 74761, 34669, 46737, 132589, 111822, 130219, 88861, 99136, 102831, 13712, 45789, 104531, 137133, 47186, 125527, 52601, 111515, 43608, 87566, 84230, 43624, 31809, 42605, 137581, 107570, 52782, 38097, 16323, 18646, 21725, 13026, 70335, 50230, 19548, 92372]
[2024-12-02 20:10:04.889023] user = 116763 Cloud 279/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:10:04.905862] user = 116763 Local 279/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:10:04.952001] user = 116763 Local+ 279/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:10:06.984272] user = 116763 MPDA- 279/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 89269 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89269 AUC after training: 0.5
User 89269 does not improve AUC. Reverting changes.
Training on augumented user 49032 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49032 AUC after training: 0.5
User 49032 does not improve AUC. Reverting changes.
Training on augumented user 137225 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137225 AUC after training: 0.5
User 137225 does not improve AUC. Reverting changes.
Training on augumented user 95927 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95927 AUC after training: 0.5
User 95927 does not improve AUC. Reverting changes.
Training on augumented user 133561 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133561 AUC after training: 0.5
User 133561 does not improve AUC. Reverting changes.
Training on augumented user 54667 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54667 AUC after training: 0.5
User 54667 does not improve AUC. Reverting changes.
Training on augumented user 30050 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30050 AUC after training: 0.5
User 30050 does not improve AUC. Reverting changes.
Training on augumented user 79300 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79300 AUC after training: 0.5
User 79300 does not improve AUC. Reverting changes.
Training on augumented user 102577 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102577 AUC after training: 0.5
User 102577 does not improve AUC. Reverting changes.
Training on augumented user 21666 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21666 AUC after training: 0.5
User 21666 does not improve AUC. Reverting changes.
Training on augumented user 41944 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41944 AUC after training: 0.5
User 41944 does not improve AUC. Reverting changes.
Training on augumented user 137596 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137596 AUC after training: 0.5
User 137596 does not improve AUC. Reverting changes.
Training on augumented user 119647 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 119647 AUC after training: 0.5
User 119647 does not improve AUC. Reverting changes.
Training on augumented user 56585 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56585 AUC after training: 0.5
User 56585 does not improve AUC. Reverting changes.
Training on augumented user 14510 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14510 AUC after training: 0.5
User 14510 does not improve AUC. Reverting changes.
Training on augumented user 74761 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74761 AUC after training: 0.5
User 74761 does not improve AUC. Reverting changes.
Training on augumented user 34669 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 34669 AUC after training: 0.5
User 34669 does not improve AUC. Reverting changes.
Training on augumented user 46737 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 46737 AUC after training: 0.5
User 46737 does not improve AUC. Reverting changes.
Training on augumented user 132589 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132589 AUC after training: 0.5
User 132589 does not improve AUC. Reverting changes.
Training on augumented user 111822 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111822 AUC after training: 0.5
User 111822 does not improve AUC. Reverting changes.
Training on augumented user 130219 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130219 AUC after training: 0.5
User 130219 does not improve AUC. Reverting changes.
Training on augumented user 88861 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88861 AUC after training: 0.5
User 88861 does not improve AUC. Reverting changes.
Training on augumented user 99136 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99136 AUC after training: 0.5
User 99136 does not improve AUC. Reverting changes.
Training on augumented user 102831 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102831 AUC after training: 0.5
User 102831 does not improve AUC. Reverting changes.
Training on augumented user 13712 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13712 AUC after training: 0.5
User 13712 does not improve AUC. Reverting changes.
Training on augumented user 45789 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45789 AUC after training: 0.5
User 45789 does not improve AUC. Reverting changes.
Training on augumented user 104531 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104531 AUC after training: 0.5
User 104531 does not improve AUC. Reverting changes.
Training on augumented user 137133 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137133 AUC after training: 0.5
User 137133 does not improve AUC. Reverting changes.
Training on augumented user 47186 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47186 AUC after training: 0.5
User 47186 does not improve AUC. Reverting changes.
Training on augumented user 125527 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 125527 AUC after training: 0.5
User 125527 does not improve AUC. Reverting changes.
Training on augumented user 52601 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 52601 AUC after training: 0.5
User 52601 does not improve AUC. Reverting changes.
Training on augumented user 111515 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111515 AUC after training: 0.5
User 111515 does not improve AUC. Reverting changes.
Training on augumented user 43608 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43608 AUC after training: 0.5
User 43608 does not improve AUC. Reverting changes.
Training on augumented user 87566 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87566 AUC after training: 0.5
User 87566 does not improve AUC. Reverting changes.
Training on augumented user 84230 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84230 AUC after training: 0.5
User 84230 does not improve AUC. Reverting changes.
Training on augumented user 43624 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43624 AUC after training: 0.5
User 43624 does not improve AUC. Reverting changes.
Training on augumented user 31809 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 31809 AUC after training: 0.5
User 31809 does not improve AUC. Reverting changes.
Training on augumented user 42605 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42605 AUC after training: 0.5
User 42605 does not improve AUC. Reverting changes.
Training on augumented user 137581 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137581 AUC after training: 0.5
User 137581 does not improve AUC. Reverting changes.
Training on augumented user 107570 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107570 AUC after training: 0.5
User 107570 does not improve AUC. Reverting changes.
Training on augumented user 52782 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 52782 AUC after training: 0.5
User 52782 does not improve AUC. Reverting changes.
Training on augumented user 38097 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38097 AUC after training: 0.5
User 38097 does not improve AUC. Reverting changes.
Training on augumented user 16323 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16323 AUC after training: 0.5
User 16323 does not improve AUC. Reverting changes.
Training on augumented user 18646 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18646 AUC after training: 0.5
User 18646 does not improve AUC. Reverting changes.
Training on augumented user 21725 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21725 AUC after training: 0.5
User 21725 does not improve AUC. Reverting changes.
Training on augumented user 13026 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13026 AUC after training: 0.5
User 13026 does not improve AUC. Reverting changes.
Training on augumented user 70335 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70335 AUC after training: 0.5
User 70335 does not improve AUC. Reverting changes.
Training on augumented user 50230 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50230 AUC after training: 0.5
User 50230 does not improve AUC. Reverting changes.
Training on augumented user 19548 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19548 AUC after training: 0.5
User 19548 does not improve AUC. Reverting changes.
Training on augumented user 92372 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92372 AUC after training: 0.5
User 92372 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:10:32.451390] start test user 116806 280/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:10:33.189271] start test user 116806 280/567 recall augumented users by random, augumented_users = [43971, 119322, 23274, 104376, 128835, 116890, 14329, 24620, 131141, 64076, 93372, 81733, 110197, 64097, 63100, 20766, 46149, 8957, 68952, 109872, 78148, 43982, 22259, 133780, 101037, 122225, 38373, 127934, 72414, 69101, 40712, 28534, 56929, 78295, 85348, 108102, 88587, 4083, 121396, 107843, 1696, 99018, 135199, 114624, 43593, 106865, 27675, 33457, 129601, 56713]
[2024-12-02 20:10:33.217881] user = 116806 Cloud 280/567
[2024-12-02 20:10:33.250323] user = 116806 Local 280/567
[2024-12-02 20:10:33.333741] user = 116806 Local+ 280/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:10:35.730626] user = 116806 MPDA- 280/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5757575757575757
Training on augumented user 43971 0/50 current_auc = 0.5757575757575757
User 43971 AUC after training: 0.5763431415605328
User 43971 improves AUC. Keeping the model.
Training on augumented user 119322 1/50 current_auc = 0.5763431415605328
User 119322 AUC after training: 0.5760503586590543
User 119322 does not improve AUC. Reverting changes.
Training on augumented user 23274 2/50 current_auc = 0.5763431415605328
User 23274 AUC after training: 0.5780998389694042
User 23274 improves AUC. Keeping the model.
Training on augumented user 104376 3/50 current_auc = 0.5780998389694042
User 104376 AUC after training: 0.5752452056799883
User 104376 does not improve AUC. Reverting changes.
Training on augumented user 128835 4/50 current_auc = 0.5780998389694042
User 128835 AUC after training: 0.575318401405358
User 128835 does not improve AUC. Reverting changes.
Training on augumented user 116890 5/50 current_auc = 0.5780998389694042
User 116890 AUC after training: 0.5779534475186648
User 116890 does not improve AUC. Reverting changes.
Training on augumented user 14329 6/50 current_auc = 0.5780998389694042
User 14329 AUC after training: 0.5790513833992094
User 14329 improves AUC. Keeping the model.
Training on augumented user 24620 7/50 current_auc = 0.5790513833992094
User 24620 AUC after training: 0.5791977748499487
User 24620 improves AUC. Keeping the model.
Training on augumented user 131141 8/50 current_auc = 0.5791977748499487
User 131141 AUC after training: 0.5754647928560972
User 131141 does not improve AUC. Reverting changes.
Training on augumented user 64076 9/50 current_auc = 0.5791977748499487
User 64076 AUC after training: 0.5791977748499487
User 64076 does not improve AUC. Reverting changes.
Training on augumented user 93372 10/50 current_auc = 0.5791977748499487
User 93372 AUC after training: 0.5772214902649686
User 93372 does not improve AUC. Reverting changes.
Training on augumented user 81733 11/50 current_auc = 0.5791977748499487
User 81733 AUC after training: 0.5786122090469916
User 81733 does not improve AUC. Reverting changes.
Training on augumented user 110197 12/50 current_auc = 0.5791977748499487
User 110197 AUC after training: 0.5790513833992094
User 110197 does not improve AUC. Reverting changes.
Training on augumented user 64097 13/50 current_auc = 0.5791977748499487
User 64097 AUC after training: 0.5780266432440345
User 64097 does not improve AUC. Reverting changes.
Training on augumented user 63100 14/50 current_auc = 0.5791977748499487
User 63100 AUC after training: 0.5796369492021666
User 63100 improves AUC. Keeping the model.
Training on augumented user 20766 15/50 current_auc = 0.5796369492021666
User 20766 AUC after training: 0.5778070560679256
User 20766 does not improve AUC. Reverting changes.
Training on augumented user 46149 16/50 current_auc = 0.5796369492021666
User 46149 AUC after training: 0.5783926218708828
User 46149 does not improve AUC. Reverting changes.
Training on augumented user 8957 17/50 current_auc = 0.5796369492021666
User 8957 AUC after training: 0.5772214902649685
User 8957 does not improve AUC. Reverting changes.
Training on augumented user 68952 18/50 current_auc = 0.5796369492021666
User 68952 AUC after training: 0.5790513833992095
User 68952 does not improve AUC. Reverting changes.
Training on augumented user 109872 19/50 current_auc = 0.5796369492021666
User 109872 AUC after training: 0.5789049919484702
User 109872 does not improve AUC. Reverting changes.
Training on augumented user 78148 20/50 current_auc = 0.5796369492021666
User 78148 AUC after training: 0.5787586004977309
User 78148 does not improve AUC. Reverting changes.
Training on augumented user 43982 21/50 current_auc = 0.5796369492021666
User 43982 AUC after training: 0.5762699458351632
User 43982 does not improve AUC. Reverting changes.
Training on augumented user 22259 22/50 current_auc = 0.5796369492021666
User 22259 AUC after training: 0.5794905577514273
User 22259 does not improve AUC. Reverting changes.
Training on augumented user 133780 23/50 current_auc = 0.5796369492021666
User 133780 AUC after training: 0.5794905577514272
User 133780 does not improve AUC. Reverting changes.
Training on augumented user 101037 24/50 current_auc = 0.5796369492021666
User 101037 AUC after training: 0.5790513833992095
User 101037 does not improve AUC. Reverting changes.
Training on augumented user 122225 25/50 current_auc = 0.5796369492021666
User 122225 AUC after training: 0.5779534475186648
User 122225 does not improve AUC. Reverting changes.
Training on augumented user 38373 26/50 current_auc = 0.5796369492021666
User 38373 AUC after training: 0.5767823159127506
User 38373 does not improve AUC. Reverting changes.
Training on augumented user 127934 27/50 current_auc = 0.5796369492021666
User 127934 AUC after training: 0.5788317962231005
User 127934 does not improve AUC. Reverting changes.
Training on augumented user 72414 28/50 current_auc = 0.5796369492021666
User 72414 AUC after training: 0.578539013321622
User 72414 does not improve AUC. Reverting changes.
Training on augumented user 69101 29/50 current_auc = 0.5796369492021666
User 69101 AUC after training: 0.5792709705753184
User 69101 does not improve AUC. Reverting changes.
Training on augumented user 40712 30/50 current_auc = 0.5796369492021666
User 40712 AUC after training: 0.5788317962231005
User 40712 does not improve AUC. Reverting changes.
Training on augumented user 28534 31/50 current_auc = 0.5796369492021666
User 28534 AUC after training: 0.5794905577514273
User 28534 does not improve AUC. Reverting changes.
Training on augumented user 56929 32/50 current_auc = 0.5796369492021666
User 56929 AUC after training: 0.578319426145513
User 56929 does not improve AUC. Reverting changes.
Training on augumented user 78295 33/50 current_auc = 0.5796369492021666
User 78295 AUC after training: 0.5777338603425559
User 78295 does not improve AUC. Reverting changes.
Training on augumented user 85348 34/50 current_auc = 0.5796369492021666
User 85348 AUC after training: 0.5792709705753184
User 85348 does not improve AUC. Reverting changes.
Training on augumented user 108102 35/50 current_auc = 0.5796369492021666
User 108102 AUC after training: 0.5783926218708827
User 108102 does not improve AUC. Reverting changes.
Training on augumented user 88587 36/50 current_auc = 0.5796369492021666
User 88587 AUC after training: 0.5758307714829453
User 88587 does not improve AUC. Reverting changes.
Training on augumented user 4083 37/50 current_auc = 0.5796369492021666
User 4083 AUC after training: 0.5755379885814668
User 4083 does not improve AUC. Reverting changes.
Training on augumented user 121396 38/50 current_auc = 0.5796369492021666
User 121396 AUC after training: 0.579124579124579
User 121396 does not improve AUC. Reverting changes.
Training on augumented user 107843 39/50 current_auc = 0.5796369492021666
User 107843 AUC after training: 0.5791245791245792
User 107843 does not improve AUC. Reverting changes.
Training on augumented user 1696 40/50 current_auc = 0.5796369492021666
User 1696 AUC after training: 0.5794173620260576
User 1696 does not improve AUC. Reverting changes.
Training on augumented user 99018 41/50 current_auc = 0.5796369492021666
User 99018 AUC after training: 0.5797101449275361
User 99018 improves AUC. Keeping the model.
Training on augumented user 135199 42/50 current_auc = 0.5797101449275361
User 135199 AUC after training: 0.5800029278290147
User 135199 improves AUC. Keeping the model.
Training on augumented user 114624 43/50 current_auc = 0.5800029278290147
User 114624 AUC after training: 0.5794173620260576
User 114624 does not improve AUC. Reverting changes.
Training on augumented user 43593 44/50 current_auc = 0.5800029278290147
User 43593 AUC after training: 0.5786854047723613
User 43593 does not improve AUC. Reverting changes.
Training on augumented user 106865 45/50 current_auc = 0.5800029278290147
User 106865 AUC after training: 0.576489533011272
User 106865 does not improve AUC. Reverting changes.
Training on augumented user 27675 46/50 current_auc = 0.5800029278290147
User 27675 AUC after training: 0.5800029278290147
User 27675 does not improve AUC. Reverting changes.
Training on augumented user 33457 47/50 current_auc = 0.5800029278290147
User 33457 AUC after training: 0.5804421021812326
User 33457 improves AUC. Keeping the model.
Training on augumented user 129601 48/50 current_auc = 0.5804421021812326
User 129601 AUC after training: 0.5798565363782755
User 129601 does not improve AUC. Reverting changes.
Training on augumented user 56713 49/50 current_auc = 0.5804421021812326
User 56713 AUC after training: 0.5797101449275363
User 56713 does not improve AUC. Reverting changes.
[2024-12-02 20:11:04.972670] start test user 116822 281/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:11:05.410755] start test user 116822 281/567 recall augumented users by random, augumented_users = [138397, 30067, 66176, 46341, 134399, 88850, 11333, 37720, 24251, 136899, 112201, 127344, 2774, 96900, 68063, 42865, 77306, 58439, 42339, 32176, 109729, 72215, 6243, 131987, 128438, 26153, 24620, 97187, 93372, 118081, 97256, 87938, 12538, 74450, 92063, 111602, 19455, 60185, 93665, 102779, 9054, 116872, 13058, 117488, 87188, 58660, 57661, 80560, 55739, 105571]
[2024-12-02 20:11:05.425817] user = 116822 Cloud 281/567
[2024-12-02 20:11:05.442557] user = 116822 Local 281/567
[2024-12-02 20:11:05.506122] user = 116822 Local+ 281/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:11:08.640859] user = 116822 MPDA- 281/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.75
Training on augumented user 138397 0/50 current_auc = 0.75
User 138397 AUC after training: 0.875
User 138397 improves AUC. Keeping the model.
Training on augumented user 30067 1/50 current_auc = 0.875
User 30067 AUC after training: 0.75
User 30067 does not improve AUC. Reverting changes.
Training on augumented user 66176 2/50 current_auc = 0.875
User 66176 AUC after training: 0.875
User 66176 does not improve AUC. Reverting changes.
Training on augumented user 46341 3/50 current_auc = 0.875
User 46341 AUC after training: 0.875
User 46341 does not improve AUC. Reverting changes.
Training on augumented user 134399 4/50 current_auc = 0.875
User 134399 AUC after training: 0.875
User 134399 does not improve AUC. Reverting changes.
Training on augumented user 88850 5/50 current_auc = 0.875
User 88850 AUC after training: 0.875
User 88850 does not improve AUC. Reverting changes.
Training on augumented user 11333 6/50 current_auc = 0.875
User 11333 AUC after training: 0.375
User 11333 does not improve AUC. Reverting changes.
Training on augumented user 37720 7/50 current_auc = 0.875
User 37720 AUC after training: 0.875
User 37720 does not improve AUC. Reverting changes.
Training on augumented user 24251 8/50 current_auc = 0.875
User 24251 AUC after training: 0.875
User 24251 does not improve AUC. Reverting changes.
Training on augumented user 136899 9/50 current_auc = 0.875
User 136899 AUC after training: 0.875
User 136899 does not improve AUC. Reverting changes.
Training on augumented user 112201 10/50 current_auc = 0.875
User 112201 AUC after training: 0.875
User 112201 does not improve AUC. Reverting changes.
Training on augumented user 127344 11/50 current_auc = 0.875
User 127344 AUC after training: 0.5
User 127344 does not improve AUC. Reverting changes.
Training on augumented user 2774 12/50 current_auc = 0.875
User 2774 AUC after training: 0.75
User 2774 does not improve AUC. Reverting changes.
Training on augumented user 96900 13/50 current_auc = 0.875
User 96900 AUC after training: 0.875
User 96900 does not improve AUC. Reverting changes.
Training on augumented user 68063 14/50 current_auc = 0.875
User 68063 AUC after training: 1.0
User 68063 improves AUC. Keeping the model.
Training on augumented user 42865 15/50 current_auc = 1.0
User 42865 AUC after training: 1.0
User 42865 does not improve AUC. Reverting changes.
Training on augumented user 77306 16/50 current_auc = 1.0
User 77306 AUC after training: 1.0
User 77306 does not improve AUC. Reverting changes.
Training on augumented user 58439 17/50 current_auc = 1.0
User 58439 AUC after training: 1.0
User 58439 does not improve AUC. Reverting changes.
Training on augumented user 42339 18/50 current_auc = 1.0
User 42339 AUC after training: 1.0
User 42339 does not improve AUC. Reverting changes.
Training on augumented user 32176 19/50 current_auc = 1.0
User 32176 AUC after training: 1.0
User 32176 does not improve AUC. Reverting changes.
Training on augumented user 109729 20/50 current_auc = 1.0
User 109729 AUC after training: 1.0
User 109729 does not improve AUC. Reverting changes.
Training on augumented user 72215 21/50 current_auc = 1.0
User 72215 AUC after training: 1.0
User 72215 does not improve AUC. Reverting changes.
Training on augumented user 6243 22/50 current_auc = 1.0
User 6243 AUC after training: 1.0
User 6243 does not improve AUC. Reverting changes.
Training on augumented user 131987 23/50 current_auc = 1.0
User 131987 AUC after training: 1.0
User 131987 does not improve AUC. Reverting changes.
Training on augumented user 128438 24/50 current_auc = 1.0
User 128438 AUC after training: 1.0
User 128438 does not improve AUC. Reverting changes.
Training on augumented user 26153 25/50 current_auc = 1.0
User 26153 AUC after training: 1.0
User 26153 does not improve AUC. Reverting changes.
Training on augumented user 24620 26/50 current_auc = 1.0
User 24620 AUC after training: 1.0
User 24620 does not improve AUC. Reverting changes.
Training on augumented user 97187 27/50 current_auc = 1.0
User 97187 AUC after training: 1.0
User 97187 does not improve AUC. Reverting changes.
Training on augumented user 93372 28/50 current_auc = 1.0
User 93372 AUC after training: 1.0
User 93372 does not improve AUC. Reverting changes.
Training on augumented user 118081 29/50 current_auc = 1.0
User 118081 AUC after training: 1.0
User 118081 does not improve AUC. Reverting changes.
Training on augumented user 97256 30/50 current_auc = 1.0
User 97256 AUC after training: 1.0
User 97256 does not improve AUC. Reverting changes.
Training on augumented user 87938 31/50 current_auc = 1.0
User 87938 AUC after training: 1.0
User 87938 does not improve AUC. Reverting changes.
Training on augumented user 12538 32/50 current_auc = 1.0
User 12538 AUC after training: 1.0
User 12538 does not improve AUC. Reverting changes.
Training on augumented user 74450 33/50 current_auc = 1.0
User 74450 AUC after training: 1.0
User 74450 does not improve AUC. Reverting changes.
Training on augumented user 92063 34/50 current_auc = 1.0
User 92063 AUC after training: 1.0
User 92063 does not improve AUC. Reverting changes.
Training on augumented user 111602 35/50 current_auc = 1.0
User 111602 AUC after training: 1.0
User 111602 does not improve AUC. Reverting changes.
Training on augumented user 19455 36/50 current_auc = 1.0
User 19455 AUC after training: 1.0
User 19455 does not improve AUC. Reverting changes.
Training on augumented user 60185 37/50 current_auc = 1.0
User 60185 AUC after training: 1.0
User 60185 does not improve AUC. Reverting changes.
Training on augumented user 93665 38/50 current_auc = 1.0
User 93665 AUC after training: 1.0
User 93665 does not improve AUC. Reverting changes.
Training on augumented user 102779 39/50 current_auc = 1.0
User 102779 AUC after training: 1.0
User 102779 does not improve AUC. Reverting changes.
Training on augumented user 9054 40/50 current_auc = 1.0
User 9054 AUC after training: 1.0
User 9054 does not improve AUC. Reverting changes.
Training on augumented user 116872 41/50 current_auc = 1.0
User 116872 AUC after training: 1.0
User 116872 does not improve AUC. Reverting changes.
Training on augumented user 13058 42/50 current_auc = 1.0
User 13058 AUC after training: 1.0
User 13058 does not improve AUC. Reverting changes.
Training on augumented user 117488 43/50 current_auc = 1.0
User 117488 AUC after training: 1.0
User 117488 does not improve AUC. Reverting changes.
Training on augumented user 87188 44/50 current_auc = 1.0
User 87188 AUC after training: 1.0
User 87188 does not improve AUC. Reverting changes.
Training on augumented user 58660 45/50 current_auc = 1.0
User 58660 AUC after training: 1.0
User 58660 does not improve AUC. Reverting changes.
Training on augumented user 57661 46/50 current_auc = 1.0
User 57661 AUC after training: 1.0
User 57661 does not improve AUC. Reverting changes.
Training on augumented user 80560 47/50 current_auc = 1.0
User 80560 AUC after training: 1.0
User 80560 does not improve AUC. Reverting changes.
Training on augumented user 55739 48/50 current_auc = 1.0
User 55739 AUC after training: 1.0
User 55739 does not improve AUC. Reverting changes.
Training on augumented user 105571 49/50 current_auc = 1.0
User 105571 AUC after training: 1.0
User 105571 does not improve AUC. Reverting changes.
[2024-12-02 20:11:38.824298] start test user 116823 282/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:11:39.238970] start test user 116823 282/567 recall augumented users by random, augumented_users = [52656, 74695, 45141, 121023, 102910, 105771, 106628, 22871, 80289, 107217, 67820, 90905, 137606, 46092, 80217, 41182, 124928, 69626, 39131, 45935, 1743, 33953, 127542, 17900, 10075, 125163, 99211, 119849, 128322, 48211, 131159, 90134, 57397, 41854, 1986, 92882, 30007, 29265, 134164, 101174, 101344, 8525, 51408, 50046, 127223, 92024, 21480, 106533, 34107, 87665]
[2024-12-02 20:11:39.253543] user = 116823 Cloud 282/567
[2024-12-02 20:11:39.276631] user = 116823 Local 282/567
[2024-12-02 20:11:39.309084] user = 116823 Local+ 282/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:11:41.762805] user = 116823 MPDA- 282/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5625
Training on augumented user 52656 0/50 current_auc = 0.5625
User 52656 AUC after training: 0.5833333333333334
User 52656 improves AUC. Keeping the model.
Training on augumented user 74695 1/50 current_auc = 0.5833333333333334
User 74695 AUC after training: 0.5833333333333334
User 74695 does not improve AUC. Reverting changes.
Training on augumented user 45141 2/50 current_auc = 0.5833333333333334
User 45141 AUC after training: 0.5833333333333334
User 45141 does not improve AUC. Reverting changes.
Training on augumented user 121023 3/50 current_auc = 0.5833333333333334
User 121023 AUC after training: 0.5833333333333334
User 121023 does not improve AUC. Reverting changes.
Training on augumented user 102910 4/50 current_auc = 0.5833333333333334
User 102910 AUC after training: 0.5833333333333334
User 102910 does not improve AUC. Reverting changes.
Training on augumented user 105771 5/50 current_auc = 0.5833333333333334
User 105771 AUC after training: 0.5625
User 105771 does not improve AUC. Reverting changes.
Training on augumented user 106628 6/50 current_auc = 0.5833333333333334
User 106628 AUC after training: 0.5833333333333334
User 106628 does not improve AUC. Reverting changes.
Training on augumented user 22871 7/50 current_auc = 0.5833333333333334
User 22871 AUC after training: 0.5833333333333334
User 22871 does not improve AUC. Reverting changes.
Training on augumented user 80289 8/50 current_auc = 0.5833333333333334
User 80289 AUC after training: 0.5833333333333334
User 80289 does not improve AUC. Reverting changes.
Training on augumented user 107217 9/50 current_auc = 0.5833333333333334
User 107217 AUC after training: 0.5833333333333334
User 107217 does not improve AUC. Reverting changes.
Training on augumented user 67820 10/50 current_auc = 0.5833333333333334
User 67820 AUC after training: 0.5833333333333334
User 67820 does not improve AUC. Reverting changes.
Training on augumented user 90905 11/50 current_auc = 0.5833333333333334
User 90905 AUC after training: 0.5833333333333334
User 90905 does not improve AUC. Reverting changes.
Training on augumented user 137606 12/50 current_auc = 0.5833333333333334
User 137606 AUC after training: 0.5833333333333334
User 137606 does not improve AUC. Reverting changes.
Training on augumented user 46092 13/50 current_auc = 0.5833333333333334
User 46092 AUC after training: 0.5833333333333334
User 46092 does not improve AUC. Reverting changes.
Training on augumented user 80217 14/50 current_auc = 0.5833333333333334
User 80217 AUC after training: 0.5833333333333334
User 80217 does not improve AUC. Reverting changes.
Training on augumented user 41182 15/50 current_auc = 0.5833333333333334
User 41182 AUC after training: 0.5833333333333334
User 41182 does not improve AUC. Reverting changes.
Training on augumented user 124928 16/50 current_auc = 0.5833333333333334
User 124928 AUC after training: 0.5625
User 124928 does not improve AUC. Reverting changes.
Training on augumented user 69626 17/50 current_auc = 0.5833333333333334
User 69626 AUC after training: 0.5833333333333334
User 69626 does not improve AUC. Reverting changes.
Training on augumented user 39131 18/50 current_auc = 0.5833333333333334
User 39131 AUC after training: 0.5833333333333334
User 39131 does not improve AUC. Reverting changes.
Training on augumented user 45935 19/50 current_auc = 0.5833333333333334
User 45935 AUC after training: 0.5625
User 45935 does not improve AUC. Reverting changes.
Training on augumented user 1743 20/50 current_auc = 0.5833333333333334
User 1743 AUC after training: 0.5833333333333334
User 1743 does not improve AUC. Reverting changes.
Training on augumented user 33953 21/50 current_auc = 0.5833333333333334
User 33953 AUC after training: 0.5833333333333334
User 33953 does not improve AUC. Reverting changes.
Training on augumented user 127542 22/50 current_auc = 0.5833333333333334
User 127542 AUC after training: 0.5833333333333334
User 127542 does not improve AUC. Reverting changes.
Training on augumented user 17900 23/50 current_auc = 0.5833333333333334
User 17900 AUC after training: 0.5833333333333334
User 17900 does not improve AUC. Reverting changes.
Training on augumented user 10075 24/50 current_auc = 0.5833333333333334
User 10075 AUC after training: 0.5833333333333334
User 10075 does not improve AUC. Reverting changes.
Training on augumented user 125163 25/50 current_auc = 0.5833333333333334
User 125163 AUC after training: 0.5833333333333334
User 125163 does not improve AUC. Reverting changes.
Training on augumented user 99211 26/50 current_auc = 0.5833333333333334
User 99211 AUC after training: 0.5833333333333334
User 99211 does not improve AUC. Reverting changes.
Training on augumented user 119849 27/50 current_auc = 0.5833333333333334
User 119849 AUC after training: 0.5833333333333334
User 119849 does not improve AUC. Reverting changes.
Training on augumented user 128322 28/50 current_auc = 0.5833333333333334
User 128322 AUC after training: 0.5625
User 128322 does not improve AUC. Reverting changes.
Training on augumented user 48211 29/50 current_auc = 0.5833333333333334
User 48211 AUC after training: 0.5833333333333334
User 48211 does not improve AUC. Reverting changes.
Training on augumented user 131159 30/50 current_auc = 0.5833333333333334
User 131159 AUC after training: 0.5833333333333334
User 131159 does not improve AUC. Reverting changes.
Training on augumented user 90134 31/50 current_auc = 0.5833333333333334
User 90134 AUC after training: 0.5833333333333334
User 90134 does not improve AUC. Reverting changes.
Training on augumented user 57397 32/50 current_auc = 0.5833333333333334
User 57397 AUC after training: 0.5833333333333334
User 57397 does not improve AUC. Reverting changes.
Training on augumented user 41854 33/50 current_auc = 0.5833333333333334
User 41854 AUC after training: 0.5833333333333334
User 41854 does not improve AUC. Reverting changes.
Training on augumented user 1986 34/50 current_auc = 0.5833333333333334
User 1986 AUC after training: 0.5833333333333334
User 1986 does not improve AUC. Reverting changes.
Training on augumented user 92882 35/50 current_auc = 0.5833333333333334
User 92882 AUC after training: 0.5833333333333334
User 92882 does not improve AUC. Reverting changes.
Training on augumented user 30007 36/50 current_auc = 0.5833333333333334
User 30007 AUC after training: 0.5833333333333334
User 30007 does not improve AUC. Reverting changes.
Training on augumented user 29265 37/50 current_auc = 0.5833333333333334
User 29265 AUC after training: 0.5833333333333334
User 29265 does not improve AUC. Reverting changes.
Training on augumented user 134164 38/50 current_auc = 0.5833333333333334
User 134164 AUC after training: 0.5833333333333334
User 134164 does not improve AUC. Reverting changes.
Training on augumented user 101174 39/50 current_auc = 0.5833333333333334
User 101174 AUC after training: 0.5833333333333334
User 101174 does not improve AUC. Reverting changes.
Training on augumented user 101344 40/50 current_auc = 0.5833333333333334
User 101344 AUC after training: 0.5416666666666667
User 101344 does not improve AUC. Reverting changes.
Training on augumented user 8525 41/50 current_auc = 0.5833333333333334
User 8525 AUC after training: 0.5833333333333334
User 8525 does not improve AUC. Reverting changes.
Training on augumented user 51408 42/50 current_auc = 0.5833333333333334
User 51408 AUC after training: 0.5833333333333334
User 51408 does not improve AUC. Reverting changes.
Training on augumented user 50046 43/50 current_auc = 0.5833333333333334
User 50046 AUC after training: 0.5833333333333334
User 50046 does not improve AUC. Reverting changes.
Training on augumented user 127223 44/50 current_auc = 0.5833333333333334
User 127223 AUC after training: 0.5833333333333334
User 127223 does not improve AUC. Reverting changes.
Training on augumented user 92024 45/50 current_auc = 0.5833333333333334
User 92024 AUC after training: 0.5833333333333334
User 92024 does not improve AUC. Reverting changes.
Training on augumented user 21480 46/50 current_auc = 0.5833333333333334
User 21480 AUC after training: 0.5833333333333334
User 21480 does not improve AUC. Reverting changes.
Training on augumented user 106533 47/50 current_auc = 0.5833333333333334
User 106533 AUC after training: 0.5833333333333334
User 106533 does not improve AUC. Reverting changes.
Training on augumented user 34107 48/50 current_auc = 0.5833333333333334
User 34107 AUC after training: 0.5833333333333334
User 34107 does not improve AUC. Reverting changes.
Training on augumented user 87665 49/50 current_auc = 0.5833333333333334
User 87665 AUC after training: 0.5833333333333334
User 87665 does not improve AUC. Reverting changes.
[2024-12-02 20:12:14.224605] start test user 116869 283/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:12:14.652048] start test user 116869 283/567 recall augumented users by random, augumented_users = [21433, 111832, 111189, 34222, 92029, 130846, 7844, 24430, 53685, 119187, 65410, 23583, 68706, 90074, 36229, 104845, 116863, 60042, 52819, 66240, 40517, 123165, 47289, 32742, 71063, 138430, 70579, 54996, 35254, 92879, 41715, 37261, 74410, 113980, 92688, 136861, 70912, 5476, 31545, 5427, 69405, 61998, 13260, 42940, 103156, 111831, 38382, 84638, 8118, 65609]
[2024-12-02 20:12:14.666778] user = 116869 Cloud 283/567
[2024-12-02 20:12:14.683818] user = 116869 Local 283/567
[2024-12-02 20:12:14.738897] user = 116869 Local+ 283/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:12:16.858487] user = 116869 MPDA- 283/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6388888888888888
Training on augumented user 21433 0/50 current_auc = 0.6388888888888888
User 21433 AUC after training: 0.6481481481481481
User 21433 improves AUC. Keeping the model.
Training on augumented user 111832 1/50 current_auc = 0.6481481481481481
User 111832 AUC after training: 0.6481481481481481
User 111832 does not improve AUC. Reverting changes.
Training on augumented user 111189 2/50 current_auc = 0.6481481481481481
User 111189 AUC after training: 0.6412037037037037
User 111189 does not improve AUC. Reverting changes.
Training on augumented user 34222 3/50 current_auc = 0.6481481481481481
User 34222 AUC after training: 0.6481481481481481
User 34222 does not improve AUC. Reverting changes.
Training on augumented user 92029 4/50 current_auc = 0.6481481481481481
User 92029 AUC after training: 0.6481481481481481
User 92029 does not improve AUC. Reverting changes.
Training on augumented user 130846 5/50 current_auc = 0.6481481481481481
User 130846 AUC after training: 0.650462962962963
User 130846 improves AUC. Keeping the model.
Training on augumented user 7844 6/50 current_auc = 0.650462962962963
User 7844 AUC after training: 0.6481481481481481
User 7844 does not improve AUC. Reverting changes.
Training on augumented user 24430 7/50 current_auc = 0.650462962962963
User 24430 AUC after training: 0.6481481481481481
User 24430 does not improve AUC. Reverting changes.
Training on augumented user 53685 8/50 current_auc = 0.650462962962963
User 53685 AUC after training: 0.650462962962963
User 53685 does not improve AUC. Reverting changes.
Training on augumented user 119187 9/50 current_auc = 0.650462962962963
User 119187 AUC after training: 0.6527777777777779
User 119187 improves AUC. Keeping the model.
Training on augumented user 65410 10/50 current_auc = 0.6527777777777779
User 65410 AUC after training: 0.6527777777777779
User 65410 does not improve AUC. Reverting changes.
Training on augumented user 23583 11/50 current_auc = 0.6527777777777779
User 23583 AUC after training: 0.6481481481481481
User 23583 does not improve AUC. Reverting changes.
Training on augumented user 68706 12/50 current_auc = 0.6527777777777779
User 68706 AUC after training: 0.6481481481481481
User 68706 does not improve AUC. Reverting changes.
Training on augumented user 90074 13/50 current_auc = 0.6527777777777779
User 90074 AUC after training: 0.6527777777777779
User 90074 does not improve AUC. Reverting changes.
Training on augumented user 36229 14/50 current_auc = 0.6527777777777779
User 36229 AUC after training: 0.650462962962963
User 36229 does not improve AUC. Reverting changes.
Training on augumented user 104845 15/50 current_auc = 0.6527777777777779
User 104845 AUC after training: 0.6527777777777778
User 104845 does not improve AUC. Reverting changes.
Training on augumented user 116863 16/50 current_auc = 0.6527777777777779
User 116863 AUC after training: 0.6527777777777778
User 116863 does not improve AUC. Reverting changes.
Training on augumented user 60042 17/50 current_auc = 0.6527777777777779
User 60042 AUC after training: 0.650462962962963
User 60042 does not improve AUC. Reverting changes.
Training on augumented user 52819 18/50 current_auc = 0.6527777777777779
User 52819 AUC after training: 0.650462962962963
User 52819 does not improve AUC. Reverting changes.
Training on augumented user 66240 19/50 current_auc = 0.6527777777777779
User 66240 AUC after training: 0.650462962962963
User 66240 does not improve AUC. Reverting changes.
Training on augumented user 40517 20/50 current_auc = 0.6527777777777779
User 40517 AUC after training: 0.650462962962963
User 40517 does not improve AUC. Reverting changes.
Training on augumented user 123165 21/50 current_auc = 0.6527777777777779
User 123165 AUC after training: 0.6550925925925926
User 123165 improves AUC. Keeping the model.
Training on augumented user 47289 22/50 current_auc = 0.6550925925925926
User 47289 AUC after training: 0.6458333333333333
User 47289 does not improve AUC. Reverting changes.
Training on augumented user 32742 23/50 current_auc = 0.6550925925925926
User 32742 AUC after training: 0.6481481481481481
User 32742 does not improve AUC. Reverting changes.
Training on augumented user 71063 24/50 current_auc = 0.6550925925925926
User 71063 AUC after training: 0.650462962962963
User 71063 does not improve AUC. Reverting changes.
Training on augumented user 138430 25/50 current_auc = 0.6550925925925926
User 138430 AUC after training: 0.650462962962963
User 138430 does not improve AUC. Reverting changes.
Training on augumented user 70579 26/50 current_auc = 0.6550925925925926
User 70579 AUC after training: 0.6527777777777779
User 70579 does not improve AUC. Reverting changes.
Training on augumented user 54996 27/50 current_auc = 0.6550925925925926
User 54996 AUC after training: 0.6597222222222223
User 54996 improves AUC. Keeping the model.
Training on augumented user 35254 28/50 current_auc = 0.6597222222222223
User 35254 AUC after training: 0.6689814814814816
User 35254 improves AUC. Keeping the model.
Training on augumented user 92879 29/50 current_auc = 0.6689814814814816
User 92879 AUC after training: 0.6643518518518519
User 92879 does not improve AUC. Reverting changes.
Training on augumented user 41715 30/50 current_auc = 0.6689814814814816
User 41715 AUC after training: 0.6689814814814816
User 41715 does not improve AUC. Reverting changes.
Training on augumented user 37261 31/50 current_auc = 0.6689814814814816
User 37261 AUC after training: 0.6643518518518519
User 37261 does not improve AUC. Reverting changes.
Training on augumented user 74410 32/50 current_auc = 0.6689814814814816
User 74410 AUC after training: 0.6620370370370371
User 74410 does not improve AUC. Reverting changes.
Training on augumented user 113980 33/50 current_auc = 0.6689814814814816
User 113980 AUC after training: 0.6643518518518519
User 113980 does not improve AUC. Reverting changes.
Training on augumented user 92688 34/50 current_auc = 0.6689814814814816
User 92688 AUC after training: 0.6689814814814816
User 92688 does not improve AUC. Reverting changes.
Training on augumented user 136861 35/50 current_auc = 0.6689814814814816
User 136861 AUC after training: 0.6666666666666667
User 136861 does not improve AUC. Reverting changes.
Training on augumented user 70912 36/50 current_auc = 0.6689814814814816
User 70912 AUC after training: 0.6643518518518519
User 70912 does not improve AUC. Reverting changes.
Training on augumented user 5476 37/50 current_auc = 0.6689814814814816
User 5476 AUC after training: 0.6643518518518519
User 5476 does not improve AUC. Reverting changes.
Training on augumented user 31545 38/50 current_auc = 0.6689814814814816
User 31545 AUC after training: 0.662037037037037
User 31545 does not improve AUC. Reverting changes.
Training on augumented user 5427 39/50 current_auc = 0.6689814814814816
User 5427 AUC after training: 0.6643518518518519
User 5427 does not improve AUC. Reverting changes.
Training on augumented user 69405 40/50 current_auc = 0.6689814814814816
User 69405 AUC after training: 0.6689814814814816
User 69405 does not improve AUC. Reverting changes.
Training on augumented user 61998 41/50 current_auc = 0.6689814814814816
User 61998 AUC after training: 0.6643518518518519
User 61998 does not improve AUC. Reverting changes.
Training on augumented user 13260 42/50 current_auc = 0.6689814814814816
User 13260 AUC after training: 0.6620370370370371
User 13260 does not improve AUC. Reverting changes.
Training on augumented user 42940 43/50 current_auc = 0.6689814814814816
User 42940 AUC after training: 0.6666666666666667
User 42940 does not improve AUC. Reverting changes.
Training on augumented user 103156 44/50 current_auc = 0.6689814814814816
User 103156 AUC after training: 0.6666666666666667
User 103156 does not improve AUC. Reverting changes.
Training on augumented user 111831 45/50 current_auc = 0.6689814814814816
User 111831 AUC after training: 0.6689814814814816
User 111831 does not improve AUC. Reverting changes.
Training on augumented user 38382 46/50 current_auc = 0.6689814814814816
User 38382 AUC after training: 0.6643518518518519
User 38382 does not improve AUC. Reverting changes.
Training on augumented user 84638 47/50 current_auc = 0.6689814814814816
User 84638 AUC after training: 0.6689814814814816
User 84638 does not improve AUC. Reverting changes.
Training on augumented user 8118 48/50 current_auc = 0.6689814814814816
User 8118 AUC after training: 0.6689814814814816
User 8118 does not improve AUC. Reverting changes.
Training on augumented user 65609 49/50 current_auc = 0.6689814814814816
User 65609 AUC after training: 0.6689814814814816
User 65609 does not improve AUC. Reverting changes.
[2024-12-02 20:12:49.413309] start test user 116935 284/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:12:49.952229] start test user 116935 284/567 recall augumented users by random, augumented_users = [53564, 37808, 134877, 8464, 96585, 93740, 134717, 97304, 92109, 52740, 77583, 114147, 122797, 20699, 31925, 122708, 17066, 98050, 82262, 114486, 53603, 84941, 107396, 132474, 76430, 44704, 26636, 37817, 98939, 85089, 16837, 135143, 120189, 119375, 72287, 73413, 80382, 120606, 61704, 112353, 2043, 92767, 60014, 136676, 66717, 115715, 15821, 120592, 48430, 84895]
[2024-12-02 20:12:49.980225] user = 116935 Cloud 284/567
[2024-12-02 20:12:50.004768] user = 116935 Local 284/567
[2024-12-02 20:12:50.061271] user = 116935 Local+ 284/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:12:51.303251] user = 116935 MPDA- 284/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.48651399491094144
Training on augumented user 53564 0/50 current_auc = 0.48651399491094144
User 53564 AUC after training: 0.4854961832061068
User 53564 does not improve AUC. Reverting changes.
Training on augumented user 37808 1/50 current_auc = 0.48651399491094144
User 37808 AUC after training: 0.4839694656488549
User 37808 does not improve AUC. Reverting changes.
Training on augumented user 134877 2/50 current_auc = 0.48651399491094144
User 134877 AUC after training: 0.4865139949109415
User 134877 improves AUC. Keeping the model.
Training on augumented user 8464 3/50 current_auc = 0.4865139949109415
User 8464 AUC after training: 0.48854961832061067
User 8464 improves AUC. Keeping the model.
Training on augumented user 96585 4/50 current_auc = 0.48854961832061067
User 96585 AUC after training: 0.48854961832061067
User 96585 does not improve AUC. Reverting changes.
Training on augumented user 93740 5/50 current_auc = 0.48854961832061067
User 93740 AUC after training: 0.48600508905852413
User 93740 does not improve AUC. Reverting changes.
Training on augumented user 134717 6/50 current_auc = 0.48854961832061067
User 134717 AUC after training: 0.48854961832061067
User 134717 does not improve AUC. Reverting changes.
Training on augumented user 97304 7/50 current_auc = 0.48854961832061067
User 97304 AUC after training: 0.4839694656488549
User 97304 does not improve AUC. Reverting changes.
Training on augumented user 92109 8/50 current_auc = 0.48854961832061067
User 92109 AUC after training: 0.4865139949109415
User 92109 does not improve AUC. Reverting changes.
Training on augumented user 52740 9/50 current_auc = 0.48854961832061067
User 52740 AUC after training: 0.48804071246819336
User 52740 does not improve AUC. Reverting changes.
Training on augumented user 77583 10/50 current_auc = 0.48854961832061067
User 77583 AUC after training: 0.48702290076335875
User 77583 does not improve AUC. Reverting changes.
Training on augumented user 114147 11/50 current_auc = 0.48854961832061067
User 114147 AUC after training: 0.48753180661577605
User 114147 does not improve AUC. Reverting changes.
Training on augumented user 122797 12/50 current_auc = 0.48854961832061067
User 122797 AUC after training: 0.4849872773536895
User 122797 does not improve AUC. Reverting changes.
Training on augumented user 20699 13/50 current_auc = 0.48854961832061067
User 20699 AUC after training: 0.4875318066157761
User 20699 does not improve AUC. Reverting changes.
Training on augumented user 31925 14/50 current_auc = 0.48854961832061067
User 31925 AUC after training: 0.48804071246819336
User 31925 does not improve AUC. Reverting changes.
Training on augumented user 122708 15/50 current_auc = 0.48854961832061067
User 122708 AUC after training: 0.48804071246819336
User 122708 does not improve AUC. Reverting changes.
Training on augumented user 17066 16/50 current_auc = 0.48854961832061067
User 17066 AUC after training: 0.489058524173028
User 17066 improves AUC. Keeping the model.
Training on augumented user 98050 17/50 current_auc = 0.489058524173028
User 98050 AUC after training: 0.48854961832061067
User 98050 does not improve AUC. Reverting changes.
Training on augumented user 82262 18/50 current_auc = 0.489058524173028
User 82262 AUC after training: 0.4844783715012722
User 82262 does not improve AUC. Reverting changes.
Training on augumented user 114486 19/50 current_auc = 0.489058524173028
User 114486 AUC after training: 0.4921119592875318
User 114486 improves AUC. Keeping the model.
Training on augumented user 53603 20/50 current_auc = 0.4921119592875318
User 53603 AUC after training: 0.4900763358778626
User 53603 does not improve AUC. Reverting changes.
Training on augumented user 84941 21/50 current_auc = 0.4921119592875318
User 84941 AUC after training: 0.4895674300254453
User 84941 does not improve AUC. Reverting changes.
Training on augumented user 107396 22/50 current_auc = 0.4921119592875318
User 107396 AUC after training: 0.4905852417302799
User 107396 does not improve AUC. Reverting changes.
Training on augumented user 132474 23/50 current_auc = 0.4921119592875318
User 132474 AUC after training: 0.4936386768447837
User 132474 improves AUC. Keeping the model.
Training on augumented user 76430 24/50 current_auc = 0.4936386768447837
User 76430 AUC after training: 0.4936386768447837
User 76430 does not improve AUC. Reverting changes.
Training on augumented user 44704 25/50 current_auc = 0.4936386768447837
User 44704 AUC after training: 0.4890585241730279
User 44704 does not improve AUC. Reverting changes.
Training on augumented user 26636 26/50 current_auc = 0.4936386768447837
User 26636 AUC after training: 0.4936386768447837
User 26636 does not improve AUC. Reverting changes.
Training on augumented user 37817 27/50 current_auc = 0.4936386768447837
User 37817 AUC after training: 0.4916030534351145
User 37817 does not improve AUC. Reverting changes.
Training on augumented user 98939 28/50 current_auc = 0.4936386768447837
User 98939 AUC after training: 0.49160305343511446
User 98939 does not improve AUC. Reverting changes.
Training on augumented user 85089 29/50 current_auc = 0.4936386768447837
User 85089 AUC after training: 0.4921119592875318
User 85089 does not improve AUC. Reverting changes.
Training on augumented user 16837 30/50 current_auc = 0.4936386768447837
User 16837 AUC after training: 0.49262086513994907
User 16837 does not improve AUC. Reverting changes.
Training on augumented user 135143 31/50 current_auc = 0.4936386768447837
User 135143 AUC after training: 0.49312977099236643
User 135143 does not improve AUC. Reverting changes.
Training on augumented user 120189 32/50 current_auc = 0.4936386768447837
User 120189 AUC after training: 0.4905852417302799
User 120189 does not improve AUC. Reverting changes.
Training on augumented user 119375 33/50 current_auc = 0.4936386768447837
User 119375 AUC after training: 0.49262086513994907
User 119375 does not improve AUC. Reverting changes.
Training on augumented user 72287 34/50 current_auc = 0.4936386768447837
User 72287 AUC after training: 0.4921119592875318
User 72287 does not improve AUC. Reverting changes.
Training on augumented user 73413 35/50 current_auc = 0.4936386768447837
User 73413 AUC after training: 0.4916030534351145
User 73413 does not improve AUC. Reverting changes.
Training on augumented user 80382 36/50 current_auc = 0.4936386768447837
User 80382 AUC after training: 0.4916030534351145
User 80382 does not improve AUC. Reverting changes.
Training on augumented user 120606 37/50 current_auc = 0.4936386768447837
User 120606 AUC after training: 0.49312977099236643
User 120606 does not improve AUC. Reverting changes.
Training on augumented user 61704 38/50 current_auc = 0.4936386768447837
User 61704 AUC after training: 0.49211195928753176
User 61704 does not improve AUC. Reverting changes.
Training on augumented user 112353 39/50 current_auc = 0.4936386768447837
User 112353 AUC after training: 0.4926208651399491
User 112353 does not improve AUC. Reverting changes.
Training on augumented user 2043 40/50 current_auc = 0.4936386768447837
User 2043 AUC after training: 0.4900763358778626
User 2043 does not improve AUC. Reverting changes.
Training on augumented user 92767 41/50 current_auc = 0.4936386768447837
User 92767 AUC after training: 0.4910941475826972
User 92767 does not improve AUC. Reverting changes.
Training on augumented user 60014 42/50 current_auc = 0.4936386768447837
User 60014 AUC after training: 0.49312977099236643
User 60014 does not improve AUC. Reverting changes.
Training on augumented user 136676 43/50 current_auc = 0.4936386768447837
User 136676 AUC after training: 0.4931297709923664
User 136676 does not improve AUC. Reverting changes.
Training on augumented user 66717 44/50 current_auc = 0.4936386768447837
User 66717 AUC after training: 0.49262086513994907
User 66717 does not improve AUC. Reverting changes.
Training on augumented user 115715 45/50 current_auc = 0.4936386768447837
User 115715 AUC after training: 0.49262086513994907
User 115715 does not improve AUC. Reverting changes.
Training on augumented user 15821 46/50 current_auc = 0.4936386768447837
User 15821 AUC after training: 0.4931297709923664
User 15821 does not improve AUC. Reverting changes.
Training on augumented user 120592 47/50 current_auc = 0.4936386768447837
User 120592 AUC after training: 0.4936386768447837
User 120592 does not improve AUC. Reverting changes.
Training on augumented user 48430 48/50 current_auc = 0.4936386768447837
User 48430 AUC after training: 0.4910941475826972
User 48430 does not improve AUC. Reverting changes.
Training on augumented user 84895 49/50 current_auc = 0.4936386768447837
User 84895 AUC after training: 0.48854961832061067
User 84895 does not improve AUC. Reverting changes.
[2024-12-02 20:13:15.956501] start test user 116936 285/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:13:16.840149] start test user 116936 285/567 recall augumented users by random, augumented_users = [133328, 103463, 89651, 71616, 49178, 95043, 14372, 40603, 43582, 30941, 120198, 36068, 113545, 17971, 89852, 117895, 81406, 16482, 103587, 124210, 29286, 29686, 23254, 11140, 52653, 108230, 103942, 106109, 78965, 47385, 52727, 35440, 121968, 11229, 20278, 13068, 118000, 1119, 97429, 44867, 69290, 60741, 17666, 74228, 69524, 69489, 69933, 126161, 118297, 47696]
[2024-12-02 20:13:16.857611] user = 116936 Cloud 285/567
[2024-12-02 20:13:16.868131] user = 116936 Local 285/567
[2024-12-02 20:13:16.914468] user = 116936 Local+ 285/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:13:19.424882] user = 116936 MPDA- 285/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5555555555555556
Training on augumented user 133328 0/50 current_auc = 0.5555555555555556
User 133328 AUC after training: 0.5555555555555556
User 133328 does not improve AUC. Reverting changes.
Training on augumented user 103463 1/50 current_auc = 0.5555555555555556
User 103463 AUC after training: 0.5555555555555556
User 103463 does not improve AUC. Reverting changes.
Training on augumented user 89651 2/50 current_auc = 0.5555555555555556
User 89651 AUC after training: 0.5555555555555556
User 89651 does not improve AUC. Reverting changes.
Training on augumented user 71616 3/50 current_auc = 0.5555555555555556
User 71616 AUC after training: 0.5555555555555556
User 71616 does not improve AUC. Reverting changes.
Training on augumented user 49178 4/50 current_auc = 0.5555555555555556
User 49178 AUC after training: 0.5555555555555556
User 49178 does not improve AUC. Reverting changes.
Training on augumented user 95043 5/50 current_auc = 0.5555555555555556
User 95043 AUC after training: 0.5555555555555556
User 95043 does not improve AUC. Reverting changes.
Training on augumented user 14372 6/50 current_auc = 0.5555555555555556
User 14372 AUC after training: 0.5555555555555556
User 14372 does not improve AUC. Reverting changes.
Training on augumented user 40603 7/50 current_auc = 0.5555555555555556
User 40603 AUC after training: 0.5555555555555556
User 40603 does not improve AUC. Reverting changes.
Training on augumented user 43582 8/50 current_auc = 0.5555555555555556
User 43582 AUC after training: 0.5555555555555556
User 43582 does not improve AUC. Reverting changes.
Training on augumented user 30941 9/50 current_auc = 0.5555555555555556
User 30941 AUC after training: 0.5555555555555556
User 30941 does not improve AUC. Reverting changes.
Training on augumented user 120198 10/50 current_auc = 0.5555555555555556
User 120198 AUC after training: 0.5555555555555556
User 120198 does not improve AUC. Reverting changes.
Training on augumented user 36068 11/50 current_auc = 0.5555555555555556
User 36068 AUC after training: 0.5555555555555556
User 36068 does not improve AUC. Reverting changes.
Training on augumented user 113545 12/50 current_auc = 0.5555555555555556
User 113545 AUC after training: 0.5555555555555556
User 113545 does not improve AUC. Reverting changes.
Training on augumented user 17971 13/50 current_auc = 0.5555555555555556
User 17971 AUC after training: 0.5555555555555556
User 17971 does not improve AUC. Reverting changes.
Training on augumented user 89852 14/50 current_auc = 0.5555555555555556
User 89852 AUC after training: 0.5555555555555556
User 89852 does not improve AUC. Reverting changes.
Training on augumented user 117895 15/50 current_auc = 0.5555555555555556
User 117895 AUC after training: 0.5555555555555556
User 117895 does not improve AUC. Reverting changes.
Training on augumented user 81406 16/50 current_auc = 0.5555555555555556
User 81406 AUC after training: 0.5555555555555556
User 81406 does not improve AUC. Reverting changes.
Training on augumented user 16482 17/50 current_auc = 0.5555555555555556
User 16482 AUC after training: 0.5555555555555556
User 16482 does not improve AUC. Reverting changes.
Training on augumented user 103587 18/50 current_auc = 0.5555555555555556
User 103587 AUC after training: 0.5555555555555556
User 103587 does not improve AUC. Reverting changes.
Training on augumented user 124210 19/50 current_auc = 0.5555555555555556
User 124210 AUC after training: 0.5555555555555556
User 124210 does not improve AUC. Reverting changes.
Training on augumented user 29286 20/50 current_auc = 0.5555555555555556
User 29286 AUC after training: 0.5555555555555556
User 29286 does not improve AUC. Reverting changes.
Training on augumented user 29686 21/50 current_auc = 0.5555555555555556
User 29686 AUC after training: 0.5555555555555556
User 29686 does not improve AUC. Reverting changes.
Training on augumented user 23254 22/50 current_auc = 0.5555555555555556
User 23254 AUC after training: 0.5555555555555556
User 23254 does not improve AUC. Reverting changes.
Training on augumented user 11140 23/50 current_auc = 0.5555555555555556
User 11140 AUC after training: 0.5555555555555556
User 11140 does not improve AUC. Reverting changes.
Training on augumented user 52653 24/50 current_auc = 0.5555555555555556
User 52653 AUC after training: 0.5555555555555556
User 52653 does not improve AUC. Reverting changes.
Training on augumented user 108230 25/50 current_auc = 0.5555555555555556
User 108230 AUC after training: 0.5555555555555556
User 108230 does not improve AUC. Reverting changes.
Training on augumented user 103942 26/50 current_auc = 0.5555555555555556
User 103942 AUC after training: 0.5555555555555556
User 103942 does not improve AUC. Reverting changes.
Training on augumented user 106109 27/50 current_auc = 0.5555555555555556
User 106109 AUC after training: 0.5555555555555556
User 106109 does not improve AUC. Reverting changes.
Training on augumented user 78965 28/50 current_auc = 0.5555555555555556
User 78965 AUC after training: 0.5555555555555556
User 78965 does not improve AUC. Reverting changes.
Training on augumented user 47385 29/50 current_auc = 0.5555555555555556
User 47385 AUC after training: 0.5555555555555556
User 47385 does not improve AUC. Reverting changes.
Training on augumented user 52727 30/50 current_auc = 0.5555555555555556
User 52727 AUC after training: 0.5555555555555556
User 52727 does not improve AUC. Reverting changes.
Training on augumented user 35440 31/50 current_auc = 0.5555555555555556
User 35440 AUC after training: 0.5555555555555556
User 35440 does not improve AUC. Reverting changes.
Training on augumented user 121968 32/50 current_auc = 0.5555555555555556
User 121968 AUC after training: 0.6111111111111112
User 121968 improves AUC. Keeping the model.
Training on augumented user 11229 33/50 current_auc = 0.6111111111111112
User 11229 AUC after training: 0.6111111111111112
User 11229 does not improve AUC. Reverting changes.
Training on augumented user 20278 34/50 current_auc = 0.6111111111111112
User 20278 AUC after training: 0.5555555555555556
User 20278 does not improve AUC. Reverting changes.
Training on augumented user 13068 35/50 current_auc = 0.6111111111111112
User 13068 AUC after training: 0.5555555555555556
User 13068 does not improve AUC. Reverting changes.
Training on augumented user 118000 36/50 current_auc = 0.6111111111111112
User 118000 AUC after training: 0.6111111111111112
User 118000 does not improve AUC. Reverting changes.
Training on augumented user 1119 37/50 current_auc = 0.6111111111111112
User 1119 AUC after training: 0.5555555555555556
User 1119 does not improve AUC. Reverting changes.
Training on augumented user 97429 38/50 current_auc = 0.6111111111111112
User 97429 AUC after training: 0.6111111111111112
User 97429 does not improve AUC. Reverting changes.
Training on augumented user 44867 39/50 current_auc = 0.6111111111111112
User 44867 AUC after training: 0.6111111111111112
User 44867 does not improve AUC. Reverting changes.
Training on augumented user 69290 40/50 current_auc = 0.6111111111111112
User 69290 AUC after training: 0.5555555555555556
User 69290 does not improve AUC. Reverting changes.
Training on augumented user 60741 41/50 current_auc = 0.6111111111111112
User 60741 AUC after training: 0.6111111111111112
User 60741 does not improve AUC. Reverting changes.
Training on augumented user 17666 42/50 current_auc = 0.6111111111111112
User 17666 AUC after training: 0.5555555555555556
User 17666 does not improve AUC. Reverting changes.
Training on augumented user 74228 43/50 current_auc = 0.6111111111111112
User 74228 AUC after training: 0.5555555555555556
User 74228 does not improve AUC. Reverting changes.
Training on augumented user 69524 44/50 current_auc = 0.6111111111111112
User 69524 AUC after training: 0.6111111111111112
User 69524 does not improve AUC. Reverting changes.
Training on augumented user 69489 45/50 current_auc = 0.6111111111111112
User 69489 AUC after training: 0.6111111111111112
User 69489 does not improve AUC. Reverting changes.
Training on augumented user 69933 46/50 current_auc = 0.6111111111111112
User 69933 AUC after training: 0.6111111111111112
User 69933 does not improve AUC. Reverting changes.
Training on augumented user 126161 47/50 current_auc = 0.6111111111111112
User 126161 AUC after training: 0.6111111111111112
User 126161 does not improve AUC. Reverting changes.
Training on augumented user 118297 48/50 current_auc = 0.6111111111111112
User 118297 AUC after training: 0.6111111111111112
User 118297 does not improve AUC. Reverting changes.
Training on augumented user 47696 49/50 current_auc = 0.6111111111111112
User 47696 AUC after training: 0.6111111111111112
User 47696 does not improve AUC. Reverting changes.
[2024-12-02 20:13:52.042965] start test user 116951 286/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:13:52.852320] start test user 116951 286/567 recall augumented users by random, augumented_users = [39770, 99938, 113832, 46985, 130633, 21739, 42119, 127340, 100070, 125140, 118111, 125077, 26413, 25704, 49043, 94536, 48484, 3719, 25779, 48004, 128310, 11937, 54138, 138001, 94971, 104220, 65788, 132279, 57163, 65674, 1688, 76102, 79999, 109548, 38764, 86207, 63452, 80349, 106438, 125896, 65316, 121042, 135075, 7806, 130542, 41962, 109729, 52012, 102614, 97530]
[2024-12-02 20:13:52.869829] user = 116951 Cloud 286/567
[2024-12-02 20:13:52.888829] user = 116951 Local 286/567
[2024-12-02 20:13:52.916399] user = 116951 Local+ 286/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:13:55.723763] user = 116951 MPDA- 286/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4545454545454546
Training on augumented user 39770 0/50 current_auc = 0.4545454545454546
User 39770 AUC after training: 0.4415584415584416
User 39770 does not improve AUC. Reverting changes.
Training on augumented user 99938 1/50 current_auc = 0.4545454545454546
User 99938 AUC after training: 0.4545454545454546
User 99938 does not improve AUC. Reverting changes.
Training on augumented user 113832 2/50 current_auc = 0.4545454545454546
User 113832 AUC after training: 0.4415584415584416
User 113832 does not improve AUC. Reverting changes.
Training on augumented user 46985 3/50 current_auc = 0.4545454545454546
User 46985 AUC after training: 0.4415584415584416
User 46985 does not improve AUC. Reverting changes.
Training on augumented user 130633 4/50 current_auc = 0.4545454545454546
User 130633 AUC after training: 0.4545454545454546
User 130633 does not improve AUC. Reverting changes.
Training on augumented user 21739 5/50 current_auc = 0.4545454545454546
User 21739 AUC after training: 0.4415584415584416
User 21739 does not improve AUC. Reverting changes.
Training on augumented user 42119 6/50 current_auc = 0.4545454545454546
User 42119 AUC after training: 0.4545454545454546
User 42119 does not improve AUC. Reverting changes.
Training on augumented user 127340 7/50 current_auc = 0.4545454545454546
User 127340 AUC after training: 0.4545454545454546
User 127340 does not improve AUC. Reverting changes.
Training on augumented user 100070 8/50 current_auc = 0.4545454545454546
User 100070 AUC after training: 0.4545454545454546
User 100070 does not improve AUC. Reverting changes.
Training on augumented user 125140 9/50 current_auc = 0.4545454545454546
User 125140 AUC after training: 0.4545454545454546
User 125140 does not improve AUC. Reverting changes.
Training on augumented user 118111 10/50 current_auc = 0.4545454545454546
User 118111 AUC after training: 0.4545454545454546
User 118111 does not improve AUC. Reverting changes.
Training on augumented user 125077 11/50 current_auc = 0.4545454545454546
User 125077 AUC after training: 0.4545454545454546
User 125077 does not improve AUC. Reverting changes.
Training on augumented user 26413 12/50 current_auc = 0.4545454545454546
User 26413 AUC after training: 0.4545454545454546
User 26413 does not improve AUC. Reverting changes.
Training on augumented user 25704 13/50 current_auc = 0.4545454545454546
User 25704 AUC after training: 0.4415584415584416
User 25704 does not improve AUC. Reverting changes.
Training on augumented user 49043 14/50 current_auc = 0.4545454545454546
User 49043 AUC after training: 0.4415584415584416
User 49043 does not improve AUC. Reverting changes.
Training on augumented user 94536 15/50 current_auc = 0.4545454545454546
User 94536 AUC after training: 0.4545454545454546
User 94536 does not improve AUC. Reverting changes.
Training on augumented user 48484 16/50 current_auc = 0.4545454545454546
User 48484 AUC after training: 0.4545454545454546
User 48484 does not improve AUC. Reverting changes.
Training on augumented user 3719 17/50 current_auc = 0.4545454545454546
User 3719 AUC after training: 0.45454545454545453
User 3719 does not improve AUC. Reverting changes.
Training on augumented user 25779 18/50 current_auc = 0.4545454545454546
User 25779 AUC after training: 0.4545454545454546
User 25779 does not improve AUC. Reverting changes.
Training on augumented user 48004 19/50 current_auc = 0.4545454545454546
User 48004 AUC after training: 0.4415584415584416
User 48004 does not improve AUC. Reverting changes.
Training on augumented user 128310 20/50 current_auc = 0.4545454545454546
User 128310 AUC after training: 0.4675324675324675
User 128310 improves AUC. Keeping the model.
Training on augumented user 11937 21/50 current_auc = 0.4675324675324675
User 11937 AUC after training: 0.4675324675324675
User 11937 does not improve AUC. Reverting changes.
Training on augumented user 54138 22/50 current_auc = 0.4675324675324675
User 54138 AUC after training: 0.45454545454545453
User 54138 does not improve AUC. Reverting changes.
Training on augumented user 138001 23/50 current_auc = 0.4675324675324675
User 138001 AUC after training: 0.45454545454545453
User 138001 does not improve AUC. Reverting changes.
Training on augumented user 94971 24/50 current_auc = 0.4675324675324675
User 94971 AUC after training: 0.4675324675324675
User 94971 does not improve AUC. Reverting changes.
Training on augumented user 104220 25/50 current_auc = 0.4675324675324675
User 104220 AUC after training: 0.45454545454545453
User 104220 does not improve AUC. Reverting changes.
Training on augumented user 65788 26/50 current_auc = 0.4675324675324675
User 65788 AUC after training: 0.4415584415584416
User 65788 does not improve AUC. Reverting changes.
Training on augumented user 132279 27/50 current_auc = 0.4675324675324675
User 132279 AUC after training: 0.4675324675324675
User 132279 does not improve AUC. Reverting changes.
Training on augumented user 57163 28/50 current_auc = 0.4675324675324675
User 57163 AUC after training: 0.4675324675324675
User 57163 does not improve AUC. Reverting changes.
Training on augumented user 65674 29/50 current_auc = 0.4675324675324675
User 65674 AUC after training: 0.4675324675324675
User 65674 does not improve AUC. Reverting changes.
Training on augumented user 1688 30/50 current_auc = 0.4675324675324675
User 1688 AUC after training: 0.4675324675324675
User 1688 does not improve AUC. Reverting changes.
Training on augumented user 76102 31/50 current_auc = 0.4675324675324675
User 76102 AUC after training: 0.4675324675324675
User 76102 does not improve AUC. Reverting changes.
Training on augumented user 79999 32/50 current_auc = 0.4675324675324675
User 79999 AUC after training: 0.4675324675324675
User 79999 does not improve AUC. Reverting changes.
Training on augumented user 109548 33/50 current_auc = 0.4675324675324675
User 109548 AUC after training: 0.4675324675324675
User 109548 does not improve AUC. Reverting changes.
Training on augumented user 38764 34/50 current_auc = 0.4675324675324675
User 38764 AUC after training: 0.4675324675324675
User 38764 does not improve AUC. Reverting changes.
Training on augumented user 86207 35/50 current_auc = 0.4675324675324675
User 86207 AUC after training: 0.4675324675324675
User 86207 does not improve AUC. Reverting changes.
Training on augumented user 63452 36/50 current_auc = 0.4675324675324675
User 63452 AUC after training: 0.4675324675324675
User 63452 does not improve AUC. Reverting changes.
Training on augumented user 80349 37/50 current_auc = 0.4675324675324675
User 80349 AUC after training: 0.45454545454545453
User 80349 does not improve AUC. Reverting changes.
Training on augumented user 106438 38/50 current_auc = 0.4675324675324675
User 106438 AUC after training: 0.45454545454545453
User 106438 does not improve AUC. Reverting changes.
Training on augumented user 125896 39/50 current_auc = 0.4675324675324675
User 125896 AUC after training: 0.4285714285714286
User 125896 does not improve AUC. Reverting changes.
Training on augumented user 65316 40/50 current_auc = 0.4675324675324675
User 65316 AUC after training: 0.45454545454545453
User 65316 does not improve AUC. Reverting changes.
Training on augumented user 121042 41/50 current_auc = 0.4675324675324675
User 121042 AUC after training: 0.4675324675324675
User 121042 does not improve AUC. Reverting changes.
Training on augumented user 135075 42/50 current_auc = 0.4675324675324675
User 135075 AUC after training: 0.4675324675324675
User 135075 does not improve AUC. Reverting changes.
Training on augumented user 7806 43/50 current_auc = 0.4675324675324675
User 7806 AUC after training: 0.45454545454545453
User 7806 does not improve AUC. Reverting changes.
Training on augumented user 130542 44/50 current_auc = 0.4675324675324675
User 130542 AUC after training: 0.4675324675324675
User 130542 does not improve AUC. Reverting changes.
Training on augumented user 41962 45/50 current_auc = 0.4675324675324675
User 41962 AUC after training: 0.4675324675324675
User 41962 does not improve AUC. Reverting changes.
Training on augumented user 109729 46/50 current_auc = 0.4675324675324675
User 109729 AUC after training: 0.45454545454545453
User 109729 does not improve AUC. Reverting changes.
Training on augumented user 52012 47/50 current_auc = 0.4675324675324675
User 52012 AUC after training: 0.4675324675324675
User 52012 does not improve AUC. Reverting changes.
Training on augumented user 102614 48/50 current_auc = 0.4675324675324675
User 102614 AUC after training: 0.4675324675324675
User 102614 does not improve AUC. Reverting changes.
Training on augumented user 97530 49/50 current_auc = 0.4675324675324675
User 97530 AUC after training: 0.45454545454545453
User 97530 does not improve AUC. Reverting changes.
[2024-12-02 20:14:21.839694] start test user 116957 287/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:14:22.257758] start test user 116957 287/567 recall augumented users by random, augumented_users = [93383, 1275, 108319, 74456, 12817, 93550, 86098, 90878, 5301, 117336, 11440, 127624, 57547, 109679, 134951, 21148, 81990, 85681, 54532, 79026, 120688, 136273, 2387, 60095, 104204, 13043, 43378, 23442, 125245, 34815, 11378, 29038, 81767, 115384, 11513, 34867, 69298, 51401, 21040, 19318, 57416, 32091, 94944, 72513, 62527, 111188, 119522, 10553, 18722, 30697]
[2024-12-02 20:14:22.274644] user = 116957 Cloud 287/567
[2024-12-02 20:14:22.311686] user = 116957 Local 287/567
[2024-12-02 20:14:22.347309] user = 116957 Local+ 287/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:14:24.467289] user = 116957 MPDA- 287/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6177248677248678
Training on augumented user 93383 0/50 current_auc = 0.6177248677248678
User 93383 AUC after training: 0.6177248677248678
User 93383 does not improve AUC. Reverting changes.
Training on augumented user 1275 1/50 current_auc = 0.6177248677248678
User 1275 AUC after training: 0.6164021164021164
User 1275 does not improve AUC. Reverting changes.
Training on augumented user 108319 2/50 current_auc = 0.6177248677248678
User 108319 AUC after training: 0.6177248677248678
User 108319 does not improve AUC. Reverting changes.
Training on augumented user 74456 3/50 current_auc = 0.6177248677248678
User 74456 AUC after training: 0.6150793650793651
User 74456 does not improve AUC. Reverting changes.
Training on augumented user 12817 4/50 current_auc = 0.6177248677248678
User 12817 AUC after training: 0.6164021164021164
User 12817 does not improve AUC. Reverting changes.
Training on augumented user 93550 5/50 current_auc = 0.6177248677248678
User 93550 AUC after training: 0.6177248677248678
User 93550 does not improve AUC. Reverting changes.
Training on augumented user 86098 6/50 current_auc = 0.6177248677248678
User 86098 AUC after training: 0.6177248677248678
User 86098 does not improve AUC. Reverting changes.
Training on augumented user 90878 7/50 current_auc = 0.6177248677248678
User 90878 AUC after training: 0.6177248677248678
User 90878 does not improve AUC. Reverting changes.
Training on augumented user 5301 8/50 current_auc = 0.6177248677248678
User 5301 AUC after training: 0.6164021164021164
User 5301 does not improve AUC. Reverting changes.
Training on augumented user 117336 9/50 current_auc = 0.6177248677248678
User 117336 AUC after training: 0.6177248677248678
User 117336 does not improve AUC. Reverting changes.
Training on augumented user 11440 10/50 current_auc = 0.6177248677248678
User 11440 AUC after training: 0.6137566137566137
User 11440 does not improve AUC. Reverting changes.
Training on augumented user 127624 11/50 current_auc = 0.6177248677248678
User 127624 AUC after training: 0.6190476190476191
User 127624 improves AUC. Keeping the model.
Training on augumented user 57547 12/50 current_auc = 0.6190476190476191
User 57547 AUC after training: 0.6190476190476191
User 57547 does not improve AUC. Reverting changes.
Training on augumented user 109679 13/50 current_auc = 0.6190476190476191
User 109679 AUC after training: 0.6177248677248678
User 109679 does not improve AUC. Reverting changes.
Training on augumented user 134951 14/50 current_auc = 0.6190476190476191
User 134951 AUC after training: 0.6177248677248678
User 134951 does not improve AUC. Reverting changes.
Training on augumented user 21148 15/50 current_auc = 0.6190476190476191
User 21148 AUC after training: 0.6177248677248678
User 21148 does not improve AUC. Reverting changes.
Training on augumented user 81990 16/50 current_auc = 0.6190476190476191
User 81990 AUC after training: 0.6177248677248677
User 81990 does not improve AUC. Reverting changes.
Training on augumented user 85681 17/50 current_auc = 0.6190476190476191
User 85681 AUC after training: 0.6177248677248678
User 85681 does not improve AUC. Reverting changes.
Training on augumented user 54532 18/50 current_auc = 0.6190476190476191
User 54532 AUC after training: 0.6190476190476191
User 54532 does not improve AUC. Reverting changes.
Training on augumented user 79026 19/50 current_auc = 0.6190476190476191
User 79026 AUC after training: 0.6177248677248677
User 79026 does not improve AUC. Reverting changes.
Training on augumented user 120688 20/50 current_auc = 0.6190476190476191
User 120688 AUC after training: 0.6177248677248678
User 120688 does not improve AUC. Reverting changes.
Training on augumented user 136273 21/50 current_auc = 0.6190476190476191
User 136273 AUC after training: 0.6177248677248677
User 136273 does not improve AUC. Reverting changes.
Training on augumented user 2387 22/50 current_auc = 0.6190476190476191
User 2387 AUC after training: 0.6164021164021164
User 2387 does not improve AUC. Reverting changes.
Training on augumented user 60095 23/50 current_auc = 0.6190476190476191
User 60095 AUC after training: 0.6177248677248677
User 60095 does not improve AUC. Reverting changes.
Training on augumented user 104204 24/50 current_auc = 0.6190476190476191
User 104204 AUC after training: 0.6177248677248678
User 104204 does not improve AUC. Reverting changes.
Training on augumented user 13043 25/50 current_auc = 0.6190476190476191
User 13043 AUC after training: 0.6177248677248678
User 13043 does not improve AUC. Reverting changes.
Training on augumented user 43378 26/50 current_auc = 0.6190476190476191
User 43378 AUC after training: 0.6177248677248677
User 43378 does not improve AUC. Reverting changes.
Training on augumented user 23442 27/50 current_auc = 0.6190476190476191
User 23442 AUC after training: 0.6177248677248678
User 23442 does not improve AUC. Reverting changes.
Training on augumented user 125245 28/50 current_auc = 0.6190476190476191
User 125245 AUC after training: 0.6137566137566137
User 125245 does not improve AUC. Reverting changes.
Training on augumented user 34815 29/50 current_auc = 0.6190476190476191
User 34815 AUC after training: 0.6190476190476191
User 34815 does not improve AUC. Reverting changes.
Training on augumented user 11378 30/50 current_auc = 0.6190476190476191
User 11378 AUC after training: 0.6177248677248677
User 11378 does not improve AUC. Reverting changes.
Training on augumented user 29038 31/50 current_auc = 0.6190476190476191
User 29038 AUC after training: 0.6177248677248677
User 29038 does not improve AUC. Reverting changes.
Training on augumented user 81767 32/50 current_auc = 0.6190476190476191
User 81767 AUC after training: 0.6177248677248678
User 81767 does not improve AUC. Reverting changes.
Training on augumented user 115384 33/50 current_auc = 0.6190476190476191
User 115384 AUC after training: 0.6177248677248678
User 115384 does not improve AUC. Reverting changes.
Training on augumented user 11513 34/50 current_auc = 0.6190476190476191
User 11513 AUC after training: 0.623015873015873
User 11513 improves AUC. Keeping the model.
Training on augumented user 34867 35/50 current_auc = 0.623015873015873
User 34867 AUC after training: 0.623015873015873
User 34867 does not improve AUC. Reverting changes.
Training on augumented user 69298 36/50 current_auc = 0.623015873015873
User 69298 AUC after training: 0.6190476190476191
User 69298 does not improve AUC. Reverting changes.
Training on augumented user 51401 37/50 current_auc = 0.623015873015873
User 51401 AUC after training: 0.6177248677248678
User 51401 does not improve AUC. Reverting changes.
Training on augumented user 21040 38/50 current_auc = 0.623015873015873
User 21040 AUC after training: 0.623015873015873
User 21040 does not improve AUC. Reverting changes.
Training on augumented user 19318 39/50 current_auc = 0.623015873015873
User 19318 AUC after training: 0.6164021164021164
User 19318 does not improve AUC. Reverting changes.
Training on augumented user 57416 40/50 current_auc = 0.623015873015873
User 57416 AUC after training: 0.623015873015873
User 57416 does not improve AUC. Reverting changes.
Training on augumented user 32091 41/50 current_auc = 0.623015873015873
User 32091 AUC after training: 0.6137566137566137
User 32091 does not improve AUC. Reverting changes.
Training on augumented user 94944 42/50 current_auc = 0.623015873015873
User 94944 AUC after training: 0.6203703703703703
User 94944 does not improve AUC. Reverting changes.
Training on augumented user 72513 43/50 current_auc = 0.623015873015873
User 72513 AUC after training: 0.623015873015873
User 72513 does not improve AUC. Reverting changes.
Training on augumented user 62527 44/50 current_auc = 0.623015873015873
User 62527 AUC after training: 0.6203703703703703
User 62527 does not improve AUC. Reverting changes.
Training on augumented user 111188 45/50 current_auc = 0.623015873015873
User 111188 AUC after training: 0.6150793650793651
User 111188 does not improve AUC. Reverting changes.
Training on augumented user 119522 46/50 current_auc = 0.623015873015873
User 119522 AUC after training: 0.6216931216931217
User 119522 does not improve AUC. Reverting changes.
Training on augumented user 10553 47/50 current_auc = 0.623015873015873
User 10553 AUC after training: 0.6164021164021164
User 10553 does not improve AUC. Reverting changes.
Training on augumented user 18722 48/50 current_auc = 0.623015873015873
User 18722 AUC after training: 0.6216931216931217
User 18722 does not improve AUC. Reverting changes.
Training on augumented user 30697 49/50 current_auc = 0.623015873015873
User 30697 AUC after training: 0.6190476190476191
User 30697 does not improve AUC. Reverting changes.
[2024-12-02 20:14:52.775011] start test user 116960 288/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:14:53.184984] start test user 116960 288/567 recall augumented users by random, augumented_users = [104304, 34821, 39638, 28258, 117703, 104604, 119196, 70512, 75621, 68092, 102481, 58437, 21096, 119601, 45176, 89760, 123745, 72424, 123405, 108717, 136470, 68938, 75113, 85603, 5071, 112121, 90254, 111876, 38418, 17492, 30145, 48168, 102991, 78120, 80589, 69073, 56680, 8881, 96047, 78159, 98952, 7993, 137746, 89797, 62925, 90508, 5783, 15627, 29368, 51249]
[2024-12-02 20:14:53.204522] user = 116960 Cloud 288/567
[2024-12-02 20:14:53.357637] user = 116960 Local 288/567
[2024-12-02 20:14:53.536567] user = 116960 Local+ 288/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:14:55.626936] user = 116960 MPDA- 288/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.677123010130246
Training on augumented user 104304 0/50 current_auc = 0.677123010130246
User 104304 AUC after training: 0.6771519536903038
User 104304 improves AUC. Keeping the model.
Training on augumented user 34821 1/50 current_auc = 0.6771519536903038
User 34821 AUC after training: 0.6774452484322239
User 34821 improves AUC. Keeping the model.
Training on augumented user 39638 2/50 current_auc = 0.6774452484322239
User 39638 AUC after training: 0.6773121080559575
User 39638 does not improve AUC. Reverting changes.
Training on augumented user 28258 3/50 current_auc = 0.6774452484322239
User 28258 AUC after training: 0.6774259527255186
User 28258 does not improve AUC. Reverting changes.
Training on augumented user 117703 4/50 current_auc = 0.6774452484322239
User 117703 AUC after training: 0.6772484322238302
User 117703 does not improve AUC. Reverting changes.
Training on augumented user 104604 5/50 current_auc = 0.6774452484322239
User 104604 AUC after training: 0.677310178485287
User 104604 does not improve AUC. Reverting changes.
Training on augumented user 119196 6/50 current_auc = 0.6774452484322239
User 119196 AUC after training: 0.677229136517125
User 119196 does not improve AUC. Reverting changes.
Training on augumented user 70512 7/50 current_auc = 0.6774452484322239
User 70512 AUC after training: 0.6774047274481428
User 70512 does not improve AUC. Reverting changes.
Training on augumented user 75621 8/50 current_auc = 0.6774452484322239
User 75621 AUC after training: 0.6775069946936806
User 75621 improves AUC. Keeping the model.
Training on augumented user 68092 9/50 current_auc = 0.6775069946936806
User 68092 AUC after training: 0.6776922334780511
User 68092 improves AUC. Keeping the model.
Training on augumented user 102481 10/50 current_auc = 0.6776922334780511
User 102481 AUC after training: 0.6776690786300048
User 102481 does not improve AUC. Reverting changes.
Training on augumented user 58437 11/50 current_auc = 0.6776922334780511
User 58437 AUC after training: 0.6773371924746744
User 58437 does not improve AUC. Reverting changes.
Training on augumented user 21096 12/50 current_auc = 0.6776922334780511
User 21096 AUC after training: 0.6769647853352628
User 21096 does not improve AUC. Reverting changes.
Training on augumented user 119601 13/50 current_auc = 0.6776922334780511
User 119601 AUC after training: 0.6775224312590449
User 119601 does not improve AUC. Reverting changes.
Training on augumented user 45176 14/50 current_auc = 0.6776922334780511
User 45176 AUC after training: 0.677757838880849
User 45176 improves AUC. Keeping the model.
Training on augumented user 89760 15/50 current_auc = 0.677757838880849
User 89760 AUC after training: 0.6775957549445248
User 89760 does not improve AUC. Reverting changes.
Training on augumented user 123745 16/50 current_auc = 0.677757838880849
User 123745 AUC after training: 0.6775417269657501
User 123745 does not improve AUC. Reverting changes.
Training on augumented user 72424 17/50 current_auc = 0.677757838880849
User 72424 AUC after training: 0.6778195851423058
User 72424 improves AUC. Keeping the model.
Training on augumented user 123405 18/50 current_auc = 0.6778195851423058
User 123405 AUC after training: 0.6776208393632417
User 123405 does not improve AUC. Reverting changes.
Training on augumented user 108717 19/50 current_auc = 0.6778195851423058
User 108717 AUC after training: 0.677684515195369
User 108717 does not improve AUC. Reverting changes.
Training on augumented user 136470 20/50 current_auc = 0.6778195851423058
User 136470 AUC after training: 0.6776729377713459
User 136470 does not improve AUC. Reverting changes.
Training on augumented user 68938 21/50 current_auc = 0.6778195851423058
User 68938 AUC after training: 0.6774413892908827
User 68938 does not improve AUC. Reverting changes.
Training on augumented user 75113 22/50 current_auc = 0.6778195851423058
User 75113 AUC after training: 0.6786222865412446
User 75113 improves AUC. Keeping the model.
Training on augumented user 85603 23/50 current_auc = 0.6786222865412446
User 85603 AUC after training: 0.6784640617462614
User 85603 does not improve AUC. Reverting changes.
Training on augumented user 5071 24/50 current_auc = 0.6786222865412446
User 5071 AUC after training: 0.6788750602990835
User 5071 improves AUC. Keeping the model.
Training on augumented user 112121 25/50 current_auc = 0.6788750602990835
User 112121 AUC after training: 0.6787187650747708
User 112121 does not improve AUC. Reverting changes.
Training on augumented user 90254 26/50 current_auc = 0.6788750602990835
User 90254 AUC after training: 0.6787650747708635
User 90254 does not improve AUC. Reverting changes.
Training on augumented user 111876 27/50 current_auc = 0.6788750602990835
User 111876 AUC after training: 0.6786608779546551
User 111876 does not improve AUC. Reverting changes.
Training on augumented user 38418 28/50 current_auc = 0.6788750602990835
User 38418 AUC after training: 0.6782633863965267
User 38418 does not improve AUC. Reverting changes.
Training on augumented user 17492 29/50 current_auc = 0.6788750602990835
User 17492 AUC after training: 0.6787843704775687
User 17492 does not improve AUC. Reverting changes.
Training on augumented user 30145 30/50 current_auc = 0.6788750602990835
User 30145 AUC after training: 0.6787959479015919
User 30145 does not improve AUC. Reverting changes.
Training on augumented user 48168 31/50 current_auc = 0.6788750602990835
User 48168 AUC after training: 0.6786145682585624
User 48168 does not improve AUC. Reverting changes.
Training on augumented user 102991 32/50 current_auc = 0.6788750602990835
User 102991 AUC after training: 0.6785103714423542
User 102991 does not improve AUC. Reverting changes.
Training on augumented user 78120 33/50 current_auc = 0.6788750602990835
User 78120 AUC after training: 0.6789657501205981
User 78120 improves AUC. Keeping the model.
Training on augumented user 80589 34/50 current_auc = 0.6789657501205981
User 80589 AUC after training: 0.6780530631934394
User 80589 does not improve AUC. Reverting changes.
Training on augumented user 69073 35/50 current_auc = 0.6789657501205981
User 69073 AUC after training: 0.679174143753015
User 69073 improves AUC. Keeping the model.
Training on augumented user 56680 36/50 current_auc = 0.679174143753015
User 56680 AUC after training: 0.6791316931982633
User 56680 does not improve AUC. Reverting changes.
Training on augumented user 8881 37/50 current_auc = 0.679174143753015
User 8881 AUC after training: 0.6789001447178004
User 8881 does not improve AUC. Reverting changes.
Training on augumented user 96047 38/50 current_auc = 0.679174143753015
User 96047 AUC after training: 0.6787805113362276
User 96047 does not improve AUC. Reverting changes.
Training on augumented user 78159 39/50 current_auc = 0.679174143753015
User 78159 AUC after training: 0.6786878919440424
User 78159 does not improve AUC. Reverting changes.
Training on augumented user 98952 40/50 current_auc = 0.679174143753015
User 98952 AUC after training: 0.6791066087795465
User 98952 does not improve AUC. Reverting changes.
Training on augumented user 7993 41/50 current_auc = 0.679174143753015
User 7993 AUC after training: 0.6790101302460202
User 7993 does not improve AUC. Reverting changes.
Training on augumented user 137746 42/50 current_auc = 0.679174143753015
User 137746 AUC after training: 0.6780472744814279
User 137746 does not improve AUC. Reverting changes.
Training on augumented user 89797 43/50 current_auc = 0.679174143753015
User 89797 AUC after training: 0.6792821997105645
User 89797 improves AUC. Keeping the model.
Training on augumented user 62925 44/50 current_auc = 0.6792821997105645
User 62925 AUC after training: 0.6779874577906416
User 62925 does not improve AUC. Reverting changes.
Training on augumented user 90508 45/50 current_auc = 0.6792821997105645
User 90508 AUC after training: 0.679255185721177
User 90508 does not improve AUC. Reverting changes.
Training on augumented user 5783 46/50 current_auc = 0.6792821997105645
User 5783 AUC after training: 0.6786454413892908
User 5783 does not improve AUC. Reverting changes.
Training on augumented user 15627 47/50 current_auc = 0.6792821997105645
User 15627 AUC after training: 0.6788499758803666
User 15627 does not improve AUC. Reverting changes.
Training on augumented user 29368 48/50 current_auc = 0.6792821997105645
User 29368 AUC after training: 0.6786724553786782
User 29368 does not improve AUC. Reverting changes.
Training on augumented user 51249 49/50 current_auc = 0.6792821997105645
User 51249 AUC after training: 0.6788924264351182
User 51249 does not improve AUC. Reverting changes.
[2024-12-02 20:15:26.076676] start test user 116984 289/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:15:26.655150] start test user 116984 289/567 recall augumented users by random, augumented_users = [99681, 48440, 13083, 106794, 124301, 123282, 9809, 47101, 1012, 91424, 18186, 5158, 50428, 117769, 101330, 4048, 108113, 87403, 73960, 48325, 98618, 66810, 92854, 35432, 66015, 137461, 137026, 86618, 2050, 15719, 120343, 82192, 129765, 49383, 39664, 61668, 131853, 74207, 73421, 76522, 15000, 97463, 562, 79029, 94929, 45356, 64751, 65711, 120784, 31802]
[2024-12-02 20:15:26.671330] user = 116984 Cloud 289/567
[2024-12-02 20:15:26.696540] user = 116984 Local 289/567
[2024-12-02 20:15:26.931836] user = 116984 Local+ 289/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:15:30.079822] user = 116984 MPDA- 289/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5336249785554984
Training on augumented user 99681 0/50 current_auc = 0.5336249785554984
User 99681 AUC after training: 0.5348258706467661
User 99681 improves AUC. Keeping the model.
Training on augumented user 48440 1/50 current_auc = 0.5348258706467661
User 48440 AUC after training: 0.5339680905815749
User 48440 does not improve AUC. Reverting changes.
Training on augumented user 13083 2/50 current_auc = 0.5348258706467661
User 13083 AUC after training: 0.5349974266598044
User 13083 improves AUC. Keeping the model.
Training on augumented user 106794 3/50 current_auc = 0.5349974266598044
User 106794 AUC after training: 0.5355120946989191
User 106794 improves AUC. Keeping the model.
Training on augumented user 124301 4/50 current_auc = 0.5355120946989191
User 124301 AUC after training: 0.5361125407445531
User 124301 improves AUC. Keeping the model.
Training on augumented user 123282 5/50 current_auc = 0.5361125407445531
User 123282 AUC after training: 0.536026762738034
User 123282 does not improve AUC. Reverting changes.
Training on augumented user 9809 6/50 current_auc = 0.5361125407445531
User 9809 AUC after training: 0.5361983187510723
User 9809 improves AUC. Keeping the model.
Training on augumented user 47101 7/50 current_auc = 0.5361983187510723
User 47101 AUC after training: 0.5355120946989192
User 47101 does not improve AUC. Reverting changes.
Training on augumented user 1012 8/50 current_auc = 0.5361983187510723
User 1012 AUC after training: 0.536712986790187
User 1012 improves AUC. Keeping the model.
Training on augumented user 91424 9/50 current_auc = 0.536712986790187
User 91424 AUC after training: 0.5364556527706297
User 91424 does not improve AUC. Reverting changes.
Training on augumented user 18186 10/50 current_auc = 0.536712986790187
User 18186 AUC after training: 0.5366272087836679
User 18186 does not improve AUC. Reverting changes.
Training on augumented user 5158 11/50 current_auc = 0.536712986790187
User 5158 AUC after training: 0.5369703208097443
User 5158 improves AUC. Keeping the model.
Training on augumented user 50428 12/50 current_auc = 0.5369703208097443
User 50428 AUC after training: 0.5369703208097444
User 50428 improves AUC. Keeping the model.
Training on augumented user 117769 13/50 current_auc = 0.5369703208097444
User 117769 AUC after training: 0.5366272087836679
User 117769 does not improve AUC. Reverting changes.
Training on augumented user 101330 14/50 current_auc = 0.5369703208097444
User 101330 AUC after training: 0.5368845428032253
User 101330 does not improve AUC. Reverting changes.
Training on augumented user 4048 15/50 current_auc = 0.5369703208097444
User 4048 AUC after training: 0.5368845428032253
User 4048 does not improve AUC. Reverting changes.
Training on augumented user 108113 16/50 current_auc = 0.5369703208097444
User 108113 AUC after training: 0.5372276548293018
User 108113 improves AUC. Keeping the model.
Training on augumented user 87403 17/50 current_auc = 0.5372276548293018
User 87403 AUC after training: 0.5371418768227827
User 87403 does not improve AUC. Reverting changes.
Training on augumented user 73960 18/50 current_auc = 0.5372276548293018
User 73960 AUC after training: 0.5378281008749357
User 73960 improves AUC. Keeping the model.
Training on augumented user 48325 19/50 current_auc = 0.5378281008749357
User 48325 AUC after training: 0.5355120946989191
User 48325 does not improve AUC. Reverting changes.
Training on augumented user 98618 20/50 current_auc = 0.5378281008749357
User 98618 AUC after training: 0.5374849888488591
User 98618 does not improve AUC. Reverting changes.
Training on augumented user 66810 21/50 current_auc = 0.5378281008749357
User 66810 AUC after training: 0.5344827586206896
User 66810 does not improve AUC. Reverting changes.
Training on augumented user 92854 22/50 current_auc = 0.5378281008749357
User 92854 AUC after training: 0.5373134328358209
User 92854 does not improve AUC. Reverting changes.
Training on augumented user 35432 23/50 current_auc = 0.5378281008749357
User 35432 AUC after training: 0.5379138788814548
User 35432 improves AUC. Keeping the model.
Training on augumented user 66015 24/50 current_auc = 0.5379138788814548
User 66015 AUC after training: 0.5377423228684165
User 66015 does not improve AUC. Reverting changes.
Training on augumented user 137461 25/50 current_auc = 0.5379138788814548
User 137461 AUC after training: 0.5386001029336078
User 137461 improves AUC. Keeping the model.
Training on augumented user 137026 26/50 current_auc = 0.5386001029336078
User 137026 AUC after training: 0.5383427689140504
User 137026 does not improve AUC. Reverting changes.
Training on augumented user 86618 27/50 current_auc = 0.5386001029336078
User 86618 AUC after training: 0.537999656887974
User 86618 does not improve AUC. Reverting changes.
Training on augumented user 2050 28/50 current_auc = 0.5386001029336078
User 2050 AUC after training: 0.5386858809401269
User 2050 improves AUC. Keeping the model.
Training on augumented user 15719 29/50 current_auc = 0.5386858809401269
User 15719 AUC after training: 0.5382569909075313
User 15719 does not improve AUC. Reverting changes.
Training on augumented user 120343 30/50 current_auc = 0.5386858809401269
User 120343 AUC after training: 0.5389432149596844
User 120343 improves AUC. Keeping the model.
Training on augumented user 82192 31/50 current_auc = 0.5389432149596844
User 82192 AUC after training: 0.5387716589466461
User 82192 does not improve AUC. Reverting changes.
Training on augumented user 129765 32/50 current_auc = 0.5389432149596844
User 129765 AUC after training: 0.538085434894493
User 129765 does not improve AUC. Reverting changes.
Training on augumented user 49383 33/50 current_auc = 0.5389432149596844
User 49383 AUC after training: 0.5389432149596842
User 49383 does not improve AUC. Reverting changes.
Training on augumented user 39664 34/50 current_auc = 0.5389432149596844
User 39664 AUC after training: 0.5392005489792417
User 39664 improves AUC. Keeping the model.
Training on augumented user 61668 35/50 current_auc = 0.5392005489792417
User 61668 AUC after training: 0.539457882998799
User 61668 improves AUC. Keeping the model.
Training on augumented user 131853 36/50 current_auc = 0.539457882998799
User 131853 AUC after training: 0.5386001029336078
User 131853 does not improve AUC. Reverting changes.
Training on augumented user 74207 37/50 current_auc = 0.539457882998799
User 74207 AUC after training: 0.5390289929662035
User 74207 does not improve AUC. Reverting changes.
Training on augumented user 73421 38/50 current_auc = 0.539457882998799
User 73421 AUC after training: 0.540058329044433
User 73421 improves AUC. Keeping the model.
Training on augumented user 76522 39/50 current_auc = 0.540058329044433
User 76522 AUC after training: 0.5376565448618974
User 76522 does not improve AUC. Reverting changes.
Training on augumented user 15000 40/50 current_auc = 0.540058329044433
User 15000 AUC after training: 0.5398867730313948
User 15000 does not improve AUC. Reverting changes.
Training on augumented user 97463 41/50 current_auc = 0.540058329044433
User 97463 AUC after training: 0.5397152170183565
User 97463 does not improve AUC. Reverting changes.
Training on augumented user 562 42/50 current_auc = 0.540058329044433
User 562 AUC after training: 0.5396294390118375
User 562 does not improve AUC. Reverting changes.
Training on augumented user 79029 43/50 current_auc = 0.540058329044433
User 79029 AUC after training: 0.5393721049922799
User 79029 does not improve AUC. Reverting changes.
Training on augumented user 94929 44/50 current_auc = 0.540058329044433
User 94929 AUC after training: 0.5393721049922799
User 94929 does not improve AUC. Reverting changes.
Training on augumented user 45356 45/50 current_auc = 0.540058329044433
User 45356 AUC after training: 0.5394578829987992
User 45356 does not improve AUC. Reverting changes.
Training on augumented user 64751 46/50 current_auc = 0.540058329044433
User 64751 AUC after training: 0.538771658946646
User 64751 does not improve AUC. Reverting changes.
Training on augumented user 65711 47/50 current_auc = 0.540058329044433
User 65711 AUC after training: 0.540058329044433
User 65711 does not improve AUC. Reverting changes.
Training on augumented user 120784 48/50 current_auc = 0.540058329044433
User 120784 AUC after training: 0.5402298850574713
User 120784 improves AUC. Keeping the model.
Training on augumented user 31802 49/50 current_auc = 0.5402298850574713
User 31802 AUC after training: 0.5379996568879739
User 31802 does not improve AUC. Reverting changes.
[2024-12-02 20:15:58.623279] start test user 117005 290/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:15:59.125997] start test user 117005 290/567 recall augumented users by random, augumented_users = [110199, 115357, 134876, 120541, 70424, 15132, 126889, 71717, 93688, 3013, 14412, 8660, 86266, 29863, 82630, 94420, 24660, 119053, 105301, 133845, 7985, 41444, 118928, 32279, 77389, 42244, 27369, 83642, 134105, 114287, 39030, 72621, 37745, 99569, 30516, 24668, 94647, 137396, 47718, 132733, 23618, 98377, 29750, 61079, 92956, 131395, 87734, 4198, 104665, 41304]
[2024-12-02 20:15:59.141686] user = 117005 Cloud 290/567
[2024-12-02 20:15:59.155572] user = 117005 Local 290/567
[2024-12-02 20:15:59.226296] user = 117005 Local+ 290/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:16:02.111413] user = 117005 MPDA- 290/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6231884057971014
Training on augumented user 110199 0/50 current_auc = 0.6231884057971014
User 110199 AUC after training: 0.6221532091097308
User 110199 does not improve AUC. Reverting changes.
Training on augumented user 115357 1/50 current_auc = 0.6231884057971014
User 115357 AUC after training: 0.6221532091097308
User 115357 does not improve AUC. Reverting changes.
Training on augumented user 134876 2/50 current_auc = 0.6231884057971014
User 134876 AUC after training: 0.6221532091097308
User 134876 does not improve AUC. Reverting changes.
Training on augumented user 120541 3/50 current_auc = 0.6231884057971014
User 120541 AUC after training: 0.6221532091097308
User 120541 does not improve AUC. Reverting changes.
Training on augumented user 70424 4/50 current_auc = 0.6231884057971014
User 70424 AUC after training: 0.6221532091097308
User 70424 does not improve AUC. Reverting changes.
Training on augumented user 15132 5/50 current_auc = 0.6231884057971014
User 15132 AUC after training: 0.6221532091097308
User 15132 does not improve AUC. Reverting changes.
Training on augumented user 126889 6/50 current_auc = 0.6231884057971014
User 126889 AUC after training: 0.6231884057971014
User 126889 does not improve AUC. Reverting changes.
Training on augumented user 71717 7/50 current_auc = 0.6231884057971014
User 71717 AUC after training: 0.6231884057971014
User 71717 does not improve AUC. Reverting changes.
Training on augumented user 93688 8/50 current_auc = 0.6231884057971014
User 93688 AUC after training: 0.6190476190476191
User 93688 does not improve AUC. Reverting changes.
Training on augumented user 3013 9/50 current_auc = 0.6231884057971014
User 3013 AUC after training: 0.6211180124223603
User 3013 does not improve AUC. Reverting changes.
Training on augumented user 14412 10/50 current_auc = 0.6231884057971014
User 14412 AUC after training: 0.6200828157349897
User 14412 does not improve AUC. Reverting changes.
Training on augumented user 8660 11/50 current_auc = 0.6231884057971014
User 8660 AUC after training: 0.6226708074534162
User 8660 does not improve AUC. Reverting changes.
Training on augumented user 86266 12/50 current_auc = 0.6231884057971014
User 86266 AUC after training: 0.6242236024844721
User 86266 improves AUC. Keeping the model.
Training on augumented user 29863 13/50 current_auc = 0.6242236024844721
User 29863 AUC after training: 0.6211180124223603
User 29863 does not improve AUC. Reverting changes.
Training on augumented user 82630 14/50 current_auc = 0.6242236024844721
User 82630 AUC after training: 0.6200828157349896
User 82630 does not improve AUC. Reverting changes.
Training on augumented user 94420 15/50 current_auc = 0.6242236024844721
User 94420 AUC after training: 0.6231884057971014
User 94420 does not improve AUC. Reverting changes.
Training on augumented user 24660 16/50 current_auc = 0.6242236024844721
User 24660 AUC after training: 0.6221532091097308
User 24660 does not improve AUC. Reverting changes.
Training on augumented user 119053 17/50 current_auc = 0.6242236024844721
User 119053 AUC after training: 0.6200828157349896
User 119053 does not improve AUC. Reverting changes.
Training on augumented user 105301 18/50 current_auc = 0.6242236024844721
User 105301 AUC after training: 0.6211180124223603
User 105301 does not improve AUC. Reverting changes.
Training on augumented user 133845 19/50 current_auc = 0.6242236024844721
User 133845 AUC after training: 0.6231884057971014
User 133845 does not improve AUC. Reverting changes.
Training on augumented user 7985 20/50 current_auc = 0.6242236024844721
User 7985 AUC after training: 0.6211180124223603
User 7985 does not improve AUC. Reverting changes.
Training on augumented user 41444 21/50 current_auc = 0.6242236024844721
User 41444 AUC after training: 0.6169772256728778
User 41444 does not improve AUC. Reverting changes.
Training on augumented user 118928 22/50 current_auc = 0.6242236024844721
User 118928 AUC after training: 0.6242236024844721
User 118928 does not improve AUC. Reverting changes.
Training on augumented user 32279 23/50 current_auc = 0.6242236024844721
User 32279 AUC after training: 0.6211180124223602
User 32279 does not improve AUC. Reverting changes.
Training on augumented user 77389 24/50 current_auc = 0.6242236024844721
User 77389 AUC after training: 0.6231884057971016
User 77389 does not improve AUC. Reverting changes.
Training on augumented user 42244 25/50 current_auc = 0.6242236024844721
User 42244 AUC after training: 0.6211180124223602
User 42244 does not improve AUC. Reverting changes.
Training on augumented user 27369 26/50 current_auc = 0.6242236024844721
User 27369 AUC after training: 0.6221532091097308
User 27369 does not improve AUC. Reverting changes.
Training on augumented user 83642 27/50 current_auc = 0.6242236024844721
User 83642 AUC after training: 0.6200828157349897
User 83642 does not improve AUC. Reverting changes.
Training on augumented user 134105 28/50 current_auc = 0.6242236024844721
User 134105 AUC after training: 0.6211180124223602
User 134105 does not improve AUC. Reverting changes.
Training on augumented user 114287 29/50 current_auc = 0.6242236024844721
User 114287 AUC after training: 0.6211180124223603
User 114287 does not improve AUC. Reverting changes.
Training on augumented user 39030 30/50 current_auc = 0.6242236024844721
User 39030 AUC after training: 0.6200828157349896
User 39030 does not improve AUC. Reverting changes.
Training on augumented user 72621 31/50 current_auc = 0.6242236024844721
User 72621 AUC after training: 0.6221532091097308
User 72621 does not improve AUC. Reverting changes.
Training on augumented user 37745 32/50 current_auc = 0.6242236024844721
User 37745 AUC after training: 0.6190476190476191
User 37745 does not improve AUC. Reverting changes.
Training on augumented user 99569 33/50 current_auc = 0.6242236024844721
User 99569 AUC after training: 0.6231884057971014
User 99569 does not improve AUC. Reverting changes.
Training on augumented user 30516 34/50 current_auc = 0.6242236024844721
User 30516 AUC after training: 0.6221532091097308
User 30516 does not improve AUC. Reverting changes.
Training on augumented user 24668 35/50 current_auc = 0.6242236024844721
User 24668 AUC after training: 0.6242236024844721
User 24668 does not improve AUC. Reverting changes.
Training on augumented user 94647 36/50 current_auc = 0.6242236024844721
User 94647 AUC after training: 0.6231884057971016
User 94647 does not improve AUC. Reverting changes.
Training on augumented user 137396 37/50 current_auc = 0.6242236024844721
User 137396 AUC after training: 0.6221532091097308
User 137396 does not improve AUC. Reverting changes.
Training on augumented user 47718 38/50 current_auc = 0.6242236024844721
User 47718 AUC after training: 0.6211180124223603
User 47718 does not improve AUC. Reverting changes.
Training on augumented user 132733 39/50 current_auc = 0.6242236024844721
User 132733 AUC after training: 0.6231884057971014
User 132733 does not improve AUC. Reverting changes.
Training on augumented user 23618 40/50 current_auc = 0.6242236024844721
User 23618 AUC after training: 0.6211180124223602
User 23618 does not improve AUC. Reverting changes.
Training on augumented user 98377 41/50 current_auc = 0.6242236024844721
User 98377 AUC after training: 0.6221532091097308
User 98377 does not improve AUC. Reverting changes.
Training on augumented user 29750 42/50 current_auc = 0.6242236024844721
User 29750 AUC after training: 0.6221532091097308
User 29750 does not improve AUC. Reverting changes.
Training on augumented user 61079 43/50 current_auc = 0.6242236024844721
User 61079 AUC after training: 0.6231884057971014
User 61079 does not improve AUC. Reverting changes.
Training on augumented user 92956 44/50 current_auc = 0.6242236024844721
User 92956 AUC after training: 0.6180124223602484
User 92956 does not improve AUC. Reverting changes.
Training on augumented user 131395 45/50 current_auc = 0.6242236024844721
User 131395 AUC after training: 0.6242236024844721
User 131395 does not improve AUC. Reverting changes.
Training on augumented user 87734 46/50 current_auc = 0.6242236024844721
User 87734 AUC after training: 0.6242236024844721
User 87734 does not improve AUC. Reverting changes.
Training on augumented user 4198 47/50 current_auc = 0.6242236024844721
User 4198 AUC after training: 0.6231884057971016
User 4198 does not improve AUC. Reverting changes.
Training on augumented user 104665 48/50 current_auc = 0.6242236024844721
User 104665 AUC after training: 0.6221532091097308
User 104665 does not improve AUC. Reverting changes.
Training on augumented user 41304 49/50 current_auc = 0.6242236024844721
User 41304 AUC after training: 0.6221532091097308
User 41304 does not improve AUC. Reverting changes.
[2024-12-02 20:16:35.660008] start test user 117007 291/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:16:36.284382] start test user 117007 291/567 recall augumented users by random, augumented_users = [115086, 80264, 121595, 128370, 63569, 38174, 40309, 102295, 88645, 64720, 10010, 63020, 96869, 54149, 76917, 5365, 128113, 12865, 32431, 53412, 91624, 116375, 137454, 91427, 59966, 68441, 127051, 28848, 108687, 52379, 28855, 10682, 68711, 66332, 108365, 126467, 89073, 23572, 49900, 4303, 111809, 131679, 5938, 62934, 2681, 19646, 97986, 2692, 27476, 133191]
[2024-12-02 20:16:36.326595] user = 117007 Cloud 291/567
[2024-12-02 20:16:36.388994] user = 117007 Local 291/567
[2024-12-02 20:16:36.435775] user = 117007 Local+ 291/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:16:38.735391] user = 117007 MPDA- 291/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5977747639140044
Training on augumented user 115086 0/50 current_auc = 0.5977747639140044
User 115086 AUC after training: 0.5981389391199519
User 115086 improves AUC. Keeping the model.
Training on augumented user 80264 1/50 current_auc = 0.5981389391199519
User 80264 AUC after training: 0.5983273056057865
User 80264 improves AUC. Keeping the model.
Training on augumented user 121595 2/50 current_auc = 0.5983273056057865
User 121595 AUC after training: 0.5987417118746232
User 121595 improves AUC. Keeping the model.
Training on augumented user 128370 3/50 current_auc = 0.5987417118746232
User 128370 AUC after training: 0.5989677516576251
User 128370 improves AUC. Keeping the model.
Training on augumented user 63569 4/50 current_auc = 0.5989677516576251
User 63569 AUC after training: 0.5994575045207957
User 63569 improves AUC. Keeping the model.
Training on augumented user 38174 5/50 current_auc = 0.5994575045207957
User 38174 AUC after training: 0.5999221418525216
User 38174 improves AUC. Keeping the model.
Training on augumented user 40309 6/50 current_auc = 0.5999221418525216
User 40309 AUC after training: 0.5997086598352421
User 40309 does not improve AUC. Reverting changes.
Training on augumented user 102295 7/50 current_auc = 0.5999221418525216
User 102295 AUC after training: 0.6001732971669681
User 102295 improves AUC. Keeping the model.
Training on augumented user 88645 8/50 current_auc = 0.6001732971669681
User 88645 AUC after training: 0.6000602772754671
User 88645 does not improve AUC. Reverting changes.
Training on augumented user 64720 9/50 current_auc = 0.6001732971669681
User 64720 AUC after training: 0.5997588908981314
User 64720 does not improve AUC. Reverting changes.
Training on augumented user 10010 10/50 current_auc = 0.6001732971669681
User 10010 AUC after training: 0.6003993369499698
User 10010 improves AUC. Keeping the model.
Training on augumented user 63020 11/50 current_auc = 0.6003993369499698
User 63020 AUC after training: 0.6002486437613019
User 63020 does not improve AUC. Reverting changes.
Training on augumented user 96869 12/50 current_auc = 0.6003993369499698
User 96869 AUC after training: 0.6005877034358047
User 96869 improves AUC. Keeping the model.
Training on augumented user 54149 13/50 current_auc = 0.6005877034358047
User 54149 AUC after training: 0.6003867791842475
User 54149 does not improve AUC. Reverting changes.
Training on augumented user 76917 14/50 current_auc = 0.6005877034358047
User 76917 AUC after training: 0.5999221418525216
User 76917 does not improve AUC. Reverting changes.
Training on augumented user 5365 15/50 current_auc = 0.6005877034358047
User 5365 AUC after training: 0.5981766124171187
User 5365 does not improve AUC. Reverting changes.
Training on augumented user 128113 16/50 current_auc = 0.6005877034358047
User 128113 AUC after training: 0.6002863170584689
User 128113 does not improve AUC. Reverting changes.
Training on augumented user 12865 17/50 current_auc = 0.6005877034358047
User 12865 AUC after training: 0.5993193690978501
User 12865 does not improve AUC. Reverting changes.
Training on augumented user 32431 18/50 current_auc = 0.6005877034358047
User 32431 AUC after training: 0.5989803094233475
User 32431 does not improve AUC. Reverting changes.
Training on augumented user 53412 19/50 current_auc = 0.6005877034358047
User 53412 AUC after training: 0.6011653606590315
User 53412 improves AUC. Keeping the model.
Training on augumented user 91624 20/50 current_auc = 0.6011653606590315
User 91624 AUC after training: 0.5994449467550733
User 91624 does not improve AUC. Reverting changes.
Training on augumented user 116375 21/50 current_auc = 0.6011653606590315
User 116375 AUC after training: 0.6002360859955796
User 116375 does not improve AUC. Reverting changes.
Training on augumented user 137454 22/50 current_auc = 0.6011653606590315
User 137454 AUC after training: 0.6008639742816958
User 137454 does not improve AUC. Reverting changes.
Training on augumented user 91427 23/50 current_auc = 0.6011653606590315
User 91427 AUC after training: 0.6010900140646976
User 91427 does not improve AUC. Reverting changes.
Training on augumented user 59966 24/50 current_auc = 0.6011653606590315
User 59966 AUC after training: 0.6012783805505324
User 59966 improves AUC. Keeping the model.
Training on augumented user 68441 25/50 current_auc = 0.6012783805505324
User 68441 AUC after training: 0.600713281093028
User 68441 does not improve AUC. Reverting changes.
Training on augumented user 127051 26/50 current_auc = 0.6012783805505324
User 127051 AUC after training: 0.5992816958006831
User 127051 does not improve AUC. Reverting changes.
Training on augumented user 28848 27/50 current_auc = 0.6012783805505324
User 28848 AUC after training: 0.6010900140646976
User 28848 does not improve AUC. Reverting changes.
Training on augumented user 108687 28/50 current_auc = 0.6012783805505324
User 108687 AUC after training: 0.6005500301386377
User 108687 does not improve AUC. Reverting changes.
Training on augumented user 52379 29/50 current_auc = 0.6012783805505324
User 52379 AUC after training: 0.6014039582077557
User 52379 improves AUC. Keeping the model.
Training on augumented user 28855 30/50 current_auc = 0.6014039582077557
User 28855 AUC after training: 0.6006881655615832
User 28855 does not improve AUC. Reverting changes.
Training on augumented user 10682 31/50 current_auc = 0.6014039582077557
User 10682 AUC after training: 0.6010523407675307
User 10682 does not improve AUC. Reverting changes.
Training on augumented user 68711 32/50 current_auc = 0.6014039582077557
User 68711 AUC after training: 0.6010397830018084
User 68711 does not improve AUC. Reverting changes.
Training on augumented user 66332 33/50 current_auc = 0.6014039582077557
User 66332 AUC after training: 0.6011276873618645
User 66332 does not improve AUC. Reverting changes.
Training on augumented user 108365 34/50 current_auc = 0.6014039582077557
User 108365 AUC after training: 0.6012155917219209
User 108365 does not improve AUC. Reverting changes.
Training on augumented user 126467 35/50 current_auc = 0.6014039582077557
User 126467 AUC after training: 0.598691480811734
User 126467 does not improve AUC. Reverting changes.
Training on augumented user 89073 36/50 current_auc = 0.6014039582077557
User 89073 AUC after training: 0.6013662849105887
User 89073 does not improve AUC. Reverting changes.
Training on augumented user 23572 37/50 current_auc = 0.6014039582077557
User 23572 AUC after training: 0.6007007233273056
User 23572 does not improve AUC. Reverting changes.
Training on augumented user 49900 38/50 current_auc = 0.6014039582077557
User 49900 AUC after training: 0.5977622061482821
User 49900 does not improve AUC. Reverting changes.
Training on augumented user 4303 39/50 current_auc = 0.6014039582077557
User 4303 AUC after training: 0.6009267631103075
User 4303 does not improve AUC. Reverting changes.
Training on augumented user 111809 40/50 current_auc = 0.6014039582077557
User 111809 AUC after training: 0.6015797669278682
User 111809 improves AUC. Keeping the model.
Training on augumented user 131679 41/50 current_auc = 0.6015797669278682
User 131679 AUC after training: 0.6013411693791441
User 131679 does not improve AUC. Reverting changes.
Training on augumented user 5938 42/50 current_auc = 0.6015797669278682
User 5938 AUC after training: 0.5998091219610207
User 5938 does not improve AUC. Reverting changes.
Training on augumented user 62934 43/50 current_auc = 0.6015797669278682
User 62934 AUC after training: 0.6008137432188065
User 62934 does not improve AUC. Reverting changes.
Training on augumented user 2681 44/50 current_auc = 0.6015797669278682
User 2681 AUC after training: 0.6010900140646975
User 2681 does not improve AUC. Reverting changes.
Training on augumented user 19646 45/50 current_auc = 0.6015797669278682
User 19646 AUC after training: 0.5981263813542295
User 19646 does not improve AUC. Reverting changes.
Training on augumented user 97986 46/50 current_auc = 0.6015797669278682
User 97986 AUC after training: 0.6016299979907576
User 97986 improves AUC. Keeping the model.
Training on augumented user 2692 47/50 current_auc = 0.6016299979907576
User 2692 AUC after training: 0.5997588908981315
User 2692 does not improve AUC. Reverting changes.
Training on augumented user 27476 48/50 current_auc = 0.6016299979907576
User 27476 AUC after training: 0.6000728350411895
User 27476 does not improve AUC. Reverting changes.
Training on augumented user 133191 49/50 current_auc = 0.6016299979907576
User 133191 AUC after training: 0.6016174402250352
User 133191 does not improve AUC. Reverting changes.
[2024-12-02 20:17:08.306137] start test user 117049 292/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:17:08.722532] start test user 117049 292/567 recall augumented users by random, augumented_users = [8449, 29639, 115567, 61238, 81785, 12354, 76188, 369, 55300, 58069, 3432, 79765, 11733, 72607, 71321, 43392, 64780, 123914, 44201, 118813, 30558, 83981, 89170, 117023, 86284, 133210, 33497, 137207, 2954, 7635, 107601, 136830, 88547, 101670, 127378, 94463, 81424, 5655, 9894, 5716, 3006, 111904, 9597, 18517, 82007, 136416, 136608, 44719, 137886, 118219]
[2024-12-02 20:17:08.737313] user = 117049 Cloud 292/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:17:08.744139] user = 117049 Local 292/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:17:08.783279] user = 117049 Local+ 292/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:17:11.044209] user = 117049 MPDA- 292/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 8449 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8449 AUC after training: 0.5
User 8449 does not improve AUC. Reverting changes.
Training on augumented user 29639 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29639 AUC after training: 0.5
User 29639 does not improve AUC. Reverting changes.
Training on augumented user 115567 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115567 AUC after training: 0.5
User 115567 does not improve AUC. Reverting changes.
Training on augumented user 61238 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61238 AUC after training: 0.5
User 61238 does not improve AUC. Reverting changes.
Training on augumented user 81785 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81785 AUC after training: 0.5
User 81785 does not improve AUC. Reverting changes.
Training on augumented user 12354 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12354 AUC after training: 0.5
User 12354 does not improve AUC. Reverting changes.
Training on augumented user 76188 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76188 AUC after training: 0.5
User 76188 does not improve AUC. Reverting changes.
Training on augumented user 369 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 369 AUC after training: 0.5
User 369 does not improve AUC. Reverting changes.
Training on augumented user 55300 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55300 AUC after training: 0.5
User 55300 does not improve AUC. Reverting changes.
Training on augumented user 58069 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58069 AUC after training: 0.5
User 58069 does not improve AUC. Reverting changes.
Training on augumented user 3432 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3432 AUC after training: 0.5
User 3432 does not improve AUC. Reverting changes.
Training on augumented user 79765 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79765 AUC after training: 0.5
User 79765 does not improve AUC. Reverting changes.
Training on augumented user 11733 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11733 AUC after training: 0.5
User 11733 does not improve AUC. Reverting changes.
Training on augumented user 72607 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72607 AUC after training: 0.5
User 72607 does not improve AUC. Reverting changes.
Training on augumented user 71321 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71321 AUC after training: 0.5
User 71321 does not improve AUC. Reverting changes.
Training on augumented user 43392 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43392 AUC after training: 0.5
User 43392 does not improve AUC. Reverting changes.
Training on augumented user 64780 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64780 AUC after training: 0.5
User 64780 does not improve AUC. Reverting changes.
Training on augumented user 123914 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123914 AUC after training: 0.5
User 123914 does not improve AUC. Reverting changes.
Training on augumented user 44201 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44201 AUC after training: 0.5
User 44201 does not improve AUC. Reverting changes.
Training on augumented user 118813 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118813 AUC after training: 0.5
User 118813 does not improve AUC. Reverting changes.
Training on augumented user 30558 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30558 AUC after training: 0.5
User 30558 does not improve AUC. Reverting changes.
Training on augumented user 83981 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83981 AUC after training: 0.5
User 83981 does not improve AUC. Reverting changes.
Training on augumented user 89170 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89170 AUC after training: 0.5
User 89170 does not improve AUC. Reverting changes.
Training on augumented user 117023 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117023 AUC after training: 0.5
User 117023 does not improve AUC. Reverting changes.
Training on augumented user 86284 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86284 AUC after training: 0.5
User 86284 does not improve AUC. Reverting changes.
Training on augumented user 133210 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133210 AUC after training: 0.5
User 133210 does not improve AUC. Reverting changes.
Training on augumented user 33497 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33497 AUC after training: 0.5
User 33497 does not improve AUC. Reverting changes.
Training on augumented user 137207 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137207 AUC after training: 0.5
User 137207 does not improve AUC. Reverting changes.
Training on augumented user 2954 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2954 AUC after training: 0.5
User 2954 does not improve AUC. Reverting changes.
Training on augumented user 7635 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7635 AUC after training: 0.5
User 7635 does not improve AUC. Reverting changes.
Training on augumented user 107601 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107601 AUC after training: 0.5
User 107601 does not improve AUC. Reverting changes.
Training on augumented user 136830 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136830 AUC after training: 0.5
User 136830 does not improve AUC. Reverting changes.
Training on augumented user 88547 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88547 AUC after training: 0.5
User 88547 does not improve AUC. Reverting changes.
Training on augumented user 101670 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101670 AUC after training: 0.5
User 101670 does not improve AUC. Reverting changes.
Training on augumented user 127378 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127378 AUC after training: 0.5
User 127378 does not improve AUC. Reverting changes.
Training on augumented user 94463 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94463 AUC after training: 0.5
User 94463 does not improve AUC. Reverting changes.
Training on augumented user 81424 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81424 AUC after training: 0.5
User 81424 does not improve AUC. Reverting changes.
Training on augumented user 5655 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5655 AUC after training: 0.5
User 5655 does not improve AUC. Reverting changes.
Training on augumented user 9894 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9894 AUC after training: 0.5
User 9894 does not improve AUC. Reverting changes.
Training on augumented user 5716 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5716 AUC after training: 0.5
User 5716 does not improve AUC. Reverting changes.
Training on augumented user 3006 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3006 AUC after training: 0.5
User 3006 does not improve AUC. Reverting changes.
Training on augumented user 111904 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111904 AUC after training: 0.5
User 111904 does not improve AUC. Reverting changes.
Training on augumented user 9597 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9597 AUC after training: 0.5
User 9597 does not improve AUC. Reverting changes.
Training on augumented user 18517 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18517 AUC after training: 0.5
User 18517 does not improve AUC. Reverting changes.
Training on augumented user 82007 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82007 AUC after training: 0.5
User 82007 does not improve AUC. Reverting changes.
Training on augumented user 136416 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136416 AUC after training: 0.5
User 136416 does not improve AUC. Reverting changes.
Training on augumented user 136608 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136608 AUC after training: 0.5
User 136608 does not improve AUC. Reverting changes.
Training on augumented user 44719 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44719 AUC after training: 0.5
User 44719 does not improve AUC. Reverting changes.
Training on augumented user 137886 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137886 AUC after training: 0.5
User 137886 does not improve AUC. Reverting changes.
Training on augumented user 118219 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118219 AUC after training: 0.5
User 118219 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:17:39.685492] start test user 117070 293/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:17:40.474947] start test user 117070 293/567 recall augumented users by random, augumented_users = [63669, 129197, 59289, 61681, 12418, 9046, 31009, 74232, 102568, 115333, 69563, 72890, 101803, 76777, 52504, 124679, 54103, 73349, 10033, 112969, 70627, 45349, 36117, 19429, 108422, 130915, 12123, 92758, 67100, 135506, 91562, 88667, 130981, 127078, 60722, 127012, 77611, 6845, 113507, 118686, 4790, 54412, 132901, 73570, 17004, 112708, 59578, 18684, 33840, 52164]
[2024-12-02 20:17:40.503465] user = 117070 Cloud 293/567
[2024-12-02 20:17:40.513694] user = 117070 Local 293/567
[2024-12-02 20:17:40.583371] user = 117070 Local+ 293/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:17:42.682625] user = 117070 MPDA- 293/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5763888888888888
Training on augumented user 63669 0/50 current_auc = 0.5763888888888888
User 63669 AUC after training: 0.5763888888888888
User 63669 does not improve AUC. Reverting changes.
Training on augumented user 129197 1/50 current_auc = 0.5763888888888888
User 129197 AUC after training: 0.5763888888888888
User 129197 does not improve AUC. Reverting changes.
Training on augumented user 59289 2/50 current_auc = 0.5763888888888888
User 59289 AUC after training: 0.5763888888888888
User 59289 does not improve AUC. Reverting changes.
Training on augumented user 61681 3/50 current_auc = 0.5763888888888888
User 61681 AUC after training: 0.5694444444444444
User 61681 does not improve AUC. Reverting changes.
Training on augumented user 12418 4/50 current_auc = 0.5763888888888888
User 12418 AUC after training: 0.5763888888888888
User 12418 does not improve AUC. Reverting changes.
Training on augumented user 9046 5/50 current_auc = 0.5763888888888888
User 9046 AUC after training: 0.5763888888888888
User 9046 does not improve AUC. Reverting changes.
Training on augumented user 31009 6/50 current_auc = 0.5763888888888888
User 31009 AUC after training: 0.5763888888888888
User 31009 does not improve AUC. Reverting changes.
Training on augumented user 74232 7/50 current_auc = 0.5763888888888888
User 74232 AUC after training: 0.5694444444444444
User 74232 does not improve AUC. Reverting changes.
Training on augumented user 102568 8/50 current_auc = 0.5763888888888888
User 102568 AUC after training: 0.5694444444444444
User 102568 does not improve AUC. Reverting changes.
Training on augumented user 115333 9/50 current_auc = 0.5763888888888888
User 115333 AUC after training: 0.5763888888888888
User 115333 does not improve AUC. Reverting changes.
Training on augumented user 69563 10/50 current_auc = 0.5763888888888888
User 69563 AUC after training: 0.5763888888888888
User 69563 does not improve AUC. Reverting changes.
Training on augumented user 72890 11/50 current_auc = 0.5763888888888888
User 72890 AUC after training: 0.5763888888888888
User 72890 does not improve AUC. Reverting changes.
Training on augumented user 101803 12/50 current_auc = 0.5763888888888888
User 101803 AUC after training: 0.5763888888888888
User 101803 does not improve AUC. Reverting changes.
Training on augumented user 76777 13/50 current_auc = 0.5763888888888888
User 76777 AUC after training: 0.5694444444444444
User 76777 does not improve AUC. Reverting changes.
Training on augumented user 52504 14/50 current_auc = 0.5763888888888888
User 52504 AUC after training: 0.5763888888888888
User 52504 does not improve AUC. Reverting changes.
Training on augumented user 124679 15/50 current_auc = 0.5763888888888888
User 124679 AUC after training: 0.5694444444444444
User 124679 does not improve AUC. Reverting changes.
Training on augumented user 54103 16/50 current_auc = 0.5763888888888888
User 54103 AUC after training: 0.5763888888888888
User 54103 does not improve AUC. Reverting changes.
Training on augumented user 73349 17/50 current_auc = 0.5763888888888888
User 73349 AUC after training: 0.5763888888888888
User 73349 does not improve AUC. Reverting changes.
Training on augumented user 10033 18/50 current_auc = 0.5763888888888888
User 10033 AUC after training: 0.5763888888888888
User 10033 does not improve AUC. Reverting changes.
Training on augumented user 112969 19/50 current_auc = 0.5763888888888888
User 112969 AUC after training: 0.5763888888888888
User 112969 does not improve AUC. Reverting changes.
Training on augumented user 70627 20/50 current_auc = 0.5763888888888888
User 70627 AUC after training: 0.5763888888888888
User 70627 does not improve AUC. Reverting changes.
Training on augumented user 45349 21/50 current_auc = 0.5763888888888888
User 45349 AUC after training: 0.5763888888888888
User 45349 does not improve AUC. Reverting changes.
Training on augumented user 36117 22/50 current_auc = 0.5763888888888888
User 36117 AUC after training: 0.5763888888888888
User 36117 does not improve AUC. Reverting changes.
Training on augumented user 19429 23/50 current_auc = 0.5763888888888888
User 19429 AUC after training: 0.5763888888888888
User 19429 does not improve AUC. Reverting changes.
Training on augumented user 108422 24/50 current_auc = 0.5763888888888888
User 108422 AUC after training: 0.5763888888888888
User 108422 does not improve AUC. Reverting changes.
Training on augumented user 130915 25/50 current_auc = 0.5763888888888888
User 130915 AUC after training: 0.5694444444444444
User 130915 does not improve AUC. Reverting changes.
Training on augumented user 12123 26/50 current_auc = 0.5763888888888888
User 12123 AUC after training: 0.5763888888888888
User 12123 does not improve AUC. Reverting changes.
Training on augumented user 92758 27/50 current_auc = 0.5763888888888888
User 92758 AUC after training: 0.5763888888888888
User 92758 does not improve AUC. Reverting changes.
Training on augumented user 67100 28/50 current_auc = 0.5763888888888888
User 67100 AUC after training: 0.5694444444444444
User 67100 does not improve AUC. Reverting changes.
Training on augumented user 135506 29/50 current_auc = 0.5763888888888888
User 135506 AUC after training: 0.5763888888888888
User 135506 does not improve AUC. Reverting changes.
Training on augumented user 91562 30/50 current_auc = 0.5763888888888888
User 91562 AUC after training: 0.5763888888888888
User 91562 does not improve AUC. Reverting changes.
Training on augumented user 88667 31/50 current_auc = 0.5763888888888888
User 88667 AUC after training: 0.5763888888888888
User 88667 does not improve AUC. Reverting changes.
Training on augumented user 130981 32/50 current_auc = 0.5763888888888888
User 130981 AUC after training: 0.5763888888888888
User 130981 does not improve AUC. Reverting changes.
Training on augumented user 127078 33/50 current_auc = 0.5763888888888888
User 127078 AUC after training: 0.5763888888888888
User 127078 does not improve AUC. Reverting changes.
Training on augumented user 60722 34/50 current_auc = 0.5763888888888888
User 60722 AUC after training: 0.5694444444444444
User 60722 does not improve AUC. Reverting changes.
Training on augumented user 127012 35/50 current_auc = 0.5763888888888888
User 127012 AUC after training: 0.5763888888888888
User 127012 does not improve AUC. Reverting changes.
Training on augumented user 77611 36/50 current_auc = 0.5763888888888888
User 77611 AUC after training: 0.5763888888888888
User 77611 does not improve AUC. Reverting changes.
Training on augumented user 6845 37/50 current_auc = 0.5763888888888888
User 6845 AUC after training: 0.5694444444444444
User 6845 does not improve AUC. Reverting changes.
Training on augumented user 113507 38/50 current_auc = 0.5763888888888888
User 113507 AUC after training: 0.5763888888888888
User 113507 does not improve AUC. Reverting changes.
Training on augumented user 118686 39/50 current_auc = 0.5763888888888888
User 118686 AUC after training: 0.5694444444444444
User 118686 does not improve AUC. Reverting changes.
Training on augumented user 4790 40/50 current_auc = 0.5763888888888888
User 4790 AUC after training: 0.5763888888888888
User 4790 does not improve AUC. Reverting changes.
Training on augumented user 54412 41/50 current_auc = 0.5763888888888888
User 54412 AUC after training: 0.5763888888888888
User 54412 does not improve AUC. Reverting changes.
Training on augumented user 132901 42/50 current_auc = 0.5763888888888888
User 132901 AUC after training: 0.5763888888888888
User 132901 does not improve AUC. Reverting changes.
Training on augumented user 73570 43/50 current_auc = 0.5763888888888888
User 73570 AUC after training: 0.5694444444444444
User 73570 does not improve AUC. Reverting changes.
Training on augumented user 17004 44/50 current_auc = 0.5763888888888888
User 17004 AUC after training: 0.5763888888888888
User 17004 does not improve AUC. Reverting changes.
Training on augumented user 112708 45/50 current_auc = 0.5763888888888888
User 112708 AUC after training: 0.5694444444444444
User 112708 does not improve AUC. Reverting changes.
Training on augumented user 59578 46/50 current_auc = 0.5763888888888888
User 59578 AUC after training: 0.5763888888888888
User 59578 does not improve AUC. Reverting changes.
Training on augumented user 18684 47/50 current_auc = 0.5763888888888888
User 18684 AUC after training: 0.5763888888888888
User 18684 does not improve AUC. Reverting changes.
Training on augumented user 33840 48/50 current_auc = 0.5763888888888888
User 33840 AUC after training: 0.5763888888888888
User 33840 does not improve AUC. Reverting changes.
Training on augumented user 52164 49/50 current_auc = 0.5763888888888888
User 52164 AUC after training: 0.5763888888888888
User 52164 does not improve AUC. Reverting changes.
[2024-12-02 20:18:12.456467] start test user 117107 294/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:18:12.858532] start test user 117107 294/567 recall augumented users by random, augumented_users = [103833, 50555, 113980, 45037, 50470, 68592, 65763, 84019, 83390, 54554, 93748, 125700, 49207, 75203, 54523, 110758, 62300, 81652, 2383, 70866, 101973, 10612, 73049, 132237, 8189, 113522, 29649, 131246, 73659, 43791, 62383, 92660, 44431, 21072, 52986, 128049, 59942, 100642, 84635, 11546, 45077, 128452, 703, 133318, 114733, 105722, 49267, 96311, 103845, 81044]
[2024-12-02 20:18:12.874243] user = 117107 Cloud 294/567
[2024-12-02 20:18:12.894675] user = 117107 Local 294/567
[2024-12-02 20:18:12.960225] user = 117107 Local+ 294/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:18:15.415309] user = 117107 MPDA- 294/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6606425702811245
Training on augumented user 103833 0/50 current_auc = 0.6606425702811245
User 103833 AUC after training: 0.6612604263206673
User 103833 improves AUC. Keeping the model.
Training on augumented user 50555 1/50 current_auc = 0.6612604263206673
User 50555 AUC after training: 0.6611059623107816
User 50555 does not improve AUC. Reverting changes.
Training on augumented user 113980 2/50 current_auc = 0.6612604263206673
User 113980 AUC after training: 0.6627278344145814
User 113980 improves AUC. Keeping the model.
Training on augumented user 45037 3/50 current_auc = 0.6627278344145814
User 45037 AUC after training: 0.6604881062712388
User 45037 does not improve AUC. Reverting changes.
Training on augumented user 50470 4/50 current_auc = 0.6627278344145814
User 50470 AUC after training: 0.6622644423849242
User 50470 does not improve AUC. Reverting changes.
Training on augumented user 68592 5/50 current_auc = 0.6627278344145814
User 68592 AUC after training: 0.6613376583256101
User 68592 does not improve AUC. Reverting changes.
Training on augumented user 65763 6/50 current_auc = 0.6627278344145814
User 65763 AUC after training: 0.6614921223354958
User 65763 does not improve AUC. Reverting changes.
Training on augumented user 84019 7/50 current_auc = 0.6627278344145814
User 84019 AUC after training: 0.6625733704046957
User 84019 does not improve AUC. Reverting changes.
Training on augumented user 83390 8/50 current_auc = 0.6627278344145814
User 83390 AUC after training: 0.6627278344145814
User 83390 does not improve AUC. Reverting changes.
Training on augumented user 54554 9/50 current_auc = 0.6627278344145814
User 54554 AUC after training: 0.6621099783750386
User 54554 does not improve AUC. Reverting changes.
Training on augumented user 93748 10/50 current_auc = 0.6627278344145814
User 93748 AUC after training: 0.6619555143651529
User 93748 does not improve AUC. Reverting changes.
Training on augumented user 125700 11/50 current_auc = 0.6627278344145814
User 125700 AUC after training: 0.6625733704046958
User 125700 does not improve AUC. Reverting changes.
Training on augumented user 49207 12/50 current_auc = 0.6627278344145814
User 49207 AUC after training: 0.6627278344145815
User 49207 improves AUC. Keeping the model.
Training on augumented user 75203 13/50 current_auc = 0.6627278344145815
User 75203 AUC after training: 0.66241890639481
User 75203 does not improve AUC. Reverting changes.
Training on augumented user 54523 14/50 current_auc = 0.6627278344145815
User 54523 AUC after training: 0.6630367624343527
User 54523 improves AUC. Keeping the model.
Training on augumented user 110758 15/50 current_auc = 0.6630367624343527
User 110758 AUC after training: 0.6590206981773247
User 110758 does not improve AUC. Reverting changes.
Training on augumented user 62300 16/50 current_auc = 0.6630367624343527
User 62300 AUC after training: 0.661414890330553
User 62300 does not improve AUC. Reverting changes.
Training on augumented user 81652 17/50 current_auc = 0.6630367624343527
User 81652 AUC after training: 0.6623416743898671
User 81652 does not improve AUC. Reverting changes.
Training on augumented user 2383 18/50 current_auc = 0.6630367624343527
User 2383 AUC after training: 0.6622644423849243
User 2383 does not improve AUC. Reverting changes.
Training on augumented user 70866 19/50 current_auc = 0.6630367624343527
User 70866 AUC after training: 0.6626506024096386
User 70866 does not improve AUC. Reverting changes.
Training on augumented user 101973 20/50 current_auc = 0.6630367624343527
User 101973 AUC after training: 0.6612604263206672
User 101973 does not improve AUC. Reverting changes.
Training on augumented user 10612 21/50 current_auc = 0.6630367624343527
User 10612 AUC after training: 0.6629595304294098
User 10612 does not improve AUC. Reverting changes.
Training on augumented user 73049 22/50 current_auc = 0.6630367624343527
User 73049 AUC after training: 0.6638863144887241
User 73049 improves AUC. Keeping the model.
Training on augumented user 132237 23/50 current_auc = 0.6638863144887241
User 132237 AUC after training: 0.66295953042941
User 132237 does not improve AUC. Reverting changes.
Training on augumented user 8189 24/50 current_auc = 0.6638863144887241
User 8189 AUC after training: 0.6629595304294099
User 8189 does not improve AUC. Reverting changes.
Training on augumented user 113522 25/50 current_auc = 0.6638863144887241
User 113522 AUC after training: 0.6645041705282669
User 113522 improves AUC. Keeping the model.
Training on augumented user 29649 26/50 current_auc = 0.6645041705282669
User 29649 AUC after training: 0.6643497065183812
User 29649 does not improve AUC. Reverting changes.
Training on augumented user 131246 27/50 current_auc = 0.6645041705282669
User 131246 AUC after training: 0.6648130985480383
User 131246 improves AUC. Keeping the model.
Training on augumented user 73659 28/50 current_auc = 0.6648130985480383
User 73659 AUC after training: 0.6641180105035527
User 73659 does not improve AUC. Reverting changes.
Training on augumented user 43791 29/50 current_auc = 0.6648130985480383
User 43791 AUC after training: 0.6642724745134384
User 43791 does not improve AUC. Reverting changes.
Training on augumented user 62383 30/50 current_auc = 0.6648130985480383
User 62383 AUC after training: 0.663963546493667
User 62383 does not improve AUC. Reverting changes.
Training on augumented user 92660 31/50 current_auc = 0.6648130985480383
User 92660 AUC after training: 0.6635773864689527
User 92660 does not improve AUC. Reverting changes.
Training on augumented user 44431 32/50 current_auc = 0.6648130985480383
User 44431 AUC after training: 0.6641952425084955
User 44431 does not improve AUC. Reverting changes.
Training on augumented user 21072 33/50 current_auc = 0.6648130985480383
User 21072 AUC after training: 0.6637318504788384
User 21072 does not improve AUC. Reverting changes.
Training on augumented user 52986 34/50 current_auc = 0.6648130985480383
User 52986 AUC after training: 0.6638863144887241
User 52986 does not improve AUC. Reverting changes.
Training on augumented user 128049 35/50 current_auc = 0.6648130985480383
User 128049 AUC after training: 0.6646586345381527
User 128049 does not improve AUC. Reverting changes.
Training on augumented user 59942 36/50 current_auc = 0.6648130985480383
User 59942 AUC after training: 0.6623416743898671
User 59942 does not improve AUC. Reverting changes.
Training on augumented user 100642 37/50 current_auc = 0.6648130985480383
User 100642 AUC after training: 0.6643497065183812
User 100642 does not improve AUC. Reverting changes.
Training on augumented user 84635 38/50 current_auc = 0.6648130985480383
User 84635 AUC after training: 0.6643497065183812
User 84635 does not improve AUC. Reverting changes.
Training on augumented user 11546 39/50 current_auc = 0.6648130985480383
User 11546 AUC after training: 0.6651220265678097
User 11546 improves AUC. Keeping the model.
Training on augumented user 45077 40/50 current_auc = 0.6651220265678097
User 45077 AUC after training: 0.664967562557924
User 45077 does not improve AUC. Reverting changes.
Training on augumented user 128452 41/50 current_auc = 0.6651220265678097
User 128452 AUC after training: 0.6652764905776953
User 128452 improves AUC. Keeping the model.
Training on augumented user 703 42/50 current_auc = 0.6652764905776953
User 703 AUC after training: 0.6648130985480383
User 703 does not improve AUC. Reverting changes.
Training on augumented user 133318 43/50 current_auc = 0.6652764905776953
User 133318 AUC after training: 0.6634229224590671
User 133318 does not improve AUC. Reverting changes.
Training on augumented user 114733 44/50 current_auc = 0.6652764905776953
User 114733 AUC after training: 0.6645041705282668
User 114733 does not improve AUC. Reverting changes.
Training on augumented user 105722 45/50 current_auc = 0.6652764905776953
User 105722 AUC after training: 0.6654309545875811
User 105722 improves AUC. Keeping the model.
Training on augumented user 49267 46/50 current_auc = 0.6654309545875811
User 49267 AUC after training: 0.665508186592524
User 49267 improves AUC. Keeping the model.
Training on augumented user 96311 47/50 current_auc = 0.665508186592524
User 96311 AUC after training: 0.6656626506024096
User 96311 improves AUC. Keeping the model.
Training on augumented user 103845 48/50 current_auc = 0.6656626506024096
User 103845 AUC after training: 0.6655081865925239
User 103845 does not improve AUC. Reverting changes.
Training on augumented user 81044 49/50 current_auc = 0.6656626506024096
User 81044 AUC after training: 0.663963546493667
User 81044 does not improve AUC. Reverting changes.
[2024-12-02 20:18:40.185374] start test user 117110 295/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:18:40.591682] start test user 117110 295/567 recall augumented users by random, augumented_users = [36708, 30147, 88588, 18077, 9613, 7678, 100393, 123312, 104922, 68626, 32053, 96146, 34220, 81937, 62214, 32102, 126476, 50324, 54941, 110412, 47526, 82211, 29229, 63759, 50792, 92403, 133699, 3223, 23476, 70052, 52558, 89501, 85350, 110868, 71602, 115296, 130158, 105760, 20488, 28941, 68242, 121370, 121729, 115362, 62165, 25797, 114588, 43570, 90182, 121474]
[2024-12-02 20:18:40.606620] user = 117110 Cloud 295/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:18:40.613006] user = 117110 Local 295/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:18:40.631592] user = 117110 Local+ 295/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:18:43.343706] user = 117110 MPDA- 295/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 36708 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36708 AUC after training: 0.5
User 36708 does not improve AUC. Reverting changes.
Training on augumented user 30147 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30147 AUC after training: 0.5
User 30147 does not improve AUC. Reverting changes.
Training on augumented user 88588 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88588 AUC after training: 0.5
User 88588 does not improve AUC. Reverting changes.
Training on augumented user 18077 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18077 AUC after training: 0.5
User 18077 does not improve AUC. Reverting changes.
Training on augumented user 9613 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9613 AUC after training: 0.5
User 9613 does not improve AUC. Reverting changes.
Training on augumented user 7678 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7678 AUC after training: 0.5
User 7678 does not improve AUC. Reverting changes.
Training on augumented user 100393 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100393 AUC after training: 0.5
User 100393 does not improve AUC. Reverting changes.
Training on augumented user 123312 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123312 AUC after training: 0.5
User 123312 does not improve AUC. Reverting changes.
Training on augumented user 104922 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104922 AUC after training: 0.5
User 104922 does not improve AUC. Reverting changes.
Training on augumented user 68626 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68626 AUC after training: 0.5
User 68626 does not improve AUC. Reverting changes.
Training on augumented user 32053 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32053 AUC after training: 0.5
User 32053 does not improve AUC. Reverting changes.
Training on augumented user 96146 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96146 AUC after training: 0.5
User 96146 does not improve AUC. Reverting changes.
Training on augumented user 34220 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 34220 AUC after training: 0.5
User 34220 does not improve AUC. Reverting changes.
Training on augumented user 81937 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81937 AUC after training: 0.5
User 81937 does not improve AUC. Reverting changes.
Training on augumented user 62214 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62214 AUC after training: 0.5
User 62214 does not improve AUC. Reverting changes.
Training on augumented user 32102 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32102 AUC after training: 0.5
User 32102 does not improve AUC. Reverting changes.
Training on augumented user 126476 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126476 AUC after training: 0.5
User 126476 does not improve AUC. Reverting changes.
Training on augumented user 50324 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50324 AUC after training: 0.5
User 50324 does not improve AUC. Reverting changes.
Training on augumented user 54941 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54941 AUC after training: 0.5
User 54941 does not improve AUC. Reverting changes.
Training on augumented user 110412 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110412 AUC after training: 0.5
User 110412 does not improve AUC. Reverting changes.
Training on augumented user 47526 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47526 AUC after training: 0.5
User 47526 does not improve AUC. Reverting changes.
Training on augumented user 82211 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82211 AUC after training: 0.5
User 82211 does not improve AUC. Reverting changes.
Training on augumented user 29229 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29229 AUC after training: 0.5
User 29229 does not improve AUC. Reverting changes.
Training on augumented user 63759 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63759 AUC after training: 0.5
User 63759 does not improve AUC. Reverting changes.
Training on augumented user 50792 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50792 AUC after training: 0.5
User 50792 does not improve AUC. Reverting changes.
Training on augumented user 92403 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92403 AUC after training: 0.5
User 92403 does not improve AUC. Reverting changes.
Training on augumented user 133699 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133699 AUC after training: 0.5
User 133699 does not improve AUC. Reverting changes.
Training on augumented user 3223 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3223 AUC after training: 0.5
User 3223 does not improve AUC. Reverting changes.
Training on augumented user 23476 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23476 AUC after training: 0.5
User 23476 does not improve AUC. Reverting changes.
Training on augumented user 70052 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70052 AUC after training: 0.5
User 70052 does not improve AUC. Reverting changes.
Training on augumented user 52558 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 52558 AUC after training: 0.5
User 52558 does not improve AUC. Reverting changes.
Training on augumented user 89501 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89501 AUC after training: 0.5
User 89501 does not improve AUC. Reverting changes.
Training on augumented user 85350 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85350 AUC after training: 0.5
User 85350 does not improve AUC. Reverting changes.
Training on augumented user 110868 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110868 AUC after training: 0.5
User 110868 does not improve AUC. Reverting changes.
Training on augumented user 71602 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71602 AUC after training: 0.5
User 71602 does not improve AUC. Reverting changes.
Training on augumented user 115296 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115296 AUC after training: 0.5
User 115296 does not improve AUC. Reverting changes.
Training on augumented user 130158 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130158 AUC after training: 0.5
User 130158 does not improve AUC. Reverting changes.
Training on augumented user 105760 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105760 AUC after training: 0.5
User 105760 does not improve AUC. Reverting changes.
Training on augumented user 20488 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20488 AUC after training: 0.5
User 20488 does not improve AUC. Reverting changes.
Training on augumented user 28941 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28941 AUC after training: 0.5
User 28941 does not improve AUC. Reverting changes.
Training on augumented user 68242 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68242 AUC after training: 0.5
User 68242 does not improve AUC. Reverting changes.
Training on augumented user 121370 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121370 AUC after training: 0.5
User 121370 does not improve AUC. Reverting changes.
Training on augumented user 121729 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121729 AUC after training: 0.5
User 121729 does not improve AUC. Reverting changes.
Training on augumented user 115362 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115362 AUC after training: 0.5
User 115362 does not improve AUC. Reverting changes.
Training on augumented user 62165 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62165 AUC after training: 0.5
User 62165 does not improve AUC. Reverting changes.
Training on augumented user 25797 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25797 AUC after training: 0.5
User 25797 does not improve AUC. Reverting changes.
Training on augumented user 114588 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114588 AUC after training: 0.5
User 114588 does not improve AUC. Reverting changes.
Training on augumented user 43570 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43570 AUC after training: 0.5
User 43570 does not improve AUC. Reverting changes.
Training on augumented user 90182 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90182 AUC after training: 0.5
User 90182 does not improve AUC. Reverting changes.
Training on augumented user 121474 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121474 AUC after training: 0.5
User 121474 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:19:08.879286] start test user 117122 296/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:19:09.324056] start test user 117122 296/567 recall augumented users by random, augumented_users = [84711, 29863, 134493, 60269, 98503, 41995, 53402, 105613, 135622, 95403, 89632, 936, 96346, 131523, 29183, 15524, 131508, 97652, 10186, 49384, 77102, 66248, 63908, 3837, 26751, 124451, 10558, 24223, 73170, 10176, 8208, 69731, 28975, 87300, 53950, 35851, 6217, 135853, 17994, 102483, 127351, 113301, 78989, 121889, 95318, 81286, 123442, 32000, 124153, 132010]
[2024-12-02 20:19:09.352501] user = 117122 Cloud 296/567
[2024-12-02 20:19:09.375390] user = 117122 Local 296/567
[2024-12-02 20:19:09.417027] user = 117122 Local+ 296/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:19:11.049797] user = 117122 MPDA- 296/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5833333333333334
Training on augumented user 84711 0/50 current_auc = 0.5833333333333334
User 84711 AUC after training: 0.5333333333333333
User 84711 does not improve AUC. Reverting changes.
Training on augumented user 29863 1/50 current_auc = 0.5833333333333334
User 29863 AUC after training: 0.5333333333333333
User 29863 does not improve AUC. Reverting changes.
Training on augumented user 134493 2/50 current_auc = 0.5833333333333334
User 134493 AUC after training: 0.5833333333333334
User 134493 does not improve AUC. Reverting changes.
Training on augumented user 60269 3/50 current_auc = 0.5833333333333334
User 60269 AUC after training: 0.55
User 60269 does not improve AUC. Reverting changes.
Training on augumented user 98503 4/50 current_auc = 0.5833333333333334
User 98503 AUC after training: 0.5833333333333334
User 98503 does not improve AUC. Reverting changes.
Training on augumented user 41995 5/50 current_auc = 0.5833333333333334
User 41995 AUC after training: 0.5833333333333334
User 41995 does not improve AUC. Reverting changes.
Training on augumented user 53402 6/50 current_auc = 0.5833333333333334
User 53402 AUC after training: 0.55
User 53402 does not improve AUC. Reverting changes.
Training on augumented user 105613 7/50 current_auc = 0.5833333333333334
User 105613 AUC after training: 0.6
User 105613 improves AUC. Keeping the model.
Training on augumented user 135622 8/50 current_auc = 0.6
User 135622 AUC after training: 0.6166666666666667
User 135622 improves AUC. Keeping the model.
Training on augumented user 95403 9/50 current_auc = 0.6166666666666667
User 95403 AUC after training: 0.6
User 95403 does not improve AUC. Reverting changes.
Training on augumented user 89632 10/50 current_auc = 0.6166666666666667
User 89632 AUC after training: 0.6166666666666667
User 89632 does not improve AUC. Reverting changes.
Training on augumented user 936 11/50 current_auc = 0.6166666666666667
User 936 AUC after training: 0.6
User 936 does not improve AUC. Reverting changes.
Training on augumented user 96346 12/50 current_auc = 0.6166666666666667
User 96346 AUC after training: 0.6166666666666667
User 96346 does not improve AUC. Reverting changes.
Training on augumented user 131523 13/50 current_auc = 0.6166666666666667
User 131523 AUC after training: 0.6166666666666667
User 131523 does not improve AUC. Reverting changes.
Training on augumented user 29183 14/50 current_auc = 0.6166666666666667
User 29183 AUC after training: 0.6166666666666667
User 29183 does not improve AUC. Reverting changes.
Training on augumented user 15524 15/50 current_auc = 0.6166666666666667
User 15524 AUC after training: 0.6
User 15524 does not improve AUC. Reverting changes.
Training on augumented user 131508 16/50 current_auc = 0.6166666666666667
User 131508 AUC after training: 0.6166666666666667
User 131508 does not improve AUC. Reverting changes.
Training on augumented user 97652 17/50 current_auc = 0.6166666666666667
User 97652 AUC after training: 0.6
User 97652 does not improve AUC. Reverting changes.
Training on augumented user 10186 18/50 current_auc = 0.6166666666666667
User 10186 AUC after training: 0.6166666666666667
User 10186 does not improve AUC. Reverting changes.
Training on augumented user 49384 19/50 current_auc = 0.6166666666666667
User 49384 AUC after training: 0.6166666666666667
User 49384 does not improve AUC. Reverting changes.
Training on augumented user 77102 20/50 current_auc = 0.6166666666666667
User 77102 AUC after training: 0.6166666666666667
User 77102 does not improve AUC. Reverting changes.
Training on augumented user 66248 21/50 current_auc = 0.6166666666666667
User 66248 AUC after training: 0.6166666666666667
User 66248 does not improve AUC. Reverting changes.
Training on augumented user 63908 22/50 current_auc = 0.6166666666666667
User 63908 AUC after training: 0.6
User 63908 does not improve AUC. Reverting changes.
Training on augumented user 3837 23/50 current_auc = 0.6166666666666667
User 3837 AUC after training: 0.6166666666666667
User 3837 does not improve AUC. Reverting changes.
Training on augumented user 26751 24/50 current_auc = 0.6166666666666667
User 26751 AUC after training: 0.6
User 26751 does not improve AUC. Reverting changes.
Training on augumented user 124451 25/50 current_auc = 0.6166666666666667
User 124451 AUC after training: 0.6166666666666667
User 124451 does not improve AUC. Reverting changes.
Training on augumented user 10558 26/50 current_auc = 0.6166666666666667
User 10558 AUC after training: 0.6166666666666667
User 10558 does not improve AUC. Reverting changes.
Training on augumented user 24223 27/50 current_auc = 0.6166666666666667
User 24223 AUC after training: 0.6166666666666667
User 24223 does not improve AUC. Reverting changes.
Training on augumented user 73170 28/50 current_auc = 0.6166666666666667
User 73170 AUC after training: 0.6
User 73170 does not improve AUC. Reverting changes.
Training on augumented user 10176 29/50 current_auc = 0.6166666666666667
User 10176 AUC after training: 0.6166666666666667
User 10176 does not improve AUC. Reverting changes.
Training on augumented user 8208 30/50 current_auc = 0.6166666666666667
User 8208 AUC after training: 0.6166666666666667
User 8208 does not improve AUC. Reverting changes.
Training on augumented user 69731 31/50 current_auc = 0.6166666666666667
User 69731 AUC after training: 0.6166666666666667
User 69731 does not improve AUC. Reverting changes.
Training on augumented user 28975 32/50 current_auc = 0.6166666666666667
User 28975 AUC after training: 0.5833333333333334
User 28975 does not improve AUC. Reverting changes.
Training on augumented user 87300 33/50 current_auc = 0.6166666666666667
User 87300 AUC after training: 0.6166666666666667
User 87300 does not improve AUC. Reverting changes.
Training on augumented user 53950 34/50 current_auc = 0.6166666666666667
User 53950 AUC after training: 0.6166666666666667
User 53950 does not improve AUC. Reverting changes.
Training on augumented user 35851 35/50 current_auc = 0.6166666666666667
User 35851 AUC after training: 0.6166666666666667
User 35851 does not improve AUC. Reverting changes.
Training on augumented user 6217 36/50 current_auc = 0.6166666666666667
User 6217 AUC after training: 0.6166666666666667
User 6217 does not improve AUC. Reverting changes.
Training on augumented user 135853 37/50 current_auc = 0.6166666666666667
User 135853 AUC after training: 0.6
User 135853 does not improve AUC. Reverting changes.
Training on augumented user 17994 38/50 current_auc = 0.6166666666666667
User 17994 AUC after training: 0.6166666666666667
User 17994 does not improve AUC. Reverting changes.
Training on augumented user 102483 39/50 current_auc = 0.6166666666666667
User 102483 AUC after training: 0.6166666666666667
User 102483 does not improve AUC. Reverting changes.
Training on augumented user 127351 40/50 current_auc = 0.6166666666666667
User 127351 AUC after training: 0.6
User 127351 does not improve AUC. Reverting changes.
Training on augumented user 113301 41/50 current_auc = 0.6166666666666667
User 113301 AUC after training: 0.6166666666666667
User 113301 does not improve AUC. Reverting changes.
Training on augumented user 78989 42/50 current_auc = 0.6166666666666667
User 78989 AUC after training: 0.6166666666666667
User 78989 does not improve AUC. Reverting changes.
Training on augumented user 121889 43/50 current_auc = 0.6166666666666667
User 121889 AUC after training: 0.5833333333333334
User 121889 does not improve AUC. Reverting changes.
Training on augumented user 95318 44/50 current_auc = 0.6166666666666667
User 95318 AUC after training: 0.6166666666666667
User 95318 does not improve AUC. Reverting changes.
Training on augumented user 81286 45/50 current_auc = 0.6166666666666667
User 81286 AUC after training: 0.6166666666666667
User 81286 does not improve AUC. Reverting changes.
Training on augumented user 123442 46/50 current_auc = 0.6166666666666667
User 123442 AUC after training: 0.6166666666666667
User 123442 does not improve AUC. Reverting changes.
Training on augumented user 32000 47/50 current_auc = 0.6166666666666667
User 32000 AUC after training: 0.6166666666666667
User 32000 does not improve AUC. Reverting changes.
Training on augumented user 124153 48/50 current_auc = 0.6166666666666667
User 124153 AUC after training: 0.6166666666666667
User 124153 does not improve AUC. Reverting changes.
Training on augumented user 132010 49/50 current_auc = 0.6166666666666667
User 132010 AUC after training: 0.6166666666666667
User 132010 does not improve AUC. Reverting changes.
[2024-12-02 20:19:36.587851] start test user 117143 297/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:19:37.003767] start test user 117143 297/567 recall augumented users by random, augumented_users = [2689, 122051, 51867, 107165, 88376, 115257, 70653, 23357, 117241, 72992, 20800, 3062, 5904, 118314, 74768, 137593, 117587, 24180, 127814, 77169, 37503, 93636, 134493, 11909, 82932, 96415, 129372, 132086, 109536, 69492, 34994, 125708, 108529, 64, 27700, 5479, 47246, 133478, 10244, 65766, 56987, 18950, 126463, 14392, 65312, 2186, 133588, 72309, 134371, 79291]
[2024-12-02 20:19:37.020106] user = 117143 Cloud 297/567
[2024-12-02 20:19:37.038073] user = 117143 Local 297/567
[2024-12-02 20:19:37.222449] user = 117143 Local+ 297/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:19:39.462087] user = 117143 MPDA- 297/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5770011947431302
Training on augumented user 2689 0/50 current_auc = 0.5770011947431302
User 2689 AUC after training: 0.5756272401433692
User 2689 does not improve AUC. Reverting changes.
Training on augumented user 122051 1/50 current_auc = 0.5770011947431302
User 122051 AUC after training: 0.5768817204301075
User 122051 does not improve AUC. Reverting changes.
Training on augumented user 51867 2/50 current_auc = 0.5770011947431302
User 51867 AUC after training: 0.576284348864994
User 51867 does not improve AUC. Reverting changes.
Training on augumented user 107165 3/50 current_auc = 0.5770011947431302
User 107165 AUC after training: 0.5768817204301075
User 107165 does not improve AUC. Reverting changes.
Training on augumented user 88376 4/50 current_auc = 0.5770011947431302
User 88376 AUC after training: 0.5770011947431303
User 88376 improves AUC. Keeping the model.
Training on augumented user 115257 5/50 current_auc = 0.5770011947431303
User 115257 AUC after training: 0.5768219832735961
User 115257 does not improve AUC. Reverting changes.
Training on augumented user 70653 6/50 current_auc = 0.5770011947431303
User 70653 AUC after training: 0.575925925925926
User 70653 does not improve AUC. Reverting changes.
Training on augumented user 23357 7/50 current_auc = 0.5770011947431303
User 23357 AUC after training: 0.5756869772998805
User 23357 does not improve AUC. Reverting changes.
Training on augumented user 117241 8/50 current_auc = 0.5770011947431303
User 117241 AUC after training: 0.5775985663082437
User 117241 improves AUC. Keeping the model.
Training on augumented user 72992 9/50 current_auc = 0.5775985663082437
User 72992 AUC after training: 0.5746714456391876
User 72992 does not improve AUC. Reverting changes.
Training on augumented user 20800 10/50 current_auc = 0.5775985663082437
User 20800 AUC after training: 0.5773596176821983
User 20800 does not improve AUC. Reverting changes.
Training on augumented user 3062 11/50 current_auc = 0.5775985663082437
User 3062 AUC after training: 0.5767622461170848
User 3062 does not improve AUC. Reverting changes.
Training on augumented user 5904 12/50 current_auc = 0.5775985663082437
User 5904 AUC after training: 0.5768219832735961
User 5904 does not improve AUC. Reverting changes.
Training on augumented user 118314 13/50 current_auc = 0.5775985663082437
User 118314 AUC after training: 0.577299880525687
User 118314 does not improve AUC. Reverting changes.
Training on augumented user 74768 14/50 current_auc = 0.5775985663082437
User 74768 AUC after training: 0.5770011947431303
User 74768 does not improve AUC. Reverting changes.
Training on augumented user 137593 15/50 current_auc = 0.5775985663082437
User 137593 AUC after training: 0.5772401433691756
User 137593 does not improve AUC. Reverting changes.
Training on augumented user 117587 16/50 current_auc = 0.5775985663082437
User 117587 AUC after training: 0.5771804062126643
User 117587 does not improve AUC. Reverting changes.
Training on augumented user 24180 17/50 current_auc = 0.5775985663082437
User 24180 AUC after training: 0.5771804062126642
User 24180 does not improve AUC. Reverting changes.
Training on augumented user 127814 18/50 current_auc = 0.5775985663082437
User 127814 AUC after training: 0.5777777777777777
User 127814 improves AUC. Keeping the model.
Training on augumented user 77169 19/50 current_auc = 0.5777777777777777
User 77169 AUC after training: 0.5770011947431303
User 77169 does not improve AUC. Reverting changes.
Training on augumented user 37503 20/50 current_auc = 0.5777777777777777
User 37503 AUC after training: 0.5778972520908006
User 37503 improves AUC. Keeping the model.
Training on augumented user 93636 21/50 current_auc = 0.5778972520908006
User 93636 AUC after training: 0.5752688172043011
User 93636 does not improve AUC. Reverting changes.
Training on augumented user 134493 22/50 current_auc = 0.5778972520908006
User 134493 AUC after training: 0.5759856630824374
User 134493 does not improve AUC. Reverting changes.
Training on augumented user 11909 23/50 current_auc = 0.5778972520908006
User 11909 AUC after training: 0.5776583034647551
User 11909 does not improve AUC. Reverting changes.
Training on augumented user 82932 24/50 current_auc = 0.5778972520908006
User 82932 AUC after training: 0.576941457586619
User 82932 does not improve AUC. Reverting changes.
Training on augumented user 96415 25/50 current_auc = 0.5778972520908006
User 96415 AUC after training: 0.5778972520908005
User 96415 does not improve AUC. Reverting changes.
Training on augumented user 129372 26/50 current_auc = 0.5778972520908006
User 129372 AUC after training: 0.5762246117084826
User 129372 does not improve AUC. Reverting changes.
Training on augumented user 132086 27/50 current_auc = 0.5778972520908006
User 132086 AUC after training: 0.5765830346475509
User 132086 does not improve AUC. Reverting changes.
Training on augumented user 109536 28/50 current_auc = 0.5778972520908006
User 109536 AUC after training: 0.5763440860215054
User 109536 does not improve AUC. Reverting changes.
Training on augumented user 69492 29/50 current_auc = 0.5778972520908006
User 69492 AUC after training: 0.5759856630824374
User 69492 does not improve AUC. Reverting changes.
Training on augumented user 34994 30/50 current_auc = 0.5778972520908006
User 34994 AUC after training: 0.5769414575866189
User 34994 does not improve AUC. Reverting changes.
Training on augumented user 125708 31/50 current_auc = 0.5778972520908006
User 125708 AUC after training: 0.575268817204301
User 125708 does not improve AUC. Reverting changes.
Training on augumented user 108529 32/50 current_auc = 0.5778972520908006
User 108529 AUC after training: 0.5775388291517324
User 108529 does not improve AUC. Reverting changes.
Training on augumented user 64 33/50 current_auc = 0.5778972520908006
User 64 AUC after training: 0.576941457586619
User 64 does not improve AUC. Reverting changes.
Training on augumented user 27700 34/50 current_auc = 0.5778972520908006
User 27700 AUC after training: 0.5770609318996416
User 27700 does not improve AUC. Reverting changes.
Training on augumented user 5479 35/50 current_auc = 0.5778972520908006
User 5479 AUC after training: 0.5769414575866189
User 5479 does not improve AUC. Reverting changes.
Training on augumented user 47246 36/50 current_auc = 0.5778972520908006
User 47246 AUC after training: 0.5768219832735961
User 47246 does not improve AUC. Reverting changes.
Training on augumented user 133478 37/50 current_auc = 0.5778972520908006
User 133478 AUC after training: 0.5770609318996416
User 133478 does not improve AUC. Reverting changes.
Training on augumented user 10244 38/50 current_auc = 0.5778972520908006
User 10244 AUC after training: 0.5774193548387097
User 10244 does not improve AUC. Reverting changes.
Training on augumented user 65766 39/50 current_auc = 0.5778972520908006
User 65766 AUC after training: 0.5776583034647551
User 65766 does not improve AUC. Reverting changes.
Training on augumented user 56987 40/50 current_auc = 0.5778972520908006
User 56987 AUC after training: 0.5753882915173238
User 56987 does not improve AUC. Reverting changes.
Training on augumented user 18950 41/50 current_auc = 0.5778972520908006
User 18950 AUC after training: 0.5765830346475508
User 18950 does not improve AUC. Reverting changes.
Training on augumented user 126463 42/50 current_auc = 0.5778972520908006
User 126463 AUC after training: 0.576941457586619
User 126463 does not improve AUC. Reverting changes.
Training on augumented user 14392 43/50 current_auc = 0.5778972520908006
User 14392 AUC after training: 0.5767025089605735
User 14392 does not improve AUC. Reverting changes.
Training on augumented user 65312 44/50 current_auc = 0.5778972520908006
User 65312 AUC after training: 0.5756272401433692
User 65312 does not improve AUC. Reverting changes.
Training on augumented user 2186 45/50 current_auc = 0.5778972520908006
User 2186 AUC after training: 0.577299880525687
User 2186 does not improve AUC. Reverting changes.
Training on augumented user 133588 46/50 current_auc = 0.5778972520908006
User 133588 AUC after training: 0.5762246117084827
User 133588 does not improve AUC. Reverting changes.
Training on augumented user 72309 47/50 current_auc = 0.5778972520908006
User 72309 AUC after training: 0.57610513739546
User 72309 does not improve AUC. Reverting changes.
Training on augumented user 134371 48/50 current_auc = 0.5778972520908006
User 134371 AUC after training: 0.5782556750298686
User 134371 improves AUC. Keeping the model.
Training on augumented user 79291 49/50 current_auc = 0.5782556750298686
User 79291 AUC after training: 0.5769414575866189
User 79291 does not improve AUC. Reverting changes.
[2024-12-02 20:20:05.482894] start test user 117144 298/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:20:06.204340] start test user 117144 298/567 recall augumented users by random, augumented_users = [34241, 121965, 106700, 48245, 59609, 135816, 20391, 4316, 32536, 118988, 33653, 19434, 35103, 28284, 114236, 134761, 134653, 75133, 380, 45330, 64134, 121737, 75532, 3703, 130502, 138466, 117055, 131638, 2701, 104795, 111230, 50860, 43539, 135432, 58981, 52492, 117363, 53265, 67066, 56836, 11649, 10503, 75730, 105389, 21539, 47905, 80189, 106473, 33723, 82685]
[2024-12-02 20:20:06.229125] user = 117144 Cloud 298/567
[2024-12-02 20:20:06.421200] user = 117144 Local 298/567
[2024-12-02 20:20:06.786218] user = 117144 Local+ 298/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:20:08.950251] user = 117144 MPDA- 298/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5889227642276423
Training on augumented user 34241 0/50 current_auc = 0.5889227642276423
User 34241 AUC after training: 0.5887247914686939
User 34241 does not improve AUC. Reverting changes.
Training on augumented user 121965 1/50 current_auc = 0.5889227642276423
User 121965 AUC after training: 0.5893583042973287
User 121965 improves AUC. Keeping the model.
Training on augumented user 106700 2/50 current_auc = 0.5893583042973287
User 106700 AUC after training: 0.5891405342624855
User 106700 does not improve AUC. Reverting changes.
Training on augumented user 48245 3/50 current_auc = 0.5893583042973287
User 48245 AUC after training: 0.5892527188258896
User 48245 does not improve AUC. Reverting changes.
Training on augumented user 59609 4/50 current_auc = 0.5893583042973287
User 59609 AUC after training: 0.5898796325625594
User 59609 improves AUC. Keeping the model.
Training on augumented user 135816 5/50 current_auc = 0.5898796325625594
User 135816 AUC after training: 0.589444092492873
User 135816 does not improve AUC. Reverting changes.
Training on augumented user 20391 6/50 current_auc = 0.5898796325625594
User 20391 AUC after training: 0.5897476507232605
User 20391 does not improve AUC. Reverting changes.
Training on augumented user 4316 7/50 current_auc = 0.5898796325625594
User 4316 AUC after training: 0.5891405342624856
User 4316 does not improve AUC. Reverting changes.
Training on augumented user 32536 8/50 current_auc = 0.5898796325625594
User 32536 AUC after training: 0.5893978988491184
User 32536 does not improve AUC. Reverting changes.
Training on augumented user 118988 9/50 current_auc = 0.5898796325625594
User 118988 AUC after training: 0.5897179548094182
User 118988 does not improve AUC. Reverting changes.
Training on augumented user 33653 10/50 current_auc = 0.5898796325625594
User 33653 AUC after training: 0.5894638897687678
User 33653 does not improve AUC. Reverting changes.
Training on augumented user 19434 11/50 current_auc = 0.5898796325625594
User 19434 AUC after training: 0.5896420652518213
User 19434 does not improve AUC. Reverting changes.
Training on augumented user 35103 12/50 current_auc = 0.5898796325625594
User 35103 AUC after training: 0.589444092492873
User 35103 does not improve AUC. Reverting changes.
Training on augumented user 28284 13/50 current_auc = 0.5898796325625594
User 28284 AUC after training: 0.589744351177278
User 28284 does not improve AUC. Reverting changes.
Training on augumented user 114236 14/50 current_auc = 0.5898796325625594
User 114236 AUC after training: 0.5898862316545244
User 114236 improves AUC. Keeping the model.
Training on augumented user 134761 15/50 current_auc = 0.5898862316545244
User 134761 AUC after training: 0.5896090697919967
User 134761 does not improve AUC. Reverting changes.
Training on augumented user 134653 16/50 current_auc = 0.5898862316545244
User 134653 AUC after training: 0.5890877415267659
User 134653 does not improve AUC. Reverting changes.
Training on augumented user 75133 17/50 current_auc = 0.5898862316545244
User 75133 AUC after training: 0.5898994298384542
User 75133 improves AUC. Keeping the model.
Training on augumented user 380 18/50 current_auc = 0.5898994298384542
User 380 AUC after training: 0.5896486643437864
User 380 does not improve AUC. Reverting changes.
Training on augumented user 45330 19/50 current_auc = 0.5898994298384542
User 45330 AUC after training: 0.5898202407348748
User 45330 does not improve AUC. Reverting changes.
Training on augumented user 64134 20/50 current_auc = 0.5898994298384542
User 64134 AUC after training: 0.5896981575335234
User 64134 does not improve AUC. Reverting changes.
Training on augumented user 121737 21/50 current_auc = 0.5898994298384542
User 121737 AUC after training: 0.5899786189420336
User 121737 improves AUC. Keeping the model.
Training on augumented user 75532 22/50 current_auc = 0.5899786189420336
User 75532 AUC after training: 0.5898268398268398
User 75532 does not improve AUC. Reverting changes.
Training on augumented user 3703 23/50 current_auc = 0.5899786189420336
User 3703 AUC after training: 0.5902557808045612
User 3703 improves AUC. Keeping the model.
Training on augumented user 130502 24/50 current_auc = 0.5902557808045612
User 130502 AUC after training: 0.5887049941927991
User 130502 does not improve AUC. Reverting changes.
Training on augumented user 138466 25/50 current_auc = 0.5902557808045612
User 138466 AUC after training: 0.5899126280223841
User 138466 does not improve AUC. Reverting changes.
Training on augumented user 117055 26/50 current_auc = 0.5902557808045612
User 117055 AUC after training: 0.5899390243902439
User 117055 does not improve AUC. Reverting changes.
Training on augumented user 131638 27/50 current_auc = 0.5902557808045612
User 131638 AUC after training: 0.5902557808045613
User 131638 improves AUC. Keeping the model.
Training on augumented user 2701 28/50 current_auc = 0.5902557808045613
User 2701 AUC after training: 0.5902821771724212
User 2701 improves AUC. Keeping the model.
Training on augumented user 104795 29/50 current_auc = 0.5902821771724212
User 104795 AUC after training: 0.5899390243902439
User 104795 does not improve AUC. Reverting changes.
Training on augumented user 111230 30/50 current_auc = 0.5902821771724212
User 111230 AUC after training: 0.5906253299545983
User 111230 improves AUC. Keeping the model.
Training on augumented user 50860 31/50 current_auc = 0.5906253299545983
User 50860 AUC after training: 0.5904669517474395
User 50860 does not improve AUC. Reverting changes.
Training on augumented user 43539 32/50 current_auc = 0.5906253299545983
User 43539 AUC after training: 0.5901106007813325
User 43539 does not improve AUC. Reverting changes.
Training on augumented user 135432 33/50 current_auc = 0.5906253299545983
User 135432 AUC after training: 0.5911136627600043
User 135432 improves AUC. Keeping the model.
Training on augumented user 58981 34/50 current_auc = 0.5911136627600043
User 58981 AUC after training: 0.591140059127864
User 58981 improves AUC. Keeping the model.
Training on augumented user 52492 35/50 current_auc = 0.591140059127864
User 52492 AUC after training: 0.5912390455073382
User 52492 improves AUC. Keeping the model.
Training on augumented user 117363 36/50 current_auc = 0.5912390455073382
User 117363 AUC after training: 0.5892857142857143
User 117363 does not improve AUC. Reverting changes.
Training on augumented user 53265 37/50 current_auc = 0.5912390455073382
User 53265 AUC after training: 0.5900710062295429
User 53265 does not improve AUC. Reverting changes.
Training on augumented user 67066 38/50 current_auc = 0.5912390455073382
User 67066 AUC after training: 0.5909024918171261
User 67066 does not improve AUC. Reverting changes.
Training on augumented user 56836 39/50 current_auc = 0.5912390455073382
User 56836 AUC after training: 0.5909354872769507
User 56836 does not improve AUC. Reverting changes.
Training on augumented user 11649 40/50 current_auc = 0.5912390455073382
User 11649 AUC after training: 0.5911136627600043
User 11649 does not improve AUC. Reverting changes.
Training on augumented user 10503 41/50 current_auc = 0.5912390455073382
User 10503 AUC after training: 0.591390824622532
User 10503 improves AUC. Keeping the model.
Training on augumented user 75730 42/50 current_auc = 0.591390824622532
User 75730 AUC after training: 0.5915558019216557
User 75730 improves AUC. Keeping the model.
Training on augumented user 105389 43/50 current_auc = 0.5915558019216557
User 105389 AUC after training: 0.590163393517052
User 105389 does not improve AUC. Reverting changes.
Training on augumented user 21539 44/50 current_auc = 0.5915558019216557
User 21539 AUC after training: 0.5915953964734453
User 21539 improves AUC. Keeping the model.
Training on augumented user 47905 45/50 current_auc = 0.5915953964734453
User 47905 AUC after training: 0.5913314327948475
User 47905 does not improve AUC. Reverting changes.
Training on augumented user 80189 46/50 current_auc = 0.5915953964734453
User 80189 AUC after training: 0.5916415901171999
User 80189 improves AUC. Keeping the model.
Training on augumented user 106473 47/50 current_auc = 0.5916415901171999
User 106473 AUC after training: 0.5914634146341463
User 106473 does not improve AUC. Reverting changes.
Training on augumented user 33723 48/50 current_auc = 0.5916415901171999
User 33723 AUC after training: 0.591634991025235
User 33723 does not improve AUC. Reverting changes.
Training on augumented user 82685 49/50 current_auc = 0.5916415901171999
User 82685 AUC after training: 0.5915426037377257
User 82685 does not improve AUC. Reverting changes.
[2024-12-02 20:20:41.622753] start test user 117165 299/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:20:42.175765] start test user 117165 299/567 recall augumented users by random, augumented_users = [39193, 90945, 40812, 64913, 116278, 40872, 90656, 32802, 705, 26434, 24438, 134742, 113450, 105234, 19065, 29220, 126378, 110732, 88485, 1989, 44596, 24531, 41445, 38020, 69257, 104375, 53974, 4413, 115568, 71050, 112908, 64999, 4403, 92624, 67729, 473, 119758, 112791, 30536, 14604, 87684, 103747, 92760, 108427, 92225, 119587, 118125, 120052, 78422, 14037]
[2024-12-02 20:20:42.194114] user = 117165 Cloud 299/567
[2024-12-02 20:20:42.205981] user = 117165 Local 299/567
[2024-12-02 20:20:42.252351] user = 117165 Local+ 299/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:20:44.238452] user = 117165 MPDA- 299/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7708333333333334
Training on augumented user 39193 0/50 current_auc = 0.7708333333333334
User 39193 AUC after training: 0.7916666666666667
User 39193 improves AUC. Keeping the model.
Training on augumented user 90945 1/50 current_auc = 0.7916666666666667
User 90945 AUC after training: 0.7916666666666667
User 90945 does not improve AUC. Reverting changes.
Training on augumented user 40812 2/50 current_auc = 0.7916666666666667
User 40812 AUC after training: 0.7916666666666667
User 40812 does not improve AUC. Reverting changes.
Training on augumented user 64913 3/50 current_auc = 0.7916666666666667
User 64913 AUC after training: 0.7916666666666667
User 64913 does not improve AUC. Reverting changes.
Training on augumented user 116278 4/50 current_auc = 0.7916666666666667
User 116278 AUC after training: 0.7708333333333334
User 116278 does not improve AUC. Reverting changes.
Training on augumented user 40872 5/50 current_auc = 0.7916666666666667
User 40872 AUC after training: 0.7708333333333334
User 40872 does not improve AUC. Reverting changes.
Training on augumented user 90656 6/50 current_auc = 0.7916666666666667
User 90656 AUC after training: 0.7916666666666667
User 90656 does not improve AUC. Reverting changes.
Training on augumented user 32802 7/50 current_auc = 0.7916666666666667
User 32802 AUC after training: 0.7708333333333334
User 32802 does not improve AUC. Reverting changes.
Training on augumented user 705 8/50 current_auc = 0.7916666666666667
User 705 AUC after training: 0.7916666666666667
User 705 does not improve AUC. Reverting changes.
Training on augumented user 26434 9/50 current_auc = 0.7916666666666667
User 26434 AUC after training: 0.7916666666666667
User 26434 does not improve AUC. Reverting changes.
Training on augumented user 24438 10/50 current_auc = 0.7916666666666667
User 24438 AUC after training: 0.7916666666666667
User 24438 does not improve AUC. Reverting changes.
Training on augumented user 134742 11/50 current_auc = 0.7916666666666667
User 134742 AUC after training: 0.7708333333333334
User 134742 does not improve AUC. Reverting changes.
Training on augumented user 113450 12/50 current_auc = 0.7916666666666667
User 113450 AUC after training: 0.7916666666666667
User 113450 does not improve AUC. Reverting changes.
Training on augumented user 105234 13/50 current_auc = 0.7916666666666667
User 105234 AUC after training: 0.78125
User 105234 does not improve AUC. Reverting changes.
Training on augumented user 19065 14/50 current_auc = 0.7916666666666667
User 19065 AUC after training: 0.7916666666666667
User 19065 does not improve AUC. Reverting changes.
Training on augumented user 29220 15/50 current_auc = 0.7916666666666667
User 29220 AUC after training: 0.7916666666666667
User 29220 does not improve AUC. Reverting changes.
Training on augumented user 126378 16/50 current_auc = 0.7916666666666667
User 126378 AUC after training: 0.7916666666666667
User 126378 does not improve AUC. Reverting changes.
Training on augumented user 110732 17/50 current_auc = 0.7916666666666667
User 110732 AUC after training: 0.7708333333333334
User 110732 does not improve AUC. Reverting changes.
Training on augumented user 88485 18/50 current_auc = 0.7916666666666667
User 88485 AUC after training: 0.7916666666666667
User 88485 does not improve AUC. Reverting changes.
Training on augumented user 1989 19/50 current_auc = 0.7916666666666667
User 1989 AUC after training: 0.7916666666666667
User 1989 does not improve AUC. Reverting changes.
Training on augumented user 44596 20/50 current_auc = 0.7916666666666667
User 44596 AUC after training: 0.7916666666666667
User 44596 does not improve AUC. Reverting changes.
Training on augumented user 24531 21/50 current_auc = 0.7916666666666667
User 24531 AUC after training: 0.7916666666666667
User 24531 does not improve AUC. Reverting changes.
Training on augumented user 41445 22/50 current_auc = 0.7916666666666667
User 41445 AUC after training: 0.7708333333333334
User 41445 does not improve AUC. Reverting changes.
Training on augumented user 38020 23/50 current_auc = 0.7916666666666667
User 38020 AUC after training: 0.7708333333333334
User 38020 does not improve AUC. Reverting changes.
Training on augumented user 69257 24/50 current_auc = 0.7916666666666667
User 69257 AUC after training: 0.7916666666666667
User 69257 does not improve AUC. Reverting changes.
Training on augumented user 104375 25/50 current_auc = 0.7916666666666667
User 104375 AUC after training: 0.7916666666666667
User 104375 does not improve AUC. Reverting changes.
Training on augumented user 53974 26/50 current_auc = 0.7916666666666667
User 53974 AUC after training: 0.7916666666666667
User 53974 does not improve AUC. Reverting changes.
Training on augumented user 4413 27/50 current_auc = 0.7916666666666667
User 4413 AUC after training: 0.7916666666666667
User 4413 does not improve AUC. Reverting changes.
Training on augumented user 115568 28/50 current_auc = 0.7916666666666667
User 115568 AUC after training: 0.7916666666666667
User 115568 does not improve AUC. Reverting changes.
Training on augumented user 71050 29/50 current_auc = 0.7916666666666667
User 71050 AUC after training: 0.7916666666666667
User 71050 does not improve AUC. Reverting changes.
Training on augumented user 112908 30/50 current_auc = 0.7916666666666667
User 112908 AUC after training: 0.7916666666666667
User 112908 does not improve AUC. Reverting changes.
Training on augumented user 64999 31/50 current_auc = 0.7916666666666667
User 64999 AUC after training: 0.7916666666666667
User 64999 does not improve AUC. Reverting changes.
Training on augumented user 4403 32/50 current_auc = 0.7916666666666667
User 4403 AUC after training: 0.7916666666666667
User 4403 does not improve AUC. Reverting changes.
Training on augumented user 92624 33/50 current_auc = 0.7916666666666667
User 92624 AUC after training: 0.7916666666666667
User 92624 does not improve AUC. Reverting changes.
Training on augumented user 67729 34/50 current_auc = 0.7916666666666667
User 67729 AUC after training: 0.78125
User 67729 does not improve AUC. Reverting changes.
Training on augumented user 473 35/50 current_auc = 0.7916666666666667
User 473 AUC after training: 0.78125
User 473 does not improve AUC. Reverting changes.
Training on augumented user 119758 36/50 current_auc = 0.7916666666666667
User 119758 AUC after training: 0.7708333333333334
User 119758 does not improve AUC. Reverting changes.
Training on augumented user 112791 37/50 current_auc = 0.7916666666666667
User 112791 AUC after training: 0.7916666666666667
User 112791 does not improve AUC. Reverting changes.
Training on augumented user 30536 38/50 current_auc = 0.7916666666666667
User 30536 AUC after training: 0.7916666666666667
User 30536 does not improve AUC. Reverting changes.
Training on augumented user 14604 39/50 current_auc = 0.7916666666666667
User 14604 AUC after training: 0.7916666666666667
User 14604 does not improve AUC. Reverting changes.
Training on augumented user 87684 40/50 current_auc = 0.7916666666666667
User 87684 AUC after training: 0.7916666666666667
User 87684 does not improve AUC. Reverting changes.
Training on augumented user 103747 41/50 current_auc = 0.7916666666666667
User 103747 AUC after training: 0.7708333333333334
User 103747 does not improve AUC. Reverting changes.
Training on augumented user 92760 42/50 current_auc = 0.7916666666666667
User 92760 AUC after training: 0.7916666666666667
User 92760 does not improve AUC. Reverting changes.
Training on augumented user 108427 43/50 current_auc = 0.7916666666666667
User 108427 AUC after training: 0.7708333333333334
User 108427 does not improve AUC. Reverting changes.
Training on augumented user 92225 44/50 current_auc = 0.7916666666666667
User 92225 AUC after training: 0.7916666666666667
User 92225 does not improve AUC. Reverting changes.
Training on augumented user 119587 45/50 current_auc = 0.7916666666666667
User 119587 AUC after training: 0.7916666666666667
User 119587 does not improve AUC. Reverting changes.
Training on augumented user 118125 46/50 current_auc = 0.7916666666666667
User 118125 AUC after training: 0.78125
User 118125 does not improve AUC. Reverting changes.
Training on augumented user 120052 47/50 current_auc = 0.7916666666666667
User 120052 AUC after training: 0.7916666666666667
User 120052 does not improve AUC. Reverting changes.
Training on augumented user 78422 48/50 current_auc = 0.7916666666666667
User 78422 AUC after training: 0.7916666666666667
User 78422 does not improve AUC. Reverting changes.
Training on augumented user 14037 49/50 current_auc = 0.7916666666666667
User 14037 AUC after training: 0.7604166666666667
User 14037 does not improve AUC. Reverting changes.
[2024-12-02 20:21:15.643950] start test user 117169 300/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:21:16.312920] start test user 117169 300/567 recall augumented users by random, augumented_users = [55716, 7476, 1278, 119274, 4185, 87861, 103405, 36444, 60446, 12635, 66922, 127923, 114138, 59624, 43915, 123824, 21830, 134530, 76206, 29193, 123416, 6827, 113551, 98777, 11848, 55774, 125143, 19499, 131260, 16192, 123166, 46744, 49229, 81221, 26580, 103880, 136774, 124766, 71723, 37199, 43937, 38787, 51776, 137934, 57980, 4548, 122230, 99808, 49262, 15205]
[2024-12-02 20:21:16.327440] user = 117169 Cloud 300/567
[2024-12-02 20:21:16.336069] user = 117169 Local 300/567
[2024-12-02 20:21:16.436621] user = 117169 Local+ 300/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:21:18.874060] user = 117169 MPDA- 300/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.0
Training on augumented user 55716 0/50 current_auc = 0.0
User 55716 AUC after training: 0.0
User 55716 does not improve AUC. Reverting changes.
Training on augumented user 7476 1/50 current_auc = 0.0
User 7476 AUC after training: 0.0
User 7476 does not improve AUC. Reverting changes.
Training on augumented user 1278 2/50 current_auc = 0.0
User 1278 AUC after training: 0.0
User 1278 does not improve AUC. Reverting changes.
Training on augumented user 119274 3/50 current_auc = 0.0
User 119274 AUC after training: 0.0
User 119274 does not improve AUC. Reverting changes.
Training on augumented user 4185 4/50 current_auc = 0.0
User 4185 AUC after training: 0.0
User 4185 does not improve AUC. Reverting changes.
Training on augumented user 87861 5/50 current_auc = 0.0
User 87861 AUC after training: 0.0
User 87861 does not improve AUC. Reverting changes.
Training on augumented user 103405 6/50 current_auc = 0.0
User 103405 AUC after training: 0.0
User 103405 does not improve AUC. Reverting changes.
Training on augumented user 36444 7/50 current_auc = 0.0
User 36444 AUC after training: 0.0
User 36444 does not improve AUC. Reverting changes.
Training on augumented user 60446 8/50 current_auc = 0.0
User 60446 AUC after training: 0.0
User 60446 does not improve AUC. Reverting changes.
Training on augumented user 12635 9/50 current_auc = 0.0
User 12635 AUC after training: 0.0
User 12635 does not improve AUC. Reverting changes.
Training on augumented user 66922 10/50 current_auc = 0.0
User 66922 AUC after training: 0.0
User 66922 does not improve AUC. Reverting changes.
Training on augumented user 127923 11/50 current_auc = 0.0
User 127923 AUC after training: 0.0
User 127923 does not improve AUC. Reverting changes.
Training on augumented user 114138 12/50 current_auc = 0.0
User 114138 AUC after training: 0.0
User 114138 does not improve AUC. Reverting changes.
Training on augumented user 59624 13/50 current_auc = 0.0
User 59624 AUC after training: 0.0
User 59624 does not improve AUC. Reverting changes.
Training on augumented user 43915 14/50 current_auc = 0.0
User 43915 AUC after training: 0.0
User 43915 does not improve AUC. Reverting changes.
Training on augumented user 123824 15/50 current_auc = 0.0
User 123824 AUC after training: 0.0
User 123824 does not improve AUC. Reverting changes.
Training on augumented user 21830 16/50 current_auc = 0.0
User 21830 AUC after training: 0.0
User 21830 does not improve AUC. Reverting changes.
Training on augumented user 134530 17/50 current_auc = 0.0
User 134530 AUC after training: 0.0
User 134530 does not improve AUC. Reverting changes.
Training on augumented user 76206 18/50 current_auc = 0.0
User 76206 AUC after training: 0.0
User 76206 does not improve AUC. Reverting changes.
Training on augumented user 29193 19/50 current_auc = 0.0
User 29193 AUC after training: 0.0
User 29193 does not improve AUC. Reverting changes.
Training on augumented user 123416 20/50 current_auc = 0.0
User 123416 AUC after training: 0.0
User 123416 does not improve AUC. Reverting changes.
Training on augumented user 6827 21/50 current_auc = 0.0
User 6827 AUC after training: 0.0
User 6827 does not improve AUC. Reverting changes.
Training on augumented user 113551 22/50 current_auc = 0.0
User 113551 AUC after training: 0.0
User 113551 does not improve AUC. Reverting changes.
Training on augumented user 98777 23/50 current_auc = 0.0
User 98777 AUC after training: 0.0
User 98777 does not improve AUC. Reverting changes.
Training on augumented user 11848 24/50 current_auc = 0.0
User 11848 AUC after training: 0.0
User 11848 does not improve AUC. Reverting changes.
Training on augumented user 55774 25/50 current_auc = 0.0
User 55774 AUC after training: 0.0
User 55774 does not improve AUC. Reverting changes.
Training on augumented user 125143 26/50 current_auc = 0.0
User 125143 AUC after training: 0.0
User 125143 does not improve AUC. Reverting changes.
Training on augumented user 19499 27/50 current_auc = 0.0
User 19499 AUC after training: 0.0
User 19499 does not improve AUC. Reverting changes.
Training on augumented user 131260 28/50 current_auc = 0.0
User 131260 AUC after training: 0.0
User 131260 does not improve AUC. Reverting changes.
Training on augumented user 16192 29/50 current_auc = 0.0
User 16192 AUC after training: 0.0
User 16192 does not improve AUC. Reverting changes.
Training on augumented user 123166 30/50 current_auc = 0.0
User 123166 AUC after training: 0.0
User 123166 does not improve AUC. Reverting changes.
Training on augumented user 46744 31/50 current_auc = 0.0
User 46744 AUC after training: 0.0
User 46744 does not improve AUC. Reverting changes.
Training on augumented user 49229 32/50 current_auc = 0.0
User 49229 AUC after training: 0.0
User 49229 does not improve AUC. Reverting changes.
Training on augumented user 81221 33/50 current_auc = 0.0
User 81221 AUC after training: 0.0
User 81221 does not improve AUC. Reverting changes.
Training on augumented user 26580 34/50 current_auc = 0.0
User 26580 AUC after training: 0.0
User 26580 does not improve AUC. Reverting changes.
Training on augumented user 103880 35/50 current_auc = 0.0
User 103880 AUC after training: 0.0
User 103880 does not improve AUC. Reverting changes.
Training on augumented user 136774 36/50 current_auc = 0.0
User 136774 AUC after training: 0.0
User 136774 does not improve AUC. Reverting changes.
Training on augumented user 124766 37/50 current_auc = 0.0
User 124766 AUC after training: 0.0
User 124766 does not improve AUC. Reverting changes.
Training on augumented user 71723 38/50 current_auc = 0.0
User 71723 AUC after training: 0.0
User 71723 does not improve AUC. Reverting changes.
Training on augumented user 37199 39/50 current_auc = 0.0
User 37199 AUC after training: 0.0
User 37199 does not improve AUC. Reverting changes.
Training on augumented user 43937 40/50 current_auc = 0.0
User 43937 AUC after training: 0.0
User 43937 does not improve AUC. Reverting changes.
Training on augumented user 38787 41/50 current_auc = 0.0
User 38787 AUC after training: 0.0
User 38787 does not improve AUC. Reverting changes.
Training on augumented user 51776 42/50 current_auc = 0.0
User 51776 AUC after training: 0.0
User 51776 does not improve AUC. Reverting changes.
Training on augumented user 137934 43/50 current_auc = 0.0
User 137934 AUC after training: 0.0
User 137934 does not improve AUC. Reverting changes.
Training on augumented user 57980 44/50 current_auc = 0.0
User 57980 AUC after training: 0.0
User 57980 does not improve AUC. Reverting changes.
Training on augumented user 4548 45/50 current_auc = 0.0
User 4548 AUC after training: 0.0
User 4548 does not improve AUC. Reverting changes.
Training on augumented user 122230 46/50 current_auc = 0.0
User 122230 AUC after training: 0.0
User 122230 does not improve AUC. Reverting changes.
Training on augumented user 99808 47/50 current_auc = 0.0
User 99808 AUC after training: 0.0
User 99808 does not improve AUC. Reverting changes.
Training on augumented user 49262 48/50 current_auc = 0.0
User 49262 AUC after training: 0.0
User 49262 does not improve AUC. Reverting changes.
Training on augumented user 15205 49/50 current_auc = 0.0
User 15205 AUC after training: 0.0
User 15205 does not improve AUC. Reverting changes.
[2024-12-02 20:21:44.648731] start test user 117190 301/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:21:45.075761] start test user 117190 301/567 recall augumented users by random, augumented_users = [8184, 79828, 44635, 44505, 18460, 119010, 62580, 106129, 46089, 37985, 102001, 138308, 105674, 66724, 58466, 85227, 36176, 106841, 31802, 9961, 68019, 85695, 97075, 29248, 49046, 14725, 136661, 12975, 114775, 13141, 123408, 12164, 37998, 128583, 79788, 132628, 7172, 97710, 107634, 35704, 46780, 132538, 36556, 9977, 10070, 133700, 49104, 111809, 124208, 114455]
[2024-12-02 20:21:45.091485] user = 117190 Cloud 301/567
[2024-12-02 20:21:45.105280] user = 117190 Local 301/567
[2024-12-02 20:21:45.166424] user = 117190 Local+ 301/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:21:47.338411] user = 117190 MPDA- 301/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6755050505050506
Training on augumented user 8184 0/50 current_auc = 0.6755050505050506
User 8184 AUC after training: 0.6755050505050505
User 8184 does not improve AUC. Reverting changes.
Training on augumented user 79828 1/50 current_auc = 0.6755050505050506
User 79828 AUC after training: 0.672979797979798
User 79828 does not improve AUC. Reverting changes.
Training on augumented user 44635 2/50 current_auc = 0.6755050505050506
User 44635 AUC after training: 0.6755050505050506
User 44635 does not improve AUC. Reverting changes.
Training on augumented user 44505 3/50 current_auc = 0.6755050505050506
User 44505 AUC after training: 0.6818181818181819
User 44505 improves AUC. Keeping the model.
Training on augumented user 18460 4/50 current_auc = 0.6818181818181819
User 18460 AUC after training: 0.6818181818181819
User 18460 does not improve AUC. Reverting changes.
Training on augumented user 119010 5/50 current_auc = 0.6818181818181819
User 119010 AUC after training: 0.6805555555555556
User 119010 does not improve AUC. Reverting changes.
Training on augumented user 62580 6/50 current_auc = 0.6818181818181819
User 62580 AUC after training: 0.6805555555555556
User 62580 does not improve AUC. Reverting changes.
Training on augumented user 106129 7/50 current_auc = 0.6818181818181819
User 106129 AUC after training: 0.6818181818181819
User 106129 does not improve AUC. Reverting changes.
Training on augumented user 46089 8/50 current_auc = 0.6818181818181819
User 46089 AUC after training: 0.6805555555555557
User 46089 does not improve AUC. Reverting changes.
Training on augumented user 37985 9/50 current_auc = 0.6818181818181819
User 37985 AUC after training: 0.6818181818181819
User 37985 does not improve AUC. Reverting changes.
Training on augumented user 102001 10/50 current_auc = 0.6818181818181819
User 102001 AUC after training: 0.6767676767676768
User 102001 does not improve AUC. Reverting changes.
Training on augumented user 138308 11/50 current_auc = 0.6818181818181819
User 138308 AUC after training: 0.6805555555555557
User 138308 does not improve AUC. Reverting changes.
Training on augumented user 105674 12/50 current_auc = 0.6818181818181819
User 105674 AUC after training: 0.6818181818181819
User 105674 does not improve AUC. Reverting changes.
Training on augumented user 66724 13/50 current_auc = 0.6818181818181819
User 66724 AUC after training: 0.6818181818181819
User 66724 does not improve AUC. Reverting changes.
Training on augumented user 58466 14/50 current_auc = 0.6818181818181819
User 58466 AUC after training: 0.6792929292929294
User 58466 does not improve AUC. Reverting changes.
Training on augumented user 85227 15/50 current_auc = 0.6818181818181819
User 85227 AUC after training: 0.6818181818181819
User 85227 does not improve AUC. Reverting changes.
Training on augumented user 36176 16/50 current_auc = 0.6818181818181819
User 36176 AUC after training: 0.6792929292929294
User 36176 does not improve AUC. Reverting changes.
Training on augumented user 106841 17/50 current_auc = 0.6818181818181819
User 106841 AUC after training: 0.6805555555555557
User 106841 does not improve AUC. Reverting changes.
Training on augumented user 31802 18/50 current_auc = 0.6818181818181819
User 31802 AUC after training: 0.6767676767676768
User 31802 does not improve AUC. Reverting changes.
Training on augumented user 9961 19/50 current_auc = 0.6818181818181819
User 9961 AUC after training: 0.6818181818181819
User 9961 does not improve AUC. Reverting changes.
Training on augumented user 68019 20/50 current_auc = 0.6818181818181819
User 68019 AUC after training: 0.6792929292929293
User 68019 does not improve AUC. Reverting changes.
Training on augumented user 85695 21/50 current_auc = 0.6818181818181819
User 85695 AUC after training: 0.6805555555555557
User 85695 does not improve AUC. Reverting changes.
Training on augumented user 97075 22/50 current_auc = 0.6818181818181819
User 97075 AUC after training: 0.6780303030303031
User 97075 does not improve AUC. Reverting changes.
Training on augumented user 29248 23/50 current_auc = 0.6818181818181819
User 29248 AUC after training: 0.6818181818181819
User 29248 does not improve AUC. Reverting changes.
Training on augumented user 49046 24/50 current_auc = 0.6818181818181819
User 49046 AUC after training: 0.6805555555555557
User 49046 does not improve AUC. Reverting changes.
Training on augumented user 14725 25/50 current_auc = 0.6818181818181819
User 14725 AUC after training: 0.6805555555555556
User 14725 does not improve AUC. Reverting changes.
Training on augumented user 136661 26/50 current_auc = 0.6818181818181819
User 136661 AUC after training: 0.6818181818181819
User 136661 does not improve AUC. Reverting changes.
Training on augumented user 12975 27/50 current_auc = 0.6818181818181819
User 12975 AUC after training: 0.6792929292929293
User 12975 does not improve AUC. Reverting changes.
Training on augumented user 114775 28/50 current_auc = 0.6818181818181819
User 114775 AUC after training: 0.6818181818181819
User 114775 does not improve AUC. Reverting changes.
Training on augumented user 13141 29/50 current_auc = 0.6818181818181819
User 13141 AUC after training: 0.6780303030303031
User 13141 does not improve AUC. Reverting changes.
Training on augumented user 123408 30/50 current_auc = 0.6818181818181819
User 123408 AUC after training: 0.6843434343434344
User 123408 improves AUC. Keeping the model.
Training on augumented user 12164 31/50 current_auc = 0.6843434343434344
User 12164 AUC after training: 0.6792929292929293
User 12164 does not improve AUC. Reverting changes.
Training on augumented user 37998 32/50 current_auc = 0.6843434343434344
User 37998 AUC after training: 0.6830808080808081
User 37998 does not improve AUC. Reverting changes.
Training on augumented user 128583 33/50 current_auc = 0.6843434343434344
User 128583 AUC after training: 0.6843434343434344
User 128583 does not improve AUC. Reverting changes.
Training on augumented user 79788 34/50 current_auc = 0.6843434343434344
User 79788 AUC after training: 0.6843434343434344
User 79788 does not improve AUC. Reverting changes.
Training on augumented user 132628 35/50 current_auc = 0.6843434343434344
User 132628 AUC after training: 0.6830808080808081
User 132628 does not improve AUC. Reverting changes.
Training on augumented user 7172 36/50 current_auc = 0.6843434343434344
User 7172 AUC after training: 0.6792929292929293
User 7172 does not improve AUC. Reverting changes.
Training on augumented user 97710 37/50 current_auc = 0.6843434343434344
User 97710 AUC after training: 0.6830808080808081
User 97710 does not improve AUC. Reverting changes.
Training on augumented user 107634 38/50 current_auc = 0.6843434343434344
User 107634 AUC after training: 0.6830808080808081
User 107634 does not improve AUC. Reverting changes.
Training on augumented user 35704 39/50 current_auc = 0.6843434343434344
User 35704 AUC after training: 0.6843434343434344
User 35704 does not improve AUC. Reverting changes.
Training on augumented user 46780 40/50 current_auc = 0.6843434343434344
User 46780 AUC after training: 0.6843434343434344
User 46780 does not improve AUC. Reverting changes.
Training on augumented user 132538 41/50 current_auc = 0.6843434343434344
User 132538 AUC after training: 0.6830808080808081
User 132538 does not improve AUC. Reverting changes.
Training on augumented user 36556 42/50 current_auc = 0.6843434343434344
User 36556 AUC after training: 0.6843434343434344
User 36556 does not improve AUC. Reverting changes.
Training on augumented user 9977 43/50 current_auc = 0.6843434343434344
User 9977 AUC after training: 0.6843434343434344
User 9977 does not improve AUC. Reverting changes.
Training on augumented user 10070 44/50 current_auc = 0.6843434343434344
User 10070 AUC after training: 0.6830808080808081
User 10070 does not improve AUC. Reverting changes.
Training on augumented user 133700 45/50 current_auc = 0.6843434343434344
User 133700 AUC after training: 0.6805555555555556
User 133700 does not improve AUC. Reverting changes.
Training on augumented user 49104 46/50 current_auc = 0.6843434343434344
User 49104 AUC after training: 0.6830808080808081
User 49104 does not improve AUC. Reverting changes.
Training on augumented user 111809 47/50 current_auc = 0.6843434343434344
User 111809 AUC after training: 0.6830808080808081
User 111809 does not improve AUC. Reverting changes.
Training on augumented user 124208 48/50 current_auc = 0.6843434343434344
User 124208 AUC after training: 0.6856060606060607
User 124208 improves AUC. Keeping the model.
Training on augumented user 114455 49/50 current_auc = 0.6856060606060607
User 114455 AUC after training: 0.6830808080808081
User 114455 does not improve AUC. Reverting changes.
[2024-12-02 20:22:13.635655] start test user 117217 302/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:22:14.424020] start test user 117217 302/567 recall augumented users by random, augumented_users = [92452, 27703, 119347, 29642, 63322, 94244, 2063, 105257, 36230, 35765, 30945, 73060, 43745, 9579, 133019, 19376, 5047, 25968, 62462, 122862, 59005, 60086, 6864, 79714, 97749, 28054, 16759, 73508, 125129, 86703, 51289, 89096, 110704, 12784, 61751, 95968, 132408, 85484, 96140, 74285, 89840, 39616, 95310, 98959, 12365, 62664, 81673, 105109, 106532, 84707]
[2024-12-02 20:22:14.453511] user = 117217 Cloud 302/567
[2024-12-02 20:22:14.489163] user = 117217 Local 302/567
[2024-12-02 20:22:14.625347] user = 117217 Local+ 302/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:22:16.832572] user = 117217 MPDA- 302/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.47619047619047616
Training on augumented user 92452 0/50 current_auc = 0.47619047619047616
User 92452 AUC after training: 0.47619047619047616
User 92452 does not improve AUC. Reverting changes.
Training on augumented user 27703 1/50 current_auc = 0.47619047619047616
User 27703 AUC after training: 0.47619047619047616
User 27703 does not improve AUC. Reverting changes.
Training on augumented user 119347 2/50 current_auc = 0.47619047619047616
User 119347 AUC after training: 0.47619047619047616
User 119347 does not improve AUC. Reverting changes.
Training on augumented user 29642 3/50 current_auc = 0.47619047619047616
User 29642 AUC after training: 0.47619047619047616
User 29642 does not improve AUC. Reverting changes.
Training on augumented user 63322 4/50 current_auc = 0.47619047619047616
User 63322 AUC after training: 0.47619047619047616
User 63322 does not improve AUC. Reverting changes.
Training on augumented user 94244 5/50 current_auc = 0.47619047619047616
User 94244 AUC after training: 0.47619047619047616
User 94244 does not improve AUC. Reverting changes.
Training on augumented user 2063 6/50 current_auc = 0.47619047619047616
User 2063 AUC after training: 0.47619047619047616
User 2063 does not improve AUC. Reverting changes.
Training on augumented user 105257 7/50 current_auc = 0.47619047619047616
User 105257 AUC after training: 0.47619047619047616
User 105257 does not improve AUC. Reverting changes.
Training on augumented user 36230 8/50 current_auc = 0.47619047619047616
User 36230 AUC after training: 0.47619047619047616
User 36230 does not improve AUC. Reverting changes.
Training on augumented user 35765 9/50 current_auc = 0.47619047619047616
User 35765 AUC after training: 0.47619047619047616
User 35765 does not improve AUC. Reverting changes.
Training on augumented user 30945 10/50 current_auc = 0.47619047619047616
User 30945 AUC after training: 0.47619047619047616
User 30945 does not improve AUC. Reverting changes.
Training on augumented user 73060 11/50 current_auc = 0.47619047619047616
User 73060 AUC after training: 0.47619047619047616
User 73060 does not improve AUC. Reverting changes.
Training on augumented user 43745 12/50 current_auc = 0.47619047619047616
User 43745 AUC after training: 0.47619047619047616
User 43745 does not improve AUC. Reverting changes.
Training on augumented user 9579 13/50 current_auc = 0.47619047619047616
User 9579 AUC after training: 0.4285714285714286
User 9579 does not improve AUC. Reverting changes.
Training on augumented user 133019 14/50 current_auc = 0.47619047619047616
User 133019 AUC after training: 0.47619047619047616
User 133019 does not improve AUC. Reverting changes.
Training on augumented user 19376 15/50 current_auc = 0.47619047619047616
User 19376 AUC after training: 0.47619047619047616
User 19376 does not improve AUC. Reverting changes.
Training on augumented user 5047 16/50 current_auc = 0.47619047619047616
User 5047 AUC after training: 0.47619047619047616
User 5047 does not improve AUC. Reverting changes.
Training on augumented user 25968 17/50 current_auc = 0.47619047619047616
User 25968 AUC after training: 0.47619047619047616
User 25968 does not improve AUC. Reverting changes.
Training on augumented user 62462 18/50 current_auc = 0.47619047619047616
User 62462 AUC after training: 0.47619047619047616
User 62462 does not improve AUC. Reverting changes.
Training on augumented user 122862 19/50 current_auc = 0.47619047619047616
User 122862 AUC after training: 0.47619047619047616
User 122862 does not improve AUC. Reverting changes.
Training on augumented user 59005 20/50 current_auc = 0.47619047619047616
User 59005 AUC after training: 0.47619047619047616
User 59005 does not improve AUC. Reverting changes.
Training on augumented user 60086 21/50 current_auc = 0.47619047619047616
User 60086 AUC after training: 0.47619047619047616
User 60086 does not improve AUC. Reverting changes.
Training on augumented user 6864 22/50 current_auc = 0.47619047619047616
User 6864 AUC after training: 0.47619047619047616
User 6864 does not improve AUC. Reverting changes.
Training on augumented user 79714 23/50 current_auc = 0.47619047619047616
User 79714 AUC after training: 0.47619047619047616
User 79714 does not improve AUC. Reverting changes.
Training on augumented user 97749 24/50 current_auc = 0.47619047619047616
User 97749 AUC after training: 0.47619047619047616
User 97749 does not improve AUC. Reverting changes.
Training on augumented user 28054 25/50 current_auc = 0.47619047619047616
User 28054 AUC after training: 0.47619047619047616
User 28054 does not improve AUC. Reverting changes.
Training on augumented user 16759 26/50 current_auc = 0.47619047619047616
User 16759 AUC after training: 0.47619047619047616
User 16759 does not improve AUC. Reverting changes.
Training on augumented user 73508 27/50 current_auc = 0.47619047619047616
User 73508 AUC after training: 0.47619047619047616
User 73508 does not improve AUC. Reverting changes.
Training on augumented user 125129 28/50 current_auc = 0.47619047619047616
User 125129 AUC after training: 0.47619047619047616
User 125129 does not improve AUC. Reverting changes.
Training on augumented user 86703 29/50 current_auc = 0.47619047619047616
User 86703 AUC after training: 0.47619047619047616
User 86703 does not improve AUC. Reverting changes.
Training on augumented user 51289 30/50 current_auc = 0.47619047619047616
User 51289 AUC after training: 0.47619047619047616
User 51289 does not improve AUC. Reverting changes.
Training on augumented user 89096 31/50 current_auc = 0.47619047619047616
User 89096 AUC after training: 0.47619047619047616
User 89096 does not improve AUC. Reverting changes.
Training on augumented user 110704 32/50 current_auc = 0.47619047619047616
User 110704 AUC after training: 0.47619047619047616
User 110704 does not improve AUC. Reverting changes.
Training on augumented user 12784 33/50 current_auc = 0.47619047619047616
User 12784 AUC after training: 0.47619047619047616
User 12784 does not improve AUC. Reverting changes.
Training on augumented user 61751 34/50 current_auc = 0.47619047619047616
User 61751 AUC after training: 0.47619047619047616
User 61751 does not improve AUC. Reverting changes.
Training on augumented user 95968 35/50 current_auc = 0.47619047619047616
User 95968 AUC after training: 0.47619047619047616
User 95968 does not improve AUC. Reverting changes.
Training on augumented user 132408 36/50 current_auc = 0.47619047619047616
User 132408 AUC after training: 0.47619047619047616
User 132408 does not improve AUC. Reverting changes.
Training on augumented user 85484 37/50 current_auc = 0.47619047619047616
User 85484 AUC after training: 0.47619047619047616
User 85484 does not improve AUC. Reverting changes.
Training on augumented user 96140 38/50 current_auc = 0.47619047619047616
User 96140 AUC after training: 0.47619047619047616
User 96140 does not improve AUC. Reverting changes.
Training on augumented user 74285 39/50 current_auc = 0.47619047619047616
User 74285 AUC after training: 0.47619047619047616
User 74285 does not improve AUC. Reverting changes.
Training on augumented user 89840 40/50 current_auc = 0.47619047619047616
User 89840 AUC after training: 0.47619047619047616
User 89840 does not improve AUC. Reverting changes.
Training on augumented user 39616 41/50 current_auc = 0.47619047619047616
User 39616 AUC after training: 0.47619047619047616
User 39616 does not improve AUC. Reverting changes.
Training on augumented user 95310 42/50 current_auc = 0.47619047619047616
User 95310 AUC after training: 0.47619047619047616
User 95310 does not improve AUC. Reverting changes.
Training on augumented user 98959 43/50 current_auc = 0.47619047619047616
User 98959 AUC after training: 0.47619047619047616
User 98959 does not improve AUC. Reverting changes.
Training on augumented user 12365 44/50 current_auc = 0.47619047619047616
User 12365 AUC after training: 0.47619047619047616
User 12365 does not improve AUC. Reverting changes.
Training on augumented user 62664 45/50 current_auc = 0.47619047619047616
User 62664 AUC after training: 0.47619047619047616
User 62664 does not improve AUC. Reverting changes.
Training on augumented user 81673 46/50 current_auc = 0.47619047619047616
User 81673 AUC after training: 0.47619047619047616
User 81673 does not improve AUC. Reverting changes.
Training on augumented user 105109 47/50 current_auc = 0.47619047619047616
User 105109 AUC after training: 0.47619047619047616
User 105109 does not improve AUC. Reverting changes.
Training on augumented user 106532 48/50 current_auc = 0.47619047619047616
User 106532 AUC after training: 0.47619047619047616
User 106532 does not improve AUC. Reverting changes.
Training on augumented user 84707 49/50 current_auc = 0.47619047619047616
User 84707 AUC after training: 0.47619047619047616
User 84707 does not improve AUC. Reverting changes.
[2024-12-02 20:22:45.216486] start test user 117289 303/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:22:45.640703] start test user 117289 303/567 recall augumented users by random, augumented_users = [92066, 42318, 124635, 82050, 80563, 130348, 119132, 131012, 29043, 91948, 12469, 53740, 125123, 137442, 100278, 16665, 82331, 123611, 103885, 55543, 69384, 9629, 58773, 130227, 74435, 74426, 94993, 47556, 78875, 50222, 93163, 4990, 36966, 86759, 2817, 120217, 76963, 77370, 41903, 12590, 15899, 75776, 33658, 77402, 118541, 51531, 103814, 3765, 67864, 94144]
[2024-12-02 20:22:45.656403] user = 117289 Cloud 303/567
[2024-12-02 20:22:45.696826] user = 117289 Local 303/567
[2024-12-02 20:22:45.817062] user = 117289 Local+ 303/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:22:48.010787] user = 117289 MPDA- 303/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7060310581437341
Training on augumented user 92066 0/50 current_auc = 0.7060310581437341
User 92066 AUC after training: 0.7056699169375226
User 92066 does not improve AUC. Reverting changes.
Training on augumented user 42318 1/50 current_auc = 0.7060310581437341
User 42318 AUC after training: 0.7067533405561575
User 42318 improves AUC. Keeping the model.
Training on augumented user 124635 2/50 current_auc = 0.7067533405561575
User 124635 AUC after training: 0.7074756229685807
User 124635 improves AUC. Keeping the model.
Training on augumented user 82050 3/50 current_auc = 0.7074756229685807
User 82050 AUC after training: 0.7067533405561575
User 82050 does not improve AUC. Reverting changes.
Training on augumented user 80563 4/50 current_auc = 0.7074756229685807
User 80563 AUC after training: 0.7074756229685807
User 80563 does not improve AUC. Reverting changes.
Training on augumented user 130348 5/50 current_auc = 0.7074756229685807
User 130348 AUC after training: 0.7074756229685807
User 130348 does not improve AUC. Reverting changes.
Training on augumented user 119132 6/50 current_auc = 0.7074756229685807
User 119132 AUC after training: 0.7092813289996389
User 119132 improves AUC. Keeping the model.
Training on augumented user 131012 7/50 current_auc = 0.7092813289996389
User 131012 AUC after training: 0.7089201877934272
User 131012 does not improve AUC. Reverting changes.
Training on augumented user 29043 8/50 current_auc = 0.7092813289996389
User 29043 AUC after training: 0.708197905381004
User 29043 does not improve AUC. Reverting changes.
Training on augumented user 91948 9/50 current_auc = 0.7092813289996389
User 91948 AUC after training: 0.7085590465872156
User 91948 does not improve AUC. Reverting changes.
Training on augumented user 12469 10/50 current_auc = 0.7092813289996389
User 12469 AUC after training: 0.7060310581437342
User 12469 does not improve AUC. Reverting changes.
Training on augumented user 53740 11/50 current_auc = 0.7092813289996389
User 53740 AUC after training: 0.7085590465872156
User 53740 does not improve AUC. Reverting changes.
Training on augumented user 125123 12/50 current_auc = 0.7092813289996389
User 125123 AUC after training: 0.7089201877934272
User 125123 does not improve AUC. Reverting changes.
Training on augumented user 137442 13/50 current_auc = 0.7092813289996389
User 137442 AUC after training: 0.7089201877934272
User 137442 does not improve AUC. Reverting changes.
Training on augumented user 100278 14/50 current_auc = 0.7092813289996389
User 100278 AUC after training: 0.7096424702058506
User 100278 improves AUC. Keeping the model.
Training on augumented user 16665 15/50 current_auc = 0.7096424702058506
User 16665 AUC after training: 0.7089201877934272
User 16665 does not improve AUC. Reverting changes.
Training on augumented user 82331 16/50 current_auc = 0.7096424702058506
User 82331 AUC after training: 0.7096424702058505
User 82331 does not improve AUC. Reverting changes.
Training on augumented user 123611 17/50 current_auc = 0.7096424702058506
User 123611 AUC after training: 0.7085590465872156
User 123611 does not improve AUC. Reverting changes.
Training on augumented user 103885 18/50 current_auc = 0.7096424702058506
User 103885 AUC after training: 0.7089201877934272
User 103885 does not improve AUC. Reverting changes.
Training on augumented user 55543 19/50 current_auc = 0.7096424702058506
User 55543 AUC after training: 0.7078367641747924
User 55543 does not improve AUC. Reverting changes.
Training on augumented user 69384 20/50 current_auc = 0.7096424702058506
User 69384 AUC after training: 0.7081979053810039
User 69384 does not improve AUC. Reverting changes.
Training on augumented user 9629 21/50 current_auc = 0.7096424702058506
User 9629 AUC after training: 0.7078367641747924
User 9629 does not improve AUC. Reverting changes.
Training on augumented user 58773 22/50 current_auc = 0.7096424702058506
User 58773 AUC after training: 0.7096424702058505
User 58773 does not improve AUC. Reverting changes.
Training on augumented user 130227 23/50 current_auc = 0.7096424702058506
User 130227 AUC after training: 0.7074756229685807
User 130227 does not improve AUC. Reverting changes.
Training on augumented user 74435 24/50 current_auc = 0.7096424702058506
User 74435 AUC after training: 0.7089201877934272
User 74435 does not improve AUC. Reverting changes.
Training on augumented user 74426 25/50 current_auc = 0.7096424702058506
User 74426 AUC after training: 0.7092813289996389
User 74426 does not improve AUC. Reverting changes.
Training on augumented user 94993 26/50 current_auc = 0.7096424702058506
User 94993 AUC after training: 0.7103647526182737
User 94993 improves AUC. Keeping the model.
Training on augumented user 47556 27/50 current_auc = 0.7103647526182737
User 47556 AUC after training: 0.711087035030697
User 47556 improves AUC. Keeping the model.
Training on augumented user 78875 28/50 current_auc = 0.711087035030697
User 78875 AUC after training: 0.7107258938244854
User 78875 does not improve AUC. Reverting changes.
Training on augumented user 50222 29/50 current_auc = 0.711087035030697
User 50222 AUC after training: 0.7118093174431203
User 50222 improves AUC. Keeping the model.
Training on augumented user 93163 30/50 current_auc = 0.7118093174431203
User 93163 AUC after training: 0.7100036114120621
User 93163 does not improve AUC. Reverting changes.
Training on augumented user 4990 31/50 current_auc = 0.7118093174431203
User 4990 AUC after training: 0.7114481762369087
User 4990 does not improve AUC. Reverting changes.
Training on augumented user 36966 32/50 current_auc = 0.7118093174431203
User 36966 AUC after training: 0.711087035030697
User 36966 does not improve AUC. Reverting changes.
Training on augumented user 86759 33/50 current_auc = 0.7118093174431203
User 86759 AUC after training: 0.7121704586493318
User 86759 improves AUC. Keeping the model.
Training on augumented user 2817 34/50 current_auc = 0.7121704586493318
User 2817 AUC after training: 0.711087035030697
User 2817 does not improve AUC. Reverting changes.
Training on augumented user 120217 35/50 current_auc = 0.7121704586493318
User 120217 AUC after training: 0.7118093174431203
User 120217 does not improve AUC. Reverting changes.
Training on augumented user 76963 36/50 current_auc = 0.7121704586493318
User 76963 AUC after training: 0.7089201877934272
User 76963 does not improve AUC. Reverting changes.
Training on augumented user 77370 37/50 current_auc = 0.7121704586493318
User 77370 AUC after training: 0.7121704586493318
User 77370 does not improve AUC. Reverting changes.
Training on augumented user 41903 38/50 current_auc = 0.7121704586493318
User 41903 AUC after training: 0.7114481762369087
User 41903 does not improve AUC. Reverting changes.
Training on augumented user 12590 39/50 current_auc = 0.7121704586493318
User 12590 AUC after training: 0.7085590465872156
User 12590 does not improve AUC. Reverting changes.
Training on augumented user 15899 40/50 current_auc = 0.7121704586493318
User 15899 AUC after training: 0.7118093174431203
User 15899 does not improve AUC. Reverting changes.
Training on augumented user 75776 41/50 current_auc = 0.7121704586493318
User 75776 AUC after training: 0.7114481762369087
User 75776 does not improve AUC. Reverting changes.
Training on augumented user 33658 42/50 current_auc = 0.7121704586493318
User 33658 AUC after training: 0.7128927410617552
User 33658 improves AUC. Keeping the model.
Training on augumented user 77402 43/50 current_auc = 0.7128927410617552
User 77402 AUC after training: 0.7118093174431203
User 77402 does not improve AUC. Reverting changes.
Training on augumented user 118541 44/50 current_auc = 0.7128927410617552
User 118541 AUC after training: 0.7103647526182737
User 118541 does not improve AUC. Reverting changes.
Training on augumented user 51531 45/50 current_auc = 0.7128927410617552
User 51531 AUC after training: 0.7121704586493319
User 51531 does not improve AUC. Reverting changes.
Training on augumented user 103814 46/50 current_auc = 0.7128927410617552
User 103814 AUC after training: 0.7125315998555435
User 103814 does not improve AUC. Reverting changes.
Training on augumented user 3765 47/50 current_auc = 0.7128927410617552
User 3765 AUC after training: 0.7118093174431203
User 3765 does not improve AUC. Reverting changes.
Training on augumented user 67864 48/50 current_auc = 0.7128927410617552
User 67864 AUC after training: 0.7128927410617552
User 67864 does not improve AUC. Reverting changes.
Training on augumented user 94144 49/50 current_auc = 0.7128927410617552
User 94144 AUC after training: 0.7132538822679668
User 94144 improves AUC. Keeping the model.
[2024-12-02 20:23:14.496283] start test user 117307 304/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:23:15.159901] start test user 117307 304/567 recall augumented users by random, augumented_users = [47255, 85306, 22498, 113600, 3468, 36192, 64758, 37289, 42583, 109676, 8235, 130238, 34170, 138053, 125596, 3770, 48240, 58877, 132493, 75329, 25891, 116952, 73641, 84441, 75677, 40923, 120232, 32905, 37092, 48375, 39416, 74886, 79693, 27809, 28343, 46254, 29438, 40292, 47368, 107933, 12895, 73546, 91077, 111441, 94414, 135280, 68217, 109708, 80523, 5635]
[2024-12-02 20:23:15.175102] user = 117307 Cloud 304/567
[2024-12-02 20:23:15.185283] user = 117307 Local 304/567
[2024-12-02 20:23:15.257973] user = 117307 Local+ 304/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:23:17.232829] user = 117307 MPDA- 304/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.3703703703703704
Training on augumented user 47255 0/50 current_auc = 0.3703703703703704
User 47255 AUC after training: 0.3703703703703704
User 47255 does not improve AUC. Reverting changes.
Training on augumented user 85306 1/50 current_auc = 0.3703703703703704
User 85306 AUC after training: 0.3703703703703704
User 85306 does not improve AUC. Reverting changes.
Training on augumented user 22498 2/50 current_auc = 0.3703703703703704
User 22498 AUC after training: 0.3703703703703704
User 22498 does not improve AUC. Reverting changes.
Training on augumented user 113600 3/50 current_auc = 0.3703703703703704
User 113600 AUC after training: 0.3703703703703704
User 113600 does not improve AUC. Reverting changes.
Training on augumented user 3468 4/50 current_auc = 0.3703703703703704
User 3468 AUC after training: 0.3703703703703704
User 3468 does not improve AUC. Reverting changes.
Training on augumented user 36192 5/50 current_auc = 0.3703703703703704
User 36192 AUC after training: 0.3580246913580247
User 36192 does not improve AUC. Reverting changes.
Training on augumented user 64758 6/50 current_auc = 0.3703703703703704
User 64758 AUC after training: 0.3703703703703704
User 64758 does not improve AUC. Reverting changes.
Training on augumented user 37289 7/50 current_auc = 0.3703703703703704
User 37289 AUC after training: 0.3703703703703704
User 37289 does not improve AUC. Reverting changes.
Training on augumented user 42583 8/50 current_auc = 0.3703703703703704
User 42583 AUC after training: 0.3703703703703704
User 42583 does not improve AUC. Reverting changes.
Training on augumented user 109676 9/50 current_auc = 0.3703703703703704
User 109676 AUC after training: 0.3703703703703704
User 109676 does not improve AUC. Reverting changes.
Training on augumented user 8235 10/50 current_auc = 0.3703703703703704
User 8235 AUC after training: 0.3703703703703704
User 8235 does not improve AUC. Reverting changes.
Training on augumented user 130238 11/50 current_auc = 0.3703703703703704
User 130238 AUC after training: 0.3703703703703704
User 130238 does not improve AUC. Reverting changes.
Training on augumented user 34170 12/50 current_auc = 0.3703703703703704
User 34170 AUC after training: 0.3703703703703704
User 34170 does not improve AUC. Reverting changes.
Training on augumented user 138053 13/50 current_auc = 0.3703703703703704
User 138053 AUC after training: 0.3703703703703704
User 138053 does not improve AUC. Reverting changes.
Training on augumented user 125596 14/50 current_auc = 0.3703703703703704
User 125596 AUC after training: 0.3580246913580247
User 125596 does not improve AUC. Reverting changes.
Training on augumented user 3770 15/50 current_auc = 0.3703703703703704
User 3770 AUC after training: 0.3703703703703704
User 3770 does not improve AUC. Reverting changes.
Training on augumented user 48240 16/50 current_auc = 0.3703703703703704
User 48240 AUC after training: 0.3703703703703704
User 48240 does not improve AUC. Reverting changes.
Training on augumented user 58877 17/50 current_auc = 0.3703703703703704
User 58877 AUC after training: 0.3703703703703704
User 58877 does not improve AUC. Reverting changes.
Training on augumented user 132493 18/50 current_auc = 0.3703703703703704
User 132493 AUC after training: 0.3703703703703704
User 132493 does not improve AUC. Reverting changes.
Training on augumented user 75329 19/50 current_auc = 0.3703703703703704
User 75329 AUC after training: 0.3703703703703704
User 75329 does not improve AUC. Reverting changes.
Training on augumented user 25891 20/50 current_auc = 0.3703703703703704
User 25891 AUC after training: 0.3703703703703704
User 25891 does not improve AUC. Reverting changes.
Training on augumented user 116952 21/50 current_auc = 0.3703703703703704
User 116952 AUC after training: 0.3703703703703704
User 116952 does not improve AUC. Reverting changes.
Training on augumented user 73641 22/50 current_auc = 0.3703703703703704
User 73641 AUC after training: 0.3703703703703704
User 73641 does not improve AUC. Reverting changes.
Training on augumented user 84441 23/50 current_auc = 0.3703703703703704
User 84441 AUC after training: 0.3580246913580247
User 84441 does not improve AUC. Reverting changes.
Training on augumented user 75677 24/50 current_auc = 0.3703703703703704
User 75677 AUC after training: 0.3703703703703704
User 75677 does not improve AUC. Reverting changes.
Training on augumented user 40923 25/50 current_auc = 0.3703703703703704
User 40923 AUC after training: 0.3703703703703704
User 40923 does not improve AUC. Reverting changes.
Training on augumented user 120232 26/50 current_auc = 0.3703703703703704
User 120232 AUC after training: 0.3703703703703704
User 120232 does not improve AUC. Reverting changes.
Training on augumented user 32905 27/50 current_auc = 0.3703703703703704
User 32905 AUC after training: 0.3703703703703704
User 32905 does not improve AUC. Reverting changes.
Training on augumented user 37092 28/50 current_auc = 0.3703703703703704
User 37092 AUC after training: 0.3703703703703704
User 37092 does not improve AUC. Reverting changes.
Training on augumented user 48375 29/50 current_auc = 0.3703703703703704
User 48375 AUC after training: 0.3703703703703704
User 48375 does not improve AUC. Reverting changes.
Training on augumented user 39416 30/50 current_auc = 0.3703703703703704
User 39416 AUC after training: 0.3703703703703704
User 39416 does not improve AUC. Reverting changes.
Training on augumented user 74886 31/50 current_auc = 0.3703703703703704
User 74886 AUC after training: 0.3703703703703704
User 74886 does not improve AUC. Reverting changes.
Training on augumented user 79693 32/50 current_auc = 0.3703703703703704
User 79693 AUC after training: 0.3703703703703704
User 79693 does not improve AUC. Reverting changes.
Training on augumented user 27809 33/50 current_auc = 0.3703703703703704
User 27809 AUC after training: 0.3580246913580247
User 27809 does not improve AUC. Reverting changes.
Training on augumented user 28343 34/50 current_auc = 0.3703703703703704
User 28343 AUC after training: 0.3703703703703704
User 28343 does not improve AUC. Reverting changes.
Training on augumented user 46254 35/50 current_auc = 0.3703703703703704
User 46254 AUC after training: 0.3703703703703704
User 46254 does not improve AUC. Reverting changes.
Training on augumented user 29438 36/50 current_auc = 0.3703703703703704
User 29438 AUC after training: 0.3703703703703704
User 29438 does not improve AUC. Reverting changes.
Training on augumented user 40292 37/50 current_auc = 0.3703703703703704
User 40292 AUC after training: 0.3703703703703704
User 40292 does not improve AUC. Reverting changes.
Training on augumented user 47368 38/50 current_auc = 0.3703703703703704
User 47368 AUC after training: 0.3703703703703704
User 47368 does not improve AUC. Reverting changes.
Training on augumented user 107933 39/50 current_auc = 0.3703703703703704
User 107933 AUC after training: 0.3703703703703704
User 107933 does not improve AUC. Reverting changes.
Training on augumented user 12895 40/50 current_auc = 0.3703703703703704
User 12895 AUC after training: 0.3703703703703704
User 12895 does not improve AUC. Reverting changes.
Training on augumented user 73546 41/50 current_auc = 0.3703703703703704
User 73546 AUC after training: 0.3703703703703704
User 73546 does not improve AUC. Reverting changes.
Training on augumented user 91077 42/50 current_auc = 0.3703703703703704
User 91077 AUC after training: 0.3703703703703704
User 91077 does not improve AUC. Reverting changes.
Training on augumented user 111441 43/50 current_auc = 0.3703703703703704
User 111441 AUC after training: 0.3703703703703704
User 111441 does not improve AUC. Reverting changes.
Training on augumented user 94414 44/50 current_auc = 0.3703703703703704
User 94414 AUC after training: 0.3703703703703704
User 94414 does not improve AUC. Reverting changes.
Training on augumented user 135280 45/50 current_auc = 0.3703703703703704
User 135280 AUC after training: 0.3703703703703704
User 135280 does not improve AUC. Reverting changes.
Training on augumented user 68217 46/50 current_auc = 0.3703703703703704
User 68217 AUC after training: 0.3703703703703704
User 68217 does not improve AUC. Reverting changes.
Training on augumented user 109708 47/50 current_auc = 0.3703703703703704
User 109708 AUC after training: 0.3703703703703704
User 109708 does not improve AUC. Reverting changes.
Training on augumented user 80523 48/50 current_auc = 0.3703703703703704
User 80523 AUC after training: 0.3703703703703704
User 80523 does not improve AUC. Reverting changes.
Training on augumented user 5635 49/50 current_auc = 0.3703703703703704
User 5635 AUC after training: 0.3703703703703704
User 5635 does not improve AUC. Reverting changes.
[2024-12-02 20:23:44.640062] start test user 117311 305/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:23:45.223896] start test user 117311 305/567 recall augumented users by random, augumented_users = [26340, 2866, 120482, 69714, 88734, 78268, 119215, 118158, 22910, 96231, 55614, 5608, 23247, 23202, 92412, 13581, 88609, 4653, 81180, 86922, 25504, 6967, 14870, 122103, 53535, 16744, 104791, 10118, 64669, 110524, 52266, 98583, 113776, 44611, 79518, 136896, 124732, 65861, 81573, 88547, 79169, 103019, 61826, 132695, 16792, 111008, 127764, 92725, 59938, 132236]
[2024-12-02 20:23:45.244323] user = 117311 Cloud 305/567
[2024-12-02 20:23:45.258071] user = 117311 Local 305/567
[2024-12-02 20:23:45.301537] user = 117311 Local+ 305/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:23:47.751086] user = 117311 MPDA- 305/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6613333333333333
Training on augumented user 26340 0/50 current_auc = 0.6613333333333333
User 26340 AUC after training: 0.6626666666666667
User 26340 improves AUC. Keeping the model.
Training on augumented user 2866 1/50 current_auc = 0.6626666666666667
User 2866 AUC after training: 0.6493333333333333
User 2866 does not improve AUC. Reverting changes.
Training on augumented user 120482 2/50 current_auc = 0.6626666666666667
User 120482 AUC after training: 0.6586666666666667
User 120482 does not improve AUC. Reverting changes.
Training on augumented user 69714 3/50 current_auc = 0.6626666666666667
User 69714 AUC after training: 0.6599999999999999
User 69714 does not improve AUC. Reverting changes.
Training on augumented user 88734 4/50 current_auc = 0.6626666666666667
User 88734 AUC after training: 0.6626666666666666
User 88734 does not improve AUC. Reverting changes.
Training on augumented user 78268 5/50 current_auc = 0.6626666666666667
User 78268 AUC after training: 0.652
User 78268 does not improve AUC. Reverting changes.
Training on augumented user 119215 6/50 current_auc = 0.6626666666666667
User 119215 AUC after training: 0.6566666666666666
User 119215 does not improve AUC. Reverting changes.
Training on augumented user 118158 7/50 current_auc = 0.6626666666666667
User 118158 AUC after training: 0.6613333333333333
User 118158 does not improve AUC. Reverting changes.
Training on augumented user 22910 8/50 current_auc = 0.6626666666666667
User 22910 AUC after training: 0.6599999999999999
User 22910 does not improve AUC. Reverting changes.
Training on augumented user 96231 9/50 current_auc = 0.6626666666666667
User 96231 AUC after training: 0.6613333333333333
User 96231 does not improve AUC. Reverting changes.
Training on augumented user 55614 10/50 current_auc = 0.6626666666666667
User 55614 AUC after training: 0.6626666666666667
User 55614 does not improve AUC. Reverting changes.
Training on augumented user 5608 11/50 current_auc = 0.6626666666666667
User 5608 AUC after training: 0.66
User 5608 does not improve AUC. Reverting changes.
Training on augumented user 23247 12/50 current_auc = 0.6626666666666667
User 23247 AUC after training: 0.6639999999999999
User 23247 improves AUC. Keeping the model.
Training on augumented user 23202 13/50 current_auc = 0.6639999999999999
User 23202 AUC after training: 0.6626666666666667
User 23202 does not improve AUC. Reverting changes.
Training on augumented user 92412 14/50 current_auc = 0.6639999999999999
User 92412 AUC after training: 0.6626666666666667
User 92412 does not improve AUC. Reverting changes.
Training on augumented user 13581 15/50 current_auc = 0.6639999999999999
User 13581 AUC after training: 0.6639999999999999
User 13581 does not improve AUC. Reverting changes.
Training on augumented user 88609 16/50 current_auc = 0.6639999999999999
User 88609 AUC after training: 0.6613333333333333
User 88609 does not improve AUC. Reverting changes.
Training on augumented user 4653 17/50 current_auc = 0.6639999999999999
User 4653 AUC after training: 0.6653333333333333
User 4653 improves AUC. Keeping the model.
Training on augumented user 81180 18/50 current_auc = 0.6653333333333333
User 81180 AUC after training: 0.6626666666666666
User 81180 does not improve AUC. Reverting changes.
Training on augumented user 86922 19/50 current_auc = 0.6653333333333333
User 86922 AUC after training: 0.6626666666666666
User 86922 does not improve AUC. Reverting changes.
Training on augumented user 25504 20/50 current_auc = 0.6653333333333333
User 25504 AUC after training: 0.6653333333333333
User 25504 does not improve AUC. Reverting changes.
Training on augumented user 6967 21/50 current_auc = 0.6653333333333333
User 6967 AUC after training: 0.6613333333333333
User 6967 does not improve AUC. Reverting changes.
Training on augumented user 14870 22/50 current_auc = 0.6653333333333333
User 14870 AUC after training: 0.6573333333333334
User 14870 does not improve AUC. Reverting changes.
Training on augumented user 122103 23/50 current_auc = 0.6653333333333333
User 122103 AUC after training: 0.6626666666666666
User 122103 does not improve AUC. Reverting changes.
Training on augumented user 53535 24/50 current_auc = 0.6653333333333333
User 53535 AUC after training: 0.6653333333333333
User 53535 does not improve AUC. Reverting changes.
Training on augumented user 16744 25/50 current_auc = 0.6653333333333333
