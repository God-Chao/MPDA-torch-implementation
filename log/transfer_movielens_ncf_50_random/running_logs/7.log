[2024-12-02 17:37:37.000303] start transfer model NCF
{'recall_num': 50, 'recall_alg': 'random', 'epochs': 1, 'device': 'cuda:5', 'batch_size': 64, 'task_index': 7, 'num_task': 10, 'lr': 0.001}
test users have been loaded, len = 567
test users = ['96426' '96441' '96442' '96460' '96482' '96511' '96587' '96590' '96592'
 '96608' '96617' '96618' '96647' '96700' '96744' '96746' '96748' '96768'
 '96773' '96780' '96795' '96822' '96858' '96875' '96885' '96887' '96909'
 '96913' '96952' '96966' '97010' '97112' '97143' '97163' '97176' '97178'
 '97193' '97195' '97198' '97215' '97249' '97277' '97284' '97290' '97297'
 '97394' '97398' '97434' '97435' '97438' '97448' '97517' '97521' '97533'
 '97559' '97602' '97608' '97691' '97700' '97738' '97764' '97779' '97784'
 '97799' '97804' '97826' '97828' '97845' '97853' '97858' '97868' '97880'
 '97881' '97935' '97950' '97953' '97970' '98001' '98017' '98038' '98076'
 '98108' '98113' '98186' '98225' '98256' '98301' '98320' '98323' '98353'
 '98369' '98371' '98377' '98394' '98426' '98470' '98479' '98488' '98494'
 '98510' '98525' '98527' '98528' '98586' '98587' '98611' '98645' '98671'
 '98679' '98687' '98713' '98758' '98781' '98782' '98788' '98842' '98865'
 '98871' '98939' '98997' '98999' '99009' '99015' '99054' '99096' '99097'
 '99103' '99119' '99149' '99159' '99199' '99210' '99254' '99286' '99313'
 '99320' '99347' '99360' '99372' '99404' '99429' '99448' '99451' '99474'
 '99499' '99504' '99511' '99523' '99524' '99525' '99533' '99549' '99557'
 '99565' '99603' '99674' '99706' '99711' '99712' '99754' '99770' '99781'
 '99800' '99807' '99890' '99892' '99930' '99985' '99999' '100019' '100031'
 '100081' '100107' '100113' '100118' '100119' '100201' '100202' '100214'
 '100216' '100249' '100254' '100273' '100277' '100282' '100366' '100371'
 '100418' '100438' '100464' '100471' '100476' '100482' '100522' '100528'
 '100556' '100573' '100575' '100596' '100635' '100649' '100652' '100658'
 '100661' '100685' '100697' '100738' '100801' '100804' '100872' '100891'
 '100895' '100903' '100906' '100970' '101021' '101026' '101027' '101033'
 '101040' '101059' '101072' '101100' '101129' '101133' '101155' '101171'
 '101197' '101274' '101275' '101282' '101326' '101329' '101341' '101342'
 '101345' '101370' '101452' '101453' '101477' '101485' '101499' '101515'
 '101519' '101530' '101555' '101566' '101611' '101670' '101686' '101690'
 '101703' '101742' '101768' '101808' '101818' '101975' '102000' '102001'
 '102025' '102037' '102060' '102069' '102087' '102174' '102186' '102242'
 '102244' '102290' '102349' '102368' '102395' '102411' '102421' '102486'
 '102488' '102507' '102532' '102536' '102552' '102563' '102565' '102569'
 '102599' '102630' '102671' '102679' '102680' '102699' '102705' '102720'
 '102726' '102732' '102815' '102860' '102865' '102867' '102889' '102945'
 '102951' '102994' '103016' '103018' '103076' '103078' '103090' '103113'
 '103119' '103126' '103195' '103254' '103268' '103291' '103317' '103319'
 '103323' '103329' '103336' '103337' '103350' '103362' '103413' '103441'
 '103454' '103459' '103470' '103479' '103515' '103517' '103530' '103610'
 '103614' '103652' '103668' '103676' '103701' '103702' '103709' '103755'
 '103764' '103798' '103816' '103836' '103838' '103861' '103872' '103921'
 '103943' '103973' '103986' '104010' '104043' '104075' '104084' '104127'
 '104142' '104201' '104206' '104236' '104290' '104323' '104331' '104345'
 '104347' '104349' '104455' '104461' '104468' '104510' '104531' '104599'
 '104611' '104642' '104674' '104766' '104803' '104824' '104852' '104876'
 '104887' '104916' '104942' '104966' '104968' '104988' '105011' '105040'
 '105055' '105059' '105070' '105081' '105088' '105105' '105114' '105128'
 '105161' '105168' '105170' '105192' '105216' '105301' '105318' '105331'
 '105343' '105357' '105370' '105395' '105406' '105410' '105457' '105458'
 '105461' '105498' '105512' '105555' '105571' '105585' '105625' '105640'
 '105641' '105650' '105654' '105672' '105675' '105709' '105718' '105744'
 '105782' '105805' '105860' '105898' '105907' '105921' '105922' '106032'
 '106036' '106068' '106075' '106137' '106193' '106241' '106245' '106308'
 '106310' '106332' '106340' '106348' '106396' '106441' '106444' '106465'
 '106547' '106601' '106659' '106676' '106680' '106687' '106712' '106755'
 '106779' '106785' '106808' '106822' '106831' '106845' '106865' '106875'
 '106887' '106895' '106936' '106939' '106954' '106955' '106970' '107021'
 '107025' '107057' '107099' '107111' '107126' '107160' '107164' '107168'
 '107173' '107191' '107200' '107215' '107226' '107256' '107278' '107288'
 '107322' '107331' '107338' '107356' '107376' '107397' '107440' '107468'
 '107553' '107560' '107570' '107580' '107616' '107628' '107640' '107648'
 '107726' '107768' '107779' '107786' '107806' '107819' '107861' '107904'
 '107912' '107921' '107926' '107972' '107991' '108031' '108039' '108067'
 '108076' '108104' '108153' '108165' '108169' '108176' '108203' '108223'
 '108246' '108248' '108285' '108331' '108355' '108363' '108381' '108401'
 '108403' '108419' '108445' '108473' '108477' '108497' '108501' '108507'
 '108538' '108570' '108753' '108763' '108765' '108843' '108872' '108967'
 '108975' '109001' '109009' '109092' '109098' '109210' '109233' '109258'
 '109270' '109273' '109286' '109299']
[2024-12-02 17:37:37.012489] start test on test users
[2024-12-02 17:37:37.012541] start test user 96426 0/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:37:39.819417] start test user 96426 0/567 recall augumented users by random, augumented_users = [70108, 16785, 85435, 69191, 111010, 25141, 109789, 104284, 133030, 68519, 80867, 90807, 20521, 7289, 78150, 42986, 101858, 102982, 25729, 2497, 110915, 61536, 116764, 92598, 14543, 65655, 133312, 123430, 14994, 78062, 49511, 120645, 91885, 32291, 117378, 30515, 136574, 84427, 25110, 74774, 38946, 28030, 28287, 28770, 75644, 96442, 2059, 75319, 10705, 123316]
[2024-12-02 17:37:39.920329] user = 96426 Cloud 0/567
[2024-12-02 17:37:44.116960] user = 96426 Local 0/567
[2024-12-02 17:37:44.612216] user = 96426 Local+ 0/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:37:48.064014] user = 96426 MPDA- 0/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5448717948717949
Training on augumented user 70108 0/50 current_auc = 0.5448717948717949
User 70108 AUC after training: 0.5448717948717949
User 70108 does not improve AUC. Reverting changes.
Training on augumented user 16785 1/50 current_auc = 0.5448717948717949
User 16785 AUC after training: 0.5480769230769231
User 16785 improves AUC. Keeping the model.
Training on augumented user 85435 2/50 current_auc = 0.5480769230769231
User 85435 AUC after training: 0.5512820512820513
User 85435 improves AUC. Keeping the model.
Training on augumented user 69191 3/50 current_auc = 0.5512820512820513
User 69191 AUC after training: 0.5512820512820513
User 69191 does not improve AUC. Reverting changes.
Training on augumented user 111010 4/50 current_auc = 0.5512820512820513
User 111010 AUC after training: 0.5512820512820513
User 111010 does not improve AUC. Reverting changes.
Training on augumented user 25141 5/50 current_auc = 0.5512820512820513
User 25141 AUC after training: 0.5480769230769231
User 25141 does not improve AUC. Reverting changes.
Training on augumented user 109789 6/50 current_auc = 0.5512820512820513
User 109789 AUC after training: 0.5512820512820513
User 109789 does not improve AUC. Reverting changes.
Training on augumented user 104284 7/50 current_auc = 0.5512820512820513
User 104284 AUC after training: 0.5512820512820513
User 104284 does not improve AUC. Reverting changes.
Training on augumented user 133030 8/50 current_auc = 0.5512820512820513
User 133030 AUC after training: 0.5480769230769231
User 133030 does not improve AUC. Reverting changes.
Training on augumented user 68519 9/50 current_auc = 0.5512820512820513
User 68519 AUC after training: 0.5512820512820513
User 68519 does not improve AUC. Reverting changes.
Training on augumented user 80867 10/50 current_auc = 0.5512820512820513
User 80867 AUC after training: 0.5512820512820513
User 80867 does not improve AUC. Reverting changes.
Training on augumented user 90807 11/50 current_auc = 0.5512820512820513
User 90807 AUC after training: 0.5480769230769231
User 90807 does not improve AUC. Reverting changes.
Training on augumented user 20521 12/50 current_auc = 0.5512820512820513
User 20521 AUC after training: 0.5512820512820513
User 20521 does not improve AUC. Reverting changes.
Training on augumented user 7289 13/50 current_auc = 0.5512820512820513
User 7289 AUC after training: 0.5512820512820513
User 7289 does not improve AUC. Reverting changes.
Training on augumented user 78150 14/50 current_auc = 0.5512820512820513
User 78150 AUC after training: 0.5512820512820513
User 78150 does not improve AUC. Reverting changes.
Training on augumented user 42986 15/50 current_auc = 0.5512820512820513
User 42986 AUC after training: 0.5512820512820513
User 42986 does not improve AUC. Reverting changes.
Training on augumented user 101858 16/50 current_auc = 0.5512820512820513
User 101858 AUC after training: 0.5512820512820513
User 101858 does not improve AUC. Reverting changes.
Training on augumented user 102982 17/50 current_auc = 0.5512820512820513
User 102982 AUC after training: 0.5512820512820513
User 102982 does not improve AUC. Reverting changes.
Training on augumented user 25729 18/50 current_auc = 0.5512820512820513
User 25729 AUC after training: 0.5512820512820513
User 25729 does not improve AUC. Reverting changes.
Training on augumented user 2497 19/50 current_auc = 0.5512820512820513
User 2497 AUC after training: 0.5512820512820513
User 2497 does not improve AUC. Reverting changes.
Training on augumented user 110915 20/50 current_auc = 0.5512820512820513
User 110915 AUC after training: 0.5512820512820513
User 110915 does not improve AUC. Reverting changes.
Training on augumented user 61536 21/50 current_auc = 0.5512820512820513
User 61536 AUC after training: 0.5512820512820513
User 61536 does not improve AUC. Reverting changes.
Training on augumented user 116764 22/50 current_auc = 0.5512820512820513
User 116764 AUC after training: 0.5512820512820513
User 116764 does not improve AUC. Reverting changes.
Training on augumented user 92598 23/50 current_auc = 0.5512820512820513
User 92598 AUC after training: 0.5512820512820513
User 92598 does not improve AUC. Reverting changes.
Training on augumented user 14543 24/50 current_auc = 0.5512820512820513
User 14543 AUC after training: 0.5512820512820513
User 14543 does not improve AUC. Reverting changes.
Training on augumented user 65655 25/50 current_auc = 0.5512820512820513
User 65655 AUC after training: 0.5512820512820513
User 65655 does not improve AUC. Reverting changes.
Training on augumented user 133312 26/50 current_auc = 0.5512820512820513
User 133312 AUC after training: 0.5512820512820513
User 133312 does not improve AUC. Reverting changes.
Training on augumented user 123430 27/50 current_auc = 0.5512820512820513
User 123430 AUC after training: 0.5480769230769231
User 123430 does not improve AUC. Reverting changes.
Training on augumented user 14994 28/50 current_auc = 0.5512820512820513
User 14994 AUC after training: 0.5448717948717949
User 14994 does not improve AUC. Reverting changes.
Training on augumented user 78062 29/50 current_auc = 0.5512820512820513
User 78062 AUC after training: 0.5512820512820513
User 78062 does not improve AUC. Reverting changes.
Training on augumented user 49511 30/50 current_auc = 0.5512820512820513
User 49511 AUC after training: 0.5512820512820513
User 49511 does not improve AUC. Reverting changes.
Training on augumented user 120645 31/50 current_auc = 0.5512820512820513
User 120645 AUC after training: 0.5512820512820513
User 120645 does not improve AUC. Reverting changes.
Training on augumented user 91885 32/50 current_auc = 0.5512820512820513
User 91885 AUC after training: 0.5512820512820513
User 91885 does not improve AUC. Reverting changes.
Training on augumented user 32291 33/50 current_auc = 0.5512820512820513
User 32291 AUC after training: 0.5512820512820513
User 32291 does not improve AUC. Reverting changes.
Training on augumented user 117378 34/50 current_auc = 0.5512820512820513
User 117378 AUC after training: 0.5512820512820513
User 117378 does not improve AUC. Reverting changes.
Training on augumented user 30515 35/50 current_auc = 0.5512820512820513
User 30515 AUC after training: 0.5480769230769231
User 30515 does not improve AUC. Reverting changes.
Training on augumented user 136574 36/50 current_auc = 0.5512820512820513
User 136574 AUC after training: 0.5480769230769231
User 136574 does not improve AUC. Reverting changes.
Training on augumented user 84427 37/50 current_auc = 0.5512820512820513
User 84427 AUC after training: 0.5480769230769231
User 84427 does not improve AUC. Reverting changes.
Training on augumented user 25110 38/50 current_auc = 0.5512820512820513
User 25110 AUC after training: 0.5480769230769231
User 25110 does not improve AUC. Reverting changes.
Training on augumented user 74774 39/50 current_auc = 0.5512820512820513
User 74774 AUC after training: 0.5512820512820513
User 74774 does not improve AUC. Reverting changes.
Training on augumented user 38946 40/50 current_auc = 0.5512820512820513
User 38946 AUC after training: 0.5512820512820513
User 38946 does not improve AUC. Reverting changes.
Training on augumented user 28030 41/50 current_auc = 0.5512820512820513
User 28030 AUC after training: 0.5512820512820513
User 28030 does not improve AUC. Reverting changes.
Training on augumented user 28287 42/50 current_auc = 0.5512820512820513
User 28287 AUC after training: 0.5480769230769231
User 28287 does not improve AUC. Reverting changes.
Training on augumented user 28770 43/50 current_auc = 0.5512820512820513
User 28770 AUC after training: 0.5512820512820513
User 28770 does not improve AUC. Reverting changes.
Training on augumented user 75644 44/50 current_auc = 0.5512820512820513
User 75644 AUC after training: 0.5512820512820513
User 75644 does not improve AUC. Reverting changes.
Training on augumented user 96442 45/50 current_auc = 0.5512820512820513
User 96442 AUC after training: 0.5512820512820513
User 96442 does not improve AUC. Reverting changes.
Training on augumented user 2059 46/50 current_auc = 0.5512820512820513
User 2059 AUC after training: 0.5512820512820513
User 2059 does not improve AUC. Reverting changes.
Training on augumented user 75319 47/50 current_auc = 0.5512820512820513
User 75319 AUC after training: 0.5512820512820513
User 75319 does not improve AUC. Reverting changes.
Training on augumented user 10705 48/50 current_auc = 0.5512820512820513
User 10705 AUC after training: 0.5512820512820513
User 10705 does not improve AUC. Reverting changes.
Training on augumented user 123316 49/50 current_auc = 0.5512820512820513
User 123316 AUC after training: 0.5512820512820513
User 123316 does not improve AUC. Reverting changes.
[2024-12-02 17:38:16.832368] start test user 96441 1/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:38:17.220659] start test user 96441 1/567 recall augumented users by random, augumented_users = [119019, 64729, 73387, 48624, 91118, 129303, 16609, 68726, 11785, 69150, 69389, 124402, 96910, 106620, 73383, 74287, 120818, 127641, 32243, 53560, 4403, 18549, 38466, 18018, 85581, 72141, 72435, 128769, 82672, 31175, 1024, 63065, 82830, 38208, 4352, 41362, 4278, 125054, 128048, 47657, 77946, 29260, 75399, 15602, 103691, 129623, 46501, 81901, 306, 3011]
[2024-12-02 17:38:17.236414] user = 96441 Cloud 1/567
[2024-12-02 17:38:17.254836] user = 96441 Local 1/567
[2024-12-02 17:38:17.364916] user = 96441 Local+ 1/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:38:19.515278] user = 96441 MPDA- 1/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6613947465778764
Training on augumented user 119019 0/50 current_auc = 0.6613947465778764
User 119019 AUC after training: 0.6619496855345912
User 119019 improves AUC. Keeping the model.
Training on augumented user 64729 1/50 current_auc = 0.6619496855345912
User 64729 AUC after training: 0.6615797262301146
User 64729 does not improve AUC. Reverting changes.
Training on augumented user 73387 2/50 current_auc = 0.6619496855345912
User 73387 AUC after training: 0.6613022567517574
User 73387 does not improve AUC. Reverting changes.
Training on augumented user 48624 3/50 current_auc = 0.6619496855345912
User 48624 AUC after training: 0.6615797262301146
User 48624 does not improve AUC. Reverting changes.
Training on augumented user 91118 4/50 current_auc = 0.6619496855345912
User 91118 AUC after training: 0.661764705882353
User 91118 does not improve AUC. Reverting changes.
Training on augumented user 129303 5/50 current_auc = 0.6619496855345912
User 129303 AUC after training: 0.6604698483166852
User 129303 does not improve AUC. Reverting changes.
Training on augumented user 16609 6/50 current_auc = 0.6619496855345912
User 16609 AUC after training: 0.6619496855345912
User 16609 does not improve AUC. Reverting changes.
Training on augumented user 68726 7/50 current_auc = 0.6619496855345912
User 68726 AUC after training: 0.6612097669256382
User 68726 does not improve AUC. Reverting changes.
Training on augumented user 11785 8/50 current_auc = 0.6619496855345912
User 11785 AUC after training: 0.6615797262301146
User 11785 does not improve AUC. Reverting changes.
Training on augumented user 69150 9/50 current_auc = 0.6619496855345912
User 69150 AUC after training: 0.6615797262301146
User 69150 does not improve AUC. Reverting changes.
Training on augumented user 69389 10/50 current_auc = 0.6619496855345912
User 69389 AUC after training: 0.6613947465778764
User 69389 does not improve AUC. Reverting changes.
Training on augumented user 124402 11/50 current_auc = 0.6619496855345912
User 124402 AUC after training: 0.6619496855345912
User 124402 does not improve AUC. Reverting changes.
Training on augumented user 96910 12/50 current_auc = 0.6619496855345912
User 96910 AUC after training: 0.6621346651868294
User 96910 improves AUC. Keeping the model.
Training on augumented user 106620 13/50 current_auc = 0.6621346651868294
User 106620 AUC after training: 0.6617647058823529
User 106620 does not improve AUC. Reverting changes.
Training on augumented user 73383 14/50 current_auc = 0.6621346651868294
User 73383 AUC after training: 0.6621346651868294
User 73383 does not improve AUC. Reverting changes.
Training on augumented user 74287 15/50 current_auc = 0.6621346651868294
User 74287 AUC after training: 0.6608398076211617
User 74287 does not improve AUC. Reverting changes.
Training on augumented user 120818 16/50 current_auc = 0.6621346651868294
User 120818 AUC after training: 0.6619496855345912
User 120818 does not improve AUC. Reverting changes.
Training on augumented user 127641 17/50 current_auc = 0.6621346651868294
User 127641 AUC after training: 0.6613947465778764
User 127641 does not improve AUC. Reverting changes.
Training on augumented user 32243 18/50 current_auc = 0.6621346651868294
User 32243 AUC after training: 0.6612097669256382
User 32243 does not improve AUC. Reverting changes.
Training on augumented user 53560 19/50 current_auc = 0.6621346651868294
User 53560 AUC after training: 0.6621346651868294
User 53560 does not improve AUC. Reverting changes.
Training on augumented user 4403 20/50 current_auc = 0.6621346651868294
User 4403 AUC after training: 0.6613947465778764
User 4403 does not improve AUC. Reverting changes.
Training on augumented user 18549 21/50 current_auc = 0.6621346651868294
User 18549 AUC after training: 0.6617647058823529
User 18549 does not improve AUC. Reverting changes.
Training on augumented user 38466 22/50 current_auc = 0.6621346651868294
User 38466 AUC after training: 0.6613947465778763
User 38466 does not improve AUC. Reverting changes.
Training on augumented user 18018 23/50 current_auc = 0.6621346651868294
User 18018 AUC after training: 0.6612097669256382
User 18018 does not improve AUC. Reverting changes.
Training on augumented user 85581 24/50 current_auc = 0.6621346651868294
User 85581 AUC after training: 0.6625046244913059
User 85581 improves AUC. Keeping the model.
Training on augumented user 72141 25/50 current_auc = 0.6625046244913059
User 72141 AUC after training: 0.6623196448390677
User 72141 does not improve AUC. Reverting changes.
Training on augumented user 72435 26/50 current_auc = 0.6625046244913059
User 72435 AUC after training: 0.6628745837957825
User 72435 improves AUC. Keeping the model.
Training on augumented user 128769 27/50 current_auc = 0.6628745837957825
User 128769 AUC after training: 0.662504624491306
User 128769 does not improve AUC. Reverting changes.
Training on augumented user 82672 28/50 current_auc = 0.6628745837957825
User 82672 AUC after training: 0.6613947465778764
User 82672 does not improve AUC. Reverting changes.
Training on augumented user 31175 29/50 current_auc = 0.6628745837957825
User 31175 AUC after training: 0.6630595634480206
User 31175 improves AUC. Keeping the model.
Training on augumented user 1024 30/50 current_auc = 0.6630595634480206
User 1024 AUC after training: 0.663244543100259
User 1024 improves AUC. Keeping the model.
Training on augumented user 63065 31/50 current_auc = 0.663244543100259
User 63065 AUC after training: 0.6634295227524972
User 63065 improves AUC. Keeping the model.
Training on augumented user 82830 32/50 current_auc = 0.6634295227524972
User 82830 AUC after training: 0.6634295227524972
User 82830 does not improve AUC. Reverting changes.
Training on augumented user 38208 33/50 current_auc = 0.6634295227524972
User 38208 AUC after training: 0.6634295227524972
User 38208 does not improve AUC. Reverting changes.
Training on augumented user 4352 34/50 current_auc = 0.6634295227524972
User 4352 AUC after training: 0.6636145024047355
User 4352 improves AUC. Keeping the model.
Training on augumented user 41362 35/50 current_auc = 0.6636145024047355
User 41362 AUC after training: 0.6637994820569737
User 41362 improves AUC. Keeping the model.
Training on augumented user 4278 36/50 current_auc = 0.6637994820569737
User 4278 AUC after training: 0.6637994820569737
User 4278 does not improve AUC. Reverting changes.
Training on augumented user 125054 37/50 current_auc = 0.6637994820569737
User 125054 AUC after training: 0.6630595634480208
User 125054 does not improve AUC. Reverting changes.
Training on augumented user 128048 38/50 current_auc = 0.6637994820569737
User 128048 AUC after training: 0.6641694413614503
User 128048 improves AUC. Keeping the model.
Training on augumented user 47657 39/50 current_auc = 0.6641694413614503
User 47657 AUC after training: 0.663984461709212
User 47657 does not improve AUC. Reverting changes.
Training on augumented user 77946 40/50 current_auc = 0.6641694413614503
User 77946 AUC after training: 0.6641694413614503
User 77946 does not improve AUC. Reverting changes.
Training on augumented user 29260 41/50 current_auc = 0.6641694413614503
User 29260 AUC after training: 0.6643544210136886
User 29260 improves AUC. Keeping the model.
Training on augumented user 75399 42/50 current_auc = 0.6643544210136886
User 75399 AUC after training: 0.6634295227524972
User 75399 does not improve AUC. Reverting changes.
Training on augumented user 15602 43/50 current_auc = 0.6643544210136886
User 15602 AUC after training: 0.663984461709212
User 15602 does not improve AUC. Reverting changes.
Training on augumented user 103691 44/50 current_auc = 0.6643544210136886
User 103691 AUC after training: 0.6643544210136885
User 103691 does not improve AUC. Reverting changes.
Training on augumented user 129623 45/50 current_auc = 0.6643544210136886
User 129623 AUC after training: 0.6632445431002589
User 129623 does not improve AUC. Reverting changes.
Training on augumented user 46501 46/50 current_auc = 0.6643544210136886
User 46501 AUC after training: 0.663244543100259
User 46501 does not improve AUC. Reverting changes.
Training on augumented user 81901 47/50 current_auc = 0.6643544210136886
User 81901 AUC after training: 0.6637994820569737
User 81901 does not improve AUC. Reverting changes.
Training on augumented user 306 48/50 current_auc = 0.6643544210136886
User 306 AUC after training: 0.6643544210136885
User 306 does not improve AUC. Reverting changes.
Training on augumented user 3011 49/50 current_auc = 0.6643544210136886
User 3011 AUC after training: 0.6645394006659268
User 3011 improves AUC. Keeping the model.
[2024-12-02 17:38:49.722503] start test user 96442 2/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:38:50.440196] start test user 96442 2/567 recall augumented users by random, augumented_users = [35376, 44565, 65007, 100857, 10694, 16579, 17866, 91384, 31675, 5548, 80293, 43525, 73462, 104279, 105847, 66991, 6740, 31319, 56145, 106246, 103927, 26834, 39955, 37637, 113343, 44055, 109258, 8681, 106121, 8498, 79826, 96966, 109809, 800, 16855, 37469, 53302, 63631, 136564, 117639, 7668, 32634, 58110, 69542, 127467, 8148, 28442, 33638, 104651, 57956]
[2024-12-02 17:38:50.467300] user = 96442 Cloud 2/567
[2024-12-02 17:38:50.484068] user = 96442 Local 2/567
[2024-12-02 17:38:50.533722] user = 96442 Local+ 2/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:38:52.869827] user = 96442 MPDA- 2/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6111111111111112
Training on augumented user 35376 0/50 current_auc = 0.6111111111111112
User 35376 AUC after training: 0.6094276094276094
User 35376 does not improve AUC. Reverting changes.
Training on augumented user 44565 1/50 current_auc = 0.6111111111111112
User 44565 AUC after training: 0.6094276094276094
User 44565 does not improve AUC. Reverting changes.
Training on augumented user 65007 2/50 current_auc = 0.6111111111111112
User 65007 AUC after training: 0.6127946127946128
User 65007 improves AUC. Keeping the model.
Training on augumented user 100857 3/50 current_auc = 0.6127946127946128
User 100857 AUC after training: 0.6094276094276094
User 100857 does not improve AUC. Reverting changes.
Training on augumented user 10694 4/50 current_auc = 0.6127946127946128
User 10694 AUC after training: 0.6060606060606061
User 10694 does not improve AUC. Reverting changes.
Training on augumented user 16579 5/50 current_auc = 0.6127946127946128
User 16579 AUC after training: 0.6111111111111112
User 16579 does not improve AUC. Reverting changes.
Training on augumented user 17866 6/50 current_auc = 0.6127946127946128
User 17866 AUC after training: 0.6111111111111112
User 17866 does not improve AUC. Reverting changes.
Training on augumented user 91384 7/50 current_auc = 0.6127946127946128
User 91384 AUC after training: 0.6127946127946128
User 91384 does not improve AUC. Reverting changes.
Training on augumented user 31675 8/50 current_auc = 0.6127946127946128
User 31675 AUC after training: 0.6144781144781145
User 31675 improves AUC. Keeping the model.
Training on augumented user 5548 9/50 current_auc = 0.6144781144781145
User 5548 AUC after training: 0.6127946127946129
User 5548 does not improve AUC. Reverting changes.
Training on augumented user 80293 10/50 current_auc = 0.6144781144781145
User 80293 AUC after training: 0.6144781144781145
User 80293 does not improve AUC. Reverting changes.
Training on augumented user 43525 11/50 current_auc = 0.6144781144781145
User 43525 AUC after training: 0.6111111111111112
User 43525 does not improve AUC. Reverting changes.
Training on augumented user 73462 12/50 current_auc = 0.6144781144781145
User 73462 AUC after training: 0.6127946127946129
User 73462 does not improve AUC. Reverting changes.
Training on augumented user 104279 13/50 current_auc = 0.6144781144781145
User 104279 AUC after training: 0.6161616161616161
User 104279 improves AUC. Keeping the model.
Training on augumented user 105847 14/50 current_auc = 0.6161616161616161
User 105847 AUC after training: 0.6127946127946129
User 105847 does not improve AUC. Reverting changes.
Training on augumented user 66991 15/50 current_auc = 0.6161616161616161
User 66991 AUC after training: 0.6161616161616161
User 66991 does not improve AUC. Reverting changes.
Training on augumented user 6740 16/50 current_auc = 0.6161616161616161
User 6740 AUC after training: 0.6144781144781145
User 6740 does not improve AUC. Reverting changes.
Training on augumented user 31319 17/50 current_auc = 0.6161616161616161
User 31319 AUC after training: 0.6127946127946128
User 31319 does not improve AUC. Reverting changes.
Training on augumented user 56145 18/50 current_auc = 0.6161616161616161
User 56145 AUC after training: 0.6161616161616161
User 56145 does not improve AUC. Reverting changes.
Training on augumented user 106246 19/50 current_auc = 0.6161616161616161
User 106246 AUC after training: 0.6127946127946129
User 106246 does not improve AUC. Reverting changes.
Training on augumented user 103927 20/50 current_auc = 0.6161616161616161
User 103927 AUC after training: 0.6161616161616161
User 103927 does not improve AUC. Reverting changes.
Training on augumented user 26834 21/50 current_auc = 0.6161616161616161
User 26834 AUC after training: 0.6161616161616161
User 26834 does not improve AUC. Reverting changes.
Training on augumented user 39955 22/50 current_auc = 0.6161616161616161
User 39955 AUC after training: 0.6161616161616161
User 39955 does not improve AUC. Reverting changes.
Training on augumented user 37637 23/50 current_auc = 0.6161616161616161
User 37637 AUC after training: 0.6144781144781145
User 37637 does not improve AUC. Reverting changes.
Training on augumented user 113343 24/50 current_auc = 0.6161616161616161
User 113343 AUC after training: 0.6144781144781145
User 113343 does not improve AUC. Reverting changes.
Training on augumented user 44055 25/50 current_auc = 0.6161616161616161
User 44055 AUC after training: 0.6161616161616161
User 44055 does not improve AUC. Reverting changes.
Training on augumented user 109258 26/50 current_auc = 0.6161616161616161
User 109258 AUC after training: 0.6161616161616161
User 109258 does not improve AUC. Reverting changes.
Training on augumented user 8681 27/50 current_auc = 0.6161616161616161
User 8681 AUC after training: 0.6161616161616161
User 8681 does not improve AUC. Reverting changes.
Training on augumented user 106121 28/50 current_auc = 0.6161616161616161
User 106121 AUC after training: 0.6161616161616161
User 106121 does not improve AUC. Reverting changes.
Training on augumented user 8498 29/50 current_auc = 0.6161616161616161
User 8498 AUC after training: 0.6144781144781145
User 8498 does not improve AUC. Reverting changes.
Training on augumented user 79826 30/50 current_auc = 0.6161616161616161
User 79826 AUC after training: 0.6161616161616161
User 79826 does not improve AUC. Reverting changes.
Training on augumented user 96966 31/50 current_auc = 0.6161616161616161
User 96966 AUC after training: 0.6127946127946129
User 96966 does not improve AUC. Reverting changes.
Training on augumented user 109809 32/50 current_auc = 0.6161616161616161
User 109809 AUC after training: 0.6161616161616161
User 109809 does not improve AUC. Reverting changes.
Training on augumented user 800 33/50 current_auc = 0.6161616161616161
User 800 AUC after training: 0.6144781144781145
User 800 does not improve AUC. Reverting changes.
Training on augumented user 16855 34/50 current_auc = 0.6161616161616161
User 16855 AUC after training: 0.6161616161616161
User 16855 does not improve AUC. Reverting changes.
Training on augumented user 37469 35/50 current_auc = 0.6161616161616161
User 37469 AUC after training: 0.6144781144781145
User 37469 does not improve AUC. Reverting changes.
Training on augumented user 53302 36/50 current_auc = 0.6161616161616161
User 53302 AUC after training: 0.6161616161616161
User 53302 does not improve AUC. Reverting changes.
Training on augumented user 63631 37/50 current_auc = 0.6161616161616161
User 63631 AUC after training: 0.6144781144781144
User 63631 does not improve AUC. Reverting changes.
Training on augumented user 136564 38/50 current_auc = 0.6161616161616161
User 136564 AUC after training: 0.6161616161616161
User 136564 does not improve AUC. Reverting changes.
Training on augumented user 117639 39/50 current_auc = 0.6161616161616161
User 117639 AUC after training: 0.6144781144781145
User 117639 does not improve AUC. Reverting changes.
Training on augumented user 7668 40/50 current_auc = 0.6161616161616161
User 7668 AUC after training: 0.6161616161616161
User 7668 does not improve AUC. Reverting changes.
Training on augumented user 32634 41/50 current_auc = 0.6161616161616161
User 32634 AUC after training: 0.6144781144781145
User 32634 does not improve AUC. Reverting changes.
Training on augumented user 58110 42/50 current_auc = 0.6161616161616161
User 58110 AUC after training: 0.6144781144781145
User 58110 does not improve AUC. Reverting changes.
Training on augumented user 69542 43/50 current_auc = 0.6161616161616161
User 69542 AUC after training: 0.6161616161616161
User 69542 does not improve AUC. Reverting changes.
Training on augumented user 127467 44/50 current_auc = 0.6161616161616161
User 127467 AUC after training: 0.6144781144781145
User 127467 does not improve AUC. Reverting changes.
Training on augumented user 8148 45/50 current_auc = 0.6161616161616161
User 8148 AUC after training: 0.6144781144781145
User 8148 does not improve AUC. Reverting changes.
Training on augumented user 28442 46/50 current_auc = 0.6161616161616161
User 28442 AUC after training: 0.6127946127946128
User 28442 does not improve AUC. Reverting changes.
Training on augumented user 33638 47/50 current_auc = 0.6161616161616161
User 33638 AUC after training: 0.6161616161616161
User 33638 does not improve AUC. Reverting changes.
Training on augumented user 104651 48/50 current_auc = 0.6161616161616161
User 104651 AUC after training: 0.6161616161616161
User 104651 does not improve AUC. Reverting changes.
Training on augumented user 57956 49/50 current_auc = 0.6161616161616161
User 57956 AUC after training: 0.6127946127946128
User 57956 does not improve AUC. Reverting changes.
[2024-12-02 17:39:21.806486] start test user 96460 3/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:39:22.300150] start test user 96460 3/567 recall augumented users by random, augumented_users = [111417, 79578, 37435, 35553, 69991, 101439, 35467, 116403, 48581, 63355, 70095, 123286, 102022, 18321, 36273, 43925, 28035, 18202, 97534, 122276, 2506, 95696, 98316, 73268, 25729, 11754, 101680, 54742, 29784, 63741, 31305, 117733, 50855, 128148, 112656, 54503, 23556, 92428, 97562, 126096, 94372, 115333, 72887, 2344, 14056, 114121, 106599, 118253, 4015, 34935]
[2024-12-02 17:39:22.321267] user = 96460 Cloud 3/567
[2024-12-02 17:39:22.337512] user = 96460 Local 3/567
[2024-12-02 17:39:22.383397] user = 96460 Local+ 3/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:39:24.141158] user = 96460 MPDA- 3/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6287878787878787
Training on augumented user 111417 0/50 current_auc = 0.6287878787878787
User 111417 AUC after training: 0.6287878787878787
User 111417 does not improve AUC. Reverting changes.
Training on augumented user 79578 1/50 current_auc = 0.6287878787878787
User 79578 AUC after training: 0.6287878787878787
User 79578 does not improve AUC. Reverting changes.
Training on augumented user 37435 2/50 current_auc = 0.6287878787878787
User 37435 AUC after training: 0.6287878787878787
User 37435 does not improve AUC. Reverting changes.
Training on augumented user 35553 3/50 current_auc = 0.6287878787878787
User 35553 AUC after training: 0.625
User 35553 does not improve AUC. Reverting changes.
Training on augumented user 69991 4/50 current_auc = 0.6287878787878787
User 69991 AUC after training: 0.6287878787878787
User 69991 does not improve AUC. Reverting changes.
Training on augumented user 101439 5/50 current_auc = 0.6287878787878787
User 101439 AUC after training: 0.625
User 101439 does not improve AUC. Reverting changes.
Training on augumented user 35467 6/50 current_auc = 0.6287878787878787
User 35467 AUC after training: 0.6287878787878787
User 35467 does not improve AUC. Reverting changes.
Training on augumented user 116403 7/50 current_auc = 0.6287878787878787
User 116403 AUC after training: 0.6287878787878787
User 116403 does not improve AUC. Reverting changes.
Training on augumented user 48581 8/50 current_auc = 0.6287878787878787
User 48581 AUC after training: 0.6287878787878787
User 48581 does not improve AUC. Reverting changes.
Training on augumented user 63355 9/50 current_auc = 0.6287878787878787
User 63355 AUC after training: 0.6287878787878787
User 63355 does not improve AUC. Reverting changes.
Training on augumented user 70095 10/50 current_auc = 0.6287878787878787
User 70095 AUC after training: 0.625
User 70095 does not improve AUC. Reverting changes.
Training on augumented user 123286 11/50 current_auc = 0.6287878787878787
User 123286 AUC after training: 0.625
User 123286 does not improve AUC. Reverting changes.
Training on augumented user 102022 12/50 current_auc = 0.6287878787878787
User 102022 AUC after training: 0.6287878787878787
User 102022 does not improve AUC. Reverting changes.
Training on augumented user 18321 13/50 current_auc = 0.6287878787878787
User 18321 AUC after training: 0.6287878787878787
User 18321 does not improve AUC. Reverting changes.
Training on augumented user 36273 14/50 current_auc = 0.6287878787878787
User 36273 AUC after training: 0.6287878787878787
User 36273 does not improve AUC. Reverting changes.
Training on augumented user 43925 15/50 current_auc = 0.6287878787878787
User 43925 AUC after training: 0.6287878787878787
User 43925 does not improve AUC. Reverting changes.
Training on augumented user 28035 16/50 current_auc = 0.6287878787878787
User 28035 AUC after training: 0.625
User 28035 does not improve AUC. Reverting changes.
Training on augumented user 18202 17/50 current_auc = 0.6287878787878787
User 18202 AUC after training: 0.6287878787878787
User 18202 does not improve AUC. Reverting changes.
Training on augumented user 97534 18/50 current_auc = 0.6287878787878787
User 97534 AUC after training: 0.6287878787878787
User 97534 does not improve AUC. Reverting changes.
Training on augumented user 122276 19/50 current_auc = 0.6287878787878787
User 122276 AUC after training: 0.6287878787878787
User 122276 does not improve AUC. Reverting changes.
Training on augumented user 2506 20/50 current_auc = 0.6287878787878787
User 2506 AUC after training: 0.625
User 2506 does not improve AUC. Reverting changes.
Training on augumented user 95696 21/50 current_auc = 0.6287878787878787
User 95696 AUC after training: 0.6287878787878787
User 95696 does not improve AUC. Reverting changes.
Training on augumented user 98316 22/50 current_auc = 0.6287878787878787
User 98316 AUC after training: 0.625
User 98316 does not improve AUC. Reverting changes.
Training on augumented user 73268 23/50 current_auc = 0.6287878787878787
User 73268 AUC after training: 0.6287878787878787
User 73268 does not improve AUC. Reverting changes.
Training on augumented user 25729 24/50 current_auc = 0.6287878787878787
User 25729 AUC after training: 0.6287878787878787
User 25729 does not improve AUC. Reverting changes.
Training on augumented user 11754 25/50 current_auc = 0.6287878787878787
User 11754 AUC after training: 0.6287878787878787
User 11754 does not improve AUC. Reverting changes.
Training on augumented user 101680 26/50 current_auc = 0.6287878787878787
User 101680 AUC after training: 0.625
User 101680 does not improve AUC. Reverting changes.
Training on augumented user 54742 27/50 current_auc = 0.6287878787878787
User 54742 AUC after training: 0.6287878787878787
User 54742 does not improve AUC. Reverting changes.
Training on augumented user 29784 28/50 current_auc = 0.6287878787878787
User 29784 AUC after training: 0.6287878787878787
User 29784 does not improve AUC. Reverting changes.
Training on augumented user 63741 29/50 current_auc = 0.6287878787878787
User 63741 AUC after training: 0.6287878787878787
User 63741 does not improve AUC. Reverting changes.
Training on augumented user 31305 30/50 current_auc = 0.6287878787878787
User 31305 AUC after training: 0.6287878787878787
User 31305 does not improve AUC. Reverting changes.
Training on augumented user 117733 31/50 current_auc = 0.6287878787878787
User 117733 AUC after training: 0.625
User 117733 does not improve AUC. Reverting changes.
Training on augumented user 50855 32/50 current_auc = 0.6287878787878787
User 50855 AUC after training: 0.6287878787878787
User 50855 does not improve AUC. Reverting changes.
Training on augumented user 128148 33/50 current_auc = 0.6287878787878787
User 128148 AUC after training: 0.6287878787878787
User 128148 does not improve AUC. Reverting changes.
Training on augumented user 112656 34/50 current_auc = 0.6287878787878787
User 112656 AUC after training: 0.6287878787878787
User 112656 does not improve AUC. Reverting changes.
Training on augumented user 54503 35/50 current_auc = 0.6287878787878787
User 54503 AUC after training: 0.6287878787878787
User 54503 does not improve AUC. Reverting changes.
Training on augumented user 23556 36/50 current_auc = 0.6287878787878787
User 23556 AUC after training: 0.6287878787878787
User 23556 does not improve AUC. Reverting changes.
Training on augumented user 92428 37/50 current_auc = 0.6287878787878787
User 92428 AUC after training: 0.6287878787878787
User 92428 does not improve AUC. Reverting changes.
Training on augumented user 97562 38/50 current_auc = 0.6287878787878787
User 97562 AUC after training: 0.6287878787878787
User 97562 does not improve AUC. Reverting changes.
Training on augumented user 126096 39/50 current_auc = 0.6287878787878787
User 126096 AUC after training: 0.625
User 126096 does not improve AUC. Reverting changes.
Training on augumented user 94372 40/50 current_auc = 0.6287878787878787
User 94372 AUC after training: 0.6287878787878787
User 94372 does not improve AUC. Reverting changes.
Training on augumented user 115333 41/50 current_auc = 0.6287878787878787
User 115333 AUC after training: 0.625
User 115333 does not improve AUC. Reverting changes.
Training on augumented user 72887 42/50 current_auc = 0.6287878787878787
User 72887 AUC after training: 0.6287878787878787
User 72887 does not improve AUC. Reverting changes.
Training on augumented user 2344 43/50 current_auc = 0.6287878787878787
User 2344 AUC after training: 0.625
User 2344 does not improve AUC. Reverting changes.
Training on augumented user 14056 44/50 current_auc = 0.6287878787878787
User 14056 AUC after training: 0.625
User 14056 does not improve AUC. Reverting changes.
Training on augumented user 114121 45/50 current_auc = 0.6287878787878787
User 114121 AUC after training: 0.6287878787878787
User 114121 does not improve AUC. Reverting changes.
Training on augumented user 106599 46/50 current_auc = 0.6287878787878787
User 106599 AUC after training: 0.6287878787878787
User 106599 does not improve AUC. Reverting changes.
Training on augumented user 118253 47/50 current_auc = 0.6287878787878787
User 118253 AUC after training: 0.625
User 118253 does not improve AUC. Reverting changes.
Training on augumented user 4015 48/50 current_auc = 0.6287878787878787
User 4015 AUC after training: 0.625
User 4015 does not improve AUC. Reverting changes.
Training on augumented user 34935 49/50 current_auc = 0.6287878787878787
User 34935 AUC after training: 0.6287878787878787
User 34935 does not improve AUC. Reverting changes.
[2024-12-02 17:39:54.278043] start test user 96482 4/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:39:54.825262] start test user 96482 4/567 recall augumented users by random, augumented_users = [89959, 51727, 57187, 69712, 48024, 7859, 3552, 35053, 17050, 120039, 93877, 88402, 85468, 19723, 8427, 37958, 135526, 71038, 66769, 108033, 7342, 10478, 124232, 105508, 91793, 112477, 95695, 80331, 87116, 24946, 72237, 66714, 2576, 130523, 128864, 70132, 23887, 22414, 44048, 84436, 135246, 91751, 25505, 128437, 100458, 110352, 30029, 133916, 71651, 86581]
[2024-12-02 17:39:54.840800] user = 96482 Cloud 4/567
[2024-12-02 17:39:54.870111] user = 96482 Local 4/567
[2024-12-02 17:39:54.986566] user = 96482 Local+ 4/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:39:57.565966] user = 96482 MPDA- 4/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6883194755356572
Training on augumented user 89959 0/50 current_auc = 0.6883194755356572
User 89959 AUC after training: 0.6891789254876879
User 89959 improves AUC. Keeping the model.
Training on augumented user 51727 1/50 current_auc = 0.6891789254876879
User 51727 AUC after training: 0.6886392708666453
User 51727 does not improve AUC. Reverting changes.
Training on augumented user 57187 2/50 current_auc = 0.6891789254876879
User 57187 AUC after training: 0.6891389510713144
User 57187 does not improve AUC. Reverting changes.
Training on augumented user 69712 3/50 current_auc = 0.6891789254876879
User 69712 AUC after training: 0.6885193476175249
User 69712 does not improve AUC. Reverting changes.
Training on augumented user 48024 4/50 current_auc = 0.6891789254876879
User 48024 AUC after training: 0.6884793732011512
User 48024 does not improve AUC. Reverting changes.
Training on augumented user 7859 5/50 current_auc = 0.6891789254876879
User 7859 AUC after training: 0.6887192196993923
User 7859 does not improve AUC. Reverting changes.
Training on augumented user 3552 6/50 current_auc = 0.6891789254876879
User 3552 AUC after training: 0.6885992964502717
User 3552 does not improve AUC. Reverting changes.
Training on augumented user 35053 7/50 current_auc = 0.6891789254876879
User 35053 AUC after training: 0.6888391429485129
User 35053 does not improve AUC. Reverting changes.
Training on augumented user 17050 8/50 current_auc = 0.6891789254876879
User 17050 AUC after training: 0.6895187080268629
User 17050 improves AUC. Keeping the model.
Training on augumented user 120039 9/50 current_auc = 0.6895187080268629
User 120039 AUC after training: 0.689678605692357
User 120039 improves AUC. Keeping the model.
Training on augumented user 93877 10/50 current_auc = 0.689678605692357
User 93877 AUC after training: 0.6893987847777422
User 93877 does not improve AUC. Reverting changes.
Training on augumented user 88402 11/50 current_auc = 0.689678605692357
User 88402 AUC after training: 0.6899984010233451
User 88402 improves AUC. Keeping the model.
Training on augumented user 85468 12/50 current_auc = 0.6899984010233451
User 85468 AUC after training: 0.6898385033578509
User 85468 does not improve AUC. Reverting changes.
Training on augumented user 19723 13/50 current_auc = 0.6899984010233451
User 19723 AUC after training: 0.6897185801087303
User 19723 does not improve AUC. Reverting changes.
Training on augumented user 8427 14/50 current_auc = 0.6899984010233451
User 8427 AUC after training: 0.6900383754397186
User 8427 improves AUC. Keeping the model.
Training on augumented user 37958 15/50 current_auc = 0.6900383754397186
User 37958 AUC after training: 0.6899184521905979
User 37958 does not improve AUC. Reverting changes.
Training on augumented user 135526 16/50 current_auc = 0.6900383754397186
User 135526 AUC after training: 0.6897185801087304
User 135526 does not improve AUC. Reverting changes.
Training on augumented user 71038 17/50 current_auc = 0.6900383754397186
User 71038 AUC after training: 0.6893588103613687
User 71038 does not improve AUC. Reverting changes.
Training on augumented user 66769 18/50 current_auc = 0.6900383754397186
User 66769 AUC after training: 0.6901982731052125
User 66769 improves AUC. Keeping the model.
Training on augumented user 108033 19/50 current_auc = 0.6901982731052125
User 108033 AUC after training: 0.6897985289414775
User 108033 does not improve AUC. Reverting changes.
Training on augumented user 7342 20/50 current_auc = 0.6901982731052125
User 7342 AUC after training: 0.6903181963543332
User 7342 improves AUC. Keeping the model.
Training on augumented user 10478 21/50 current_auc = 0.6903181963543332
User 10478 AUC after training: 0.6905180684362009
User 10478 improves AUC. Keeping the model.
Training on augumented user 124232 22/50 current_auc = 0.6905180684362009
User 124232 AUC after training: 0.6903981451870803
User 124232 does not improve AUC. Reverting changes.
Training on augumented user 105508 23/50 current_auc = 0.6905180684362009
User 105508 AUC after training: 0.6901183242724657
User 105508 does not improve AUC. Reverting changes.
Training on augumented user 91793 24/50 current_auc = 0.6905180684362009
User 91793 AUC after training: 0.6893588103613687
User 91793 does not improve AUC. Reverting changes.
Training on augumented user 112477 25/50 current_auc = 0.6905180684362009
User 112477 AUC after training: 0.6900783498560922
User 112477 does not improve AUC. Reverting changes.
Training on augumented user 95695 26/50 current_auc = 0.6905180684362009
User 95695 AUC after training: 0.6905580428525744
User 95695 improves AUC. Keeping the model.
Training on augumented user 80331 27/50 current_auc = 0.6905580428525744
User 80331 AUC after training: 0.6903981451870802
User 80331 does not improve AUC. Reverting changes.
Training on augumented user 87116 28/50 current_auc = 0.6905580428525744
User 87116 AUC after training: 0.6902382475215862
User 87116 does not improve AUC. Reverting changes.
Training on augumented user 24946 29/50 current_auc = 0.6905580428525744
User 24946 AUC after training: 0.6898185161496642
User 24946 does not improve AUC. Reverting changes.
Training on augumented user 72237 30/50 current_auc = 0.6905580428525744
User 72237 AUC after training: 0.6899384393987849
User 72237 does not improve AUC. Reverting changes.
Training on augumented user 66714 31/50 current_auc = 0.6905580428525744
User 66714 AUC after training: 0.6904381196034538
User 66714 does not improve AUC. Reverting changes.
Training on augumented user 2576 32/50 current_auc = 0.6905580428525744
User 2576 AUC after training: 0.6903181963543332
User 2576 does not improve AUC. Reverting changes.
Training on augumented user 130523 33/50 current_auc = 0.6905580428525744
User 130523 AUC after training: 0.6897185801087304
User 130523 does not improve AUC. Reverting changes.
Training on augumented user 128864 34/50 current_auc = 0.6905580428525744
User 128864 AUC after training: 0.6901982731052126
User 128864 does not improve AUC. Reverting changes.
Training on augumented user 70132 35/50 current_auc = 0.6905580428525744
User 70132 AUC after training: 0.6904381196034539
User 70132 does not improve AUC. Reverting changes.
Training on augumented user 23887 36/50 current_auc = 0.6905580428525744
User 23887 AUC after training: 0.6891789254876879
User 23887 does not improve AUC. Reverting changes.
Training on augumented user 22414 37/50 current_auc = 0.6905580428525744
User 22414 AUC after training: 0.6904780940198273
User 22414 does not improve AUC. Reverting changes.
Training on augumented user 44048 38/50 current_auc = 0.6905580428525744
User 44048 AUC after training: 0.6903981451870802
User 44048 does not improve AUC. Reverting changes.
Training on augumented user 84436 39/50 current_auc = 0.6905580428525744
User 84436 AUC after training: 0.6905180684362008
User 84436 does not improve AUC. Reverting changes.
Training on augumented user 135246 40/50 current_auc = 0.6905580428525744
User 135246 AUC after training: 0.6904381196034538
User 135246 does not improve AUC. Reverting changes.
Training on augumented user 91751 41/50 current_auc = 0.6905580428525744
User 91751 AUC after training: 0.6903981451870803
User 91751 does not improve AUC. Reverting changes.
Training on augumented user 25505 42/50 current_auc = 0.6905580428525744
User 25505 AUC after training: 0.6904381196034538
User 25505 does not improve AUC. Reverting changes.
Training on augumented user 128437 43/50 current_auc = 0.6905580428525744
User 128437 AUC after training: 0.6905980172689479
User 128437 improves AUC. Keeping the model.
Training on augumented user 100458 44/50 current_auc = 0.6905980172689479
User 100458 AUC after training: 0.690418132395267
User 100458 does not improve AUC. Reverting changes.
Training on augumented user 110352 45/50 current_auc = 0.6905980172689479
User 110352 AUC after training: 0.6905580428525744
User 110352 does not improve AUC. Reverting changes.
Training on augumented user 30029 46/50 current_auc = 0.6905980172689479
User 30029 AUC after training: 0.6905180684362009
User 30029 does not improve AUC. Reverting changes.
Training on augumented user 133916 47/50 current_auc = 0.6905980172689479
User 133916 AUC after training: 0.6902182603133995
User 133916 does not improve AUC. Reverting changes.
Training on augumented user 71651 48/50 current_auc = 0.6905980172689479
User 71651 AUC after training: 0.6907579149344419
User 71651 improves AUC. Keeping the model.
Training on augumented user 86581 49/50 current_auc = 0.6907579149344419
User 86581 AUC after training: 0.6901982731052128
User 86581 does not improve AUC. Reverting changes.
[2024-12-02 17:40:26.329432] start test user 96511 5/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:40:26.752375] start test user 96511 5/567 recall augumented users by random, augumented_users = [83259, 2575, 32893, 133740, 115771, 126536, 76342, 11817, 3382, 101567, 61237, 39385, 84162, 74175, 29518, 99779, 87203, 3271, 100450, 46680, 104853, 73518, 34952, 105837, 47541, 68713, 54968, 32372, 91927, 8112, 115123, 44977, 7469, 87889, 47304, 20550, 32322, 104707, 55219, 86527, 121243, 1582, 35618, 7073, 51795, 124528, 36813, 24755, 119839, 49842]
[2024-12-02 17:40:26.767451] user = 96511 Cloud 5/567
[2024-12-02 17:40:26.785045] user = 96511 Local 5/567
[2024-12-02 17:40:26.862972] user = 96511 Local+ 5/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:40:28.964968] user = 96511 MPDA- 5/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.673076923076923
Training on augumented user 83259 0/50 current_auc = 0.673076923076923
User 83259 AUC after training: 0.673076923076923
User 83259 does not improve AUC. Reverting changes.
Training on augumented user 2575 1/50 current_auc = 0.673076923076923
User 2575 AUC after training: 0.673076923076923
User 2575 does not improve AUC. Reverting changes.
Training on augumented user 32893 2/50 current_auc = 0.673076923076923
User 32893 AUC after training: 0.673076923076923
User 32893 does not improve AUC. Reverting changes.
Training on augumented user 133740 3/50 current_auc = 0.673076923076923
User 133740 AUC after training: 0.673076923076923
User 133740 does not improve AUC. Reverting changes.
Training on augumented user 115771 4/50 current_auc = 0.673076923076923
User 115771 AUC after training: 0.673076923076923
User 115771 does not improve AUC. Reverting changes.
Training on augumented user 126536 5/50 current_auc = 0.673076923076923
User 126536 AUC after training: 0.673076923076923
User 126536 does not improve AUC. Reverting changes.
Training on augumented user 76342 6/50 current_auc = 0.673076923076923
User 76342 AUC after training: 0.673076923076923
User 76342 does not improve AUC. Reverting changes.
Training on augumented user 11817 7/50 current_auc = 0.673076923076923
User 11817 AUC after training: 0.673076923076923
User 11817 does not improve AUC. Reverting changes.
Training on augumented user 3382 8/50 current_auc = 0.673076923076923
User 3382 AUC after training: 0.673076923076923
User 3382 does not improve AUC. Reverting changes.
Training on augumented user 101567 9/50 current_auc = 0.673076923076923
User 101567 AUC after training: 0.673076923076923
User 101567 does not improve AUC. Reverting changes.
Training on augumented user 61237 10/50 current_auc = 0.673076923076923
User 61237 AUC after training: 0.673076923076923
User 61237 does not improve AUC. Reverting changes.
Training on augumented user 39385 11/50 current_auc = 0.673076923076923
User 39385 AUC after training: 0.673076923076923
User 39385 does not improve AUC. Reverting changes.
Training on augumented user 84162 12/50 current_auc = 0.673076923076923
User 84162 AUC after training: 0.673076923076923
User 84162 does not improve AUC. Reverting changes.
Training on augumented user 74175 13/50 current_auc = 0.673076923076923
User 74175 AUC after training: 0.673076923076923
User 74175 does not improve AUC. Reverting changes.
Training on augumented user 29518 14/50 current_auc = 0.673076923076923
User 29518 AUC after training: 0.673076923076923
User 29518 does not improve AUC. Reverting changes.
Training on augumented user 99779 15/50 current_auc = 0.673076923076923
User 99779 AUC after training: 0.673076923076923
User 99779 does not improve AUC. Reverting changes.
Training on augumented user 87203 16/50 current_auc = 0.673076923076923
User 87203 AUC after training: 0.673076923076923
User 87203 does not improve AUC. Reverting changes.
Training on augumented user 3271 17/50 current_auc = 0.673076923076923
User 3271 AUC after training: 0.673076923076923
User 3271 does not improve AUC. Reverting changes.
Training on augumented user 100450 18/50 current_auc = 0.673076923076923
User 100450 AUC after training: 0.673076923076923
User 100450 does not improve AUC. Reverting changes.
Training on augumented user 46680 19/50 current_auc = 0.673076923076923
User 46680 AUC after training: 0.673076923076923
User 46680 does not improve AUC. Reverting changes.
Training on augumented user 104853 20/50 current_auc = 0.673076923076923
User 104853 AUC after training: 0.673076923076923
User 104853 does not improve AUC. Reverting changes.
Training on augumented user 73518 21/50 current_auc = 0.673076923076923
User 73518 AUC after training: 0.673076923076923
User 73518 does not improve AUC. Reverting changes.
Training on augumented user 34952 22/50 current_auc = 0.673076923076923
User 34952 AUC after training: 0.673076923076923
User 34952 does not improve AUC. Reverting changes.
Training on augumented user 105837 23/50 current_auc = 0.673076923076923
User 105837 AUC after training: 0.673076923076923
User 105837 does not improve AUC. Reverting changes.
Training on augumented user 47541 24/50 current_auc = 0.673076923076923
User 47541 AUC after training: 0.673076923076923
User 47541 does not improve AUC. Reverting changes.
Training on augumented user 68713 25/50 current_auc = 0.673076923076923
User 68713 AUC after training: 0.673076923076923
User 68713 does not improve AUC. Reverting changes.
Training on augumented user 54968 26/50 current_auc = 0.673076923076923
User 54968 AUC after training: 0.673076923076923
User 54968 does not improve AUC. Reverting changes.
Training on augumented user 32372 27/50 current_auc = 0.673076923076923
User 32372 AUC after training: 0.673076923076923
User 32372 does not improve AUC. Reverting changes.
Training on augumented user 91927 28/50 current_auc = 0.673076923076923
User 91927 AUC after training: 0.673076923076923
User 91927 does not improve AUC. Reverting changes.
Training on augumented user 8112 29/50 current_auc = 0.673076923076923
User 8112 AUC after training: 0.673076923076923
User 8112 does not improve AUC. Reverting changes.
Training on augumented user 115123 30/50 current_auc = 0.673076923076923
User 115123 AUC after training: 0.673076923076923
User 115123 does not improve AUC. Reverting changes.
Training on augumented user 44977 31/50 current_auc = 0.673076923076923
User 44977 AUC after training: 0.673076923076923
User 44977 does not improve AUC. Reverting changes.
Training on augumented user 7469 32/50 current_auc = 0.673076923076923
User 7469 AUC after training: 0.673076923076923
User 7469 does not improve AUC. Reverting changes.
Training on augumented user 87889 33/50 current_auc = 0.673076923076923
User 87889 AUC after training: 0.673076923076923
User 87889 does not improve AUC. Reverting changes.
Training on augumented user 47304 34/50 current_auc = 0.673076923076923
User 47304 AUC after training: 0.673076923076923
User 47304 does not improve AUC. Reverting changes.
Training on augumented user 20550 35/50 current_auc = 0.673076923076923
User 20550 AUC after training: 0.673076923076923
User 20550 does not improve AUC. Reverting changes.
Training on augumented user 32322 36/50 current_auc = 0.673076923076923
User 32322 AUC after training: 0.673076923076923
User 32322 does not improve AUC. Reverting changes.
Training on augumented user 104707 37/50 current_auc = 0.673076923076923
User 104707 AUC after training: 0.673076923076923
User 104707 does not improve AUC. Reverting changes.
Training on augumented user 55219 38/50 current_auc = 0.673076923076923
User 55219 AUC after training: 0.673076923076923
User 55219 does not improve AUC. Reverting changes.
Training on augumented user 86527 39/50 current_auc = 0.673076923076923
User 86527 AUC after training: 0.673076923076923
User 86527 does not improve AUC. Reverting changes.
Training on augumented user 121243 40/50 current_auc = 0.673076923076923
User 121243 AUC after training: 0.673076923076923
User 121243 does not improve AUC. Reverting changes.
Training on augumented user 1582 41/50 current_auc = 0.673076923076923
User 1582 AUC after training: 0.673076923076923
User 1582 does not improve AUC. Reverting changes.
Training on augumented user 35618 42/50 current_auc = 0.673076923076923
User 35618 AUC after training: 0.673076923076923
User 35618 does not improve AUC. Reverting changes.
Training on augumented user 7073 43/50 current_auc = 0.673076923076923
User 7073 AUC after training: 0.673076923076923
User 7073 does not improve AUC. Reverting changes.
Training on augumented user 51795 44/50 current_auc = 0.673076923076923
User 51795 AUC after training: 0.673076923076923
User 51795 does not improve AUC. Reverting changes.
Training on augumented user 124528 45/50 current_auc = 0.673076923076923
User 124528 AUC after training: 0.673076923076923
User 124528 does not improve AUC. Reverting changes.
Training on augumented user 36813 46/50 current_auc = 0.673076923076923
User 36813 AUC after training: 0.673076923076923
User 36813 does not improve AUC. Reverting changes.
Training on augumented user 24755 47/50 current_auc = 0.673076923076923
User 24755 AUC after training: 0.673076923076923
User 24755 does not improve AUC. Reverting changes.
Training on augumented user 119839 48/50 current_auc = 0.673076923076923
User 119839 AUC after training: 0.673076923076923
User 119839 does not improve AUC. Reverting changes.
Training on augumented user 49842 49/50 current_auc = 0.673076923076923
User 49842 AUC after training: 0.673076923076923
User 49842 does not improve AUC. Reverting changes.
[2024-12-02 17:40:57.939949] start test user 96587 6/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:40:58.687853] start test user 96587 6/567 recall augumented users by random, augumented_users = [135615, 104599, 40436, 100126, 132798, 21257, 24176, 64796, 36002, 42667, 132450, 905, 44610, 15958, 44038, 14786, 64801, 20189, 136949, 7425, 14547, 56397, 125471, 37016, 103874, 35917, 70270, 6123, 114874, 109924, 45018, 114780, 10518, 85895, 52801, 71460, 126974, 97178, 124915, 118781, 24907, 63083, 40604, 121618, 85636, 39692, 95483, 12470, 99980, 47864]
[2024-12-02 17:40:58.704898] user = 96587 Cloud 6/567
[2024-12-02 17:40:58.723936] user = 96587 Local 6/567
[2024-12-02 17:40:58.765114] user = 96587 Local+ 6/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:41:00.637038] user = 96587 MPDA- 6/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6513227513227513
Training on augumented user 135615 0/50 current_auc = 0.6513227513227513
User 135615 AUC after training: 0.6518518518518518
User 135615 improves AUC. Keeping the model.
Training on augumented user 104599 1/50 current_auc = 0.6518518518518518
User 104599 AUC after training: 0.6537037037037038
User 104599 improves AUC. Keeping the model.
Training on augumented user 40436 2/50 current_auc = 0.6537037037037038
User 40436 AUC after training: 0.6526455026455027
User 40436 does not improve AUC. Reverting changes.
Training on augumented user 100126 3/50 current_auc = 0.6537037037037038
User 100126 AUC after training: 0.6531746031746033
User 100126 does not improve AUC. Reverting changes.
Training on augumented user 132798 4/50 current_auc = 0.6537037037037038
User 132798 AUC after training: 0.6534391534391534
User 132798 does not improve AUC. Reverting changes.
Training on augumented user 21257 5/50 current_auc = 0.6537037037037038
User 21257 AUC after training: 0.6526455026455026
User 21257 does not improve AUC. Reverting changes.
Training on augumented user 24176 6/50 current_auc = 0.6537037037037038
User 24176 AUC after training: 0.6529100529100529
User 24176 does not improve AUC. Reverting changes.
Training on augumented user 64796 7/50 current_auc = 0.6537037037037038
User 64796 AUC after training: 0.6534391534391534
User 64796 does not improve AUC. Reverting changes.
Training on augumented user 36002 8/50 current_auc = 0.6537037037037038
User 36002 AUC after training: 0.6529100529100529
User 36002 does not improve AUC. Reverting changes.
Training on augumented user 42667 9/50 current_auc = 0.6537037037037038
User 42667 AUC after training: 0.6529100529100528
User 42667 does not improve AUC. Reverting changes.
Training on augumented user 132450 10/50 current_auc = 0.6537037037037038
User 132450 AUC after training: 0.6507936507936508
User 132450 does not improve AUC. Reverting changes.
Training on augumented user 905 11/50 current_auc = 0.6537037037037038
User 905 AUC after training: 0.6537037037037037
User 905 does not improve AUC. Reverting changes.
Training on augumented user 44610 12/50 current_auc = 0.6537037037037038
User 44610 AUC after training: 0.653968253968254
User 44610 improves AUC. Keeping the model.
Training on augumented user 15958 13/50 current_auc = 0.653968253968254
User 15958 AUC after training: 0.6529100529100529
User 15958 does not improve AUC. Reverting changes.
Training on augumented user 44038 14/50 current_auc = 0.653968253968254
User 44038 AUC after training: 0.6507936507936508
User 44038 does not improve AUC. Reverting changes.
Training on augumented user 14786 15/50 current_auc = 0.653968253968254
User 14786 AUC after training: 0.6537037037037038
User 14786 does not improve AUC. Reverting changes.
Training on augumented user 64801 16/50 current_auc = 0.653968253968254
User 64801 AUC after training: 0.6521164021164021
User 64801 does not improve AUC. Reverting changes.
Training on augumented user 20189 17/50 current_auc = 0.653968253968254
User 20189 AUC after training: 0.6537037037037037
User 20189 does not improve AUC. Reverting changes.
Training on augumented user 136949 18/50 current_auc = 0.653968253968254
User 136949 AUC after training: 0.6526455026455027
User 136949 does not improve AUC. Reverting changes.
Training on augumented user 7425 19/50 current_auc = 0.653968253968254
User 7425 AUC after training: 0.6534391534391534
User 7425 does not improve AUC. Reverting changes.
Training on augumented user 14547 20/50 current_auc = 0.653968253968254
User 14547 AUC after training: 0.6523809523809525
User 14547 does not improve AUC. Reverting changes.
Training on augumented user 56397 21/50 current_auc = 0.653968253968254
User 56397 AUC after training: 0.6544973544973546
User 56397 improves AUC. Keeping the model.
Training on augumented user 125471 22/50 current_auc = 0.6544973544973546
User 125471 AUC after training: 0.6537037037037037
User 125471 does not improve AUC. Reverting changes.
Training on augumented user 37016 23/50 current_auc = 0.6544973544973546
User 37016 AUC after training: 0.6534391534391535
User 37016 does not improve AUC. Reverting changes.
Training on augumented user 103874 24/50 current_auc = 0.6544973544973546
User 103874 AUC after training: 0.6534391534391535
User 103874 does not improve AUC. Reverting changes.
Training on augumented user 35917 25/50 current_auc = 0.6544973544973546
User 35917 AUC after training: 0.6547619047619048
User 35917 improves AUC. Keeping the model.
Training on augumented user 70270 26/50 current_auc = 0.6547619047619048
User 70270 AUC after training: 0.653968253968254
User 70270 does not improve AUC. Reverting changes.
Training on augumented user 6123 27/50 current_auc = 0.6547619047619048
User 6123 AUC after training: 0.6542328042328042
User 6123 does not improve AUC. Reverting changes.
Training on augumented user 114874 28/50 current_auc = 0.6547619047619048
User 114874 AUC after training: 0.6537037037037037
User 114874 does not improve AUC. Reverting changes.
Training on augumented user 109924 29/50 current_auc = 0.6547619047619048
User 109924 AUC after training: 0.653968253968254
User 109924 does not improve AUC. Reverting changes.
Training on augumented user 45018 30/50 current_auc = 0.6547619047619048
User 45018 AUC after training: 0.6534391534391535
User 45018 does not improve AUC. Reverting changes.
Training on augumented user 114780 31/50 current_auc = 0.6547619047619048
User 114780 AUC after training: 0.653968253968254
User 114780 does not improve AUC. Reverting changes.
Training on augumented user 10518 32/50 current_auc = 0.6547619047619048
User 10518 AUC after training: 0.6542328042328042
User 10518 does not improve AUC. Reverting changes.
Training on augumented user 85895 33/50 current_auc = 0.6547619047619048
User 85895 AUC after training: 0.6558201058201059
User 85895 improves AUC. Keeping the model.
Training on augumented user 52801 34/50 current_auc = 0.6558201058201059
User 52801 AUC after training: 0.6537037037037037
User 52801 does not improve AUC. Reverting changes.
Training on augumented user 71460 35/50 current_auc = 0.6558201058201059
User 71460 AUC after training: 0.6531746031746032
User 71460 does not improve AUC. Reverting changes.
Training on augumented user 126974 36/50 current_auc = 0.6558201058201059
User 126974 AUC after training: 0.6558201058201057
User 126974 does not improve AUC. Reverting changes.
Training on augumented user 97178 37/50 current_auc = 0.6558201058201059
User 97178 AUC after training: 0.6544973544973544
User 97178 does not improve AUC. Reverting changes.
Training on augumented user 124915 38/50 current_auc = 0.6558201058201059
User 124915 AUC after training: 0.6566137566137565
User 124915 improves AUC. Keeping the model.
Training on augumented user 118781 39/50 current_auc = 0.6566137566137565
User 118781 AUC after training: 0.6542328042328042
User 118781 does not improve AUC. Reverting changes.
Training on augumented user 24907 40/50 current_auc = 0.6566137566137565
User 24907 AUC after training: 0.6547619047619048
User 24907 does not improve AUC. Reverting changes.
Training on augumented user 63083 41/50 current_auc = 0.6566137566137565
User 63083 AUC after training: 0.6534391534391534
User 63083 does not improve AUC. Reverting changes.
Training on augumented user 40604 42/50 current_auc = 0.6566137566137565
User 40604 AUC after training: 0.6552910052910053
User 40604 does not improve AUC. Reverting changes.
Training on augumented user 121618 43/50 current_auc = 0.6566137566137565
User 121618 AUC after training: 0.655026455026455
User 121618 does not improve AUC. Reverting changes.
Training on augumented user 85636 44/50 current_auc = 0.6566137566137565
User 85636 AUC after training: 0.6542328042328042
User 85636 does not improve AUC. Reverting changes.
Training on augumented user 39692 45/50 current_auc = 0.6566137566137565
User 39692 AUC after training: 0.6531746031746032
User 39692 does not improve AUC. Reverting changes.
Training on augumented user 95483 46/50 current_auc = 0.6566137566137565
User 95483 AUC after training: 0.6558201058201057
User 95483 does not improve AUC. Reverting changes.
Training on augumented user 12470 47/50 current_auc = 0.6566137566137565
User 12470 AUC after training: 0.653968253968254
User 12470 does not improve AUC. Reverting changes.
Training on augumented user 99980 48/50 current_auc = 0.6566137566137565
User 99980 AUC after training: 0.6537037037037036
User 99980 does not improve AUC. Reverting changes.
Training on augumented user 47864 49/50 current_auc = 0.6566137566137565
User 47864 AUC after training: 0.6539682539682539
User 47864 does not improve AUC. Reverting changes.
[2024-12-02 17:41:29.815225] start test user 96590 7/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:41:30.232280] start test user 96590 7/567 recall augumented users by random, augumented_users = [82211, 20134, 97715, 120997, 76988, 41918, 927, 45343, 24498, 41624, 41166, 133847, 8728, 11813, 73039, 40771, 68876, 20895, 114581, 33462, 9914, 77591, 80285, 65822, 68805, 47805, 109291, 87825, 87041, 37745, 57737, 84834, 20367, 8704, 708, 64684, 43676, 39256, 23479, 114863, 17446, 51695, 81761, 53084, 52403, 64807, 132602, 95071, 3944, 17134]
[2024-12-02 17:41:30.246952] user = 96590 Cloud 7/567
[2024-12-02 17:41:30.274785] user = 96590 Local 7/567
[2024-12-02 17:41:30.320116] user = 96590 Local+ 7/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:41:33.129244] user = 96590 MPDA- 7/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8091894555309189
Training on augumented user 82211 0/50 current_auc = 0.8091894555309189
User 82211 AUC after training: 0.809559004680956
User 82211 improves AUC. Keeping the model.
Training on augumented user 20134 1/50 current_auc = 0.809559004680956
User 20134 AUC after training: 0.8086967233308696
User 20134 does not improve AUC. Reverting changes.
Training on augumented user 97715 2/50 current_auc = 0.809559004680956
User 97715 AUC after training: 0.8093742301059375
User 97715 does not improve AUC. Reverting changes.
Training on augumented user 120997 3/50 current_auc = 0.809559004680956
User 120997 AUC after training: 0.8094974131559498
User 120997 does not improve AUC. Reverting changes.
Training on augumented user 76988 4/50 current_auc = 0.809559004680956
User 76988 AUC after training: 0.8093742301059375
User 76988 does not improve AUC. Reverting changes.
Training on augumented user 41918 5/50 current_auc = 0.809559004680956
User 41918 AUC after training: 0.8092510470559251
User 41918 does not improve AUC. Reverting changes.
Training on augumented user 927 6/50 current_auc = 0.809559004680956
User 927 AUC after training: 0.8095590046809559
User 927 does not improve AUC. Reverting changes.
Training on augumented user 45343 7/50 current_auc = 0.809559004680956
User 45343 AUC after training: 0.8093742301059373
User 45343 does not improve AUC. Reverting changes.
Training on augumented user 24498 8/50 current_auc = 0.809559004680956
User 24498 AUC after training: 0.8091278640059127
User 24498 does not improve AUC. Reverting changes.
Training on augumented user 41624 9/50 current_auc = 0.809559004680956
User 41624 AUC after training: 0.8094974131559498
User 41624 does not improve AUC. Reverting changes.
Training on augumented user 41166 10/50 current_auc = 0.809559004680956
User 41166 AUC after training: 0.8094358216309435
User 41166 does not improve AUC. Reverting changes.
Training on augumented user 133847 11/50 current_auc = 0.809559004680956
User 133847 AUC after training: 0.8095590046809559
User 133847 does not improve AUC. Reverting changes.
Training on augumented user 8728 12/50 current_auc = 0.809559004680956
User 8728 AUC after training: 0.8090662724809066
User 8728 does not improve AUC. Reverting changes.
Training on augumented user 11813 13/50 current_auc = 0.809559004680956
User 11813 AUC after training: 0.8091278640059129
User 11813 does not improve AUC. Reverting changes.
Training on augumented user 73039 14/50 current_auc = 0.809559004680956
User 73039 AUC after training: 0.8091894555309189
User 73039 does not improve AUC. Reverting changes.
Training on augumented user 40771 15/50 current_auc = 0.809559004680956
User 40771 AUC after training: 0.8090046809559005
User 40771 does not improve AUC. Reverting changes.
Training on augumented user 68876 16/50 current_auc = 0.809559004680956
User 68876 AUC after training: 0.8094358216309435
User 68876 does not improve AUC. Reverting changes.
Training on augumented user 20895 17/50 current_auc = 0.809559004680956
User 20895 AUC after training: 0.8091278640059127
User 20895 does not improve AUC. Reverting changes.
Training on augumented user 114581 18/50 current_auc = 0.809559004680956
User 114581 AUC after training: 0.8093742301059375
User 114581 does not improve AUC. Reverting changes.
Training on augumented user 33462 19/50 current_auc = 0.809559004680956
User 33462 AUC after training: 0.808881497905888
User 33462 does not improve AUC. Reverting changes.
Training on augumented user 9914 20/50 current_auc = 0.809559004680956
User 9914 AUC after training: 0.8092510470559251
User 9914 does not improve AUC. Reverting changes.
Training on augumented user 77591 21/50 current_auc = 0.809559004680956
User 77591 AUC after training: 0.8090046809559005
User 77591 does not improve AUC. Reverting changes.
Training on augumented user 80285 22/50 current_auc = 0.809559004680956
User 80285 AUC after training: 0.8090662724809067
User 80285 does not improve AUC. Reverting changes.
Training on augumented user 65822 23/50 current_auc = 0.809559004680956
User 65822 AUC after training: 0.8092510470559251
User 65822 does not improve AUC. Reverting changes.
Training on augumented user 68805 24/50 current_auc = 0.809559004680956
User 68805 AUC after training: 0.8091894555309189
User 68805 does not improve AUC. Reverting changes.
Training on augumented user 47805 25/50 current_auc = 0.809559004680956
User 47805 AUC after training: 0.8091278640059129
User 47805 does not improve AUC. Reverting changes.
Training on augumented user 109291 26/50 current_auc = 0.809559004680956
User 109291 AUC after training: 0.8094974131559498
User 109291 does not improve AUC. Reverting changes.
Training on augumented user 87825 27/50 current_auc = 0.809559004680956
User 87825 AUC after training: 0.8092510470559251
User 87825 does not improve AUC. Reverting changes.
Training on augumented user 87041 28/50 current_auc = 0.809559004680956
User 87041 AUC after training: 0.8088814979058881
User 87041 does not improve AUC. Reverting changes.
Training on augumented user 37745 29/50 current_auc = 0.809559004680956
User 37745 AUC after training: 0.8093126385809312
User 37745 does not improve AUC. Reverting changes.
Training on augumented user 57737 30/50 current_auc = 0.809559004680956
User 57737 AUC after training: 0.8086351318058635
User 57737 does not improve AUC. Reverting changes.
Training on augumented user 84834 31/50 current_auc = 0.809559004680956
User 84834 AUC after training: 0.8093742301059375
User 84834 does not improve AUC. Reverting changes.
Training on augumented user 20367 32/50 current_auc = 0.809559004680956
User 20367 AUC after training: 0.8093126385809313
User 20367 does not improve AUC. Reverting changes.
Training on augumented user 8704 33/50 current_auc = 0.809559004680956
User 8704 AUC after training: 0.8094974131559498
User 8704 does not improve AUC. Reverting changes.
Training on augumented user 708 34/50 current_auc = 0.809559004680956
User 708 AUC after training: 0.8094358216309435
User 708 does not improve AUC. Reverting changes.
Training on augumented user 64684 35/50 current_auc = 0.809559004680956
User 64684 AUC after training: 0.8083271741808327
User 64684 does not improve AUC. Reverting changes.
Training on augumented user 43676 36/50 current_auc = 0.809559004680956
User 43676 AUC after training: 0.8093742301059375
User 43676 does not improve AUC. Reverting changes.
Training on augumented user 39256 37/50 current_auc = 0.809559004680956
User 39256 AUC after training: 0.8093126385809313
User 39256 does not improve AUC. Reverting changes.
Training on augumented user 23479 38/50 current_auc = 0.809559004680956
User 23479 AUC after training: 0.8094358216309436
User 23479 does not improve AUC. Reverting changes.
Training on augumented user 114863 39/50 current_auc = 0.809559004680956
User 114863 AUC after training: 0.8093126385809313
User 114863 does not improve AUC. Reverting changes.
Training on augumented user 17446 40/50 current_auc = 0.809559004680956
User 17446 AUC after training: 0.8083887657058388
User 17446 does not improve AUC. Reverting changes.
Training on augumented user 51695 41/50 current_auc = 0.809559004680956
User 51695 AUC after training: 0.8093126385809313
User 51695 does not improve AUC. Reverting changes.
Training on augumented user 81761 42/50 current_auc = 0.809559004680956
User 81761 AUC after training: 0.8088814979058881
User 81761 does not improve AUC. Reverting changes.
Training on augumented user 53084 43/50 current_auc = 0.809559004680956
User 53084 AUC after training: 0.809620596205962
User 53084 improves AUC. Keeping the model.
Training on augumented user 52403 44/50 current_auc = 0.809620596205962
User 52403 AUC after training: 0.8092510470559251
User 52403 does not improve AUC. Reverting changes.
Training on augumented user 64807 45/50 current_auc = 0.809620596205962
User 64807 AUC after training: 0.8085735402808574
User 64807 does not improve AUC. Reverting changes.
Training on augumented user 132602 46/50 current_auc = 0.809620596205962
User 132602 AUC after training: 0.808450357230845
User 132602 does not improve AUC. Reverting changes.
Training on augumented user 95071 47/50 current_auc = 0.809620596205962
User 95071 AUC after training: 0.8094974131559497
User 95071 does not improve AUC. Reverting changes.
Training on augumented user 3944 48/50 current_auc = 0.809620596205962
User 3944 AUC after training: 0.8094358216309436
User 3944 does not improve AUC. Reverting changes.
Training on augumented user 17134 49/50 current_auc = 0.809620596205962
User 17134 AUC after training: 0.8094974131559497
User 17134 does not improve AUC. Reverting changes.
[2024-12-02 17:42:03.421641] start test user 96592 8/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:42:03.824642] start test user 96592 8/567 recall augumented users by random, augumented_users = [31176, 53086, 42811, 13572, 56352, 41575, 6156, 55165, 89950, 134252, 102030, 73455, 75453, 34422, 668, 55564, 97930, 123319, 36348, 4915, 1061, 131267, 31947, 26549, 63087, 106344, 134277, 27407, 124404, 71614, 134204, 9690, 40204, 36130, 711, 110101, 119474, 114855, 34743, 130592, 119383, 56440, 88687, 64017, 117131, 55721, 38751, 81859, 111855, 5354]
[2024-12-02 17:42:03.838902] user = 96592 Cloud 8/567
[2024-12-02 17:42:03.850242] user = 96592 Local 8/567
[2024-12-02 17:42:03.870924] user = 96592 Local+ 8/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:42:06.251333] user = 96592 MPDA- 8/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8638888888888889
Training on augumented user 31176 0/50 current_auc = 0.8638888888888889
User 31176 AUC after training: 0.8611111111111112
User 31176 does not improve AUC. Reverting changes.
Training on augumented user 53086 1/50 current_auc = 0.8638888888888889
User 53086 AUC after training: 0.8638888888888889
User 53086 does not improve AUC. Reverting changes.
Training on augumented user 42811 2/50 current_auc = 0.8638888888888889
User 42811 AUC after training: 0.8638888888888889
User 42811 does not improve AUC. Reverting changes.
Training on augumented user 13572 3/50 current_auc = 0.8638888888888889
User 13572 AUC after training: 0.8583333333333334
User 13572 does not improve AUC. Reverting changes.
Training on augumented user 56352 4/50 current_auc = 0.8638888888888889
User 56352 AUC after training: 0.8638888888888889
User 56352 does not improve AUC. Reverting changes.
Training on augumented user 41575 5/50 current_auc = 0.8638888888888889
User 41575 AUC after training: 0.8638888888888889
User 41575 does not improve AUC. Reverting changes.
Training on augumented user 6156 6/50 current_auc = 0.8638888888888889
User 6156 AUC after training: 0.8638888888888889
User 6156 does not improve AUC. Reverting changes.
Training on augumented user 55165 7/50 current_auc = 0.8638888888888889
User 55165 AUC after training: 0.8638888888888889
User 55165 does not improve AUC. Reverting changes.
Training on augumented user 89950 8/50 current_auc = 0.8638888888888889
User 89950 AUC after training: 0.8638888888888889
User 89950 does not improve AUC. Reverting changes.
Training on augumented user 134252 9/50 current_auc = 0.8638888888888889
User 134252 AUC after training: 0.8638888888888889
User 134252 does not improve AUC. Reverting changes.
Training on augumented user 102030 10/50 current_auc = 0.8638888888888889
User 102030 AUC after training: 0.8638888888888889
User 102030 does not improve AUC. Reverting changes.
Training on augumented user 73455 11/50 current_auc = 0.8638888888888889
User 73455 AUC after training: 0.8611111111111112
User 73455 does not improve AUC. Reverting changes.
Training on augumented user 75453 12/50 current_auc = 0.8638888888888889
User 75453 AUC after training: 0.8611111111111112
User 75453 does not improve AUC. Reverting changes.
Training on augumented user 34422 13/50 current_auc = 0.8638888888888889
User 34422 AUC after training: 0.8611111111111112
User 34422 does not improve AUC. Reverting changes.
Training on augumented user 668 14/50 current_auc = 0.8638888888888889
User 668 AUC after training: 0.8638888888888889
User 668 does not improve AUC. Reverting changes.
Training on augumented user 55564 15/50 current_auc = 0.8638888888888889
User 55564 AUC after training: 0.8638888888888889
User 55564 does not improve AUC. Reverting changes.
Training on augumented user 97930 16/50 current_auc = 0.8638888888888889
User 97930 AUC after training: 0.8611111111111112
User 97930 does not improve AUC. Reverting changes.
Training on augumented user 123319 17/50 current_auc = 0.8638888888888889
User 123319 AUC after training: 0.8638888888888889
User 123319 does not improve AUC. Reverting changes.
Training on augumented user 36348 18/50 current_auc = 0.8638888888888889
User 36348 AUC after training: 0.8583333333333334
User 36348 does not improve AUC. Reverting changes.
Training on augumented user 4915 19/50 current_auc = 0.8638888888888889
User 4915 AUC after training: 0.8611111111111112
User 4915 does not improve AUC. Reverting changes.
Training on augumented user 1061 20/50 current_auc = 0.8638888888888889
User 1061 AUC after training: 0.8638888888888889
User 1061 does not improve AUC. Reverting changes.
Training on augumented user 131267 21/50 current_auc = 0.8638888888888889
User 131267 AUC after training: 0.8611111111111112
User 131267 does not improve AUC. Reverting changes.
Training on augumented user 31947 22/50 current_auc = 0.8638888888888889
User 31947 AUC after training: 0.8638888888888889
User 31947 does not improve AUC. Reverting changes.
Training on augumented user 26549 23/50 current_auc = 0.8638888888888889
User 26549 AUC after training: 0.8638888888888889
User 26549 does not improve AUC. Reverting changes.
Training on augumented user 63087 24/50 current_auc = 0.8638888888888889
User 63087 AUC after training: 0.8583333333333334
User 63087 does not improve AUC. Reverting changes.
Training on augumented user 106344 25/50 current_auc = 0.8638888888888889
User 106344 AUC after training: 0.8638888888888889
User 106344 does not improve AUC. Reverting changes.
Training on augumented user 134277 26/50 current_auc = 0.8638888888888889
User 134277 AUC after training: 0.8638888888888889
User 134277 does not improve AUC. Reverting changes.
Training on augumented user 27407 27/50 current_auc = 0.8638888888888889
User 27407 AUC after training: 0.8666666666666667
User 27407 improves AUC. Keeping the model.
Training on augumented user 124404 28/50 current_auc = 0.8666666666666667
User 124404 AUC after training: 0.8611111111111112
User 124404 does not improve AUC. Reverting changes.
Training on augumented user 71614 29/50 current_auc = 0.8666666666666667
User 71614 AUC after training: 0.8611111111111112
User 71614 does not improve AUC. Reverting changes.
Training on augumented user 134204 30/50 current_auc = 0.8666666666666667
User 134204 AUC after training: 0.8638888888888889
User 134204 does not improve AUC. Reverting changes.
Training on augumented user 9690 31/50 current_auc = 0.8666666666666667
User 9690 AUC after training: 0.8555555555555556
User 9690 does not improve AUC. Reverting changes.
Training on augumented user 40204 32/50 current_auc = 0.8666666666666667
User 40204 AUC after training: 0.8638888888888889
User 40204 does not improve AUC. Reverting changes.
Training on augumented user 36130 33/50 current_auc = 0.8666666666666667
User 36130 AUC after training: 0.8666666666666667
User 36130 does not improve AUC. Reverting changes.
Training on augumented user 711 34/50 current_auc = 0.8666666666666667
User 711 AUC after training: 0.8638888888888889
User 711 does not improve AUC. Reverting changes.
Training on augumented user 110101 35/50 current_auc = 0.8666666666666667
User 110101 AUC after training: 0.8666666666666667
User 110101 does not improve AUC. Reverting changes.
Training on augumented user 119474 36/50 current_auc = 0.8666666666666667
User 119474 AUC after training: 0.8611111111111112
User 119474 does not improve AUC. Reverting changes.
Training on augumented user 114855 37/50 current_auc = 0.8666666666666667
User 114855 AUC after training: 0.8638888888888889
User 114855 does not improve AUC. Reverting changes.
Training on augumented user 34743 38/50 current_auc = 0.8666666666666667
User 34743 AUC after training: 0.8611111111111112
User 34743 does not improve AUC. Reverting changes.
Training on augumented user 130592 39/50 current_auc = 0.8666666666666667
User 130592 AUC after training: 0.8666666666666667
User 130592 does not improve AUC. Reverting changes.
Training on augumented user 119383 40/50 current_auc = 0.8666666666666667
User 119383 AUC after training: 0.8611111111111112
User 119383 does not improve AUC. Reverting changes.
Training on augumented user 56440 41/50 current_auc = 0.8666666666666667
User 56440 AUC after training: 0.8583333333333334
User 56440 does not improve AUC. Reverting changes.
Training on augumented user 88687 42/50 current_auc = 0.8666666666666667
User 88687 AUC after training: 0.8638888888888889
User 88687 does not improve AUC. Reverting changes.
Training on augumented user 64017 43/50 current_auc = 0.8666666666666667
User 64017 AUC after training: 0.8638888888888889
User 64017 does not improve AUC. Reverting changes.
Training on augumented user 117131 44/50 current_auc = 0.8666666666666667
User 117131 AUC after training: 0.8638888888888889
User 117131 does not improve AUC. Reverting changes.
Training on augumented user 55721 45/50 current_auc = 0.8666666666666667
User 55721 AUC after training: 0.8583333333333334
User 55721 does not improve AUC. Reverting changes.
Training on augumented user 38751 46/50 current_auc = 0.8666666666666667
User 38751 AUC after training: 0.8666666666666667
User 38751 does not improve AUC. Reverting changes.
Training on augumented user 81859 47/50 current_auc = 0.8666666666666667
User 81859 AUC after training: 0.8666666666666667
User 81859 does not improve AUC. Reverting changes.
Training on augumented user 111855 48/50 current_auc = 0.8666666666666667
User 111855 AUC after training: 0.8638888888888889
User 111855 does not improve AUC. Reverting changes.
Training on augumented user 5354 49/50 current_auc = 0.8666666666666667
User 5354 AUC after training: 0.8638888888888889
User 5354 does not improve AUC. Reverting changes.
[2024-12-02 17:42:32.191732] start test user 96608 9/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:42:32.625716] start test user 96608 9/567 recall augumented users by random, augumented_users = [51914, 88788, 38988, 37801, 50202, 7695, 105697, 38969, 1423, 92567, 129515, 73269, 56549, 106977, 87130, 24318, 59471, 78718, 36588, 25023, 86558, 68620, 47386, 45045, 26299, 34263, 104263, 15995, 16925, 14013, 123692, 120791, 74847, 34424, 92522, 39784, 76883, 135598, 2802, 24622, 109868, 75947, 14086, 28666, 48805, 91229, 22495, 54527, 78353, 31833]
[2024-12-02 17:42:32.641117] user = 96608 Cloud 9/567
[2024-12-02 17:42:32.651111] user = 96608 Local 9/567
[2024-12-02 17:42:32.772061] user = 96608 Local+ 9/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:42:34.855657] user = 96608 MPDA- 9/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8040540540540541
Training on augumented user 51914 0/50 current_auc = 0.8040540540540541
User 51914 AUC after training: 0.8040540540540541
User 51914 does not improve AUC. Reverting changes.
Training on augumented user 88788 1/50 current_auc = 0.8040540540540541
User 88788 AUC after training: 0.8040540540540541
User 88788 does not improve AUC. Reverting changes.
Training on augumented user 38988 2/50 current_auc = 0.8040540540540541
User 38988 AUC after training: 0.7972972972972974
User 38988 does not improve AUC. Reverting changes.
Training on augumented user 37801 3/50 current_auc = 0.8040540540540541
User 37801 AUC after training: 0.8040540540540541
User 37801 does not improve AUC. Reverting changes.
Training on augumented user 50202 4/50 current_auc = 0.8040540540540541
User 50202 AUC after training: 0.8040540540540541
User 50202 does not improve AUC. Reverting changes.
Training on augumented user 7695 5/50 current_auc = 0.8040540540540541
User 7695 AUC after training: 0.8040540540540541
User 7695 does not improve AUC. Reverting changes.
Training on augumented user 105697 6/50 current_auc = 0.8040540540540541
User 105697 AUC after training: 0.8040540540540541
User 105697 does not improve AUC. Reverting changes.
Training on augumented user 38969 7/50 current_auc = 0.8040540540540541
User 38969 AUC after training: 0.8040540540540541
User 38969 does not improve AUC. Reverting changes.
Training on augumented user 1423 8/50 current_auc = 0.8040540540540541
User 1423 AUC after training: 0.8040540540540541
User 1423 does not improve AUC. Reverting changes.
Training on augumented user 92567 9/50 current_auc = 0.8040540540540541
User 92567 AUC after training: 0.8175675675675675
User 92567 improves AUC. Keeping the model.
Training on augumented user 129515 10/50 current_auc = 0.8175675675675675
User 129515 AUC after training: 0.8108108108108107
User 129515 does not improve AUC. Reverting changes.
Training on augumented user 73269 11/50 current_auc = 0.8175675675675675
User 73269 AUC after training: 0.8175675675675675
User 73269 does not improve AUC. Reverting changes.
Training on augumented user 56549 12/50 current_auc = 0.8175675675675675
User 56549 AUC after training: 0.8108108108108107
User 56549 does not improve AUC. Reverting changes.
Training on augumented user 106977 13/50 current_auc = 0.8175675675675675
User 106977 AUC after training: 0.8175675675675675
User 106977 does not improve AUC. Reverting changes.
Training on augumented user 87130 14/50 current_auc = 0.8175675675675675
User 87130 AUC after training: 0.8175675675675675
User 87130 does not improve AUC. Reverting changes.
Training on augumented user 24318 15/50 current_auc = 0.8175675675675675
User 24318 AUC after training: 0.8175675675675675
User 24318 does not improve AUC. Reverting changes.
Training on augumented user 59471 16/50 current_auc = 0.8175675675675675
User 59471 AUC after training: 0.8175675675675675
User 59471 does not improve AUC. Reverting changes.
Training on augumented user 78718 17/50 current_auc = 0.8175675675675675
User 78718 AUC after training: 0.8040540540540541
User 78718 does not improve AUC. Reverting changes.
Training on augumented user 36588 18/50 current_auc = 0.8175675675675675
User 36588 AUC after training: 0.8040540540540541
User 36588 does not improve AUC. Reverting changes.
Training on augumented user 25023 19/50 current_auc = 0.8175675675675675
User 25023 AUC after training: 0.8108108108108109
User 25023 does not improve AUC. Reverting changes.
Training on augumented user 86558 20/50 current_auc = 0.8175675675675675
User 86558 AUC after training: 0.8175675675675675
User 86558 does not improve AUC. Reverting changes.
Training on augumented user 68620 21/50 current_auc = 0.8175675675675675
User 68620 AUC after training: 0.8040540540540541
User 68620 does not improve AUC. Reverting changes.
Training on augumented user 47386 22/50 current_auc = 0.8175675675675675
User 47386 AUC after training: 0.8175675675675675
User 47386 does not improve AUC. Reverting changes.
Training on augumented user 45045 23/50 current_auc = 0.8175675675675675
User 45045 AUC after training: 0.8175675675675675
User 45045 does not improve AUC. Reverting changes.
Training on augumented user 26299 24/50 current_auc = 0.8175675675675675
User 26299 AUC after training: 0.8108108108108107
User 26299 does not improve AUC. Reverting changes.
Training on augumented user 34263 25/50 current_auc = 0.8175675675675675
User 34263 AUC after training: 0.8175675675675675
User 34263 does not improve AUC. Reverting changes.
Training on augumented user 104263 26/50 current_auc = 0.8175675675675675
User 104263 AUC after training: 0.8175675675675675
User 104263 does not improve AUC. Reverting changes.
Training on augumented user 15995 27/50 current_auc = 0.8175675675675675
User 15995 AUC after training: 0.8108108108108109
User 15995 does not improve AUC. Reverting changes.
Training on augumented user 16925 28/50 current_auc = 0.8175675675675675
User 16925 AUC after training: 0.8040540540540541
User 16925 does not improve AUC. Reverting changes.
Training on augumented user 14013 29/50 current_auc = 0.8175675675675675
User 14013 AUC after training: 0.8175675675675675
User 14013 does not improve AUC. Reverting changes.
Training on augumented user 123692 30/50 current_auc = 0.8175675675675675
User 123692 AUC after training: 0.8108108108108107
User 123692 does not improve AUC. Reverting changes.
Training on augumented user 120791 31/50 current_auc = 0.8175675675675675
User 120791 AUC after training: 0.8108108108108109
User 120791 does not improve AUC. Reverting changes.
Training on augumented user 74847 32/50 current_auc = 0.8175675675675675
User 74847 AUC after training: 0.8243243243243243
User 74847 improves AUC. Keeping the model.
Training on augumented user 34424 33/50 current_auc = 0.8243243243243243
User 34424 AUC after training: 0.8175675675675675
User 34424 does not improve AUC. Reverting changes.
Training on augumented user 92522 34/50 current_auc = 0.8243243243243243
User 92522 AUC after training: 0.8040540540540541
User 92522 does not improve AUC. Reverting changes.
Training on augumented user 39784 35/50 current_auc = 0.8243243243243243
User 39784 AUC after training: 0.8175675675675675
User 39784 does not improve AUC. Reverting changes.
Training on augumented user 76883 36/50 current_auc = 0.8243243243243243
User 76883 AUC after training: 0.8175675675675675
User 76883 does not improve AUC. Reverting changes.
Training on augumented user 135598 37/50 current_auc = 0.8243243243243243
User 135598 AUC after training: 0.8108108108108107
User 135598 does not improve AUC. Reverting changes.
Training on augumented user 2802 38/50 current_auc = 0.8243243243243243
User 2802 AUC after training: 0.8175675675675675
User 2802 does not improve AUC. Reverting changes.
Training on augumented user 24622 39/50 current_auc = 0.8243243243243243
User 24622 AUC after training: 0.8175675675675675
User 24622 does not improve AUC. Reverting changes.
Training on augumented user 109868 40/50 current_auc = 0.8243243243243243
User 109868 AUC after training: 0.8175675675675675
User 109868 does not improve AUC. Reverting changes.
Training on augumented user 75947 41/50 current_auc = 0.8243243243243243
User 75947 AUC after training: 0.8175675675675675
User 75947 does not improve AUC. Reverting changes.
Training on augumented user 14086 42/50 current_auc = 0.8243243243243243
User 14086 AUC after training: 0.8040540540540541
User 14086 does not improve AUC. Reverting changes.
Training on augumented user 28666 43/50 current_auc = 0.8243243243243243
User 28666 AUC after training: 0.8243243243243243
User 28666 does not improve AUC. Reverting changes.
Training on augumented user 48805 44/50 current_auc = 0.8243243243243243
User 48805 AUC after training: 0.8175675675675675
User 48805 does not improve AUC. Reverting changes.
Training on augumented user 91229 45/50 current_auc = 0.8243243243243243
User 91229 AUC after training: 0.8175675675675675
User 91229 does not improve AUC. Reverting changes.
Training on augumented user 22495 46/50 current_auc = 0.8243243243243243
User 22495 AUC after training: 0.8108108108108109
User 22495 does not improve AUC. Reverting changes.
Training on augumented user 54527 47/50 current_auc = 0.8243243243243243
User 54527 AUC after training: 0.8175675675675675
User 54527 does not improve AUC. Reverting changes.
Training on augumented user 78353 48/50 current_auc = 0.8243243243243243
User 78353 AUC after training: 0.8175675675675675
User 78353 does not improve AUC. Reverting changes.
Training on augumented user 31833 49/50 current_auc = 0.8243243243243243
User 31833 AUC after training: 0.8175675675675675
User 31833 does not improve AUC. Reverting changes.
[2024-12-02 17:43:01.959302] start test user 96617 10/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:43:02.751303] start test user 96617 10/567 recall augumented users by random, augumented_users = [136726, 109077, 113976, 122251, 78773, 21630, 93525, 35641, 6951, 103318, 96600, 1424, 133657, 26862, 111491, 110268, 94577, 94578, 130255, 125720, 43243, 125832, 117084, 3065, 135138, 113435, 124240, 93640, 126342, 44518, 133698, 19492, 110903, 52849, 48538, 23374, 1431, 3172, 60484, 2002, 135006, 125225, 134578, 101424, 106873, 123500, 25327, 125426, 136007, 33637]
[2024-12-02 17:43:02.766063] user = 96617 Cloud 10/567
[2024-12-02 17:43:02.776140] user = 96617 Local 10/567
[2024-12-02 17:43:02.825985] user = 96617 Local+ 10/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:43:05.216200] user = 96617 MPDA- 10/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.3125
Training on augumented user 136726 0/50 current_auc = 0.3125
User 136726 AUC after training: 0.3125
User 136726 does not improve AUC. Reverting changes.
Training on augumented user 109077 1/50 current_auc = 0.3125
User 109077 AUC after training: 0.3125
User 109077 does not improve AUC. Reverting changes.
Training on augumented user 113976 2/50 current_auc = 0.3125
User 113976 AUC after training: 0.3125
User 113976 does not improve AUC. Reverting changes.
Training on augumented user 122251 3/50 current_auc = 0.3125
User 122251 AUC after training: 0.3125
User 122251 does not improve AUC. Reverting changes.
Training on augumented user 78773 4/50 current_auc = 0.3125
User 78773 AUC after training: 0.3125
User 78773 does not improve AUC. Reverting changes.
Training on augumented user 21630 5/50 current_auc = 0.3125
User 21630 AUC after training: 0.3125
User 21630 does not improve AUC. Reverting changes.
Training on augumented user 93525 6/50 current_auc = 0.3125
User 93525 AUC after training: 0.3125
User 93525 does not improve AUC. Reverting changes.
Training on augumented user 35641 7/50 current_auc = 0.3125
User 35641 AUC after training: 0.3125
User 35641 does not improve AUC. Reverting changes.
Training on augumented user 6951 8/50 current_auc = 0.3125
User 6951 AUC after training: 0.3125
User 6951 does not improve AUC. Reverting changes.
Training on augumented user 103318 9/50 current_auc = 0.3125
User 103318 AUC after training: 0.3125
User 103318 does not improve AUC. Reverting changes.
Training on augumented user 96600 10/50 current_auc = 0.3125
User 96600 AUC after training: 0.3125
User 96600 does not improve AUC. Reverting changes.
Training on augumented user 1424 11/50 current_auc = 0.3125
User 1424 AUC after training: 0.3125
User 1424 does not improve AUC. Reverting changes.
Training on augumented user 133657 12/50 current_auc = 0.3125
User 133657 AUC after training: 0.3125
User 133657 does not improve AUC. Reverting changes.
Training on augumented user 26862 13/50 current_auc = 0.3125
User 26862 AUC after training: 0.3125
User 26862 does not improve AUC. Reverting changes.
Training on augumented user 111491 14/50 current_auc = 0.3125
User 111491 AUC after training: 0.3125
User 111491 does not improve AUC. Reverting changes.
Training on augumented user 110268 15/50 current_auc = 0.3125
User 110268 AUC after training: 0.3125
User 110268 does not improve AUC. Reverting changes.
Training on augumented user 94577 16/50 current_auc = 0.3125
User 94577 AUC after training: 0.3125
User 94577 does not improve AUC. Reverting changes.
Training on augumented user 94578 17/50 current_auc = 0.3125
User 94578 AUC after training: 0.3125
User 94578 does not improve AUC. Reverting changes.
Training on augumented user 130255 18/50 current_auc = 0.3125
User 130255 AUC after training: 0.3125
User 130255 does not improve AUC. Reverting changes.
Training on augumented user 125720 19/50 current_auc = 0.3125
User 125720 AUC after training: 0.2916666666666667
User 125720 does not improve AUC. Reverting changes.
Training on augumented user 43243 20/50 current_auc = 0.3125
User 43243 AUC after training: 0.3125
User 43243 does not improve AUC. Reverting changes.
Training on augumented user 125832 21/50 current_auc = 0.3125
User 125832 AUC after training: 0.3125
User 125832 does not improve AUC. Reverting changes.
Training on augumented user 117084 22/50 current_auc = 0.3125
User 117084 AUC after training: 0.3125
User 117084 does not improve AUC. Reverting changes.
Training on augumented user 3065 23/50 current_auc = 0.3125
User 3065 AUC after training: 0.3125
User 3065 does not improve AUC. Reverting changes.
Training on augumented user 135138 24/50 current_auc = 0.3125
User 135138 AUC after training: 0.3125
User 135138 does not improve AUC. Reverting changes.
Training on augumented user 113435 25/50 current_auc = 0.3125
User 113435 AUC after training: 0.3125
User 113435 does not improve AUC. Reverting changes.
Training on augumented user 124240 26/50 current_auc = 0.3125
User 124240 AUC after training: 0.3125
User 124240 does not improve AUC. Reverting changes.
Training on augumented user 93640 27/50 current_auc = 0.3125
User 93640 AUC after training: 0.3125
User 93640 does not improve AUC. Reverting changes.
Training on augumented user 126342 28/50 current_auc = 0.3125
User 126342 AUC after training: 0.3125
User 126342 does not improve AUC. Reverting changes.
Training on augumented user 44518 29/50 current_auc = 0.3125
User 44518 AUC after training: 0.3125
User 44518 does not improve AUC. Reverting changes.
Training on augumented user 133698 30/50 current_auc = 0.3125
User 133698 AUC after training: 0.3125
User 133698 does not improve AUC. Reverting changes.
Training on augumented user 19492 31/50 current_auc = 0.3125
User 19492 AUC after training: 0.3125
User 19492 does not improve AUC. Reverting changes.
Training on augumented user 110903 32/50 current_auc = 0.3125
User 110903 AUC after training: 0.3125
User 110903 does not improve AUC. Reverting changes.
Training on augumented user 52849 33/50 current_auc = 0.3125
User 52849 AUC after training: 0.3125
User 52849 does not improve AUC. Reverting changes.
Training on augumented user 48538 34/50 current_auc = 0.3125
User 48538 AUC after training: 0.3125
User 48538 does not improve AUC. Reverting changes.
Training on augumented user 23374 35/50 current_auc = 0.3125
User 23374 AUC after training: 0.3125
User 23374 does not improve AUC. Reverting changes.
Training on augumented user 1431 36/50 current_auc = 0.3125
User 1431 AUC after training: 0.3125
User 1431 does not improve AUC. Reverting changes.
Training on augumented user 3172 37/50 current_auc = 0.3125
User 3172 AUC after training: 0.3125
User 3172 does not improve AUC. Reverting changes.
Training on augumented user 60484 38/50 current_auc = 0.3125
User 60484 AUC after training: 0.3125
User 60484 does not improve AUC. Reverting changes.
Training on augumented user 2002 39/50 current_auc = 0.3125
User 2002 AUC after training: 0.2916666666666667
User 2002 does not improve AUC. Reverting changes.
Training on augumented user 135006 40/50 current_auc = 0.3125
User 135006 AUC after training: 0.3125
User 135006 does not improve AUC. Reverting changes.
Training on augumented user 125225 41/50 current_auc = 0.3125
User 125225 AUC after training: 0.3125
User 125225 does not improve AUC. Reverting changes.
Training on augumented user 134578 42/50 current_auc = 0.3125
User 134578 AUC after training: 0.3125
User 134578 does not improve AUC. Reverting changes.
Training on augumented user 101424 43/50 current_auc = 0.3125
User 101424 AUC after training: 0.3125
User 101424 does not improve AUC. Reverting changes.
Training on augumented user 106873 44/50 current_auc = 0.3125
User 106873 AUC after training: 0.3125
User 106873 does not improve AUC. Reverting changes.
Training on augumented user 123500 45/50 current_auc = 0.3125
User 123500 AUC after training: 0.3125
User 123500 does not improve AUC. Reverting changes.
Training on augumented user 25327 46/50 current_auc = 0.3125
User 25327 AUC after training: 0.3125
User 25327 does not improve AUC. Reverting changes.
Training on augumented user 125426 47/50 current_auc = 0.3125
User 125426 AUC after training: 0.3125
User 125426 does not improve AUC. Reverting changes.
Training on augumented user 136007 48/50 current_auc = 0.3125
User 136007 AUC after training: 0.3125
User 136007 does not improve AUC. Reverting changes.
Training on augumented user 33637 49/50 current_auc = 0.3125
User 33637 AUC after training: 0.3125
User 33637 does not improve AUC. Reverting changes.
[2024-12-02 17:43:33.802647] start test user 96618 11/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:43:34.463777] start test user 96618 11/567 recall augumented users by random, augumented_users = [122627, 86130, 59191, 64821, 53041, 39825, 91316, 44077, 97982, 104384, 80114, 84120, 6591, 19045, 135587, 128841, 107779, 42313, 31923, 67344, 89865, 124480, 37866, 74173, 7458, 62124, 109035, 98079, 81299, 94482, 94780, 35736, 134993, 76462, 61354, 102482, 49335, 85652, 115829, 86913, 23042, 66782, 95601, 18795, 20049, 85308, 40985, 115685, 7375, 136893]
[2024-12-02 17:43:34.485169] user = 96618 Cloud 11/567
[2024-12-02 17:43:34.528033] user = 96618 Local 11/567
[2024-12-02 17:43:34.690403] user = 96618 Local+ 11/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:43:36.961130] user = 96618 MPDA- 11/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.575664739884393
Training on augumented user 122627 0/50 current_auc = 0.575664739884393
User 122627 AUC after training: 0.5753901734104045
User 122627 does not improve AUC. Reverting changes.
Training on augumented user 86130 1/50 current_auc = 0.575664739884393
User 86130 AUC after training: 0.5755780346820809
User 86130 does not improve AUC. Reverting changes.
Training on augumented user 59191 2/50 current_auc = 0.575664739884393
User 59191 AUC after training: 0.575635838150289
User 59191 does not improve AUC. Reverting changes.
Training on augumented user 64821 3/50 current_auc = 0.575664739884393
User 64821 AUC after training: 0.5756936416184971
User 64821 improves AUC. Keeping the model.
Training on augumented user 53041 4/50 current_auc = 0.5756936416184971
User 53041 AUC after training: 0.5760838150289017
User 53041 improves AUC. Keeping the model.
Training on augumented user 39825 5/50 current_auc = 0.5760838150289017
User 39825 AUC after training: 0.5764739884393064
User 39825 improves AUC. Keeping the model.
Training on augumented user 91316 6/50 current_auc = 0.5764739884393064
User 91316 AUC after training: 0.5764450867052022
User 91316 does not improve AUC. Reverting changes.
Training on augumented user 44077 7/50 current_auc = 0.5764739884393064
User 44077 AUC after training: 0.5769075144508671
User 44077 improves AUC. Keeping the model.
Training on augumented user 97982 8/50 current_auc = 0.5769075144508671
User 97982 AUC after training: 0.5774132947976879
User 97982 improves AUC. Keeping the model.
Training on augumented user 104384 9/50 current_auc = 0.5774132947976879
User 104384 AUC after training: 0.5772687861271677
User 104384 does not improve AUC. Reverting changes.
Training on augumented user 80114 10/50 current_auc = 0.5774132947976879
User 80114 AUC after training: 0.5767196531791907
User 80114 does not improve AUC. Reverting changes.
Training on augumented user 84120 11/50 current_auc = 0.5774132947976879
User 84120 AUC after training: 0.5776734104046243
User 84120 improves AUC. Keeping the model.
Training on augumented user 6591 12/50 current_auc = 0.5776734104046243
User 6591 AUC after training: 0.577456647398844
User 6591 does not improve AUC. Reverting changes.
Training on augumented user 19045 13/50 current_auc = 0.5776734104046243
User 19045 AUC after training: 0.5771242774566474
User 19045 does not improve AUC. Reverting changes.
Training on augumented user 135587 14/50 current_auc = 0.5776734104046243
User 135587 AUC after training: 0.5773265895953756
User 135587 does not improve AUC. Reverting changes.
Training on augumented user 128841 15/50 current_auc = 0.5776734104046243
User 128841 AUC after training: 0.5777456647398844
User 128841 improves AUC. Keeping the model.
Training on augumented user 107779 16/50 current_auc = 0.5777456647398844
User 107779 AUC after training: 0.5781502890173411
User 107779 improves AUC. Keeping the model.
Training on augumented user 42313 17/50 current_auc = 0.5781502890173411
User 42313 AUC after training: 0.578063583815029
User 42313 does not improve AUC. Reverting changes.
Training on augumented user 31923 18/50 current_auc = 0.5781502890173411
User 31923 AUC after training: 0.5777456647398844
User 31923 does not improve AUC. Reverting changes.
Training on augumented user 67344 19/50 current_auc = 0.5781502890173411
User 67344 AUC after training: 0.5782514450867052
User 67344 improves AUC. Keeping the model.
Training on augumented user 89865 20/50 current_auc = 0.5782514450867052
User 89865 AUC after training: 0.5777745664739884
User 89865 does not improve AUC. Reverting changes.
Training on augumented user 124480 21/50 current_auc = 0.5782514450867052
User 124480 AUC after training: 0.5778612716763006
User 124480 does not improve AUC. Reverting changes.
Training on augumented user 37866 22/50 current_auc = 0.5782514450867052
User 37866 AUC after training: 0.5784682080924857
User 37866 improves AUC. Keeping the model.
Training on augumented user 74173 23/50 current_auc = 0.5784682080924857
User 74173 AUC after training: 0.5788439306358382
User 74173 improves AUC. Keeping the model.
Training on augumented user 7458 24/50 current_auc = 0.5788439306358382
User 7458 AUC after training: 0.57878612716763
User 7458 does not improve AUC. Reverting changes.
Training on augumented user 62124 25/50 current_auc = 0.5788439306358382
User 62124 AUC after training: 0.578757225433526
User 62124 does not improve AUC. Reverting changes.
Training on augumented user 109035 26/50 current_auc = 0.5788439306358382
User 109035 AUC after training: 0.5779768786127167
User 109035 does not improve AUC. Reverting changes.
Training on augumented user 98079 27/50 current_auc = 0.5788439306358382
User 98079 AUC after training: 0.578121387283237
User 98079 does not improve AUC. Reverting changes.
Training on augumented user 81299 28/50 current_auc = 0.5788439306358382
User 81299 AUC after training: 0.5785549132947977
User 81299 does not improve AUC. Reverting changes.
Training on augumented user 94482 29/50 current_auc = 0.5788439306358382
User 94482 AUC after training: 0.5786416184971098
User 94482 does not improve AUC. Reverting changes.
Training on augumented user 94780 30/50 current_auc = 0.5788439306358382
User 94780 AUC after training: 0.5788439306358382
User 94780 does not improve AUC. Reverting changes.
Training on augumented user 35736 31/50 current_auc = 0.5788439306358382
User 35736 AUC after training: 0.5789884393063585
User 35736 improves AUC. Keeping the model.
Training on augumented user 134993 32/50 current_auc = 0.5789884393063585
User 134993 AUC after training: 0.5789884393063585
User 134993 does not improve AUC. Reverting changes.
Training on augumented user 76462 33/50 current_auc = 0.5789884393063585
User 76462 AUC after training: 0.5785838150289018
User 76462 does not improve AUC. Reverting changes.
Training on augumented user 61354 34/50 current_auc = 0.5789884393063585
User 61354 AUC after training: 0.5784971098265896
User 61354 does not improve AUC. Reverting changes.
Training on augumented user 102482 35/50 current_auc = 0.5789884393063585
User 102482 AUC after training: 0.5790895953757226
User 102482 improves AUC. Keeping the model.
Training on augumented user 49335 36/50 current_auc = 0.5790895953757226
User 49335 AUC after training: 0.5791040462427746
User 49335 improves AUC. Keeping the model.
Training on augumented user 85652 37/50 current_auc = 0.5791040462427746
User 85652 AUC after training: 0.5789884393063585
User 85652 does not improve AUC. Reverting changes.
Training on augumented user 115829 38/50 current_auc = 0.5791040462427746
User 115829 AUC after training: 0.5791618497109827
User 115829 improves AUC. Keeping the model.
Training on augumented user 86913 39/50 current_auc = 0.5791618497109827
User 86913 AUC after training: 0.5765895953757225
User 86913 does not improve AUC. Reverting changes.
Training on augumented user 23042 40/50 current_auc = 0.5791618497109827
User 23042 AUC after training: 0.5785549132947977
User 23042 does not improve AUC. Reverting changes.
Training on augumented user 66782 41/50 current_auc = 0.5791618497109827
User 66782 AUC after training: 0.5786416184971098
User 66782 does not improve AUC. Reverting changes.
Training on augumented user 95601 42/50 current_auc = 0.5791618497109827
User 95601 AUC after training: 0.5781791907514451
User 95601 does not improve AUC. Reverting changes.
Training on augumented user 18795 43/50 current_auc = 0.5791618497109827
User 18795 AUC after training: 0.5788150289017342
User 18795 does not improve AUC. Reverting changes.
Training on augumented user 20049 44/50 current_auc = 0.5791618497109827
User 20049 AUC after training: 0.5784104046242774
User 20049 does not improve AUC. Reverting changes.
Training on augumented user 85308 45/50 current_auc = 0.5791618497109827
User 85308 AUC after training: 0.5786416184971098
User 85308 does not improve AUC. Reverting changes.
Training on augumented user 40985 46/50 current_auc = 0.5791618497109827
User 40985 AUC after training: 0.5793641618497108
User 40985 improves AUC. Keeping the model.
Training on augumented user 115685 47/50 current_auc = 0.5793641618497108
User 115685 AUC after training: 0.5793930635838149
User 115685 improves AUC. Keeping the model.
Training on augumented user 7375 48/50 current_auc = 0.5793930635838149
User 7375 AUC after training: 0.5793930635838149
User 7375 does not improve AUC. Reverting changes.
Training on augumented user 136893 49/50 current_auc = 0.5793930635838149
User 136893 AUC after training: 0.5791618497109826
User 136893 does not improve AUC. Reverting changes.
[2024-12-02 17:44:07.800833] start test user 96647 12/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:44:08.269133] start test user 96647 12/567 recall augumented users by random, augumented_users = [31596, 46602, 105810, 136564, 111411, 26214, 76067, 96490, 65444, 130782, 1116, 92329, 25830, 25337, 28426, 115488, 87845, 31045, 102348, 78834, 16698, 109054, 27795, 136733, 119536, 44609, 124445, 92026, 66993, 67167, 120159, 123881, 22023, 5740, 135078, 69132, 42256, 138364, 75521, 44713, 109290, 75966, 19136, 62913, 14306, 76433, 104002, 96449, 101723, 22142]
[2024-12-02 17:44:08.284887] user = 96647 Cloud 12/567
[2024-12-02 17:44:08.327089] user = 96647 Local 12/567
[2024-12-02 17:44:08.448522] user = 96647 Local+ 12/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:44:10.666893] user = 96647 MPDA- 12/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.845511631225917
Training on augumented user 31596 0/50 current_auc = 0.845511631225917
User 31596 AUC after training: 0.8457574171859887
User 31596 improves AUC. Keeping the model.
Training on augumented user 46602 1/50 current_auc = 0.8457574171859887
User 46602 AUC after training: 0.8457970600827744
User 46602 improves AUC. Keeping the model.
Training on augumented user 105810 2/50 current_auc = 0.8457970600827744
User 105810 AUC after training: 0.8457891315034172
User 105810 does not improve AUC. Reverting changes.
Training on augumented user 136564 3/50 current_auc = 0.8457970600827744
User 136564 AUC after training: 0.8447980590837734
User 136564 does not improve AUC. Reverting changes.
Training on augumented user 111411 4/50 current_auc = 0.8457970600827744
User 111411 AUC after training: 0.8453927025355598
User 111411 does not improve AUC. Reverting changes.
Training on augumented user 26214 5/50 current_auc = 0.8457970600827744
User 26214 AUC after training: 0.8454878454878455
User 26214 does not improve AUC. Reverting changes.
Training on augumented user 76067 6/50 current_auc = 0.8457970600827744
User 76067 AUC after training: 0.845828774400203
User 76067 improves AUC. Keeping the model.
Training on augumented user 96490 7/50 current_auc = 0.845828774400203
User 96490 AUC after training: 0.8453530596387739
User 96490 does not improve AUC. Reverting changes.
Training on augumented user 65444 8/50 current_auc = 0.845828774400203
User 65444 AUC after training: 0.8451865594722738
User 65444 does not improve AUC. Reverting changes.
Training on augumented user 130782 9/50 current_auc = 0.845828774400203
User 130782 AUC after training: 0.8458446315589173
User 130782 improves AUC. Keeping the model.
Training on augumented user 1116 10/50 current_auc = 0.8458446315589173
User 1116 AUC after training: 0.8456622742337028
User 1116 does not improve AUC. Reverting changes.
Training on augumented user 92329 11/50 current_auc = 0.8458446315589173
User 92329 AUC after training: 0.8456939885511314
User 92329 does not improve AUC. Reverting changes.
Training on augumented user 25830 12/50 current_auc = 0.8458446315589173
User 25830 AUC after training: 0.846090417518989
User 25830 improves AUC. Keeping the model.
Training on augumented user 25337 13/50 current_auc = 0.846090417518989
User 25337 AUC after training: 0.8459952745667032
User 25337 does not improve AUC. Reverting changes.
Training on augumented user 28426 14/50 current_auc = 0.846090417518989
User 28426 AUC after training: 0.8459635602492744
User 28426 does not improve AUC. Reverting changes.
Training on augumented user 115488 15/50 current_auc = 0.846090417518989
User 115488 AUC after training: 0.8459952745667031
User 115488 does not improve AUC. Reverting changes.
Training on augumented user 87845 16/50 current_auc = 0.846090417518989
User 87845 AUC after training: 0.8459635602492745
User 87845 does not improve AUC. Reverting changes.
Training on augumented user 31045 17/50 current_auc = 0.846090417518989
User 31045 AUC after training: 0.846304489161632
User 31045 improves AUC. Keeping the model.
Training on augumented user 102348 18/50 current_auc = 0.846304489161632
User 102348 AUC after training: 0.8462252033680605
User 102348 does not improve AUC. Reverting changes.
Training on augumented user 78834 19/50 current_auc = 0.846304489161632
User 78834 AUC after training: 0.8460032031460603
User 78834 does not improve AUC. Reverting changes.
Training on augumented user 16698 20/50 current_auc = 0.846304489161632
User 16698 AUC after training: 0.846098346098346
User 16698 does not improve AUC. Reverting changes.
Training on augumented user 109054 21/50 current_auc = 0.846304489161632
User 109054 AUC after training: 0.8459239173524887
User 109054 does not improve AUC. Reverting changes.
Training on augumented user 27795 22/50 current_auc = 0.846304489161632
User 27795 AUC after training: 0.846304489161632
User 27795 does not improve AUC. Reverting changes.
Training on augumented user 136733 23/50 current_auc = 0.846304489161632
User 136733 AUC after training: 0.846256917685489
User 136733 does not improve AUC. Reverting changes.
Training on augumented user 119536 24/50 current_auc = 0.846304489161632
User 119536 AUC after training: 0.8460190603047747
User 119536 does not improve AUC. Reverting changes.
Training on augumented user 44609 25/50 current_auc = 0.846304489161632
User 44609 AUC after training: 0.8460745603602747
User 44609 does not improve AUC. Reverting changes.
Training on augumented user 124445 26/50 current_auc = 0.846304489161632
User 124445 AUC after training: 0.8458049886621315
User 124445 does not improve AUC. Reverting changes.
Training on augumented user 92026 27/50 current_auc = 0.846304489161632
User 92026 AUC after training: 0.8456622742337029
User 92026 does not improve AUC. Reverting changes.
Training on augumented user 66993 28/50 current_auc = 0.846304489161632
User 66993 AUC after training: 0.8463362034790607
User 66993 improves AUC. Keeping the model.
Training on augumented user 67167 29/50 current_auc = 0.8463362034790607
User 67167 AUC after training: 0.846304489161632
User 67167 does not improve AUC. Reverting changes.
Training on augumented user 120159 30/50 current_auc = 0.8463362034790607
User 120159 AUC after training: 0.8460983460983461
User 120159 does not improve AUC. Reverting changes.
Training on augumented user 123881 31/50 current_auc = 0.8463362034790607
User 123881 AUC after training: 0.8462410605267747
User 123881 does not improve AUC. Reverting changes.
Training on augumented user 22023 32/50 current_auc = 0.8463362034790607
User 22023 AUC after training: 0.8459794174079889
User 22023 does not improve AUC. Reverting changes.
Training on augumented user 5740 33/50 current_auc = 0.8463362034790607
User 5740 AUC after training: 0.846193489050632
User 5740 does not improve AUC. Reverting changes.
Training on augumented user 135078 34/50 current_auc = 0.8463362034790607
User 135078 AUC after training: 0.8463996321139179
User 135078 improves AUC. Keeping the model.
Training on augumented user 69132 35/50 current_auc = 0.8463996321139179
User 69132 AUC after training: 0.8463362034790606
User 69132 does not improve AUC. Reverting changes.
Training on augumented user 42256 36/50 current_auc = 0.8463996321139179
User 42256 AUC after training: 0.8464154892726322
User 42256 improves AUC. Keeping the model.
Training on augumented user 138364 37/50 current_auc = 0.8464154892726322
User 138364 AUC after training: 0.8459714888286317
User 138364 does not improve AUC. Reverting changes.
Training on augumented user 75521 38/50 current_auc = 0.8464154892726322
User 75521 AUC after training: 0.8463362034790606
User 75521 does not improve AUC. Reverting changes.
Training on augumented user 44713 39/50 current_auc = 0.8464154892726322
User 44713 AUC after training: 0.8463679177964891
User 44713 does not improve AUC. Reverting changes.
Training on augumented user 109290 40/50 current_auc = 0.8464154892726322
User 109290 AUC after training: 0.8457098457098456
User 109290 does not improve AUC. Reverting changes.
Training on augumented user 75966 41/50 current_auc = 0.8464154892726322
User 75966 AUC after training: 0.8456860599717742
User 75966 does not improve AUC. Reverting changes.
Training on augumented user 19136 42/50 current_auc = 0.8464154892726322
User 19136 AUC after training: 0.8461300604157747
User 19136 does not improve AUC. Reverting changes.
Training on augumented user 62913 43/50 current_auc = 0.8464154892726322
User 62913 AUC after training: 0.8464472035900608
User 62913 improves AUC. Keeping the model.
Training on augumented user 14306 44/50 current_auc = 0.8464472035900608
User 14306 AUC after training: 0.8462331319474177
User 14306 does not improve AUC. Reverting changes.
Training on augumented user 76433 45/50 current_auc = 0.8464472035900608
User 76433 AUC after training: 0.8459318459318459
User 76433 does not improve AUC. Reverting changes.
Training on augumented user 104002 46/50 current_auc = 0.8464472035900608
User 104002 AUC after training: 0.8463996321139178
User 104002 does not improve AUC. Reverting changes.
Training on augumented user 96449 47/50 current_auc = 0.8464472035900608
User 96449 AUC after training: 0.8463996321139179
User 96449 does not improve AUC. Reverting changes.
Training on augumented user 101723 48/50 current_auc = 0.8464472035900608
User 101723 AUC after training: 0.8464472035900608
User 101723 does not improve AUC. Reverting changes.
Training on augumented user 22142 49/50 current_auc = 0.8464472035900608
User 22142 AUC after training: 0.8464154892726321
User 22142 does not improve AUC. Reverting changes.
[2024-12-02 17:44:42.628141] start test user 96700 13/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:44:43.039940] start test user 96700 13/567 recall augumented users by random, augumented_users = [10061, 35326, 33403, 64262, 60252, 56286, 44024, 18212, 38467, 73907, 11764, 24440, 125905, 63918, 126454, 2009, 6061, 107784, 4794, 104152, 17510, 31707, 34442, 54723, 15304, 65458, 119377, 56855, 129444, 59568, 111313, 110242, 11319, 108662, 120333, 65050, 104752, 136885, 119980, 24331, 83467, 44502, 58589, 12908, 8966, 4, 116560, 90895, 106238, 70493]
[2024-12-02 17:44:43.054615] user = 96700 Cloud 13/567
[2024-12-02 17:44:43.075316] user = 96700 Local 13/567
[2024-12-02 17:44:43.151742] user = 96700 Local+ 13/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:44:45.697976] user = 96700 MPDA- 13/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6904761904761905
Training on augumented user 10061 0/50 current_auc = 0.6904761904761905
User 10061 AUC after training: 0.6904761904761905
User 10061 does not improve AUC. Reverting changes.
Training on augumented user 35326 1/50 current_auc = 0.6904761904761905
User 35326 AUC after training: 0.6666666666666667
User 35326 does not improve AUC. Reverting changes.
Training on augumented user 33403 2/50 current_auc = 0.6904761904761905
User 33403 AUC after training: 0.6904761904761905
User 33403 does not improve AUC. Reverting changes.
Training on augumented user 64262 3/50 current_auc = 0.6904761904761905
User 64262 AUC after training: 0.6904761904761905
User 64262 does not improve AUC. Reverting changes.
Training on augumented user 60252 4/50 current_auc = 0.6904761904761905
User 60252 AUC after training: 0.6904761904761905
User 60252 does not improve AUC. Reverting changes.
Training on augumented user 56286 5/50 current_auc = 0.6904761904761905
User 56286 AUC after training: 0.6904761904761905
User 56286 does not improve AUC. Reverting changes.
Training on augumented user 44024 6/50 current_auc = 0.6904761904761905
User 44024 AUC after training: 0.6904761904761905
User 44024 does not improve AUC. Reverting changes.
Training on augumented user 18212 7/50 current_auc = 0.6904761904761905
User 18212 AUC after training: 0.6904761904761905
User 18212 does not improve AUC. Reverting changes.
Training on augumented user 38467 8/50 current_auc = 0.6904761904761905
User 38467 AUC after training: 0.6904761904761905
User 38467 does not improve AUC. Reverting changes.
Training on augumented user 73907 9/50 current_auc = 0.6904761904761905
User 73907 AUC after training: 0.6904761904761905
User 73907 does not improve AUC. Reverting changes.
Training on augumented user 11764 10/50 current_auc = 0.6904761904761905
User 11764 AUC after training: 0.6904761904761905
User 11764 does not improve AUC. Reverting changes.
Training on augumented user 24440 11/50 current_auc = 0.6904761904761905
User 24440 AUC after training: 0.6904761904761905
User 24440 does not improve AUC. Reverting changes.
Training on augumented user 125905 12/50 current_auc = 0.6904761904761905
User 125905 AUC after training: 0.6904761904761905
User 125905 does not improve AUC. Reverting changes.
Training on augumented user 63918 13/50 current_auc = 0.6904761904761905
User 63918 AUC after training: 0.6904761904761905
User 63918 does not improve AUC. Reverting changes.
Training on augumented user 126454 14/50 current_auc = 0.6904761904761905
User 126454 AUC after training: 0.6904761904761905
User 126454 does not improve AUC. Reverting changes.
Training on augumented user 2009 15/50 current_auc = 0.6904761904761905
User 2009 AUC after training: 0.6904761904761905
User 2009 does not improve AUC. Reverting changes.
Training on augumented user 6061 16/50 current_auc = 0.6904761904761905
User 6061 AUC after training: 0.6904761904761905
User 6061 does not improve AUC. Reverting changes.
Training on augumented user 107784 17/50 current_auc = 0.6904761904761905
User 107784 AUC after training: 0.6904761904761905
User 107784 does not improve AUC. Reverting changes.
Training on augumented user 4794 18/50 current_auc = 0.6904761904761905
User 4794 AUC after training: 0.6904761904761905
User 4794 does not improve AUC. Reverting changes.
Training on augumented user 104152 19/50 current_auc = 0.6904761904761905
User 104152 AUC after training: 0.6904761904761905
User 104152 does not improve AUC. Reverting changes.
Training on augumented user 17510 20/50 current_auc = 0.6904761904761905
User 17510 AUC after training: 0.6904761904761905
User 17510 does not improve AUC. Reverting changes.
Training on augumented user 31707 21/50 current_auc = 0.6904761904761905
User 31707 AUC after training: 0.6904761904761905
User 31707 does not improve AUC. Reverting changes.
Training on augumented user 34442 22/50 current_auc = 0.6904761904761905
User 34442 AUC after training: 0.6904761904761905
User 34442 does not improve AUC. Reverting changes.
Training on augumented user 54723 23/50 current_auc = 0.6904761904761905
User 54723 AUC after training: 0.6904761904761905
User 54723 does not improve AUC. Reverting changes.
Training on augumented user 15304 24/50 current_auc = 0.6904761904761905
User 15304 AUC after training: 0.6904761904761905
User 15304 does not improve AUC. Reverting changes.
Training on augumented user 65458 25/50 current_auc = 0.6904761904761905
User 65458 AUC after training: 0.6904761904761905
User 65458 does not improve AUC. Reverting changes.
Training on augumented user 119377 26/50 current_auc = 0.6904761904761905
User 119377 AUC after training: 0.6666666666666667
User 119377 does not improve AUC. Reverting changes.
Training on augumented user 56855 27/50 current_auc = 0.6904761904761905
User 56855 AUC after training: 0.6904761904761905
User 56855 does not improve AUC. Reverting changes.
Training on augumented user 129444 28/50 current_auc = 0.6904761904761905
User 129444 AUC after training: 0.6904761904761905
User 129444 does not improve AUC. Reverting changes.
Training on augumented user 59568 29/50 current_auc = 0.6904761904761905
User 59568 AUC after training: 0.6904761904761905
User 59568 does not improve AUC. Reverting changes.
Training on augumented user 111313 30/50 current_auc = 0.6904761904761905
User 111313 AUC after training: 0.6904761904761905
User 111313 does not improve AUC. Reverting changes.
Training on augumented user 110242 31/50 current_auc = 0.6904761904761905
User 110242 AUC after training: 0.6904761904761905
User 110242 does not improve AUC. Reverting changes.
Training on augumented user 11319 32/50 current_auc = 0.6904761904761905
User 11319 AUC after training: 0.6904761904761905
User 11319 does not improve AUC. Reverting changes.
Training on augumented user 108662 33/50 current_auc = 0.6904761904761905
User 108662 AUC after training: 0.6904761904761905
User 108662 does not improve AUC. Reverting changes.
Training on augumented user 120333 34/50 current_auc = 0.6904761904761905
User 120333 AUC after training: 0.6904761904761905
User 120333 does not improve AUC. Reverting changes.
Training on augumented user 65050 35/50 current_auc = 0.6904761904761905
User 65050 AUC after training: 0.6904761904761905
User 65050 does not improve AUC. Reverting changes.
Training on augumented user 104752 36/50 current_auc = 0.6904761904761905
User 104752 AUC after training: 0.6904761904761905
User 104752 does not improve AUC. Reverting changes.
Training on augumented user 136885 37/50 current_auc = 0.6904761904761905
User 136885 AUC after training: 0.6904761904761905
User 136885 does not improve AUC. Reverting changes.
Training on augumented user 119980 38/50 current_auc = 0.6904761904761905
User 119980 AUC after training: 0.6904761904761905
User 119980 does not improve AUC. Reverting changes.
Training on augumented user 24331 39/50 current_auc = 0.6904761904761905
User 24331 AUC after training: 0.6904761904761905
User 24331 does not improve AUC. Reverting changes.
Training on augumented user 83467 40/50 current_auc = 0.6904761904761905
User 83467 AUC after training: 0.6904761904761905
User 83467 does not improve AUC. Reverting changes.
Training on augumented user 44502 41/50 current_auc = 0.6904761904761905
User 44502 AUC after training: 0.6904761904761905
User 44502 does not improve AUC. Reverting changes.
Training on augumented user 58589 42/50 current_auc = 0.6904761904761905
User 58589 AUC after training: 0.6904761904761905
User 58589 does not improve AUC. Reverting changes.
Training on augumented user 12908 43/50 current_auc = 0.6904761904761905
User 12908 AUC after training: 0.6904761904761905
User 12908 does not improve AUC. Reverting changes.
Training on augumented user 8966 44/50 current_auc = 0.6904761904761905
User 8966 AUC after training: 0.6904761904761905
User 8966 does not improve AUC. Reverting changes.
Training on augumented user 4 45/50 current_auc = 0.6904761904761905
User 4 AUC after training: 0.6904761904761905
User 4 does not improve AUC. Reverting changes.
Training on augumented user 116560 46/50 current_auc = 0.6904761904761905
User 116560 AUC after training: 0.6904761904761905
User 116560 does not improve AUC. Reverting changes.
Training on augumented user 90895 47/50 current_auc = 0.6904761904761905
User 90895 AUC after training: 0.6904761904761905
User 90895 does not improve AUC. Reverting changes.
Training on augumented user 106238 48/50 current_auc = 0.6904761904761905
User 106238 AUC after training: 0.6904761904761905
User 106238 does not improve AUC. Reverting changes.
Training on augumented user 70493 49/50 current_auc = 0.6904761904761905
User 70493 AUC after training: 0.6904761904761905
User 70493 does not improve AUC. Reverting changes.
[2024-12-02 17:45:16.747739] start test user 96744 14/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:45:17.186144] start test user 96744 14/567 recall augumented users by random, augumented_users = [8885, 85669, 14141, 45681, 77491, 97788, 25577, 16606, 100597, 112184, 13526, 124861, 131261, 128058, 109255, 95221, 136953, 104279, 87402, 136359, 31857, 107069, 46275, 106669, 14571, 47866, 31360, 4371, 68672, 3728, 129100, 78825, 128042, 5883, 18207, 5201, 28224, 88679, 44908, 138073, 112682, 112164, 23623, 124329, 43582, 30283, 63583, 76475, 121702, 105366]
[2024-12-02 17:45:17.200556] user = 96744 Cloud 14/567
[2024-12-02 17:45:17.210580] user = 96744 Local 14/567
[2024-12-02 17:45:17.267974] user = 96744 Local+ 14/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:45:20.279220] user = 96744 MPDA- 14/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 8885 0/50 current_auc = 0.5
User 8885 AUC after training: 0.5
User 8885 does not improve AUC. Reverting changes.
Training on augumented user 85669 1/50 current_auc = 0.5
User 85669 AUC after training: 0.5
User 85669 does not improve AUC. Reverting changes.
Training on augumented user 14141 2/50 current_auc = 0.5
User 14141 AUC after training: 0.5
User 14141 does not improve AUC. Reverting changes.
Training on augumented user 45681 3/50 current_auc = 0.5
User 45681 AUC after training: 0.5
User 45681 does not improve AUC. Reverting changes.
Training on augumented user 77491 4/50 current_auc = 0.5
User 77491 AUC after training: 0.5
User 77491 does not improve AUC. Reverting changes.
Training on augumented user 97788 5/50 current_auc = 0.5
User 97788 AUC after training: 0.5
User 97788 does not improve AUC. Reverting changes.
Training on augumented user 25577 6/50 current_auc = 0.5
User 25577 AUC after training: 0.5
User 25577 does not improve AUC. Reverting changes.
Training on augumented user 16606 7/50 current_auc = 0.5
User 16606 AUC after training: 0.5
User 16606 does not improve AUC. Reverting changes.
Training on augumented user 100597 8/50 current_auc = 0.5
User 100597 AUC after training: 0.5
User 100597 does not improve AUC. Reverting changes.
Training on augumented user 112184 9/50 current_auc = 0.5
User 112184 AUC after training: 0.5
User 112184 does not improve AUC. Reverting changes.
Training on augumented user 13526 10/50 current_auc = 0.5
User 13526 AUC after training: 0.5
User 13526 does not improve AUC. Reverting changes.
Training on augumented user 124861 11/50 current_auc = 0.5
User 124861 AUC after training: 0.5
User 124861 does not improve AUC. Reverting changes.
Training on augumented user 131261 12/50 current_auc = 0.5
User 131261 AUC after training: 0.5
User 131261 does not improve AUC. Reverting changes.
Training on augumented user 128058 13/50 current_auc = 0.5
User 128058 AUC after training: 0.5
User 128058 does not improve AUC. Reverting changes.
Training on augumented user 109255 14/50 current_auc = 0.5
User 109255 AUC after training: 0.5
User 109255 does not improve AUC. Reverting changes.
Training on augumented user 95221 15/50 current_auc = 0.5
User 95221 AUC after training: 0.5
User 95221 does not improve AUC. Reverting changes.
Training on augumented user 136953 16/50 current_auc = 0.5
User 136953 AUC after training: 0.5
User 136953 does not improve AUC. Reverting changes.
Training on augumented user 104279 17/50 current_auc = 0.5
User 104279 AUC after training: 0.5
User 104279 does not improve AUC. Reverting changes.
Training on augumented user 87402 18/50 current_auc = 0.5
User 87402 AUC after training: 0.5
User 87402 does not improve AUC. Reverting changes.
Training on augumented user 136359 19/50 current_auc = 0.5
User 136359 AUC after training: 0.5
User 136359 does not improve AUC. Reverting changes.
Training on augumented user 31857 20/50 current_auc = 0.5
User 31857 AUC after training: 0.5
User 31857 does not improve AUC. Reverting changes.
Training on augumented user 107069 21/50 current_auc = 0.5
User 107069 AUC after training: 0.5
User 107069 does not improve AUC. Reverting changes.
Training on augumented user 46275 22/50 current_auc = 0.5
User 46275 AUC after training: 0.5
User 46275 does not improve AUC. Reverting changes.
Training on augumented user 106669 23/50 current_auc = 0.5
User 106669 AUC after training: 0.5
User 106669 does not improve AUC. Reverting changes.
Training on augumented user 14571 24/50 current_auc = 0.5
User 14571 AUC after training: 0.5
User 14571 does not improve AUC. Reverting changes.
Training on augumented user 47866 25/50 current_auc = 0.5
User 47866 AUC after training: 0.5
User 47866 does not improve AUC. Reverting changes.
Training on augumented user 31360 26/50 current_auc = 0.5
User 31360 AUC after training: 0.5
User 31360 does not improve AUC. Reverting changes.
Training on augumented user 4371 27/50 current_auc = 0.5
User 4371 AUC after training: 0.5
User 4371 does not improve AUC. Reverting changes.
Training on augumented user 68672 28/50 current_auc = 0.5
User 68672 AUC after training: 0.5
User 68672 does not improve AUC. Reverting changes.
Training on augumented user 3728 29/50 current_auc = 0.5
User 3728 AUC after training: 0.5
User 3728 does not improve AUC. Reverting changes.
Training on augumented user 129100 30/50 current_auc = 0.5
User 129100 AUC after training: 0.5
User 129100 does not improve AUC. Reverting changes.
Training on augumented user 78825 31/50 current_auc = 0.5
User 78825 AUC after training: 0.5
User 78825 does not improve AUC. Reverting changes.
Training on augumented user 128042 32/50 current_auc = 0.5
User 128042 AUC after training: 0.5
User 128042 does not improve AUC. Reverting changes.
Training on augumented user 5883 33/50 current_auc = 0.5
User 5883 AUC after training: 0.5
User 5883 does not improve AUC. Reverting changes.
Training on augumented user 18207 34/50 current_auc = 0.5
User 18207 AUC after training: 0.5
User 18207 does not improve AUC. Reverting changes.
Training on augumented user 5201 35/50 current_auc = 0.5
User 5201 AUC after training: 0.5
User 5201 does not improve AUC. Reverting changes.
Training on augumented user 28224 36/50 current_auc = 0.5
User 28224 AUC after training: 0.5
User 28224 does not improve AUC. Reverting changes.
Training on augumented user 88679 37/50 current_auc = 0.5
User 88679 AUC after training: 0.5
User 88679 does not improve AUC. Reverting changes.
Training on augumented user 44908 38/50 current_auc = 0.5
User 44908 AUC after training: 0.5
User 44908 does not improve AUC. Reverting changes.
Training on augumented user 138073 39/50 current_auc = 0.5
User 138073 AUC after training: 0.5
User 138073 does not improve AUC. Reverting changes.
Training on augumented user 112682 40/50 current_auc = 0.5
User 112682 AUC after training: 0.5
User 112682 does not improve AUC. Reverting changes.
Training on augumented user 112164 41/50 current_auc = 0.5
User 112164 AUC after training: 0.5
User 112164 does not improve AUC. Reverting changes.
Training on augumented user 23623 42/50 current_auc = 0.5
User 23623 AUC after training: 0.5
User 23623 does not improve AUC. Reverting changes.
Training on augumented user 124329 43/50 current_auc = 0.5
User 124329 AUC after training: 0.5
User 124329 does not improve AUC. Reverting changes.
Training on augumented user 43582 44/50 current_auc = 0.5
User 43582 AUC after training: 0.5
User 43582 does not improve AUC. Reverting changes.
Training on augumented user 30283 45/50 current_auc = 0.5
User 30283 AUC after training: 0.5
User 30283 does not improve AUC. Reverting changes.
Training on augumented user 63583 46/50 current_auc = 0.5
User 63583 AUC after training: 0.5
User 63583 does not improve AUC. Reverting changes.
Training on augumented user 76475 47/50 current_auc = 0.5
User 76475 AUC after training: 0.5
User 76475 does not improve AUC. Reverting changes.
Training on augumented user 121702 48/50 current_auc = 0.5
User 121702 AUC after training: 0.5
User 121702 does not improve AUC. Reverting changes.
Training on augumented user 105366 49/50 current_auc = 0.5
User 105366 AUC after training: 0.5
User 105366 does not improve AUC. Reverting changes.
[2024-12-02 17:45:50.591465] start test user 96746 15/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:45:51.077582] start test user 96746 15/567 recall augumented users by random, augumented_users = [83509, 9909, 95326, 1229, 5725, 76992, 118376, 15041, 22189, 35451, 63394, 39205, 72790, 36745, 17480, 6650, 63283, 98842, 86330, 59378, 56873, 92236, 129818, 36931, 18937, 111857, 15222, 38510, 88443, 25330, 22174, 55604, 36158, 126718, 42709, 61227, 12574, 110645, 52541, 68063, 116725, 80770, 18089, 22486, 128380, 85662, 32031, 76663, 76559, 71256]
[2024-12-02 17:45:51.092774] user = 96746 Cloud 15/567
[2024-12-02 17:45:51.102697] user = 96746 Local 15/567
[2024-12-02 17:45:51.142916] user = 96746 Local+ 15/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:45:54.702265] user = 96746 MPDA- 15/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 83509 0/50 current_auc = 0.5
User 83509 AUC after training: 0.4642857142857143
User 83509 does not improve AUC. Reverting changes.
Training on augumented user 9909 1/50 current_auc = 0.5
User 9909 AUC after training: 0.5
User 9909 does not improve AUC. Reverting changes.
Training on augumented user 95326 2/50 current_auc = 0.5
User 95326 AUC after training: 0.4642857142857143
User 95326 does not improve AUC. Reverting changes.
Training on augumented user 1229 3/50 current_auc = 0.5
User 1229 AUC after training: 0.5
User 1229 does not improve AUC. Reverting changes.
Training on augumented user 5725 4/50 current_auc = 0.5
User 5725 AUC after training: 0.5
User 5725 does not improve AUC. Reverting changes.
Training on augumented user 76992 5/50 current_auc = 0.5
User 76992 AUC after training: 0.5
User 76992 does not improve AUC. Reverting changes.
Training on augumented user 118376 6/50 current_auc = 0.5
User 118376 AUC after training: 0.5
User 118376 does not improve AUC. Reverting changes.
Training on augumented user 15041 7/50 current_auc = 0.5
User 15041 AUC after training: 0.5
User 15041 does not improve AUC. Reverting changes.
Training on augumented user 22189 8/50 current_auc = 0.5
User 22189 AUC after training: 0.5
User 22189 does not improve AUC. Reverting changes.
Training on augumented user 35451 9/50 current_auc = 0.5
User 35451 AUC after training: 0.5
User 35451 does not improve AUC. Reverting changes.
Training on augumented user 63394 10/50 current_auc = 0.5
User 63394 AUC after training: 0.5
User 63394 does not improve AUC. Reverting changes.
Training on augumented user 39205 11/50 current_auc = 0.5
User 39205 AUC after training: 0.5
User 39205 does not improve AUC. Reverting changes.
Training on augumented user 72790 12/50 current_auc = 0.5
User 72790 AUC after training: 0.5
User 72790 does not improve AUC. Reverting changes.
Training on augumented user 36745 13/50 current_auc = 0.5
User 36745 AUC after training: 0.5
User 36745 does not improve AUC. Reverting changes.
Training on augumented user 17480 14/50 current_auc = 0.5
User 17480 AUC after training: 0.4642857142857143
User 17480 does not improve AUC. Reverting changes.
Training on augumented user 6650 15/50 current_auc = 0.5
User 6650 AUC after training: 0.5
User 6650 does not improve AUC. Reverting changes.
Training on augumented user 63283 16/50 current_auc = 0.5
User 63283 AUC after training: 0.5
User 63283 does not improve AUC. Reverting changes.
Training on augumented user 98842 17/50 current_auc = 0.5
User 98842 AUC after training: 0.5
User 98842 does not improve AUC. Reverting changes.
Training on augumented user 86330 18/50 current_auc = 0.5
User 86330 AUC after training: 0.4642857142857143
User 86330 does not improve AUC. Reverting changes.
Training on augumented user 59378 19/50 current_auc = 0.5
User 59378 AUC after training: 0.5
User 59378 does not improve AUC. Reverting changes.
Training on augumented user 56873 20/50 current_auc = 0.5
User 56873 AUC after training: 0.5
User 56873 does not improve AUC. Reverting changes.
Training on augumented user 92236 21/50 current_auc = 0.5
User 92236 AUC after training: 0.5
User 92236 does not improve AUC. Reverting changes.
Training on augumented user 129818 22/50 current_auc = 0.5
User 129818 AUC after training: 0.5
User 129818 does not improve AUC. Reverting changes.
Training on augumented user 36931 23/50 current_auc = 0.5
User 36931 AUC after training: 0.5
User 36931 does not improve AUC. Reverting changes.
Training on augumented user 18937 24/50 current_auc = 0.5
User 18937 AUC after training: 0.5
User 18937 does not improve AUC. Reverting changes.
Training on augumented user 111857 25/50 current_auc = 0.5
User 111857 AUC after training: 0.5
User 111857 does not improve AUC. Reverting changes.
Training on augumented user 15222 26/50 current_auc = 0.5
User 15222 AUC after training: 0.5
User 15222 does not improve AUC. Reverting changes.
Training on augumented user 38510 27/50 current_auc = 0.5
User 38510 AUC after training: 0.5
User 38510 does not improve AUC. Reverting changes.
Training on augumented user 88443 28/50 current_auc = 0.5
User 88443 AUC after training: 0.5
User 88443 does not improve AUC. Reverting changes.
Training on augumented user 25330 29/50 current_auc = 0.5
User 25330 AUC after training: 0.5
User 25330 does not improve AUC. Reverting changes.
Training on augumented user 22174 30/50 current_auc = 0.5
User 22174 AUC after training: 0.5
User 22174 does not improve AUC. Reverting changes.
Training on augumented user 55604 31/50 current_auc = 0.5
User 55604 AUC after training: 0.5
User 55604 does not improve AUC. Reverting changes.
Training on augumented user 36158 32/50 current_auc = 0.5
User 36158 AUC after training: 0.5
User 36158 does not improve AUC. Reverting changes.
Training on augumented user 126718 33/50 current_auc = 0.5
User 126718 AUC after training: 0.5
User 126718 does not improve AUC. Reverting changes.
Training on augumented user 42709 34/50 current_auc = 0.5
User 42709 AUC after training: 0.5
User 42709 does not improve AUC. Reverting changes.
Training on augumented user 61227 35/50 current_auc = 0.5
User 61227 AUC after training: 0.5
User 61227 does not improve AUC. Reverting changes.
Training on augumented user 12574 36/50 current_auc = 0.5
User 12574 AUC after training: 0.5
User 12574 does not improve AUC. Reverting changes.
Training on augumented user 110645 37/50 current_auc = 0.5
User 110645 AUC after training: 0.5
User 110645 does not improve AUC. Reverting changes.
Training on augumented user 52541 38/50 current_auc = 0.5
User 52541 AUC after training: 0.4642857142857143
User 52541 does not improve AUC. Reverting changes.
Training on augumented user 68063 39/50 current_auc = 0.5
User 68063 AUC after training: 0.5
User 68063 does not improve AUC. Reverting changes.
Training on augumented user 116725 40/50 current_auc = 0.5
User 116725 AUC after training: 0.5
User 116725 does not improve AUC. Reverting changes.
Training on augumented user 80770 41/50 current_auc = 0.5
User 80770 AUC after training: 0.5
User 80770 does not improve AUC. Reverting changes.
Training on augumented user 18089 42/50 current_auc = 0.5
User 18089 AUC after training: 0.5
User 18089 does not improve AUC. Reverting changes.
Training on augumented user 22486 43/50 current_auc = 0.5
User 22486 AUC after training: 0.5
User 22486 does not improve AUC. Reverting changes.
Training on augumented user 128380 44/50 current_auc = 0.5
User 128380 AUC after training: 0.5
User 128380 does not improve AUC. Reverting changes.
Training on augumented user 85662 45/50 current_auc = 0.5
User 85662 AUC after training: 0.5
User 85662 does not improve AUC. Reverting changes.
Training on augumented user 32031 46/50 current_auc = 0.5
User 32031 AUC after training: 0.5
User 32031 does not improve AUC. Reverting changes.
Training on augumented user 76663 47/50 current_auc = 0.5
User 76663 AUC after training: 0.4642857142857143
User 76663 does not improve AUC. Reverting changes.
Training on augumented user 76559 48/50 current_auc = 0.5
User 76559 AUC after training: 0.5
User 76559 does not improve AUC. Reverting changes.
Training on augumented user 71256 49/50 current_auc = 0.5
User 71256 AUC after training: 0.5
User 71256 does not improve AUC. Reverting changes.
[2024-12-02 17:46:22.464315] start test user 96748 16/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:46:23.319397] start test user 96748 16/567 recall augumented users by random, augumented_users = [54351, 47066, 53628, 10868, 71615, 7795, 30881, 393, 31159, 4048, 129240, 19100, 23230, 50291, 29655, 53268, 101292, 118330, 25881, 65649, 120084, 120764, 107249, 76436, 103366, 38450, 136761, 131886, 118413, 110954, 126019, 86868, 48080, 96569, 99213, 127169, 74598, 30279, 44557, 34354, 94380, 80559, 109019, 134988, 101274, 42043, 107576, 77556, 94919, 108846]
[2024-12-02 17:46:23.373504] user = 96748 Cloud 16/567
[2024-12-02 17:46:23.407430] user = 96748 Local 16/567
[2024-12-02 17:46:23.432153] user = 96748 Local+ 16/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:46:26.228992] user = 96748 MPDA- 16/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6483516483516484
Training on augumented user 54351 0/50 current_auc = 0.6483516483516484
User 54351 AUC after training: 0.653846153846154
User 54351 improves AUC. Keeping the model.
Training on augumented user 47066 1/50 current_auc = 0.653846153846154
User 47066 AUC after training: 0.6483516483516484
User 47066 does not improve AUC. Reverting changes.
Training on augumented user 53628 2/50 current_auc = 0.653846153846154
User 53628 AUC after training: 0.6593406593406594
User 53628 improves AUC. Keeping the model.
Training on augumented user 10868 3/50 current_auc = 0.6593406593406594
User 10868 AUC after training: 0.6593406593406594
User 10868 does not improve AUC. Reverting changes.
Training on augumented user 71615 4/50 current_auc = 0.6593406593406594
User 71615 AUC after training: 0.6593406593406594
User 71615 does not improve AUC. Reverting changes.
Training on augumented user 7795 5/50 current_auc = 0.6593406593406594
User 7795 AUC after training: 0.6593406593406594
User 7795 does not improve AUC. Reverting changes.
Training on augumented user 30881 6/50 current_auc = 0.6593406593406594
User 30881 AUC after training: 0.6483516483516484
User 30881 does not improve AUC. Reverting changes.
Training on augumented user 393 7/50 current_auc = 0.6593406593406594
User 393 AUC after training: 0.6593406593406594
User 393 does not improve AUC. Reverting changes.
Training on augumented user 31159 8/50 current_auc = 0.6593406593406594
User 31159 AUC after training: 0.6593406593406594
User 31159 does not improve AUC. Reverting changes.
Training on augumented user 4048 9/50 current_auc = 0.6593406593406594
User 4048 AUC after training: 0.6593406593406594
User 4048 does not improve AUC. Reverting changes.
Training on augumented user 129240 10/50 current_auc = 0.6593406593406594
User 129240 AUC after training: 0.6593406593406594
User 129240 does not improve AUC. Reverting changes.
Training on augumented user 19100 11/50 current_auc = 0.6593406593406594
User 19100 AUC after training: 0.6593406593406594
User 19100 does not improve AUC. Reverting changes.
Training on augumented user 23230 12/50 current_auc = 0.6593406593406594
User 23230 AUC after training: 0.6593406593406594
User 23230 does not improve AUC. Reverting changes.
Training on augumented user 50291 13/50 current_auc = 0.6593406593406594
User 50291 AUC after training: 0.6593406593406594
User 50291 does not improve AUC. Reverting changes.
Training on augumented user 29655 14/50 current_auc = 0.6593406593406594
User 29655 AUC after training: 0.6593406593406594
User 29655 does not improve AUC. Reverting changes.
Training on augumented user 53268 15/50 current_auc = 0.6593406593406594
User 53268 AUC after training: 0.6593406593406594
User 53268 does not improve AUC. Reverting changes.
Training on augumented user 101292 16/50 current_auc = 0.6593406593406594
User 101292 AUC after training: 0.6483516483516484
User 101292 does not improve AUC. Reverting changes.
Training on augumented user 118330 17/50 current_auc = 0.6593406593406594
User 118330 AUC after training: 0.6593406593406594
User 118330 does not improve AUC. Reverting changes.
Training on augumented user 25881 18/50 current_auc = 0.6593406593406594
User 25881 AUC after training: 0.6593406593406594
User 25881 does not improve AUC. Reverting changes.
Training on augumented user 65649 19/50 current_auc = 0.6593406593406594
User 65649 AUC after training: 0.6593406593406594
User 65649 does not improve AUC. Reverting changes.
Training on augumented user 120084 20/50 current_auc = 0.6593406593406594
User 120084 AUC after training: 0.6593406593406594
User 120084 does not improve AUC. Reverting changes.
Training on augumented user 120764 21/50 current_auc = 0.6593406593406594
User 120764 AUC after training: 0.6593406593406594
User 120764 does not improve AUC. Reverting changes.
Training on augumented user 107249 22/50 current_auc = 0.6593406593406594
User 107249 AUC after training: 0.6593406593406594
User 107249 does not improve AUC. Reverting changes.
Training on augumented user 76436 23/50 current_auc = 0.6593406593406594
User 76436 AUC after training: 0.6593406593406594
User 76436 does not improve AUC. Reverting changes.
Training on augumented user 103366 24/50 current_auc = 0.6593406593406594
User 103366 AUC after training: 0.6593406593406594
User 103366 does not improve AUC. Reverting changes.
Training on augumented user 38450 25/50 current_auc = 0.6593406593406594
User 38450 AUC after training: 0.6593406593406594
User 38450 does not improve AUC. Reverting changes.
Training on augumented user 136761 26/50 current_auc = 0.6593406593406594
User 136761 AUC after training: 0.6593406593406594
User 136761 does not improve AUC. Reverting changes.
Training on augumented user 131886 27/50 current_auc = 0.6593406593406594
User 131886 AUC after training: 0.6593406593406594
User 131886 does not improve AUC. Reverting changes.
Training on augumented user 118413 28/50 current_auc = 0.6593406593406594
User 118413 AUC after training: 0.6593406593406594
User 118413 does not improve AUC. Reverting changes.
Training on augumented user 110954 29/50 current_auc = 0.6593406593406594
User 110954 AUC after training: 0.6593406593406594
User 110954 does not improve AUC. Reverting changes.
Training on augumented user 126019 30/50 current_auc = 0.6593406593406594
User 126019 AUC after training: 0.6593406593406594
User 126019 does not improve AUC. Reverting changes.
Training on augumented user 86868 31/50 current_auc = 0.6593406593406594
User 86868 AUC after training: 0.6593406593406594
User 86868 does not improve AUC. Reverting changes.
Training on augumented user 48080 32/50 current_auc = 0.6593406593406594
User 48080 AUC after training: 0.6593406593406594
User 48080 does not improve AUC. Reverting changes.
Training on augumented user 96569 33/50 current_auc = 0.6593406593406594
User 96569 AUC after training: 0.6593406593406594
User 96569 does not improve AUC. Reverting changes.
Training on augumented user 99213 34/50 current_auc = 0.6593406593406594
User 99213 AUC after training: 0.6593406593406594
User 99213 does not improve AUC. Reverting changes.
Training on augumented user 127169 35/50 current_auc = 0.6593406593406594
User 127169 AUC after training: 0.6593406593406594
User 127169 does not improve AUC. Reverting changes.
Training on augumented user 74598 36/50 current_auc = 0.6593406593406594
User 74598 AUC after training: 0.6593406593406594
User 74598 does not improve AUC. Reverting changes.
Training on augumented user 30279 37/50 current_auc = 0.6593406593406594
User 30279 AUC after training: 0.6593406593406594
User 30279 does not improve AUC. Reverting changes.
Training on augumented user 44557 38/50 current_auc = 0.6593406593406594
User 44557 AUC after training: 0.6593406593406594
User 44557 does not improve AUC. Reverting changes.
Training on augumented user 34354 39/50 current_auc = 0.6593406593406594
User 34354 AUC after training: 0.6593406593406594
User 34354 does not improve AUC. Reverting changes.
Training on augumented user 94380 40/50 current_auc = 0.6593406593406594
User 94380 AUC after training: 0.6593406593406594
User 94380 does not improve AUC. Reverting changes.
Training on augumented user 80559 41/50 current_auc = 0.6593406593406594
User 80559 AUC after training: 0.6483516483516484
User 80559 does not improve AUC. Reverting changes.
Training on augumented user 109019 42/50 current_auc = 0.6593406593406594
User 109019 AUC after training: 0.6593406593406594
User 109019 does not improve AUC. Reverting changes.
Training on augumented user 134988 43/50 current_auc = 0.6593406593406594
User 134988 AUC after training: 0.6483516483516484
User 134988 does not improve AUC. Reverting changes.
Training on augumented user 101274 44/50 current_auc = 0.6593406593406594
User 101274 AUC after training: 0.6483516483516484
User 101274 does not improve AUC. Reverting changes.
Training on augumented user 42043 45/50 current_auc = 0.6593406593406594
User 42043 AUC after training: 0.6593406593406594
User 42043 does not improve AUC. Reverting changes.
Training on augumented user 107576 46/50 current_auc = 0.6593406593406594
User 107576 AUC after training: 0.6593406593406594
User 107576 does not improve AUC. Reverting changes.
Training on augumented user 77556 47/50 current_auc = 0.6593406593406594
User 77556 AUC after training: 0.6593406593406594
User 77556 does not improve AUC. Reverting changes.
Training on augumented user 94919 48/50 current_auc = 0.6593406593406594
User 94919 AUC after training: 0.6593406593406594
User 94919 does not improve AUC. Reverting changes.
Training on augumented user 108846 49/50 current_auc = 0.6593406593406594
User 108846 AUC after training: 0.6593406593406594
User 108846 does not improve AUC. Reverting changes.
[2024-12-02 17:46:53.718372] start test user 96768 17/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:46:54.149172] start test user 96768 17/567 recall augumented users by random, augumented_users = [74372, 91896, 59860, 5047, 17862, 5081, 46196, 62180, 122231, 13589, 116805, 40955, 51431, 21919, 116220, 134414, 75971, 124999, 109510, 17240, 77821, 79659, 17416, 136451, 135710, 16279, 70341, 19064, 41328, 53625, 62288, 44037, 48455, 68391, 222, 84517, 134200, 129997, 79671, 50655, 73672, 63136, 39539, 45824, 132719, 48367, 101501, 96497, 56313, 15481]
[2024-12-02 17:46:54.164524] user = 96768 Cloud 17/567
[2024-12-02 17:46:54.174817] user = 96768 Local 17/567
[2024-12-02 17:46:54.200290] user = 96768 Local+ 17/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:46:55.718347] user = 96768 MPDA- 17/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5185185185185186
Training on augumented user 74372 0/50 current_auc = 0.5185185185185186
User 74372 AUC after training: 0.5185185185185186
User 74372 does not improve AUC. Reverting changes.
Training on augumented user 91896 1/50 current_auc = 0.5185185185185186
User 91896 AUC after training: 0.5185185185185186
User 91896 does not improve AUC. Reverting changes.
Training on augumented user 59860 2/50 current_auc = 0.5185185185185186
User 59860 AUC after training: 0.5185185185185186
User 59860 does not improve AUC. Reverting changes.
Training on augumented user 5047 3/50 current_auc = 0.5185185185185186
User 5047 AUC after training: 0.5185185185185186
User 5047 does not improve AUC. Reverting changes.
Training on augumented user 17862 4/50 current_auc = 0.5185185185185186
User 17862 AUC after training: 0.4814814814814815
User 17862 does not improve AUC. Reverting changes.
Training on augumented user 5081 5/50 current_auc = 0.5185185185185186
User 5081 AUC after training: 0.5185185185185186
User 5081 does not improve AUC. Reverting changes.
Training on augumented user 46196 6/50 current_auc = 0.5185185185185186
User 46196 AUC after training: 0.5185185185185186
User 46196 does not improve AUC. Reverting changes.
Training on augumented user 62180 7/50 current_auc = 0.5185185185185186
User 62180 AUC after training: 0.5555555555555556
User 62180 improves AUC. Keeping the model.
Training on augumented user 122231 8/50 current_auc = 0.5555555555555556
User 122231 AUC after training: 0.5555555555555556
User 122231 does not improve AUC. Reverting changes.
Training on augumented user 13589 9/50 current_auc = 0.5555555555555556
User 13589 AUC after training: 0.5185185185185186
User 13589 does not improve AUC. Reverting changes.
Training on augumented user 116805 10/50 current_auc = 0.5555555555555556
User 116805 AUC after training: 0.5555555555555556
User 116805 does not improve AUC. Reverting changes.
Training on augumented user 40955 11/50 current_auc = 0.5555555555555556
User 40955 AUC after training: 0.5185185185185186
User 40955 does not improve AUC. Reverting changes.
Training on augumented user 51431 12/50 current_auc = 0.5555555555555556
User 51431 AUC after training: 0.5185185185185186
User 51431 does not improve AUC. Reverting changes.
Training on augumented user 21919 13/50 current_auc = 0.5555555555555556
User 21919 AUC after training: 0.5555555555555556
User 21919 does not improve AUC. Reverting changes.
Training on augumented user 116220 14/50 current_auc = 0.5555555555555556
User 116220 AUC after training: 0.4814814814814815
User 116220 does not improve AUC. Reverting changes.
Training on augumented user 134414 15/50 current_auc = 0.5555555555555556
User 134414 AUC after training: 0.5185185185185186
User 134414 does not improve AUC. Reverting changes.
Training on augumented user 75971 16/50 current_auc = 0.5555555555555556
User 75971 AUC after training: 0.5185185185185186
User 75971 does not improve AUC. Reverting changes.
Training on augumented user 124999 17/50 current_auc = 0.5555555555555556
User 124999 AUC after training: 0.5555555555555556
User 124999 does not improve AUC. Reverting changes.
Training on augumented user 109510 18/50 current_auc = 0.5555555555555556
User 109510 AUC after training: 0.5185185185185186
User 109510 does not improve AUC. Reverting changes.
Training on augumented user 17240 19/50 current_auc = 0.5555555555555556
User 17240 AUC after training: 0.5555555555555556
User 17240 does not improve AUC. Reverting changes.
Training on augumented user 77821 20/50 current_auc = 0.5555555555555556
User 77821 AUC after training: 0.5555555555555556
User 77821 does not improve AUC. Reverting changes.
Training on augumented user 79659 21/50 current_auc = 0.5555555555555556
User 79659 AUC after training: 0.5555555555555556
User 79659 does not improve AUC. Reverting changes.
Training on augumented user 17416 22/50 current_auc = 0.5555555555555556
User 17416 AUC after training: 0.5185185185185186
User 17416 does not improve AUC. Reverting changes.
Training on augumented user 136451 23/50 current_auc = 0.5555555555555556
User 136451 AUC after training: 0.5555555555555556
User 136451 does not improve AUC. Reverting changes.
Training on augumented user 135710 24/50 current_auc = 0.5555555555555556
User 135710 AUC after training: 0.5555555555555556
User 135710 does not improve AUC. Reverting changes.
Training on augumented user 16279 25/50 current_auc = 0.5555555555555556
User 16279 AUC after training: 0.5555555555555556
User 16279 does not improve AUC. Reverting changes.
Training on augumented user 70341 26/50 current_auc = 0.5555555555555556
User 70341 AUC after training: 0.5185185185185186
User 70341 does not improve AUC. Reverting changes.
Training on augumented user 19064 27/50 current_auc = 0.5555555555555556
User 19064 AUC after training: 0.5555555555555556
User 19064 does not improve AUC. Reverting changes.
Training on augumented user 41328 28/50 current_auc = 0.5555555555555556
User 41328 AUC after training: 0.5555555555555556
User 41328 does not improve AUC. Reverting changes.
Training on augumented user 53625 29/50 current_auc = 0.5555555555555556
User 53625 AUC after training: 0.5555555555555556
User 53625 does not improve AUC. Reverting changes.
Training on augumented user 62288 30/50 current_auc = 0.5555555555555556
User 62288 AUC after training: 0.5555555555555556
User 62288 does not improve AUC. Reverting changes.
Training on augumented user 44037 31/50 current_auc = 0.5555555555555556
User 44037 AUC after training: 0.5555555555555556
User 44037 does not improve AUC. Reverting changes.
Training on augumented user 48455 32/50 current_auc = 0.5555555555555556
User 48455 AUC after training: 0.5555555555555556
User 48455 does not improve AUC. Reverting changes.
Training on augumented user 68391 33/50 current_auc = 0.5555555555555556
User 68391 AUC after training: 0.5185185185185186
User 68391 does not improve AUC. Reverting changes.
Training on augumented user 222 34/50 current_auc = 0.5555555555555556
User 222 AUC after training: 0.5555555555555556
User 222 does not improve AUC. Reverting changes.
Training on augumented user 84517 35/50 current_auc = 0.5555555555555556
User 84517 AUC after training: 0.5185185185185186
User 84517 does not improve AUC. Reverting changes.
Training on augumented user 134200 36/50 current_auc = 0.5555555555555556
User 134200 AUC after training: 0.5185185185185186
User 134200 does not improve AUC. Reverting changes.
Training on augumented user 129997 37/50 current_auc = 0.5555555555555556
User 129997 AUC after training: 0.5555555555555556
User 129997 does not improve AUC. Reverting changes.
Training on augumented user 79671 38/50 current_auc = 0.5555555555555556
User 79671 AUC after training: 0.5555555555555556
User 79671 does not improve AUC. Reverting changes.
Training on augumented user 50655 39/50 current_auc = 0.5555555555555556
User 50655 AUC after training: 0.5555555555555556
User 50655 does not improve AUC. Reverting changes.
Training on augumented user 73672 40/50 current_auc = 0.5555555555555556
User 73672 AUC after training: 0.4814814814814815
User 73672 does not improve AUC. Reverting changes.
Training on augumented user 63136 41/50 current_auc = 0.5555555555555556
User 63136 AUC after training: 0.5185185185185186
User 63136 does not improve AUC. Reverting changes.
Training on augumented user 39539 42/50 current_auc = 0.5555555555555556
User 39539 AUC after training: 0.5555555555555556
User 39539 does not improve AUC. Reverting changes.
Training on augumented user 45824 43/50 current_auc = 0.5555555555555556
User 45824 AUC after training: 0.5555555555555556
User 45824 does not improve AUC. Reverting changes.
Training on augumented user 132719 44/50 current_auc = 0.5555555555555556
User 132719 AUC after training: 0.5555555555555556
User 132719 does not improve AUC. Reverting changes.
Training on augumented user 48367 45/50 current_auc = 0.5555555555555556
User 48367 AUC after training: 0.5555555555555556
User 48367 does not improve AUC. Reverting changes.
Training on augumented user 101501 46/50 current_auc = 0.5555555555555556
User 101501 AUC after training: 0.5185185185185186
User 101501 does not improve AUC. Reverting changes.
Training on augumented user 96497 47/50 current_auc = 0.5555555555555556
User 96497 AUC after training: 0.5185185185185186
User 96497 does not improve AUC. Reverting changes.
Training on augumented user 56313 48/50 current_auc = 0.5555555555555556
User 56313 AUC after training: 0.5185185185185186
User 56313 does not improve AUC. Reverting changes.
Training on augumented user 15481 49/50 current_auc = 0.5555555555555556
User 15481 AUC after training: 0.5925925925925926
User 15481 improves AUC. Keeping the model.
[2024-12-02 17:47:26.721047] start test user 96773 18/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:47:27.562001] start test user 96773 18/567 recall augumented users by random, augumented_users = [132463, 93563, 118036, 66151, 45591, 82230, 67937, 27321, 71164, 74218, 91910, 84842, 83304, 45422, 28301, 76948, 91674, 89519, 55993, 78949, 13139, 107559, 98790, 62101, 22243, 110885, 36285, 103733, 50134, 129259, 91503, 10499, 65633, 63683, 38984, 75394, 99357, 11565, 75391, 85561, 108088, 127944, 47435, 21577, 41461, 73742, 119368, 48304, 64564, 43622]
[2024-12-02 17:47:27.592568] user = 96773 Cloud 18/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:47:27.606676] user = 96773 Local 18/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:47:27.680909] user = 96773 Local+ 18/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:47:29.937011] user = 96773 MPDA- 18/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 132463 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132463 AUC after training: 0.5
User 132463 does not improve AUC. Reverting changes.
Training on augumented user 93563 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93563 AUC after training: 0.5
User 93563 does not improve AUC. Reverting changes.
Training on augumented user 118036 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118036 AUC after training: 0.5
User 118036 does not improve AUC. Reverting changes.
Training on augumented user 66151 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66151 AUC after training: 0.5
User 66151 does not improve AUC. Reverting changes.
Training on augumented user 45591 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45591 AUC after training: 0.5
User 45591 does not improve AUC. Reverting changes.
Training on augumented user 82230 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82230 AUC after training: 0.5
User 82230 does not improve AUC. Reverting changes.
Training on augumented user 67937 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67937 AUC after training: 0.5
User 67937 does not improve AUC. Reverting changes.
Training on augumented user 27321 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27321 AUC after training: 0.5
User 27321 does not improve AUC. Reverting changes.
Training on augumented user 71164 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71164 AUC after training: 0.5
User 71164 does not improve AUC. Reverting changes.
Training on augumented user 74218 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74218 AUC after training: 0.5
User 74218 does not improve AUC. Reverting changes.
Training on augumented user 91910 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91910 AUC after training: 0.5
User 91910 does not improve AUC. Reverting changes.
Training on augumented user 84842 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84842 AUC after training: 0.5
User 84842 does not improve AUC. Reverting changes.
Training on augumented user 83304 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83304 AUC after training: 0.5
User 83304 does not improve AUC. Reverting changes.
Training on augumented user 45422 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45422 AUC after training: 0.5
User 45422 does not improve AUC. Reverting changes.
Training on augumented user 28301 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28301 AUC after training: 0.5
User 28301 does not improve AUC. Reverting changes.
Training on augumented user 76948 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76948 AUC after training: 0.5
User 76948 does not improve AUC. Reverting changes.
Training on augumented user 91674 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91674 AUC after training: 0.5
User 91674 does not improve AUC. Reverting changes.
Training on augumented user 89519 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89519 AUC after training: 0.5
User 89519 does not improve AUC. Reverting changes.
Training on augumented user 55993 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55993 AUC after training: 0.5
User 55993 does not improve AUC. Reverting changes.
Training on augumented user 78949 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 78949 AUC after training: 0.5
User 78949 does not improve AUC. Reverting changes.
Training on augumented user 13139 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13139 AUC after training: 0.5
User 13139 does not improve AUC. Reverting changes.
Training on augumented user 107559 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107559 AUC after training: 0.5
User 107559 does not improve AUC. Reverting changes.
Training on augumented user 98790 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98790 AUC after training: 0.5
User 98790 does not improve AUC. Reverting changes.
Training on augumented user 62101 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62101 AUC after training: 0.5
User 62101 does not improve AUC. Reverting changes.
Training on augumented user 22243 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22243 AUC after training: 0.5
User 22243 does not improve AUC. Reverting changes.
Training on augumented user 110885 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110885 AUC after training: 0.5
User 110885 does not improve AUC. Reverting changes.
Training on augumented user 36285 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36285 AUC after training: 0.5
User 36285 does not improve AUC. Reverting changes.
Training on augumented user 103733 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103733 AUC after training: 0.5
User 103733 does not improve AUC. Reverting changes.
Training on augumented user 50134 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50134 AUC after training: 0.5
User 50134 does not improve AUC. Reverting changes.
Training on augumented user 129259 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129259 AUC after training: 0.5
User 129259 does not improve AUC. Reverting changes.
Training on augumented user 91503 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91503 AUC after training: 0.5
User 91503 does not improve AUC. Reverting changes.
Training on augumented user 10499 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10499 AUC after training: 0.5
User 10499 does not improve AUC. Reverting changes.
Training on augumented user 65633 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 65633 AUC after training: 0.5
User 65633 does not improve AUC. Reverting changes.
Training on augumented user 63683 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63683 AUC after training: 0.5
User 63683 does not improve AUC. Reverting changes.
Training on augumented user 38984 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38984 AUC after training: 0.5
User 38984 does not improve AUC. Reverting changes.
Training on augumented user 75394 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75394 AUC after training: 0.5
User 75394 does not improve AUC. Reverting changes.
Training on augumented user 99357 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99357 AUC after training: 0.5
User 99357 does not improve AUC. Reverting changes.
Training on augumented user 11565 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11565 AUC after training: 0.5
User 11565 does not improve AUC. Reverting changes.
Training on augumented user 75391 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75391 AUC after training: 0.5
User 75391 does not improve AUC. Reverting changes.
Training on augumented user 85561 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85561 AUC after training: 0.5
User 85561 does not improve AUC. Reverting changes.
Training on augumented user 108088 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108088 AUC after training: 0.5
User 108088 does not improve AUC. Reverting changes.
Training on augumented user 127944 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127944 AUC after training: 0.5
User 127944 does not improve AUC. Reverting changes.
Training on augumented user 47435 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47435 AUC after training: 0.5
User 47435 does not improve AUC. Reverting changes.
Training on augumented user 21577 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21577 AUC after training: 0.5
User 21577 does not improve AUC. Reverting changes.
Training on augumented user 41461 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41461 AUC after training: 0.5
User 41461 does not improve AUC. Reverting changes.
Training on augumented user 73742 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73742 AUC after training: 0.5
User 73742 does not improve AUC. Reverting changes.
Training on augumented user 119368 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 119368 AUC after training: 0.5
User 119368 does not improve AUC. Reverting changes.
Training on augumented user 48304 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48304 AUC after training: 0.5
User 48304 does not improve AUC. Reverting changes.
Training on augumented user 64564 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64564 AUC after training: 0.5
User 64564 does not improve AUC. Reverting changes.
Training on augumented user 43622 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43622 AUC after training: 0.5
User 43622 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 17:47:58.921809] start test user 96780 19/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:47:59.580504] start test user 96780 19/567 recall augumented users by random, augumented_users = [132164, 47711, 77151, 39740, 17547, 78207, 7995, 51320, 97619, 57093, 95235, 16549, 133442, 58103, 20400, 127606, 80796, 40964, 103557, 67279, 7634, 136540, 72717, 66425, 106871, 128271, 83072, 4892, 45202, 97203, 33074, 100791, 64458, 60196, 41702, 116289, 82464, 47655, 112477, 16976, 130628, 17390, 131902, 5432, 88872, 90863, 45249, 59551, 26035, 49281]
[2024-12-02 17:47:59.611811] user = 96780 Cloud 19/567
[2024-12-02 17:47:59.696755] user = 96780 Local 19/567
[2024-12-02 17:47:59.970934] user = 96780 Local+ 19/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:48:02.221549] user = 96780 MPDA- 19/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.631152660135056
Training on augumented user 132164 0/50 current_auc = 0.631152660135056
User 132164 AUC after training: 0.6306842577774309
User 132164 does not improve AUC. Reverting changes.
Training on augumented user 47711 1/50 current_auc = 0.631152660135056
User 47711 AUC after training: 0.6309965260158477
User 47711 does not improve AUC. Reverting changes.
Training on augumented user 77151 2/50 current_auc = 0.631152660135056
User 77151 AUC after training: 0.6309574924860455
User 77151 does not improve AUC. Reverting changes.
Training on augumented user 39740 3/50 current_auc = 0.631152660135056
User 39740 AUC after training: 0.6308794254264414
User 39740 does not improve AUC. Reverting changes.
Training on augumented user 17547 4/50 current_auc = 0.631152660135056
User 17547 AUC after training: 0.6310648346930013
User 17547 does not improve AUC. Reverting changes.
Training on augumented user 78207 5/50 current_auc = 0.631152660135056
User 78207 AUC after training: 0.6308013583668373
User 78207 does not improve AUC. Reverting changes.
Training on augumented user 7995 6/50 current_auc = 0.631152660135056
User 7995 AUC after training: 0.6310160427807486
User 7995 does not improve AUC. Reverting changes.
Training on augumented user 51320 7/50 current_auc = 0.631152660135056
User 51320 AUC after training: 0.6308013583668372
User 51320 does not improve AUC. Reverting changes.
Training on augumented user 97619 8/50 current_auc = 0.631152660135056
User 97619 AUC after training: 0.6311136266052539
User 97619 does not improve AUC. Reverting changes.
Training on augumented user 57093 9/50 current_auc = 0.631152660135056
User 57093 AUC after training: 0.6304890901284202
User 57093 does not improve AUC. Reverting changes.
Training on augumented user 95235 10/50 current_auc = 0.631152660135056
User 95235 AUC after training: 0.6309379757211445
User 95235 does not improve AUC. Reverting changes.
Training on augumented user 16549 11/50 current_auc = 0.631152660135056
User 16549 AUC after training: 0.6310843514579024
User 16549 does not improve AUC. Reverting changes.
Training on augumented user 133442 12/50 current_auc = 0.631152660135056
User 133442 AUC after training: 0.6300402045356962
User 133442 does not improve AUC. Reverting changes.
Training on augumented user 58103 13/50 current_auc = 0.631152660135056
User 58103 AUC after training: 0.6310355595456496
User 58103 does not improve AUC. Reverting changes.
Training on augumented user 20400 14/50 current_auc = 0.631152660135056
User 20400 AUC after training: 0.6310550763105509
User 20400 does not improve AUC. Reverting changes.
Training on augumented user 127606 15/50 current_auc = 0.631152660135056
User 127606 AUC after training: 0.6308111167492876
User 127606 does not improve AUC. Reverting changes.
Training on augumented user 80796 16/50 current_auc = 0.631152660135056
User 80796 AUC after training: 0.6306061907178266
User 80796 does not improve AUC. Reverting changes.
Training on augumented user 40964 17/50 current_auc = 0.631152660135056
User 40964 AUC after training: 0.6309770092509466
User 40964 does not improve AUC. Reverting changes.
Training on augumented user 103557 18/50 current_auc = 0.631152660135056
User 103557 AUC after training: 0.6311038682228035
User 103557 does not improve AUC. Reverting changes.
Training on augumented user 67279 19/50 current_auc = 0.631152660135056
User 67279 AUC after training: 0.6308403918966392
User 67279 does not improve AUC. Reverting changes.
Training on augumented user 7634 20/50 current_auc = 0.631152660135056
User 7634 AUC after training: 0.6309965260158477
User 7634 does not improve AUC. Reverting changes.
Training on augumented user 136540 21/50 current_auc = 0.631152660135056
User 136540 AUC after training: 0.631133143370155
User 136540 does not improve AUC. Reverting changes.
Training on augumented user 72717 22/50 current_auc = 0.631152660135056
User 72717 AUC after training: 0.6306061907178266
User 72717 does not improve AUC. Reverting changes.
Training on augumented user 66425 23/50 current_auc = 0.631152660135056
User 66425 AUC after training: 0.6306647410125298
User 66425 does not improve AUC. Reverting changes.
Training on augumented user 106871 24/50 current_auc = 0.631152660135056
User 106871 AUC after training: 0.6305086068933213
User 106871 does not improve AUC. Reverting changes.
Training on augumented user 128271 25/50 current_auc = 0.631152660135056
User 128271 AUC after training: 0.6299035871813888
User 128271 does not improve AUC. Reverting changes.
Training on augumented user 83072 26/50 current_auc = 0.631152660135056
User 83072 AUC after training: 0.6305866739529256
User 83072 does not improve AUC. Reverting changes.
Training on augumented user 4892 27/50 current_auc = 0.631152660135056
User 4892 AUC after training: 0.6309574924860455
User 4892 does not improve AUC. Reverting changes.
Training on augumented user 45202 28/50 current_auc = 0.631152660135056
User 45202 AUC after training: 0.6311721768999571
User 45202 improves AUC. Keeping the model.
Training on augumented user 97203 29/50 current_auc = 0.6311721768999571
User 97203 AUC after training: 0.6310745930754518
User 97203 does not improve AUC. Reverting changes.
Training on augumented user 33074 30/50 current_auc = 0.6311721768999571
User 33074 AUC after training: 0.6301768218900035
User 33074 does not improve AUC. Reverting changes.
Training on augumented user 100791 31/50 current_auc = 0.6311721768999571
User 100791 AUC after training: 0.6298060033568835
User 100791 does not improve AUC. Reverting changes.
Training on augumented user 64458 32/50 current_auc = 0.6311721768999571
User 64458 AUC after training: 0.6309965260158477
User 64458 does not improve AUC. Reverting changes.
Training on augumented user 60196 33/50 current_auc = 0.6311721768999571
User 60196 AUC after training: 0.6308794254264414
User 60196 does not improve AUC. Reverting changes.
Training on augumented user 41702 34/50 current_auc = 0.6311721768999571
User 41702 AUC after training: 0.6306354658651783
User 41702 does not improve AUC. Reverting changes.
Training on augumented user 116289 35/50 current_auc = 0.6311721768999571
User 116289 AUC after training: 0.6305476404231235
User 116289 does not improve AUC. Reverting changes.
Training on augumented user 82464 36/50 current_auc = 0.6311721768999571
User 82464 AUC after training: 0.6307818416019361
User 82464 does not improve AUC. Reverting changes.
Training on augumented user 47655 37/50 current_auc = 0.6311721768999571
User 47655 AUC after training: 0.6306842577774308
User 47655 does not improve AUC. Reverting changes.
Training on augumented user 112477 38/50 current_auc = 0.6311721768999571
User 112477 AUC after training: 0.6304988485108708
User 112477 does not improve AUC. Reverting changes.
Training on augumented user 16976 39/50 current_auc = 0.6311721768999571
User 16976 AUC after training: 0.631133143370155
User 16976 does not improve AUC. Reverting changes.
Training on augumented user 130628 40/50 current_auc = 0.6311721768999571
User 130628 AUC after training: 0.631133143370155
User 130628 does not improve AUC. Reverting changes.
Training on augumented user 17390 41/50 current_auc = 0.6311721768999571
User 17390 AUC after training: 0.6309184589562434
User 17390 does not improve AUC. Reverting changes.
Training on augumented user 131902 42/50 current_auc = 0.6311721768999571
User 131902 AUC after training: 0.6309574924860456
User 131902 does not improve AUC. Reverting changes.
Training on augumented user 5432 43/50 current_auc = 0.6311721768999571
User 5432 AUC after training: 0.6308989421913423
User 5432 does not improve AUC. Reverting changes.
Training on augumented user 88872 44/50 current_auc = 0.6311721768999571
User 88872 AUC after training: 0.6308403918966392
User 88872 does not improve AUC. Reverting changes.
Training on augumented user 90863 45/50 current_auc = 0.6311721768999571
User 90863 AUC after training: 0.6310941098403529
User 90863 does not improve AUC. Reverting changes.
Training on augumented user 45249 46/50 current_auc = 0.6311721768999571
User 45249 AUC after training: 0.6297962449744331
User 45249 does not improve AUC. Reverting changes.
Training on augumented user 59551 47/50 current_auc = 0.6311721768999571
User 59551 AUC after training: 0.6310160427807486
User 59551 does not improve AUC. Reverting changes.
Training on augumented user 26035 48/50 current_auc = 0.6311721768999571
User 26035 AUC after training: 0.6307720832194855
User 26035 does not improve AUC. Reverting changes.
Training on augumented user 49281 49/50 current_auc = 0.6311721768999571
User 49281 AUC after training: 0.630928217338694
User 49281 does not improve AUC. Reverting changes.
[2024-12-02 17:48:33.618117] start test user 96795 20/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:48:34.137920] start test user 96795 20/567 recall augumented users by random, augumented_users = [87315, 5934, 12276, 130107, 111479, 134752, 76106, 5361, 66415, 77513, 130257, 133736, 124673, 76371, 133697, 126636, 99462, 77857, 60727, 19701, 102967, 8890, 70328, 83194, 98691, 34176, 107879, 77161, 88441, 109832, 122068, 45099, 18355, 82835, 98297, 87709, 32477, 99644, 15197, 63307, 59122, 33916, 17698, 14638, 2291, 96464, 128555, 55477, 58041, 22944]
[2024-12-02 17:48:34.154430] user = 96795 Cloud 20/567
[2024-12-02 17:48:34.176084] user = 96795 Local 20/567
[2024-12-02 17:48:34.249599] user = 96795 Local+ 20/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:48:37.045536] user = 96795 MPDA- 20/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6054698457223002
Training on augumented user 87315 0/50 current_auc = 0.6054698457223002
User 87315 AUC after training: 0.6050841514726508
User 87315 does not improve AUC. Reverting changes.
Training on augumented user 5934 1/50 current_auc = 0.6054698457223002
User 5934 AUC after training: 0.6053295932678823
User 5934 does not improve AUC. Reverting changes.
Training on augumented user 12276 2/50 current_auc = 0.6054698457223002
User 12276 AUC after training: 0.6055399719495091
User 12276 improves AUC. Keeping the model.
Training on augumented user 130107 3/50 current_auc = 0.6055399719495091
User 130107 AUC after training: 0.6054698457223002
User 130107 does not improve AUC. Reverting changes.
Training on augumented user 111479 4/50 current_auc = 0.6055399719495091
User 111479 AUC after training: 0.6055399719495091
User 111479 does not improve AUC. Reverting changes.
Training on augumented user 134752 5/50 current_auc = 0.6055399719495091
User 134752 AUC after training: 0.605890603085554
User 134752 improves AUC. Keeping the model.
Training on augumented user 76106 6/50 current_auc = 0.605890603085554
User 76106 AUC after training: 0.6063113604488078
User 76106 improves AUC. Keeping the model.
Training on augumented user 5361 7/50 current_auc = 0.6063113604488078
User 5361 AUC after training: 0.6065217391304348
User 5361 improves AUC. Keeping the model.
Training on augumented user 66415 8/50 current_auc = 0.6065217391304348
User 66415 AUC after training: 0.6061360448807854
User 66415 does not improve AUC. Reverting changes.
Training on augumented user 77513 9/50 current_auc = 0.6065217391304348
User 77513 AUC after training: 0.6064866760168303
User 77513 does not improve AUC. Reverting changes.
Training on augumented user 130257 10/50 current_auc = 0.6065217391304348
User 130257 AUC after training: 0.6060308555399719
User 130257 does not improve AUC. Reverting changes.
Training on augumented user 133736 11/50 current_auc = 0.6065217391304348
User 133736 AUC after training: 0.6054698457223001
User 133736 does not improve AUC. Reverting changes.
Training on augumented user 124673 12/50 current_auc = 0.6065217391304348
User 124673 AUC after training: 0.6051192145862552
User 124673 does not improve AUC. Reverting changes.
Training on augumented user 76371 13/50 current_auc = 0.6065217391304348
User 76371 AUC after training: 0.606100981767181
User 76371 does not improve AUC. Reverting changes.
Training on augumented user 133697 14/50 current_auc = 0.6065217391304348
User 133697 AUC after training: 0.605750350631136
User 133697 does not improve AUC. Reverting changes.
Training on augumented user 126636 15/50 current_auc = 0.6065217391304348
User 126636 AUC after training: 0.6063814866760169
User 126636 does not improve AUC. Reverting changes.
Training on augumented user 99462 16/50 current_auc = 0.6065217391304348
User 99462 AUC after training: 0.6065217391304348
User 99462 does not improve AUC. Reverting changes.
Training on augumented user 77857 17/50 current_auc = 0.6065217391304348
User 77857 AUC after training: 0.6064516129032257
User 77857 does not improve AUC. Reverting changes.
Training on augumented user 60727 18/50 current_auc = 0.6065217391304348
User 60727 AUC after training: 0.6049438990182329
User 60727 does not improve AUC. Reverting changes.
Training on augumented user 19701 19/50 current_auc = 0.6065217391304348
User 19701 AUC after training: 0.6062412342215989
User 19701 does not improve AUC. Reverting changes.
Training on augumented user 102967 20/50 current_auc = 0.6065217391304348
User 102967 AUC after training: 0.605820476858345
User 102967 does not improve AUC. Reverting changes.
Training on augumented user 8890 21/50 current_auc = 0.6065217391304348
User 8890 AUC after training: 0.605750350631136
User 8890 does not improve AUC. Reverting changes.
Training on augumented user 70328 22/50 current_auc = 0.6065217391304348
User 70328 AUC after training: 0.6061711079943899
User 70328 does not improve AUC. Reverting changes.
Training on augumented user 83194 23/50 current_auc = 0.6065217391304348
User 83194 AUC after training: 0.6068022440392706
User 83194 improves AUC. Keeping the model.
Training on augumented user 98691 24/50 current_auc = 0.6068022440392706
User 98691 AUC after training: 0.6063814866760169
User 98691 does not improve AUC. Reverting changes.
Training on augumented user 34176 25/50 current_auc = 0.6068022440392706
User 34176 AUC after training: 0.60617110799439
User 34176 does not improve AUC. Reverting changes.
Training on augumented user 107879 26/50 current_auc = 0.6068022440392706
User 107879 AUC after training: 0.6065217391304347
User 107879 does not improve AUC. Reverting changes.
Training on augumented user 77161 27/50 current_auc = 0.6068022440392706
User 77161 AUC after training: 0.6067321178120617
User 77161 does not improve AUC. Reverting changes.
Training on augumented user 88441 28/50 current_auc = 0.6068022440392706
User 88441 AUC after training: 0.6067321178120617
User 88441 does not improve AUC. Reverting changes.
Training on augumented user 109832 29/50 current_auc = 0.6068022440392706
User 109832 AUC after training: 0.6064165497896213
User 109832 does not improve AUC. Reverting changes.
Training on augumented user 122068 30/50 current_auc = 0.6068022440392706
User 122068 AUC after training: 0.6070126227208975
User 122068 improves AUC. Keeping the model.
Training on augumented user 45099 31/50 current_auc = 0.6070126227208975
User 45099 AUC after training: 0.6055399719495091
User 45099 does not improve AUC. Reverting changes.
Training on augumented user 18355 32/50 current_auc = 0.6070126227208975
User 18355 AUC after training: 0.6070827489481067
User 18355 improves AUC. Keeping the model.
Training on augumented user 82835 33/50 current_auc = 0.6070827489481067
User 82835 AUC after training: 0.6065217391304347
User 82835 does not improve AUC. Reverting changes.
Training on augumented user 98297 34/50 current_auc = 0.6070827489481067
User 98297 AUC after training: 0.6081697054698457
User 98297 improves AUC. Keeping the model.
Training on augumented user 87709 35/50 current_auc = 0.6081697054698457
User 87709 AUC after training: 0.6079242636746143
User 87709 does not improve AUC. Reverting changes.
Training on augumented user 32477 36/50 current_auc = 0.6081697054698457
User 32477 AUC after training: 0.6077840112201963
User 32477 does not improve AUC. Reverting changes.
Training on augumented user 99644 37/50 current_auc = 0.6081697054698457
User 99644 AUC after training: 0.6079242636746144
User 99644 does not improve AUC. Reverting changes.
Training on augumented user 15197 38/50 current_auc = 0.6081697054698457
User 15197 AUC after training: 0.6080645161290323
User 15197 does not improve AUC. Reverting changes.
Training on augumented user 63307 39/50 current_auc = 0.6081697054698457
User 63307 AUC after training: 0.6077138849929874
User 63307 does not improve AUC. Reverting changes.
Training on augumented user 59122 40/50 current_auc = 0.6081697054698457
User 59122 AUC after training: 0.608625525946704
User 59122 improves AUC. Keeping the model.
Training on augumented user 33916 41/50 current_auc = 0.608625525946704
User 33916 AUC after training: 0.6084852734922862
User 33916 does not improve AUC. Reverting changes.
Training on augumented user 17698 42/50 current_auc = 0.608625525946704
User 17698 AUC after training: 0.6080995792426368
User 17698 does not improve AUC. Reverting changes.
Training on augumented user 14638 43/50 current_auc = 0.608625525946704
User 14638 AUC after training: 0.608625525946704
User 14638 does not improve AUC. Reverting changes.
Training on augumented user 2291 44/50 current_auc = 0.608625525946704
User 2291 AUC after training: 0.6082748948106591
User 2291 does not improve AUC. Reverting changes.
Training on augumented user 96464 45/50 current_auc = 0.608625525946704
User 96464 AUC after training: 0.6083450210378681
User 96464 does not improve AUC. Reverting changes.
Training on augumented user 128555 46/50 current_auc = 0.608625525946704
User 128555 AUC after training: 0.6077840112201964
User 128555 does not improve AUC. Reverting changes.
Training on augumented user 55477 47/50 current_auc = 0.608625525946704
User 55477 AUC after training: 0.6084852734922862
User 55477 does not improve AUC. Reverting changes.
Training on augumented user 58041 48/50 current_auc = 0.608625525946704
User 58041 AUC after training: 0.6082047685834502
User 58041 does not improve AUC. Reverting changes.
Training on augumented user 22944 49/50 current_auc = 0.608625525946704
User 22944 AUC after training: 0.6068022440392706
User 22944 does not improve AUC. Reverting changes.
[2024-12-02 17:49:03.414601] start test user 96822 21/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:49:04.130681] start test user 96822 21/567 recall augumented users by random, augumented_users = [137155, 58390, 61549, 89265, 75639, 61184, 50164, 111309, 93172, 109567, 36073, 110592, 109226, 62596, 124083, 107661, 129317, 113088, 34474, 101796, 125198, 17385, 37686, 39604, 8927, 70861, 22858, 8035, 31170, 45388, 74100, 129189, 63278, 97365, 25484, 356, 41236, 45850, 10634, 115705, 3528, 64950, 131047, 77683, 113856, 21281, 28792, 132955, 44881, 124718]
[2024-12-02 17:49:04.153601] user = 96822 Cloud 21/567
[2024-12-02 17:49:04.178429] user = 96822 Local 21/567
[2024-12-02 17:49:04.239511] user = 96822 Local+ 21/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:49:06.348886] user = 96822 MPDA- 21/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5125
Training on augumented user 137155 0/50 current_auc = 0.5125
User 137155 AUC after training: 0.5125
User 137155 does not improve AUC. Reverting changes.
Training on augumented user 58390 1/50 current_auc = 0.5125
User 58390 AUC after training: 0.5125
User 58390 does not improve AUC. Reverting changes.
Training on augumented user 61549 2/50 current_auc = 0.5125
User 61549 AUC after training: 0.5125
User 61549 does not improve AUC. Reverting changes.
Training on augumented user 89265 3/50 current_auc = 0.5125
User 89265 AUC after training: 0.5125
User 89265 does not improve AUC. Reverting changes.
Training on augumented user 75639 4/50 current_auc = 0.5125
User 75639 AUC after training: 0.5125
User 75639 does not improve AUC. Reverting changes.
Training on augumented user 61184 5/50 current_auc = 0.5125
User 61184 AUC after training: 0.5125
User 61184 does not improve AUC. Reverting changes.
Training on augumented user 50164 6/50 current_auc = 0.5125
User 50164 AUC after training: 0.5125
User 50164 does not improve AUC. Reverting changes.
Training on augumented user 111309 7/50 current_auc = 0.5125
User 111309 AUC after training: 0.5125
User 111309 does not improve AUC. Reverting changes.
Training on augumented user 93172 8/50 current_auc = 0.5125
User 93172 AUC after training: 0.5125
User 93172 does not improve AUC. Reverting changes.
Training on augumented user 109567 9/50 current_auc = 0.5125
User 109567 AUC after training: 0.5125
User 109567 does not improve AUC. Reverting changes.
Training on augumented user 36073 10/50 current_auc = 0.5125
User 36073 AUC after training: 0.5125
User 36073 does not improve AUC. Reverting changes.
Training on augumented user 110592 11/50 current_auc = 0.5125
User 110592 AUC after training: 0.5125
User 110592 does not improve AUC. Reverting changes.
Training on augumented user 109226 12/50 current_auc = 0.5125
User 109226 AUC after training: 0.5125
User 109226 does not improve AUC. Reverting changes.
Training on augumented user 62596 13/50 current_auc = 0.5125
User 62596 AUC after training: 0.5125
User 62596 does not improve AUC. Reverting changes.
Training on augumented user 124083 14/50 current_auc = 0.5125
User 124083 AUC after training: 0.5125
User 124083 does not improve AUC. Reverting changes.
Training on augumented user 107661 15/50 current_auc = 0.5125
User 107661 AUC after training: 0.5125
User 107661 does not improve AUC. Reverting changes.
Training on augumented user 129317 16/50 current_auc = 0.5125
User 129317 AUC after training: 0.5125
User 129317 does not improve AUC. Reverting changes.
Training on augumented user 113088 17/50 current_auc = 0.5125
User 113088 AUC after training: 0.5125
User 113088 does not improve AUC. Reverting changes.
Training on augumented user 34474 18/50 current_auc = 0.5125
User 34474 AUC after training: 0.5125
User 34474 does not improve AUC. Reverting changes.
Training on augumented user 101796 19/50 current_auc = 0.5125
User 101796 AUC after training: 0.5125
User 101796 does not improve AUC. Reverting changes.
Training on augumented user 125198 20/50 current_auc = 0.5125
User 125198 AUC after training: 0.5125
User 125198 does not improve AUC. Reverting changes.
Training on augumented user 17385 21/50 current_auc = 0.5125
User 17385 AUC after training: 0.5125
User 17385 does not improve AUC. Reverting changes.
Training on augumented user 37686 22/50 current_auc = 0.5125
User 37686 AUC after training: 0.5125
User 37686 does not improve AUC. Reverting changes.
Training on augumented user 39604 23/50 current_auc = 0.5125
User 39604 AUC after training: 0.5125
User 39604 does not improve AUC. Reverting changes.
Training on augumented user 8927 24/50 current_auc = 0.5125
User 8927 AUC after training: 0.5125
User 8927 does not improve AUC. Reverting changes.
Training on augumented user 70861 25/50 current_auc = 0.5125
User 70861 AUC after training: 0.5125
User 70861 does not improve AUC. Reverting changes.
Training on augumented user 22858 26/50 current_auc = 0.5125
User 22858 AUC after training: 0.5125
User 22858 does not improve AUC. Reverting changes.
Training on augumented user 8035 27/50 current_auc = 0.5125
User 8035 AUC after training: 0.5125
User 8035 does not improve AUC. Reverting changes.
Training on augumented user 31170 28/50 current_auc = 0.5125
User 31170 AUC after training: 0.5125
User 31170 does not improve AUC. Reverting changes.
Training on augumented user 45388 29/50 current_auc = 0.5125
User 45388 AUC after training: 0.5125
User 45388 does not improve AUC. Reverting changes.
Training on augumented user 74100 30/50 current_auc = 0.5125
User 74100 AUC after training: 0.5125
User 74100 does not improve AUC. Reverting changes.
Training on augumented user 129189 31/50 current_auc = 0.5125
User 129189 AUC after training: 0.5125
User 129189 does not improve AUC. Reverting changes.
Training on augumented user 63278 32/50 current_auc = 0.5125
User 63278 AUC after training: 0.5125
User 63278 does not improve AUC. Reverting changes.
Training on augumented user 97365 33/50 current_auc = 0.5125
User 97365 AUC after training: 0.5125
User 97365 does not improve AUC. Reverting changes.
Training on augumented user 25484 34/50 current_auc = 0.5125
User 25484 AUC after training: 0.5125
User 25484 does not improve AUC. Reverting changes.
Training on augumented user 356 35/50 current_auc = 0.5125
User 356 AUC after training: 0.5125
User 356 does not improve AUC. Reverting changes.
Training on augumented user 41236 36/50 current_auc = 0.5125
User 41236 AUC after training: 0.5125
User 41236 does not improve AUC. Reverting changes.
Training on augumented user 45850 37/50 current_auc = 0.5125
User 45850 AUC after training: 0.5125
User 45850 does not improve AUC. Reverting changes.
Training on augumented user 10634 38/50 current_auc = 0.5125
User 10634 AUC after training: 0.5125
User 10634 does not improve AUC. Reverting changes.
Training on augumented user 115705 39/50 current_auc = 0.5125
User 115705 AUC after training: 0.5125
User 115705 does not improve AUC. Reverting changes.
Training on augumented user 3528 40/50 current_auc = 0.5125
User 3528 AUC after training: 0.5125
User 3528 does not improve AUC. Reverting changes.
Training on augumented user 64950 41/50 current_auc = 0.5125
User 64950 AUC after training: 0.5125
User 64950 does not improve AUC. Reverting changes.
Training on augumented user 131047 42/50 current_auc = 0.5125
User 131047 AUC after training: 0.5125
User 131047 does not improve AUC. Reverting changes.
Training on augumented user 77683 43/50 current_auc = 0.5125
User 77683 AUC after training: 0.5125
User 77683 does not improve AUC. Reverting changes.
Training on augumented user 113856 44/50 current_auc = 0.5125
User 113856 AUC after training: 0.5125
User 113856 does not improve AUC. Reverting changes.
Training on augumented user 21281 45/50 current_auc = 0.5125
User 21281 AUC after training: 0.5125
User 21281 does not improve AUC. Reverting changes.
Training on augumented user 28792 46/50 current_auc = 0.5125
User 28792 AUC after training: 0.5125
User 28792 does not improve AUC. Reverting changes.
Training on augumented user 132955 47/50 current_auc = 0.5125
User 132955 AUC after training: 0.5125
User 132955 does not improve AUC. Reverting changes.
Training on augumented user 44881 48/50 current_auc = 0.5125
User 44881 AUC after training: 0.5125
User 44881 does not improve AUC. Reverting changes.
Training on augumented user 124718 49/50 current_auc = 0.5125
User 124718 AUC after training: 0.5125
User 124718 does not improve AUC. Reverting changes.
[2024-12-02 17:49:34.886065] start test user 96858 22/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:49:35.506469] start test user 96858 22/567 recall augumented users by random, augumented_users = [15161, 101864, 110220, 133440, 52159, 108534, 95696, 51702, 106683, 49256, 90262, 42131, 109256, 136271, 11457, 91476, 37338, 22111, 3988, 111142, 28798, 9828, 122618, 95592, 71051, 38780, 26002, 27452, 101329, 2821, 45121, 18725, 118324, 30435, 31785, 130885, 37859, 98545, 66024, 47742, 111239, 76873, 70896, 55346, 111750, 93432, 124045, 136726, 32930, 44953]
[2024-12-02 17:49:35.522642] user = 96858 Cloud 22/567
[2024-12-02 17:49:35.540502] user = 96858 Local 22/567
[2024-12-02 17:49:35.650469] user = 96858 Local+ 22/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:49:37.928861] user = 96858 MPDA- 22/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7095170454545454
Training on augumented user 15161 0/50 current_auc = 0.7095170454545454
User 15161 AUC after training: 0.7099905303030303
User 15161 improves AUC. Keeping the model.
Training on augumented user 101864 1/50 current_auc = 0.7099905303030303
User 101864 AUC after training: 0.7099905303030303
User 101864 does not improve AUC. Reverting changes.
Training on augumented user 110220 2/50 current_auc = 0.7099905303030303
User 110220 AUC after training: 0.7099905303030303
User 110220 does not improve AUC. Reverting changes.
Training on augumented user 133440 3/50 current_auc = 0.7099905303030303
User 133440 AUC after training: 0.7099905303030303
User 133440 does not improve AUC. Reverting changes.
Training on augumented user 52159 4/50 current_auc = 0.7099905303030303
User 52159 AUC after training: 0.7109375
User 52159 improves AUC. Keeping the model.
Training on augumented user 108534 5/50 current_auc = 0.7109375
User 108534 AUC after training: 0.7099905303030303
User 108534 does not improve AUC. Reverting changes.
Training on augumented user 95696 6/50 current_auc = 0.7109375
User 95696 AUC after training: 0.7090435606060606
User 95696 does not improve AUC. Reverting changes.
Training on augumented user 51702 7/50 current_auc = 0.7109375
User 51702 AUC after training: 0.7109375
User 51702 does not improve AUC. Reverting changes.
Training on augumented user 106683 8/50 current_auc = 0.7109375
User 106683 AUC after training: 0.7104640151515151
User 106683 does not improve AUC. Reverting changes.
Training on augumented user 49256 9/50 current_auc = 0.7109375
User 49256 AUC after training: 0.7104640151515151
User 49256 does not improve AUC. Reverting changes.
Training on augumented user 90262 10/50 current_auc = 0.7109375
User 90262 AUC after training: 0.7104640151515151
User 90262 does not improve AUC. Reverting changes.
Training on augumented user 42131 11/50 current_auc = 0.7109375
User 42131 AUC after training: 0.7104640151515151
User 42131 does not improve AUC. Reverting changes.
Training on augumented user 109256 12/50 current_auc = 0.7109375
User 109256 AUC after training: 0.7095170454545454
User 109256 does not improve AUC. Reverting changes.
Training on augumented user 136271 13/50 current_auc = 0.7109375
User 136271 AUC after training: 0.7099905303030303
User 136271 does not improve AUC. Reverting changes.
Training on augumented user 11457 14/50 current_auc = 0.7109375
User 11457 AUC after training: 0.7099905303030303
User 11457 does not improve AUC. Reverting changes.
Training on augumented user 91476 15/50 current_auc = 0.7109375
User 91476 AUC after training: 0.7114109848484849
User 91476 improves AUC. Keeping the model.
Training on augumented user 37338 16/50 current_auc = 0.7114109848484849
User 37338 AUC after training: 0.7118844696969697
User 37338 improves AUC. Keeping the model.
Training on augumented user 22111 17/50 current_auc = 0.7118844696969697
User 22111 AUC after training: 0.7114109848484849
User 22111 does not improve AUC. Reverting changes.
Training on augumented user 3988 18/50 current_auc = 0.7118844696969697
User 3988 AUC after training: 0.7104640151515151
User 3988 does not improve AUC. Reverting changes.
Training on augumented user 111142 19/50 current_auc = 0.7118844696969697
User 111142 AUC after training: 0.7104640151515151
User 111142 does not improve AUC. Reverting changes.
Training on augumented user 28798 20/50 current_auc = 0.7118844696969697
User 28798 AUC after training: 0.7109375
User 28798 does not improve AUC. Reverting changes.
Training on augumented user 9828 21/50 current_auc = 0.7118844696969697
User 9828 AUC after training: 0.7109375
User 9828 does not improve AUC. Reverting changes.
Training on augumented user 122618 22/50 current_auc = 0.7118844696969697
User 122618 AUC after training: 0.7118844696969697
User 122618 does not improve AUC. Reverting changes.
Training on augumented user 95592 23/50 current_auc = 0.7118844696969697
User 95592 AUC after training: 0.7109375
User 95592 does not improve AUC. Reverting changes.
Training on augumented user 71051 24/50 current_auc = 0.7118844696969697
User 71051 AUC after training: 0.7109375
User 71051 does not improve AUC. Reverting changes.
Training on augumented user 38780 25/50 current_auc = 0.7118844696969697
User 38780 AUC after training: 0.7114109848484849
User 38780 does not improve AUC. Reverting changes.
Training on augumented user 26002 26/50 current_auc = 0.7118844696969697
User 26002 AUC after training: 0.7114109848484849
User 26002 does not improve AUC. Reverting changes.
Training on augumented user 27452 27/50 current_auc = 0.7118844696969697
User 27452 AUC after training: 0.7109375
User 27452 does not improve AUC. Reverting changes.
Training on augumented user 101329 28/50 current_auc = 0.7118844696969697
User 101329 AUC after training: 0.7095170454545454
User 101329 does not improve AUC. Reverting changes.
Training on augumented user 2821 29/50 current_auc = 0.7118844696969697
User 2821 AUC after training: 0.7104640151515151
User 2821 does not improve AUC. Reverting changes.
Training on augumented user 45121 30/50 current_auc = 0.7118844696969697
User 45121 AUC after training: 0.7099905303030303
User 45121 does not improve AUC. Reverting changes.
Training on augumented user 18725 31/50 current_auc = 0.7118844696969697
User 18725 AUC after training: 0.7116477272727273
User 18725 does not improve AUC. Reverting changes.
Training on augumented user 118324 32/50 current_auc = 0.7118844696969697
User 118324 AUC after training: 0.7114109848484849
User 118324 does not improve AUC. Reverting changes.
Training on augumented user 30435 33/50 current_auc = 0.7118844696969697
User 30435 AUC after training: 0.7104640151515151
User 30435 does not improve AUC. Reverting changes.
Training on augumented user 31785 34/50 current_auc = 0.7118844696969697
User 31785 AUC after training: 0.7118844696969697
User 31785 does not improve AUC. Reverting changes.
Training on augumented user 130885 35/50 current_auc = 0.7118844696969697
User 130885 AUC after training: 0.7114109848484849
User 130885 does not improve AUC. Reverting changes.
Training on augumented user 37859 36/50 current_auc = 0.7118844696969697
User 37859 AUC after training: 0.7099905303030303
User 37859 does not improve AUC. Reverting changes.
Training on augumented user 98545 37/50 current_auc = 0.7118844696969697
User 98545 AUC after training: 0.7114109848484849
User 98545 does not improve AUC. Reverting changes.
Training on augumented user 66024 38/50 current_auc = 0.7118844696969697
User 66024 AUC after training: 0.7114109848484849
User 66024 does not improve AUC. Reverting changes.
Training on augumented user 47742 39/50 current_auc = 0.7118844696969697
User 47742 AUC after training: 0.7114109848484849
User 47742 does not improve AUC. Reverting changes.
Training on augumented user 111239 40/50 current_auc = 0.7118844696969697
User 111239 AUC after training: 0.7114109848484849
User 111239 does not improve AUC. Reverting changes.
Training on augumented user 76873 41/50 current_auc = 0.7118844696969697
User 76873 AUC after training: 0.7114109848484849
User 76873 does not improve AUC. Reverting changes.
Training on augumented user 70896 42/50 current_auc = 0.7118844696969697
User 70896 AUC after training: 0.7114109848484849
User 70896 does not improve AUC. Reverting changes.
Training on augumented user 55346 43/50 current_auc = 0.7118844696969697
User 55346 AUC after training: 0.7104640151515151
User 55346 does not improve AUC. Reverting changes.
Training on augumented user 111750 44/50 current_auc = 0.7118844696969697
User 111750 AUC after training: 0.7099905303030303
User 111750 does not improve AUC. Reverting changes.
Training on augumented user 93432 45/50 current_auc = 0.7118844696969697
User 93432 AUC after training: 0.7114109848484849
User 93432 does not improve AUC. Reverting changes.
Training on augumented user 124045 46/50 current_auc = 0.7118844696969697
User 124045 AUC after training: 0.7109375
User 124045 does not improve AUC. Reverting changes.
Training on augumented user 136726 47/50 current_auc = 0.7118844696969697
User 136726 AUC after training: 0.7104640151515151
User 136726 does not improve AUC. Reverting changes.
Training on augumented user 32930 48/50 current_auc = 0.7118844696969697
User 32930 AUC after training: 0.7118844696969697
User 32930 does not improve AUC. Reverting changes.
Training on augumented user 44953 49/50 current_auc = 0.7118844696969697
User 44953 AUC after training: 0.7109375
User 44953 does not improve AUC. Reverting changes.
[2024-12-02 17:50:03.590517] start test user 96875 23/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:50:04.401370] start test user 96875 23/567 recall augumented users by random, augumented_users = [76984, 5210, 84603, 30888, 73055, 131208, 2903, 100005, 51576, 33919, 51142, 55165, 2341, 20297, 115271, 126461, 59715, 120174, 67249, 5297, 25042, 38011, 82592, 26777, 15515, 60798, 119420, 62859, 3467, 108862, 101167, 102699, 82670, 66197, 3136, 130644, 65329, 88452, 34323, 128221, 100927, 50, 35143, 116905, 86778, 42184, 107725, 9303, 68034, 82104]
[2024-12-02 17:50:04.431211] user = 96875 Cloud 23/567
[2024-12-02 17:50:04.441508] user = 96875 Local 23/567
[2024-12-02 17:50:04.515383] user = 96875 Local+ 23/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:50:06.188590] user = 96875 MPDA- 23/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8
Training on augumented user 76984 0/50 current_auc = 0.8
User 76984 AUC after training: 0.8
User 76984 does not improve AUC. Reverting changes.
Training on augumented user 5210 1/50 current_auc = 0.8
User 5210 AUC after training: 0.8
User 5210 does not improve AUC. Reverting changes.
Training on augumented user 84603 2/50 current_auc = 0.8
User 84603 AUC after training: 0.8
User 84603 does not improve AUC. Reverting changes.
Training on augumented user 30888 3/50 current_auc = 0.8
User 30888 AUC after training: 0.8
User 30888 does not improve AUC. Reverting changes.
Training on augumented user 73055 4/50 current_auc = 0.8
User 73055 AUC after training: 0.8
User 73055 does not improve AUC. Reverting changes.
Training on augumented user 131208 5/50 current_auc = 0.8
User 131208 AUC after training: 0.8
User 131208 does not improve AUC. Reverting changes.
Training on augumented user 2903 6/50 current_auc = 0.8
User 2903 AUC after training: 0.8
User 2903 does not improve AUC. Reverting changes.
Training on augumented user 100005 7/50 current_auc = 0.8
User 100005 AUC after training: 0.8
User 100005 does not improve AUC. Reverting changes.
Training on augumented user 51576 8/50 current_auc = 0.8
User 51576 AUC after training: 0.8
User 51576 does not improve AUC. Reverting changes.
Training on augumented user 33919 9/50 current_auc = 0.8
User 33919 AUC after training: 0.8
User 33919 does not improve AUC. Reverting changes.
Training on augumented user 51142 10/50 current_auc = 0.8
User 51142 AUC after training: 0.8
User 51142 does not improve AUC. Reverting changes.
Training on augumented user 55165 11/50 current_auc = 0.8
User 55165 AUC after training: 0.8
User 55165 does not improve AUC. Reverting changes.
Training on augumented user 2341 12/50 current_auc = 0.8
User 2341 AUC after training: 0.8
User 2341 does not improve AUC. Reverting changes.
Training on augumented user 20297 13/50 current_auc = 0.8
User 20297 AUC after training: 0.8
User 20297 does not improve AUC. Reverting changes.
Training on augumented user 115271 14/50 current_auc = 0.8
User 115271 AUC after training: 0.8
User 115271 does not improve AUC. Reverting changes.
Training on augumented user 126461 15/50 current_auc = 0.8
User 126461 AUC after training: 0.8
User 126461 does not improve AUC. Reverting changes.
Training on augumented user 59715 16/50 current_auc = 0.8
User 59715 AUC after training: 0.8
User 59715 does not improve AUC. Reverting changes.
Training on augumented user 120174 17/50 current_auc = 0.8
User 120174 AUC after training: 0.8
User 120174 does not improve AUC. Reverting changes.
Training on augumented user 67249 18/50 current_auc = 0.8
User 67249 AUC after training: 0.8
User 67249 does not improve AUC. Reverting changes.
Training on augumented user 5297 19/50 current_auc = 0.8
User 5297 AUC after training: 0.8
User 5297 does not improve AUC. Reverting changes.
Training on augumented user 25042 20/50 current_auc = 0.8
User 25042 AUC after training: 0.8
User 25042 does not improve AUC. Reverting changes.
Training on augumented user 38011 21/50 current_auc = 0.8
User 38011 AUC after training: 0.8
User 38011 does not improve AUC. Reverting changes.
Training on augumented user 82592 22/50 current_auc = 0.8
User 82592 AUC after training: 0.8
User 82592 does not improve AUC. Reverting changes.
Training on augumented user 26777 23/50 current_auc = 0.8
User 26777 AUC after training: 0.8
User 26777 does not improve AUC. Reverting changes.
Training on augumented user 15515 24/50 current_auc = 0.8
User 15515 AUC after training: 0.8
User 15515 does not improve AUC. Reverting changes.
Training on augumented user 60798 25/50 current_auc = 0.8
User 60798 AUC after training: 0.8
User 60798 does not improve AUC. Reverting changes.
Training on augumented user 119420 26/50 current_auc = 0.8
User 119420 AUC after training: 0.8
User 119420 does not improve AUC. Reverting changes.
Training on augumented user 62859 27/50 current_auc = 0.8
User 62859 AUC after training: 0.8
User 62859 does not improve AUC. Reverting changes.
Training on augumented user 3467 28/50 current_auc = 0.8
User 3467 AUC after training: 0.8
User 3467 does not improve AUC. Reverting changes.
Training on augumented user 108862 29/50 current_auc = 0.8
User 108862 AUC after training: 0.8
User 108862 does not improve AUC. Reverting changes.
Training on augumented user 101167 30/50 current_auc = 0.8
User 101167 AUC after training: 0.8
User 101167 does not improve AUC. Reverting changes.
Training on augumented user 102699 31/50 current_auc = 0.8
User 102699 AUC after training: 0.8
User 102699 does not improve AUC. Reverting changes.
Training on augumented user 82670 32/50 current_auc = 0.8
User 82670 AUC after training: 0.8
User 82670 does not improve AUC. Reverting changes.
Training on augumented user 66197 33/50 current_auc = 0.8
User 66197 AUC after training: 0.8
User 66197 does not improve AUC. Reverting changes.
Training on augumented user 3136 34/50 current_auc = 0.8
User 3136 AUC after training: 0.8
User 3136 does not improve AUC. Reverting changes.
Training on augumented user 130644 35/50 current_auc = 0.8
User 130644 AUC after training: 0.8
User 130644 does not improve AUC. Reverting changes.
Training on augumented user 65329 36/50 current_auc = 0.8
User 65329 AUC after training: 0.8
User 65329 does not improve AUC. Reverting changes.
Training on augumented user 88452 37/50 current_auc = 0.8
User 88452 AUC after training: 0.8
User 88452 does not improve AUC. Reverting changes.
Training on augumented user 34323 38/50 current_auc = 0.8
User 34323 AUC after training: 0.8
User 34323 does not improve AUC. Reverting changes.
Training on augumented user 128221 39/50 current_auc = 0.8
User 128221 AUC after training: 0.8
User 128221 does not improve AUC. Reverting changes.
Training on augumented user 100927 40/50 current_auc = 0.8
User 100927 AUC after training: 0.8
User 100927 does not improve AUC. Reverting changes.
Training on augumented user 50 41/50 current_auc = 0.8
User 50 AUC after training: 0.8
User 50 does not improve AUC. Reverting changes.
Training on augumented user 35143 42/50 current_auc = 0.8
User 35143 AUC after training: 0.8
User 35143 does not improve AUC. Reverting changes.
Training on augumented user 116905 43/50 current_auc = 0.8
User 116905 AUC after training: 0.8
User 116905 does not improve AUC. Reverting changes.
Training on augumented user 86778 44/50 current_auc = 0.8
User 86778 AUC after training: 0.8
User 86778 does not improve AUC. Reverting changes.
Training on augumented user 42184 45/50 current_auc = 0.8
User 42184 AUC after training: 0.8
User 42184 does not improve AUC. Reverting changes.
Training on augumented user 107725 46/50 current_auc = 0.8
User 107725 AUC after training: 0.8
User 107725 does not improve AUC. Reverting changes.
Training on augumented user 9303 47/50 current_auc = 0.8
User 9303 AUC after training: 0.8
User 9303 does not improve AUC. Reverting changes.
Training on augumented user 68034 48/50 current_auc = 0.8
User 68034 AUC after training: 0.8
User 68034 does not improve AUC. Reverting changes.
Training on augumented user 82104 49/50 current_auc = 0.8
User 82104 AUC after training: 0.8
User 82104 does not improve AUC. Reverting changes.
[2024-12-02 17:50:33.995767] start test user 96885 24/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:50:34.399275] start test user 96885 24/567 recall augumented users by random, augumented_users = [105352, 118911, 22312, 51859, 84030, 20124, 52162, 28801, 40368, 135909, 32001, 38613, 59838, 82825, 87262, 89353, 85788, 113171, 61183, 113889, 21211, 129676, 43497, 62318, 33855, 46496, 133464, 14375, 99656, 6891, 114042, 119301, 21073, 133795, 76895, 7533, 34199, 15297, 104252, 125487, 43514, 91205, 93824, 12226, 115715, 133752, 109013, 55519, 94264, 68795]
[2024-12-02 17:50:34.415380] user = 96885 Cloud 24/567
[2024-12-02 17:50:34.433445] user = 96885 Local 24/567
[2024-12-02 17:50:34.501241] user = 96885 Local+ 24/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:50:36.135086] user = 96885 MPDA- 24/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6043829296424452
Training on augumented user 105352 0/50 current_auc = 0.6043829296424452
User 105352 AUC after training: 0.6036908881199539
User 105352 does not improve AUC. Reverting changes.
Training on augumented user 118911 1/50 current_auc = 0.6043829296424452
User 118911 AUC after training: 0.6034602076124567
User 118911 does not improve AUC. Reverting changes.
Training on augumented user 22312 2/50 current_auc = 0.6043829296424452
User 22312 AUC after training: 0.6048442906574394
User 22312 improves AUC. Keeping the model.
Training on augumented user 51859 3/50 current_auc = 0.6048442906574394
User 51859 AUC after training: 0.6050749711649366
User 51859 improves AUC. Keeping the model.
Training on augumented user 84030 4/50 current_auc = 0.6050749711649366
User 84030 AUC after training: 0.6055363321799307
User 84030 improves AUC. Keeping the model.
Training on augumented user 20124 5/50 current_auc = 0.6055363321799307
User 20124 AUC after training: 0.6053056516724337
User 20124 does not improve AUC. Reverting changes.
Training on augumented user 52162 6/50 current_auc = 0.6055363321799307
User 52162 AUC after training: 0.6048442906574394
User 52162 does not improve AUC. Reverting changes.
Training on augumented user 28801 7/50 current_auc = 0.6055363321799307
User 28801 AUC after training: 0.6048442906574394
User 28801 does not improve AUC. Reverting changes.
Training on augumented user 40368 8/50 current_auc = 0.6055363321799307
User 40368 AUC after training: 0.6053056516724337
User 40368 does not improve AUC. Reverting changes.
Training on augumented user 135909 9/50 current_auc = 0.6055363321799307
User 135909 AUC after training: 0.6048442906574394
User 135909 does not improve AUC. Reverting changes.
Training on augumented user 32001 10/50 current_auc = 0.6055363321799307
User 32001 AUC after training: 0.6048442906574395
User 32001 does not improve AUC. Reverting changes.
Training on augumented user 38613 11/50 current_auc = 0.6055363321799307
User 38613 AUC after training: 0.6050749711649366
User 38613 does not improve AUC. Reverting changes.
Training on augumented user 59838 12/50 current_auc = 0.6055363321799307
User 59838 AUC after training: 0.6032295271049596
User 59838 does not improve AUC. Reverting changes.
Training on augumented user 82825 13/50 current_auc = 0.6055363321799307
User 82825 AUC after training: 0.6064590542099193
User 82825 improves AUC. Keeping the model.
Training on augumented user 87262 14/50 current_auc = 0.6064590542099193
User 87262 AUC after training: 0.605997693194925
User 87262 does not improve AUC. Reverting changes.
Training on augumented user 89353 15/50 current_auc = 0.6064590542099193
User 89353 AUC after training: 0.6057670126874278
User 89353 does not improve AUC. Reverting changes.
Training on augumented user 85788 16/50 current_auc = 0.6064590542099193
User 85788 AUC after training: 0.6053056516724337
User 85788 does not improve AUC. Reverting changes.
Training on augumented user 113171 17/50 current_auc = 0.6064590542099193
User 113171 AUC after training: 0.6050749711649366
User 113171 does not improve AUC. Reverting changes.
Training on augumented user 61183 18/50 current_auc = 0.6064590542099193
User 61183 AUC after training: 0.6057670126874279
User 61183 does not improve AUC. Reverting changes.
Training on augumented user 113889 19/50 current_auc = 0.6064590542099193
User 113889 AUC after training: 0.605997693194925
User 113889 does not improve AUC. Reverting changes.
Training on augumented user 21211 20/50 current_auc = 0.6064590542099193
User 21211 AUC after training: 0.6062283737024221
User 21211 does not improve AUC. Reverting changes.
Training on augumented user 129676 21/50 current_auc = 0.6064590542099193
User 129676 AUC after training: 0.605997693194925
User 129676 does not improve AUC. Reverting changes.
Training on augumented user 43497 22/50 current_auc = 0.6064590542099193
User 43497 AUC after training: 0.6055363321799307
User 43497 does not improve AUC. Reverting changes.
Training on augumented user 62318 23/50 current_auc = 0.6064590542099193
User 62318 AUC after training: 0.6053056516724337
User 62318 does not improve AUC. Reverting changes.
Training on augumented user 33855 24/50 current_auc = 0.6064590542099193
User 33855 AUC after training: 0.605997693194925
User 33855 does not improve AUC. Reverting changes.
Training on augumented user 46496 25/50 current_auc = 0.6064590542099193
User 46496 AUC after training: 0.6055363321799307
User 46496 does not improve AUC. Reverting changes.
Training on augumented user 133464 26/50 current_auc = 0.6064590542099193
User 133464 AUC after training: 0.605997693194925
User 133464 does not improve AUC. Reverting changes.
Training on augumented user 14375 27/50 current_auc = 0.6064590542099193
User 14375 AUC after training: 0.6048442906574394
User 14375 does not improve AUC. Reverting changes.
Training on augumented user 99656 28/50 current_auc = 0.6064590542099193
User 99656 AUC after training: 0.6053056516724337
User 99656 does not improve AUC. Reverting changes.
Training on augumented user 6891 29/50 current_auc = 0.6064590542099193
User 6891 AUC after training: 0.6057670126874279
User 6891 does not improve AUC. Reverting changes.
Training on augumented user 114042 30/50 current_auc = 0.6064590542099193
User 114042 AUC after training: 0.6057670126874278
User 114042 does not improve AUC. Reverting changes.
Training on augumented user 119301 31/50 current_auc = 0.6064590542099193
User 119301 AUC after training: 0.6062283737024221
User 119301 does not improve AUC. Reverting changes.
Training on augumented user 21073 32/50 current_auc = 0.6064590542099193
User 21073 AUC after training: 0.6064590542099193
User 21073 does not improve AUC. Reverting changes.
Training on augumented user 133795 33/50 current_auc = 0.6064590542099193
User 133795 AUC after training: 0.605997693194925
User 133795 does not improve AUC. Reverting changes.
Training on augumented user 76895 34/50 current_auc = 0.6064590542099193
User 76895 AUC after training: 0.6053056516724337
User 76895 does not improve AUC. Reverting changes.
Training on augumented user 7533 35/50 current_auc = 0.6064590542099193
User 7533 AUC after training: 0.6062283737024221
User 7533 does not improve AUC. Reverting changes.
Training on augumented user 34199 36/50 current_auc = 0.6064590542099193
User 34199 AUC after training: 0.6048442906574394
User 34199 does not improve AUC. Reverting changes.
Training on augumented user 15297 37/50 current_auc = 0.6064590542099193
User 15297 AUC after training: 0.6062283737024221
User 15297 does not improve AUC. Reverting changes.
Training on augumented user 104252 38/50 current_auc = 0.6064590542099193
User 104252 AUC after training: 0.6062283737024221
User 104252 does not improve AUC. Reverting changes.
Training on augumented user 125487 39/50 current_auc = 0.6064590542099193
User 125487 AUC after training: 0.6046136101499424
User 125487 does not improve AUC. Reverting changes.
Training on augumented user 43514 40/50 current_auc = 0.6064590542099193
User 43514 AUC after training: 0.605997693194925
User 43514 does not improve AUC. Reverting changes.
Training on augumented user 91205 41/50 current_auc = 0.6064590542099193
User 91205 AUC after training: 0.6062283737024221
User 91205 does not improve AUC. Reverting changes.
Training on augumented user 93824 42/50 current_auc = 0.6064590542099193
User 93824 AUC after training: 0.605997693194925
User 93824 does not improve AUC. Reverting changes.
Training on augumented user 12226 43/50 current_auc = 0.6064590542099193
User 12226 AUC after training: 0.6057670126874279
User 12226 does not improve AUC. Reverting changes.
Training on augumented user 115715 44/50 current_auc = 0.6064590542099193
User 115715 AUC after training: 0.6057670126874278
User 115715 does not improve AUC. Reverting changes.
Training on augumented user 133752 45/50 current_auc = 0.6064590542099193
User 133752 AUC after training: 0.6050749711649366
User 133752 does not improve AUC. Reverting changes.
Training on augumented user 109013 46/50 current_auc = 0.6064590542099193
User 109013 AUC after training: 0.6053056516724337
User 109013 does not improve AUC. Reverting changes.
Training on augumented user 55519 47/50 current_auc = 0.6064590542099193
User 55519 AUC after training: 0.6053056516724337
User 55519 does not improve AUC. Reverting changes.
Training on augumented user 94264 48/50 current_auc = 0.6064590542099193
User 94264 AUC after training: 0.6062283737024221
User 94264 does not improve AUC. Reverting changes.
Training on augumented user 68795 49/50 current_auc = 0.6064590542099193
User 68795 AUC after training: 0.605997693194925
User 68795 does not improve AUC. Reverting changes.
[2024-12-02 17:51:02.219631] start test user 96887 25/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:51:02.909909] start test user 96887 25/567 recall augumented users by random, augumented_users = [85360, 90987, 133451, 34319, 25812, 61790, 66764, 99819, 30088, 127956, 22731, 71026, 120831, 85045, 81717, 133242, 78082, 126872, 62197, 88270, 94441, 7655, 96995, 49131, 6711, 69579, 8310, 127788, 48714, 19929, 125848, 43578, 49747, 130218, 61565, 59173, 32111, 93808, 43504, 71089, 79479, 71804, 76392, 117524, 137312, 136643, 58595, 2404, 84577, 17611]
[2024-12-02 17:51:02.931644] user = 96887 Cloud 25/567
[2024-12-02 17:51:02.954457] user = 96887 Local 25/567
[2024-12-02 17:51:03.059591] user = 96887 Local+ 25/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:51:05.622495] user = 96887 MPDA- 25/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7324312527280664
Training on augumented user 85360 0/50 current_auc = 0.7324312527280664
User 85360 AUC after training: 0.7319947621126146
User 85360 does not improve AUC. Reverting changes.
Training on augumented user 90987 1/50 current_auc = 0.7324312527280664
User 90987 AUC after training: 0.7326494980357923
User 90987 improves AUC. Keeping the model.
Training on augumented user 133451 2/50 current_auc = 0.7326494980357923
User 133451 AUC after training: 0.7326494980357923
User 133451 does not improve AUC. Reverting changes.
Training on augumented user 34319 3/50 current_auc = 0.7326494980357923
User 34319 AUC after training: 0.7324312527280664
User 34319 does not improve AUC. Reverting changes.
Training on augumented user 25812 4/50 current_auc = 0.7326494980357923
User 25812 AUC after training: 0.7319947621126146
User 25812 does not improve AUC. Reverting changes.
Training on augumented user 61790 5/50 current_auc = 0.7326494980357923
User 61790 AUC after training: 0.7326494980357923
User 61790 does not improve AUC. Reverting changes.
Training on augumented user 66764 6/50 current_auc = 0.7326494980357923
User 66764 AUC after training: 0.7322130074203405
User 66764 does not improve AUC. Reverting changes.
Training on augumented user 99819 7/50 current_auc = 0.7326494980357923
User 99819 AUC after training: 0.7319947621126146
User 99819 does not improve AUC. Reverting changes.
Training on augumented user 30088 8/50 current_auc = 0.7326494980357923
User 30088 AUC after training: 0.7322130074203405
User 30088 does not improve AUC. Reverting changes.
Training on augumented user 127956 9/50 current_auc = 0.7326494980357923
User 127956 AUC after training: 0.7328677433435181
User 127956 improves AUC. Keeping the model.
Training on augumented user 22731 10/50 current_auc = 0.7328677433435181
User 22731 AUC after training: 0.732867743343518
User 22731 does not improve AUC. Reverting changes.
Training on augumented user 71026 11/50 current_auc = 0.7328677433435181
User 71026 AUC after training: 0.7319947621126146
User 71026 does not improve AUC. Reverting changes.
Training on augumented user 120831 12/50 current_auc = 0.7328677433435181
User 120831 AUC after training: 0.7324312527280663
User 120831 does not improve AUC. Reverting changes.
Training on augumented user 85045 13/50 current_auc = 0.7328677433435181
User 85045 AUC after training: 0.7326494980357923
User 85045 does not improve AUC. Reverting changes.
Training on augumented user 81717 14/50 current_auc = 0.7328677433435181
User 81717 AUC after training: 0.7326494980357923
User 81717 does not improve AUC. Reverting changes.
Training on augumented user 133242 15/50 current_auc = 0.7328677433435181
User 133242 AUC after training: 0.7324312527280663
User 133242 does not improve AUC. Reverting changes.
Training on augumented user 78082 16/50 current_auc = 0.7328677433435181
User 78082 AUC after training: 0.7322130074203405
User 78082 does not improve AUC. Reverting changes.
Training on augumented user 126872 17/50 current_auc = 0.7328677433435181
User 126872 AUC after training: 0.7326494980357923
User 126872 does not improve AUC. Reverting changes.
Training on augumented user 62197 18/50 current_auc = 0.7328677433435181
User 62197 AUC after training: 0.7324312527280663
User 62197 does not improve AUC. Reverting changes.
Training on augumented user 88270 19/50 current_auc = 0.7328677433435181
User 88270 AUC after training: 0.7322130074203405
User 88270 does not improve AUC. Reverting changes.
Training on augumented user 94441 20/50 current_auc = 0.7328677433435181
User 94441 AUC after training: 0.7319947621126146
User 94441 does not improve AUC. Reverting changes.
Training on augumented user 7655 21/50 current_auc = 0.7328677433435181
User 7655 AUC after training: 0.7324312527280664
User 7655 does not improve AUC. Reverting changes.
Training on augumented user 96995 22/50 current_auc = 0.7328677433435181
User 96995 AUC after training: 0.7330859886512441
User 96995 improves AUC. Keeping the model.
Training on augumented user 49131 23/50 current_auc = 0.7330859886512441
User 49131 AUC after training: 0.7328677433435181
User 49131 does not improve AUC. Reverting changes.
Training on augumented user 6711 24/50 current_auc = 0.7330859886512441
User 6711 AUC after training: 0.7324312527280664
User 6711 does not improve AUC. Reverting changes.
Training on augumented user 69579 25/50 current_auc = 0.7330859886512441
User 69579 AUC after training: 0.7326494980357923
User 69579 does not improve AUC. Reverting changes.
Training on augumented user 8310 26/50 current_auc = 0.7330859886512441
User 8310 AUC after training: 0.7313400261894369
User 8310 does not improve AUC. Reverting changes.
Training on augumented user 127788 27/50 current_auc = 0.7330859886512441
User 127788 AUC after training: 0.7328677433435181
User 127788 does not improve AUC. Reverting changes.
Training on augumented user 48714 28/50 current_auc = 0.7330859886512441
User 48714 AUC after training: 0.7322130074203406
User 48714 does not improve AUC. Reverting changes.
Training on augumented user 19929 29/50 current_auc = 0.7330859886512441
User 19929 AUC after training: 0.7324312527280664
User 19929 does not improve AUC. Reverting changes.
Training on augumented user 125848 30/50 current_auc = 0.7330859886512441
User 125848 AUC after training: 0.733085988651244
User 125848 does not improve AUC. Reverting changes.
Training on augumented user 43578 31/50 current_auc = 0.7330859886512441
User 43578 AUC after training: 0.7315582714971628
User 43578 does not improve AUC. Reverting changes.
Training on augumented user 49747 32/50 current_auc = 0.7330859886512441
User 49747 AUC after training: 0.7324312527280664
User 49747 does not improve AUC. Reverting changes.
Training on augumented user 130218 33/50 current_auc = 0.7330859886512441
User 130218 AUC after training: 0.7317765168048886
User 130218 does not improve AUC. Reverting changes.
Training on augumented user 61565 34/50 current_auc = 0.7330859886512441
User 61565 AUC after training: 0.7324312527280664
User 61565 does not improve AUC. Reverting changes.
Training on augumented user 59173 35/50 current_auc = 0.7330859886512441
User 59173 AUC after training: 0.7333042339589699
User 59173 improves AUC. Keeping the model.
Training on augumented user 32111 36/50 current_auc = 0.7333042339589699
User 32111 AUC after training: 0.7324312527280663
User 32111 does not improve AUC. Reverting changes.
Training on augumented user 93808 37/50 current_auc = 0.7333042339589699
User 93808 AUC after training: 0.7326494980357923
User 93808 does not improve AUC. Reverting changes.
Training on augumented user 43504 38/50 current_auc = 0.7333042339589699
User 43504 AUC after training: 0.7330859886512441
User 43504 does not improve AUC. Reverting changes.
Training on augumented user 71089 39/50 current_auc = 0.7333042339589699
User 71089 AUC after training: 0.7326494980357922
User 71089 does not improve AUC. Reverting changes.
Training on augumented user 79479 40/50 current_auc = 0.7333042339589699
User 79479 AUC after training: 0.7328677433435181
User 79479 does not improve AUC. Reverting changes.
Training on augumented user 71804 41/50 current_auc = 0.7333042339589699
User 71804 AUC after training: 0.7322130074203405
User 71804 does not improve AUC. Reverting changes.
Training on augumented user 76392 42/50 current_auc = 0.7333042339589699
User 76392 AUC after training: 0.7326494980357923
User 76392 does not improve AUC. Reverting changes.
Training on augumented user 117524 43/50 current_auc = 0.7333042339589699
User 117524 AUC after training: 0.7322130074203405
User 117524 does not improve AUC. Reverting changes.
Training on augumented user 137312 44/50 current_auc = 0.7333042339589699
User 137312 AUC after training: 0.7326494980357923
User 137312 does not improve AUC. Reverting changes.
Training on augumented user 136643 45/50 current_auc = 0.7333042339589699
User 136643 AUC after training: 0.7330859886512441
User 136643 does not improve AUC. Reverting changes.
Training on augumented user 58595 46/50 current_auc = 0.7333042339589699
User 58595 AUC after training: 0.7324312527280663
User 58595 does not improve AUC. Reverting changes.
Training on augumented user 2404 47/50 current_auc = 0.7333042339589699
User 2404 AUC after training: 0.7319947621126146
User 2404 does not improve AUC. Reverting changes.
Training on augumented user 84577 48/50 current_auc = 0.7333042339589699
User 84577 AUC after training: 0.7326494980357923
User 84577 does not improve AUC. Reverting changes.
Training on augumented user 17611 49/50 current_auc = 0.7333042339589699
User 17611 AUC after training: 0.7319947621126146
User 17611 does not improve AUC. Reverting changes.
[2024-12-02 17:51:31.780580] start test user 96909 26/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:51:32.176768] start test user 96909 26/567 recall augumented users by random, augumented_users = [656, 52165, 51445, 34088, 101464, 118933, 76697, 84130, 87072, 37797, 88454, 106958, 15887, 54055, 18141, 65062, 62059, 71481, 37690, 12447, 10424, 56836, 68926, 52738, 104695, 91558, 14485, 107032, 10230, 93066, 33424, 52760, 110743, 119114, 132492, 103224, 17165, 23846, 94724, 65382, 63406, 8434, 104374, 37005, 60529, 8682, 56144, 86539, 138010, 114435]
[2024-12-02 17:51:32.191582] user = 96909 Cloud 26/567
[2024-12-02 17:51:32.216933] user = 96909 Local 26/567
[2024-12-02 17:51:32.251077] user = 96909 Local+ 26/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:51:33.942720] user = 96909 MPDA- 26/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6019678714859438
Training on augumented user 656 0/50 current_auc = 0.6019678714859438
User 656 AUC after training: 0.6018875502008032
User 656 does not improve AUC. Reverting changes.
Training on augumented user 52165 1/50 current_auc = 0.6019678714859438
User 52165 AUC after training: 0.6011244979919679
User 52165 does not improve AUC. Reverting changes.
Training on augumented user 51445 2/50 current_auc = 0.6019678714859438
User 51445 AUC after training: 0.6016867469879519
User 51445 does not improve AUC. Reverting changes.
Training on augumented user 34088 3/50 current_auc = 0.6019678714859438
User 34088 AUC after training: 0.602269076305221
User 34088 improves AUC. Keeping the model.
Training on augumented user 101464 4/50 current_auc = 0.602269076305221
User 101464 AUC after training: 0.6022891566265061
User 101464 improves AUC. Keeping the model.
Training on augumented user 118933 5/50 current_auc = 0.6022891566265061
User 118933 AUC after training: 0.6022088353413655
User 118933 does not improve AUC. Reverting changes.
Training on augumented user 76697 6/50 current_auc = 0.6022891566265061
User 76697 AUC after training: 0.602008032128514
User 76697 does not improve AUC. Reverting changes.
Training on augumented user 84130 7/50 current_auc = 0.6022891566265061
User 84130 AUC after training: 0.6021686746987952
User 84130 does not improve AUC. Reverting changes.
Training on augumented user 87072 8/50 current_auc = 0.6022891566265061
User 87072 AUC after training: 0.6026104417670682
User 87072 improves AUC. Keeping the model.
Training on augumented user 37797 9/50 current_auc = 0.6026104417670682
User 37797 AUC after training: 0.6023694779116466
User 37797 does not improve AUC. Reverting changes.
Training on augumented user 88454 10/50 current_auc = 0.6026104417670682
User 88454 AUC after training: 0.6024497991967871
User 88454 does not improve AUC. Reverting changes.
Training on augumented user 106958 11/50 current_auc = 0.6026104417670682
User 106958 AUC after training: 0.6020883534136545
User 106958 does not improve AUC. Reverting changes.
Training on augumented user 15887 12/50 current_auc = 0.6026104417670682
User 15887 AUC after training: 0.6019678714859437
User 15887 does not improve AUC. Reverting changes.
Training on augumented user 54055 13/50 current_auc = 0.6026104417670682
User 54055 AUC after training: 0.6027309236947791
User 54055 improves AUC. Keeping the model.
Training on augumented user 18141 14/50 current_auc = 0.6027309236947791
User 18141 AUC after training: 0.6020481927710842
User 18141 does not improve AUC. Reverting changes.
Training on augumented user 65062 15/50 current_auc = 0.6027309236947791
User 65062 AUC after training: 0.6024096385542169
User 65062 does not improve AUC. Reverting changes.
Training on augumented user 62059 16/50 current_auc = 0.6027309236947791
User 62059 AUC after training: 0.6024497991967871
User 62059 does not improve AUC. Reverting changes.
Training on augumented user 71481 17/50 current_auc = 0.6027309236947791
User 71481 AUC after training: 0.6028915662650602
User 71481 improves AUC. Keeping the model.
Training on augumented user 37690 18/50 current_auc = 0.6028915662650602
User 37690 AUC after training: 0.6022489959839358
User 37690 does not improve AUC. Reverting changes.
Training on augumented user 12447 19/50 current_auc = 0.6028915662650602
User 12447 AUC after training: 0.6018072289156626
User 12447 does not improve AUC. Reverting changes.
Training on augumented user 10424 20/50 current_auc = 0.6028915662650602
User 10424 AUC after training: 0.6031124497991968
User 10424 improves AUC. Keeping the model.
Training on augumented user 56836 21/50 current_auc = 0.6031124497991968
User 56836 AUC after training: 0.6026104417670682
User 56836 does not improve AUC. Reverting changes.
Training on augumented user 68926 22/50 current_auc = 0.6031124497991968
User 68926 AUC after training: 0.6021686746987951
User 68926 does not improve AUC. Reverting changes.
Training on augumented user 52738 23/50 current_auc = 0.6031124497991968
User 52738 AUC after training: 0.6025301204819277
User 52738 does not improve AUC. Reverting changes.
Training on augumented user 104695 24/50 current_auc = 0.6031124497991968
User 104695 AUC after training: 0.6025301204819277
User 104695 does not improve AUC. Reverting changes.
Training on augumented user 91558 25/50 current_auc = 0.6031124497991968
User 91558 AUC after training: 0.6035341365461847
User 91558 improves AUC. Keeping the model.
Training on augumented user 14485 26/50 current_auc = 0.6035341365461847
User 14485 AUC after training: 0.6020080321285141
User 14485 does not improve AUC. Reverting changes.
Training on augumented user 107032 27/50 current_auc = 0.6035341365461847
User 107032 AUC after training: 0.6025301204819277
User 107032 does not improve AUC. Reverting changes.
Training on augumented user 10230 28/50 current_auc = 0.6035341365461847
User 10230 AUC after training: 0.6031726907630521
User 10230 does not improve AUC. Reverting changes.
Training on augumented user 93066 29/50 current_auc = 0.6035341365461847
User 93066 AUC after training: 0.6029518072289157
User 93066 does not improve AUC. Reverting changes.
Training on augumented user 33424 30/50 current_auc = 0.6035341365461847
User 33424 AUC after training: 0.6026907630522088
User 33424 does not improve AUC. Reverting changes.
Training on augumented user 52760 31/50 current_auc = 0.6035341365461847
User 52760 AUC after training: 0.6019477911646586
User 52760 does not improve AUC. Reverting changes.
Training on augumented user 110743 32/50 current_auc = 0.6035341365461847
User 110743 AUC after training: 0.6027510040160642
User 110743 does not improve AUC. Reverting changes.
Training on augumented user 119114 33/50 current_auc = 0.6035341365461847
User 119114 AUC after training: 0.6026506024096385
User 119114 does not improve AUC. Reverting changes.
Training on augumented user 132492 34/50 current_auc = 0.6035341365461847
User 132492 AUC after training: 0.6030120481927711
User 132492 does not improve AUC. Reverting changes.
Training on augumented user 103224 35/50 current_auc = 0.6035341365461847
User 103224 AUC after training: 0.6033333333333333
User 103224 does not improve AUC. Reverting changes.
Training on augumented user 17165 36/50 current_auc = 0.6035341365461847
User 17165 AUC after training: 0.6027309236947791
User 17165 does not improve AUC. Reverting changes.
Training on augumented user 23846 37/50 current_auc = 0.6035341365461847
User 23846 AUC after training: 0.602991967871486
User 23846 does not improve AUC. Reverting changes.
Training on augumented user 94724 38/50 current_auc = 0.6035341365461847
User 94724 AUC after training: 0.6032530120481928
User 94724 does not improve AUC. Reverting changes.
Training on augumented user 65382 39/50 current_auc = 0.6035341365461847
User 65382 AUC after training: 0.6032730923694779
User 65382 does not improve AUC. Reverting changes.
Training on augumented user 63406 40/50 current_auc = 0.6035341365461847
User 63406 AUC after training: 0.6022088353413655
User 63406 does not improve AUC. Reverting changes.
Training on augumented user 8434 41/50 current_auc = 0.6035341365461847
User 8434 AUC after training: 0.6032128514056225
User 8434 does not improve AUC. Reverting changes.
Training on augumented user 104374 42/50 current_auc = 0.6035341365461847
User 104374 AUC after training: 0.6034939759036145
User 104374 does not improve AUC. Reverting changes.
Training on augumented user 37005 43/50 current_auc = 0.6035341365461847
User 37005 AUC after training: 0.6016465863453816
User 37005 does not improve AUC. Reverting changes.
Training on augumented user 60529 44/50 current_auc = 0.6035341365461847
User 60529 AUC after training: 0.6026907630522087
User 60529 does not improve AUC. Reverting changes.
Training on augumented user 8682 45/50 current_auc = 0.6035341365461847
User 8682 AUC after training: 0.6026706827309237
User 8682 does not improve AUC. Reverting changes.
Training on augumented user 56144 46/50 current_auc = 0.6035341365461847
User 56144 AUC after training: 0.6024497991967872
User 56144 does not improve AUC. Reverting changes.
Training on augumented user 86539 47/50 current_auc = 0.6035341365461847
User 86539 AUC after training: 0.6022088353413655
User 86539 does not improve AUC. Reverting changes.
Training on augumented user 138010 48/50 current_auc = 0.6035341365461847
User 138010 AUC after training: 0.6027309236947791
User 138010 does not improve AUC. Reverting changes.
Training on augumented user 114435 49/50 current_auc = 0.6035341365461847
User 114435 AUC after training: 0.6031124497991968
User 114435 does not improve AUC. Reverting changes.
[2024-12-02 17:52:02.330105] start test user 96913 27/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:52:02.917078] start test user 96913 27/567 recall augumented users by random, augumented_users = [23121, 20998, 18246, 64621, 8639, 45926, 68485, 86609, 126875, 65844, 73295, 22219, 46959, 88267, 48099, 6994, 88163, 16515, 6449, 12429, 125940, 38119, 100830, 64798, 76611, 19499, 108894, 20915, 128434, 69710, 107783, 218, 92608, 71547, 68221, 10, 13973, 5963, 45006, 52327, 88388, 63089, 13961, 45538, 105620, 18990, 53432, 9860, 123148, 134]
[2024-12-02 17:52:02.938576] user = 96913 Cloud 27/567
[2024-12-02 17:52:02.948903] user = 96913 Local 27/567
[2024-12-02 17:52:03.037859] user = 96913 Local+ 27/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:52:05.678989] user = 96913 MPDA- 27/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6111111111111112
Training on augumented user 23121 0/50 current_auc = 0.6111111111111112
User 23121 AUC after training: 0.6111111111111112
User 23121 does not improve AUC. Reverting changes.
Training on augumented user 20998 1/50 current_auc = 0.6111111111111112
User 20998 AUC after training: 0.6111111111111112
User 20998 does not improve AUC. Reverting changes.
Training on augumented user 18246 2/50 current_auc = 0.6111111111111112
User 18246 AUC after training: 0.6111111111111112
User 18246 does not improve AUC. Reverting changes.
Training on augumented user 64621 3/50 current_auc = 0.6111111111111112
User 64621 AUC after training: 0.6153846153846154
User 64621 improves AUC. Keeping the model.
Training on augumented user 8639 4/50 current_auc = 0.6153846153846154
User 8639 AUC after training: 0.6153846153846154
User 8639 does not improve AUC. Reverting changes.
Training on augumented user 45926 5/50 current_auc = 0.6153846153846154
User 45926 AUC after training: 0.6196581196581197
User 45926 improves AUC. Keeping the model.
Training on augumented user 68485 6/50 current_auc = 0.6196581196581197
User 68485 AUC after training: 0.6153846153846154
User 68485 does not improve AUC. Reverting changes.
Training on augumented user 86609 7/50 current_auc = 0.6196581196581197
User 86609 AUC after training: 0.6196581196581197
User 86609 does not improve AUC. Reverting changes.
Training on augumented user 126875 8/50 current_auc = 0.6196581196581197
User 126875 AUC after training: 0.6196581196581197
User 126875 does not improve AUC. Reverting changes.
Training on augumented user 65844 9/50 current_auc = 0.6196581196581197
User 65844 AUC after training: 0.6196581196581197
User 65844 does not improve AUC. Reverting changes.
Training on augumented user 73295 10/50 current_auc = 0.6196581196581197
User 73295 AUC after training: 0.6111111111111112
User 73295 does not improve AUC. Reverting changes.
Training on augumented user 22219 11/50 current_auc = 0.6196581196581197
User 22219 AUC after training: 0.6111111111111112
User 22219 does not improve AUC. Reverting changes.
Training on augumented user 46959 12/50 current_auc = 0.6196581196581197
User 46959 AUC after training: 0.6196581196581197
User 46959 does not improve AUC. Reverting changes.
Training on augumented user 88267 13/50 current_auc = 0.6196581196581197
User 88267 AUC after training: 0.6196581196581197
User 88267 does not improve AUC. Reverting changes.
Training on augumented user 48099 14/50 current_auc = 0.6196581196581197
User 48099 AUC after training: 0.6153846153846154
User 48099 does not improve AUC. Reverting changes.
Training on augumented user 6994 15/50 current_auc = 0.6196581196581197
User 6994 AUC after training: 0.6196581196581197
User 6994 does not improve AUC. Reverting changes.
Training on augumented user 88163 16/50 current_auc = 0.6196581196581197
User 88163 AUC after training: 0.6196581196581197
User 88163 does not improve AUC. Reverting changes.
Training on augumented user 16515 17/50 current_auc = 0.6196581196581197
User 16515 AUC after training: 0.6196581196581197
User 16515 does not improve AUC. Reverting changes.
Training on augumented user 6449 18/50 current_auc = 0.6196581196581197
User 6449 AUC after training: 0.6111111111111112
User 6449 does not improve AUC. Reverting changes.
Training on augumented user 12429 19/50 current_auc = 0.6196581196581197
User 12429 AUC after training: 0.6196581196581197
User 12429 does not improve AUC. Reverting changes.
Training on augumented user 125940 20/50 current_auc = 0.6196581196581197
User 125940 AUC after training: 0.6111111111111112
User 125940 does not improve AUC. Reverting changes.
Training on augumented user 38119 21/50 current_auc = 0.6196581196581197
User 38119 AUC after training: 0.5982905982905983
User 38119 does not improve AUC. Reverting changes.
Training on augumented user 100830 22/50 current_auc = 0.6196581196581197
User 100830 AUC after training: 0.6153846153846154
User 100830 does not improve AUC. Reverting changes.
Training on augumented user 64798 23/50 current_auc = 0.6196581196581197
User 64798 AUC after training: 0.6196581196581197
User 64798 does not improve AUC. Reverting changes.
Training on augumented user 76611 24/50 current_auc = 0.6196581196581197
User 76611 AUC after training: 0.6196581196581197
User 76611 does not improve AUC. Reverting changes.
Training on augumented user 19499 25/50 current_auc = 0.6196581196581197
User 19499 AUC after training: 0.6153846153846154
User 19499 does not improve AUC. Reverting changes.
Training on augumented user 108894 26/50 current_auc = 0.6196581196581197
User 108894 AUC after training: 0.6196581196581197
User 108894 does not improve AUC. Reverting changes.
Training on augumented user 20915 27/50 current_auc = 0.6196581196581197
User 20915 AUC after training: 0.6196581196581197
User 20915 does not improve AUC. Reverting changes.
Training on augumented user 128434 28/50 current_auc = 0.6196581196581197
User 128434 AUC after training: 0.6196581196581197
User 128434 does not improve AUC. Reverting changes.
Training on augumented user 69710 29/50 current_auc = 0.6196581196581197
User 69710 AUC after training: 0.6196581196581197
User 69710 does not improve AUC. Reverting changes.
Training on augumented user 107783 30/50 current_auc = 0.6196581196581197
User 107783 AUC after training: 0.6196581196581197
User 107783 does not improve AUC. Reverting changes.
Training on augumented user 218 31/50 current_auc = 0.6196581196581197
User 218 AUC after training: 0.6153846153846154
User 218 does not improve AUC. Reverting changes.
Training on augumented user 92608 32/50 current_auc = 0.6196581196581197
User 92608 AUC after training: 0.6153846153846154
User 92608 does not improve AUC. Reverting changes.
Training on augumented user 71547 33/50 current_auc = 0.6196581196581197
User 71547 AUC after training: 0.6239316239316239
User 71547 improves AUC. Keeping the model.
Training on augumented user 68221 34/50 current_auc = 0.6239316239316239
User 68221 AUC after training: 0.6196581196581197
User 68221 does not improve AUC. Reverting changes.
Training on augumented user 10 35/50 current_auc = 0.6239316239316239
User 10 AUC after training: 0.6239316239316239
User 10 does not improve AUC. Reverting changes.
Training on augumented user 13973 36/50 current_auc = 0.6239316239316239
User 13973 AUC after training: 0.6196581196581197
User 13973 does not improve AUC. Reverting changes.
Training on augumented user 5963 37/50 current_auc = 0.6239316239316239
User 5963 AUC after training: 0.6239316239316239
User 5963 does not improve AUC. Reverting changes.
Training on augumented user 45006 38/50 current_auc = 0.6239316239316239
User 45006 AUC after training: 0.6239316239316239
User 45006 does not improve AUC. Reverting changes.
Training on augumented user 52327 39/50 current_auc = 0.6239316239316239
User 52327 AUC after training: 0.6239316239316239
User 52327 does not improve AUC. Reverting changes.
Training on augumented user 88388 40/50 current_auc = 0.6239316239316239
User 88388 AUC after training: 0.6239316239316239
User 88388 does not improve AUC. Reverting changes.
Training on augumented user 63089 41/50 current_auc = 0.6239316239316239
User 63089 AUC after training: 0.6196581196581197
User 63089 does not improve AUC. Reverting changes.
Training on augumented user 13961 42/50 current_auc = 0.6239316239316239
User 13961 AUC after training: 0.6239316239316239
User 13961 does not improve AUC. Reverting changes.
Training on augumented user 45538 43/50 current_auc = 0.6239316239316239
User 45538 AUC after training: 0.6239316239316239
User 45538 does not improve AUC. Reverting changes.
Training on augumented user 105620 44/50 current_auc = 0.6239316239316239
User 105620 AUC after training: 0.6239316239316239
User 105620 does not improve AUC. Reverting changes.
Training on augumented user 18990 45/50 current_auc = 0.6239316239316239
User 18990 AUC after training: 0.6239316239316239
User 18990 does not improve AUC. Reverting changes.
Training on augumented user 53432 46/50 current_auc = 0.6239316239316239
User 53432 AUC after training: 0.6239316239316239
User 53432 does not improve AUC. Reverting changes.
Training on augumented user 9860 47/50 current_auc = 0.6239316239316239
User 9860 AUC after training: 0.6239316239316239
User 9860 does not improve AUC. Reverting changes.
Training on augumented user 123148 48/50 current_auc = 0.6239316239316239
User 123148 AUC after training: 0.6111111111111112
User 123148 does not improve AUC. Reverting changes.
Training on augumented user 134 49/50 current_auc = 0.6239316239316239
User 134 AUC after training: 0.6196581196581197
User 134 does not improve AUC. Reverting changes.
[2024-12-02 17:52:33.861891] start test user 96952 28/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:52:34.900003] start test user 96952 28/567 recall augumented users by random, augumented_users = [103510, 56188, 30320, 129400, 63132, 44295, 40072, 126248, 92675, 96023, 45828, 122182, 65007, 33777, 106047, 1744, 13312, 69810, 36237, 67000, 21453, 129376, 120453, 80141, 36598, 65195, 114795, 101042, 125022, 28797, 28974, 23371, 83367, 111177, 53865, 128472, 71364, 18384, 85331, 114394, 73356, 77912, 111475, 44155, 59944, 63586, 12786, 28128, 23524, 135494]
[2024-12-02 17:52:34.952540] user = 96952 Cloud 28/567
[2024-12-02 17:52:34.977898] user = 96952 Local 28/567
[2024-12-02 17:52:35.272242] user = 96952 Local+ 28/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:52:37.722076] user = 96952 MPDA- 28/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7930352196280173
Training on augumented user 103510 0/50 current_auc = 0.7930352196280173
User 103510 AUC after training: 0.7932990370663501
User 103510 improves AUC. Keeping the model.
Training on augumented user 56188 1/50 current_auc = 0.7932990370663501
User 56188 AUC after training: 0.7923756760321857
User 56188 does not improve AUC. Reverting changes.
Training on augumented user 30320 2/50 current_auc = 0.7932990370663501
User 30320 AUC after training: 0.7935628545046827
User 30320 improves AUC. Keeping the model.
Training on augumented user 129400 3/50 current_auc = 0.7935628545046827
User 129400 AUC after training: 0.7934309457855164
User 129400 does not improve AUC. Reverting changes.
Training on augumented user 63132 4/50 current_auc = 0.7935628545046827
User 63132 AUC after training: 0.7907927714021897
User 63132 does not improve AUC. Reverting changes.
Training on augumented user 44295 5/50 current_auc = 0.7935628545046827
User 44295 AUC after training: 0.7942223981005143
User 44295 improves AUC. Keeping the model.
Training on augumented user 40072 6/50 current_auc = 0.7942223981005143
User 40072 AUC after training: 0.7938266719430153
User 40072 does not improve AUC. Reverting changes.
Training on augumented user 126248 7/50 current_auc = 0.7942223981005143
User 126248 AUC after training: 0.7940904893813481
User 126248 does not improve AUC. Reverting changes.
Training on augumented user 92675 8/50 current_auc = 0.7942223981005143
User 92675 AUC after training: 0.7944862155388471
User 92675 improves AUC. Keeping the model.
Training on augumented user 96023 9/50 current_auc = 0.7944862155388471
User 96023 AUC after training: 0.7942223981005144
User 96023 does not improve AUC. Reverting changes.
Training on augumented user 45828 10/50 current_auc = 0.7944862155388471
User 45828 AUC after training: 0.7942223981005143
User 45828 does not improve AUC. Reverting changes.
Training on augumented user 122182 11/50 current_auc = 0.7944862155388471
User 122182 AUC after training: 0.7940904893813481
User 122182 does not improve AUC. Reverting changes.
Training on augumented user 65007 12/50 current_auc = 0.7944862155388471
User 65007 AUC after training: 0.7943543068196808
User 65007 does not improve AUC. Reverting changes.
Training on augumented user 33777 13/50 current_auc = 0.7944862155388471
User 33777 AUC after training: 0.7948819416963461
User 33777 improves AUC. Keeping the model.
Training on augumented user 106047 14/50 current_auc = 0.7948819416963461
User 106047 AUC after training: 0.7938266719430154
User 106047 does not improve AUC. Reverting changes.
Training on augumented user 1744 15/50 current_auc = 0.7948819416963461
User 1744 AUC after training: 0.7944862155388471
User 1744 does not improve AUC. Reverting changes.
Training on augumented user 13312 16/50 current_auc = 0.7948819416963461
User 13312 AUC after training: 0.7948819416963461
User 13312 does not improve AUC. Reverting changes.
Training on augumented user 69810 17/50 current_auc = 0.7948819416963461
User 69810 AUC after training: 0.7944862155388471
User 69810 does not improve AUC. Reverting changes.
Training on augumented user 36237 18/50 current_auc = 0.7948819416963461
User 36237 AUC after training: 0.7929033109088511
User 36237 does not improve AUC. Reverting changes.
Training on augumented user 67000 19/50 current_auc = 0.7948819416963461
User 67000 AUC after training: 0.7942223981005144
User 67000 does not improve AUC. Reverting changes.
Training on augumented user 21453 20/50 current_auc = 0.7948819416963461
User 21453 AUC after training: 0.794486215538847
User 21453 does not improve AUC. Reverting changes.
Training on augumented user 129376 21/50 current_auc = 0.7948819416963461
User 129376 AUC after training: 0.7946181242580135
User 129376 does not improve AUC. Reverting changes.
Training on augumented user 120453 22/50 current_auc = 0.7948819416963461
User 120453 AUC after training: 0.7943543068196808
User 120453 does not improve AUC. Reverting changes.
Training on augumented user 80141 23/50 current_auc = 0.7948819416963461
User 80141 AUC after training: 0.7914523149980213
User 80141 does not improve AUC. Reverting changes.
Training on augumented user 36598 24/50 current_auc = 0.7948819416963461
User 36598 AUC after training: 0.7942223981005144
User 36598 does not improve AUC. Reverting changes.
Training on augumented user 65195 25/50 current_auc = 0.7948819416963461
User 65195 AUC after training: 0.7943543068196808
User 65195 does not improve AUC. Reverting changes.
Training on augumented user 114795 26/50 current_auc = 0.7948819416963461
User 114795 AUC after training: 0.7944862155388471
User 114795 does not improve AUC. Reverting changes.
Training on augumented user 101042 27/50 current_auc = 0.7948819416963461
User 101042 AUC after training: 0.7947500329771797
User 101042 does not improve AUC. Reverting changes.
Training on augumented user 125022 28/50 current_auc = 0.7948819416963461
User 125022 AUC after training: 0.7918480411555203
User 125022 does not improve AUC. Reverting changes.
Training on augumented user 28797 29/50 current_auc = 0.7948819416963461
User 28797 AUC after training: 0.7936947632238489
User 28797 does not improve AUC. Reverting changes.
Training on augumented user 28974 30/50 current_auc = 0.7948819416963461
User 28974 AUC after training: 0.7934309457855164
User 28974 does not improve AUC. Reverting changes.
Training on augumented user 23371 31/50 current_auc = 0.7948819416963461
User 23371 AUC after training: 0.7934309457855163
User 23371 does not improve AUC. Reverting changes.
Training on augumented user 83367 32/50 current_auc = 0.7948819416963461
User 83367 AUC after training: 0.7942223981005144
User 83367 does not improve AUC. Reverting changes.
Training on augumented user 111177 33/50 current_auc = 0.7948819416963461
User 111177 AUC after training: 0.7934309457855163
User 111177 does not improve AUC. Reverting changes.
Training on augumented user 53865 34/50 current_auc = 0.7948819416963461
User 53865 AUC after training: 0.7946181242580135
User 53865 does not improve AUC. Reverting changes.
Training on augumented user 128472 35/50 current_auc = 0.7948819416963461
User 128472 AUC after training: 0.7947500329771798
User 128472 does not improve AUC. Reverting changes.
Training on augumented user 71364 36/50 current_auc = 0.7948819416963461
User 71364 AUC after training: 0.7942223981005144
User 71364 does not improve AUC. Reverting changes.
Training on augumented user 18384 37/50 current_auc = 0.7948819416963461
User 18384 AUC after training: 0.7927714021896848
User 18384 does not improve AUC. Reverting changes.
Training on augumented user 85331 38/50 current_auc = 0.7948819416963461
User 85331 AUC after training: 0.7940904893813481
User 85331 does not improve AUC. Reverting changes.
Training on augumented user 114394 39/50 current_auc = 0.7948819416963461
User 114394 AUC after training: 0.7938266719430155
User 114394 does not improve AUC. Reverting changes.
Training on augumented user 73356 40/50 current_auc = 0.7948819416963461
User 73356 AUC after training: 0.7935628545046827
User 73356 does not improve AUC. Reverting changes.
Training on augumented user 77912 41/50 current_auc = 0.7948819416963461
User 77912 AUC after training: 0.7938266719430154
User 77912 does not improve AUC. Reverting changes.
Training on augumented user 111475 42/50 current_auc = 0.7948819416963461
User 111475 AUC after training: 0.7947500329771797
User 111475 does not improve AUC. Reverting changes.
Training on augumented user 44155 43/50 current_auc = 0.7948819416963461
User 44155 AUC after training: 0.7947500329771797
User 44155 does not improve AUC. Reverting changes.
Training on augumented user 59944 44/50 current_auc = 0.7948819416963461
User 59944 AUC after training: 0.7942223981005144
User 59944 does not improve AUC. Reverting changes.
Training on augumented user 63586 45/50 current_auc = 0.7948819416963461
User 63586 AUC after training: 0.7942223981005144
User 63586 does not improve AUC. Reverting changes.
Training on augumented user 12786 46/50 current_auc = 0.7948819416963461
User 12786 AUC after training: 0.7943543068196808
User 12786 does not improve AUC. Reverting changes.
Training on augumented user 28128 47/50 current_auc = 0.7948819416963461
User 28128 AUC after training: 0.794486215538847
User 28128 does not improve AUC. Reverting changes.
Training on augumented user 23524 48/50 current_auc = 0.7948819416963461
User 23524 AUC after training: 0.7944862155388472
User 23524 does not improve AUC. Reverting changes.
Training on augumented user 135494 49/50 current_auc = 0.7948819416963461
User 135494 AUC after training: 0.794486215538847
User 135494 does not improve AUC. Reverting changes.
[2024-12-02 17:53:04.950501] start test user 96966 29/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:53:05.660083] start test user 96966 29/567 recall augumented users by random, augumented_users = [113219, 110975, 8199, 7453, 14634, 85119, 33070, 9718, 91873, 40451, 131607, 21547, 97766, 52794, 39725, 86571, 96508, 75542, 84103, 93637, 37039, 50954, 131708, 102231, 77706, 1477, 50922, 44826, 56472, 63177, 47518, 25039, 25519, 34753, 128413, 11687, 45182, 65279, 122134, 95887, 56043, 52550, 59678, 131286, 111845, 45221, 93127, 62738, 13662, 82606]
[2024-12-02 17:53:05.678406] user = 96966 Cloud 29/567
[2024-12-02 17:53:05.688833] user = 96966 Local 29/567
[2024-12-02 17:53:05.758478] user = 96966 Local+ 29/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:53:07.424837] user = 96966 MPDA- 29/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.71869918699187
Training on augumented user 113219 0/50 current_auc = 0.71869918699187
User 113219 AUC after training: 0.71869918699187
User 113219 does not improve AUC. Reverting changes.
Training on augumented user 110975 1/50 current_auc = 0.71869918699187
User 110975 AUC after training: 0.7203252032520325
User 110975 improves AUC. Keeping the model.
Training on augumented user 8199 2/50 current_auc = 0.7203252032520325
User 8199 AUC after training: 0.7235772357723577
User 8199 improves AUC. Keeping the model.
Training on augumented user 7453 3/50 current_auc = 0.7235772357723577
User 7453 AUC after training: 0.7235772357723577
User 7453 does not improve AUC. Reverting changes.
Training on augumented user 14634 4/50 current_auc = 0.7235772357723577
User 14634 AUC after training: 0.7219512195121952
User 14634 does not improve AUC. Reverting changes.
Training on augumented user 85119 5/50 current_auc = 0.7235772357723577
User 85119 AUC after training: 0.7235772357723578
User 85119 improves AUC. Keeping the model.
Training on augumented user 33070 6/50 current_auc = 0.7235772357723578
User 33070 AUC after training: 0.7203252032520325
User 33070 does not improve AUC. Reverting changes.
Training on augumented user 9718 7/50 current_auc = 0.7235772357723578
User 9718 AUC after training: 0.7203252032520326
User 9718 does not improve AUC. Reverting changes.
Training on augumented user 91873 8/50 current_auc = 0.7235772357723578
User 91873 AUC after training: 0.7235772357723578
User 91873 does not improve AUC. Reverting changes.
Training on augumented user 40451 9/50 current_auc = 0.7235772357723578
User 40451 AUC after training: 0.7203252032520325
User 40451 does not improve AUC. Reverting changes.
Training on augumented user 131607 10/50 current_auc = 0.7235772357723578
User 131607 AUC after training: 0.7284552845528456
User 131607 improves AUC. Keeping the model.
Training on augumented user 21547 11/50 current_auc = 0.7284552845528456
User 21547 AUC after training: 0.7284552845528456
User 21547 does not improve AUC. Reverting changes.
Training on augumented user 97766 12/50 current_auc = 0.7284552845528456
User 97766 AUC after training: 0.7300813008130081
User 97766 improves AUC. Keeping the model.
Training on augumented user 52794 13/50 current_auc = 0.7300813008130081
User 52794 AUC after training: 0.7284552845528456
User 52794 does not improve AUC. Reverting changes.
Training on augumented user 39725 14/50 current_auc = 0.7300813008130081
User 39725 AUC after training: 0.7300813008130081
User 39725 does not improve AUC. Reverting changes.
Training on augumented user 86571 15/50 current_auc = 0.7300813008130081
User 86571 AUC after training: 0.726829268292683
User 86571 does not improve AUC. Reverting changes.
Training on augumented user 96508 16/50 current_auc = 0.7300813008130081
User 96508 AUC after training: 0.7300813008130081
User 96508 does not improve AUC. Reverting changes.
Training on augumented user 75542 17/50 current_auc = 0.7300813008130081
User 75542 AUC after training: 0.7300813008130081
User 75542 does not improve AUC. Reverting changes.
Training on augumented user 84103 18/50 current_auc = 0.7300813008130081
User 84103 AUC after training: 0.7300813008130081
User 84103 does not improve AUC. Reverting changes.
Training on augumented user 93637 19/50 current_auc = 0.7300813008130081
User 93637 AUC after training: 0.7268292682926829
User 93637 does not improve AUC. Reverting changes.
Training on augumented user 37039 20/50 current_auc = 0.7300813008130081
User 37039 AUC after training: 0.7300813008130081
User 37039 does not improve AUC. Reverting changes.
Training on augumented user 50954 21/50 current_auc = 0.7300813008130081
User 50954 AUC after training: 0.7284552845528456
User 50954 does not improve AUC. Reverting changes.
Training on augumented user 131708 22/50 current_auc = 0.7300813008130081
User 131708 AUC after training: 0.7284552845528456
User 131708 does not improve AUC. Reverting changes.
Training on augumented user 102231 23/50 current_auc = 0.7300813008130081
User 102231 AUC after training: 0.7284552845528456
User 102231 does not improve AUC. Reverting changes.
Training on augumented user 77706 24/50 current_auc = 0.7300813008130081
User 77706 AUC after training: 0.7268292682926829
User 77706 does not improve AUC. Reverting changes.
Training on augumented user 1477 25/50 current_auc = 0.7300813008130081
User 1477 AUC after training: 0.7300813008130081
User 1477 does not improve AUC. Reverting changes.
Training on augumented user 50922 26/50 current_auc = 0.7300813008130081
User 50922 AUC after training: 0.7300813008130081
User 50922 does not improve AUC. Reverting changes.
Training on augumented user 44826 27/50 current_auc = 0.7300813008130081
User 44826 AUC after training: 0.7333333333333334
User 44826 improves AUC. Keeping the model.
Training on augumented user 56472 28/50 current_auc = 0.7333333333333334
User 56472 AUC after training: 0.7333333333333334
User 56472 does not improve AUC. Reverting changes.
Training on augumented user 63177 29/50 current_auc = 0.7333333333333334
User 63177 AUC after training: 0.7284552845528456
User 63177 does not improve AUC. Reverting changes.
Training on augumented user 47518 30/50 current_auc = 0.7333333333333334
User 47518 AUC after training: 0.726829268292683
User 47518 does not improve AUC. Reverting changes.
Training on augumented user 25039 31/50 current_auc = 0.7333333333333334
User 25039 AUC after training: 0.7300813008130081
User 25039 does not improve AUC. Reverting changes.
Training on augumented user 25519 32/50 current_auc = 0.7333333333333334
User 25519 AUC after training: 0.7284552845528456
User 25519 does not improve AUC. Reverting changes.
Training on augumented user 34753 33/50 current_auc = 0.7333333333333334
User 34753 AUC after training: 0.7317073170731708
User 34753 does not improve AUC. Reverting changes.
Training on augumented user 128413 34/50 current_auc = 0.7333333333333334
User 128413 AUC after training: 0.7300813008130081
User 128413 does not improve AUC. Reverting changes.
Training on augumented user 11687 35/50 current_auc = 0.7333333333333334
User 11687 AUC after training: 0.7252032520325203
User 11687 does not improve AUC. Reverting changes.
Training on augumented user 45182 36/50 current_auc = 0.7333333333333334
User 45182 AUC after training: 0.726829268292683
User 45182 does not improve AUC. Reverting changes.
Training on augumented user 65279 37/50 current_auc = 0.7333333333333334
User 65279 AUC after training: 0.7284552845528456
User 65279 does not improve AUC. Reverting changes.
Training on augumented user 122134 38/50 current_auc = 0.7333333333333334
User 122134 AUC after training: 0.7243902439024391
User 122134 does not improve AUC. Reverting changes.
Training on augumented user 95887 39/50 current_auc = 0.7333333333333334
User 95887 AUC after training: 0.7284552845528456
User 95887 does not improve AUC. Reverting changes.
Training on augumented user 56043 40/50 current_auc = 0.7333333333333334
User 56043 AUC after training: 0.7235772357723578
User 56043 does not improve AUC. Reverting changes.
Training on augumented user 52550 41/50 current_auc = 0.7333333333333334
User 52550 AUC after training: 0.7252032520325203
User 52550 does not improve AUC. Reverting changes.
Training on augumented user 59678 42/50 current_auc = 0.7333333333333334
User 59678 AUC after training: 0.7300813008130081
User 59678 does not improve AUC. Reverting changes.
Training on augumented user 131286 43/50 current_auc = 0.7333333333333334
User 131286 AUC after training: 0.7300813008130081
User 131286 does not improve AUC. Reverting changes.
Training on augumented user 111845 44/50 current_auc = 0.7333333333333334
User 111845 AUC after training: 0.7333333333333334
User 111845 does not improve AUC. Reverting changes.
Training on augumented user 45221 45/50 current_auc = 0.7333333333333334
User 45221 AUC after training: 0.7284552845528456
User 45221 does not improve AUC. Reverting changes.
Training on augumented user 93127 46/50 current_auc = 0.7333333333333334
User 93127 AUC after training: 0.7235772357723578
User 93127 does not improve AUC. Reverting changes.
Training on augumented user 62738 47/50 current_auc = 0.7333333333333334
User 62738 AUC after training: 0.7300813008130081
User 62738 does not improve AUC. Reverting changes.
Training on augumented user 13662 48/50 current_auc = 0.7333333333333334
User 13662 AUC after training: 0.7268292682926829
User 13662 does not improve AUC. Reverting changes.
Training on augumented user 82606 49/50 current_auc = 0.7333333333333334
User 82606 AUC after training: 0.7300813008130081
User 82606 does not improve AUC. Reverting changes.
[2024-12-02 17:53:34.896833] start test user 97010 30/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:53:35.308228] start test user 97010 30/567 recall augumented users by random, augumented_users = [7544, 135008, 76211, 105122, 68393, 90182, 7520, 129666, 80533, 40257, 117554, 71918, 116559, 129952, 63884, 100701, 55408, 109824, 109568, 133486, 135489, 1547, 6757, 100724, 25301, 5734, 89164, 17949, 74953, 6282, 107374, 62029, 23898, 93107, 118211, 73237, 128355, 9746, 134264, 62074, 53230, 64425, 123591, 73767, 90892, 69640, 20176, 8784, 46354, 70320]
[2024-12-02 17:53:35.323151] user = 97010 Cloud 30/567
[2024-12-02 17:53:35.333415] user = 97010 Local 30/567
[2024-12-02 17:53:35.398998] user = 97010 Local+ 30/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:53:37.667917] user = 97010 MPDA- 30/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.2
Training on augumented user 7544 0/50 current_auc = 0.2
User 7544 AUC after training: 0.2
User 7544 does not improve AUC. Reverting changes.
Training on augumented user 135008 1/50 current_auc = 0.2
User 135008 AUC after training: 0.2
User 135008 does not improve AUC. Reverting changes.
Training on augumented user 76211 2/50 current_auc = 0.2
User 76211 AUC after training: 0.2
User 76211 does not improve AUC. Reverting changes.
Training on augumented user 105122 3/50 current_auc = 0.2
User 105122 AUC after training: 0.2
User 105122 does not improve AUC. Reverting changes.
Training on augumented user 68393 4/50 current_auc = 0.2
User 68393 AUC after training: 0.2
User 68393 does not improve AUC. Reverting changes.
Training on augumented user 90182 5/50 current_auc = 0.2
User 90182 AUC after training: 0.2
User 90182 does not improve AUC. Reverting changes.
Training on augumented user 7520 6/50 current_auc = 0.2
User 7520 AUC after training: 0.2
User 7520 does not improve AUC. Reverting changes.
Training on augumented user 129666 7/50 current_auc = 0.2
User 129666 AUC after training: 0.2
User 129666 does not improve AUC. Reverting changes.
Training on augumented user 80533 8/50 current_auc = 0.2
User 80533 AUC after training: 0.2
User 80533 does not improve AUC. Reverting changes.
Training on augumented user 40257 9/50 current_auc = 0.2
User 40257 AUC after training: 0.2
User 40257 does not improve AUC. Reverting changes.
Training on augumented user 117554 10/50 current_auc = 0.2
User 117554 AUC after training: 0.2
User 117554 does not improve AUC. Reverting changes.
Training on augumented user 71918 11/50 current_auc = 0.2
User 71918 AUC after training: 0.2
User 71918 does not improve AUC. Reverting changes.
Training on augumented user 116559 12/50 current_auc = 0.2
User 116559 AUC after training: 0.2
User 116559 does not improve AUC. Reverting changes.
Training on augumented user 129952 13/50 current_auc = 0.2
User 129952 AUC after training: 0.2
User 129952 does not improve AUC. Reverting changes.
Training on augumented user 63884 14/50 current_auc = 0.2
User 63884 AUC after training: 0.2
User 63884 does not improve AUC. Reverting changes.
Training on augumented user 100701 15/50 current_auc = 0.2
User 100701 AUC after training: 0.2
User 100701 does not improve AUC. Reverting changes.
Training on augumented user 55408 16/50 current_auc = 0.2
User 55408 AUC after training: 0.2
User 55408 does not improve AUC. Reverting changes.
Training on augumented user 109824 17/50 current_auc = 0.2
User 109824 AUC after training: 0.2
User 109824 does not improve AUC. Reverting changes.
Training on augumented user 109568 18/50 current_auc = 0.2
User 109568 AUC after training: 0.2
User 109568 does not improve AUC. Reverting changes.
Training on augumented user 133486 19/50 current_auc = 0.2
User 133486 AUC after training: 0.2
User 133486 does not improve AUC. Reverting changes.
Training on augumented user 135489 20/50 current_auc = 0.2
User 135489 AUC after training: 0.2
User 135489 does not improve AUC. Reverting changes.
Training on augumented user 1547 21/50 current_auc = 0.2
User 1547 AUC after training: 0.2
User 1547 does not improve AUC. Reverting changes.
Training on augumented user 6757 22/50 current_auc = 0.2
User 6757 AUC after training: 0.2
User 6757 does not improve AUC. Reverting changes.
Training on augumented user 100724 23/50 current_auc = 0.2
User 100724 AUC after training: 0.2
User 100724 does not improve AUC. Reverting changes.
Training on augumented user 25301 24/50 current_auc = 0.2
User 25301 AUC after training: 0.2
User 25301 does not improve AUC. Reverting changes.
Training on augumented user 5734 25/50 current_auc = 0.2
User 5734 AUC after training: 0.2
User 5734 does not improve AUC. Reverting changes.
Training on augumented user 89164 26/50 current_auc = 0.2
User 89164 AUC after training: 0.2
User 89164 does not improve AUC. Reverting changes.
Training on augumented user 17949 27/50 current_auc = 0.2
User 17949 AUC after training: 0.2
User 17949 does not improve AUC. Reverting changes.
Training on augumented user 74953 28/50 current_auc = 0.2
User 74953 AUC after training: 0.2
User 74953 does not improve AUC. Reverting changes.
Training on augumented user 6282 29/50 current_auc = 0.2
User 6282 AUC after training: 0.2
User 6282 does not improve AUC. Reverting changes.
Training on augumented user 107374 30/50 current_auc = 0.2
User 107374 AUC after training: 0.2
User 107374 does not improve AUC. Reverting changes.
Training on augumented user 62029 31/50 current_auc = 0.2
User 62029 AUC after training: 0.2
User 62029 does not improve AUC. Reverting changes.
Training on augumented user 23898 32/50 current_auc = 0.2
User 23898 AUC after training: 0.2
User 23898 does not improve AUC. Reverting changes.
Training on augumented user 93107 33/50 current_auc = 0.2
User 93107 AUC after training: 0.2
User 93107 does not improve AUC. Reverting changes.
Training on augumented user 118211 34/50 current_auc = 0.2
User 118211 AUC after training: 0.2
User 118211 does not improve AUC. Reverting changes.
Training on augumented user 73237 35/50 current_auc = 0.2
User 73237 AUC after training: 0.2
User 73237 does not improve AUC. Reverting changes.
Training on augumented user 128355 36/50 current_auc = 0.2
User 128355 AUC after training: 0.2
User 128355 does not improve AUC. Reverting changes.
Training on augumented user 9746 37/50 current_auc = 0.2
User 9746 AUC after training: 0.2
User 9746 does not improve AUC. Reverting changes.
Training on augumented user 134264 38/50 current_auc = 0.2
User 134264 AUC after training: 0.2
User 134264 does not improve AUC. Reverting changes.
Training on augumented user 62074 39/50 current_auc = 0.2
User 62074 AUC after training: 0.2
User 62074 does not improve AUC. Reverting changes.
Training on augumented user 53230 40/50 current_auc = 0.2
User 53230 AUC after training: 0.2
User 53230 does not improve AUC. Reverting changes.
Training on augumented user 64425 41/50 current_auc = 0.2
User 64425 AUC after training: 0.2
User 64425 does not improve AUC. Reverting changes.
Training on augumented user 123591 42/50 current_auc = 0.2
User 123591 AUC after training: 0.2
User 123591 does not improve AUC. Reverting changes.
Training on augumented user 73767 43/50 current_auc = 0.2
User 73767 AUC after training: 0.2
User 73767 does not improve AUC. Reverting changes.
Training on augumented user 90892 44/50 current_auc = 0.2
User 90892 AUC after training: 0.2
User 90892 does not improve AUC. Reverting changes.
Training on augumented user 69640 45/50 current_auc = 0.2
User 69640 AUC after training: 0.2
User 69640 does not improve AUC. Reverting changes.
Training on augumented user 20176 46/50 current_auc = 0.2
User 20176 AUC after training: 0.2
User 20176 does not improve AUC. Reverting changes.
Training on augumented user 8784 47/50 current_auc = 0.2
User 8784 AUC after training: 0.2
User 8784 does not improve AUC. Reverting changes.
Training on augumented user 46354 48/50 current_auc = 0.2
User 46354 AUC after training: 0.2
User 46354 does not improve AUC. Reverting changes.
Training on augumented user 70320 49/50 current_auc = 0.2
User 70320 AUC after training: 0.2
User 70320 does not improve AUC. Reverting changes.
[2024-12-02 17:54:03.916401] start test user 97112 31/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:54:04.458227] start test user 97112 31/567 recall augumented users by random, augumented_users = [23619, 78055, 121394, 84685, 69210, 137864, 114431, 51356, 95036, 357, 28946, 136910, 19664, 49460, 19271, 101841, 135480, 12063, 92882, 100524, 90387, 129781, 5206, 101966, 107587, 119613, 123032, 47587, 110839, 46134, 137154, 83718, 51263, 78130, 87873, 82230, 47264, 105156, 19351, 24708, 47855, 38116, 98616, 108391, 105325, 78834, 47151, 134514, 96867, 63575]
[2024-12-02 17:54:04.473764] user = 97112 Cloud 31/567
[2024-12-02 17:54:04.511558] user = 97112 Local 31/567
[2024-12-02 17:54:04.614944] user = 97112 Local+ 31/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:54:07.051173] user = 97112 MPDA- 31/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6479455584707645
Training on augumented user 23619 0/50 current_auc = 0.6479455584707645
User 23619 AUC after training: 0.648015835832084
User 23619 improves AUC. Keeping the model.
Training on augumented user 78055 1/50 current_auc = 0.648015835832084
User 78055 AUC after training: 0.6473013493253374
User 78055 does not improve AUC. Reverting changes.
Training on augumented user 121394 2/50 current_auc = 0.648015835832084
User 121394 AUC after training: 0.6480978260869565
User 121394 improves AUC. Keeping the model.
Training on augumented user 84685 3/50 current_auc = 0.6480978260869565
User 84685 AUC after training: 0.6478869940029985
User 84685 does not improve AUC. Reverting changes.
Training on augumented user 69210 4/50 current_auc = 0.6480978260869565
User 69210 AUC after training: 0.6478987068965518
User 69210 does not improve AUC. Reverting changes.
Training on augumented user 137864 5/50 current_auc = 0.6480978260869565
User 137864 AUC after training: 0.6478401424287856
User 137864 does not improve AUC. Reverting changes.
Training on augumented user 114431 6/50 current_auc = 0.6480978260869565
User 114431 AUC after training: 0.6479338455772115
User 114431 does not improve AUC. Reverting changes.
Training on augumented user 51356 7/50 current_auc = 0.6480978260869565
User 51356 AUC after training: 0.6478869940029984
User 51356 does not improve AUC. Reverting changes.
Training on augumented user 95036 8/50 current_auc = 0.6480978260869565
User 95036 AUC after training: 0.6476293103448275
User 95036 does not improve AUC. Reverting changes.
Training on augumented user 357 9/50 current_auc = 0.6480978260869565
User 357 AUC after training: 0.6477464392803598
User 357 does not improve AUC. Reverting changes.
Training on augumented user 28946 10/50 current_auc = 0.6480978260869565
User 28946 AUC after training: 0.6476995877061468
User 28946 does not improve AUC. Reverting changes.
Training on augumented user 136910 11/50 current_auc = 0.6480978260869565
User 136910 AUC after training: 0.6476527361319341
User 136910 does not improve AUC. Reverting changes.
Training on augumented user 19664 12/50 current_auc = 0.6480978260869565
User 19664 AUC after training: 0.6476175974512745
User 19664 does not improve AUC. Reverting changes.
Training on augumented user 49460 13/50 current_auc = 0.6480978260869565
User 49460 AUC after training: 0.6475824587706146
User 49460 does not improve AUC. Reverting changes.
Training on augumented user 19271 14/50 current_auc = 0.6480978260869565
User 19271 AUC after training: 0.6479572713643179
User 19271 does not improve AUC. Reverting changes.
Training on augumented user 101841 15/50 current_auc = 0.6480978260869565
User 101841 AUC after training: 0.6480275487256372
User 101841 does not improve AUC. Reverting changes.
Training on augumented user 135480 16/50 current_auc = 0.6480978260869565
User 135480 AUC after training: 0.6481446776611695
User 135480 improves AUC. Keeping the model.
Training on augumented user 12063 17/50 current_auc = 0.6481446776611695
User 12063 AUC after training: 0.6481681034482758
User 12063 improves AUC. Keeping the model.
Training on augumented user 92882 18/50 current_auc = 0.6481681034482758
User 92882 AUC after training: 0.6479572713643178
User 92882 does not improve AUC. Reverting changes.
Training on augumented user 100524 19/50 current_auc = 0.6481681034482758
User 100524 AUC after training: 0.6478167166416792
User 100524 does not improve AUC. Reverting changes.
Training on augumented user 90387 20/50 current_auc = 0.6481681034482758
User 90387 AUC after training: 0.6481212518740629
User 90387 does not improve AUC. Reverting changes.
Training on augumented user 129781 21/50 current_auc = 0.6481681034482758
User 129781 AUC after training: 0.6481681034482759
User 129781 improves AUC. Keeping the model.
Training on augumented user 5206 22/50 current_auc = 0.6481681034482759
User 5206 AUC after training: 0.6482383808095953
User 5206 improves AUC. Keeping the model.
Training on augumented user 101966 23/50 current_auc = 0.6482383808095953
User 101966 AUC after training: 0.6480744002998502
User 101966 does not improve AUC. Reverting changes.
Training on augumented user 107587 24/50 current_auc = 0.6482383808095953
User 107587 AUC after training: 0.6482383808095952
User 107587 does not improve AUC. Reverting changes.
Training on augumented user 119613 25/50 current_auc = 0.6482383808095953
User 119613 AUC after training: 0.6482618065967016
User 119613 improves AUC. Keeping the model.
Training on augumented user 123032 26/50 current_auc = 0.6482618065967016
User 123032 AUC after training: 0.6481212518740629
User 123032 does not improve AUC. Reverting changes.
Training on augumented user 47587 27/50 current_auc = 0.6482618065967016
User 47587 AUC after training: 0.6482852323838082
User 47587 improves AUC. Keeping the model.
Training on augumented user 110839 28/50 current_auc = 0.6482852323838082
User 110839 AUC after training: 0.6483555097451275
User 110839 improves AUC. Keeping the model.
Training on augumented user 46134 29/50 current_auc = 0.6483555097451275
User 46134 AUC after training: 0.648121251874063
User 46134 does not improve AUC. Reverting changes.
Training on augumented user 137154 30/50 current_auc = 0.6483555097451275
User 137154 AUC after training: 0.6479806971514243
User 137154 does not improve AUC. Reverting changes.
Training on augumented user 83718 31/50 current_auc = 0.6483555097451275
User 83718 AUC after training: 0.6483086581709145
User 83718 does not improve AUC. Reverting changes.
Training on augumented user 51263 32/50 current_auc = 0.6483555097451275
User 51263 AUC after training: 0.6482618065967017
User 51263 does not improve AUC. Reverting changes.
Training on augumented user 78130 33/50 current_auc = 0.6483555097451275
User 78130 AUC after training: 0.6482383808095953
User 78130 does not improve AUC. Reverting changes.
Training on augumented user 87873 34/50 current_auc = 0.6483555097451275
User 87873 AUC after training: 0.6482618065967016
User 87873 does not improve AUC. Reverting changes.
Training on augumented user 82230 35/50 current_auc = 0.6483555097451275
User 82230 AUC after training: 0.6481446776611695
User 82230 does not improve AUC. Reverting changes.
Training on augumented user 47264 36/50 current_auc = 0.6483555097451275
User 47264 AUC after training: 0.6482383808095952
User 47264 does not improve AUC. Reverting changes.
Training on augumented user 105156 37/50 current_auc = 0.6483555097451275
User 105156 AUC after training: 0.6477698650674663
User 105156 does not improve AUC. Reverting changes.
Training on augumented user 19351 38/50 current_auc = 0.6483555097451275
User 19351 AUC after training: 0.6486600449775113
User 19351 improves AUC. Keeping the model.
Training on augumented user 24708 39/50 current_auc = 0.6486600449775113
User 24708 AUC after training: 0.6486366191904048
User 24708 does not improve AUC. Reverting changes.
Training on augumented user 47855 40/50 current_auc = 0.6486600449775113
User 47855 AUC after training: 0.6489880059970016
User 47855 improves AUC. Keeping the model.
Training on augumented user 38116 41/50 current_auc = 0.6489880059970016
User 38116 AUC after training: 0.6485077773613194
User 38116 does not improve AUC. Reverting changes.
Training on augumented user 98616 42/50 current_auc = 0.6489880059970016
User 98616 AUC after training: 0.6488123125937031
User 98616 does not improve AUC. Reverting changes.
Training on augumented user 108391 43/50 current_auc = 0.6489880059970016
User 108391 AUC after training: 0.6488943028485757
User 108391 does not improve AUC. Reverting changes.
Training on augumented user 105325 44/50 current_auc = 0.6489880059970016
User 105325 AUC after training: 0.6480275487256373
User 105325 does not improve AUC. Reverting changes.
Training on augumented user 78834 45/50 current_auc = 0.6489880059970016
User 78834 AUC after training: 0.6488708770614693
User 78834 does not improve AUC. Reverting changes.
Training on augumented user 47151 46/50 current_auc = 0.6489880059970016
User 47151 AUC after training: 0.6486249062968517
User 47151 does not improve AUC. Reverting changes.
Training on augumented user 134514 47/50 current_auc = 0.6489880059970016
User 134514 AUC after training: 0.6488591641679161
User 134514 does not improve AUC. Reverting changes.
Training on augumented user 96867 48/50 current_auc = 0.6489880059970016
User 96867 AUC after training: 0.6486600449775114
User 96867 does not improve AUC. Reverting changes.
Training on augumented user 63575 49/50 current_auc = 0.6489880059970016
User 63575 AUC after training: 0.6486131934032985
User 63575 does not improve AUC. Reverting changes.
[2024-12-02 17:54:38.517932] start test user 97143 32/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:54:39.045085] start test user 97143 32/567 recall augumented users by random, augumented_users = [94246, 112550, 27256, 123904, 108088, 106408, 13063, 33576, 76771, 128825, 92131, 76750, 24756, 120350, 71159, 93078, 105460, 72195, 34605, 110496, 100379, 71835, 132472, 108594, 109658, 13054, 129089, 59726, 7529, 57412, 65150, 112169, 47873, 123061, 55050, 2461, 114485, 68203, 7662, 81235, 14255, 54686, 130329, 120752, 1647, 134338, 92658, 7457, 25859, 38287]
[2024-12-02 17:54:39.059342] user = 97143 Cloud 32/567
[2024-12-02 17:54:39.068875] user = 97143 Local 32/567
[2024-12-02 17:54:39.099351] user = 97143 Local+ 32/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:54:40.968746] user = 97143 MPDA- 32/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7
Training on augumented user 94246 0/50 current_auc = 0.7
User 94246 AUC after training: 0.7
User 94246 does not improve AUC. Reverting changes.
Training on augumented user 112550 1/50 current_auc = 0.7
User 112550 AUC after training: 0.7
User 112550 does not improve AUC. Reverting changes.
Training on augumented user 27256 2/50 current_auc = 0.7
User 27256 AUC after training: 0.7
User 27256 does not improve AUC. Reverting changes.
Training on augumented user 123904 3/50 current_auc = 0.7
User 123904 AUC after training: 0.7
User 123904 does not improve AUC. Reverting changes.
Training on augumented user 108088 4/50 current_auc = 0.7
User 108088 AUC after training: 0.7
User 108088 does not improve AUC. Reverting changes.
Training on augumented user 106408 5/50 current_auc = 0.7
User 106408 AUC after training: 0.7
User 106408 does not improve AUC. Reverting changes.
Training on augumented user 13063 6/50 current_auc = 0.7
User 13063 AUC after training: 0.7
User 13063 does not improve AUC. Reverting changes.
Training on augumented user 33576 7/50 current_auc = 0.7
User 33576 AUC after training: 0.7
User 33576 does not improve AUC. Reverting changes.
Training on augumented user 76771 8/50 current_auc = 0.7
User 76771 AUC after training: 0.7
User 76771 does not improve AUC. Reverting changes.
Training on augumented user 128825 9/50 current_auc = 0.7
User 128825 AUC after training: 0.7
User 128825 does not improve AUC. Reverting changes.
Training on augumented user 92131 10/50 current_auc = 0.7
User 92131 AUC after training: 0.7
User 92131 does not improve AUC. Reverting changes.
Training on augumented user 76750 11/50 current_auc = 0.7
User 76750 AUC after training: 0.7
User 76750 does not improve AUC. Reverting changes.
Training on augumented user 24756 12/50 current_auc = 0.7
User 24756 AUC after training: 0.7
User 24756 does not improve AUC. Reverting changes.
Training on augumented user 120350 13/50 current_auc = 0.7
User 120350 AUC after training: 0.7
User 120350 does not improve AUC. Reverting changes.
Training on augumented user 71159 14/50 current_auc = 0.7
User 71159 AUC after training: 0.7
User 71159 does not improve AUC. Reverting changes.
Training on augumented user 93078 15/50 current_auc = 0.7
User 93078 AUC after training: 0.7
User 93078 does not improve AUC. Reverting changes.
Training on augumented user 105460 16/50 current_auc = 0.7
User 105460 AUC after training: 0.7
User 105460 does not improve AUC. Reverting changes.
Training on augumented user 72195 17/50 current_auc = 0.7
User 72195 AUC after training: 0.7
User 72195 does not improve AUC. Reverting changes.
Training on augumented user 34605 18/50 current_auc = 0.7
User 34605 AUC after training: 0.7
User 34605 does not improve AUC. Reverting changes.
Training on augumented user 110496 19/50 current_auc = 0.7
User 110496 AUC after training: 0.7
User 110496 does not improve AUC. Reverting changes.
Training on augumented user 100379 20/50 current_auc = 0.7
User 100379 AUC after training: 0.7
User 100379 does not improve AUC. Reverting changes.
Training on augumented user 71835 21/50 current_auc = 0.7
User 71835 AUC after training: 0.7
User 71835 does not improve AUC. Reverting changes.
Training on augumented user 132472 22/50 current_auc = 0.7
User 132472 AUC after training: 0.7
User 132472 does not improve AUC. Reverting changes.
Training on augumented user 108594 23/50 current_auc = 0.7
User 108594 AUC after training: 0.7
User 108594 does not improve AUC. Reverting changes.
Training on augumented user 109658 24/50 current_auc = 0.7
User 109658 AUC after training: 0.7
User 109658 does not improve AUC. Reverting changes.
Training on augumented user 13054 25/50 current_auc = 0.7
User 13054 AUC after training: 0.7
User 13054 does not improve AUC. Reverting changes.
Training on augumented user 129089 26/50 current_auc = 0.7
User 129089 AUC after training: 0.7
User 129089 does not improve AUC. Reverting changes.
Training on augumented user 59726 27/50 current_auc = 0.7
User 59726 AUC after training: 0.7
User 59726 does not improve AUC. Reverting changes.
Training on augumented user 7529 28/50 current_auc = 0.7
User 7529 AUC after training: 0.7
User 7529 does not improve AUC. Reverting changes.
Training on augumented user 57412 29/50 current_auc = 0.7
User 57412 AUC after training: 0.7
User 57412 does not improve AUC. Reverting changes.
Training on augumented user 65150 30/50 current_auc = 0.7
User 65150 AUC after training: 0.7
User 65150 does not improve AUC. Reverting changes.
Training on augumented user 112169 31/50 current_auc = 0.7
User 112169 AUC after training: 0.7
User 112169 does not improve AUC. Reverting changes.
Training on augumented user 47873 32/50 current_auc = 0.7
User 47873 AUC after training: 0.7
User 47873 does not improve AUC. Reverting changes.
Training on augumented user 123061 33/50 current_auc = 0.7
User 123061 AUC after training: 0.7
User 123061 does not improve AUC. Reverting changes.
Training on augumented user 55050 34/50 current_auc = 0.7
User 55050 AUC after training: 0.7
User 55050 does not improve AUC. Reverting changes.
Training on augumented user 2461 35/50 current_auc = 0.7
User 2461 AUC after training: 0.7
User 2461 does not improve AUC. Reverting changes.
Training on augumented user 114485 36/50 current_auc = 0.7
User 114485 AUC after training: 0.7
User 114485 does not improve AUC. Reverting changes.
Training on augumented user 68203 37/50 current_auc = 0.7
User 68203 AUC after training: 0.7
User 68203 does not improve AUC. Reverting changes.
Training on augumented user 7662 38/50 current_auc = 0.7
User 7662 AUC after training: 0.7
User 7662 does not improve AUC. Reverting changes.
Training on augumented user 81235 39/50 current_auc = 0.7
User 81235 AUC after training: 0.7
User 81235 does not improve AUC. Reverting changes.
Training on augumented user 14255 40/50 current_auc = 0.7
User 14255 AUC after training: 0.7
User 14255 does not improve AUC. Reverting changes.
Training on augumented user 54686 41/50 current_auc = 0.7
User 54686 AUC after training: 0.7
User 54686 does not improve AUC. Reverting changes.
Training on augumented user 130329 42/50 current_auc = 0.7
User 130329 AUC after training: 0.7
User 130329 does not improve AUC. Reverting changes.
Training on augumented user 120752 43/50 current_auc = 0.7
User 120752 AUC after training: 0.7
User 120752 does not improve AUC. Reverting changes.
Training on augumented user 1647 44/50 current_auc = 0.7
User 1647 AUC after training: 0.7
User 1647 does not improve AUC. Reverting changes.
Training on augumented user 134338 45/50 current_auc = 0.7
User 134338 AUC after training: 0.7
User 134338 does not improve AUC. Reverting changes.
Training on augumented user 92658 46/50 current_auc = 0.7
User 92658 AUC after training: 0.7
User 92658 does not improve AUC. Reverting changes.
Training on augumented user 7457 47/50 current_auc = 0.7
User 7457 AUC after training: 0.7
User 7457 does not improve AUC. Reverting changes.
Training on augumented user 25859 48/50 current_auc = 0.7
User 25859 AUC after training: 0.7
User 25859 does not improve AUC. Reverting changes.
Training on augumented user 38287 49/50 current_auc = 0.7
User 38287 AUC after training: 0.7
User 38287 does not improve AUC. Reverting changes.
[2024-12-02 17:55:12.190559] start test user 97163 33/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:55:12.690321] start test user 97163 33/567 recall augumented users by random, augumented_users = [37969, 106421, 86598, 45654, 39740, 16488, 54868, 41377, 106287, 19887, 70210, 6726, 47392, 114758, 106443, 132896, 35222, 51976, 17968, 6283, 97021, 71642, 109440, 75997, 76251, 31415, 50533, 49845, 60663, 45942, 137668, 77155, 57920, 42381, 94170, 35131, 30594, 6951, 89313, 17670, 29157, 103423, 26757, 20275, 17347, 48060, 89374, 58810, 121813, 91114]
[2024-12-02 17:55:12.705732] user = 97163 Cloud 33/567
[2024-12-02 17:55:12.719272] user = 97163 Local 33/567
[2024-12-02 17:55:12.816526] user = 97163 Local+ 33/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:55:15.357646] user = 97163 MPDA- 33/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8139386189258312
Training on augumented user 37969 0/50 current_auc = 0.8139386189258312
User 37969 AUC after training: 0.8139386189258312
User 37969 does not improve AUC. Reverting changes.
Training on augumented user 106421 1/50 current_auc = 0.8139386189258312
User 106421 AUC after training: 0.8139386189258312
User 106421 does not improve AUC. Reverting changes.
Training on augumented user 86598 2/50 current_auc = 0.8139386189258312
User 86598 AUC after training: 0.8132992327365728
User 86598 does not improve AUC. Reverting changes.
Training on augumented user 45654 3/50 current_auc = 0.8139386189258312
User 45654 AUC after training: 0.8158567774936062
User 45654 improves AUC. Keeping the model.
Training on augumented user 39740 4/50 current_auc = 0.8158567774936062
User 39740 AUC after training: 0.8132992327365729
User 39740 does not improve AUC. Reverting changes.
Training on augumented user 16488 5/50 current_auc = 0.8158567774936062
User 16488 AUC after training: 0.8152173913043478
User 16488 does not improve AUC. Reverting changes.
Training on augumented user 54868 6/50 current_auc = 0.8158567774936062
User 54868 AUC after training: 0.8132992327365729
User 54868 does not improve AUC. Reverting changes.
Training on augumented user 41377 7/50 current_auc = 0.8158567774936062
User 41377 AUC after training: 0.8139386189258312
User 41377 does not improve AUC. Reverting changes.
Training on augumented user 106287 8/50 current_auc = 0.8158567774936062
User 106287 AUC after training: 0.8164961636828645
User 106287 improves AUC. Keeping the model.
Training on augumented user 19887 9/50 current_auc = 0.8164961636828645
User 19887 AUC after training: 0.8152173913043479
User 19887 does not improve AUC. Reverting changes.
Training on augumented user 70210 10/50 current_auc = 0.8164961636828645
User 70210 AUC after training: 0.8158567774936062
User 70210 does not improve AUC. Reverting changes.
Training on augumented user 6726 11/50 current_auc = 0.8164961636828645
User 6726 AUC after training: 0.8152173913043479
User 6726 does not improve AUC. Reverting changes.
Training on augumented user 47392 12/50 current_auc = 0.8164961636828645
User 47392 AUC after training: 0.8164961636828646
User 47392 improves AUC. Keeping the model.
Training on augumented user 114758 13/50 current_auc = 0.8164961636828646
User 114758 AUC after training: 0.8139386189258312
User 114758 does not improve AUC. Reverting changes.
Training on augumented user 106443 14/50 current_auc = 0.8164961636828646
User 106443 AUC after training: 0.8164961636828645
User 106443 does not improve AUC. Reverting changes.
Training on augumented user 132896 15/50 current_auc = 0.8164961636828646
User 132896 AUC after training: 0.8152173913043479
User 132896 does not improve AUC. Reverting changes.
Training on augumented user 35222 16/50 current_auc = 0.8164961636828646
User 35222 AUC after training: 0.8158567774936062
User 35222 does not improve AUC. Reverting changes.
Training on augumented user 51976 17/50 current_auc = 0.8164961636828646
User 51976 AUC after training: 0.8139386189258312
User 51976 does not improve AUC. Reverting changes.
Training on augumented user 17968 18/50 current_auc = 0.8164961636828646
User 17968 AUC after training: 0.8164961636828645
User 17968 does not improve AUC. Reverting changes.
Training on augumented user 6283 19/50 current_auc = 0.8164961636828646
User 6283 AUC after training: 0.8171355498721228
User 6283 improves AUC. Keeping the model.
Training on augumented user 97021 20/50 current_auc = 0.8171355498721228
User 97021 AUC after training: 0.8145780051150896
User 97021 does not improve AUC. Reverting changes.
Training on augumented user 71642 21/50 current_auc = 0.8171355498721228
User 71642 AUC after training: 0.8164961636828646
User 71642 does not improve AUC. Reverting changes.
Training on augumented user 109440 22/50 current_auc = 0.8171355498721228
User 109440 AUC after training: 0.8158567774936062
User 109440 does not improve AUC. Reverting changes.
Training on augumented user 75997 23/50 current_auc = 0.8171355498721228
User 75997 AUC after training: 0.8171355498721228
User 75997 does not improve AUC. Reverting changes.
Training on augumented user 76251 24/50 current_auc = 0.8171355498721228
User 76251 AUC after training: 0.8152173913043478
User 76251 does not improve AUC. Reverting changes.
Training on augumented user 31415 25/50 current_auc = 0.8171355498721228
User 31415 AUC after training: 0.8171355498721228
User 31415 does not improve AUC. Reverting changes.
Training on augumented user 50533 26/50 current_auc = 0.8171355498721228
User 50533 AUC after training: 0.8161764705882353
User 50533 does not improve AUC. Reverting changes.
Training on augumented user 49845 27/50 current_auc = 0.8171355498721228
User 49845 AUC after training: 0.8158567774936062
User 49845 does not improve AUC. Reverting changes.
Training on augumented user 60663 28/50 current_auc = 0.8171355498721228
User 60663 AUC after training: 0.8171355498721228
User 60663 does not improve AUC. Reverting changes.
Training on augumented user 45942 29/50 current_auc = 0.8171355498721228
User 45942 AUC after training: 0.8164961636828644
User 45942 does not improve AUC. Reverting changes.
Training on augumented user 137668 30/50 current_auc = 0.8171355498721228
User 137668 AUC after training: 0.8164961636828644
User 137668 does not improve AUC. Reverting changes.
Training on augumented user 77155 31/50 current_auc = 0.8171355498721228
User 77155 AUC after training: 0.8164961636828646
User 77155 does not improve AUC. Reverting changes.
Training on augumented user 57920 32/50 current_auc = 0.8171355498721228
User 57920 AUC after training: 0.8152173913043478
User 57920 does not improve AUC. Reverting changes.
Training on augumented user 42381 33/50 current_auc = 0.8171355498721228
User 42381 AUC after training: 0.8164961636828646
User 42381 does not improve AUC. Reverting changes.
Training on augumented user 94170 34/50 current_auc = 0.8171355498721228
User 94170 AUC after training: 0.8158567774936062
User 94170 does not improve AUC. Reverting changes.
Training on augumented user 35131 35/50 current_auc = 0.8171355498721228
User 35131 AUC after training: 0.8164961636828646
User 35131 does not improve AUC. Reverting changes.
Training on augumented user 30594 36/50 current_auc = 0.8171355498721228
User 30594 AUC after training: 0.8177749360613812
User 30594 improves AUC. Keeping the model.
Training on augumented user 6951 37/50 current_auc = 0.8177749360613812
User 6951 AUC after training: 0.8164961636828644
User 6951 does not improve AUC. Reverting changes.
Training on augumented user 89313 38/50 current_auc = 0.8177749360613812
User 89313 AUC after training: 0.8164961636828644
User 89313 does not improve AUC. Reverting changes.
Training on augumented user 17670 39/50 current_auc = 0.8177749360613812
User 17670 AUC after training: 0.8177749360613812
User 17670 does not improve AUC. Reverting changes.
Training on augumented user 29157 40/50 current_auc = 0.8177749360613812
User 29157 AUC after training: 0.8164961636828644
User 29157 does not improve AUC. Reverting changes.
Training on augumented user 103423 41/50 current_auc = 0.8177749360613812
User 103423 AUC after training: 0.8171355498721228
User 103423 does not improve AUC. Reverting changes.
Training on augumented user 26757 42/50 current_auc = 0.8177749360613812
User 26757 AUC after training: 0.8177749360613812
User 26757 does not improve AUC. Reverting changes.
Training on augumented user 20275 43/50 current_auc = 0.8177749360613812
User 20275 AUC after training: 0.8164961636828644
User 20275 does not improve AUC. Reverting changes.
Training on augumented user 17347 44/50 current_auc = 0.8177749360613812
User 17347 AUC after training: 0.8171355498721228
User 17347 does not improve AUC. Reverting changes.
Training on augumented user 48060 45/50 current_auc = 0.8177749360613812
User 48060 AUC after training: 0.8177749360613812
User 48060 does not improve AUC. Reverting changes.
Training on augumented user 89374 46/50 current_auc = 0.8177749360613812
User 89374 AUC after training: 0.8171355498721228
User 89374 does not improve AUC. Reverting changes.
Training on augumented user 58810 47/50 current_auc = 0.8177749360613812
User 58810 AUC after training: 0.8171355498721228
User 58810 does not improve AUC. Reverting changes.
Training on augumented user 121813 48/50 current_auc = 0.8177749360613812
User 121813 AUC after training: 0.8164961636828645
User 121813 does not improve AUC. Reverting changes.
Training on augumented user 91114 49/50 current_auc = 0.8177749360613812
User 91114 AUC after training: 0.8164961636828644
User 91114 does not improve AUC. Reverting changes.
[2024-12-02 17:55:45.630933] start test user 97176 34/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:55:46.309519] start test user 97176 34/567 recall augumented users by random, augumented_users = [51373, 122256, 136970, 45686, 114483, 44392, 112851, 115993, 76675, 29390, 71449, 68912, 26406, 15035, 59760, 80099, 112920, 86479, 32104, 65199, 60291, 44127, 85598, 565, 63572, 32529, 72835, 115540, 75335, 113230, 114576, 58761, 129870, 28057, 136893, 94132, 87577, 87881, 83113, 16342, 6861, 27728, 114723, 132080, 8239, 63838, 114147, 92579, 57993, 80176]
[2024-12-02 17:55:46.329097] user = 97176 Cloud 34/567
[2024-12-02 17:55:46.382483] user = 97176 Local 34/567
[2024-12-02 17:55:46.558404] user = 97176 Local+ 34/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:55:49.275520] user = 97176 MPDA- 34/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6767610984478455
Training on augumented user 51373 0/50 current_auc = 0.6767610984478455
User 51373 AUC after training: 0.6770867252794963
User 51373 improves AUC. Keeping the model.
Training on augumented user 122256 1/50 current_auc = 0.6770867252794963
User 122256 AUC after training: 0.6767610984478455
User 122256 does not improve AUC. Reverting changes.
Training on augumented user 136970 2/50 current_auc = 0.6770867252794963
User 136970 AUC after training: 0.6773580809725388
User 136970 improves AUC. Keeping the model.
Training on augumented user 45686 3/50 current_auc = 0.6773580809725388
User 45686 AUC after training: 0.6772495386953219
User 45686 does not improve AUC. Reverting changes.
Training on augumented user 114483 4/50 current_auc = 0.6773580809725388
User 114483 AUC after training: 0.6770686348999602
User 114483 does not improve AUC. Reverting changes.
Training on augumented user 44392 5/50 current_auc = 0.6773580809725388
User 44392 AUC after training: 0.6771590867976409
User 44392 does not improve AUC. Reverting changes.
Training on augumented user 112851 6/50 current_auc = 0.6773580809725388
User 112851 AUC after training: 0.6769962733818156
User 112851 does not improve AUC. Reverting changes.
Training on augumented user 115993 7/50 current_auc = 0.6773580809725388
User 115993 AUC after training: 0.6773580809725388
User 115993 does not improve AUC. Reverting changes.
Training on augumented user 76675 8/50 current_auc = 0.6773580809725388
User 76675 AUC after training: 0.6773942617316111
User 76675 improves AUC. Keeping the model.
Training on augumented user 29390 9/50 current_auc = 0.6773942617316111
User 29390 AUC after training: 0.6777741597018706
User 29390 improves AUC. Keeping the model.
Training on augumented user 71449 10/50 current_auc = 0.6777741597018706
User 71449 AUC after training: 0.6782987807084193
User 71449 improves AUC. Keeping the model.
Training on augumented user 68912 11/50 current_auc = 0.6782987807084193
User 68912 AUC after training: 0.6780816961539853
User 68912 does not improve AUC. Reverting changes.
Training on augumented user 26406 12/50 current_auc = 0.6782987807084193
User 26406 AUC after training: 0.6785882267809978
User 26406 improves AUC. Keeping the model.
Training on augumented user 15035 13/50 current_auc = 0.6785882267809978
User 15035 AUC after training: 0.6785520460219255
User 15035 does not improve AUC. Reverting changes.
Training on augumented user 59760 14/50 current_auc = 0.6785882267809978
User 59760 AUC after training: 0.6783892326061001
User 59760 does not improve AUC. Reverting changes.
Training on augumented user 80099 15/50 current_auc = 0.6785882267809978
User 80099 AUC after training: 0.6778827019790875
User 80099 does not improve AUC. Reverting changes.
Training on augumented user 112920 16/50 current_auc = 0.6785882267809978
User 112920 AUC after training: 0.6782445095698107
User 112920 does not improve AUC. Reverting changes.
Training on augumented user 86479 17/50 current_auc = 0.6785882267809978
User 86479 AUC after training: 0.6779550634972322
User 86479 does not improve AUC. Reverting changes.
Training on augumented user 32104 18/50 current_auc = 0.6785882267809978
User 32104 AUC after training: 0.6784977748833171
User 32104 does not improve AUC. Reverting changes.
Training on augumented user 65199 19/50 current_auc = 0.6785882267809978
User 65199 AUC after training: 0.6786424979196064
User 65199 improves AUC. Keeping the model.
Training on augumented user 60291 20/50 current_auc = 0.6786424979196064
User 60291 AUC after training: 0.6787329498172872
User 60291 improves AUC. Keeping the model.
Training on augumented user 44127 21/50 current_auc = 0.6787329498172872
User 44127 AUC after training: 0.6786244075400701
User 44127 does not improve AUC. Reverting changes.
Training on augumented user 85598 22/50 current_auc = 0.6787329498172872
User 85598 AUC after training: 0.6781359672925938
User 85598 does not improve AUC. Reverting changes.
Training on augumented user 565 23/50 current_auc = 0.6787329498172872
User 565 AUC after training: 0.678135967292594
User 565 does not improve AUC. Reverting changes.
Training on augumented user 63572 24/50 current_auc = 0.6787329498172872
User 63572 AUC after training: 0.6780997865335214
User 63572 does not improve AUC. Reverting changes.
Training on augumented user 32529 25/50 current_auc = 0.6787329498172872
User 32529 AUC after training: 0.6785701364014617
User 32529 does not improve AUC. Reverting changes.
Training on augumented user 72835 26/50 current_auc = 0.6787329498172872
User 72835 AUC after training: 0.6783892326061001
User 72835 does not improve AUC. Reverting changes.
Training on augumented user 115540 27/50 current_auc = 0.6787329498172872
User 115540 AUC after training: 0.6785882267809977
User 115540 does not improve AUC. Reverting changes.
Training on augumented user 75335 28/50 current_auc = 0.6787329498172872
User 75335 AUC after training: 0.6785701364014617
User 75335 does not improve AUC. Reverting changes.
Training on augumented user 113230 29/50 current_auc = 0.6787329498172872
User 113230 AUC after training: 0.6788053113354318
User 113230 improves AUC. Keeping the model.
Training on augumented user 114576 30/50 current_auc = 0.6788053113354318
User 114576 AUC after training: 0.6786605882991424
User 114576 does not improve AUC. Reverting changes.
Training on augumented user 58761 31/50 current_auc = 0.6788053113354318
User 58761 AUC after training: 0.6786424979196064
User 58761 does not improve AUC. Reverting changes.
Training on augumented user 129870 32/50 current_auc = 0.6788053113354318
User 129870 AUC after training: 0.6784435037447084
User 129870 does not improve AUC. Reverting changes.
Training on augumented user 28057 33/50 current_auc = 0.6788053113354318
User 28057 AUC after training: 0.6782987807084193
User 28057 does not improve AUC. Reverting changes.
Training on augumented user 136893 34/50 current_auc = 0.6788053113354318
User 136893 AUC after training: 0.6785882267809977
User 136893 does not improve AUC. Reverting changes.
Training on augumented user 94132 35/50 current_auc = 0.6788053113354318
User 94132 AUC after training: 0.6786786786786787
User 94132 does not improve AUC. Reverting changes.
Training on augumented user 87577 36/50 current_auc = 0.6788053113354318
User 87577 AUC after training: 0.6770143637613517
User 87577 does not improve AUC. Reverting changes.
Training on augumented user 87881 37/50 current_auc = 0.6788053113354318
User 87881 AUC after training: 0.6787691305763596
User 87881 does not improve AUC. Reverting changes.
Training on augumented user 83113 38/50 current_auc = 0.6788053113354318
User 83113 AUC after training: 0.6785701364014618
User 83113 does not improve AUC. Reverting changes.
Training on augumented user 16342 39/50 current_auc = 0.6788053113354318
User 16342 AUC after training: 0.6786424979196063
User 16342 does not improve AUC. Reverting changes.
Training on augumented user 6861 40/50 current_auc = 0.6788053113354318
User 6861 AUC after training: 0.6773399905930026
User 6861 does not improve AUC. Reverting changes.
Training on augumented user 27728 41/50 current_auc = 0.6788053113354318
User 27728 AUC after training: 0.6785339556423893
User 27728 does not improve AUC. Reverting changes.
Training on augumented user 114723 42/50 current_auc = 0.6788053113354318
User 114723 AUC after training: 0.6786967690582147
User 114723 does not improve AUC. Reverting changes.
Training on augumented user 132080 43/50 current_auc = 0.6788053113354318
User 132080 AUC after training: 0.6786424979196063
User 132080 does not improve AUC. Reverting changes.
Training on augumented user 8239 44/50 current_auc = 0.6788053113354318
User 8239 AUC after training: 0.6787872209558957
User 8239 does not improve AUC. Reverting changes.
Training on augumented user 63838 45/50 current_auc = 0.6788053113354318
User 63838 AUC after training: 0.6782083288107383
User 63838 does not improve AUC. Reverting changes.
Training on augumented user 114147 46/50 current_auc = 0.6788053113354318
User 114147 AUC after training: 0.6784435037447086
User 114147 does not improve AUC. Reverting changes.
Training on augumented user 92579 47/50 current_auc = 0.6788053113354318
User 92579 AUC after training: 0.678606317160534
User 92579 does not improve AUC. Reverting changes.
Training on augumented user 57993 48/50 current_auc = 0.6788053113354318
User 57993 AUC after training: 0.6787510401968233
User 57993 does not improve AUC. Reverting changes.
Training on augumented user 80176 49/50 current_auc = 0.6788053113354318
User 80176 AUC after training: 0.6783349614674916
User 80176 does not improve AUC. Reverting changes.
[2024-12-02 17:56:19.242013] start test user 97178 35/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:56:19.838450] start test user 97178 35/567 recall augumented users by random, augumented_users = [2677, 7768, 101008, 27709, 118419, 37115, 125409, 65224, 121088, 415, 63111, 84613, 67961, 119513, 104612, 133587, 25291, 358, 24801, 94508, 57110, 94360, 10183, 61552, 2455, 121282, 41079, 117511, 77821, 105184, 116433, 55118, 55248, 15688, 60769, 102250, 16918, 129656, 29786, 127177, 15789, 130250, 38314, 114143, 25462, 110628, 50221, 132084, 41394, 136223]
[2024-12-02 17:56:19.867429] user = 97178 Cloud 35/567
[2024-12-02 17:56:19.878461] user = 97178 Local 35/567
[2024-12-02 17:56:19.936203] user = 97178 Local+ 35/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:56:22.993195] user = 97178 MPDA- 35/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7511363636363636
Training on augumented user 2677 0/50 current_auc = 0.7511363636363636
User 2677 AUC after training: 0.7477272727272728
User 2677 does not improve AUC. Reverting changes.
Training on augumented user 7768 1/50 current_auc = 0.7511363636363636
User 7768 AUC after training: 0.7511363636363636
User 7768 does not improve AUC. Reverting changes.
Training on augumented user 101008 2/50 current_auc = 0.7511363636363636
User 101008 AUC after training: 0.7488636363636363
User 101008 does not improve AUC. Reverting changes.
Training on augumented user 27709 3/50 current_auc = 0.7511363636363636
User 27709 AUC after training: 0.75
User 27709 does not improve AUC. Reverting changes.
Training on augumented user 118419 4/50 current_auc = 0.7511363636363636
User 118419 AUC after training: 0.75
User 118419 does not improve AUC. Reverting changes.
Training on augumented user 37115 5/50 current_auc = 0.7511363636363636
User 37115 AUC after training: 0.7511363636363637
User 37115 improves AUC. Keeping the model.
Training on augumented user 125409 6/50 current_auc = 0.7511363636363637
User 125409 AUC after training: 0.7534090909090909
User 125409 improves AUC. Keeping the model.
Training on augumented user 65224 7/50 current_auc = 0.7534090909090909
User 65224 AUC after training: 0.7420454545454545
User 65224 does not improve AUC. Reverting changes.
Training on augumented user 121088 8/50 current_auc = 0.7534090909090909
User 121088 AUC after training: 0.7511363636363637
User 121088 does not improve AUC. Reverting changes.
Training on augumented user 415 9/50 current_auc = 0.7534090909090909
User 415 AUC after training: 0.7534090909090909
User 415 does not improve AUC. Reverting changes.
Training on augumented user 63111 10/50 current_auc = 0.7534090909090909
User 63111 AUC after training: 0.7556818181818181
User 63111 improves AUC. Keeping the model.
Training on augumented user 84613 11/50 current_auc = 0.7556818181818181
User 84613 AUC after training: 0.7545454545454546
User 84613 does not improve AUC. Reverting changes.
Training on augumented user 67961 12/50 current_auc = 0.7556818181818181
User 67961 AUC after training: 0.7522727272727272
User 67961 does not improve AUC. Reverting changes.
Training on augumented user 119513 13/50 current_auc = 0.7556818181818181
User 119513 AUC after training: 0.7545454545454546
User 119513 does not improve AUC. Reverting changes.
Training on augumented user 104612 14/50 current_auc = 0.7556818181818181
User 104612 AUC after training: 0.7545454545454546
User 104612 does not improve AUC. Reverting changes.
Training on augumented user 133587 15/50 current_auc = 0.7556818181818181
User 133587 AUC after training: 0.7545454545454545
User 133587 does not improve AUC. Reverting changes.
Training on augumented user 25291 16/50 current_auc = 0.7556818181818181
User 25291 AUC after training: 0.7545454545454545
User 25291 does not improve AUC. Reverting changes.
Training on augumented user 358 17/50 current_auc = 0.7556818181818181
User 358 AUC after training: 0.7534090909090909
User 358 does not improve AUC. Reverting changes.
Training on augumented user 24801 18/50 current_auc = 0.7556818181818181
User 24801 AUC after training: 0.7556818181818181
User 24801 does not improve AUC. Reverting changes.
Training on augumented user 94508 19/50 current_auc = 0.7556818181818181
User 94508 AUC after training: 0.7545454545454546
User 94508 does not improve AUC. Reverting changes.
Training on augumented user 57110 20/50 current_auc = 0.7556818181818181
User 57110 AUC after training: 0.7568181818181818
User 57110 improves AUC. Keeping the model.
Training on augumented user 94360 21/50 current_auc = 0.7568181818181818
User 94360 AUC after training: 0.7534090909090909
User 94360 does not improve AUC. Reverting changes.
Training on augumented user 10183 22/50 current_auc = 0.7568181818181818
User 10183 AUC after training: 0.7522727272727272
User 10183 does not improve AUC. Reverting changes.
Training on augumented user 61552 23/50 current_auc = 0.7568181818181818
User 61552 AUC after training: 0.7545454545454546
User 61552 does not improve AUC. Reverting changes.
Training on augumented user 2455 24/50 current_auc = 0.7568181818181818
User 2455 AUC after training: 0.7568181818181818
User 2455 does not improve AUC. Reverting changes.
Training on augumented user 121282 25/50 current_auc = 0.7568181818181818
User 121282 AUC after training: 0.7534090909090909
User 121282 does not improve AUC. Reverting changes.
Training on augumented user 41079 26/50 current_auc = 0.7568181818181818
User 41079 AUC after training: 0.7556818181818181
User 41079 does not improve AUC. Reverting changes.
Training on augumented user 117511 27/50 current_auc = 0.7568181818181818
User 117511 AUC after training: 0.7545454545454546
User 117511 does not improve AUC. Reverting changes.
Training on augumented user 77821 28/50 current_auc = 0.7568181818181818
User 77821 AUC after training: 0.7534090909090909
User 77821 does not improve AUC. Reverting changes.
Training on augumented user 105184 29/50 current_auc = 0.7568181818181818
User 105184 AUC after training: 0.75
User 105184 does not improve AUC. Reverting changes.
Training on augumented user 116433 30/50 current_auc = 0.7568181818181818
User 116433 AUC after training: 0.7534090909090909
User 116433 does not improve AUC. Reverting changes.
Training on augumented user 55118 31/50 current_auc = 0.7568181818181818
User 55118 AUC after training: 0.7534090909090909
User 55118 does not improve AUC. Reverting changes.
Training on augumented user 55248 32/50 current_auc = 0.7568181818181818
User 55248 AUC after training: 0.7545454545454545
User 55248 does not improve AUC. Reverting changes.
Training on augumented user 15688 33/50 current_auc = 0.7568181818181818
User 15688 AUC after training: 0.7556818181818181
User 15688 does not improve AUC. Reverting changes.
Training on augumented user 60769 34/50 current_auc = 0.7568181818181818
User 60769 AUC after training: 0.7534090909090909
User 60769 does not improve AUC. Reverting changes.
Training on augumented user 102250 35/50 current_auc = 0.7568181818181818
User 102250 AUC after training: 0.7534090909090909
User 102250 does not improve AUC. Reverting changes.
Training on augumented user 16918 36/50 current_auc = 0.7568181818181818
User 16918 AUC after training: 0.7522727272727272
User 16918 does not improve AUC. Reverting changes.
Training on augumented user 129656 37/50 current_auc = 0.7568181818181818
User 129656 AUC after training: 0.7522727272727273
User 129656 does not improve AUC. Reverting changes.
Training on augumented user 29786 38/50 current_auc = 0.7568181818181818
User 29786 AUC after training: 0.7522727272727273
User 29786 does not improve AUC. Reverting changes.
Training on augumented user 127177 39/50 current_auc = 0.7568181818181818
User 127177 AUC after training: 0.7534090909090909
User 127177 does not improve AUC. Reverting changes.
Training on augumented user 15789 40/50 current_auc = 0.7568181818181818
User 15789 AUC after training: 0.7522727272727272
User 15789 does not improve AUC. Reverting changes.
Training on augumented user 130250 41/50 current_auc = 0.7568181818181818
User 130250 AUC after training: 0.7556818181818181
User 130250 does not improve AUC. Reverting changes.
Training on augumented user 38314 42/50 current_auc = 0.7568181818181818
User 38314 AUC after training: 0.7522727272727273
User 38314 does not improve AUC. Reverting changes.
Training on augumented user 114143 43/50 current_auc = 0.7568181818181818
User 114143 AUC after training: 0.7568181818181818
User 114143 does not improve AUC. Reverting changes.
Training on augumented user 25462 44/50 current_auc = 0.7568181818181818
User 25462 AUC after training: 0.7545454545454546
User 25462 does not improve AUC. Reverting changes.
Training on augumented user 110628 45/50 current_auc = 0.7568181818181818
User 110628 AUC after training: 0.7568181818181818
User 110628 does not improve AUC. Reverting changes.
Training on augumented user 50221 46/50 current_auc = 0.7568181818181818
User 50221 AUC after training: 0.7511363636363637
User 50221 does not improve AUC. Reverting changes.
Training on augumented user 132084 47/50 current_auc = 0.7568181818181818
User 132084 AUC after training: 0.7534090909090909
User 132084 does not improve AUC. Reverting changes.
Training on augumented user 41394 48/50 current_auc = 0.7568181818181818
User 41394 AUC after training: 0.7545454545454546
User 41394 does not improve AUC. Reverting changes.
Training on augumented user 136223 49/50 current_auc = 0.7568181818181818
User 136223 AUC after training: 0.7534090909090909
User 136223 does not improve AUC. Reverting changes.
[2024-12-02 17:56:53.528937] start test user 97193 36/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:56:54.258658] start test user 97193 36/567 recall augumented users by random, augumented_users = [6275, 65243, 69141, 21181, 98455, 33581, 120290, 50644, 59756, 109175, 66547, 51689, 72274, 74798, 73637, 123424, 80132, 43563, 46412, 92451, 69421, 116347, 51493, 138329, 49709, 120069, 2195, 57213, 57333, 84696, 22037, 44014, 104651, 69140, 72820, 111199, 82016, 128165, 121154, 22674, 48761, 120769, 114638, 10116, 9286, 96141, 109542, 137783, 119060, 138486]
[2024-12-02 17:56:54.286841] user = 97193 Cloud 36/567
[2024-12-02 17:56:54.303616] user = 97193 Local 36/567
[2024-12-02 17:56:54.395355] user = 97193 Local+ 36/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:56:56.796839] user = 97193 MPDA- 36/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 1.0
Training on augumented user 6275 0/50 current_auc = 1.0
User 6275 AUC after training: 1.0
User 6275 does not improve AUC. Reverting changes.
Training on augumented user 65243 1/50 current_auc = 1.0
User 65243 AUC after training: 1.0
User 65243 does not improve AUC. Reverting changes.
Training on augumented user 69141 2/50 current_auc = 1.0
User 69141 AUC after training: 1.0
User 69141 does not improve AUC. Reverting changes.
Training on augumented user 21181 3/50 current_auc = 1.0
User 21181 AUC after training: 1.0
User 21181 does not improve AUC. Reverting changes.
Training on augumented user 98455 4/50 current_auc = 1.0
User 98455 AUC after training: 1.0
User 98455 does not improve AUC. Reverting changes.
Training on augumented user 33581 5/50 current_auc = 1.0
User 33581 AUC after training: 1.0
User 33581 does not improve AUC. Reverting changes.
Training on augumented user 120290 6/50 current_auc = 1.0
User 120290 AUC after training: 1.0
User 120290 does not improve AUC. Reverting changes.
Training on augumented user 50644 7/50 current_auc = 1.0
User 50644 AUC after training: 1.0
User 50644 does not improve AUC. Reverting changes.
Training on augumented user 59756 8/50 current_auc = 1.0
User 59756 AUC after training: 1.0
User 59756 does not improve AUC. Reverting changes.
Training on augumented user 109175 9/50 current_auc = 1.0
User 109175 AUC after training: 1.0
User 109175 does not improve AUC. Reverting changes.
Training on augumented user 66547 10/50 current_auc = 1.0
User 66547 AUC after training: 1.0
User 66547 does not improve AUC. Reverting changes.
Training on augumented user 51689 11/50 current_auc = 1.0
User 51689 AUC after training: 1.0
User 51689 does not improve AUC. Reverting changes.
Training on augumented user 72274 12/50 current_auc = 1.0
User 72274 AUC after training: 1.0
User 72274 does not improve AUC. Reverting changes.
Training on augumented user 74798 13/50 current_auc = 1.0
User 74798 AUC after training: 1.0
User 74798 does not improve AUC. Reverting changes.
Training on augumented user 73637 14/50 current_auc = 1.0
User 73637 AUC after training: 1.0
User 73637 does not improve AUC. Reverting changes.
Training on augumented user 123424 15/50 current_auc = 1.0
User 123424 AUC after training: 1.0
User 123424 does not improve AUC. Reverting changes.
Training on augumented user 80132 16/50 current_auc = 1.0
User 80132 AUC after training: 1.0
User 80132 does not improve AUC. Reverting changes.
Training on augumented user 43563 17/50 current_auc = 1.0
User 43563 AUC after training: 1.0
User 43563 does not improve AUC. Reverting changes.
Training on augumented user 46412 18/50 current_auc = 1.0
User 46412 AUC after training: 1.0
User 46412 does not improve AUC. Reverting changes.
Training on augumented user 92451 19/50 current_auc = 1.0
User 92451 AUC after training: 1.0
User 92451 does not improve AUC. Reverting changes.
Training on augumented user 69421 20/50 current_auc = 1.0
User 69421 AUC after training: 1.0
User 69421 does not improve AUC. Reverting changes.
Training on augumented user 116347 21/50 current_auc = 1.0
User 116347 AUC after training: 1.0
User 116347 does not improve AUC. Reverting changes.
Training on augumented user 51493 22/50 current_auc = 1.0
User 51493 AUC after training: 1.0
User 51493 does not improve AUC. Reverting changes.
Training on augumented user 138329 23/50 current_auc = 1.0
User 138329 AUC after training: 1.0
User 138329 does not improve AUC. Reverting changes.
Training on augumented user 49709 24/50 current_auc = 1.0
User 49709 AUC after training: 1.0
User 49709 does not improve AUC. Reverting changes.
Training on augumented user 120069 25/50 current_auc = 1.0
User 120069 AUC after training: 1.0
User 120069 does not improve AUC. Reverting changes.
Training on augumented user 2195 26/50 current_auc = 1.0
User 2195 AUC after training: 1.0
User 2195 does not improve AUC. Reverting changes.
Training on augumented user 57213 27/50 current_auc = 1.0
User 57213 AUC after training: 1.0
User 57213 does not improve AUC. Reverting changes.
Training on augumented user 57333 28/50 current_auc = 1.0
User 57333 AUC after training: 1.0
User 57333 does not improve AUC. Reverting changes.
Training on augumented user 84696 29/50 current_auc = 1.0
User 84696 AUC after training: 1.0
User 84696 does not improve AUC. Reverting changes.
Training on augumented user 22037 30/50 current_auc = 1.0
User 22037 AUC after training: 1.0
User 22037 does not improve AUC. Reverting changes.
Training on augumented user 44014 31/50 current_auc = 1.0
User 44014 AUC after training: 1.0
User 44014 does not improve AUC. Reverting changes.
Training on augumented user 104651 32/50 current_auc = 1.0
User 104651 AUC after training: 1.0
User 104651 does not improve AUC. Reverting changes.
Training on augumented user 69140 33/50 current_auc = 1.0
User 69140 AUC after training: 1.0
User 69140 does not improve AUC. Reverting changes.
Training on augumented user 72820 34/50 current_auc = 1.0
User 72820 AUC after training: 1.0
User 72820 does not improve AUC. Reverting changes.
Training on augumented user 111199 35/50 current_auc = 1.0
User 111199 AUC after training: 1.0
User 111199 does not improve AUC. Reverting changes.
Training on augumented user 82016 36/50 current_auc = 1.0
User 82016 AUC after training: 1.0
User 82016 does not improve AUC. Reverting changes.
Training on augumented user 128165 37/50 current_auc = 1.0
User 128165 AUC after training: 1.0
User 128165 does not improve AUC. Reverting changes.
Training on augumented user 121154 38/50 current_auc = 1.0
User 121154 AUC after training: 1.0
User 121154 does not improve AUC. Reverting changes.
Training on augumented user 22674 39/50 current_auc = 1.0
User 22674 AUC after training: 1.0
User 22674 does not improve AUC. Reverting changes.
Training on augumented user 48761 40/50 current_auc = 1.0
User 48761 AUC after training: 1.0
User 48761 does not improve AUC. Reverting changes.
Training on augumented user 120769 41/50 current_auc = 1.0
User 120769 AUC after training: 1.0
User 120769 does not improve AUC. Reverting changes.
Training on augumented user 114638 42/50 current_auc = 1.0
User 114638 AUC after training: 1.0
User 114638 does not improve AUC. Reverting changes.
Training on augumented user 10116 43/50 current_auc = 1.0
User 10116 AUC after training: 1.0
User 10116 does not improve AUC. Reverting changes.
Training on augumented user 9286 44/50 current_auc = 1.0
User 9286 AUC after training: 1.0
User 9286 does not improve AUC. Reverting changes.
Training on augumented user 96141 45/50 current_auc = 1.0
User 96141 AUC after training: 1.0
User 96141 does not improve AUC. Reverting changes.
Training on augumented user 109542 46/50 current_auc = 1.0
User 109542 AUC after training: 1.0
User 109542 does not improve AUC. Reverting changes.
Training on augumented user 137783 47/50 current_auc = 1.0
User 137783 AUC after training: 1.0
User 137783 does not improve AUC. Reverting changes.
Training on augumented user 119060 48/50 current_auc = 1.0
User 119060 AUC after training: 1.0
User 119060 does not improve AUC. Reverting changes.
Training on augumented user 138486 49/50 current_auc = 1.0
User 138486 AUC after training: 1.0
User 138486 does not improve AUC. Reverting changes.
[2024-12-02 17:57:24.651603] start test user 97195 37/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:57:25.069410] start test user 97195 37/567 recall augumented users by random, augumented_users = [54533, 113756, 18050, 63605, 70704, 105000, 90912, 18428, 62274, 124218, 70602, 14235, 22879, 111563, 8260, 9427, 70686, 8810, 85029, 47421, 55658, 72221, 92857, 118064, 120749, 78450, 78738, 9407, 21369, 50180, 38239, 131142, 917, 63674, 61701, 31825, 86383, 125581, 6157, 110726, 119592, 61087, 35627, 46893, 98014, 11931, 46345, 40443, 8349, 93670]
[2024-12-02 17:57:25.084783] user = 97195 Cloud 37/567
[2024-12-02 17:57:25.099273] user = 97195 Local 37/567
[2024-12-02 17:57:25.253544] user = 97195 Local+ 37/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:57:27.455169] user = 97195 MPDA- 37/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6057692307692307
Training on augumented user 54533 0/50 current_auc = 0.6057692307692307
User 54533 AUC after training: 0.6025641025641025
User 54533 does not improve AUC. Reverting changes.
Training on augumented user 113756 1/50 current_auc = 0.6057692307692307
User 113756 AUC after training: 0.6009615384615384
User 113756 does not improve AUC. Reverting changes.
Training on augumented user 18050 2/50 current_auc = 0.6057692307692307
User 18050 AUC after training: 0.608974358974359
User 18050 improves AUC. Keeping the model.
Training on augumented user 63605 3/50 current_auc = 0.608974358974359
User 63605 AUC after training: 0.6121794871794872
User 63605 improves AUC. Keeping the model.
Training on augumented user 70704 4/50 current_auc = 0.6121794871794872
User 70704 AUC after training: 0.6121794871794872
User 70704 does not improve AUC. Reverting changes.
Training on augumented user 105000 5/50 current_auc = 0.6121794871794872
User 105000 AUC after training: 0.6121794871794872
User 105000 does not improve AUC. Reverting changes.
Training on augumented user 90912 6/50 current_auc = 0.6121794871794872
User 90912 AUC after training: 0.6121794871794872
User 90912 does not improve AUC. Reverting changes.
Training on augumented user 18428 7/50 current_auc = 0.6121794871794872
User 18428 AUC after training: 0.6105769230769231
User 18428 does not improve AUC. Reverting changes.
Training on augumented user 62274 8/50 current_auc = 0.6121794871794872
User 62274 AUC after training: 0.6105769230769231
User 62274 does not improve AUC. Reverting changes.
Training on augumented user 124218 9/50 current_auc = 0.6121794871794872
User 124218 AUC after training: 0.6121794871794872
User 124218 does not improve AUC. Reverting changes.
Training on augumented user 70602 10/50 current_auc = 0.6121794871794872
User 70602 AUC after training: 0.6121794871794872
User 70602 does not improve AUC. Reverting changes.
Training on augumented user 14235 11/50 current_auc = 0.6121794871794872
User 14235 AUC after training: 0.6105769230769231
User 14235 does not improve AUC. Reverting changes.
Training on augumented user 22879 12/50 current_auc = 0.6121794871794872
User 22879 AUC after training: 0.6121794871794872
User 22879 does not improve AUC. Reverting changes.
Training on augumented user 111563 13/50 current_auc = 0.6121794871794872
User 111563 AUC after training: 0.6121794871794872
User 111563 does not improve AUC. Reverting changes.
Training on augumented user 8260 14/50 current_auc = 0.6121794871794872
User 8260 AUC after training: 0.6121794871794872
User 8260 does not improve AUC. Reverting changes.
Training on augumented user 9427 15/50 current_auc = 0.6121794871794872
User 9427 AUC after training: 0.6105769230769231
User 9427 does not improve AUC. Reverting changes.
Training on augumented user 70686 16/50 current_auc = 0.6121794871794872
User 70686 AUC after training: 0.6137820512820513
User 70686 improves AUC. Keeping the model.
Training on augumented user 8810 17/50 current_auc = 0.6137820512820513
User 8810 AUC after training: 0.6137820512820513
User 8810 does not improve AUC. Reverting changes.
Training on augumented user 85029 18/50 current_auc = 0.6137820512820513
User 85029 AUC after training: 0.6137820512820513
User 85029 does not improve AUC. Reverting changes.
Training on augumented user 47421 19/50 current_auc = 0.6137820512820513
User 47421 AUC after training: 0.6105769230769231
User 47421 does not improve AUC. Reverting changes.
Training on augumented user 55658 20/50 current_auc = 0.6137820512820513
User 55658 AUC after training: 0.6105769230769231
User 55658 does not improve AUC. Reverting changes.
Training on augumented user 72221 21/50 current_auc = 0.6137820512820513
User 72221 AUC after training: 0.6105769230769231
User 72221 does not improve AUC. Reverting changes.
Training on augumented user 92857 22/50 current_auc = 0.6137820512820513
User 92857 AUC after training: 0.6121794871794872
User 92857 does not improve AUC. Reverting changes.
Training on augumented user 118064 23/50 current_auc = 0.6137820512820513
User 118064 AUC after training: 0.6137820512820513
User 118064 does not improve AUC. Reverting changes.
Training on augumented user 120749 24/50 current_auc = 0.6137820512820513
User 120749 AUC after training: 0.6137820512820513
User 120749 does not improve AUC. Reverting changes.
Training on augumented user 78450 25/50 current_auc = 0.6137820512820513
User 78450 AUC after training: 0.6137820512820513
User 78450 does not improve AUC. Reverting changes.
Training on augumented user 78738 26/50 current_auc = 0.6137820512820513
User 78738 AUC after training: 0.6121794871794872
User 78738 does not improve AUC. Reverting changes.
Training on augumented user 9407 27/50 current_auc = 0.6137820512820513
User 9407 AUC after training: 0.6121794871794872
User 9407 does not improve AUC. Reverting changes.
Training on augumented user 21369 28/50 current_auc = 0.6137820512820513
User 21369 AUC after training: 0.6121794871794872
User 21369 does not improve AUC. Reverting changes.
Training on augumented user 50180 29/50 current_auc = 0.6137820512820513
User 50180 AUC after training: 0.6121794871794872
User 50180 does not improve AUC. Reverting changes.
Training on augumented user 38239 30/50 current_auc = 0.6137820512820513
User 38239 AUC after training: 0.6105769230769231
User 38239 does not improve AUC. Reverting changes.
Training on augumented user 131142 31/50 current_auc = 0.6137820512820513
User 131142 AUC after training: 0.6137820512820513
User 131142 does not improve AUC. Reverting changes.
Training on augumented user 917 32/50 current_auc = 0.6137820512820513
User 917 AUC after training: 0.6137820512820513
User 917 does not improve AUC. Reverting changes.
Training on augumented user 63674 33/50 current_auc = 0.6137820512820513
User 63674 AUC after training: 0.6121794871794872
User 63674 does not improve AUC. Reverting changes.
Training on augumented user 61701 34/50 current_auc = 0.6137820512820513
User 61701 AUC after training: 0.6121794871794872
User 61701 does not improve AUC. Reverting changes.
Training on augumented user 31825 35/50 current_auc = 0.6137820512820513
User 31825 AUC after training: 0.6137820512820513
User 31825 does not improve AUC. Reverting changes.
Training on augumented user 86383 36/50 current_auc = 0.6137820512820513
User 86383 AUC after training: 0.6105769230769231
User 86383 does not improve AUC. Reverting changes.
Training on augumented user 125581 37/50 current_auc = 0.6137820512820513
User 125581 AUC after training: 0.6137820512820513
User 125581 does not improve AUC. Reverting changes.
Training on augumented user 6157 38/50 current_auc = 0.6137820512820513
User 6157 AUC after training: 0.6105769230769231
User 6157 does not improve AUC. Reverting changes.
Training on augumented user 110726 39/50 current_auc = 0.6137820512820513
User 110726 AUC after training: 0.6137820512820513
User 110726 does not improve AUC. Reverting changes.
Training on augumented user 119592 40/50 current_auc = 0.6137820512820513
User 119592 AUC after training: 0.6137820512820513
User 119592 does not improve AUC. Reverting changes.
Training on augumented user 61087 41/50 current_auc = 0.6137820512820513
User 61087 AUC after training: 0.6121794871794872
User 61087 does not improve AUC. Reverting changes.
Training on augumented user 35627 42/50 current_auc = 0.6137820512820513
User 35627 AUC after training: 0.6137820512820513
User 35627 does not improve AUC. Reverting changes.
Training on augumented user 46893 43/50 current_auc = 0.6137820512820513
User 46893 AUC after training: 0.6121794871794872
User 46893 does not improve AUC. Reverting changes.
Training on augumented user 98014 44/50 current_auc = 0.6137820512820513
User 98014 AUC after training: 0.6137820512820513
User 98014 does not improve AUC. Reverting changes.
Training on augumented user 11931 45/50 current_auc = 0.6137820512820513
User 11931 AUC after training: 0.6105769230769231
User 11931 does not improve AUC. Reverting changes.
Training on augumented user 46345 46/50 current_auc = 0.6137820512820513
User 46345 AUC after training: 0.6105769230769231
User 46345 does not improve AUC. Reverting changes.
Training on augumented user 40443 47/50 current_auc = 0.6137820512820513
User 40443 AUC after training: 0.6121794871794872
User 40443 does not improve AUC. Reverting changes.
Training on augumented user 8349 48/50 current_auc = 0.6137820512820513
User 8349 AUC after training: 0.6121794871794872
User 8349 does not improve AUC. Reverting changes.
Training on augumented user 93670 49/50 current_auc = 0.6137820512820513
User 93670 AUC after training: 0.6105769230769231
User 93670 does not improve AUC. Reverting changes.
[2024-12-02 17:57:56.108845] start test user 97198 38/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:57:56.513810] start test user 97198 38/567 recall augumented users by random, augumented_users = [35625, 77390, 40530, 76994, 24565, 4976, 47271, 109007, 72312, 36442, 102799, 5937, 134536, 64418, 131232, 43117, 82056, 4800, 101844, 18188, 88792, 127042, 94123, 124155, 64682, 126934, 19113, 84355, 21647, 104446, 23850, 35582, 119451, 129031, 22788, 133832, 1393, 108417, 48894, 562, 24588, 35870, 36498, 127211, 4252, 29690, 29440, 94935, 115517, 61374]
[2024-12-02 17:57:56.528816] user = 97198 Cloud 38/567
[2024-12-02 17:57:56.552462] user = 97198 Local 38/567
[2024-12-02 17:57:56.619955] user = 97198 Local+ 38/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:57:58.844825] user = 97198 MPDA- 38/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.729191489361702
Training on augumented user 35625 0/50 current_auc = 0.729191489361702
User 35625 AUC after training: 0.7295319148936171
User 35625 improves AUC. Keeping the model.
Training on augumented user 77390 1/50 current_auc = 0.7295319148936171
User 77390 AUC after training: 0.7294468085106383
User 77390 does not improve AUC. Reverting changes.
Training on augumented user 40530 2/50 current_auc = 0.7295319148936171
User 40530 AUC after training: 0.7293617021276597
User 40530 does not improve AUC. Reverting changes.
Training on augumented user 76994 3/50 current_auc = 0.7295319148936171
User 76994 AUC after training: 0.7299574468085106
User 76994 improves AUC. Keeping the model.
Training on augumented user 24565 4/50 current_auc = 0.7299574468085106
User 24565 AUC after training: 0.7302127659574468
User 24565 improves AUC. Keeping the model.
Training on augumented user 4976 5/50 current_auc = 0.7302127659574468
User 4976 AUC after training: 0.7307234042553191
User 4976 improves AUC. Keeping the model.
Training on augumented user 47271 6/50 current_auc = 0.7307234042553191
User 47271 AUC after training: 0.7297872340425533
User 47271 does not improve AUC. Reverting changes.
Training on augumented user 109007 7/50 current_auc = 0.7307234042553191
User 109007 AUC after training: 0.7308936170212766
User 109007 improves AUC. Keeping the model.
Training on augumented user 72312 8/50 current_auc = 0.7308936170212766
User 72312 AUC after training: 0.731063829787234
User 72312 improves AUC. Keeping the model.
Training on augumented user 36442 9/50 current_auc = 0.731063829787234
User 36442 AUC after training: 0.7302978723404255
User 36442 does not improve AUC. Reverting changes.
Training on augumented user 102799 10/50 current_auc = 0.731063829787234
User 102799 AUC after training: 0.7306382978723405
User 102799 does not improve AUC. Reverting changes.
Training on augumented user 5937 11/50 current_auc = 0.731063829787234
User 5937 AUC after training: 0.731063829787234
User 5937 does not improve AUC. Reverting changes.
Training on augumented user 134536 12/50 current_auc = 0.731063829787234
User 134536 AUC after training: 0.7307234042553191
User 134536 does not improve AUC. Reverting changes.
Training on augumented user 64418 13/50 current_auc = 0.731063829787234
User 64418 AUC after training: 0.7306382978723405
User 64418 does not improve AUC. Reverting changes.
Training on augumented user 131232 14/50 current_auc = 0.731063829787234
User 131232 AUC after training: 0.7307234042553191
User 131232 does not improve AUC. Reverting changes.
Training on augumented user 43117 15/50 current_auc = 0.731063829787234
User 43117 AUC after training: 0.7304680851063831
User 43117 does not improve AUC. Reverting changes.
Training on augumented user 82056 16/50 current_auc = 0.731063829787234
User 82056 AUC after training: 0.7306382978723405
User 82056 does not improve AUC. Reverting changes.
Training on augumented user 4800 17/50 current_auc = 0.731063829787234
User 4800 AUC after training: 0.7307234042553191
User 4800 does not improve AUC. Reverting changes.
Training on augumented user 101844 18/50 current_auc = 0.731063829787234
User 101844 AUC after training: 0.7305531914893617
User 101844 does not improve AUC. Reverting changes.
Training on augumented user 18188 19/50 current_auc = 0.731063829787234
User 18188 AUC after training: 0.7302978723404256
User 18188 does not improve AUC. Reverting changes.
Training on augumented user 88792 20/50 current_auc = 0.731063829787234
User 88792 AUC after training: 0.7310638297872339
User 88792 does not improve AUC. Reverting changes.
Training on augumented user 127042 21/50 current_auc = 0.731063829787234
User 127042 AUC after training: 0.7308936170212765
User 127042 does not improve AUC. Reverting changes.
Training on augumented user 94123 22/50 current_auc = 0.731063829787234
User 94123 AUC after training: 0.7307234042553191
User 94123 does not improve AUC. Reverting changes.
Training on augumented user 124155 23/50 current_auc = 0.731063829787234
User 124155 AUC after training: 0.7308085106382979
User 124155 does not improve AUC. Reverting changes.
Training on augumented user 64682 24/50 current_auc = 0.731063829787234
User 64682 AUC after training: 0.730468085106383
User 64682 does not improve AUC. Reverting changes.
Training on augumented user 126934 25/50 current_auc = 0.731063829787234
User 126934 AUC after training: 0.7305531914893617
User 126934 does not improve AUC. Reverting changes.
Training on augumented user 19113 26/50 current_auc = 0.731063829787234
User 19113 AUC after training: 0.7305531914893617
User 19113 does not improve AUC. Reverting changes.
Training on augumented user 84355 27/50 current_auc = 0.731063829787234
User 84355 AUC after training: 0.7307234042553192
User 84355 does not improve AUC. Reverting changes.
Training on augumented user 21647 28/50 current_auc = 0.731063829787234
User 21647 AUC after training: 0.7311489361702128
User 21647 improves AUC. Keeping the model.
Training on augumented user 104446 29/50 current_auc = 0.7311489361702128
User 104446 AUC after training: 0.7307234042553191
User 104446 does not improve AUC. Reverting changes.
Training on augumented user 23850 30/50 current_auc = 0.7311489361702128
User 23850 AUC after training: 0.7303829787234043
User 23850 does not improve AUC. Reverting changes.
Training on augumented user 35582 31/50 current_auc = 0.7311489361702128
User 35582 AUC after training: 0.730468085106383
User 35582 does not improve AUC. Reverting changes.
Training on augumented user 119451 32/50 current_auc = 0.7311489361702128
User 119451 AUC after training: 0.7306382978723405
User 119451 does not improve AUC. Reverting changes.
Training on augumented user 129031 33/50 current_auc = 0.7311489361702128
User 129031 AUC after training: 0.7301276595744681
User 129031 does not improve AUC. Reverting changes.
Training on augumented user 22788 34/50 current_auc = 0.7311489361702128
User 22788 AUC after training: 0.7308936170212766
User 22788 does not improve AUC. Reverting changes.
Training on augumented user 133832 35/50 current_auc = 0.7311489361702128
User 133832 AUC after training: 0.7312340425531915
User 133832 improves AUC. Keeping the model.
Training on augumented user 1393 36/50 current_auc = 0.7312340425531915
User 1393 AUC after training: 0.730468085106383
User 1393 does not improve AUC. Reverting changes.
Training on augumented user 108417 37/50 current_auc = 0.7312340425531915
User 108417 AUC after training: 0.7312340425531915
User 108417 does not improve AUC. Reverting changes.
Training on augumented user 48894 38/50 current_auc = 0.7312340425531915
User 48894 AUC after training: 0.7313191489361702
User 48894 improves AUC. Keeping the model.
Training on augumented user 562 39/50 current_auc = 0.7313191489361702
User 562 AUC after training: 0.7314893617021277
User 562 improves AUC. Keeping the model.
Training on augumented user 24588 40/50 current_auc = 0.7314893617021277
User 24588 AUC after training: 0.7313191489361702
User 24588 does not improve AUC. Reverting changes.
Training on augumented user 35870 41/50 current_auc = 0.7314893617021277
User 35870 AUC after training: 0.7311489361702128
User 35870 does not improve AUC. Reverting changes.
Training on augumented user 36498 42/50 current_auc = 0.7314893617021277
User 36498 AUC after training: 0.7310638297872339
User 36498 does not improve AUC. Reverting changes.
Training on augumented user 127211 43/50 current_auc = 0.7314893617021277
User 127211 AUC after training: 0.7313191489361702
User 127211 does not improve AUC. Reverting changes.
Training on augumented user 4252 44/50 current_auc = 0.7314893617021277
User 4252 AUC after training: 0.7309787234042554
User 4252 does not improve AUC. Reverting changes.
Training on augumented user 29690 45/50 current_auc = 0.7314893617021277
User 29690 AUC after training: 0.7306382978723405
User 29690 does not improve AUC. Reverting changes.
Training on augumented user 29440 46/50 current_auc = 0.7314893617021277
User 29440 AUC after training: 0.7308085106382979
User 29440 does not improve AUC. Reverting changes.
Training on augumented user 94935 47/50 current_auc = 0.7314893617021277
User 94935 AUC after training: 0.7309787234042553
User 94935 does not improve AUC. Reverting changes.
Training on augumented user 115517 48/50 current_auc = 0.7314893617021277
User 115517 AUC after training: 0.7314042553191489
User 115517 does not improve AUC. Reverting changes.
Training on augumented user 61374 49/50 current_auc = 0.7314893617021277
User 61374 AUC after training: 0.7314893617021276
User 61374 does not improve AUC. Reverting changes.
[2024-12-02 17:58:25.754208] start test user 97215 39/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:58:26.433720] start test user 97215 39/567 recall augumented users by random, augumented_users = [74971, 19851, 69310, 31380, 31530, 132496, 9641, 34033, 96835, 378, 86673, 23844, 101257, 96631, 125831, 76274, 14147, 88246, 47463, 35705, 31227, 5054, 130778, 71320, 22852, 100466, 2104, 132949, 48982, 15119, 6315, 38242, 111425, 52841, 132955, 129910, 21043, 8625, 61595, 62989, 110890, 126377, 81451, 10162, 104465, 36047, 26813, 2147, 32657, 83896]
[2024-12-02 17:58:26.470125] user = 97215 Cloud 39/567
[2024-12-02 17:58:26.510923] user = 97215 Local 39/567
[2024-12-02 17:58:26.697051] user = 97215 Local+ 39/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:58:29.224201] user = 97215 MPDA- 39/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6179270227392915
Training on augumented user 74971 0/50 current_auc = 0.6179270227392915
User 74971 AUC after training: 0.6179270227392915
User 74971 does not improve AUC. Reverting changes.
Training on augumented user 19851 1/50 current_auc = 0.6179270227392915
User 19851 AUC after training: 0.6189846641988366
User 19851 improves AUC. Keeping the model.
Training on augumented user 69310 2/50 current_auc = 0.6189846641988366
User 69310 AUC after training: 0.6187202538339504
User 69310 does not improve AUC. Reverting changes.
Training on augumented user 31380 3/50 current_auc = 0.6189846641988366
User 31380 AUC after training: 0.6187202538339502
User 31380 does not improve AUC. Reverting changes.
Training on augumented user 31530 4/50 current_auc = 0.6189846641988366
User 31530 AUC after training: 0.6185880486515072
User 31530 does not improve AUC. Reverting changes.
Training on augumented user 132496 5/50 current_auc = 0.6189846641988366
User 132496 AUC after training: 0.6192490745637229
User 132496 improves AUC. Keeping the model.
Training on augumented user 9641 6/50 current_auc = 0.6192490745637229
User 9641 AUC after training: 0.619381279746166
User 9641 improves AUC. Keeping the model.
Training on augumented user 34033 7/50 current_auc = 0.619381279746166
User 34033 AUC after training: 0.6195134849286092
User 34033 improves AUC. Keeping the model.
Training on augumented user 96835 8/50 current_auc = 0.6195134849286092
User 96835 AUC after training: 0.619381279746166
User 96835 does not improve AUC. Reverting changes.
Training on augumented user 378 9/50 current_auc = 0.6195134849286092
User 378 AUC after training: 0.6179270227392915
User 378 does not improve AUC. Reverting changes.
Training on augumented user 86673 10/50 current_auc = 0.6195134849286092
User 86673 AUC after training: 0.6191168693812797
User 86673 does not improve AUC. Reverting changes.
Training on augumented user 23844 11/50 current_auc = 0.6195134849286092
User 23844 AUC after training: 0.6195134849286092
User 23844 does not improve AUC. Reverting changes.
Training on augumented user 101257 12/50 current_auc = 0.6195134849286092
User 101257 AUC after training: 0.6187202538339502
User 101257 does not improve AUC. Reverting changes.
Training on augumented user 96631 13/50 current_auc = 0.6195134849286092
User 96631 AUC after training: 0.6193812797461662
User 96631 does not improve AUC. Reverting changes.
Training on augumented user 125831 14/50 current_auc = 0.6195134849286092
User 125831 AUC after training: 0.6212321523003701
User 125831 improves AUC. Keeping the model.
Training on augumented user 76274 15/50 current_auc = 0.6212321523003701
User 76274 AUC after training: 0.6212321523003701
User 76274 does not improve AUC. Reverting changes.
Training on augumented user 14147 16/50 current_auc = 0.6212321523003701
User 14147 AUC after training: 0.6217609730301428
User 14147 improves AUC. Keeping the model.
Training on augumented user 88246 17/50 current_auc = 0.6217609730301428
User 88246 AUC after training: 0.6221575885774723
User 88246 improves AUC. Keeping the model.
Training on augumented user 47463 18/50 current_auc = 0.6221575885774723
User 47463 AUC after training: 0.6224219989423585
User 47463 improves AUC. Keeping the model.
Training on augumented user 35705 19/50 current_auc = 0.6224219989423585
User 35705 AUC after training: 0.6199101004759386
User 35705 does not improve AUC. Reverting changes.
Training on augumented user 31227 20/50 current_auc = 0.6224219989423585
User 31227 AUC after training: 0.621099947117927
User 31227 does not improve AUC. Reverting changes.
Training on augumented user 5054 21/50 current_auc = 0.6224219989423585
User 5054 AUC after training: 0.621099947117927
User 5054 does not improve AUC. Reverting changes.
Training on augumented user 130778 22/50 current_auc = 0.6224219989423585
User 130778 AUC after training: 0.6222897937599154
User 130778 does not improve AUC. Reverting changes.
Training on augumented user 71320 23/50 current_auc = 0.6224219989423585
User 71320 AUC after training: 0.6217609730301428
User 71320 does not improve AUC. Reverting changes.
Training on augumented user 22852 24/50 current_auc = 0.6224219989423585
User 22852 AUC after training: 0.6218931782125859
User 22852 does not improve AUC. Reverting changes.
Training on augumented user 100466 25/50 current_auc = 0.6224219989423585
User 100466 AUC after training: 0.6220253833950291
User 100466 does not improve AUC. Reverting changes.
Training on augumented user 2104 26/50 current_auc = 0.6224219989423585
User 2104 AUC after training: 0.6207033315705976
User 2104 does not improve AUC. Reverting changes.
Training on augumented user 132949 27/50 current_auc = 0.6224219989423585
User 132949 AUC after training: 0.6221575885774723
User 132949 does not improve AUC. Reverting changes.
Training on augumented user 48982 28/50 current_auc = 0.6224219989423585
User 48982 AUC after training: 0.6213643574828134
User 48982 does not improve AUC. Reverting changes.
Training on augumented user 15119 29/50 current_auc = 0.6224219989423585
User 15119 AUC after training: 0.6220253833950291
User 15119 does not improve AUC. Reverting changes.
Training on augumented user 6315 30/50 current_auc = 0.6224219989423585
User 6315 AUC after training: 0.6212321523003701
User 6315 does not improve AUC. Reverting changes.
Training on augumented user 38242 31/50 current_auc = 0.6224219989423585
User 38242 AUC after training: 0.6224219989423585
User 38242 does not improve AUC. Reverting changes.
Training on augumented user 111425 32/50 current_auc = 0.6224219989423585
User 111425 AUC after training: 0.6224219989423585
User 111425 does not improve AUC. Reverting changes.
Training on augumented user 52841 33/50 current_auc = 0.6224219989423585
User 52841 AUC after training: 0.6221575885774722
User 52841 does not improve AUC. Reverting changes.
Training on augumented user 132955 34/50 current_auc = 0.6224219989423585
User 132955 AUC after training: 0.6222897937599153
User 132955 does not improve AUC. Reverting changes.
Training on augumented user 129910 35/50 current_auc = 0.6224219989423585
User 129910 AUC after training: 0.6212321523003701
User 129910 does not improve AUC. Reverting changes.
Training on augumented user 21043 36/50 current_auc = 0.6224219989423585
User 21043 AUC after training: 0.6225542041248017
User 21043 improves AUC. Keeping the model.
Training on augumented user 8625 37/50 current_auc = 0.6225542041248017
User 8625 AUC after training: 0.6224219989423585
User 8625 does not improve AUC. Reverting changes.
Training on augumented user 61595 38/50 current_auc = 0.6225542041248017
User 61595 AUC after training: 0.6225542041248018
User 61595 improves AUC. Keeping the model.
Training on augumented user 62989 39/50 current_auc = 0.6225542041248018
User 62989 AUC after training: 0.6208355367530407
User 62989 does not improve AUC. Reverting changes.
Training on augumented user 110890 40/50 current_auc = 0.6225542041248018
User 110890 AUC after training: 0.6207033315705976
User 110890 does not improve AUC. Reverting changes.
Training on augumented user 126377 41/50 current_auc = 0.6225542041248018
User 126377 AUC after training: 0.6225542041248018
User 126377 does not improve AUC. Reverting changes.
Training on augumented user 81451 42/50 current_auc = 0.6225542041248018
User 81451 AUC after training: 0.6224219989423585
User 81451 does not improve AUC. Reverting changes.
Training on augumented user 10162 43/50 current_auc = 0.6225542041248018
User 10162 AUC after training: 0.6228186144896879
User 10162 improves AUC. Keeping the model.
Training on augumented user 104465 44/50 current_auc = 0.6228186144896879
User 104465 AUC after training: 0.6225542041248018
User 104465 does not improve AUC. Reverting changes.
Training on augumented user 36047 45/50 current_auc = 0.6228186144896879
User 36047 AUC after training: 0.6220253833950291
User 36047 does not improve AUC. Reverting changes.
Training on augumented user 26813 46/50 current_auc = 0.6228186144896879
User 26813 AUC after training: 0.622818614489688
User 26813 improves AUC. Keeping the model.
Training on augumented user 2147 47/50 current_auc = 0.622818614489688
User 2147 AUC after training: 0.6224219989423586
User 2147 does not improve AUC. Reverting changes.
Training on augumented user 32657 48/50 current_auc = 0.622818614489688
User 32657 AUC after training: 0.6224219989423585
User 32657 does not improve AUC. Reverting changes.
Training on augumented user 83896 49/50 current_auc = 0.622818614489688
User 83896 AUC after training: 0.6224219989423585
User 83896 does not improve AUC. Reverting changes.
[2024-12-02 17:58:59.699272] start test user 97249 40/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:59:00.443066] start test user 97249 40/567 recall augumented users by random, augumented_users = [103648, 59815, 116722, 93305, 124406, 113688, 1947, 89087, 106115, 15570, 45966, 95317, 74447, 38767, 55609, 35957, 46506, 10255, 123165, 102161, 14162, 8832, 136375, 6549, 29600, 84646, 83507, 82118, 69917, 23843, 28543, 5808, 32370, 13300, 12017, 87802, 18782, 49782, 2029, 32518, 612, 89174, 39071, 93108, 123023, 87392, 87467, 61041, 129898, 36705]
[2024-12-02 17:59:00.458727] user = 97249 Cloud 40/567
[2024-12-02 17:59:00.469422] user = 97249 Local 40/567
[2024-12-02 17:59:00.523299] user = 97249 Local+ 40/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:59:03.081981] user = 97249 MPDA- 40/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6538461538461539
Training on augumented user 103648 0/50 current_auc = 0.6538461538461539
User 103648 AUC after training: 0.6538461538461539
User 103648 does not improve AUC. Reverting changes.
Training on augumented user 59815 1/50 current_auc = 0.6538461538461539
User 59815 AUC after training: 0.6538461538461539
User 59815 does not improve AUC. Reverting changes.
Training on augumented user 116722 2/50 current_auc = 0.6538461538461539
User 116722 AUC after training: 0.6538461538461539
User 116722 does not improve AUC. Reverting changes.
Training on augumented user 93305 3/50 current_auc = 0.6538461538461539
User 93305 AUC after training: 0.6538461538461539
User 93305 does not improve AUC. Reverting changes.
Training on augumented user 124406 4/50 current_auc = 0.6538461538461539
User 124406 AUC after training: 0.6538461538461539
User 124406 does not improve AUC. Reverting changes.
Training on augumented user 113688 5/50 current_auc = 0.6538461538461539
User 113688 AUC after training: 0.6153846153846154
User 113688 does not improve AUC. Reverting changes.
Training on augumented user 1947 6/50 current_auc = 0.6538461538461539
User 1947 AUC after training: 0.6538461538461539
User 1947 does not improve AUC. Reverting changes.
Training on augumented user 89087 7/50 current_auc = 0.6538461538461539
User 89087 AUC after training: 0.6538461538461539
User 89087 does not improve AUC. Reverting changes.
Training on augumented user 106115 8/50 current_auc = 0.6538461538461539
User 106115 AUC after training: 0.6538461538461539
User 106115 does not improve AUC. Reverting changes.
Training on augumented user 15570 9/50 current_auc = 0.6538461538461539
User 15570 AUC after training: 0.6538461538461539
User 15570 does not improve AUC. Reverting changes.
Training on augumented user 45966 10/50 current_auc = 0.6538461538461539
User 45966 AUC after training: 0.6538461538461539
User 45966 does not improve AUC. Reverting changes.
Training on augumented user 95317 11/50 current_auc = 0.6538461538461539
User 95317 AUC after training: 0.6538461538461539
User 95317 does not improve AUC. Reverting changes.
Training on augumented user 74447 12/50 current_auc = 0.6538461538461539
User 74447 AUC after training: 0.6538461538461539
User 74447 does not improve AUC. Reverting changes.
Training on augumented user 38767 13/50 current_auc = 0.6538461538461539
User 38767 AUC after training: 0.6538461538461539
User 38767 does not improve AUC. Reverting changes.
Training on augumented user 55609 14/50 current_auc = 0.6538461538461539
User 55609 AUC after training: 0.6538461538461539
User 55609 does not improve AUC. Reverting changes.
Training on augumented user 35957 15/50 current_auc = 0.6538461538461539
User 35957 AUC after training: 0.6538461538461539
User 35957 does not improve AUC. Reverting changes.
Training on augumented user 46506 16/50 current_auc = 0.6538461538461539
User 46506 AUC after training: 0.6538461538461539
User 46506 does not improve AUC. Reverting changes.
Training on augumented user 10255 17/50 current_auc = 0.6538461538461539
User 10255 AUC after training: 0.5769230769230769
User 10255 does not improve AUC. Reverting changes.
Training on augumented user 123165 18/50 current_auc = 0.6538461538461539
User 123165 AUC after training: 0.6538461538461539
User 123165 does not improve AUC. Reverting changes.
Training on augumented user 102161 19/50 current_auc = 0.6538461538461539
User 102161 AUC after training: 0.6538461538461539
User 102161 does not improve AUC. Reverting changes.
Training on augumented user 14162 20/50 current_auc = 0.6538461538461539
User 14162 AUC after training: 0.6538461538461539
User 14162 does not improve AUC. Reverting changes.
Training on augumented user 8832 21/50 current_auc = 0.6538461538461539
User 8832 AUC after training: 0.6538461538461539
User 8832 does not improve AUC. Reverting changes.
Training on augumented user 136375 22/50 current_auc = 0.6538461538461539
User 136375 AUC after training: 0.6538461538461539
User 136375 does not improve AUC. Reverting changes.
Training on augumented user 6549 23/50 current_auc = 0.6538461538461539
User 6549 AUC after training: 0.6538461538461539
User 6549 does not improve AUC. Reverting changes.
Training on augumented user 29600 24/50 current_auc = 0.6538461538461539
User 29600 AUC after training: 0.6538461538461539
User 29600 does not improve AUC. Reverting changes.
Training on augumented user 84646 25/50 current_auc = 0.6538461538461539
User 84646 AUC after training: 0.6538461538461539
User 84646 does not improve AUC. Reverting changes.
Training on augumented user 83507 26/50 current_auc = 0.6538461538461539
User 83507 AUC after training: 0.6538461538461539
User 83507 does not improve AUC. Reverting changes.
Training on augumented user 82118 27/50 current_auc = 0.6538461538461539
User 82118 AUC after training: 0.6538461538461539
User 82118 does not improve AUC. Reverting changes.
Training on augumented user 69917 28/50 current_auc = 0.6538461538461539
User 69917 AUC after training: 0.6538461538461539
User 69917 does not improve AUC. Reverting changes.
Training on augumented user 23843 29/50 current_auc = 0.6538461538461539
User 23843 AUC after training: 0.6538461538461539
User 23843 does not improve AUC. Reverting changes.
Training on augumented user 28543 30/50 current_auc = 0.6538461538461539
User 28543 AUC after training: 0.6538461538461539
User 28543 does not improve AUC. Reverting changes.
Training on augumented user 5808 31/50 current_auc = 0.6538461538461539
User 5808 AUC after training: 0.6538461538461539
User 5808 does not improve AUC. Reverting changes.
Training on augumented user 32370 32/50 current_auc = 0.6538461538461539
User 32370 AUC after training: 0.6538461538461539
User 32370 does not improve AUC. Reverting changes.
Training on augumented user 13300 33/50 current_auc = 0.6538461538461539
User 13300 AUC after training: 0.6153846153846154
User 13300 does not improve AUC. Reverting changes.
Training on augumented user 12017 34/50 current_auc = 0.6538461538461539
User 12017 AUC after training: 0.6538461538461539
User 12017 does not improve AUC. Reverting changes.
Training on augumented user 87802 35/50 current_auc = 0.6538461538461539
User 87802 AUC after training: 0.6153846153846154
User 87802 does not improve AUC. Reverting changes.
Training on augumented user 18782 36/50 current_auc = 0.6538461538461539
User 18782 AUC after training: 0.6538461538461539
User 18782 does not improve AUC. Reverting changes.
Training on augumented user 49782 37/50 current_auc = 0.6538461538461539
User 49782 AUC after training: 0.6538461538461539
User 49782 does not improve AUC. Reverting changes.
Training on augumented user 2029 38/50 current_auc = 0.6538461538461539
User 2029 AUC after training: 0.6538461538461539
User 2029 does not improve AUC. Reverting changes.
Training on augumented user 32518 39/50 current_auc = 0.6538461538461539
User 32518 AUC after training: 0.6538461538461539
User 32518 does not improve AUC. Reverting changes.
Training on augumented user 612 40/50 current_auc = 0.6538461538461539
User 612 AUC after training: 0.6538461538461539
User 612 does not improve AUC. Reverting changes.
Training on augumented user 89174 41/50 current_auc = 0.6538461538461539
User 89174 AUC after training: 0.6538461538461539
User 89174 does not improve AUC. Reverting changes.
Training on augumented user 39071 42/50 current_auc = 0.6538461538461539
User 39071 AUC after training: 0.6923076923076923
User 39071 improves AUC. Keeping the model.
Training on augumented user 93108 43/50 current_auc = 0.6923076923076923
User 93108 AUC after training: 0.6923076923076923
User 93108 does not improve AUC. Reverting changes.
Training on augumented user 123023 44/50 current_auc = 0.6923076923076923
User 123023 AUC after training: 0.6923076923076923
User 123023 does not improve AUC. Reverting changes.
Training on augumented user 87392 45/50 current_auc = 0.6923076923076923
User 87392 AUC after training: 0.6923076923076923
User 87392 does not improve AUC. Reverting changes.
Training on augumented user 87467 46/50 current_auc = 0.6923076923076923
User 87467 AUC after training: 0.6538461538461539
User 87467 does not improve AUC. Reverting changes.
Training on augumented user 61041 47/50 current_auc = 0.6923076923076923
User 61041 AUC after training: 0.6538461538461539
User 61041 does not improve AUC. Reverting changes.
Training on augumented user 129898 48/50 current_auc = 0.6923076923076923
User 129898 AUC after training: 0.7307692307692308
User 129898 improves AUC. Keeping the model.
Training on augumented user 36705 49/50 current_auc = 0.7307692307692308
User 36705 AUC after training: 0.6923076923076923
User 36705 does not improve AUC. Reverting changes.
[2024-12-02 17:59:35.511292] start test user 97277 41/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:59:36.391797] start test user 97277 41/567 recall augumented users by random, augumented_users = [86548, 28850, 22931, 95965, 69184, 48560, 110917, 115743, 90378, 6261, 57884, 110505, 130154, 1605, 54160, 38794, 62257, 12415, 106751, 75828, 47561, 105695, 32980, 135075, 35756, 60017, 47529, 98376, 31191, 19625, 32304, 118448, 27088, 62694, 62182, 84507, 89338, 45337, 8423, 89228, 26991, 99962, 114035, 52667, 44715, 19252, 40423, 38662, 2134, 44374]
[2024-12-02 17:59:36.423824] user = 97277 Cloud 41/567
[2024-12-02 17:59:36.472525] user = 97277 Local 41/567
[2024-12-02 17:59:36.620582] user = 97277 Local+ 41/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 17:59:38.863472] user = 97277 MPDA- 41/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5591665370859898
Training on augumented user 86548 0/50 current_auc = 0.5591665370859898
User 86548 AUC after training: 0.5587000466490437
User 86548 does not improve AUC. Reverting changes.
Training on augumented user 28850 1/50 current_auc = 0.5591665370859898
User 28850 AUC after training: 0.5577670657751516
User 28850 does not improve AUC. Reverting changes.
Training on augumented user 22931 2/50 current_auc = 0.5591665370859898
User 22931 AUC after training: 0.5593220338983051
User 22931 improves AUC. Keeping the model.
Training on augumented user 95965 3/50 current_auc = 0.5593220338983051
User 95965 AUC after training: 0.5587000466490438
User 95965 does not improve AUC. Reverting changes.
Training on augumented user 69184 4/50 current_auc = 0.5593220338983051
User 69184 AUC after training: 0.5594775307106206
User 69184 improves AUC. Keeping the model.
Training on augumented user 48560 5/50 current_auc = 0.5594775307106206
User 48560 AUC after training: 0.558389053024413
User 48560 does not improve AUC. Reverting changes.
Training on augumented user 110917 6/50 current_auc = 0.5594775307106206
User 110917 AUC after training: 0.5585445498367284
User 110917 does not improve AUC. Reverting changes.
Training on augumented user 115743 7/50 current_auc = 0.5594775307106206
User 115743 AUC after training: 0.5588555434613591
User 115743 does not improve AUC. Reverting changes.
Training on augumented user 90378 8/50 current_auc = 0.5594775307106206
User 90378 AUC after training: 0.5585445498367284
User 90378 does not improve AUC. Reverting changes.
Training on augumented user 6261 9/50 current_auc = 0.5594775307106206
User 6261 AUC after training: 0.5590110402736744
User 6261 does not improve AUC. Reverting changes.
Training on augumented user 57884 10/50 current_auc = 0.5594775307106206
User 57884 AUC after training: 0.5587000466490437
User 57884 does not improve AUC. Reverting changes.
Training on augumented user 110505 11/50 current_auc = 0.5594775307106206
User 110505 AUC after training: 0.557456072150521
User 110505 does not improve AUC. Reverting changes.
Training on augumented user 130154 12/50 current_auc = 0.5594775307106206
User 130154 AUC after training: 0.5594775307106205
User 130154 does not improve AUC. Reverting changes.
Training on augumented user 1605 13/50 current_auc = 0.5594775307106206
User 1605 AUC after training: 0.5588555434613591
User 1605 does not improve AUC. Reverting changes.
Training on augumented user 54160 14/50 current_auc = 0.5594775307106206
User 54160 AUC after training: 0.5537241486549526
User 54160 does not improve AUC. Reverting changes.
Training on augumented user 38794 15/50 current_auc = 0.5594775307106206
User 38794 AUC after training: 0.5591665370859896
User 38794 does not improve AUC. Reverting changes.
Training on augumented user 62257 16/50 current_auc = 0.5594775307106206
User 62257 AUC after training: 0.5597885243352512
User 62257 improves AUC. Keeping the model.
Training on augumented user 12415 17/50 current_auc = 0.5597885243352512
User 12415 AUC after training: 0.5597885243352512
User 12415 does not improve AUC. Reverting changes.
Training on augumented user 106751 18/50 current_auc = 0.5597885243352512
User 106751 AUC after training: 0.5600995179598819
User 106751 improves AUC. Keeping the model.
Training on augumented user 75828 19/50 current_auc = 0.5600995179598819
User 75828 AUC after training: 0.5596330275229358
User 75828 does not improve AUC. Reverting changes.
Training on augumented user 47561 20/50 current_auc = 0.5600995179598819
User 47561 AUC after training: 0.5591665370859897
User 47561 does not improve AUC. Reverting changes.
Training on augumented user 105695 21/50 current_auc = 0.5600995179598819
User 105695 AUC after training: 0.5610324988337739
User 105695 improves AUC. Keeping the model.
Training on augumented user 32980 22/50 current_auc = 0.5610324988337739
User 32980 AUC after training: 0.5607215052091432
User 32980 does not improve AUC. Reverting changes.
Training on augumented user 135075 23/50 current_auc = 0.5610324988337739
User 135075 AUC after training: 0.5613434924584046
User 135075 improves AUC. Keeping the model.
Training on augumented user 35756 24/50 current_auc = 0.5613434924584046
User 35756 AUC after training: 0.5600995179598819
User 35756 does not improve AUC. Reverting changes.
Training on augumented user 60017 25/50 current_auc = 0.5613434924584046
User 60017 AUC after training: 0.5621209765199814
User 60017 improves AUC. Keeping the model.
Training on augumented user 47529 26/50 current_auc = 0.5621209765199814
User 47529 AUC after training: 0.5618099828953507
User 47529 does not improve AUC. Reverting changes.
Training on augumented user 98376 27/50 current_auc = 0.5621209765199814
User 98376 AUC after training: 0.5619654797076661
User 98376 does not improve AUC. Reverting changes.
Training on augumented user 31191 28/50 current_auc = 0.5621209765199814
User 31191 AUC after training: 0.562431970144612
User 31191 improves AUC. Keeping the model.
Training on augumented user 19625 29/50 current_auc = 0.562431970144612
User 19625 AUC after training: 0.5622764733322967
User 19625 does not improve AUC. Reverting changes.
Training on augumented user 32304 30/50 current_auc = 0.562431970144612
User 32304 AUC after training: 0.5627429637692428
User 32304 improves AUC. Keeping the model.
Training on augumented user 118448 31/50 current_auc = 0.5627429637692428
User 118448 AUC after training: 0.5625874669569274
User 118448 does not improve AUC. Reverting changes.
Training on augumented user 27088 32/50 current_auc = 0.5627429637692428
User 27088 AUC after training: 0.5628984605815581
User 27088 improves AUC. Keeping the model.
Training on augumented user 62694 33/50 current_auc = 0.5628984605815581
User 62694 AUC after training: 0.5653864095786036
User 62694 improves AUC. Keeping the model.
Training on augumented user 62182 34/50 current_auc = 0.5653864095786036
User 62182 AUC after training: 0.5652309127662883
User 62182 does not improve AUC. Reverting changes.
Training on augumented user 84507 35/50 current_auc = 0.5653864095786036
User 84507 AUC after training: 0.5642979318923962
User 84507 does not improve AUC. Reverting changes.
Training on augumented user 89338 36/50 current_auc = 0.5653864095786036
User 89338 AUC after training: 0.5627429637692428
User 89338 does not improve AUC. Reverting changes.
Training on augumented user 45337 37/50 current_auc = 0.5653864095786036
User 45337 AUC after training: 0.5627429637692428
User 45337 does not improve AUC. Reverting changes.
Training on augumented user 8423 38/50 current_auc = 0.5653864095786036
User 8423 AUC after training: 0.5638314414554502
User 8423 does not improve AUC. Reverting changes.
Training on augumented user 89228 39/50 current_auc = 0.5653864095786036
User 89228 AUC after training: 0.5638314414554502
User 89228 does not improve AUC. Reverting changes.
Training on augumented user 26991 40/50 current_auc = 0.5653864095786036
User 26991 AUC after training: 0.5639869382677656
User 26991 does not improve AUC. Reverting changes.
Training on augumented user 99962 41/50 current_auc = 0.5653864095786036
User 99962 AUC after training: 0.5633649510185041
User 99962 does not improve AUC. Reverting changes.
Training on augumented user 114035 42/50 current_auc = 0.5653864095786036
User 114035 AUC after training: 0.5644534287047116
User 114035 does not improve AUC. Reverting changes.
Training on augumented user 52667 43/50 current_auc = 0.5653864095786036
User 52667 AUC after training: 0.5605660083968279
User 52667 does not improve AUC. Reverting changes.
Training on augumented user 44715 44/50 current_auc = 0.5653864095786036
User 44715 AUC after training: 0.5649199191416576
User 44715 does not improve AUC. Reverting changes.
Training on augumented user 19252 45/50 current_auc = 0.5653864095786036
User 19252 AUC after training: 0.5604105115845126
User 19252 does not improve AUC. Reverting changes.
Training on augumented user 40423 46/50 current_auc = 0.5653864095786036
User 40423 AUC after training: 0.5641424350800809
User 40423 does not improve AUC. Reverting changes.
Training on augumented user 38662 47/50 current_auc = 0.5653864095786036
User 38662 AUC after training: 0.5633649510185041
User 38662 does not improve AUC. Reverting changes.
Training on augumented user 2134 48/50 current_auc = 0.5653864095786036
User 2134 AUC after training: 0.5641424350800809
User 2134 does not improve AUC. Reverting changes.
Training on augumented user 44374 49/50 current_auc = 0.5653864095786036
User 44374 AUC after training: 0.565075415953973
User 44374 does not improve AUC. Reverting changes.
[2024-12-02 18:00:09.014277] start test user 97284 42/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:00:09.783459] start test user 97284 42/567 recall augumented users by random, augumented_users = [51360, 131942, 120551, 11471, 44337, 6444, 127394, 130447, 93324, 136809, 19640, 105250, 33853, 84561, 92883, 57734, 66208, 62561, 136638, 121351, 58421, 126259, 111558, 65425, 28852, 96746, 124753, 75568, 71701, 61966, 4832, 119582, 11299, 94564, 26971, 48551, 93814, 104148, 87638, 77038, 133695, 94584, 32073, 46932, 29895, 52901, 50857, 81869, 28264, 50685]
[2024-12-02 18:00:09.806010] user = 97284 Cloud 42/567
[2024-12-02 18:00:09.821488] user = 97284 Local 42/567
[2024-12-02 18:00:10.044676] user = 97284 Local+ 42/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:00:12.552217] user = 97284 MPDA- 42/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 51360 0/50 current_auc = 0.5
User 51360 AUC after training: 0.5
User 51360 does not improve AUC. Reverting changes.
Training on augumented user 131942 1/50 current_auc = 0.5
User 131942 AUC after training: 0.5
User 131942 does not improve AUC. Reverting changes.
Training on augumented user 120551 2/50 current_auc = 0.5
User 120551 AUC after training: 0.5
User 120551 does not improve AUC. Reverting changes.
Training on augumented user 11471 3/50 current_auc = 0.5
User 11471 AUC after training: 0.5
User 11471 does not improve AUC. Reverting changes.
Training on augumented user 44337 4/50 current_auc = 0.5
User 44337 AUC after training: 0.5
User 44337 does not improve AUC. Reverting changes.
Training on augumented user 6444 5/50 current_auc = 0.5
User 6444 AUC after training: 0.5
User 6444 does not improve AUC. Reverting changes.
Training on augumented user 127394 6/50 current_auc = 0.5
User 127394 AUC after training: 0.5
User 127394 does not improve AUC. Reverting changes.
Training on augumented user 130447 7/50 current_auc = 0.5
User 130447 AUC after training: 0.5
User 130447 does not improve AUC. Reverting changes.
Training on augumented user 93324 8/50 current_auc = 0.5
User 93324 AUC after training: 0.5
User 93324 does not improve AUC. Reverting changes.
Training on augumented user 136809 9/50 current_auc = 0.5
User 136809 AUC after training: 0.5
User 136809 does not improve AUC. Reverting changes.
Training on augumented user 19640 10/50 current_auc = 0.5
User 19640 AUC after training: 0.5
User 19640 does not improve AUC. Reverting changes.
Training on augumented user 105250 11/50 current_auc = 0.5
User 105250 AUC after training: 0.5
User 105250 does not improve AUC. Reverting changes.
Training on augumented user 33853 12/50 current_auc = 0.5
User 33853 AUC after training: 0.5
User 33853 does not improve AUC. Reverting changes.
Training on augumented user 84561 13/50 current_auc = 0.5
User 84561 AUC after training: 0.5
User 84561 does not improve AUC. Reverting changes.
Training on augumented user 92883 14/50 current_auc = 0.5
User 92883 AUC after training: 0.5
User 92883 does not improve AUC. Reverting changes.
Training on augumented user 57734 15/50 current_auc = 0.5
User 57734 AUC after training: 0.5
User 57734 does not improve AUC. Reverting changes.
Training on augumented user 66208 16/50 current_auc = 0.5
User 66208 AUC after training: 0.5
User 66208 does not improve AUC. Reverting changes.
Training on augumented user 62561 17/50 current_auc = 0.5
User 62561 AUC after training: 0.5
User 62561 does not improve AUC. Reverting changes.
Training on augumented user 136638 18/50 current_auc = 0.5
User 136638 AUC after training: 0.5
User 136638 does not improve AUC. Reverting changes.
Training on augumented user 121351 19/50 current_auc = 0.5
User 121351 AUC after training: 0.5
User 121351 does not improve AUC. Reverting changes.
Training on augumented user 58421 20/50 current_auc = 0.5
User 58421 AUC after training: 0.5
User 58421 does not improve AUC. Reverting changes.
Training on augumented user 126259 21/50 current_auc = 0.5
User 126259 AUC after training: 0.5
User 126259 does not improve AUC. Reverting changes.
Training on augumented user 111558 22/50 current_auc = 0.5
User 111558 AUC after training: 0.5
User 111558 does not improve AUC. Reverting changes.
Training on augumented user 65425 23/50 current_auc = 0.5
User 65425 AUC after training: 0.5
User 65425 does not improve AUC. Reverting changes.
Training on augumented user 28852 24/50 current_auc = 0.5
User 28852 AUC after training: 0.5
User 28852 does not improve AUC. Reverting changes.
Training on augumented user 96746 25/50 current_auc = 0.5
User 96746 AUC after training: 0.5
User 96746 does not improve AUC. Reverting changes.
Training on augumented user 124753 26/50 current_auc = 0.5
User 124753 AUC after training: 0.5
User 124753 does not improve AUC. Reverting changes.
Training on augumented user 75568 27/50 current_auc = 0.5
User 75568 AUC after training: 0.5
User 75568 does not improve AUC. Reverting changes.
Training on augumented user 71701 28/50 current_auc = 0.5
User 71701 AUC after training: 0.5
User 71701 does not improve AUC. Reverting changes.
Training on augumented user 61966 29/50 current_auc = 0.5
User 61966 AUC after training: 0.5
User 61966 does not improve AUC. Reverting changes.
Training on augumented user 4832 30/50 current_auc = 0.5
User 4832 AUC after training: 0.5
User 4832 does not improve AUC. Reverting changes.
Training on augumented user 119582 31/50 current_auc = 0.5
User 119582 AUC after training: 0.5
User 119582 does not improve AUC. Reverting changes.
Training on augumented user 11299 32/50 current_auc = 0.5
User 11299 AUC after training: 0.5
User 11299 does not improve AUC. Reverting changes.
Training on augumented user 94564 33/50 current_auc = 0.5
User 94564 AUC after training: 0.5
User 94564 does not improve AUC. Reverting changes.
Training on augumented user 26971 34/50 current_auc = 0.5
User 26971 AUC after training: 0.5
User 26971 does not improve AUC. Reverting changes.
Training on augumented user 48551 35/50 current_auc = 0.5
User 48551 AUC after training: 0.5
User 48551 does not improve AUC. Reverting changes.
Training on augumented user 93814 36/50 current_auc = 0.5
User 93814 AUC after training: 0.5
User 93814 does not improve AUC. Reverting changes.
Training on augumented user 104148 37/50 current_auc = 0.5
User 104148 AUC after training: 0.5
User 104148 does not improve AUC. Reverting changes.
Training on augumented user 87638 38/50 current_auc = 0.5
User 87638 AUC after training: 0.5
User 87638 does not improve AUC. Reverting changes.
Training on augumented user 77038 39/50 current_auc = 0.5
User 77038 AUC after training: 0.5
User 77038 does not improve AUC. Reverting changes.
Training on augumented user 133695 40/50 current_auc = 0.5
User 133695 AUC after training: 0.5
User 133695 does not improve AUC. Reverting changes.
Training on augumented user 94584 41/50 current_auc = 0.5
User 94584 AUC after training: 0.5
User 94584 does not improve AUC. Reverting changes.
Training on augumented user 32073 42/50 current_auc = 0.5
User 32073 AUC after training: 0.5
User 32073 does not improve AUC. Reverting changes.
Training on augumented user 46932 43/50 current_auc = 0.5
User 46932 AUC after training: 0.5
User 46932 does not improve AUC. Reverting changes.
Training on augumented user 29895 44/50 current_auc = 0.5
User 29895 AUC after training: 0.5
User 29895 does not improve AUC. Reverting changes.
Training on augumented user 52901 45/50 current_auc = 0.5
User 52901 AUC after training: 0.5
User 52901 does not improve AUC. Reverting changes.
Training on augumented user 50857 46/50 current_auc = 0.5
User 50857 AUC after training: 0.5
User 50857 does not improve AUC. Reverting changes.
Training on augumented user 81869 47/50 current_auc = 0.5
User 81869 AUC after training: 0.5
User 81869 does not improve AUC. Reverting changes.
Training on augumented user 28264 48/50 current_auc = 0.5
User 28264 AUC after training: 0.5
User 28264 does not improve AUC. Reverting changes.
Training on augumented user 50685 49/50 current_auc = 0.5
User 50685 AUC after training: 0.5
User 50685 does not improve AUC. Reverting changes.
[2024-12-02 18:00:42.960720] start test user 97290 43/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:00:43.470052] start test user 97290 43/567 recall augumented users by random, augumented_users = [53719, 8725, 115748, 75486, 57549, 26400, 112323, 23304, 96852, 127139, 81977, 64818, 132995, 66796, 56036, 10889, 25254, 112404, 68975, 10887, 64720, 34313, 23939, 129846, 125214, 88630, 65739, 39, 58057, 98456, 5861, 91557, 18041, 88090, 27, 38011, 46213, 130550, 31484, 106892, 28776, 86648, 128278, 56540, 80902, 138445, 49501, 117627, 32607, 35017]
[2024-12-02 18:00:43.486141] user = 97290 Cloud 43/567
[2024-12-02 18:00:43.499149] user = 97290 Local 43/567
[2024-12-02 18:00:43.618437] user = 97290 Local+ 43/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:00:45.647340] user = 97290 MPDA- 43/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5267857142857143
Training on augumented user 53719 0/50 current_auc = 0.5267857142857143
User 53719 AUC after training: 0.5251623376623377
User 53719 does not improve AUC. Reverting changes.
Training on augumented user 8725 1/50 current_auc = 0.5267857142857143
User 8725 AUC after training: 0.5284090909090908
User 8725 improves AUC. Keeping the model.
Training on augumented user 115748 2/50 current_auc = 0.5284090909090908
User 115748 AUC after training: 0.5284090909090909
User 115748 improves AUC. Keeping the model.
Training on augumented user 75486 3/50 current_auc = 0.5284090909090909
User 75486 AUC after training: 0.5267857142857142
User 75486 does not improve AUC. Reverting changes.
Training on augumented user 57549 4/50 current_auc = 0.5284090909090909
User 57549 AUC after training: 0.5284090909090908
User 57549 does not improve AUC. Reverting changes.
Training on augumented user 26400 5/50 current_auc = 0.5284090909090909
User 26400 AUC after training: 0.5280032467532467
User 26400 does not improve AUC. Reverting changes.
Training on augumented user 112323 6/50 current_auc = 0.5284090909090909
User 112323 AUC after training: 0.5280032467532467
User 112323 does not improve AUC. Reverting changes.
Training on augumented user 23304 7/50 current_auc = 0.5284090909090909
User 23304 AUC after training: 0.528814935064935
User 23304 improves AUC. Keeping the model.
Training on augumented user 96852 8/50 current_auc = 0.528814935064935
User 96852 AUC after training: 0.528814935064935
User 96852 does not improve AUC. Reverting changes.
Training on augumented user 127139 9/50 current_auc = 0.528814935064935
User 127139 AUC after training: 0.5267857142857143
User 127139 does not improve AUC. Reverting changes.
Training on augumented user 81977 10/50 current_auc = 0.528814935064935
User 81977 AUC after training: 0.5271915584415584
User 81977 does not improve AUC. Reverting changes.
Training on augumented user 64818 11/50 current_auc = 0.528814935064935
User 64818 AUC after training: 0.5267857142857143
User 64818 does not improve AUC. Reverting changes.
Training on augumented user 132995 12/50 current_auc = 0.528814935064935
User 132995 AUC after training: 0.528814935064935
User 132995 does not improve AUC. Reverting changes.
Training on augumented user 66796 13/50 current_auc = 0.528814935064935
User 66796 AUC after training: 0.5284090909090908
User 66796 does not improve AUC. Reverting changes.
Training on augumented user 56036 14/50 current_auc = 0.528814935064935
User 56036 AUC after training: 0.5280032467532467
User 56036 does not improve AUC. Reverting changes.
Training on augumented user 10889 15/50 current_auc = 0.528814935064935
User 10889 AUC after training: 0.5267857142857142
User 10889 does not improve AUC. Reverting changes.
Training on augumented user 25254 16/50 current_auc = 0.528814935064935
User 25254 AUC after training: 0.5251623376623377
User 25254 does not improve AUC. Reverting changes.
Training on augumented user 112404 17/50 current_auc = 0.528814935064935
User 112404 AUC after training: 0.5284090909090908
User 112404 does not improve AUC. Reverting changes.
Training on augumented user 68975 18/50 current_auc = 0.528814935064935
User 68975 AUC after training: 0.5271915584415584
User 68975 does not improve AUC. Reverting changes.
Training on augumented user 10887 19/50 current_auc = 0.528814935064935
User 10887 AUC after training: 0.5227272727272727
User 10887 does not improve AUC. Reverting changes.
Training on augumented user 64720 20/50 current_auc = 0.528814935064935
User 64720 AUC after training: 0.528814935064935
User 64720 does not improve AUC. Reverting changes.
Training on augumented user 34313 21/50 current_auc = 0.528814935064935
User 34313 AUC after training: 0.5239448051948052
User 34313 does not improve AUC. Reverting changes.
Training on augumented user 23939 22/50 current_auc = 0.528814935064935
User 23939 AUC after training: 0.5271915584415584
User 23939 does not improve AUC. Reverting changes.
Training on augumented user 129846 23/50 current_auc = 0.528814935064935
User 129846 AUC after training: 0.5280032467532467
User 129846 does not improve AUC. Reverting changes.
Training on augumented user 125214 24/50 current_auc = 0.528814935064935
User 125214 AUC after training: 0.5292207792207793
User 125214 improves AUC. Keeping the model.
Training on augumented user 88630 25/50 current_auc = 0.5292207792207793
User 88630 AUC after training: 0.5296266233766234
User 88630 improves AUC. Keeping the model.
Training on augumented user 65739 26/50 current_auc = 0.5296266233766234
User 65739 AUC after training: 0.5284090909090909
User 65739 does not improve AUC. Reverting changes.
Training on augumented user 39 27/50 current_auc = 0.5296266233766234
User 39 AUC after training: 0.5280032467532467
User 39 does not improve AUC. Reverting changes.
Training on augumented user 58057 28/50 current_auc = 0.5296266233766234
User 58057 AUC after training: 0.5280032467532467
User 58057 does not improve AUC. Reverting changes.
Training on augumented user 98456 29/50 current_auc = 0.5296266233766234
User 98456 AUC after training: 0.5280032467532467
User 98456 does not improve AUC. Reverting changes.
Training on augumented user 5861 30/50 current_auc = 0.5296266233766234
User 5861 AUC after training: 0.5263798701298701
User 5861 does not improve AUC. Reverting changes.
Training on augumented user 91557 31/50 current_auc = 0.5296266233766234
User 91557 AUC after training: 0.5284090909090909
User 91557 does not improve AUC. Reverting changes.
Training on augumented user 18041 32/50 current_auc = 0.5296266233766234
User 18041 AUC after training: 0.5292207792207793
User 18041 does not improve AUC. Reverting changes.
Training on augumented user 88090 33/50 current_auc = 0.5296266233766234
User 88090 AUC after training: 0.5275974025974026
User 88090 does not improve AUC. Reverting changes.
Training on augumented user 27 34/50 current_auc = 0.5296266233766234
User 27 AUC after training: 0.5288149350649352
User 27 does not improve AUC. Reverting changes.
Training on augumented user 38011 35/50 current_auc = 0.5296266233766234
User 38011 AUC after training: 0.5288149350649352
User 38011 does not improve AUC. Reverting changes.
Training on augumented user 46213 36/50 current_auc = 0.5296266233766234
User 46213 AUC after training: 0.5275974025974026
User 46213 does not improve AUC. Reverting changes.
Training on augumented user 130550 37/50 current_auc = 0.5296266233766234
User 130550 AUC after training: 0.5284090909090909
User 130550 does not improve AUC. Reverting changes.
Training on augumented user 31484 38/50 current_auc = 0.5296266233766234
User 31484 AUC after training: 0.5275974025974026
User 31484 does not improve AUC. Reverting changes.
Training on augumented user 106892 39/50 current_auc = 0.5296266233766234
User 106892 AUC after training: 0.5296266233766234
User 106892 does not improve AUC. Reverting changes.
Training on augumented user 28776 40/50 current_auc = 0.5296266233766234
User 28776 AUC after training: 0.5292207792207793
User 28776 does not improve AUC. Reverting changes.
Training on augumented user 86648 41/50 current_auc = 0.5296266233766234
User 86648 AUC after training: 0.5263798701298702
User 86648 does not improve AUC. Reverting changes.
Training on augumented user 128278 42/50 current_auc = 0.5296266233766234
User 128278 AUC after training: 0.5275974025974026
User 128278 does not improve AUC. Reverting changes.
Training on augumented user 56540 43/50 current_auc = 0.5296266233766234
User 56540 AUC after training: 0.5280032467532467
User 56540 does not improve AUC. Reverting changes.
Training on augumented user 80902 44/50 current_auc = 0.5296266233766234
User 80902 AUC after training: 0.5292207792207793
User 80902 does not improve AUC. Reverting changes.
Training on augumented user 138445 45/50 current_auc = 0.5296266233766234
User 138445 AUC after training: 0.5288149350649352
User 138445 does not improve AUC. Reverting changes.
Training on augumented user 49501 46/50 current_auc = 0.5296266233766234
User 49501 AUC after training: 0.5284090909090908
User 49501 does not improve AUC. Reverting changes.
Training on augumented user 117627 47/50 current_auc = 0.5296266233766234
User 117627 AUC after training: 0.5267857142857143
User 117627 does not improve AUC. Reverting changes.
Training on augumented user 32607 48/50 current_auc = 0.5296266233766234
User 32607 AUC after training: 0.5292207792207793
User 32607 does not improve AUC. Reverting changes.
Training on augumented user 35017 49/50 current_auc = 0.5296266233766234
User 35017 AUC after training: 0.528814935064935
User 35017 does not improve AUC. Reverting changes.
[2024-12-02 18:01:14.553114] start test user 97297 44/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:01:15.162266] start test user 97297 44/567 recall augumented users by random, augumented_users = [32378, 45826, 81270, 23307, 68960, 101250, 116323, 23110, 27818, 89070, 138189, 132448, 81769, 119932, 13407, 38544, 4657, 14305, 27346, 20834, 38465, 126407, 137743, 118958, 133004, 70691, 10077, 73471, 132577, 48671, 94690, 34307, 59880, 21394, 19377, 112605, 27241, 2078, 95100, 19027, 77843, 52342, 98479, 103732, 134728, 83262, 1160, 89791, 77393, 68997]
[2024-12-02 18:01:15.183845] user = 97297 Cloud 44/567
[2024-12-02 18:01:15.211439] user = 97297 Local 44/567
[2024-12-02 18:01:15.311911] user = 97297 Local+ 44/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:01:18.355833] user = 97297 MPDA- 44/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6750572082379862
Training on augumented user 32378 0/50 current_auc = 0.6750572082379862
User 32378 AUC after training: 0.6763285024154589
User 32378 improves AUC. Keeping the model.
Training on augumented user 45826 1/50 current_auc = 0.6763285024154589
User 45826 AUC after training: 0.6755657259089753
User 45826 does not improve AUC. Reverting changes.
Training on augumented user 81270 2/50 current_auc = 0.6763285024154589
User 81270 AUC after training: 0.6765827612509535
User 81270 improves AUC. Keeping the model.
Training on augumented user 23307 3/50 current_auc = 0.6765827612509535
User 23307 AUC after training: 0.6770912789219425
User 23307 improves AUC. Keeping the model.
Training on augumented user 68960 4/50 current_auc = 0.6770912789219425
User 68960 AUC after training: 0.6775997965929316
User 68960 improves AUC. Keeping the model.
Training on augumented user 101250 5/50 current_auc = 0.6775997965929316
User 101250 AUC after training: 0.6781083142639206
User 101250 improves AUC. Keeping the model.
Training on augumented user 116323 6/50 current_auc = 0.6781083142639206
User 116323 AUC after training: 0.6783625730994152
User 116323 improves AUC. Keeping the model.
Training on augumented user 23110 7/50 current_auc = 0.6783625730994152
User 23110 AUC after training: 0.6781083142639206
User 23110 does not improve AUC. Reverting changes.
Training on augumented user 27818 8/50 current_auc = 0.6783625730994152
User 27818 AUC after training: 0.6775997965929317
User 27818 does not improve AUC. Reverting changes.
Training on augumented user 89070 9/50 current_auc = 0.6783625730994152
User 89070 AUC after training: 0.6770912789219425
User 89070 does not improve AUC. Reverting changes.
Training on augumented user 138189 10/50 current_auc = 0.6783625730994152
User 138189 AUC after training: 0.6770912789219425
User 138189 does not improve AUC. Reverting changes.
Training on augumented user 132448 11/50 current_auc = 0.6783625730994152
User 132448 AUC after training: 0.6793796084413933
User 132448 improves AUC. Keeping the model.
Training on augumented user 81769 12/50 current_auc = 0.6793796084413933
User 81769 AUC after training: 0.6793796084413933
User 81769 does not improve AUC. Reverting changes.
Training on augumented user 119932 13/50 current_auc = 0.6793796084413933
User 119932 AUC after training: 0.6783625730994152
User 119932 does not improve AUC. Reverting changes.
Training on augumented user 13407 14/50 current_auc = 0.6793796084413933
User 13407 AUC after training: 0.6763285024154588
User 13407 does not improve AUC. Reverting changes.
Training on augumented user 38544 15/50 current_auc = 0.6793796084413933
User 38544 AUC after training: 0.6793796084413933
User 38544 does not improve AUC. Reverting changes.
Training on augumented user 4657 16/50 current_auc = 0.6793796084413933
User 4657 AUC after training: 0.6796338672768878
User 4657 improves AUC. Keeping the model.
Training on augumented user 14305 17/50 current_auc = 0.6796338672768878
User 14305 AUC after training: 0.6793796084413933
User 14305 does not improve AUC. Reverting changes.
Training on augumented user 27346 18/50 current_auc = 0.6796338672768878
User 27346 AUC after training: 0.6798881261123824
User 27346 improves AUC. Keeping the model.
Training on augumented user 20834 19/50 current_auc = 0.6798881261123824
User 20834 AUC after training: 0.6773455377574371
User 20834 does not improve AUC. Reverting changes.
Training on augumented user 38465 20/50 current_auc = 0.6798881261123824
User 38465 AUC after training: 0.6795067378591406
User 38465 does not improve AUC. Reverting changes.
Training on augumented user 126407 21/50 current_auc = 0.6798881261123824
User 126407 AUC after training: 0.6795067378591406
User 126407 does not improve AUC. Reverting changes.
Training on augumented user 137743 22/50 current_auc = 0.6798881261123824
User 137743 AUC after training: 0.679252479023646
User 137743 does not improve AUC. Reverting changes.
Training on augumented user 118958 23/50 current_auc = 0.6798881261123824
User 118958 AUC after training: 0.6789982201881515
User 118958 does not improve AUC. Reverting changes.
Training on augumented user 133004 24/50 current_auc = 0.6798881261123824
User 133004 AUC after training: 0.6807780320366132
User 133004 improves AUC. Keeping the model.
Training on augumented user 70691 25/50 current_auc = 0.6807780320366132
User 70691 AUC after training: 0.681159420289855
User 70691 improves AUC. Keeping the model.
Training on augumented user 10077 26/50 current_auc = 0.681159420289855
User 10077 AUC after training: 0.6809051614543605
User 10077 does not improve AUC. Reverting changes.
Training on augumented user 73471 27/50 current_auc = 0.681159420289855
User 73471 AUC after training: 0.6801423849478769
User 73471 does not improve AUC. Reverting changes.
Training on augumented user 132577 28/50 current_auc = 0.681159420289855
User 132577 AUC after training: 0.6805237732011187
User 132577 does not improve AUC. Reverting changes.
Training on augumented user 48671 29/50 current_auc = 0.681159420289855
User 48671 AUC after training: 0.6824307144673277
User 48671 improves AUC. Keeping the model.
Training on augumented user 94690 30/50 current_auc = 0.6824307144673277
User 94690 AUC after training: 0.682557843885075
User 94690 improves AUC. Keeping the model.
Training on augumented user 34307 31/50 current_auc = 0.682557843885075
User 34307 AUC after training: 0.679252479023646
User 34307 does not improve AUC. Reverting changes.
Training on augumented user 59880 32/50 current_auc = 0.682557843885075
User 59880 AUC after training: 0.6805237732011187
User 59880 does not improve AUC. Reverting changes.
Training on augumented user 21394 33/50 current_auc = 0.682557843885075
User 21394 AUC after training: 0.6802695143656242
User 21394 does not improve AUC. Reverting changes.
Training on augumented user 19377 34/50 current_auc = 0.682557843885075
User 19377 AUC after training: 0.6781083142639206
User 19377 does not improve AUC. Reverting changes.
Training on augumented user 112605 35/50 current_auc = 0.682557843885075
User 112605 AUC after training: 0.6764556318332062
User 112605 does not improve AUC. Reverting changes.
Training on augumented user 27241 36/50 current_auc = 0.682557843885075
User 27241 AUC after training: 0.6819221967963387
User 27241 does not improve AUC. Reverting changes.
Training on augumented user 2078 37/50 current_auc = 0.682557843885075
User 2078 AUC after training: 0.6812865497076023
User 2078 does not improve AUC. Reverting changes.
Training on augumented user 95100 38/50 current_auc = 0.682557843885075
User 95100 AUC after training: 0.6810322908721078
User 95100 does not improve AUC. Reverting changes.
Training on augumented user 19027 39/50 current_auc = 0.682557843885075
User 19027 AUC after training: 0.6805237732011188
User 19027 does not improve AUC. Reverting changes.
Training on augumented user 77843 40/50 current_auc = 0.682557843885075
User 77843 AUC after training: 0.6843376557335368
User 77843 improves AUC. Keeping the model.
Training on augumented user 52342 41/50 current_auc = 0.6843376557335368
User 52342 AUC after training: 0.6812865497076023
User 52342 does not improve AUC. Reverting changes.
Training on augumented user 98479 42/50 current_auc = 0.6843376557335368
User 98479 AUC after training: 0.6815408085430968
User 98479 does not improve AUC. Reverting changes.
Training on augumented user 103732 43/50 current_auc = 0.6843376557335368
User 103732 AUC after training: 0.6823035850495804
User 103732 does not improve AUC. Reverting changes.
Training on augumented user 134728 44/50 current_auc = 0.6843376557335368
User 134728 AUC after training: 0.6805237732011187
User 134728 does not improve AUC. Reverting changes.
Training on augumented user 83262 45/50 current_auc = 0.6843376557335368
User 83262 AUC after training: 0.6833206203915585
User 83262 does not improve AUC. Reverting changes.
Training on augumented user 1160 46/50 current_auc = 0.6843376557335368
User 1160 AUC after training: 0.6840833968980422
User 1160 does not improve AUC. Reverting changes.
Training on augumented user 89791 47/50 current_auc = 0.6843376557335368
User 89791 AUC after training: 0.6786168319349097
User 89791 does not improve AUC. Reverting changes.
Training on augumented user 77393 48/50 current_auc = 0.6843376557335368
User 77393 AUC after training: 0.6843376557335368
User 77393 does not improve AUC. Reverting changes.
Training on augumented user 68997 49/50 current_auc = 0.6843376557335368
User 68997 AUC after training: 0.6831934909738113
User 68997 does not improve AUC. Reverting changes.
[2024-12-02 18:01:45.025171] start test user 97394 45/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:01:45.765352] start test user 97394 45/567 recall augumented users by random, augumented_users = [119902, 85307, 107271, 79664, 108539, 1117, 2455, 127890, 32555, 65596, 43323, 15644, 119314, 55853, 123538, 56453, 9211, 48457, 48877, 2173, 125878, 9753, 106186, 72043, 135234, 91205, 124243, 110572, 44497, 7778, 133438, 131011, 68063, 102851, 45621, 134823, 122686, 27, 67662, 31615, 29219, 24051, 119805, 114337, 100120, 127279, 94227, 67829, 84582, 47402]
[2024-12-02 18:01:45.789035] user = 97394 Cloud 45/567
[2024-12-02 18:01:45.816710] user = 97394 Local 45/567
[2024-12-02 18:01:45.912288] user = 97394 Local+ 45/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:01:49.143847] user = 97394 MPDA- 45/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.829181255049825
Training on augumented user 119902 0/50 current_auc = 0.829181255049825
User 119902 AUC after training: 0.8286426070562887
User 119902 does not improve AUC. Reverting changes.
Training on augumented user 85307 1/50 current_auc = 0.829181255049825
User 85307 AUC after training: 0.8289119310530568
User 85307 does not improve AUC. Reverting changes.
Training on augumented user 107271 2/50 current_auc = 0.829181255049825
User 107271 AUC after training: 0.8286426070562887
User 107271 does not improve AUC. Reverting changes.
Training on augumented user 79664 3/50 current_auc = 0.829181255049825
User 79664 AUC after training: 0.8286426070562887
User 79664 does not improve AUC. Reverting changes.
Training on augumented user 108539 4/50 current_auc = 0.829181255049825
User 108539 AUC after training: 0.829181255049825
User 108539 does not improve AUC. Reverting changes.
Training on augumented user 1117 5/50 current_auc = 0.829181255049825
User 1117 AUC after training: 0.8289119310530568
User 1117 does not improve AUC. Reverting changes.
Training on augumented user 2455 6/50 current_auc = 0.829181255049825
User 2455 AUC after training: 0.8290465930514409
User 2455 does not improve AUC. Reverting changes.
Training on augumented user 127890 7/50 current_auc = 0.829181255049825
User 127890 AUC after training: 0.829315917048209
User 127890 improves AUC. Keeping the model.
Training on augumented user 32555 8/50 current_auc = 0.829315917048209
User 32555 AUC after training: 0.8281712900619445
User 32555 does not improve AUC. Reverting changes.
Training on augumented user 65596 9/50 current_auc = 0.829315917048209
User 65596 AUC after training: 0.8290465930514408
User 65596 does not improve AUC. Reverting changes.
Training on augumented user 43323 10/50 current_auc = 0.829315917048209
User 43323 AUC after training: 0.8287099380554808
User 43323 does not improve AUC. Reverting changes.
Training on augumented user 15644 11/50 current_auc = 0.829315917048209
User 15644 AUC after training: 0.8289119310530568
User 15644 does not improve AUC. Reverting changes.
Training on augumented user 119314 12/50 current_auc = 0.829315917048209
User 119314 AUC after training: 0.8290465930514408
User 119314 does not improve AUC. Reverting changes.
Training on augumented user 55853 13/50 current_auc = 0.829315917048209
User 55853 AUC after training: 0.8290465930514408
User 55853 does not improve AUC. Reverting changes.
Training on augumented user 123538 14/50 current_auc = 0.829315917048209
User 123538 AUC after training: 0.8290465930514408
User 123538 does not improve AUC. Reverting changes.
Training on augumented user 56453 15/50 current_auc = 0.829315917048209
User 56453 AUC after training: 0.8286426070562887
User 56453 does not improve AUC. Reverting changes.
Training on augumented user 9211 16/50 current_auc = 0.829315917048209
User 9211 AUC after training: 0.8289119310530568
User 9211 does not improve AUC. Reverting changes.
Training on augumented user 48457 17/50 current_auc = 0.829315917048209
User 48457 AUC after training: 0.829181255049825
User 48457 does not improve AUC. Reverting changes.
Training on augumented user 48877 18/50 current_auc = 0.829315917048209
User 48877 AUC after training: 0.8297199030433613
User 48877 improves AUC. Keeping the model.
Training on augumented user 2173 19/50 current_auc = 0.8297199030433613
User 2173 AUC after training: 0.829181255049825
User 2173 does not improve AUC. Reverting changes.
Training on augumented user 125878 20/50 current_auc = 0.8297199030433613
User 125878 AUC after training: 0.829181255049825
User 125878 does not improve AUC. Reverting changes.
Training on augumented user 9753 21/50 current_auc = 0.8297199030433613
User 9753 AUC after training: 0.8289792620522489
User 9753 does not improve AUC. Reverting changes.
Training on augumented user 106186 22/50 current_auc = 0.8297199030433613
User 106186 AUC after training: 0.8297199030433612
User 106186 does not improve AUC. Reverting changes.
Training on augumented user 72043 23/50 current_auc = 0.8297199030433613
User 72043 AUC after training: 0.8287772690546729
User 72043 does not improve AUC. Reverting changes.
Training on augumented user 135234 24/50 current_auc = 0.8297199030433613
User 135234 AUC after training: 0.828844600053865
User 135234 does not improve AUC. Reverting changes.
Training on augumented user 91205 25/50 current_auc = 0.8297199030433613
User 91205 AUC after training: 0.829315917048209
User 91205 does not improve AUC. Reverting changes.
Training on augumented user 124243 26/50 current_auc = 0.8297199030433613
User 124243 AUC after training: 0.8290465930514409
User 124243 does not improve AUC. Reverting changes.
Training on augumented user 110572 27/50 current_auc = 0.8297199030433613
User 110572 AUC after training: 0.8295852410449771
User 110572 does not improve AUC. Reverting changes.
Training on augumented user 44497 28/50 current_auc = 0.8297199030433613
User 44497 AUC after training: 0.8274979800700243
User 44497 does not improve AUC. Reverting changes.
Training on augumented user 7778 29/50 current_auc = 0.8297199030433613
User 7778 AUC after training: 0.8292485860490171
User 7778 does not improve AUC. Reverting changes.
Training on augumented user 133438 30/50 current_auc = 0.8297199030433613
User 133438 AUC after training: 0.8295852410449771
User 133438 does not improve AUC. Reverting changes.
Training on augumented user 131011 31/50 current_auc = 0.8297199030433613
User 131011 AUC after training: 0.8290465930514408
User 131011 does not improve AUC. Reverting changes.
Training on augumented user 68063 32/50 current_auc = 0.8297199030433613
User 68063 AUC after training: 0.829315917048209
User 68063 does not improve AUC. Reverting changes.
Training on augumented user 102851 33/50 current_auc = 0.8297199030433613
User 102851 AUC after training: 0.8286426070562887
User 102851 does not improve AUC. Reverting changes.
Training on augumented user 45621 34/50 current_auc = 0.8297199030433613
User 45621 AUC after training: 0.829181255049825
User 45621 does not improve AUC. Reverting changes.
Training on augumented user 134823 35/50 current_auc = 0.8297199030433613
User 134823 AUC after training: 0.8299218960409372
User 134823 improves AUC. Keeping the model.
Training on augumented user 122686 36/50 current_auc = 0.8299218960409372
User 122686 AUC after training: 0.829315917048209
User 122686 does not improve AUC. Reverting changes.
Training on augumented user 27 37/50 current_auc = 0.8299218960409372
User 27 AUC after training: 0.8296525720441692
User 27 does not improve AUC. Reverting changes.
Training on augumented user 67662 38/50 current_auc = 0.8299218960409372
User 67662 AUC after training: 0.829450579046593
User 67662 does not improve AUC. Reverting changes.
Training on augumented user 31615 39/50 current_auc = 0.8299218960409372
User 31615 AUC after training: 0.8298545650417453
User 31615 does not improve AUC. Reverting changes.
Training on augumented user 29219 40/50 current_auc = 0.8299218960409372
User 29219 AUC after training: 0.8291139240506329
User 29219 does not improve AUC. Reverting changes.
Training on augumented user 24051 41/50 current_auc = 0.8299218960409372
User 24051 AUC after training: 0.8297199030433612
User 24051 does not improve AUC. Reverting changes.
Training on augumented user 119805 42/50 current_auc = 0.8299218960409372
User 119805 AUC after training: 0.8295852410449771
User 119805 does not improve AUC. Reverting changes.
Training on augumented user 114337 43/50 current_auc = 0.8299218960409372
User 114337 AUC after training: 0.8297199030433612
User 114337 does not improve AUC. Reverting changes.
Training on augumented user 100120 44/50 current_auc = 0.8299218960409372
User 100120 AUC after training: 0.8297199030433612
User 100120 does not improve AUC. Reverting changes.
Training on augumented user 127279 45/50 current_auc = 0.8299218960409372
User 127279 AUC after training: 0.8296525720441692
User 127279 does not improve AUC. Reverting changes.
Training on augumented user 94227 46/50 current_auc = 0.8299218960409372
User 94227 AUC after training: 0.8301238890385133
User 94227 improves AUC. Keeping the model.
Training on augumented user 67829 47/50 current_auc = 0.8301238890385133
User 67829 AUC after training: 0.829181255049825
User 67829 does not improve AUC. Reverting changes.
Training on augumented user 84582 48/50 current_auc = 0.8301238890385133
User 84582 AUC after training: 0.8295852410449771
User 84582 does not improve AUC. Reverting changes.
Training on augumented user 47402 49/50 current_auc = 0.8301238890385133
User 47402 AUC after training: 0.8297199030433612
User 47402 does not improve AUC. Reverting changes.
[2024-12-02 18:02:19.402286] start test user 97398 46/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:02:19.825231] start test user 97398 46/567 recall augumented users by random, augumented_users = [125694, 22039, 60485, 102227, 39968, 83270, 42845, 114625, 76414, 136017, 109829, 79829, 42857, 22531, 33719, 29144, 41984, 69080, 101549, 134210, 60112, 37826, 6316, 9248, 74549, 89394, 86652, 31387, 41003, 37601, 16798, 118764, 131761, 44646, 63128, 40236, 70366, 55744, 131422, 112510, 15759, 128413, 37021, 107762, 7232, 30427, 8099, 16399, 116921, 129171]
[2024-12-02 18:02:19.840863] user = 97398 Cloud 46/567
[2024-12-02 18:02:19.865207] user = 97398 Local 46/567
[2024-12-02 18:02:19.988275] user = 97398 Local+ 46/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:02:22.764290] user = 97398 MPDA- 46/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5857843137254901
Training on augumented user 125694 0/50 current_auc = 0.5857843137254901
User 125694 AUC after training: 0.5862973096215229
User 125694 improves AUC. Keeping the model.
Training on augumented user 22039 1/50 current_auc = 0.5862973096215229
User 22039 AUC after training: 0.5865253077975375
User 22039 improves AUC. Keeping the model.
Training on augumented user 60485 2/50 current_auc = 0.5865253077975375
User 60485 AUC after training: 0.5876082991336069
User 60485 improves AUC. Keeping the model.
Training on augumented user 102227 3/50 current_auc = 0.5876082991336069
User 102227 AUC after training: 0.5879502963976287
User 102227 improves AUC. Keeping the model.
Training on augumented user 39968 4/50 current_auc = 0.5879502963976287
User 39968 AUC after training: 0.5896602827177383
User 39968 improves AUC. Keeping the model.
Training on augumented user 83270 5/50 current_auc = 0.5896602827177383
User 83270 AUC after training: 0.5890332877336981
User 83270 does not improve AUC. Reverting changes.
Training on augumented user 42845 6/50 current_auc = 0.5896602827177383
User 42845 AUC after training: 0.5895462836297309
User 42845 does not improve AUC. Reverting changes.
Training on augumented user 114625 7/50 current_auc = 0.5896602827177383
User 114625 AUC after training: 0.5898312813497492
User 114625 improves AUC. Keeping the model.
Training on augumented user 76414 8/50 current_auc = 0.5898312813497492
User 76414 AUC after training: 0.5897172822617419
User 76414 does not improve AUC. Reverting changes.
Training on augumented user 136017 9/50 current_auc = 0.5898312813497492
User 136017 AUC after training: 0.5896602827177382
User 136017 does not improve AUC. Reverting changes.
Training on augumented user 109829 10/50 current_auc = 0.5898312813497492
User 109829 AUC after training: 0.5896602827177383
User 109829 does not improve AUC. Reverting changes.
Training on augumented user 79829 11/50 current_auc = 0.5898312813497492
User 79829 AUC after training: 0.5898882808937529
User 79829 improves AUC. Keeping the model.
Training on augumented user 42857 12/50 current_auc = 0.5898882808937529
User 42857 AUC after training: 0.5892612859097127
User 42857 does not improve AUC. Reverting changes.
Training on augumented user 22531 13/50 current_auc = 0.5898882808937529
User 22531 AUC after training: 0.5889192886456909
User 22531 does not improve AUC. Reverting changes.
Training on augumented user 33719 14/50 current_auc = 0.5898882808937529
User 33719 AUC after training: 0.5889762881896946
User 33719 does not improve AUC. Reverting changes.
Training on augumented user 29144 15/50 current_auc = 0.5898882808937529
User 29144 AUC after training: 0.5892042863657092
User 29144 does not improve AUC. Reverting changes.
Training on augumented user 41984 16/50 current_auc = 0.5898882808937529
User 41984 AUC after training: 0.5894607843137255
User 41984 does not improve AUC. Reverting changes.
Training on augumented user 69080 17/50 current_auc = 0.5898882808937529
User 69080 AUC after training: 0.5898312813497492
User 69080 does not improve AUC. Reverting changes.
Training on augumented user 101549 18/50 current_auc = 0.5898882808937529
User 101549 AUC after training: 0.5892612859097128
User 101549 does not improve AUC. Reverting changes.
Training on augumented user 134210 19/50 current_auc = 0.5898882808937529
User 134210 AUC after training: 0.5889477884176926
User 134210 does not improve AUC. Reverting changes.
Training on augumented user 60112 20/50 current_auc = 0.5898882808937529
User 60112 AUC after training: 0.5898882808937529
User 60112 does not improve AUC. Reverting changes.
Training on augumented user 37826 21/50 current_auc = 0.5898882808937529
User 37826 AUC after training: 0.5893182854537163
User 37826 does not improve AUC. Reverting changes.
Training on augumented user 6316 22/50 current_auc = 0.5898882808937529
User 6316 AUC after training: 0.5896317829457365
User 6316 does not improve AUC. Reverting changes.
Training on augumented user 9248 23/50 current_auc = 0.5898882808937529
User 9248 AUC after training: 0.5901732786137711
User 9248 improves AUC. Keeping the model.
Training on augumented user 74549 24/50 current_auc = 0.5901732786137711
User 74549 AUC after training: 0.5894892840857273
User 74549 does not improve AUC. Reverting changes.
Training on augumented user 89394 25/50 current_auc = 0.5901732786137711
User 89394 AUC after training: 0.5899167806657546
User 89394 does not improve AUC. Reverting changes.
Training on augumented user 86652 26/50 current_auc = 0.5901732786137711
User 86652 AUC after training: 0.5882922936616507
User 86652 does not improve AUC. Reverting changes.
Training on augumented user 31387 27/50 current_auc = 0.5901732786137711
User 31387 AUC after training: 0.5900022799817601
User 31387 does not improve AUC. Reverting changes.
Training on augumented user 41003 28/50 current_auc = 0.5901732786137711
User 41003 AUC after training: 0.5898312813497492
User 41003 does not improve AUC. Reverting changes.
Training on augumented user 37601 29/50 current_auc = 0.5901732786137711
User 37601 AUC after training: 0.5901732786137711
User 37601 does not improve AUC. Reverting changes.
Training on augumented user 16798 30/50 current_auc = 0.5901732786137711
User 16798 AUC after training: 0.5896602827177383
User 16798 does not improve AUC. Reverting changes.
Training on augumented user 118764 31/50 current_auc = 0.5901732786137711
User 118764 AUC after training: 0.5898312813497493
User 118764 does not improve AUC. Reverting changes.
Training on augumented user 131761 32/50 current_auc = 0.5901732786137711
User 131761 AUC after training: 0.589546283629731
User 131761 does not improve AUC. Reverting changes.
Training on augumented user 44646 33/50 current_auc = 0.5901732786137711
User 44646 AUC after training: 0.5897742818057456
User 44646 does not improve AUC. Reverting changes.
Training on augumented user 63128 34/50 current_auc = 0.5901732786137711
User 63128 AUC after training: 0.5896602827177384
User 63128 does not improve AUC. Reverting changes.
Training on augumented user 40236 35/50 current_auc = 0.5901732786137711
User 40236 AUC after training: 0.5897172822617419
User 40236 does not improve AUC. Reverting changes.
Training on augumented user 70366 36/50 current_auc = 0.5901732786137711
User 70366 AUC after training: 0.5897172822617419
User 70366 does not improve AUC. Reverting changes.
Training on augumented user 55744 37/50 current_auc = 0.5901732786137711
User 55744 AUC after training: 0.5898882808937529
User 55744 does not improve AUC. Reverting changes.
Training on augumented user 131422 38/50 current_auc = 0.5901732786137711
User 131422 AUC after training: 0.5881212950296397
User 131422 does not improve AUC. Reverting changes.
Training on augumented user 112510 39/50 current_auc = 0.5901732786137711
User 112510 AUC after training: 0.5900592795257639
User 112510 does not improve AUC. Reverting changes.
Training on augumented user 15759 40/50 current_auc = 0.5901732786137711
User 15759 AUC after training: 0.5900592795257638
User 15759 does not improve AUC. Reverting changes.
Training on augumented user 128413 41/50 current_auc = 0.5901732786137711
User 128413 AUC after training: 0.5896887824897401
User 128413 does not improve AUC. Reverting changes.
Training on augumented user 37021 42/50 current_auc = 0.5901732786137711
User 37021 AUC after training: 0.5897742818057456
User 37021 does not improve AUC. Reverting changes.
Training on augumented user 107762 43/50 current_auc = 0.5901732786137711
User 107762 AUC after training: 0.5895747834017327
User 107762 does not improve AUC. Reverting changes.
Training on augumented user 7232 44/50 current_auc = 0.5901732786137711
User 7232 AUC after training: 0.589546283629731
User 7232 does not improve AUC. Reverting changes.
Training on augumented user 30427 45/50 current_auc = 0.5901732786137711
User 30427 AUC after training: 0.5897742818057455
User 30427 does not improve AUC. Reverting changes.
Training on augumented user 8099 46/50 current_auc = 0.5901732786137711
User 8099 AUC after training: 0.5893752849977201
User 8099 does not improve AUC. Reverting changes.
Training on augumented user 16399 47/50 current_auc = 0.5901732786137711
User 16399 AUC after training: 0.5895462836297309
User 16399 does not improve AUC. Reverting changes.
Training on augumented user 116921 48/50 current_auc = 0.5901732786137711
User 116921 AUC after training: 0.5897457820337437
User 116921 does not improve AUC. Reverting changes.
Training on augumented user 129171 49/50 current_auc = 0.5901732786137711
User 129171 AUC after training: 0.5898312813497493
User 129171 does not improve AUC. Reverting changes.
[2024-12-02 18:02:56.671838] start test user 97434 47/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:02:57.103440] start test user 97434 47/567 recall augumented users by random, augumented_users = [70996, 112918, 86637, 20268, 84355, 86355, 92196, 45980, 86408, 2842, 50684, 36822, 32737, 40522, 75316, 89637, 126367, 22581, 107895, 23731, 32291, 30369, 8780, 108934, 3949, 32089, 85453, 107649, 9616, 104042, 40277, 48061, 46856, 92048, 119128, 62075, 30547, 82642, 46609, 96778, 4565, 68328, 55965, 126830, 73782, 79023, 75924, 103630, 88757, 23360]
[2024-12-02 18:02:57.119093] user = 97434 Cloud 47/567
[2024-12-02 18:02:57.134977] user = 97434 Local 47/567
[2024-12-02 18:02:57.274451] user = 97434 Local+ 47/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:02:59.501551] user = 97434 MPDA- 47/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5284210526315789
Training on augumented user 70996 0/50 current_auc = 0.5284210526315789
User 70996 AUC after training: 0.5289473684210526
User 70996 improves AUC. Keeping the model.
Training on augumented user 112918 1/50 current_auc = 0.5289473684210526
User 112918 AUC after training: 0.5284210526315789
User 112918 does not improve AUC. Reverting changes.
Training on augumented user 86637 2/50 current_auc = 0.5289473684210526
User 86637 AUC after training: 0.5284210526315789
User 86637 does not improve AUC. Reverting changes.
Training on augumented user 20268 3/50 current_auc = 0.5289473684210526
User 20268 AUC after training: 0.5294736842105263
User 20268 improves AUC. Keeping the model.
Training on augumented user 84355 4/50 current_auc = 0.5294736842105263
User 84355 AUC after training: 0.5284210526315789
User 84355 does not improve AUC. Reverting changes.
Training on augumented user 86355 5/50 current_auc = 0.5294736842105263
User 86355 AUC after training: 0.5289473684210526
User 86355 does not improve AUC. Reverting changes.
Training on augumented user 92196 6/50 current_auc = 0.5294736842105263
User 92196 AUC after training: 0.5289473684210526
User 92196 does not improve AUC. Reverting changes.
Training on augumented user 45980 7/50 current_auc = 0.5294736842105263
User 45980 AUC after training: 0.5278947368421053
User 45980 does not improve AUC. Reverting changes.
Training on augumented user 86408 8/50 current_auc = 0.5294736842105263
User 86408 AUC after training: 0.5294736842105263
User 86408 does not improve AUC. Reverting changes.
Training on augumented user 2842 9/50 current_auc = 0.5294736842105263
User 2842 AUC after training: 0.5289473684210526
User 2842 does not improve AUC. Reverting changes.
Training on augumented user 50684 10/50 current_auc = 0.5294736842105263
User 50684 AUC after training: 0.53
User 50684 improves AUC. Keeping the model.
Training on augumented user 36822 11/50 current_auc = 0.53
User 36822 AUC after training: 0.5294736842105263
User 36822 does not improve AUC. Reverting changes.
Training on augumented user 32737 12/50 current_auc = 0.53
User 32737 AUC after training: 0.5294736842105263
User 32737 does not improve AUC. Reverting changes.
Training on augumented user 40522 13/50 current_auc = 0.53
User 40522 AUC after training: 0.5289473684210526
User 40522 does not improve AUC. Reverting changes.
Training on augumented user 75316 14/50 current_auc = 0.53
User 75316 AUC after training: 0.5294736842105263
User 75316 does not improve AUC. Reverting changes.
Training on augumented user 89637 15/50 current_auc = 0.53
User 89637 AUC after training: 0.5284210526315789
User 89637 does not improve AUC. Reverting changes.
Training on augumented user 126367 16/50 current_auc = 0.53
User 126367 AUC after training: 0.5294736842105263
User 126367 does not improve AUC. Reverting changes.
Training on augumented user 22581 17/50 current_auc = 0.53
User 22581 AUC after training: 0.5289473684210526
User 22581 does not improve AUC. Reverting changes.
Training on augumented user 107895 18/50 current_auc = 0.53
User 107895 AUC after training: 0.53
User 107895 does not improve AUC. Reverting changes.
Training on augumented user 23731 19/50 current_auc = 0.53
User 23731 AUC after training: 0.5294736842105263
User 23731 does not improve AUC. Reverting changes.
Training on augumented user 32291 20/50 current_auc = 0.53
User 32291 AUC after training: 0.5289473684210526
User 32291 does not improve AUC. Reverting changes.
Training on augumented user 30369 21/50 current_auc = 0.53
User 30369 AUC after training: 0.5284210526315789
User 30369 does not improve AUC. Reverting changes.
Training on augumented user 8780 22/50 current_auc = 0.53
User 8780 AUC after training: 0.5289473684210526
User 8780 does not improve AUC. Reverting changes.
Training on augumented user 108934 23/50 current_auc = 0.53
User 108934 AUC after training: 0.53
User 108934 does not improve AUC. Reverting changes.
Training on augumented user 3949 24/50 current_auc = 0.53
User 3949 AUC after training: 0.5289473684210526
User 3949 does not improve AUC. Reverting changes.
Training on augumented user 32089 25/50 current_auc = 0.53
User 32089 AUC after training: 0.5289473684210526
User 32089 does not improve AUC. Reverting changes.
Training on augumented user 85453 26/50 current_auc = 0.53
User 85453 AUC after training: 0.5289473684210526
User 85453 does not improve AUC. Reverting changes.
Training on augumented user 107649 27/50 current_auc = 0.53
User 107649 AUC after training: 0.5289473684210526
User 107649 does not improve AUC. Reverting changes.
Training on augumented user 9616 28/50 current_auc = 0.53
User 9616 AUC after training: 0.5294736842105263
User 9616 does not improve AUC. Reverting changes.
Training on augumented user 104042 29/50 current_auc = 0.53
User 104042 AUC after training: 0.528421052631579
User 104042 does not improve AUC. Reverting changes.
Training on augumented user 40277 30/50 current_auc = 0.53
User 40277 AUC after training: 0.5289473684210526
User 40277 does not improve AUC. Reverting changes.
Training on augumented user 48061 31/50 current_auc = 0.53
User 48061 AUC after training: 0.53
User 48061 does not improve AUC. Reverting changes.
Training on augumented user 46856 32/50 current_auc = 0.53
User 46856 AUC after training: 0.5284210526315789
User 46856 does not improve AUC. Reverting changes.
Training on augumented user 92048 33/50 current_auc = 0.53
User 92048 AUC after training: 0.5294736842105263
User 92048 does not improve AUC. Reverting changes.
Training on augumented user 119128 34/50 current_auc = 0.53
User 119128 AUC after training: 0.5273684210526316
User 119128 does not improve AUC. Reverting changes.
Training on augumented user 62075 35/50 current_auc = 0.53
User 62075 AUC after training: 0.5284210526315789
User 62075 does not improve AUC. Reverting changes.
Training on augumented user 30547 36/50 current_auc = 0.53
User 30547 AUC after training: 0.5289473684210526
User 30547 does not improve AUC. Reverting changes.
Training on augumented user 82642 37/50 current_auc = 0.53
User 82642 AUC after training: 0.5289473684210526
User 82642 does not improve AUC. Reverting changes.
Training on augumented user 46609 38/50 current_auc = 0.53
User 46609 AUC after training: 0.5289473684210526
User 46609 does not improve AUC. Reverting changes.
Training on augumented user 96778 39/50 current_auc = 0.53
User 96778 AUC after training: 0.5294736842105263
User 96778 does not improve AUC. Reverting changes.
Training on augumented user 4565 40/50 current_auc = 0.53
User 4565 AUC after training: 0.5268421052631579
User 4565 does not improve AUC. Reverting changes.
Training on augumented user 68328 41/50 current_auc = 0.53
User 68328 AUC after training: 0.5294736842105263
User 68328 does not improve AUC. Reverting changes.
Training on augumented user 55965 42/50 current_auc = 0.53
User 55965 AUC after training: 0.5284210526315789
User 55965 does not improve AUC. Reverting changes.
Training on augumented user 126830 43/50 current_auc = 0.53
User 126830 AUC after training: 0.5289473684210526
User 126830 does not improve AUC. Reverting changes.
Training on augumented user 73782 44/50 current_auc = 0.53
User 73782 AUC after training: 0.5284210526315789
User 73782 does not improve AUC. Reverting changes.
Training on augumented user 79023 45/50 current_auc = 0.53
User 79023 AUC after training: 0.5278947368421053
User 79023 does not improve AUC. Reverting changes.
Training on augumented user 75924 46/50 current_auc = 0.53
User 75924 AUC after training: 0.5289473684210526
User 75924 does not improve AUC. Reverting changes.
Training on augumented user 103630 47/50 current_auc = 0.53
User 103630 AUC after training: 0.5284210526315789
User 103630 does not improve AUC. Reverting changes.
Training on augumented user 88757 48/50 current_auc = 0.53
User 88757 AUC after training: 0.5263157894736842
User 88757 does not improve AUC. Reverting changes.
Training on augumented user 23360 49/50 current_auc = 0.53
User 23360 AUC after training: 0.5284210526315789
User 23360 does not improve AUC. Reverting changes.
[2024-12-02 18:03:27.682793] start test user 97435 48/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:03:28.275678] start test user 97435 48/567 recall augumented users by random, augumented_users = [117760, 132596, 79188, 7321, 125782, 81255, 87474, 106823, 21073, 92142, 104217, 52349, 124113, 115776, 4440, 2795, 51016, 131916, 87974, 2359, 55462, 54886, 60904, 31517, 61317, 41813, 35439, 60510, 132252, 45640, 32755, 59521, 18472, 1809, 6343, 14196, 66613, 8323, 74460, 13655, 7610, 47187, 131121, 52837, 419, 20388, 94790, 9020, 73122, 98226]
[2024-12-02 18:03:28.291348] user = 97435 Cloud 48/567
[2024-12-02 18:03:28.339922] user = 97435 Local 48/567
[2024-12-02 18:03:28.522022] user = 97435 Local+ 48/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:03:31.581513] user = 97435 MPDA- 48/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6511522134627047
Training on augumented user 117760 0/50 current_auc = 0.6511522134627047
User 117760 AUC after training: 0.651303820497271
User 117760 improves AUC. Keeping the model.
Training on augumented user 132596 1/50 current_auc = 0.651303820497271
User 132596 AUC after training: 0.651091570648878
User 132596 does not improve AUC. Reverting changes.
Training on augumented user 79188 2/50 current_auc = 0.651303820497271
User 79188 AUC after training: 0.6504851425106124
User 79188 does not improve AUC. Reverting changes.
Training on augumented user 7321 3/50 current_auc = 0.651303820497271
User 7321 AUC after training: 0.6512431776834445
User 7321 does not improve AUC. Reverting changes.
Training on augumented user 125782 4/50 current_auc = 0.651303820497271
User 125782 AUC after training: 0.6512734990903578
User 125782 does not improve AUC. Reverting changes.
Training on augumented user 81255 5/50 current_auc = 0.651303820497271
User 81255 AUC after training: 0.6512128562765312
User 81255 does not improve AUC. Reverting changes.
Training on augumented user 87474 6/50 current_auc = 0.651303820497271
User 87474 AUC after training: 0.6506973923590055
User 87474 does not improve AUC. Reverting changes.
Training on augumented user 106823 7/50 current_auc = 0.651303820497271
User 106823 AUC after training: 0.6506064281382656
User 106823 does not improve AUC. Reverting changes.
Training on augumented user 21073 8/50 current_auc = 0.651303820497271
User 21073 AUC after training: 0.6519708914493633
User 21073 improves AUC. Keeping the model.
Training on augumented user 92142 9/50 current_auc = 0.6519708914493633
User 92142 AUC after training: 0.6538811400849
User 92142 improves AUC. Keeping the model.
Training on augumented user 104217 10/50 current_auc = 0.6538811400849
User 104217 AUC after training: 0.6536688902365069
User 104217 does not improve AUC. Reverting changes.
Training on augumented user 52349 11/50 current_auc = 0.6538811400849
User 52349 AUC after training: 0.6528805336567617
User 52349 does not improve AUC. Reverting changes.
Training on augumented user 124113 12/50 current_auc = 0.6538811400849
User 124113 AUC after training: 0.6537598544572468
User 124113 does not improve AUC. Reverting changes.
Training on augumented user 115776 13/50 current_auc = 0.6538811400849
User 115776 AUC after training: 0.6530321406913281
User 115776 does not improve AUC. Reverting changes.
Training on augumented user 4440 14/50 current_auc = 0.6538811400849
User 4440 AUC after training: 0.6532140691328078
User 4440 does not improve AUC. Reverting changes.
Training on augumented user 2795 15/50 current_auc = 0.6538811400849
User 2795 AUC after training: 0.6521831412977562
User 2795 does not improve AUC. Reverting changes.
Training on augumented user 51016 16/50 current_auc = 0.6538811400849
User 51016 AUC after training: 0.652698605215282
User 51016 does not improve AUC. Reverting changes.
Training on augumented user 131916 17/50 current_auc = 0.6538811400849
User 131916 AUC after training: 0.6535172832019406
User 131916 does not improve AUC. Reverting changes.
Training on augumented user 87974 18/50 current_auc = 0.6538811400849
User 87974 AUC after training: 0.6537598544572468
User 87974 does not improve AUC. Reverting changes.
Training on augumented user 2359 19/50 current_auc = 0.6538811400849
User 2359 AUC after training: 0.6536992116434203
User 2359 does not improve AUC. Reverting changes.
Training on augumented user 55462 20/50 current_auc = 0.6538811400849
User 55462 AUC after training: 0.6539417828987265
User 55462 improves AUC. Keeping the model.
Training on augumented user 54886 21/50 current_auc = 0.6539417828987265
User 54886 AUC after training: 0.6537598544572468
User 54886 does not improve AUC. Reverting changes.
Training on augumented user 60904 22/50 current_auc = 0.6539417828987265
User 60904 AUC after training: 0.6535779260157671
User 60904 does not improve AUC. Reverting changes.
Training on augumented user 31517 23/50 current_auc = 0.6539417828987265
User 31517 AUC after training: 0.6527895694360218
User 31517 does not improve AUC. Reverting changes.
Training on augumented user 61317 24/50 current_auc = 0.6539417828987265
User 61317 AUC after training: 0.6532443905397212
User 61317 does not improve AUC. Reverting changes.
Training on augumented user 41813 25/50 current_auc = 0.6539417828987265
User 41813 AUC after training: 0.6537598544572468
User 41813 does not improve AUC. Reverting changes.
Training on augumented user 35439 26/50 current_auc = 0.6539417828987265
User 35439 AUC after training: 0.6512734990903579
User 35439 does not improve AUC. Reverting changes.
Training on augumented user 60510 27/50 current_auc = 0.6539417828987265
User 60510 AUC after training: 0.6519708914493633
User 60510 does not improve AUC. Reverting changes.
Training on augumented user 132252 28/50 current_auc = 0.6539417828987265
User 132252 AUC after training: 0.6522134627046695
User 132252 does not improve AUC. Reverting changes.
Training on augumented user 45640 29/50 current_auc = 0.6539417828987265
User 45640 AUC after training: 0.6535779260157671
User 45640 does not improve AUC. Reverting changes.
Training on augumented user 32755 30/50 current_auc = 0.6539417828987265
User 32755 AUC after training: 0.6528805336567617
User 32755 does not improve AUC. Reverting changes.
Training on augumented user 59521 31/50 current_auc = 0.6539417828987265
User 59521 AUC after training: 0.6537901758641601
User 59521 does not improve AUC. Reverting changes.
Training on augumented user 18472 32/50 current_auc = 0.6539417828987265
User 18472 AUC after training: 0.6540327471194664
User 18472 improves AUC. Keeping the model.
Training on augumented user 1809 33/50 current_auc = 0.6540327471194664
User 1809 AUC after training: 0.6528198908429351
User 1809 does not improve AUC. Reverting changes.
Training on augumented user 6343 34/50 current_auc = 0.6540327471194664
User 6343 AUC after training: 0.6537901758641601
User 6343 does not improve AUC. Reverting changes.
Training on augumented user 14196 35/50 current_auc = 0.6540327471194664
User 14196 AUC after training: 0.6536082474226804
User 14196 does not improve AUC. Reverting changes.
Training on augumented user 66613 36/50 current_auc = 0.6540327471194664
User 66613 AUC after training: 0.6536385688295937
User 66613 does not improve AUC. Reverting changes.
Training on augumented user 8323 37/50 current_auc = 0.6540327471194664
User 8323 AUC after training: 0.6542753183747726
User 8323 improves AUC. Keeping the model.
Training on augumented user 74460 38/50 current_auc = 0.6542753183747726
User 74460 AUC after training: 0.6533656761673742
User 74460 does not improve AUC. Reverting changes.
Training on augumented user 13655 39/50 current_auc = 0.6542753183747726
User 13655 AUC after training: 0.6534869617950273
User 13655 does not improve AUC. Reverting changes.
Training on augumented user 7610 40/50 current_auc = 0.6542753183747726
User 7610 AUC after training: 0.654214675560946
User 7610 does not improve AUC. Reverting changes.
Training on augumented user 47187 41/50 current_auc = 0.6542753183747726
User 47187 AUC after training: 0.6545178896300787
User 47187 improves AUC. Keeping the model.
Training on augumented user 131121 42/50 current_auc = 0.6545178896300787
User 131121 AUC after training: 0.653244390539721
User 131121 does not improve AUC. Reverting changes.
Training on augumented user 52837 43/50 current_auc = 0.6545178896300787
User 52837 AUC after training: 0.6542146755609459
User 52837 does not improve AUC. Reverting changes.
Training on augumented user 419 44/50 current_auc = 0.6545178896300787
User 419 AUC after training: 0.6535476046088539
User 419 does not improve AUC. Reverting changes.
Training on augumented user 20388 45/50 current_auc = 0.6545178896300787
User 20388 AUC after training: 0.651182534869618
User 20388 does not improve AUC. Reverting changes.
Training on augumented user 94790 46/50 current_auc = 0.6545178896300787
User 94790 AUC after training: 0.654760460885385
User 94790 improves AUC. Keeping the model.
Training on augumented user 9020 47/50 current_auc = 0.654760460885385
User 9020 AUC after training: 0.6553668890236507
User 9020 improves AUC. Keeping the model.
Training on augumented user 73122 48/50 current_auc = 0.6553668890236507
User 73122 AUC after training: 0.6556701030927836
User 73122 improves AUC. Keeping the model.
Training on augumented user 98226 49/50 current_auc = 0.6556701030927836
User 98226 AUC after training: 0.6557307459066101
User 98226 improves AUC. Keeping the model.
[2024-12-02 18:04:00.311808] start test user 97438 49/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:04:00.716945] start test user 97438 49/567 recall augumented users by random, augumented_users = [137719, 125039, 132816, 90450, 132770, 65119, 50408, 32054, 50713, 106284, 115341, 101230, 115560, 99787, 49654, 52009, 91777, 82770, 81961, 14858, 97606, 35565, 46543, 76533, 99919, 45500, 57952, 7429, 3204, 24708, 41750, 103930, 35488, 84095, 37446, 3423, 48086, 80741, 73319, 83412, 22111, 81633, 45681, 5292, 19453, 60896, 103875, 56885, 29612, 11968]
[2024-12-02 18:04:00.732078] user = 97438 Cloud 49/567
[2024-12-02 18:04:00.746980] user = 97438 Local 49/567
[2024-12-02 18:04:00.862949] user = 97438 Local+ 49/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:04:03.227589] user = 97438 MPDA- 49/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6760835913312694
Training on augumented user 137719 0/50 current_auc = 0.6760835913312694
User 137719 AUC after training: 0.6753095975232198
User 137719 does not improve AUC. Reverting changes.
Training on augumented user 125039 1/50 current_auc = 0.6760835913312694
User 125039 AUC after training: 0.6753095975232198
User 125039 does not improve AUC. Reverting changes.
Training on augumented user 132816 2/50 current_auc = 0.6760835913312694
User 132816 AUC after training: 0.6753095975232198
User 132816 does not improve AUC. Reverting changes.
Training on augumented user 90450 3/50 current_auc = 0.6760835913312694
User 90450 AUC after training: 0.6753095975232198
User 90450 does not improve AUC. Reverting changes.
Training on augumented user 132770 4/50 current_auc = 0.6760835913312694
User 132770 AUC after training: 0.6745356037151703
User 132770 does not improve AUC. Reverting changes.
Training on augumented user 65119 5/50 current_auc = 0.6760835913312694
User 65119 AUC after training: 0.6737616099071208
User 65119 does not improve AUC. Reverting changes.
Training on augumented user 50408 6/50 current_auc = 0.6760835913312694
User 50408 AUC after training: 0.6753095975232198
User 50408 does not improve AUC. Reverting changes.
Training on augumented user 32054 7/50 current_auc = 0.6760835913312694
User 32054 AUC after training: 0.6760835913312694
User 32054 does not improve AUC. Reverting changes.
Training on augumented user 50713 8/50 current_auc = 0.6760835913312694
User 50713 AUC after training: 0.6753095975232197
User 50713 does not improve AUC. Reverting changes.
Training on augumented user 106284 9/50 current_auc = 0.6760835913312694
User 106284 AUC after training: 0.6753095975232197
User 106284 does not improve AUC. Reverting changes.
Training on augumented user 115341 10/50 current_auc = 0.6760835913312694
User 115341 AUC after training: 0.6737616099071208
User 115341 does not improve AUC. Reverting changes.
Training on augumented user 101230 11/50 current_auc = 0.6760835913312694
User 101230 AUC after training: 0.6753095975232197
User 101230 does not improve AUC. Reverting changes.
Training on augumented user 115560 12/50 current_auc = 0.6760835913312694
User 115560 AUC after training: 0.6745356037151703
User 115560 does not improve AUC. Reverting changes.
Training on augumented user 99787 13/50 current_auc = 0.6760835913312694
User 99787 AUC after training: 0.6745356037151703
User 99787 does not improve AUC. Reverting changes.
Training on augumented user 49654 14/50 current_auc = 0.6760835913312694
User 49654 AUC after training: 0.6753095975232198
User 49654 does not improve AUC. Reverting changes.
Training on augumented user 52009 15/50 current_auc = 0.6760835913312694
User 52009 AUC after training: 0.6753095975232198
User 52009 does not improve AUC. Reverting changes.
Training on augumented user 91777 16/50 current_auc = 0.6760835913312694
User 91777 AUC after training: 0.6753095975232198
User 91777 does not improve AUC. Reverting changes.
Training on augumented user 82770 17/50 current_auc = 0.6760835913312694
User 82770 AUC after training: 0.6756965944272446
User 82770 does not improve AUC. Reverting changes.
Training on augumented user 81961 18/50 current_auc = 0.6760835913312694
User 81961 AUC after training: 0.6729876160990712
User 81961 does not improve AUC. Reverting changes.
Training on augumented user 14858 19/50 current_auc = 0.6760835913312694
User 14858 AUC after training: 0.6745356037151703
User 14858 does not improve AUC. Reverting changes.
Training on augumented user 97606 20/50 current_auc = 0.6760835913312694
User 97606 AUC after training: 0.6760835913312693
User 97606 does not improve AUC. Reverting changes.
Training on augumented user 35565 21/50 current_auc = 0.6760835913312694
User 35565 AUC after training: 0.6753095975232198
User 35565 does not improve AUC. Reverting changes.
Training on augumented user 46543 22/50 current_auc = 0.6760835913312694
User 46543 AUC after training: 0.6760835913312694
User 46543 does not improve AUC. Reverting changes.
Training on augumented user 76533 23/50 current_auc = 0.6760835913312694
User 76533 AUC after training: 0.6760835913312694
User 76533 does not improve AUC. Reverting changes.
Training on augumented user 99919 24/50 current_auc = 0.6760835913312694
User 99919 AUC after training: 0.6753095975232197
User 99919 does not improve AUC. Reverting changes.
Training on augumented user 45500 25/50 current_auc = 0.6760835913312694
User 45500 AUC after training: 0.6753095975232198
User 45500 does not improve AUC. Reverting changes.
Training on augumented user 57952 26/50 current_auc = 0.6760835913312694
User 57952 AUC after training: 0.6760835913312693
User 57952 does not improve AUC. Reverting changes.
Training on augumented user 7429 27/50 current_auc = 0.6760835913312694
User 7429 AUC after training: 0.6760835913312694
User 7429 does not improve AUC. Reverting changes.
Training on augumented user 3204 28/50 current_auc = 0.6760835913312694
User 3204 AUC after training: 0.6760835913312694
User 3204 does not improve AUC. Reverting changes.
Training on augumented user 24708 29/50 current_auc = 0.6760835913312694
User 24708 AUC after training: 0.6760835913312694
User 24708 does not improve AUC. Reverting changes.
Training on augumented user 41750 30/50 current_auc = 0.6760835913312694
User 41750 AUC after training: 0.6745356037151703
User 41750 does not improve AUC. Reverting changes.
Training on augumented user 103930 31/50 current_auc = 0.6760835913312694
User 103930 AUC after training: 0.6745356037151703
User 103930 does not improve AUC. Reverting changes.
Training on augumented user 35488 32/50 current_auc = 0.6760835913312694
User 35488 AUC after training: 0.6753095975232197
User 35488 does not improve AUC. Reverting changes.
Training on augumented user 84095 33/50 current_auc = 0.6760835913312694
User 84095 AUC after training: 0.6745356037151703
User 84095 does not improve AUC. Reverting changes.
Training on augumented user 37446 34/50 current_auc = 0.6760835913312694
User 37446 AUC after training: 0.6760835913312693
User 37446 does not improve AUC. Reverting changes.
Training on augumented user 3423 35/50 current_auc = 0.6760835913312694
User 3423 AUC after training: 0.6760835913312694
User 3423 does not improve AUC. Reverting changes.
Training on augumented user 48086 36/50 current_auc = 0.6760835913312694
User 48086 AUC after training: 0.6753095975232197
User 48086 does not improve AUC. Reverting changes.
Training on augumented user 80741 37/50 current_auc = 0.6760835913312694
User 80741 AUC after training: 0.6737616099071208
User 80741 does not improve AUC. Reverting changes.
Training on augumented user 73319 38/50 current_auc = 0.6760835913312694
User 73319 AUC after training: 0.6749226006191951
User 73319 does not improve AUC. Reverting changes.
Training on augumented user 83412 39/50 current_auc = 0.6760835913312694
User 83412 AUC after training: 0.6753095975232198
User 83412 does not improve AUC. Reverting changes.
Training on augumented user 22111 40/50 current_auc = 0.6760835913312694
User 22111 AUC after training: 0.6760835913312694
User 22111 does not improve AUC. Reverting changes.
Training on augumented user 81633 41/50 current_auc = 0.6760835913312694
User 81633 AUC after training: 0.6753095975232198
User 81633 does not improve AUC. Reverting changes.
Training on augumented user 45681 42/50 current_auc = 0.6760835913312694
User 45681 AUC after training: 0.6772445820433436
User 45681 improves AUC. Keeping the model.
Training on augumented user 5292 43/50 current_auc = 0.6772445820433436
User 5292 AUC after training: 0.6772445820433436
User 5292 does not improve AUC. Reverting changes.
Training on augumented user 19453 44/50 current_auc = 0.6772445820433436
User 19453 AUC after training: 0.676470588235294
User 19453 does not improve AUC. Reverting changes.
Training on augumented user 60896 45/50 current_auc = 0.6772445820433436
User 60896 AUC after training: 0.676470588235294
User 60896 does not improve AUC. Reverting changes.
Training on augumented user 103875 46/50 current_auc = 0.6772445820433436
User 103875 AUC after training: 0.676470588235294
User 103875 does not improve AUC. Reverting changes.
Training on augumented user 56885 47/50 current_auc = 0.6772445820433436
User 56885 AUC after training: 0.6764705882352942
User 56885 does not improve AUC. Reverting changes.
Training on augumented user 29612 48/50 current_auc = 0.6772445820433436
User 29612 AUC after training: 0.676470588235294
User 29612 does not improve AUC. Reverting changes.
Training on augumented user 11968 49/50 current_auc = 0.6772445820433436
User 11968 AUC after training: 0.676470588235294
User 11968 does not improve AUC. Reverting changes.
[2024-12-02 18:04:30.151697] start test user 97448 50/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:04:30.555154] start test user 97448 50/567 recall augumented users by random, augumented_users = [121161, 102049, 66836, 55416, 32559, 53614, 105596, 135932, 137274, 49674, 47187, 136992, 11993, 102246, 73551, 63202, 30609, 16774, 32563, 119230, 94511, 79300, 10264, 109621, 130277, 13595, 37090, 45615, 73078, 43279, 10949, 123793, 44205, 78651, 108845, 38216, 22924, 33698, 86377, 76205, 114845, 124728, 85715, 21724, 66225, 30438, 123651, 61053, 36676, 111347]
[2024-12-02 18:04:30.569967] user = 97448 Cloud 50/567
[2024-12-02 18:04:30.588762] user = 97448 Local 50/567
[2024-12-02 18:04:30.725192] user = 97448 Local+ 50/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:04:33.300394] user = 97448 MPDA- 50/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5032679738562091
Training on augumented user 121161 0/50 current_auc = 0.5032679738562091
User 121161 AUC after training: 0.5098039215686274
User 121161 improves AUC. Keeping the model.
Training on augumented user 102049 1/50 current_auc = 0.5098039215686274
User 102049 AUC after training: 0.49673202614379086
User 102049 does not improve AUC. Reverting changes.
Training on augumented user 66836 2/50 current_auc = 0.5098039215686274
User 66836 AUC after training: 0.5032679738562091
User 66836 does not improve AUC. Reverting changes.
Training on augumented user 55416 3/50 current_auc = 0.5098039215686274
User 55416 AUC after training: 0.5032679738562091
User 55416 does not improve AUC. Reverting changes.
Training on augumented user 32559 4/50 current_auc = 0.5098039215686274
User 32559 AUC after training: 0.5098039215686274
User 32559 does not improve AUC. Reverting changes.
Training on augumented user 53614 5/50 current_auc = 0.5098039215686274
User 53614 AUC after training: 0.5098039215686274
User 53614 does not improve AUC. Reverting changes.
Training on augumented user 105596 6/50 current_auc = 0.5098039215686274
User 105596 AUC after training: 0.5098039215686274
User 105596 does not improve AUC. Reverting changes.
Training on augumented user 135932 7/50 current_auc = 0.5098039215686274
User 135932 AUC after training: 0.5098039215686274
User 135932 does not improve AUC. Reverting changes.
Training on augumented user 137274 8/50 current_auc = 0.5098039215686274
User 137274 AUC after training: 0.5098039215686274
User 137274 does not improve AUC. Reverting changes.
Training on augumented user 49674 9/50 current_auc = 0.5098039215686274
User 49674 AUC after training: 0.5032679738562091
User 49674 does not improve AUC. Reverting changes.
Training on augumented user 47187 10/50 current_auc = 0.5098039215686274
User 47187 AUC after training: 0.5032679738562091
User 47187 does not improve AUC. Reverting changes.
Training on augumented user 136992 11/50 current_auc = 0.5098039215686274
User 136992 AUC after training: 0.5098039215686274
User 136992 does not improve AUC. Reverting changes.
Training on augumented user 11993 12/50 current_auc = 0.5098039215686274
User 11993 AUC after training: 0.5098039215686274
User 11993 does not improve AUC. Reverting changes.
Training on augumented user 102246 13/50 current_auc = 0.5098039215686274
User 102246 AUC after training: 0.5098039215686274
User 102246 does not improve AUC. Reverting changes.
Training on augumented user 73551 14/50 current_auc = 0.5098039215686274
User 73551 AUC after training: 0.49673202614379086
User 73551 does not improve AUC. Reverting changes.
Training on augumented user 63202 15/50 current_auc = 0.5098039215686274
User 63202 AUC after training: 0.5098039215686274
User 63202 does not improve AUC. Reverting changes.
Training on augumented user 30609 16/50 current_auc = 0.5098039215686274
User 30609 AUC after training: 0.5032679738562091
User 30609 does not improve AUC. Reverting changes.
Training on augumented user 16774 17/50 current_auc = 0.5098039215686274
User 16774 AUC after training: 0.5098039215686274
User 16774 does not improve AUC. Reverting changes.
Training on augumented user 32563 18/50 current_auc = 0.5098039215686274
User 32563 AUC after training: 0.5098039215686274
User 32563 does not improve AUC. Reverting changes.
Training on augumented user 119230 19/50 current_auc = 0.5098039215686274
User 119230 AUC after training: 0.5032679738562091
User 119230 does not improve AUC. Reverting changes.
Training on augumented user 94511 20/50 current_auc = 0.5098039215686274
User 94511 AUC after training: 0.5032679738562091
User 94511 does not improve AUC. Reverting changes.
Training on augumented user 79300 21/50 current_auc = 0.5098039215686274
User 79300 AUC after training: 0.49673202614379086
User 79300 does not improve AUC. Reverting changes.
Training on augumented user 10264 22/50 current_auc = 0.5098039215686274
User 10264 AUC after training: 0.5098039215686274
User 10264 does not improve AUC. Reverting changes.
Training on augumented user 109621 23/50 current_auc = 0.5098039215686274
User 109621 AUC after training: 0.5032679738562091
User 109621 does not improve AUC. Reverting changes.
Training on augumented user 130277 24/50 current_auc = 0.5098039215686274
User 130277 AUC after training: 0.5098039215686274
User 130277 does not improve AUC. Reverting changes.
Training on augumented user 13595 25/50 current_auc = 0.5098039215686274
User 13595 AUC after training: 0.49673202614379086
User 13595 does not improve AUC. Reverting changes.
Training on augumented user 37090 26/50 current_auc = 0.5098039215686274
User 37090 AUC after training: 0.5098039215686274
User 37090 does not improve AUC. Reverting changes.
Training on augumented user 45615 27/50 current_auc = 0.5098039215686274
User 45615 AUC after training: 0.5098039215686274
User 45615 does not improve AUC. Reverting changes.
Training on augumented user 73078 28/50 current_auc = 0.5098039215686274
User 73078 AUC after training: 0.5098039215686274
User 73078 does not improve AUC. Reverting changes.
Training on augumented user 43279 29/50 current_auc = 0.5098039215686274
User 43279 AUC after training: 0.5032679738562091
User 43279 does not improve AUC. Reverting changes.
Training on augumented user 10949 30/50 current_auc = 0.5098039215686274
User 10949 AUC after training: 0.5098039215686274
User 10949 does not improve AUC. Reverting changes.
Training on augumented user 123793 31/50 current_auc = 0.5098039215686274
User 123793 AUC after training: 0.5098039215686274
User 123793 does not improve AUC. Reverting changes.
Training on augumented user 44205 32/50 current_auc = 0.5098039215686274
User 44205 AUC after training: 0.5163398692810457
User 44205 improves AUC. Keeping the model.
Training on augumented user 78651 33/50 current_auc = 0.5163398692810457
User 78651 AUC after training: 0.5098039215686274
User 78651 does not improve AUC. Reverting changes.
Training on augumented user 108845 34/50 current_auc = 0.5163398692810457
User 108845 AUC after training: 0.5098039215686274
User 108845 does not improve AUC. Reverting changes.
Training on augumented user 38216 35/50 current_auc = 0.5163398692810457
User 38216 AUC after training: 0.5032679738562091
User 38216 does not improve AUC. Reverting changes.
Training on augumented user 22924 36/50 current_auc = 0.5163398692810457
User 22924 AUC after training: 0.5098039215686274
User 22924 does not improve AUC. Reverting changes.
Training on augumented user 33698 37/50 current_auc = 0.5163398692810457
User 33698 AUC after training: 0.5163398692810457
User 33698 does not improve AUC. Reverting changes.
Training on augumented user 86377 38/50 current_auc = 0.5163398692810457
User 86377 AUC after training: 0.5163398692810457
User 86377 does not improve AUC. Reverting changes.
Training on augumented user 76205 39/50 current_auc = 0.5163398692810457
User 76205 AUC after training: 0.5163398692810457
User 76205 does not improve AUC. Reverting changes.
Training on augumented user 114845 40/50 current_auc = 0.5163398692810457
User 114845 AUC after training: 0.5163398692810457
User 114845 does not improve AUC. Reverting changes.
Training on augumented user 124728 41/50 current_auc = 0.5163398692810457
User 124728 AUC after training: 0.5098039215686274
User 124728 does not improve AUC. Reverting changes.
Training on augumented user 85715 42/50 current_auc = 0.5163398692810457
User 85715 AUC after training: 0.5163398692810457
User 85715 does not improve AUC. Reverting changes.
Training on augumented user 21724 43/50 current_auc = 0.5163398692810457
User 21724 AUC after training: 0.5163398692810457
User 21724 does not improve AUC. Reverting changes.
Training on augumented user 66225 44/50 current_auc = 0.5163398692810457
User 66225 AUC after training: 0.5163398692810457
User 66225 does not improve AUC. Reverting changes.
Training on augumented user 30438 45/50 current_auc = 0.5163398692810457
User 30438 AUC after training: 0.5098039215686274
User 30438 does not improve AUC. Reverting changes.
Training on augumented user 123651 46/50 current_auc = 0.5163398692810457
User 123651 AUC after training: 0.5163398692810457
User 123651 does not improve AUC. Reverting changes.
Training on augumented user 61053 47/50 current_auc = 0.5163398692810457
User 61053 AUC after training: 0.5032679738562091
User 61053 does not improve AUC. Reverting changes.
Training on augumented user 36676 48/50 current_auc = 0.5163398692810457
User 36676 AUC after training: 0.5098039215686274
User 36676 does not improve AUC. Reverting changes.
Training on augumented user 111347 49/50 current_auc = 0.5163398692810457
User 111347 AUC after training: 0.5163398692810457
User 111347 does not improve AUC. Reverting changes.
[2024-12-02 18:05:02.265465] start test user 97517 51/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:05:02.668028] start test user 97517 51/567 recall augumented users by random, augumented_users = [23254, 23847, 11847, 36214, 113918, 30251, 111805, 76955, 71989, 98440, 55116, 27559, 17442, 104968, 129523, 626, 43799, 65671, 85010, 121528, 83336, 43492, 102902, 9600, 78988, 110285, 113679, 132401, 54454, 38973, 101906, 8432, 20915, 86454, 49883, 13979, 46978, 88780, 125486, 32679, 38065, 129340, 129812, 36118, 130903, 132036, 38415, 67255, 87503, 48462]
[2024-12-02 18:05:02.682588] user = 97517 Cloud 51/567
[2024-12-02 18:05:02.702154] user = 97517 Local 51/567
[2024-12-02 18:05:02.721987] user = 97517 Local+ 51/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:05:05.133061] user = 97517 MPDA- 51/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6086956521739131
Training on augumented user 23254 0/50 current_auc = 0.6086956521739131
User 23254 AUC after training: 0.6086956521739131
User 23254 does not improve AUC. Reverting changes.
Training on augumented user 23847 1/50 current_auc = 0.6086956521739131
User 23847 AUC after training: 0.6086956521739131
User 23847 does not improve AUC. Reverting changes.
Training on augumented user 11847 2/50 current_auc = 0.6086956521739131
User 11847 AUC after training: 0.6086956521739131
User 11847 does not improve AUC. Reverting changes.
Training on augumented user 36214 3/50 current_auc = 0.6086956521739131
User 36214 AUC after training: 0.6086956521739131
User 36214 does not improve AUC. Reverting changes.
Training on augumented user 113918 4/50 current_auc = 0.6086956521739131
User 113918 AUC after training: 0.6086956521739131
User 113918 does not improve AUC. Reverting changes.
Training on augumented user 30251 5/50 current_auc = 0.6086956521739131
User 30251 AUC after training: 0.6086956521739131
User 30251 does not improve AUC. Reverting changes.
Training on augumented user 111805 6/50 current_auc = 0.6086956521739131
User 111805 AUC after training: 0.6521739130434783
User 111805 improves AUC. Keeping the model.
Training on augumented user 76955 7/50 current_auc = 0.6521739130434783
User 76955 AUC after training: 0.6521739130434783
User 76955 does not improve AUC. Reverting changes.
Training on augumented user 71989 8/50 current_auc = 0.6521739130434783
User 71989 AUC after training: 0.6521739130434783
User 71989 does not improve AUC. Reverting changes.
Training on augumented user 98440 9/50 current_auc = 0.6521739130434783
User 98440 AUC after training: 0.6521739130434783
User 98440 does not improve AUC. Reverting changes.
Training on augumented user 55116 10/50 current_auc = 0.6521739130434783
User 55116 AUC after training: 0.6521739130434783
User 55116 does not improve AUC. Reverting changes.
Training on augumented user 27559 11/50 current_auc = 0.6521739130434783
User 27559 AUC after training: 0.6521739130434783
User 27559 does not improve AUC. Reverting changes.
Training on augumented user 17442 12/50 current_auc = 0.6521739130434783
User 17442 AUC after training: 0.6521739130434783
User 17442 does not improve AUC. Reverting changes.
Training on augumented user 104968 13/50 current_auc = 0.6521739130434783
User 104968 AUC after training: 0.6086956521739131
User 104968 does not improve AUC. Reverting changes.
Training on augumented user 129523 14/50 current_auc = 0.6521739130434783
User 129523 AUC after training: 0.6521739130434783
User 129523 does not improve AUC. Reverting changes.
Training on augumented user 626 15/50 current_auc = 0.6521739130434783
User 626 AUC after training: 0.6521739130434783
User 626 does not improve AUC. Reverting changes.
Training on augumented user 43799 16/50 current_auc = 0.6521739130434783
User 43799 AUC after training: 0.6086956521739131
User 43799 does not improve AUC. Reverting changes.
Training on augumented user 65671 17/50 current_auc = 0.6521739130434783
User 65671 AUC after training: 0.6521739130434783
User 65671 does not improve AUC. Reverting changes.
Training on augumented user 85010 18/50 current_auc = 0.6521739130434783
User 85010 AUC after training: 0.6521739130434783
User 85010 does not improve AUC. Reverting changes.
Training on augumented user 121528 19/50 current_auc = 0.6521739130434783
User 121528 AUC after training: 0.6521739130434783
User 121528 does not improve AUC. Reverting changes.
Training on augumented user 83336 20/50 current_auc = 0.6521739130434783
User 83336 AUC after training: 0.6521739130434783
User 83336 does not improve AUC. Reverting changes.
Training on augumented user 43492 21/50 current_auc = 0.6521739130434783
User 43492 AUC after training: 0.6521739130434783
User 43492 does not improve AUC. Reverting changes.
Training on augumented user 102902 22/50 current_auc = 0.6521739130434783
User 102902 AUC after training: 0.6086956521739131
User 102902 does not improve AUC. Reverting changes.
Training on augumented user 9600 23/50 current_auc = 0.6521739130434783
User 9600 AUC after training: 0.6086956521739131
User 9600 does not improve AUC. Reverting changes.
Training on augumented user 78988 24/50 current_auc = 0.6521739130434783
User 78988 AUC after training: 0.6086956521739131
User 78988 does not improve AUC. Reverting changes.
Training on augumented user 110285 25/50 current_auc = 0.6521739130434783
User 110285 AUC after training: 0.6086956521739131
User 110285 does not improve AUC. Reverting changes.
Training on augumented user 113679 26/50 current_auc = 0.6521739130434783
User 113679 AUC after training: 0.6521739130434783
User 113679 does not improve AUC. Reverting changes.
Training on augumented user 132401 27/50 current_auc = 0.6521739130434783
User 132401 AUC after training: 0.6086956521739131
User 132401 does not improve AUC. Reverting changes.
Training on augumented user 54454 28/50 current_auc = 0.6521739130434783
User 54454 AUC after training: 0.6521739130434783
User 54454 does not improve AUC. Reverting changes.
Training on augumented user 38973 29/50 current_auc = 0.6521739130434783
User 38973 AUC after training: 0.6086956521739131
User 38973 does not improve AUC. Reverting changes.
Training on augumented user 101906 30/50 current_auc = 0.6521739130434783
User 101906 AUC after training: 0.6086956521739131
User 101906 does not improve AUC. Reverting changes.
Training on augumented user 8432 31/50 current_auc = 0.6521739130434783
User 8432 AUC after training: 0.6521739130434783
User 8432 does not improve AUC. Reverting changes.
Training on augumented user 20915 32/50 current_auc = 0.6521739130434783
User 20915 AUC after training: 0.6521739130434783
User 20915 does not improve AUC. Reverting changes.
Training on augumented user 86454 33/50 current_auc = 0.6521739130434783
User 86454 AUC after training: 0.6521739130434783
User 86454 does not improve AUC. Reverting changes.
Training on augumented user 49883 34/50 current_auc = 0.6521739130434783
User 49883 AUC after training: 0.6086956521739131
User 49883 does not improve AUC. Reverting changes.
Training on augumented user 13979 35/50 current_auc = 0.6521739130434783
User 13979 AUC after training: 0.6086956521739131
User 13979 does not improve AUC. Reverting changes.
Training on augumented user 46978 36/50 current_auc = 0.6521739130434783
User 46978 AUC after training: 0.6521739130434783
User 46978 does not improve AUC. Reverting changes.
Training on augumented user 88780 37/50 current_auc = 0.6521739130434783
User 88780 AUC after training: 0.6521739130434783
User 88780 does not improve AUC. Reverting changes.
Training on augumented user 125486 38/50 current_auc = 0.6521739130434783
User 125486 AUC after training: 0.6086956521739131
User 125486 does not improve AUC. Reverting changes.
Training on augumented user 32679 39/50 current_auc = 0.6521739130434783
User 32679 AUC after training: 0.6521739130434783
User 32679 does not improve AUC. Reverting changes.
Training on augumented user 38065 40/50 current_auc = 0.6521739130434783
User 38065 AUC after training: 0.6521739130434783
User 38065 does not improve AUC. Reverting changes.
Training on augumented user 129340 41/50 current_auc = 0.6521739130434783
User 129340 AUC after training: 0.6521739130434783
User 129340 does not improve AUC. Reverting changes.
Training on augumented user 129812 42/50 current_auc = 0.6521739130434783
User 129812 AUC after training: 0.6086956521739131
User 129812 does not improve AUC. Reverting changes.
Training on augumented user 36118 43/50 current_auc = 0.6521739130434783
User 36118 AUC after training: 0.6521739130434783
User 36118 does not improve AUC. Reverting changes.
Training on augumented user 130903 44/50 current_auc = 0.6521739130434783
User 130903 AUC after training: 0.6521739130434783
User 130903 does not improve AUC. Reverting changes.
Training on augumented user 132036 45/50 current_auc = 0.6521739130434783
User 132036 AUC after training: 0.6521739130434783
User 132036 does not improve AUC. Reverting changes.
Training on augumented user 38415 46/50 current_auc = 0.6521739130434783
User 38415 AUC after training: 0.6521739130434783
User 38415 does not improve AUC. Reverting changes.
Training on augumented user 67255 47/50 current_auc = 0.6521739130434783
User 67255 AUC after training: 0.6086956521739131
User 67255 does not improve AUC. Reverting changes.
Training on augumented user 87503 48/50 current_auc = 0.6521739130434783
User 87503 AUC after training: 0.6521739130434783
User 87503 does not improve AUC. Reverting changes.
Training on augumented user 48462 49/50 current_auc = 0.6521739130434783
User 48462 AUC after training: 0.6521739130434783
User 48462 does not improve AUC. Reverting changes.
[2024-12-02 18:05:38.642514] start test user 97521 52/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:05:39.178736] start test user 97521 52/567 recall augumented users by random, augumented_users = [31124, 48907, 34555, 46687, 125014, 91624, 122282, 30251, 29205, 83011, 92599, 109420, 37948, 36617, 114348, 41612, 58027, 41047, 48065, 132987, 28947, 44416, 129586, 25555, 448, 97388, 86093, 36309, 56679, 73022, 88854, 33243, 114098, 138481, 39605, 125792, 36365, 104015, 7729, 94367, 80393, 93996, 78333, 59115, 53147, 50952, 30090, 3613, 8889, 79529]
[2024-12-02 18:05:39.197834] user = 97521 Cloud 52/567
[2024-12-02 18:05:39.221922] user = 97521 Local 52/567
[2024-12-02 18:05:39.475302] user = 97521 Local+ 52/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:05:42.416506] user = 97521 MPDA- 52/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7113387395077536
Training on augumented user 31124 0/50 current_auc = 0.7113387395077536
User 31124 AUC after training: 0.7110542040119505
User 31124 does not improve AUC. Reverting changes.
Training on augumented user 48907 1/50 current_auc = 0.7113387395077536
User 48907 AUC after training: 0.7106274007682458
User 48907 does not improve AUC. Reverting changes.
Training on augumented user 34555 2/50 current_auc = 0.7113387395077536
User 34555 AUC after training: 0.7099160620287381
User 34555 does not improve AUC. Reverting changes.
Training on augumented user 46687 3/50 current_auc = 0.7113387395077536
User 46687 AUC after training: 0.7110542040119505
User 46687 does not improve AUC. Reverting changes.
Training on augumented user 125014 4/50 current_auc = 0.7113387395077536
User 125014 AUC after training: 0.7109119362640489
User 125014 does not improve AUC. Reverting changes.
Training on augumented user 91624 5/50 current_auc = 0.7113387395077536
User 91624 AUC after training: 0.7106274007682458
User 91624 does not improve AUC. Reverting changes.
Training on augumented user 122282 6/50 current_auc = 0.7113387395077536
User 122282 AUC after training: 0.711196471759852
User 122282 does not improve AUC. Reverting changes.
Training on augumented user 30251 7/50 current_auc = 0.7113387395077536
User 30251 AUC after training: 0.7100583297766396
User 30251 does not improve AUC. Reverting changes.
Training on augumented user 29205 8/50 current_auc = 0.7113387395077536
User 29205 AUC after training: 0.7109119362640489
User 29205 does not improve AUC. Reverting changes.
Training on augumented user 83011 9/50 current_auc = 0.7113387395077536
User 83011 AUC after training: 0.7110542040119505
User 83011 does not improve AUC. Reverting changes.
Training on augumented user 92599 10/50 current_auc = 0.7113387395077536
User 92599 AUC after training: 0.7106274007682458
User 92599 does not improve AUC. Reverting changes.
Training on augumented user 109420 11/50 current_auc = 0.7113387395077536
User 109420 AUC after training: 0.7110542040119505
User 109420 does not improve AUC. Reverting changes.
Training on augumented user 37948 12/50 current_auc = 0.7113387395077536
User 37948 AUC after training: 0.7107696685161474
User 37948 does not improve AUC. Reverting changes.
Training on augumented user 36617 13/50 current_auc = 0.7113387395077536
User 36617 AUC after training: 0.7100583297766397
User 36617 does not improve AUC. Reverting changes.
Training on augumented user 114348 14/50 current_auc = 0.7113387395077536
User 114348 AUC after training: 0.710911936264049
User 114348 does not improve AUC. Reverting changes.
Training on augumented user 41612 15/50 current_auc = 0.7113387395077536
User 41612 AUC after training: 0.709916062028738
User 41612 does not improve AUC. Reverting changes.
Training on augumented user 58027 16/50 current_auc = 0.7113387395077536
User 58027 AUC after training: 0.7102005975245412
User 58027 does not improve AUC. Reverting changes.
Training on augumented user 41047 17/50 current_auc = 0.7113387395077536
User 41047 AUC after training: 0.7103428652724427
User 41047 does not improve AUC. Reverting changes.
Training on augumented user 48065 18/50 current_auc = 0.7113387395077536
User 48065 AUC after training: 0.7103428652724427
User 48065 does not improve AUC. Reverting changes.
Training on augumented user 132987 19/50 current_auc = 0.7113387395077536
User 132987 AUC after training: 0.7104851330203443
User 132987 does not improve AUC. Reverting changes.
Training on augumented user 28947 20/50 current_auc = 0.7113387395077536
User 28947 AUC after training: 0.7102005975245411
User 28947 does not improve AUC. Reverting changes.
Training on augumented user 44416 21/50 current_auc = 0.7113387395077536
User 44416 AUC after training: 0.7107696685161474
User 44416 does not improve AUC. Reverting changes.
Training on augumented user 129586 22/50 current_auc = 0.7113387395077536
User 129586 AUC after training: 0.7106274007682459
User 129586 does not improve AUC. Reverting changes.
Training on augumented user 25555 23/50 current_auc = 0.7113387395077536
User 25555 AUC after training: 0.7107696685161474
User 25555 does not improve AUC. Reverting changes.
Training on augumented user 448 24/50 current_auc = 0.7113387395077536
User 448 AUC after training: 0.7113387395077536
User 448 does not improve AUC. Reverting changes.
Training on augumented user 97388 25/50 current_auc = 0.7113387395077536
User 97388 AUC after training: 0.7102005975245412
User 97388 does not improve AUC. Reverting changes.
Training on augumented user 86093 26/50 current_auc = 0.7113387395077536
User 86093 AUC after training: 0.7107696685161474
User 86093 does not improve AUC. Reverting changes.
Training on augumented user 36309 27/50 current_auc = 0.7113387395077536
User 36309 AUC after training: 0.7114810072556551
User 36309 improves AUC. Keeping the model.
Training on augumented user 56679 28/50 current_auc = 0.7114810072556551
User 56679 AUC after training: 0.7100583297766396
User 56679 does not improve AUC. Reverting changes.
Training on augumented user 73022 29/50 current_auc = 0.7114810072556551
User 73022 AUC after training: 0.7110542040119505
User 73022 does not improve AUC. Reverting changes.
Training on augumented user 88854 30/50 current_auc = 0.7114810072556551
User 88854 AUC after training: 0.7117655427514582
User 88854 improves AUC. Keeping the model.
Training on augumented user 33243 31/50 current_auc = 0.7117655427514582
User 33243 AUC after training: 0.7109119362640489
User 33243 does not improve AUC. Reverting changes.
Training on augumented user 114098 32/50 current_auc = 0.7117655427514582
User 114098 AUC after training: 0.7114810072556551
User 114098 does not improve AUC. Reverting changes.
Training on augumented user 138481 33/50 current_auc = 0.7117655427514582
User 138481 AUC after training: 0.7113387395077536
User 138481 does not improve AUC. Reverting changes.
Training on augumented user 39605 34/50 current_auc = 0.7117655427514582
User 39605 AUC after training: 0.7114810072556552
User 39605 does not improve AUC. Reverting changes.
Training on augumented user 125792 35/50 current_auc = 0.7117655427514582
User 125792 AUC after training: 0.7110542040119505
User 125792 does not improve AUC. Reverting changes.
Training on augumented user 36365 36/50 current_auc = 0.7117655427514582
User 36365 AUC after training: 0.7116232750035567
User 36365 does not improve AUC. Reverting changes.
Training on augumented user 104015 37/50 current_auc = 0.7117655427514582
User 104015 AUC after training: 0.7102005975245411
User 104015 does not improve AUC. Reverting changes.
Training on augumented user 7729 38/50 current_auc = 0.7117655427514582
User 7729 AUC after training: 0.7109119362640489
User 7729 does not improve AUC. Reverting changes.
Training on augumented user 94367 39/50 current_auc = 0.7117655427514582
User 94367 AUC after training: 0.7116232750035567
User 94367 does not improve AUC. Reverting changes.
Training on augumented user 80393 40/50 current_auc = 0.7117655427514582
User 80393 AUC after training: 0.7107696685161474
User 80393 does not improve AUC. Reverting changes.
Training on augumented user 93996 41/50 current_auc = 0.7117655427514582
User 93996 AUC after training: 0.7114810072556551
User 93996 does not improve AUC. Reverting changes.
Training on augumented user 78333 42/50 current_auc = 0.7117655427514582
User 78333 AUC after training: 0.7113387395077536
User 78333 does not improve AUC. Reverting changes.
Training on augumented user 59115 43/50 current_auc = 0.7117655427514582
User 59115 AUC after training: 0.711196471759852
User 59115 does not improve AUC. Reverting changes.
Training on augumented user 53147 44/50 current_auc = 0.7117655427514582
User 53147 AUC after training: 0.7110542040119505
User 53147 does not improve AUC. Reverting changes.
Training on augumented user 50952 45/50 current_auc = 0.7117655427514582
User 50952 AUC after training: 0.7113387395077536
User 50952 does not improve AUC. Reverting changes.
Training on augumented user 30090 46/50 current_auc = 0.7117655427514582
User 30090 AUC after training: 0.7107696685161474
User 30090 does not improve AUC. Reverting changes.
Training on augumented user 3613 47/50 current_auc = 0.7117655427514582
User 3613 AUC after training: 0.7109119362640489
User 3613 does not improve AUC. Reverting changes.
Training on augumented user 8889 48/50 current_auc = 0.7117655427514582
User 8889 AUC after training: 0.7109119362640489
User 8889 does not improve AUC. Reverting changes.
Training on augumented user 79529 49/50 current_auc = 0.7117655427514582
User 79529 AUC after training: 0.7107696685161474
User 79529 does not improve AUC. Reverting changes.
[2024-12-02 18:06:09.112545] start test user 97533 53/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:06:09.557603] start test user 97533 53/567 recall augumented users by random, augumented_users = [137082, 118689, 60876, 100586, 46733, 2912, 113274, 59893, 54403, 134108, 91247, 19182, 39096, 18386, 5785, 24963, 79754, 46604, 85911, 90340, 125528, 106449, 117473, 117414, 79840, 18859, 134697, 95680, 14144, 18856, 69802, 127948, 133659, 84077, 33429, 22902, 128156, 5146, 50877, 85071, 21677, 22337, 32581, 111857, 97566, 81983, 70539, 9631, 84291, 90913]
[2024-12-02 18:06:09.574374] user = 97533 Cloud 53/567
[2024-12-02 18:06:09.689949] user = 97533 Local 53/567
[2024-12-02 18:06:09.855100] user = 97533 Local+ 53/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:06:12.533859] user = 97533 MPDA- 53/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5579539006241958
Training on augumented user 137082 0/50 current_auc = 0.5579539006241958
User 137082 AUC after training: 0.5579758793487903
User 137082 improves AUC. Keeping the model.
Training on augumented user 118689 1/50 current_auc = 0.5579758793487903
User 118689 AUC after training: 0.5579878677440238
User 118689 improves AUC. Keeping the model.
Training on augumented user 60876 2/50 current_auc = 0.5579878677440238
User 60876 AUC after training: 0.5578130369802032
User 60876 does not improve AUC. Reverting changes.
Training on augumented user 100586 3/50 current_auc = 0.5579878677440238
User 100586 AUC after training: 0.55792193157024
User 100586 does not improve AUC. Reverting changes.
Training on augumented user 46733 4/50 current_auc = 0.5579878677440238
User 46733 AUC after training: 0.5581007584658051
User 46733 improves AUC. Keeping the model.
Training on augumented user 2912 5/50 current_auc = 0.5581007584658051
User 2912 AUC after training: 0.5581007584658051
User 2912 does not improve AUC. Reverting changes.
Training on augumented user 113274 6/50 current_auc = 0.5581007584658051
User 113274 AUC after training: 0.5582885766577952
User 113274 improves AUC. Keeping the model.
Training on augumented user 59893 7/50 current_auc = 0.5582885766577952
User 59893 AUC after training: 0.558159701409036
User 59893 does not improve AUC. Reverting changes.
Training on augumented user 54403 8/50 current_auc = 0.5582885766577952
User 54403 AUC after training: 0.5583025631189009
User 54403 improves AUC. Keeping the model.
Training on augumented user 134108 9/50 current_auc = 0.5583025631189009
User 134108 AUC after training: 0.558159701409036
User 134108 does not improve AUC. Reverting changes.
Training on augumented user 91247 10/50 current_auc = 0.5583025631189009
User 91247 AUC after training: 0.5584094596430655
User 91247 improves AUC. Keeping the model.
Training on augumented user 19182 11/50 current_auc = 0.5584094596430655
User 19182 AUC after training: 0.5585023697061244
User 19182 improves AUC. Keeping the model.
Training on augumented user 39096 12/50 current_auc = 0.5585023697061244
User 39096 AUC after training: 0.5586772004699452
User 39096 improves AUC. Keeping the model.
Training on augumented user 18386 13/50 current_auc = 0.5586772004699452
User 18386 AUC after training: 0.5583874809184709
User 18386 does not improve AUC. Reverting changes.
Training on augumented user 5785 14/50 current_auc = 0.5586772004699452
User 5785 AUC after training: 0.5585353377930165
User 5785 does not improve AUC. Reverting changes.
Training on augumented user 24963 15/50 current_auc = 0.5586772004699452
User 24963 AUC after training: 0.5586232526913947
User 24963 does not improve AUC. Reverting changes.
Training on augumented user 79754 16/50 current_auc = 0.5586772004699452
User 79754 AUC after training: 0.5587011772604119
User 79754 improves AUC. Keeping the model.
Training on augumented user 46604 17/50 current_auc = 0.5587011772604119
User 46604 AUC after training: 0.558744135676665
User 46604 improves AUC. Keeping the model.
Training on augumented user 85911 18/50 current_auc = 0.558744135676665
User 85911 AUC after training: 0.5587411385778567
User 85911 does not improve AUC. Reverting changes.
Training on augumented user 90340 19/50 current_auc = 0.558744135676665
User 90340 AUC after training: 0.558871012859552
User 90340 improves AUC. Keeping the model.
Training on augumented user 125528 20/50 current_auc = 0.558871012859552
User 125528 AUC after training: 0.5585962788021195
User 125528 does not improve AUC. Reverting changes.
Training on augumented user 106449 21/50 current_auc = 0.558871012859552
User 106449 AUC after training: 0.5586552217453504
User 106449 does not improve AUC. Reverting changes.
Training on augumented user 117473 22/50 current_auc = 0.558871012859552
User 117473 AUC after training: 0.5587711095659402
User 117473 does not improve AUC. Reverting changes.
Training on augumented user 117414 23/50 current_auc = 0.558871012859552
User 117414 AUC after training: 0.5585792952422055
User 117414 does not improve AUC. Reverting changes.
Training on augumented user 79840 24/50 current_auc = 0.558871012859552
User 79840 AUC after training: 0.5584903813108911
User 79840 does not improve AUC. Reverting changes.
Training on augumented user 18859 25/50 current_auc = 0.558871012859552
User 18859 AUC after training: 0.5587631173024512
User 18859 does not improve AUC. Reverting changes.
Training on augumented user 134697 26/50 current_auc = 0.558871012859552
User 134697 AUC after training: 0.5585203522989746
User 134697 does not improve AUC. Reverting changes.
Training on augumented user 95680 27/50 current_auc = 0.558871012859552
User 95680 AUC after training: 0.5587171617873898
User 95680 does not improve AUC. Reverting changes.
Training on augumented user 14144 28/50 current_auc = 0.558871012859552
User 14144 AUC after training: 0.5588130689492571
User 14144 does not improve AUC. Reverting changes.
Training on augumented user 18856 29/50 current_auc = 0.558871012859552
User 18856 AUC after training: 0.5587621182695152
User 18856 does not improve AUC. Reverting changes.
Training on augumented user 69802 30/50 current_auc = 0.558871012859552
User 69802 AUC after training: 0.5588170650810016
User 69802 does not improve AUC. Reverting changes.
Training on augumented user 127948 31/50 current_auc = 0.558871012859552
User 127948 AUC after training: 0.5580877710376355
User 127948 does not improve AUC. Reverting changes.
Training on augumented user 133659 32/50 current_auc = 0.558871012859552
User 133659 AUC after training: 0.5585613126493554
User 133659 does not improve AUC. Reverting changes.
Training on augumented user 84077 33/50 current_auc = 0.558871012859552
User 84077 AUC after training: 0.558779101829429
User 84077 does not improve AUC. Reverting changes.
Training on augumented user 33429 34/50 current_auc = 0.558871012859552
User 33429 AUC after training: 0.5587531269730901
User 33429 does not improve AUC. Reverting changes.
Training on augumented user 22902 35/50 current_auc = 0.558871012859552
User 22902 AUC after training: 0.5584743967839132
User 22902 does not improve AUC. Reverting changes.
Training on augumented user 128156 36/50 current_auc = 0.558871012859552
User 128156 AUC after training: 0.5586851927334341
User 128156 does not improve AUC. Reverting changes.
Training on augumented user 5146 37/50 current_auc = 0.558871012859552
User 5146 AUC after training: 0.5588260563774267
User 5146 does not improve AUC. Reverting changes.
Training on augumented user 50877 38/50 current_auc = 0.558871012859552
User 50877 AUC after training: 0.5582925727895397
User 50877 does not improve AUC. Reverting changes.
Training on augumented user 85071 39/50 current_auc = 0.558871012859552
User 85071 AUC after training: 0.558769111500068
User 85071 does not improve AUC. Reverting changes.
Training on augumented user 21677 40/50 current_auc = 0.558871012859552
User 21677 AUC after training: 0.5585613126493555
User 21677 does not improve AUC. Reverting changes.
Training on augumented user 22337 41/50 current_auc = 0.558871012859552
User 22337 AUC after training: 0.5587890921587904
User 22337 does not improve AUC. Reverting changes.
Training on augumented user 32581 42/50 current_auc = 0.558871012859552
User 32581 AUC after training: 0.5585952797691834
User 32581 does not improve AUC. Reverting changes.
Training on augumented user 111857 43/50 current_auc = 0.558871012859552
User 111857 AUC after training: 0.5583515157327706
User 111857 does not improve AUC. Reverting changes.
Training on augumented user 97566 44/50 current_auc = 0.558871012859552
User 97566 AUC after training: 0.5584913803438272
User 97566 does not improve AUC. Reverting changes.
Training on augumented user 81983 45/50 current_auc = 0.558871012859552
User 81983 AUC after training: 0.5587771037635568
User 81983 does not improve AUC. Reverting changes.
Training on augumented user 70539 46/50 current_auc = 0.558871012859552
User 70539 AUC after training: 0.5587291501826233
User 70539 does not improve AUC. Reverting changes.
Training on augumented user 9631 47/50 current_auc = 0.558871012859552
User 9631 AUC after training: 0.5588080737845765
User 9631 does not improve AUC. Reverting changes.
Training on augumented user 84291 48/50 current_auc = 0.558871012859552
User 84291 AUC after training: 0.5586272488231392
User 84291 does not improve AUC. Reverting changes.
Training on augumented user 90913 49/50 current_auc = 0.558871012859552
User 90913 AUC after training: 0.5584853861462105
User 90913 does not improve AUC. Reverting changes.
[2024-12-02 18:06:52.631367] start test user 97559 54/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:06:53.291111] start test user 97559 54/567 recall augumented users by random, augumented_users = [67424, 7555, 107189, 42941, 137556, 41246, 27008, 115516, 12742, 135380, 34961, 136545, 58390, 2237, 76298, 13926, 110748, 853, 18815, 11157, 113034, 15150, 18554, 107362, 12337, 11515, 113639, 63335, 24380, 61914, 86133, 111951, 70609, 78662, 60065, 106129, 52991, 61591, 30498, 99627, 62880, 83621, 103123, 39500, 97192, 56144, 128630, 2944, 61329, 92339]
[2024-12-02 18:06:53.307312] user = 97559 Cloud 54/567
[2024-12-02 18:06:53.322055] user = 97559 Local 54/567
[2024-12-02 18:06:53.368509] user = 97559 Local+ 54/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:06:55.442940] user = 97559 MPDA- 54/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6704298740772905
Training on augumented user 67424 0/50 current_auc = 0.6704298740772905
User 67424 AUC after training: 0.6712983065566651
User 67424 improves AUC. Keeping the model.
Training on augumented user 7555 1/50 current_auc = 0.6712983065566651
User 7555 AUC after training: 0.6715154146765089
User 7555 improves AUC. Keeping the model.
Training on augumented user 107189 2/50 current_auc = 0.6715154146765089
User 107189 AUC after training: 0.6704298740772905
User 107189 does not improve AUC. Reverting changes.
Training on augumented user 42941 3/50 current_auc = 0.6715154146765089
User 42941 AUC after training: 0.6712983065566652
User 42941 does not improve AUC. Reverting changes.
Training on augumented user 137556 4/50 current_auc = 0.6715154146765089
User 137556 AUC after training: 0.67216673903604
User 137556 improves AUC. Keeping the model.
Training on augumented user 41246 5/50 current_auc = 0.67216673903604
User 41246 AUC after training: 0.6726009552757273
User 41246 improves AUC. Keeping the model.
Training on augumented user 27008 6/50 current_auc = 0.6726009552757273
User 27008 AUC after training: 0.6730351715154147
User 27008 improves AUC. Keeping the model.
Training on augumented user 115516 7/50 current_auc = 0.6730351715154147
User 115516 AUC after training: 0.67216673903604
User 115516 does not improve AUC. Reverting changes.
Training on augumented user 12742 8/50 current_auc = 0.6730351715154147
User 12742 AUC after training: 0.673469387755102
User 12742 improves AUC. Keeping the model.
Training on augumented user 135380 9/50 current_auc = 0.673469387755102
User 135380 AUC after training: 0.6732522796352584
User 135380 does not improve AUC. Reverting changes.
Training on augumented user 34961 10/50 current_auc = 0.673469387755102
User 34961 AUC after training: 0.6712983065566651
User 34961 does not improve AUC. Reverting changes.
Training on augumented user 136545 11/50 current_auc = 0.673469387755102
User 136545 AUC after training: 0.6704298740772905
User 136545 does not improve AUC. Reverting changes.
Training on augumented user 58390 12/50 current_auc = 0.673469387755102
User 58390 AUC after training: 0.6726009552757273
User 58390 does not improve AUC. Reverting changes.
Training on augumented user 2237 13/50 current_auc = 0.673469387755102
User 2237 AUC after training: 0.6726009552757273
User 2237 does not improve AUC. Reverting changes.
Training on augumented user 76298 14/50 current_auc = 0.673469387755102
User 76298 AUC after training: 0.6726009552757273
User 76298 does not improve AUC. Reverting changes.
Training on augumented user 13926 15/50 current_auc = 0.673469387755102
User 13926 AUC after training: 0.673469387755102
User 13926 does not improve AUC. Reverting changes.
Training on augumented user 110748 16/50 current_auc = 0.673469387755102
User 110748 AUC after training: 0.6726009552757273
User 110748 does not improve AUC. Reverting changes.
Training on augumented user 853 17/50 current_auc = 0.673469387755102
User 853 AUC after training: 0.6723838471558836
User 853 does not improve AUC. Reverting changes.
Training on augumented user 18815 18/50 current_auc = 0.673469387755102
User 18815 AUC after training: 0.6752062527138516
User 18815 improves AUC. Keeping the model.
Training on augumented user 11157 19/50 current_auc = 0.6752062527138516
User 11157 AUC after training: 0.6743378202344767
User 11157 does not improve AUC. Reverting changes.
Training on augumented user 113034 20/50 current_auc = 0.6752062527138516
User 113034 AUC after training: 0.6752062527138514
User 113034 does not improve AUC. Reverting changes.
Training on augumented user 15150 21/50 current_auc = 0.6752062527138516
User 15150 AUC after training: 0.6752062527138516
User 15150 does not improve AUC. Reverting changes.
Training on augumented user 18554 22/50 current_auc = 0.6752062527138516
User 18554 AUC after training: 0.6758575770733826
User 18554 improves AUC. Keeping the model.
Training on augumented user 107362 23/50 current_auc = 0.6758575770733826
User 107362 AUC after training: 0.6749891445940078
User 107362 does not improve AUC. Reverting changes.
Training on augumented user 12337 24/50 current_auc = 0.6758575770733826
User 12337 AUC after training: 0.6767260095527573
User 12337 improves AUC. Keeping the model.
Training on augumented user 11515 25/50 current_auc = 0.6767260095527573
User 11515 AUC after training: 0.6771602257924446
User 11515 improves AUC. Keeping the model.
Training on augumented user 113639 26/50 current_auc = 0.6771602257924446
User 113639 AUC after training: 0.6771602257924447
User 113639 improves AUC. Keeping the model.
Training on augumented user 63335 27/50 current_auc = 0.6771602257924447
User 63335 AUC after training: 0.6784628745115067
User 63335 improves AUC. Keeping the model.
Training on augumented user 24380 28/50 current_auc = 0.6784628745115067
User 24380 AUC after training: 0.6780286582718194
User 24380 does not improve AUC. Reverting changes.
Training on augumented user 61914 29/50 current_auc = 0.6784628745115067
User 61914 AUC after training: 0.678245766391663
User 61914 does not improve AUC. Reverting changes.
Training on augumented user 86133 30/50 current_auc = 0.6784628745115067
User 86133 AUC after training: 0.6797655232305688
User 86133 improves AUC. Keeping the model.
Training on augumented user 111951 31/50 current_auc = 0.6797655232305688
User 111951 AUC after training: 0.6797655232305688
User 111951 does not improve AUC. Reverting changes.
Training on augumented user 70609 32/50 current_auc = 0.6797655232305688
User 70609 AUC after training: 0.6788970907511942
User 70609 does not improve AUC. Reverting changes.
Training on augumented user 78662 33/50 current_auc = 0.6797655232305688
User 78662 AUC after training: 0.6797655232305688
User 78662 does not improve AUC. Reverting changes.
Training on augumented user 60065 34/50 current_auc = 0.6797655232305688
User 60065 AUC after training: 0.6788970907511941
User 60065 does not improve AUC. Reverting changes.
Training on augumented user 106129 35/50 current_auc = 0.6797655232305688
User 106129 AUC after training: 0.6793313069908815
User 106129 does not improve AUC. Reverting changes.
Training on augumented user 52991 36/50 current_auc = 0.6797655232305688
User 52991 AUC after training: 0.6773773339122884
User 52991 does not improve AUC. Reverting changes.
Training on augumented user 61591 37/50 current_auc = 0.6797655232305688
User 61591 AUC after training: 0.6799826313504125
User 61591 improves AUC. Keeping the model.
Training on augumented user 30498 38/50 current_auc = 0.6799826313504125
User 30498 AUC after training: 0.6799826313504125
User 30498 does not improve AUC. Reverting changes.
Training on augumented user 99627 39/50 current_auc = 0.6799826313504125
User 99627 AUC after training: 0.6767260095527573
User 99627 does not improve AUC. Reverting changes.
Training on augumented user 62880 40/50 current_auc = 0.6799826313504125
User 62880 AUC after training: 0.6801997394702561
User 62880 improves AUC. Keeping the model.
Training on augumented user 83621 41/50 current_auc = 0.6801997394702561
User 83621 AUC after training: 0.6799826313504125
User 83621 does not improve AUC. Reverting changes.
Training on augumented user 103123 42/50 current_auc = 0.6801997394702561
User 103123 AUC after training: 0.6806339557099435
User 103123 improves AUC. Keeping the model.
Training on augumented user 39500 43/50 current_auc = 0.6806339557099435
User 39500 AUC after training: 0.6797655232305688
User 39500 does not improve AUC. Reverting changes.
Training on augumented user 97192 44/50 current_auc = 0.6806339557099435
User 97192 AUC after training: 0.6791141988710379
User 97192 does not improve AUC. Reverting changes.
Training on augumented user 56144 45/50 current_auc = 0.6806339557099435
User 56144 AUC after training: 0.6806339557099435
User 56144 does not improve AUC. Reverting changes.
Training on augumented user 128630 46/50 current_auc = 0.6806339557099435
User 128630 AUC after training: 0.6765089014329136
User 128630 does not improve AUC. Reverting changes.
Training on augumented user 2944 47/50 current_auc = 0.6806339557099435
User 2944 AUC after training: 0.6793313069908815
User 2944 does not improve AUC. Reverting changes.
Training on augumented user 61329 48/50 current_auc = 0.6806339557099435
User 61329 AUC after training: 0.6799826313504125
User 61329 does not improve AUC. Reverting changes.
Training on augumented user 92339 49/50 current_auc = 0.6806339557099435
User 92339 AUC after training: 0.6784628745115068
User 92339 does not improve AUC. Reverting changes.
[2024-12-02 18:07:22.314586] start test user 97602 55/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:07:22.758129] start test user 97602 55/567 recall augumented users by random, augumented_users = [68822, 107256, 46397, 61082, 77584, 96720, 821, 55162, 30596, 52089, 8129, 72759, 112628, 124359, 72008, 28029, 128988, 11861, 91961, 24672, 68873, 60856, 77602, 8205, 97453, 18825, 20708, 116720, 126450, 119270, 5246, 32345, 30092, 87435, 103372, 11375, 123331, 32062, 76190, 51786, 19891, 38832, 117458, 98550, 75365, 97801, 9093, 53625, 9536, 76109]
[2024-12-02 18:07:22.775611] user = 97602 Cloud 55/567
[2024-12-02 18:07:22.785537] user = 97602 Local 55/567
[2024-12-02 18:07:23.063965] user = 97602 Local+ 55/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:07:26.055208] user = 97602 MPDA- 55/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.75
Training on augumented user 68822 0/50 current_auc = 0.75
User 68822 AUC after training: 0.75
User 68822 does not improve AUC. Reverting changes.
Training on augumented user 107256 1/50 current_auc = 0.75
User 107256 AUC after training: 0.7916666666666666
User 107256 improves AUC. Keeping the model.
Training on augumented user 46397 2/50 current_auc = 0.7916666666666666
User 46397 AUC after training: 0.7916666666666666
User 46397 does not improve AUC. Reverting changes.
Training on augumented user 61082 3/50 current_auc = 0.7916666666666666
User 61082 AUC after training: 0.7916666666666666
User 61082 does not improve AUC. Reverting changes.
Training on augumented user 77584 4/50 current_auc = 0.7916666666666666
User 77584 AUC after training: 0.7916666666666666
User 77584 does not improve AUC. Reverting changes.
Training on augumented user 96720 5/50 current_auc = 0.7916666666666666
User 96720 AUC after training: 0.7916666666666666
User 96720 does not improve AUC. Reverting changes.
Training on augumented user 821 6/50 current_auc = 0.7916666666666666
User 821 AUC after training: 0.7916666666666666
User 821 does not improve AUC. Reverting changes.
Training on augumented user 55162 7/50 current_auc = 0.7916666666666666
User 55162 AUC after training: 0.7916666666666666
User 55162 does not improve AUC. Reverting changes.
Training on augumented user 30596 8/50 current_auc = 0.7916666666666666
User 30596 AUC after training: 0.7916666666666666
User 30596 does not improve AUC. Reverting changes.
Training on augumented user 52089 9/50 current_auc = 0.7916666666666666
User 52089 AUC after training: 0.7916666666666666
User 52089 does not improve AUC. Reverting changes.
Training on augumented user 8129 10/50 current_auc = 0.7916666666666666
User 8129 AUC after training: 0.7916666666666666
User 8129 does not improve AUC. Reverting changes.
Training on augumented user 72759 11/50 current_auc = 0.7916666666666666
User 72759 AUC after training: 0.7916666666666666
User 72759 does not improve AUC. Reverting changes.
Training on augumented user 112628 12/50 current_auc = 0.7916666666666666
User 112628 AUC after training: 0.7916666666666666
User 112628 does not improve AUC. Reverting changes.
Training on augumented user 124359 13/50 current_auc = 0.7916666666666666
User 124359 AUC after training: 0.7916666666666666
User 124359 does not improve AUC. Reverting changes.
Training on augumented user 72008 14/50 current_auc = 0.7916666666666666
User 72008 AUC after training: 0.7916666666666666
User 72008 does not improve AUC. Reverting changes.
Training on augumented user 28029 15/50 current_auc = 0.7916666666666666
User 28029 AUC after training: 0.7916666666666666
User 28029 does not improve AUC. Reverting changes.
Training on augumented user 128988 16/50 current_auc = 0.7916666666666666
User 128988 AUC after training: 0.7916666666666666
User 128988 does not improve AUC. Reverting changes.
Training on augumented user 11861 17/50 current_auc = 0.7916666666666666
User 11861 AUC after training: 0.7916666666666666
User 11861 does not improve AUC. Reverting changes.
Training on augumented user 91961 18/50 current_auc = 0.7916666666666666
User 91961 AUC after training: 0.7916666666666666
User 91961 does not improve AUC. Reverting changes.
Training on augumented user 24672 19/50 current_auc = 0.7916666666666666
User 24672 AUC after training: 0.7916666666666666
User 24672 does not improve AUC. Reverting changes.
Training on augumented user 68873 20/50 current_auc = 0.7916666666666666
User 68873 AUC after training: 0.7916666666666666
User 68873 does not improve AUC. Reverting changes.
Training on augumented user 60856 21/50 current_auc = 0.7916666666666666
User 60856 AUC after training: 0.7916666666666666
User 60856 does not improve AUC. Reverting changes.
Training on augumented user 77602 22/50 current_auc = 0.7916666666666666
User 77602 AUC after training: 0.7916666666666666
User 77602 does not improve AUC. Reverting changes.
Training on augumented user 8205 23/50 current_auc = 0.7916666666666666
User 8205 AUC after training: 0.7916666666666666
User 8205 does not improve AUC. Reverting changes.
Training on augumented user 97453 24/50 current_auc = 0.7916666666666666
User 97453 AUC after training: 0.7916666666666666
User 97453 does not improve AUC. Reverting changes.
Training on augumented user 18825 25/50 current_auc = 0.7916666666666666
User 18825 AUC after training: 0.7916666666666666
User 18825 does not improve AUC. Reverting changes.
Training on augumented user 20708 26/50 current_auc = 0.7916666666666666
User 20708 AUC after training: 0.7916666666666666
User 20708 does not improve AUC. Reverting changes.
Training on augumented user 116720 27/50 current_auc = 0.7916666666666666
User 116720 AUC after training: 0.7916666666666666
User 116720 does not improve AUC. Reverting changes.
Training on augumented user 126450 28/50 current_auc = 0.7916666666666666
User 126450 AUC after training: 0.7916666666666666
User 126450 does not improve AUC. Reverting changes.
Training on augumented user 119270 29/50 current_auc = 0.7916666666666666
User 119270 AUC after training: 0.7916666666666666
User 119270 does not improve AUC. Reverting changes.
Training on augumented user 5246 30/50 current_auc = 0.7916666666666666
User 5246 AUC after training: 0.7916666666666666
User 5246 does not improve AUC. Reverting changes.
Training on augumented user 32345 31/50 current_auc = 0.7916666666666666
User 32345 AUC after training: 0.7916666666666666
User 32345 does not improve AUC. Reverting changes.
Training on augumented user 30092 32/50 current_auc = 0.7916666666666666
User 30092 AUC after training: 0.7916666666666666
User 30092 does not improve AUC. Reverting changes.
Training on augumented user 87435 33/50 current_auc = 0.7916666666666666
User 87435 AUC after training: 0.7916666666666666
User 87435 does not improve AUC. Reverting changes.
Training on augumented user 103372 34/50 current_auc = 0.7916666666666666
User 103372 AUC after training: 0.7916666666666666
User 103372 does not improve AUC. Reverting changes.
Training on augumented user 11375 35/50 current_auc = 0.7916666666666666
User 11375 AUC after training: 0.7916666666666666
User 11375 does not improve AUC. Reverting changes.
Training on augumented user 123331 36/50 current_auc = 0.7916666666666666
User 123331 AUC after training: 0.7916666666666666
User 123331 does not improve AUC. Reverting changes.
Training on augumented user 32062 37/50 current_auc = 0.7916666666666666
User 32062 AUC after training: 0.7916666666666666
User 32062 does not improve AUC. Reverting changes.
Training on augumented user 76190 38/50 current_auc = 0.7916666666666666
User 76190 AUC after training: 0.7916666666666666
User 76190 does not improve AUC. Reverting changes.
Training on augumented user 51786 39/50 current_auc = 0.7916666666666666
User 51786 AUC after training: 0.7916666666666666
User 51786 does not improve AUC. Reverting changes.
Training on augumented user 19891 40/50 current_auc = 0.7916666666666666
User 19891 AUC after training: 0.7916666666666666
User 19891 does not improve AUC. Reverting changes.
Training on augumented user 38832 41/50 current_auc = 0.7916666666666666
User 38832 AUC after training: 0.7916666666666666
User 38832 does not improve AUC. Reverting changes.
Training on augumented user 117458 42/50 current_auc = 0.7916666666666666
User 117458 AUC after training: 0.75
User 117458 does not improve AUC. Reverting changes.
Training on augumented user 98550 43/50 current_auc = 0.7916666666666666
User 98550 AUC after training: 0.7916666666666666
User 98550 does not improve AUC. Reverting changes.
Training on augumented user 75365 44/50 current_auc = 0.7916666666666666
User 75365 AUC after training: 0.7916666666666666
User 75365 does not improve AUC. Reverting changes.
Training on augumented user 97801 45/50 current_auc = 0.7916666666666666
User 97801 AUC after training: 0.7916666666666666
User 97801 does not improve AUC. Reverting changes.
Training on augumented user 9093 46/50 current_auc = 0.7916666666666666
User 9093 AUC after training: 0.7916666666666666
User 9093 does not improve AUC. Reverting changes.
Training on augumented user 53625 47/50 current_auc = 0.7916666666666666
User 53625 AUC after training: 0.7916666666666666
User 53625 does not improve AUC. Reverting changes.
Training on augumented user 9536 48/50 current_auc = 0.7916666666666666
User 9536 AUC after training: 0.7916666666666666
User 9536 does not improve AUC. Reverting changes.
Training on augumented user 76109 49/50 current_auc = 0.7916666666666666
User 76109 AUC after training: 0.7916666666666666
User 76109 does not improve AUC. Reverting changes.
[2024-12-02 18:07:51.336742] start test user 97608 56/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:07:51.668610] start test user 97608 56/567 recall augumented users by random, augumented_users = [58819, 4792, 116436, 24029, 84357, 29840, 99470, 29851, 102215, 116486, 117543, 84111, 58033, 46250, 34843, 68728, 99067, 89623, 112541, 8735, 89881, 97619, 12241, 129118, 130918, 15019, 85888, 75663, 20248, 108730, 73566, 137710, 12864, 8002, 10122, 8463, 21755, 114685, 35091, 9870, 100523, 23236, 92036, 90682, 26958, 30938, 47360, 41856, 129438, 35560]
[2024-12-02 18:07:51.676570] user = 97608 Cloud 56/567
[2024-12-02 18:07:51.682942] user = 97608 Local 56/567
[2024-12-02 18:07:51.707343] user = 97608 Local+ 56/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:07:52.693757] user = 97608 MPDA- 56/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5309090909090909
Training on augumented user 58819 0/50 current_auc = 0.5309090909090909
User 58819 AUC after training: 0.5309090909090909
User 58819 does not improve AUC. Reverting changes.
Training on augumented user 4792 1/50 current_auc = 0.5309090909090909
User 4792 AUC after training: 0.5345454545454545
User 4792 improves AUC. Keeping the model.
Training on augumented user 116436 2/50 current_auc = 0.5345454545454545
User 116436 AUC after training: 0.5309090909090909
User 116436 does not improve AUC. Reverting changes.
Training on augumented user 24029 3/50 current_auc = 0.5345454545454545
User 24029 AUC after training: 0.5345454545454545
User 24029 does not improve AUC. Reverting changes.
Training on augumented user 84357 4/50 current_auc = 0.5345454545454545
User 84357 AUC after training: 0.5345454545454545
User 84357 does not improve AUC. Reverting changes.
Training on augumented user 29840 5/50 current_auc = 0.5345454545454545
User 29840 AUC after training: 0.5309090909090909
User 29840 does not improve AUC. Reverting changes.
Training on augumented user 99470 6/50 current_auc = 0.5345454545454545
User 99470 AUC after training: 0.5345454545454545
User 99470 does not improve AUC. Reverting changes.
Training on augumented user 29851 7/50 current_auc = 0.5345454545454545
User 29851 AUC after training: 0.5345454545454545
User 29851 does not improve AUC. Reverting changes.
Training on augumented user 102215 8/50 current_auc = 0.5345454545454545
User 102215 AUC after training: 0.5345454545454545
User 102215 does not improve AUC. Reverting changes.
Training on augumented user 116486 9/50 current_auc = 0.5345454545454545
User 116486 AUC after training: 0.5345454545454545
User 116486 does not improve AUC. Reverting changes.
Training on augumented user 117543 10/50 current_auc = 0.5345454545454545
User 117543 AUC after training: 0.5345454545454545
User 117543 does not improve AUC. Reverting changes.
Training on augumented user 84111 11/50 current_auc = 0.5345454545454545
User 84111 AUC after training: 0.5272727272727272
User 84111 does not improve AUC. Reverting changes.
Training on augumented user 58033 12/50 current_auc = 0.5345454545454545
User 58033 AUC after training: 0.5345454545454545
User 58033 does not improve AUC. Reverting changes.
Training on augumented user 46250 13/50 current_auc = 0.5345454545454545
User 46250 AUC after training: 0.5309090909090909
User 46250 does not improve AUC. Reverting changes.
Training on augumented user 34843 14/50 current_auc = 0.5345454545454545
User 34843 AUC after training: 0.5272727272727272
User 34843 does not improve AUC. Reverting changes.
Training on augumented user 68728 15/50 current_auc = 0.5345454545454545
User 68728 AUC after training: 0.5309090909090909
User 68728 does not improve AUC. Reverting changes.
Training on augumented user 99067 16/50 current_auc = 0.5345454545454545
User 99067 AUC after training: 0.5309090909090909
User 99067 does not improve AUC. Reverting changes.
Training on augumented user 89623 17/50 current_auc = 0.5345454545454545
User 89623 AUC after training: 0.5345454545454545
User 89623 does not improve AUC. Reverting changes.
Training on augumented user 112541 18/50 current_auc = 0.5345454545454545
User 112541 AUC after training: 0.5345454545454545
User 112541 does not improve AUC. Reverting changes.
Training on augumented user 8735 19/50 current_auc = 0.5345454545454545
User 8735 AUC after training: 0.5345454545454545
User 8735 does not improve AUC. Reverting changes.
Training on augumented user 89881 20/50 current_auc = 0.5345454545454545
User 89881 AUC after training: 0.5345454545454545
User 89881 does not improve AUC. Reverting changes.
Training on augumented user 97619 21/50 current_auc = 0.5345454545454545
User 97619 AUC after training: 0.5345454545454545
User 97619 does not improve AUC. Reverting changes.
Training on augumented user 12241 22/50 current_auc = 0.5345454545454545
User 12241 AUC after training: 0.5345454545454545
User 12241 does not improve AUC. Reverting changes.
Training on augumented user 129118 23/50 current_auc = 0.5345454545454545
User 129118 AUC after training: 0.5345454545454545
User 129118 does not improve AUC. Reverting changes.
Training on augumented user 130918 24/50 current_auc = 0.5345454545454545
User 130918 AUC after training: 0.5309090909090909
User 130918 does not improve AUC. Reverting changes.
Training on augumented user 15019 25/50 current_auc = 0.5345454545454545
User 15019 AUC after training: 0.5345454545454545
User 15019 does not improve AUC. Reverting changes.
Training on augumented user 85888 26/50 current_auc = 0.5345454545454545
User 85888 AUC after training: 0.5309090909090909
User 85888 does not improve AUC. Reverting changes.
Training on augumented user 75663 27/50 current_auc = 0.5345454545454545
User 75663 AUC after training: 0.5309090909090909
User 75663 does not improve AUC. Reverting changes.
Training on augumented user 20248 28/50 current_auc = 0.5345454545454545
User 20248 AUC after training: 0.5345454545454545
User 20248 does not improve AUC. Reverting changes.
Training on augumented user 108730 29/50 current_auc = 0.5345454545454545
User 108730 AUC after training: 0.5345454545454545
User 108730 does not improve AUC. Reverting changes.
Training on augumented user 73566 30/50 current_auc = 0.5345454545454545
User 73566 AUC after training: 0.5345454545454545
User 73566 does not improve AUC. Reverting changes.
Training on augumented user 137710 31/50 current_auc = 0.5345454545454545
User 137710 AUC after training: 0.5309090909090909
User 137710 does not improve AUC. Reverting changes.
Training on augumented user 12864 32/50 current_auc = 0.5345454545454545
User 12864 AUC after training: 0.5345454545454545
User 12864 does not improve AUC. Reverting changes.
Training on augumented user 8002 33/50 current_auc = 0.5345454545454545
User 8002 AUC after training: 0.5345454545454545
User 8002 does not improve AUC. Reverting changes.
Training on augumented user 10122 34/50 current_auc = 0.5345454545454545
User 10122 AUC after training: 0.5345454545454545
User 10122 does not improve AUC. Reverting changes.
Training on augumented user 8463 35/50 current_auc = 0.5345454545454545
User 8463 AUC after training: 0.5345454545454545
User 8463 does not improve AUC. Reverting changes.
Training on augumented user 21755 36/50 current_auc = 0.5345454545454545
User 21755 AUC after training: 0.5345454545454545
User 21755 does not improve AUC. Reverting changes.
Training on augumented user 114685 37/50 current_auc = 0.5345454545454545
User 114685 AUC after training: 0.5345454545454545
User 114685 does not improve AUC. Reverting changes.
Training on augumented user 35091 38/50 current_auc = 0.5345454545454545
User 35091 AUC after training: 0.5418181818181819
User 35091 improves AUC. Keeping the model.
Training on augumented user 9870 39/50 current_auc = 0.5418181818181819
User 9870 AUC after training: 0.5418181818181819
User 9870 does not improve AUC. Reverting changes.
Training on augumented user 100523 40/50 current_auc = 0.5418181818181819
User 100523 AUC after training: 0.5418181818181819
User 100523 does not improve AUC. Reverting changes.
Training on augumented user 23236 41/50 current_auc = 0.5418181818181819
User 23236 AUC after training: 0.5381818181818182
User 23236 does not improve AUC. Reverting changes.
Training on augumented user 92036 42/50 current_auc = 0.5418181818181819
User 92036 AUC after training: 0.5381818181818182
User 92036 does not improve AUC. Reverting changes.
Training on augumented user 90682 43/50 current_auc = 0.5418181818181819
User 90682 AUC after training: 0.5418181818181819
User 90682 does not improve AUC. Reverting changes.
Training on augumented user 26958 44/50 current_auc = 0.5418181818181819
User 26958 AUC after training: 0.5418181818181819
User 26958 does not improve AUC. Reverting changes.
Training on augumented user 30938 45/50 current_auc = 0.5418181818181819
User 30938 AUC after training: 0.5381818181818182
User 30938 does not improve AUC. Reverting changes.
Training on augumented user 47360 46/50 current_auc = 0.5418181818181819
User 47360 AUC after training: 0.5309090909090909
User 47360 does not improve AUC. Reverting changes.
Training on augumented user 41856 47/50 current_auc = 0.5418181818181819
User 41856 AUC after training: 0.5381818181818182
User 41856 does not improve AUC. Reverting changes.
Training on augumented user 129438 48/50 current_auc = 0.5418181818181819
User 129438 AUC after training: 0.5345454545454545
User 129438 does not improve AUC. Reverting changes.
Training on augumented user 35560 49/50 current_auc = 0.5418181818181819
User 35560 AUC after training: 0.5418181818181819
User 35560 does not improve AUC. Reverting changes.
[2024-12-02 18:08:17.536350] start test user 97691 57/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:08:18.246042] start test user 97691 57/567 recall augumented users by random, augumented_users = [82445, 100796, 32912, 8495, 61977, 129325, 82922, 30630, 6667, 38682, 69656, 14728, 70512, 24370, 4784, 28148, 97074, 130715, 73504, 15621, 3851, 58681, 88580, 108036, 138309, 54529, 33945, 113006, 137502, 65152, 118784, 31822, 128370, 22162, 31211, 6194, 60485, 37785, 72479, 33001, 66483, 12347, 22683, 94181, 22520, 129889, 53457, 84, 28783, 69304]
[2024-12-02 18:08:18.264687] user = 97691 Cloud 57/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:08:18.271985] user = 97691 Local 57/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:08:18.349331] user = 97691 Local+ 57/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:08:21.040676] user = 97691 MPDA- 57/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 82445 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82445 AUC after training: 0.5
User 82445 does not improve AUC. Reverting changes.
Training on augumented user 100796 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100796 AUC after training: 0.5
User 100796 does not improve AUC. Reverting changes.
Training on augumented user 32912 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32912 AUC after training: 0.5
User 32912 does not improve AUC. Reverting changes.
Training on augumented user 8495 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8495 AUC after training: 0.5
User 8495 does not improve AUC. Reverting changes.
Training on augumented user 61977 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61977 AUC after training: 0.5
User 61977 does not improve AUC. Reverting changes.
Training on augumented user 129325 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129325 AUC after training: 0.5
User 129325 does not improve AUC. Reverting changes.
Training on augumented user 82922 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82922 AUC after training: 0.5
User 82922 does not improve AUC. Reverting changes.
Training on augumented user 30630 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30630 AUC after training: 0.5
User 30630 does not improve AUC. Reverting changes.
Training on augumented user 6667 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6667 AUC after training: 0.5
User 6667 does not improve AUC. Reverting changes.
Training on augumented user 38682 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38682 AUC after training: 0.5
User 38682 does not improve AUC. Reverting changes.
Training on augumented user 69656 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 69656 AUC after training: 0.5
User 69656 does not improve AUC. Reverting changes.
Training on augumented user 14728 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14728 AUC after training: 0.5
User 14728 does not improve AUC. Reverting changes.
Training on augumented user 70512 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70512 AUC after training: 0.5
User 70512 does not improve AUC. Reverting changes.
Training on augumented user 24370 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24370 AUC after training: 0.5
User 24370 does not improve AUC. Reverting changes.
Training on augumented user 4784 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4784 AUC after training: 0.5
User 4784 does not improve AUC. Reverting changes.
Training on augumented user 28148 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28148 AUC after training: 0.5
User 28148 does not improve AUC. Reverting changes.
Training on augumented user 97074 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97074 AUC after training: 0.5
User 97074 does not improve AUC. Reverting changes.
Training on augumented user 130715 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130715 AUC after training: 0.5
User 130715 does not improve AUC. Reverting changes.
Training on augumented user 73504 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73504 AUC after training: 0.5
User 73504 does not improve AUC. Reverting changes.
Training on augumented user 15621 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15621 AUC after training: 0.5
User 15621 does not improve AUC. Reverting changes.
Training on augumented user 3851 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3851 AUC after training: 0.5
User 3851 does not improve AUC. Reverting changes.
Training on augumented user 58681 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58681 AUC after training: 0.5
User 58681 does not improve AUC. Reverting changes.
Training on augumented user 88580 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88580 AUC after training: 0.5
User 88580 does not improve AUC. Reverting changes.
Training on augumented user 108036 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108036 AUC after training: 0.5
User 108036 does not improve AUC. Reverting changes.
Training on augumented user 138309 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 138309 AUC after training: 0.5
User 138309 does not improve AUC. Reverting changes.
Training on augumented user 54529 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54529 AUC after training: 0.5
User 54529 does not improve AUC. Reverting changes.
Training on augumented user 33945 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33945 AUC after training: 0.5
User 33945 does not improve AUC. Reverting changes.
Training on augumented user 113006 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113006 AUC after training: 0.5
User 113006 does not improve AUC. Reverting changes.
Training on augumented user 137502 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137502 AUC after training: 0.5
User 137502 does not improve AUC. Reverting changes.
Training on augumented user 65152 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 65152 AUC after training: 0.5
User 65152 does not improve AUC. Reverting changes.
Training on augumented user 118784 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118784 AUC after training: 0.5
User 118784 does not improve AUC. Reverting changes.
Training on augumented user 31822 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 31822 AUC after training: 0.5
User 31822 does not improve AUC. Reverting changes.
Training on augumented user 128370 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128370 AUC after training: 0.5
User 128370 does not improve AUC. Reverting changes.
Training on augumented user 22162 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22162 AUC after training: 0.5
User 22162 does not improve AUC. Reverting changes.
Training on augumented user 31211 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 31211 AUC after training: 0.5
User 31211 does not improve AUC. Reverting changes.
Training on augumented user 6194 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6194 AUC after training: 0.5
User 6194 does not improve AUC. Reverting changes.
Training on augumented user 60485 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60485 AUC after training: 0.5
User 60485 does not improve AUC. Reverting changes.
Training on augumented user 37785 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37785 AUC after training: 0.5
User 37785 does not improve AUC. Reverting changes.
Training on augumented user 72479 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72479 AUC after training: 0.5
User 72479 does not improve AUC. Reverting changes.
Training on augumented user 33001 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33001 AUC after training: 0.5
User 33001 does not improve AUC. Reverting changes.
Training on augumented user 66483 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66483 AUC after training: 0.5
User 66483 does not improve AUC. Reverting changes.
Training on augumented user 12347 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12347 AUC after training: 0.5
User 12347 does not improve AUC. Reverting changes.
Training on augumented user 22683 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22683 AUC after training: 0.5
User 22683 does not improve AUC. Reverting changes.
Training on augumented user 94181 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94181 AUC after training: 0.5
User 94181 does not improve AUC. Reverting changes.
Training on augumented user 22520 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22520 AUC after training: 0.5
User 22520 does not improve AUC. Reverting changes.
Training on augumented user 129889 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129889 AUC after training: 0.5
User 129889 does not improve AUC. Reverting changes.
Training on augumented user 53457 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53457 AUC after training: 0.5
User 53457 does not improve AUC. Reverting changes.
Training on augumented user 84 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84 AUC after training: 0.5
User 84 does not improve AUC. Reverting changes.
Training on augumented user 28783 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28783 AUC after training: 0.5
User 28783 does not improve AUC. Reverting changes.
Training on augumented user 69304 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 69304 AUC after training: 0.5
User 69304 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:08:53.871864] start test user 97700 58/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:08:54.618969] start test user 97700 58/567 recall augumented users by random, augumented_users = [107363, 19952, 7056, 91259, 69579, 136495, 84119, 100661, 51819, 127886, 18185, 109366, 49289, 22567, 26002, 85166, 18638, 12794, 109322, 7915, 75827, 80669, 68300, 130408, 92538, 19264, 6193, 21418, 2294, 42264, 16920, 94674, 110196, 75983, 47339, 117378, 42380, 28697, 84114, 24352, 76846, 117371, 15031, 71173, 72218, 100781, 89589, 67378, 27291, 562]
[2024-12-02 18:08:54.667397] user = 97700 Cloud 58/567
[2024-12-02 18:08:54.731411] user = 97700 Local 58/567
[2024-12-02 18:08:54.869947] user = 97700 Local+ 58/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:08:57.217012] user = 97700 MPDA- 58/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6337878787878788
Training on augumented user 107363 0/50 current_auc = 0.6337878787878788
User 107363 AUC after training: 0.6325757575757576
User 107363 does not improve AUC. Reverting changes.
Training on augumented user 19952 1/50 current_auc = 0.6337878787878788
User 19952 AUC after training: 0.6327272727272727
User 19952 does not improve AUC. Reverting changes.
Training on augumented user 7056 2/50 current_auc = 0.6337878787878788
User 7056 AUC after training: 0.6351515151515151
User 7056 improves AUC. Keeping the model.
Training on augumented user 91259 3/50 current_auc = 0.6351515151515151
User 91259 AUC after training: 0.6336363636363636
User 91259 does not improve AUC. Reverting changes.
Training on augumented user 69579 4/50 current_auc = 0.6351515151515151
User 69579 AUC after training: 0.6342424242424242
User 69579 does not improve AUC. Reverting changes.
Training on augumented user 136495 5/50 current_auc = 0.6351515151515151
User 136495 AUC after training: 0.6333333333333333
User 136495 does not improve AUC. Reverting changes.
Training on augumented user 84119 6/50 current_auc = 0.6351515151515151
User 84119 AUC after training: 0.6342424242424242
User 84119 does not improve AUC. Reverting changes.
Training on augumented user 100661 7/50 current_auc = 0.6351515151515151
User 100661 AUC after training: 0.6345454545454545
User 100661 does not improve AUC. Reverting changes.
Training on augumented user 51819 8/50 current_auc = 0.6351515151515151
User 51819 AUC after training: 0.6336363636363636
User 51819 does not improve AUC. Reverting changes.
Training on augumented user 127886 9/50 current_auc = 0.6351515151515151
User 127886 AUC after training: 0.6363636363636364
User 127886 improves AUC. Keeping the model.
Training on augumented user 18185 10/50 current_auc = 0.6363636363636364
User 18185 AUC after training: 0.6363636363636364
User 18185 does not improve AUC. Reverting changes.
Training on augumented user 109366 11/50 current_auc = 0.6363636363636364
User 109366 AUC after training: 0.6366666666666666
User 109366 improves AUC. Keeping the model.
Training on augumented user 49289 12/50 current_auc = 0.6366666666666666
User 49289 AUC after training: 0.6354545454545455
User 49289 does not improve AUC. Reverting changes.
Training on augumented user 22567 13/50 current_auc = 0.6366666666666666
User 22567 AUC after training: 0.636060606060606
User 22567 does not improve AUC. Reverting changes.
Training on augumented user 26002 14/50 current_auc = 0.6366666666666666
User 26002 AUC after training: 0.6354545454545454
User 26002 does not improve AUC. Reverting changes.
Training on augumented user 85166 15/50 current_auc = 0.6366666666666666
User 85166 AUC after training: 0.6363636363636362
User 85166 does not improve AUC. Reverting changes.
Training on augumented user 18638 16/50 current_auc = 0.6366666666666666
User 18638 AUC after training: 0.6357575757575757
User 18638 does not improve AUC. Reverting changes.
Training on augumented user 12794 17/50 current_auc = 0.6366666666666666
User 12794 AUC after training: 0.6363636363636362
User 12794 does not improve AUC. Reverting changes.
Training on augumented user 109322 18/50 current_auc = 0.6366666666666666
User 109322 AUC after training: 0.6354545454545455
User 109322 does not improve AUC. Reverting changes.
Training on augumented user 7915 19/50 current_auc = 0.6366666666666666
User 7915 AUC after training: 0.6363636363636364
User 7915 does not improve AUC. Reverting changes.
Training on augumented user 75827 20/50 current_auc = 0.6366666666666666
User 75827 AUC after training: 0.6375757575757576
User 75827 improves AUC. Keeping the model.
Training on augumented user 80669 21/50 current_auc = 0.6375757575757576
User 80669 AUC after training: 0.6351515151515152
User 80669 does not improve AUC. Reverting changes.
Training on augumented user 68300 22/50 current_auc = 0.6375757575757576
User 68300 AUC after training: 0.6366666666666667
User 68300 does not improve AUC. Reverting changes.
Training on augumented user 130408 23/50 current_auc = 0.6375757575757576
User 130408 AUC after training: 0.636060606060606
User 130408 does not improve AUC. Reverting changes.
Training on augumented user 92538 24/50 current_auc = 0.6375757575757576
User 92538 AUC after training: 0.636060606060606
User 92538 does not improve AUC. Reverting changes.
Training on augumented user 19264 25/50 current_auc = 0.6375757575757576
User 19264 AUC after training: 0.6375757575757575
User 19264 does not improve AUC. Reverting changes.
Training on augumented user 6193 26/50 current_auc = 0.6375757575757576
User 6193 AUC after training: 0.636969696969697
User 6193 does not improve AUC. Reverting changes.
Training on augumented user 21418 27/50 current_auc = 0.6375757575757576
User 21418 AUC after training: 0.6363636363636364
User 21418 does not improve AUC. Reverting changes.
Training on augumented user 2294 28/50 current_auc = 0.6375757575757576
User 2294 AUC after training: 0.6369696969696969
User 2294 does not improve AUC. Reverting changes.
Training on augumented user 42264 29/50 current_auc = 0.6375757575757576
User 42264 AUC after training: 0.6372727272727273
User 42264 does not improve AUC. Reverting changes.
Training on augumented user 16920 30/50 current_auc = 0.6375757575757576
User 16920 AUC after training: 0.6366666666666667
User 16920 does not improve AUC. Reverting changes.
Training on augumented user 94674 31/50 current_auc = 0.6375757575757576
User 94674 AUC after training: 0.636969696969697
User 94674 does not improve AUC. Reverting changes.
Training on augumented user 110196 32/50 current_auc = 0.6375757575757576
User 110196 AUC after training: 0.6342424242424243
User 110196 does not improve AUC. Reverting changes.
Training on augumented user 75983 33/50 current_auc = 0.6375757575757576
User 75983 AUC after training: 0.636969696969697
User 75983 does not improve AUC. Reverting changes.
Training on augumented user 47339 34/50 current_auc = 0.6375757575757576
User 47339 AUC after training: 0.6375757575757576
User 47339 does not improve AUC. Reverting changes.
Training on augumented user 117378 35/50 current_auc = 0.6375757575757576
User 117378 AUC after training: 0.636969696969697
User 117378 does not improve AUC. Reverting changes.
Training on augumented user 42380 36/50 current_auc = 0.6375757575757576
User 42380 AUC after training: 0.6372727272727272
User 42380 does not improve AUC. Reverting changes.
Training on augumented user 28697 37/50 current_auc = 0.6375757575757576
User 28697 AUC after training: 0.6363636363636364
User 28697 does not improve AUC. Reverting changes.
Training on augumented user 84114 38/50 current_auc = 0.6375757575757576
User 84114 AUC after training: 0.636969696969697
User 84114 does not improve AUC. Reverting changes.
Training on augumented user 24352 39/50 current_auc = 0.6375757575757576
User 24352 AUC after training: 0.636969696969697
User 24352 does not improve AUC. Reverting changes.
Training on augumented user 76846 40/50 current_auc = 0.6375757575757576
User 76846 AUC after training: 0.6366666666666667
User 76846 does not improve AUC. Reverting changes.
Training on augumented user 117371 41/50 current_auc = 0.6375757575757576
User 117371 AUC after training: 0.636969696969697
User 117371 does not improve AUC. Reverting changes.
Training on augumented user 15031 42/50 current_auc = 0.6375757575757576
User 15031 AUC after training: 0.636060606060606
User 15031 does not improve AUC. Reverting changes.
Training on augumented user 71173 43/50 current_auc = 0.6375757575757576
User 71173 AUC after training: 0.6357575757575757
User 71173 does not improve AUC. Reverting changes.
Training on augumented user 72218 44/50 current_auc = 0.6375757575757576
User 72218 AUC after training: 0.6357575757575757
User 72218 does not improve AUC. Reverting changes.
Training on augumented user 100781 45/50 current_auc = 0.6375757575757576
User 100781 AUC after training: 0.6351515151515151
User 100781 does not improve AUC. Reverting changes.
Training on augumented user 89589 46/50 current_auc = 0.6375757575757576
User 89589 AUC after training: 0.6372727272727272
User 89589 does not improve AUC. Reverting changes.
Training on augumented user 67378 47/50 current_auc = 0.6375757575757576
User 67378 AUC after training: 0.636969696969697
User 67378 does not improve AUC. Reverting changes.
Training on augumented user 27291 48/50 current_auc = 0.6375757575757576
User 27291 AUC after training: 0.6372727272727272
User 27291 does not improve AUC. Reverting changes.
Training on augumented user 562 49/50 current_auc = 0.6375757575757576
User 562 AUC after training: 0.6363636363636364
User 562 does not improve AUC. Reverting changes.
[2024-12-02 18:09:31.425549] start test user 97738 59/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:09:31.851838] start test user 97738 59/567 recall augumented users by random, augumented_users = [56044, 80181, 14543, 103508, 34972, 50558, 83201, 80984, 134747, 18814, 97631, 35316, 68861, 16134, 64298, 70675, 960, 97132, 126863, 26684, 124932, 36211, 75418, 116648, 89160, 35582, 99568, 130102, 12469, 63453, 20987, 88640, 94789, 45819, 59557, 33829, 17952, 120826, 40910, 31991, 114761, 25039, 129682, 57200, 116743, 48954, 30701, 50657, 3264, 82213]
[2024-12-02 18:09:31.868204] user = 97738 Cloud 59/567
[2024-12-02 18:09:31.883635] user = 97738 Local 59/567
[2024-12-02 18:09:31.949297] user = 97738 Local+ 59/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:09:34.057239] user = 97738 MPDA- 59/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5665768194070081
Training on augumented user 56044 0/50 current_auc = 0.5665768194070081
User 56044 AUC after training: 0.568733153638814
User 56044 improves AUC. Keeping the model.
Training on augumented user 80181 1/50 current_auc = 0.568733153638814
User 80181 AUC after training: 0.5692722371967656
User 80181 improves AUC. Keeping the model.
Training on augumented user 14543 2/50 current_auc = 0.5692722371967656
User 14543 AUC after training: 0.567654986522911
User 14543 does not improve AUC. Reverting changes.
Training on augumented user 103508 3/50 current_auc = 0.5692722371967656
User 103508 AUC after training: 0.5660377358490566
User 103508 does not improve AUC. Reverting changes.
Training on augumented user 34972 4/50 current_auc = 0.5692722371967656
User 34972 AUC after training: 0.5681940700808625
User 34972 does not improve AUC. Reverting changes.
Training on augumented user 50558 5/50 current_auc = 0.5692722371967656
User 50558 AUC after training: 0.568733153638814
User 50558 does not improve AUC. Reverting changes.
Training on augumented user 83201 6/50 current_auc = 0.5692722371967656
User 83201 AUC after training: 0.5676549865229111
User 83201 does not improve AUC. Reverting changes.
Training on augumented user 80984 7/50 current_auc = 0.5692722371967656
User 80984 AUC after training: 0.568733153638814
User 80984 does not improve AUC. Reverting changes.
Training on augumented user 134747 8/50 current_auc = 0.5692722371967656
User 134747 AUC after training: 0.568733153638814
User 134747 does not improve AUC. Reverting changes.
Training on augumented user 18814 9/50 current_auc = 0.5692722371967656
User 18814 AUC after training: 0.5681940700808625
User 18814 does not improve AUC. Reverting changes.
Training on augumented user 97631 10/50 current_auc = 0.5692722371967656
User 97631 AUC after training: 0.5687331536388139
User 97631 does not improve AUC. Reverting changes.
Training on augumented user 35316 11/50 current_auc = 0.5692722371967656
User 35316 AUC after training: 0.568733153638814
User 35316 does not improve AUC. Reverting changes.
Training on augumented user 68861 12/50 current_auc = 0.5692722371967656
User 68861 AUC after training: 0.5681940700808625
User 68861 does not improve AUC. Reverting changes.
Training on augumented user 16134 13/50 current_auc = 0.5692722371967656
User 16134 AUC after training: 0.569811320754717
User 16134 improves AUC. Keeping the model.
Training on augumented user 64298 14/50 current_auc = 0.569811320754717
User 64298 AUC after training: 0.5665768194070081
User 64298 does not improve AUC. Reverting changes.
Training on augumented user 70675 15/50 current_auc = 0.569811320754717
User 70675 AUC after training: 0.5676549865229111
User 70675 does not improve AUC. Reverting changes.
Training on augumented user 960 16/50 current_auc = 0.569811320754717
User 960 AUC after training: 0.568733153638814
User 960 does not improve AUC. Reverting changes.
Training on augumented user 97132 17/50 current_auc = 0.569811320754717
User 97132 AUC after training: 0.5681940700808625
User 97132 does not improve AUC. Reverting changes.
Training on augumented user 126863 18/50 current_auc = 0.569811320754717
User 126863 AUC after training: 0.568733153638814
User 126863 does not improve AUC. Reverting changes.
Training on augumented user 26684 19/50 current_auc = 0.569811320754717
User 26684 AUC after training: 0.567654986522911
User 26684 does not improve AUC. Reverting changes.
Training on augumented user 124932 20/50 current_auc = 0.569811320754717
User 124932 AUC after training: 0.5681940700808625
User 124932 does not improve AUC. Reverting changes.
Training on augumented user 36211 21/50 current_auc = 0.569811320754717
User 36211 AUC after training: 0.5681940700808625
User 36211 does not improve AUC. Reverting changes.
Training on augumented user 75418 22/50 current_auc = 0.569811320754717
User 75418 AUC after training: 0.5681940700808625
User 75418 does not improve AUC. Reverting changes.
Training on augumented user 116648 23/50 current_auc = 0.569811320754717
User 116648 AUC after training: 0.5692722371967655
User 116648 does not improve AUC. Reverting changes.
Training on augumented user 89160 24/50 current_auc = 0.569811320754717
User 89160 AUC after training: 0.5692722371967656
User 89160 does not improve AUC. Reverting changes.
Training on augumented user 35582 25/50 current_auc = 0.569811320754717
User 35582 AUC after training: 0.5692722371967655
User 35582 does not improve AUC. Reverting changes.
Training on augumented user 99568 26/50 current_auc = 0.569811320754717
User 99568 AUC after training: 0.5703504043126685
User 99568 improves AUC. Keeping the model.
Training on augumented user 130102 27/50 current_auc = 0.5703504043126685
User 130102 AUC after training: 0.5671159029649596
User 130102 does not improve AUC. Reverting changes.
Training on augumented user 12469 28/50 current_auc = 0.5703504043126685
User 12469 AUC after training: 0.5681940700808625
User 12469 does not improve AUC. Reverting changes.
Training on augumented user 63453 29/50 current_auc = 0.5703504043126685
User 63453 AUC after training: 0.5681940700808625
User 63453 does not improve AUC. Reverting changes.
Training on augumented user 20987 30/50 current_auc = 0.5703504043126685
User 20987 AUC after training: 0.5665768194070081
User 20987 does not improve AUC. Reverting changes.
Training on augumented user 88640 31/50 current_auc = 0.5703504043126685
User 88640 AUC after training: 0.5681940700808626
User 88640 does not improve AUC. Reverting changes.
Training on augumented user 94789 32/50 current_auc = 0.5703504043126685
User 94789 AUC after training: 0.5681940700808626
User 94789 does not improve AUC. Reverting changes.
Training on augumented user 45819 33/50 current_auc = 0.5703504043126685
User 45819 AUC after training: 0.5692722371967656
User 45819 does not improve AUC. Reverting changes.
Training on augumented user 59557 34/50 current_auc = 0.5703504043126685
User 59557 AUC after training: 0.569811320754717
User 59557 does not improve AUC. Reverting changes.
Training on augumented user 33829 35/50 current_auc = 0.5703504043126685
User 33829 AUC after training: 0.5703504043126685
User 33829 does not improve AUC. Reverting changes.
Training on augumented user 17952 36/50 current_auc = 0.5703504043126685
User 17952 AUC after training: 0.569811320754717
User 17952 does not improve AUC. Reverting changes.
Training on augumented user 120826 37/50 current_auc = 0.5703504043126685
User 120826 AUC after training: 0.5687331536388139
User 120826 does not improve AUC. Reverting changes.
Training on augumented user 40910 38/50 current_auc = 0.5703504043126685
User 40910 AUC after training: 0.5692722371967655
User 40910 does not improve AUC. Reverting changes.
Training on augumented user 31991 39/50 current_auc = 0.5703504043126685
User 31991 AUC after training: 0.568733153638814
User 31991 does not improve AUC. Reverting changes.
Training on augumented user 114761 40/50 current_auc = 0.5703504043126685
User 114761 AUC after training: 0.569811320754717
User 114761 does not improve AUC. Reverting changes.
Training on augumented user 25039 41/50 current_auc = 0.5703504043126685
User 25039 AUC after training: 0.568733153638814
User 25039 does not improve AUC. Reverting changes.
Training on augumented user 129682 42/50 current_auc = 0.5703504043126685
User 129682 AUC after training: 0.5671159029649596
User 129682 does not improve AUC. Reverting changes.
Training on augumented user 57200 43/50 current_auc = 0.5703504043126685
User 57200 AUC after training: 0.568733153638814
User 57200 does not improve AUC. Reverting changes.
Training on augumented user 116743 44/50 current_auc = 0.5703504043126685
User 116743 AUC after training: 0.568733153638814
User 116743 does not improve AUC. Reverting changes.
Training on augumented user 48954 45/50 current_auc = 0.5703504043126685
User 48954 AUC after training: 0.5681940700808625
User 48954 does not improve AUC. Reverting changes.
Training on augumented user 30701 46/50 current_auc = 0.5703504043126685
User 30701 AUC after training: 0.568733153638814
User 30701 does not improve AUC. Reverting changes.
Training on augumented user 50657 47/50 current_auc = 0.5703504043126685
User 50657 AUC after training: 0.5692722371967656
User 50657 does not improve AUC. Reverting changes.
Training on augumented user 3264 48/50 current_auc = 0.5703504043126685
User 3264 AUC after training: 0.5681940700808625
User 3264 does not improve AUC. Reverting changes.
Training on augumented user 82213 49/50 current_auc = 0.5703504043126685
User 82213 AUC after training: 0.5671159029649596
User 82213 does not improve AUC. Reverting changes.
[2024-12-02 18:10:08.803393] start test user 97764 60/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:10:09.607998] start test user 97764 60/567 recall augumented users by random, augumented_users = [66976, 93839, 16617, 82025, 268, 84584, 13692, 28731, 45864, 62119, 89545, 37675, 50629, 15761, 47272, 135715, 9402, 33081, 111346, 55316, 49901, 18291, 78906, 132604, 93135, 73877, 112473, 113158, 113006, 76978, 66825, 97519, 36135, 74526, 64183, 2913, 115413, 76924, 111128, 50847, 101842, 67955, 105287, 42728, 103467, 9088, 85664, 69886, 57701, 33757]
[2024-12-02 18:10:09.641928] user = 97764 Cloud 60/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:10:09.661341] user = 97764 Local 60/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:10:09.725640] user = 97764 Local+ 60/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:10:12.271132] user = 97764 MPDA- 60/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 66976 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66976 AUC after training: 0.5
User 66976 does not improve AUC. Reverting changes.
Training on augumented user 93839 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93839 AUC after training: 0.5
User 93839 does not improve AUC. Reverting changes.
Training on augumented user 16617 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16617 AUC after training: 0.5
User 16617 does not improve AUC. Reverting changes.
Training on augumented user 82025 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82025 AUC after training: 0.5
User 82025 does not improve AUC. Reverting changes.
Training on augumented user 268 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 268 AUC after training: 0.5
User 268 does not improve AUC. Reverting changes.
Training on augumented user 84584 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84584 AUC after training: 0.5
User 84584 does not improve AUC. Reverting changes.
Training on augumented user 13692 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13692 AUC after training: 0.5
User 13692 does not improve AUC. Reverting changes.
Training on augumented user 28731 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28731 AUC after training: 0.5
User 28731 does not improve AUC. Reverting changes.
Training on augumented user 45864 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45864 AUC after training: 0.5
User 45864 does not improve AUC. Reverting changes.
Training on augumented user 62119 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62119 AUC after training: 0.5
User 62119 does not improve AUC. Reverting changes.
Training on augumented user 89545 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89545 AUC after training: 0.5
User 89545 does not improve AUC. Reverting changes.
Training on augumented user 37675 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37675 AUC after training: 0.5
User 37675 does not improve AUC. Reverting changes.
Training on augumented user 50629 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50629 AUC after training: 0.5
User 50629 does not improve AUC. Reverting changes.
Training on augumented user 15761 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15761 AUC after training: 0.5
User 15761 does not improve AUC. Reverting changes.
Training on augumented user 47272 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47272 AUC after training: 0.5
User 47272 does not improve AUC. Reverting changes.
Training on augumented user 135715 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 135715 AUC after training: 0.5
User 135715 does not improve AUC. Reverting changes.
Training on augumented user 9402 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9402 AUC after training: 0.5
User 9402 does not improve AUC. Reverting changes.
Training on augumented user 33081 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33081 AUC after training: 0.5
User 33081 does not improve AUC. Reverting changes.
Training on augumented user 111346 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111346 AUC after training: 0.5
User 111346 does not improve AUC. Reverting changes.
Training on augumented user 55316 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55316 AUC after training: 0.5
User 55316 does not improve AUC. Reverting changes.
Training on augumented user 49901 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49901 AUC after training: 0.5
User 49901 does not improve AUC. Reverting changes.
Training on augumented user 18291 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18291 AUC after training: 0.5
User 18291 does not improve AUC. Reverting changes.
Training on augumented user 78906 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 78906 AUC after training: 0.5
User 78906 does not improve AUC. Reverting changes.
Training on augumented user 132604 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132604 AUC after training: 0.5
User 132604 does not improve AUC. Reverting changes.
Training on augumented user 93135 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93135 AUC after training: 0.5
User 93135 does not improve AUC. Reverting changes.
Training on augumented user 73877 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73877 AUC after training: 0.5
User 73877 does not improve AUC. Reverting changes.
Training on augumented user 112473 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112473 AUC after training: 0.5
User 112473 does not improve AUC. Reverting changes.
Training on augumented user 113158 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113158 AUC after training: 0.5
User 113158 does not improve AUC. Reverting changes.
Training on augumented user 113006 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113006 AUC after training: 0.5
User 113006 does not improve AUC. Reverting changes.
Training on augumented user 76978 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76978 AUC after training: 0.5
User 76978 does not improve AUC. Reverting changes.
Training on augumented user 66825 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66825 AUC after training: 0.5
User 66825 does not improve AUC. Reverting changes.
Training on augumented user 97519 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97519 AUC after training: 0.5
User 97519 does not improve AUC. Reverting changes.
Training on augumented user 36135 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36135 AUC after training: 0.5
User 36135 does not improve AUC. Reverting changes.
Training on augumented user 74526 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74526 AUC after training: 0.5
User 74526 does not improve AUC. Reverting changes.
Training on augumented user 64183 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64183 AUC after training: 0.5
User 64183 does not improve AUC. Reverting changes.
Training on augumented user 2913 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2913 AUC after training: 0.5
User 2913 does not improve AUC. Reverting changes.
Training on augumented user 115413 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115413 AUC after training: 0.5
User 115413 does not improve AUC. Reverting changes.
Training on augumented user 76924 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76924 AUC after training: 0.5
User 76924 does not improve AUC. Reverting changes.
Training on augumented user 111128 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111128 AUC after training: 0.5
User 111128 does not improve AUC. Reverting changes.
Training on augumented user 50847 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50847 AUC after training: 0.5
User 50847 does not improve AUC. Reverting changes.
Training on augumented user 101842 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101842 AUC after training: 0.5
User 101842 does not improve AUC. Reverting changes.
Training on augumented user 67955 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67955 AUC after training: 0.5
User 67955 does not improve AUC. Reverting changes.
Training on augumented user 105287 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105287 AUC after training: 0.5
User 105287 does not improve AUC. Reverting changes.
Training on augumented user 42728 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42728 AUC after training: 0.5
User 42728 does not improve AUC. Reverting changes.
Training on augumented user 103467 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103467 AUC after training: 0.5
User 103467 does not improve AUC. Reverting changes.
Training on augumented user 9088 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9088 AUC after training: 0.5
User 9088 does not improve AUC. Reverting changes.
Training on augumented user 85664 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85664 AUC after training: 0.5
User 85664 does not improve AUC. Reverting changes.
Training on augumented user 69886 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 69886 AUC after training: 0.5
User 69886 does not improve AUC. Reverting changes.
Training on augumented user 57701 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57701 AUC after training: 0.5
User 57701 does not improve AUC. Reverting changes.
Training on augumented user 33757 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33757 AUC after training: 0.5
User 33757 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:10:42.021720] start test user 97779 61/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:10:42.535215] start test user 97779 61/567 recall augumented users by random, augumented_users = [108072, 55154, 134035, 4856, 51147, 73015, 62828, 52390, 39428, 88049, 131947, 73497, 57030, 71126, 21962, 21955, 130348, 13482, 74768, 115256, 131014, 68680, 56407, 107164, 5079, 22924, 77022, 7838, 104558, 128212, 26450, 102324, 57461, 90129, 29928, 125237, 3810, 93952, 124197, 112511, 5432, 24453, 93548, 26727, 4333, 61948, 86968, 36257, 39932, 69937]
[2024-12-02 18:10:42.551640] user = 97779 Cloud 61/567
[2024-12-02 18:10:42.583132] user = 97779 Local 61/567
[2024-12-02 18:10:42.625508] user = 97779 Local+ 61/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:10:45.105943] user = 97779 MPDA- 61/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6541345624656026
Training on augumented user 108072 0/50 current_auc = 0.6541345624656026
User 108072 AUC after training: 0.6537561915244909
User 108072 does not improve AUC. Reverting changes.
Training on augumented user 55154 1/50 current_auc = 0.6541345624656026
User 55154 AUC after training: 0.6538593835993396
User 55154 does not improve AUC. Reverting changes.
Training on augumented user 134035 2/50 current_auc = 0.6541345624656026
User 134035 AUC after training: 0.6538937809576224
User 134035 does not improve AUC. Reverting changes.
Training on augumented user 4856 3/50 current_auc = 0.6541345624656026
User 4856 AUC after training: 0.6529306549257017
User 4856 does not improve AUC. Reverting changes.
Training on augumented user 51147 4/50 current_auc = 0.6541345624656026
User 51147 AUC after training: 0.6538937809576225
User 51147 does not improve AUC. Reverting changes.
Training on augumented user 73015 5/50 current_auc = 0.6541345624656026
User 73015 AUC after training: 0.6537561915244909
User 73015 does not improve AUC. Reverting changes.
Training on augumented user 62828 6/50 current_auc = 0.6541345624656026
User 62828 AUC after training: 0.653446615299945
User 62828 does not improve AUC. Reverting changes.
Training on augumented user 52390 7/50 current_auc = 0.6541345624656026
User 52390 AUC after training: 0.6531714364336818
User 52390 does not improve AUC. Reverting changes.
Training on augumented user 39428 8/50 current_auc = 0.6541345624656026
User 39428 AUC after training: 0.6526898734177216
User 39428 does not improve AUC. Reverting changes.
Training on augumented user 88049 9/50 current_auc = 0.6541345624656026
User 88049 AUC after training: 0.6529994496422674
User 88049 does not improve AUC. Reverting changes.
Training on augumented user 131947 10/50 current_auc = 0.6541345624656026
User 131947 AUC after training: 0.6541001651073197
User 131947 does not improve AUC. Reverting changes.
Training on augumented user 73497 11/50 current_auc = 0.6541345624656026
User 73497 AUC after training: 0.6537561915244909
User 73497 does not improve AUC. Reverting changes.
Training on augumented user 57030 12/50 current_auc = 0.6541345624656026
User 57030 AUC after training: 0.6522083104017612
User 57030 does not improve AUC. Reverting changes.
Training on augumented user 71126 13/50 current_auc = 0.6541345624656026
User 71126 AUC after training: 0.6526898734177216
User 71126 does not improve AUC. Reverting changes.
Training on augumented user 21962 14/50 current_auc = 0.6541345624656026
User 21962 AUC after training: 0.6533778205833792
User 21962 does not improve AUC. Reverting changes.
Training on augumented user 21955 15/50 current_auc = 0.6541345624656026
User 21955 AUC after training: 0.6538249862410568
User 21955 does not improve AUC. Reverting changes.
Training on augumented user 130348 16/50 current_auc = 0.6541345624656026
User 130348 AUC after training: 0.6537905888827737
User 130348 does not improve AUC. Reverting changes.
Training on augumented user 13482 17/50 current_auc = 0.6541345624656026
User 13482 AUC after training: 0.6528962575674189
User 13482 does not improve AUC. Reverting changes.
Training on augumented user 74768 18/50 current_auc = 0.6541345624656026
User 74768 AUC after training: 0.6539281783159053
User 74768 does not improve AUC. Reverting changes.
Training on augumented user 115256 19/50 current_auc = 0.6541345624656026
User 115256 AUC after training: 0.6543753439735829
User 115256 improves AUC. Keeping the model.
Training on augumented user 131014 20/50 current_auc = 0.6543753439735829
User 131014 AUC after training: 0.6544785360484315
User 131014 improves AUC. Keeping the model.
Training on augumented user 68680 21/50 current_auc = 0.6544785360484315
User 68680 AUC after training: 0.653446615299945
User 68680 does not improve AUC. Reverting changes.
Training on augumented user 56407 22/50 current_auc = 0.6544785360484315
User 56407 AUC after training: 0.6541345624656026
User 56407 does not improve AUC. Reverting changes.
Training on augumented user 107164 23/50 current_auc = 0.6544785360484315
User 107164 AUC after training: 0.6537561915244909
User 107164 does not improve AUC. Reverting changes.
Training on augumented user 5079 24/50 current_auc = 0.6544785360484315
User 5079 AUC after training: 0.6542721518987342
User 5079 does not improve AUC. Reverting changes.
Training on augumented user 22924 25/50 current_auc = 0.6544785360484315
User 22924 AUC after training: 0.6542033571821684
User 22924 does not improve AUC. Reverting changes.
Training on augumented user 77022 26/50 current_auc = 0.6544785360484315
User 77022 AUC after training: 0.6540657677490369
User 77022 does not improve AUC. Reverting changes.
Training on augumented user 7838 27/50 current_auc = 0.6544785360484315
User 7838 AUC after training: 0.6542721518987342
User 7838 does not improve AUC. Reverting changes.
Training on augumented user 104558 28/50 current_auc = 0.6544785360484315
User 104558 AUC after training: 0.6536529994496423
User 104558 does not improve AUC. Reverting changes.
Training on augumented user 128212 29/50 current_auc = 0.6544785360484315
User 128212 AUC after training: 0.654306549257017
User 128212 does not improve AUC. Reverting changes.
Training on augumented user 26450 30/50 current_auc = 0.6544785360484315
User 26450 AUC after training: 0.6542033571821684
User 26450 does not improve AUC. Reverting changes.
Training on augumented user 102324 31/50 current_auc = 0.6544785360484315
User 102324 AUC after training: 0.6537905888827737
User 102324 does not improve AUC. Reverting changes.
Training on augumented user 57461 32/50 current_auc = 0.6544785360484315
User 57461 AUC after training: 0.6542377545404514
User 57461 does not improve AUC. Reverting changes.
Training on augumented user 90129 33/50 current_auc = 0.6544785360484315
User 90129 AUC after training: 0.6538593835993396
User 90129 does not improve AUC. Reverting changes.
Training on augumented user 29928 34/50 current_auc = 0.6544785360484315
User 29928 AUC after training: 0.6543409466153
User 29928 does not improve AUC. Reverting changes.
Training on augumented user 125237 35/50 current_auc = 0.6544785360484315
User 125237 AUC after training: 0.653446615299945
User 125237 does not improve AUC. Reverting changes.
Training on augumented user 3810 36/50 current_auc = 0.6544785360484315
User 3810 AUC after training: 0.6542033571821684
User 3810 does not improve AUC. Reverting changes.
Training on augumented user 93952 37/50 current_auc = 0.6544785360484315
User 93952 AUC after training: 0.6542377545404513
User 93952 does not improve AUC. Reverting changes.
Training on augumented user 124197 38/50 current_auc = 0.6544785360484315
User 124197 AUC after training: 0.6536186020913594
User 124197 does not improve AUC. Reverting changes.
Training on augumented user 112511 39/50 current_auc = 0.6544785360484315
User 112511 AUC after training: 0.6541345624656026
User 112511 does not improve AUC. Reverting changes.
Training on augumented user 5432 40/50 current_auc = 0.6544785360484315
User 5432 AUC after training: 0.6543409466152998
User 5432 does not improve AUC. Reverting changes.
Training on augumented user 24453 41/50 current_auc = 0.6544785360484315
User 24453 AUC after training: 0.6530682443588331
User 24453 does not improve AUC. Reverting changes.
Training on augumented user 93548 42/50 current_auc = 0.6544785360484315
User 93548 AUC after training: 0.654891304347826
User 93548 improves AUC. Keeping the model.
Training on augumented user 26727 43/50 current_auc = 0.654891304347826
User 26727 AUC after training: 0.654925701706109
User 26727 improves AUC. Keeping the model.
Training on augumented user 4333 44/50 current_auc = 0.654925701706109
User 4333 AUC after training: 0.6548569069895432
User 4333 does not improve AUC. Reverting changes.
Training on augumented user 61948 45/50 current_auc = 0.654925701706109
User 61948 AUC after training: 0.6542377545404513
User 61948 does not improve AUC. Reverting changes.
Training on augumented user 86968 46/50 current_auc = 0.654925701706109
User 86968 AUC after training: 0.6550632911392404
User 86968 improves AUC. Keeping the model.
Training on augumented user 36257 47/50 current_auc = 0.6550632911392404
User 36257 AUC after training: 0.6545473307649972
User 36257 does not improve AUC. Reverting changes.
Training on augumented user 39932 48/50 current_auc = 0.6550632911392404
User 39932 AUC after training: 0.6543753439735828
User 39932 does not improve AUC. Reverting changes.
Training on augumented user 69937 49/50 current_auc = 0.6550632911392404
User 69937 AUC after training: 0.6546505228398458
User 69937 does not improve AUC. Reverting changes.
[2024-12-02 18:11:14.210747] start test user 97784 62/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:11:14.760267] start test user 97784 62/567 recall augumented users by random, augumented_users = [47647, 57154, 137297, 89816, 82579, 94310, 61184, 6061, 111169, 116678, 135176, 67286, 12499, 14542, 4082, 41757, 25331, 2088, 124223, 49356, 52954, 125586, 12171, 45784, 77171, 83235, 41943, 61425, 53854, 86295, 15036, 124358, 1769, 4827, 107285, 43507, 98707, 136812, 101445, 89697, 37647, 117042, 26153, 95287, 82342, 38112, 38940, 106282, 71962, 38118]
[2024-12-02 18:11:14.777387] user = 97784 Cloud 62/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:11:14.785287] user = 97784 Local 62/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:11:14.810828] user = 97784 Local+ 62/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:11:16.483601] user = 97784 MPDA- 62/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 47647 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47647 AUC after training: 0.5
User 47647 does not improve AUC. Reverting changes.
Training on augumented user 57154 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57154 AUC after training: 0.5
User 57154 does not improve AUC. Reverting changes.
Training on augumented user 137297 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137297 AUC after training: 0.5
User 137297 does not improve AUC. Reverting changes.
Training on augumented user 89816 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89816 AUC after training: 0.5
User 89816 does not improve AUC. Reverting changes.
Training on augumented user 82579 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82579 AUC after training: 0.5
User 82579 does not improve AUC. Reverting changes.
Training on augumented user 94310 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94310 AUC after training: 0.5
User 94310 does not improve AUC. Reverting changes.
Training on augumented user 61184 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61184 AUC after training: 0.5
User 61184 does not improve AUC. Reverting changes.
Training on augumented user 6061 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6061 AUC after training: 0.5
User 6061 does not improve AUC. Reverting changes.
Training on augumented user 111169 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111169 AUC after training: 0.5
User 111169 does not improve AUC. Reverting changes.
Training on augumented user 116678 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116678 AUC after training: 0.5
User 116678 does not improve AUC. Reverting changes.
Training on augumented user 135176 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 135176 AUC after training: 0.5
User 135176 does not improve AUC. Reverting changes.
Training on augumented user 67286 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67286 AUC after training: 0.5
User 67286 does not improve AUC. Reverting changes.
Training on augumented user 12499 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12499 AUC after training: 0.5
User 12499 does not improve AUC. Reverting changes.
Training on augumented user 14542 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14542 AUC after training: 0.5
User 14542 does not improve AUC. Reverting changes.
Training on augumented user 4082 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4082 AUC after training: 0.5
User 4082 does not improve AUC. Reverting changes.
Training on augumented user 41757 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41757 AUC after training: 0.5
User 41757 does not improve AUC. Reverting changes.
Training on augumented user 25331 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25331 AUC after training: 0.5
User 25331 does not improve AUC. Reverting changes.
Training on augumented user 2088 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2088 AUC after training: 0.5
User 2088 does not improve AUC. Reverting changes.
Training on augumented user 124223 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124223 AUC after training: 0.5
User 124223 does not improve AUC. Reverting changes.
Training on augumented user 49356 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49356 AUC after training: 0.5
User 49356 does not improve AUC. Reverting changes.
Training on augumented user 52954 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 52954 AUC after training: 0.5
User 52954 does not improve AUC. Reverting changes.
Training on augumented user 125586 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 125586 AUC after training: 0.5
User 125586 does not improve AUC. Reverting changes.
Training on augumented user 12171 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12171 AUC after training: 0.5
User 12171 does not improve AUC. Reverting changes.
Training on augumented user 45784 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45784 AUC after training: 0.5
User 45784 does not improve AUC. Reverting changes.
Training on augumented user 77171 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77171 AUC after training: 0.5
User 77171 does not improve AUC. Reverting changes.
Training on augumented user 83235 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83235 AUC after training: 0.5
User 83235 does not improve AUC. Reverting changes.
Training on augumented user 41943 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41943 AUC after training: 0.5
User 41943 does not improve AUC. Reverting changes.
Training on augumented user 61425 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61425 AUC after training: 0.5
User 61425 does not improve AUC. Reverting changes.
Training on augumented user 53854 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53854 AUC after training: 0.5
User 53854 does not improve AUC. Reverting changes.
Training on augumented user 86295 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86295 AUC after training: 0.5
User 86295 does not improve AUC. Reverting changes.
Training on augumented user 15036 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15036 AUC after training: 0.5
User 15036 does not improve AUC. Reverting changes.
Training on augumented user 124358 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124358 AUC after training: 0.5
User 124358 does not improve AUC. Reverting changes.
Training on augumented user 1769 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1769 AUC after training: 0.5
User 1769 does not improve AUC. Reverting changes.
Training on augumented user 4827 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4827 AUC after training: 0.5
User 4827 does not improve AUC. Reverting changes.
Training on augumented user 107285 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107285 AUC after training: 0.5
User 107285 does not improve AUC. Reverting changes.
Training on augumented user 43507 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43507 AUC after training: 0.5
User 43507 does not improve AUC. Reverting changes.
Training on augumented user 98707 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98707 AUC after training: 0.5
User 98707 does not improve AUC. Reverting changes.
Training on augumented user 136812 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136812 AUC after training: 0.5
User 136812 does not improve AUC. Reverting changes.
Training on augumented user 101445 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101445 AUC after training: 0.5
User 101445 does not improve AUC. Reverting changes.
Training on augumented user 89697 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89697 AUC after training: 0.5
User 89697 does not improve AUC. Reverting changes.
Training on augumented user 37647 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37647 AUC after training: 0.5
User 37647 does not improve AUC. Reverting changes.
Training on augumented user 117042 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117042 AUC after training: 0.5
User 117042 does not improve AUC. Reverting changes.
Training on augumented user 26153 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26153 AUC after training: 0.5
User 26153 does not improve AUC. Reverting changes.
Training on augumented user 95287 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95287 AUC after training: 0.5
User 95287 does not improve AUC. Reverting changes.
Training on augumented user 82342 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82342 AUC after training: 0.5
User 82342 does not improve AUC. Reverting changes.
Training on augumented user 38112 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38112 AUC after training: 0.5
User 38112 does not improve AUC. Reverting changes.
Training on augumented user 38940 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38940 AUC after training: 0.5
User 38940 does not improve AUC. Reverting changes.
Training on augumented user 106282 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106282 AUC after training: 0.5
User 106282 does not improve AUC. Reverting changes.
Training on augumented user 71962 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71962 AUC after training: 0.5
User 71962 does not improve AUC. Reverting changes.
Training on augumented user 38118 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38118 AUC after training: 0.5
User 38118 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:11:48.886804] start test user 97799 63/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:11:49.744638] start test user 97799 63/567 recall augumented users by random, augumented_users = [103640, 103515, 2083, 111867, 108320, 1951, 92811, 89795, 81491, 134595, 36650, 106587, 82317, 43042, 135768, 96677, 120402, 88235, 82421, 45260, 49089, 79347, 52817, 79075, 45728, 107317, 107496, 67231, 77575, 101454, 24552, 52481, 32063, 104442, 126824, 37193, 91400, 113205, 50607, 91763, 71032, 47950, 119697, 66446, 99887, 26831, 79730, 23569, 1445, 6150]
[2024-12-02 18:11:49.759740] user = 97799 Cloud 63/567
[2024-12-02 18:11:49.771413] user = 97799 Local 63/567
[2024-12-02 18:11:49.797386] user = 97799 Local+ 63/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:11:53.132954] user = 97799 MPDA- 63/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8145833333333333
Training on augumented user 103640 0/50 current_auc = 0.8145833333333333
User 103640 AUC after training: 0.8145833333333333
User 103640 does not improve AUC. Reverting changes.
Training on augumented user 103515 1/50 current_auc = 0.8145833333333333
User 103515 AUC after training: 0.8145833333333333
User 103515 does not improve AUC. Reverting changes.
Training on augumented user 2083 2/50 current_auc = 0.8145833333333333
User 2083 AUC after training: 0.8104166666666667
User 2083 does not improve AUC. Reverting changes.
Training on augumented user 111867 3/50 current_auc = 0.8145833333333333
User 111867 AUC after training: 0.8145833333333333
User 111867 does not improve AUC. Reverting changes.
Training on augumented user 108320 4/50 current_auc = 0.8145833333333333
User 108320 AUC after training: 0.8145833333333333
User 108320 does not improve AUC. Reverting changes.
Training on augumented user 1951 5/50 current_auc = 0.8145833333333333
User 1951 AUC after training: 0.8145833333333333
User 1951 does not improve AUC. Reverting changes.
Training on augumented user 92811 6/50 current_auc = 0.8145833333333333
User 92811 AUC after training: 0.8104166666666667
User 92811 does not improve AUC. Reverting changes.
Training on augumented user 89795 7/50 current_auc = 0.8145833333333333
User 89795 AUC after training: 0.8104166666666667
User 89795 does not improve AUC. Reverting changes.
Training on augumented user 81491 8/50 current_auc = 0.8145833333333333
User 81491 AUC after training: 0.8145833333333333
User 81491 does not improve AUC. Reverting changes.
Training on augumented user 134595 9/50 current_auc = 0.8145833333333333
User 134595 AUC after training: 0.8145833333333333
User 134595 does not improve AUC. Reverting changes.
Training on augumented user 36650 10/50 current_auc = 0.8145833333333333
User 36650 AUC after training: 0.8125
User 36650 does not improve AUC. Reverting changes.
Training on augumented user 106587 11/50 current_auc = 0.8145833333333333
User 106587 AUC after training: 0.8145833333333333
User 106587 does not improve AUC. Reverting changes.
Training on augumented user 82317 12/50 current_auc = 0.8145833333333333
User 82317 AUC after training: 0.8145833333333333
User 82317 does not improve AUC. Reverting changes.
Training on augumented user 43042 13/50 current_auc = 0.8145833333333333
User 43042 AUC after training: 0.8125
User 43042 does not improve AUC. Reverting changes.
Training on augumented user 135768 14/50 current_auc = 0.8145833333333333
User 135768 AUC after training: 0.8145833333333333
User 135768 does not improve AUC. Reverting changes.
Training on augumented user 96677 15/50 current_auc = 0.8145833333333333
User 96677 AUC after training: 0.8104166666666667
User 96677 does not improve AUC. Reverting changes.
Training on augumented user 120402 16/50 current_auc = 0.8145833333333333
User 120402 AUC after training: 0.8145833333333333
User 120402 does not improve AUC. Reverting changes.
Training on augumented user 88235 17/50 current_auc = 0.8145833333333333
User 88235 AUC after training: 0.8104166666666667
User 88235 does not improve AUC. Reverting changes.
Training on augumented user 82421 18/50 current_auc = 0.8145833333333333
User 82421 AUC after training: 0.8145833333333333
User 82421 does not improve AUC. Reverting changes.
Training on augumented user 45260 19/50 current_auc = 0.8145833333333333
User 45260 AUC after training: 0.8145833333333333
User 45260 does not improve AUC. Reverting changes.
Training on augumented user 49089 20/50 current_auc = 0.8145833333333333
User 49089 AUC after training: 0.8145833333333333
User 49089 does not improve AUC. Reverting changes.
Training on augumented user 79347 21/50 current_auc = 0.8145833333333333
User 79347 AUC after training: 0.8125
User 79347 does not improve AUC. Reverting changes.
Training on augumented user 52817 22/50 current_auc = 0.8145833333333333
User 52817 AUC after training: 0.8145833333333333
User 52817 does not improve AUC. Reverting changes.
Training on augumented user 79075 23/50 current_auc = 0.8145833333333333
User 79075 AUC after training: 0.8125
User 79075 does not improve AUC. Reverting changes.
Training on augumented user 45728 24/50 current_auc = 0.8145833333333333
User 45728 AUC after training: 0.8125
User 45728 does not improve AUC. Reverting changes.
Training on augumented user 107317 25/50 current_auc = 0.8145833333333333
User 107317 AUC after training: 0.8145833333333333
User 107317 does not improve AUC. Reverting changes.
Training on augumented user 107496 26/50 current_auc = 0.8145833333333333
User 107496 AUC after training: 0.8145833333333333
User 107496 does not improve AUC. Reverting changes.
Training on augumented user 67231 27/50 current_auc = 0.8145833333333333
User 67231 AUC after training: 0.8145833333333333
User 67231 does not improve AUC. Reverting changes.
Training on augumented user 77575 28/50 current_auc = 0.8145833333333333
User 77575 AUC after training: 0.8145833333333333
User 77575 does not improve AUC. Reverting changes.
Training on augumented user 101454 29/50 current_auc = 0.8145833333333333
User 101454 AUC after training: 0.8145833333333333
User 101454 does not improve AUC. Reverting changes.
Training on augumented user 24552 30/50 current_auc = 0.8145833333333333
User 24552 AUC after training: 0.8145833333333333
User 24552 does not improve AUC. Reverting changes.
Training on augumented user 52481 31/50 current_auc = 0.8145833333333333
User 52481 AUC after training: 0.8145833333333333
User 52481 does not improve AUC. Reverting changes.
Training on augumented user 32063 32/50 current_auc = 0.8145833333333333
User 32063 AUC after training: 0.8145833333333333
User 32063 does not improve AUC. Reverting changes.
Training on augumented user 104442 33/50 current_auc = 0.8145833333333333
User 104442 AUC after training: 0.8145833333333333
User 104442 does not improve AUC. Reverting changes.
Training on augumented user 126824 34/50 current_auc = 0.8145833333333333
User 126824 AUC after training: 0.80625
User 126824 does not improve AUC. Reverting changes.
Training on augumented user 37193 35/50 current_auc = 0.8145833333333333
User 37193 AUC after training: 0.8145833333333333
User 37193 does not improve AUC. Reverting changes.
Training on augumented user 91400 36/50 current_auc = 0.8145833333333333
User 91400 AUC after training: 0.8125
User 91400 does not improve AUC. Reverting changes.
Training on augumented user 113205 37/50 current_auc = 0.8145833333333333
User 113205 AUC after training: 0.8145833333333333
User 113205 does not improve AUC. Reverting changes.
Training on augumented user 50607 38/50 current_auc = 0.8145833333333333
User 50607 AUC after training: 0.8104166666666667
User 50607 does not improve AUC. Reverting changes.
Training on augumented user 91763 39/50 current_auc = 0.8145833333333333
User 91763 AUC after training: 0.8125
User 91763 does not improve AUC. Reverting changes.
Training on augumented user 71032 40/50 current_auc = 0.8145833333333333
User 71032 AUC after training: 0.8145833333333333
User 71032 does not improve AUC. Reverting changes.
Training on augumented user 47950 41/50 current_auc = 0.8145833333333333
User 47950 AUC after training: 0.8145833333333333
User 47950 does not improve AUC. Reverting changes.
Training on augumented user 119697 42/50 current_auc = 0.8145833333333333
User 119697 AUC after training: 0.8125
User 119697 does not improve AUC. Reverting changes.
Training on augumented user 66446 43/50 current_auc = 0.8145833333333333
User 66446 AUC after training: 0.8145833333333333
User 66446 does not improve AUC. Reverting changes.
Training on augumented user 99887 44/50 current_auc = 0.8145833333333333
User 99887 AUC after training: 0.8145833333333333
User 99887 does not improve AUC. Reverting changes.
Training on augumented user 26831 45/50 current_auc = 0.8145833333333333
User 26831 AUC after training: 0.8145833333333333
User 26831 does not improve AUC. Reverting changes.
Training on augumented user 79730 46/50 current_auc = 0.8145833333333333
User 79730 AUC after training: 0.8145833333333333
User 79730 does not improve AUC. Reverting changes.
Training on augumented user 23569 47/50 current_auc = 0.8145833333333333
User 23569 AUC after training: 0.8145833333333333
User 23569 does not improve AUC. Reverting changes.
Training on augumented user 1445 48/50 current_auc = 0.8145833333333333
User 1445 AUC after training: 0.8145833333333333
User 1445 does not improve AUC. Reverting changes.
Training on augumented user 6150 49/50 current_auc = 0.8145833333333333
User 6150 AUC after training: 0.8104166666666667
User 6150 does not improve AUC. Reverting changes.
[2024-12-02 18:12:24.755877] start test user 97804 64/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:12:25.707933] start test user 97804 64/567 recall augumented users by random, augumented_users = [81712, 71415, 46651, 48988, 103616, 28706, 130330, 138198, 98672, 6932, 52988, 80003, 116799, 76139, 125161, 63452, 57688, 36986, 78831, 21991, 22211, 126404, 46170, 9361, 16713, 73243, 9992, 62063, 10517, 109487, 68263, 7699, 16407, 102294, 124542, 66969, 75167, 12874, 125613, 83176, 98152, 122275, 67350, 7637, 88384, 23479, 72345, 130500, 11125, 129115]
[2024-12-02 18:12:25.745041] user = 97804 Cloud 64/567
[2024-12-02 18:12:25.774130] user = 97804 Local 64/567
[2024-12-02 18:12:25.855196] user = 97804 Local+ 64/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:12:28.558773] user = 97804 MPDA- 64/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6420408163265307
Training on augumented user 81712 0/50 current_auc = 0.6420408163265307
User 81712 AUC after training: 0.6433673469387756
User 81712 improves AUC. Keeping the model.
Training on augumented user 71415 1/50 current_auc = 0.6433673469387756
User 71415 AUC after training: 0.643265306122449
User 71415 does not improve AUC. Reverting changes.
Training on augumented user 46651 2/50 current_auc = 0.6433673469387756
User 46651 AUC after training: 0.6438775510204082
User 46651 improves AUC. Keeping the model.
Training on augumented user 48988 3/50 current_auc = 0.6438775510204082
User 48988 AUC after training: 0.6431632653061224
User 48988 does not improve AUC. Reverting changes.
Training on augumented user 103616 4/50 current_auc = 0.6438775510204082
User 103616 AUC after training: 0.6441836734693878
User 103616 improves AUC. Keeping the model.
Training on augumented user 28706 5/50 current_auc = 0.6441836734693878
User 28706 AUC after training: 0.644795918367347
User 28706 improves AUC. Keeping the model.
Training on augumented user 130330 6/50 current_auc = 0.644795918367347
User 130330 AUC after training: 0.6433673469387755
User 130330 does not improve AUC. Reverting changes.
Training on augumented user 138198 7/50 current_auc = 0.644795918367347
User 138198 AUC after training: 0.6440816326530612
User 138198 does not improve AUC. Reverting changes.
Training on augumented user 98672 8/50 current_auc = 0.644795918367347
User 98672 AUC after training: 0.6444897959183673
User 98672 does not improve AUC. Reverting changes.
Training on augumented user 6932 9/50 current_auc = 0.644795918367347
User 6932 AUC after training: 0.6442857142857142
User 6932 does not improve AUC. Reverting changes.
Training on augumented user 52988 10/50 current_auc = 0.644795918367347
User 52988 AUC after training: 0.6443877551020409
User 52988 does not improve AUC. Reverting changes.
Training on augumented user 80003 11/50 current_auc = 0.644795918367347
User 80003 AUC after training: 0.6446938775510204
User 80003 does not improve AUC. Reverting changes.
Training on augumented user 116799 12/50 current_auc = 0.644795918367347
User 116799 AUC after training: 0.644795918367347
User 116799 does not improve AUC. Reverting changes.
Training on augumented user 76139 13/50 current_auc = 0.644795918367347
User 76139 AUC after training: 0.644591836734694
User 76139 does not improve AUC. Reverting changes.
Training on augumented user 125161 14/50 current_auc = 0.644795918367347
User 125161 AUC after training: 0.6451020408163265
User 125161 improves AUC. Keeping the model.
Training on augumented user 63452 15/50 current_auc = 0.6451020408163265
User 63452 AUC after training: 0.6446938775510205
User 63452 does not improve AUC. Reverting changes.
Training on augumented user 57688 16/50 current_auc = 0.6451020408163265
User 57688 AUC after training: 0.6443877551020408
User 57688 does not improve AUC. Reverting changes.
Training on augumented user 36986 17/50 current_auc = 0.6451020408163265
User 36986 AUC after training: 0.644795918367347
User 36986 does not improve AUC. Reverting changes.
Training on augumented user 78831 18/50 current_auc = 0.6451020408163265
User 78831 AUC after training: 0.6444897959183674
User 78831 does not improve AUC. Reverting changes.
Training on augumented user 21991 19/50 current_auc = 0.6451020408163265
User 21991 AUC after training: 0.6451020408163266
User 21991 improves AUC. Keeping the model.
Training on augumented user 22211 20/50 current_auc = 0.6451020408163266
User 22211 AUC after training: 0.645
User 22211 does not improve AUC. Reverting changes.
Training on augumented user 126404 21/50 current_auc = 0.6451020408163266
User 126404 AUC after training: 0.6453061224489796
User 126404 improves AUC. Keeping the model.
Training on augumented user 46170 22/50 current_auc = 0.6453061224489796
User 46170 AUC after training: 0.6448979591836735
User 46170 does not improve AUC. Reverting changes.
Training on augumented user 9361 23/50 current_auc = 0.6453061224489796
User 9361 AUC after training: 0.6451020408163265
User 9361 does not improve AUC. Reverting changes.
Training on augumented user 16713 24/50 current_auc = 0.6453061224489796
User 16713 AUC after training: 0.6441836734693878
User 16713 does not improve AUC. Reverting changes.
Training on augumented user 73243 25/50 current_auc = 0.6453061224489796
User 73243 AUC after training: 0.6448979591836735
User 73243 does not improve AUC. Reverting changes.
Training on augumented user 9992 26/50 current_auc = 0.6453061224489796
User 9992 AUC after training: 0.6448979591836735
User 9992 does not improve AUC. Reverting changes.
Training on augumented user 62063 27/50 current_auc = 0.6453061224489796
User 62063 AUC after training: 0.645
User 62063 does not improve AUC. Reverting changes.
Training on augumented user 10517 28/50 current_auc = 0.6453061224489796
User 10517 AUC after training: 0.6437755102040816
User 10517 does not improve AUC. Reverting changes.
Training on augumented user 109487 29/50 current_auc = 0.6453061224489796
User 109487 AUC after training: 0.6448979591836733
User 109487 does not improve AUC. Reverting changes.
Training on augumented user 68263 30/50 current_auc = 0.6453061224489796
User 68263 AUC after training: 0.644795918367347
User 68263 does not improve AUC. Reverting changes.
Training on augumented user 7699 31/50 current_auc = 0.6453061224489796
User 7699 AUC after training: 0.6446938775510204
User 7699 does not improve AUC. Reverting changes.
Training on augumented user 16407 32/50 current_auc = 0.6453061224489796
User 16407 AUC after training: 0.644795918367347
User 16407 does not improve AUC. Reverting changes.
Training on augumented user 102294 33/50 current_auc = 0.6453061224489796
User 102294 AUC after training: 0.6443877551020408
User 102294 does not improve AUC. Reverting changes.
Training on augumented user 124542 34/50 current_auc = 0.6453061224489796
User 124542 AUC after training: 0.6448979591836734
User 124542 does not improve AUC. Reverting changes.
Training on augumented user 66969 35/50 current_auc = 0.6453061224489796
User 66969 AUC after training: 0.6448979591836735
User 66969 does not improve AUC. Reverting changes.
Training on augumented user 75167 36/50 current_auc = 0.6453061224489796
User 75167 AUC after training: 0.6448979591836735
User 75167 does not improve AUC. Reverting changes.
Training on augumented user 12874 37/50 current_auc = 0.6453061224489796
User 12874 AUC after training: 0.6444897959183672
User 12874 does not improve AUC. Reverting changes.
Training on augumented user 125613 38/50 current_auc = 0.6453061224489796
User 125613 AUC after training: 0.6436734693877552
User 125613 does not improve AUC. Reverting changes.
Training on augumented user 83176 39/50 current_auc = 0.6453061224489796
User 83176 AUC after training: 0.644795918367347
User 83176 does not improve AUC. Reverting changes.
Training on augumented user 98152 40/50 current_auc = 0.6453061224489796
User 98152 AUC after training: 0.6443877551020408
User 98152 does not improve AUC. Reverting changes.
Training on augumented user 122275 41/50 current_auc = 0.6453061224489796
User 122275 AUC after training: 0.6442857142857142
User 122275 does not improve AUC. Reverting changes.
Training on augumented user 67350 42/50 current_auc = 0.6453061224489796
User 67350 AUC after training: 0.6444897959183674
User 67350 does not improve AUC. Reverting changes.
Training on augumented user 7637 43/50 current_auc = 0.6453061224489796
User 7637 AUC after training: 0.6453061224489796
User 7637 does not improve AUC. Reverting changes.
Training on augumented user 88384 44/50 current_auc = 0.6453061224489796
User 88384 AUC after training: 0.6440816326530613
User 88384 does not improve AUC. Reverting changes.
Training on augumented user 23479 45/50 current_auc = 0.6453061224489796
User 23479 AUC after training: 0.644795918367347
User 23479 does not improve AUC. Reverting changes.
Training on augumented user 72345 46/50 current_auc = 0.6453061224489796
User 72345 AUC after training: 0.6443877551020408
User 72345 does not improve AUC. Reverting changes.
Training on augumented user 130500 47/50 current_auc = 0.6453061224489796
User 130500 AUC after training: 0.6445918367346939
User 130500 does not improve AUC. Reverting changes.
Training on augumented user 11125 48/50 current_auc = 0.6453061224489796
User 11125 AUC after training: 0.6439795918367347
User 11125 does not improve AUC. Reverting changes.
Training on augumented user 129115 49/50 current_auc = 0.6453061224489796
User 129115 AUC after training: 0.6441836734693877
User 129115 does not improve AUC. Reverting changes.
[2024-12-02 18:12:58.343343] start test user 97826 65/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:12:59.129822] start test user 97826 65/567 recall augumented users by random, augumented_users = [81745, 91668, 109878, 14027, 25338, 32698, 85777, 68943, 119732, 57380, 77683, 115566, 129394, 131872, 98168, 118032, 73426, 135136, 31193, 72858, 75949, 22467, 67422, 9744, 68169, 31067, 49179, 76474, 122534, 97065, 129364, 113105, 50927, 28201, 123650, 36117, 68087, 92288, 120606, 36838, 57708, 59482, 99630, 61536, 113631, 69957, 110493, 73851, 137221, 85929]
[2024-12-02 18:12:59.148381] user = 97826 Cloud 65/567
[2024-12-02 18:12:59.202133] user = 97826 Local 65/567
[2024-12-02 18:12:59.536224] user = 97826 Local+ 65/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:13:02.833903] user = 97826 MPDA- 65/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5597583399001839
Training on augumented user 81745 0/50 current_auc = 0.5597583399001839
User 81745 AUC after training: 0.5599684791174152
User 81745 improves AUC. Keeping the model.
Training on augumented user 91668 1/50 current_auc = 0.5599684791174152
User 91668 AUC after training: 0.5614394536380353
User 91668 improves AUC. Keeping the model.
Training on augumented user 109878 2/50 current_auc = 0.5614394536380353
User 109878 AUC after training: 0.562962962962963
User 109878 improves AUC. Keeping the model.
Training on augumented user 14027 3/50 current_auc = 0.562962962962963
User 14027 AUC after training: 0.5620698712897294
User 14027 does not improve AUC. Reverting changes.
Training on augumented user 25338 4/50 current_auc = 0.562962962962963
User 25338 AUC after training: 0.5632256369845022
User 25338 improves AUC. Keeping the model.
Training on augumented user 32698 5/50 current_auc = 0.5632256369845022
User 32698 AUC after training: 0.5632781717888101
User 32698 improves AUC. Keeping the model.
Training on augumented user 85777 6/50 current_auc = 0.5632781717888101
User 85777 AUC after training: 0.5634883110060416
User 85777 improves AUC. Keeping the model.
Training on augumented user 68943 7/50 current_auc = 0.5634883110060416
User 68943 AUC after training: 0.563645915418965
User 68943 improves AUC. Keeping the model.
Training on augumented user 119732 8/50 current_auc = 0.563645915418965
User 119732 AUC after training: 0.5628053585500394
User 119732 does not improve AUC. Reverting changes.
Training on augumented user 57380 9/50 current_auc = 0.563645915418965
User 57380 AUC after training: 0.5625952193328081
User 57380 does not improve AUC. Reverting changes.
Training on augumented user 77683 10/50 current_auc = 0.563645915418965
User 77683 AUC after training: 0.5635933806146572
User 77683 does not improve AUC. Reverting changes.
Training on augumented user 115566 11/50 current_auc = 0.563645915418965
User 115566 AUC after training: 0.562962962962963
User 115566 does not improve AUC. Reverting changes.
Training on augumented user 129394 12/50 current_auc = 0.563645915418965
User 129394 AUC after training: 0.5650643551352771
User 129394 improves AUC. Keeping the model.
Training on augumented user 131872 13/50 current_auc = 0.5650643551352771
User 131872 AUC after training: 0.5653795639611243
User 131872 improves AUC. Keeping the model.
Training on augumented user 98168 14/50 current_auc = 0.5653795639611243
User 98168 AUC after training: 0.5631731021801945
User 98168 does not improve AUC. Reverting changes.
Training on augumented user 118032 15/50 current_auc = 0.5653795639611243
User 118032 AUC after training: 0.5667454688731285
User 118032 improves AUC. Keeping the model.
Training on augumented user 73426 16/50 current_auc = 0.5667454688731285
User 73426 AUC after training: 0.5655371683740478
User 73426 does not improve AUC. Reverting changes.
Training on augumented user 135136 17/50 current_auc = 0.5667454688731285
User 135136 AUC after training: 0.566535329655897
User 135136 does not improve AUC. Reverting changes.
Training on augumented user 31193 18/50 current_auc = 0.5667454688731285
User 31193 AUC after training: 0.5670606776989755
User 31193 improves AUC. Keeping the model.
Training on augumented user 72858 19/50 current_auc = 0.5670606776989755
User 72858 AUC after training: 0.5653795639611242
User 72858 does not improve AUC. Reverting changes.
Training on augumented user 75949 20/50 current_auc = 0.5670606776989755
User 75949 AUC after training: 0.5666403992645127
User 75949 does not improve AUC. Reverting changes.
Training on augumented user 22467 21/50 current_auc = 0.5670606776989755
User 22467 AUC after training: 0.5667980036774363
User 22467 does not improve AUC. Reverting changes.
Training on augumented user 67422 22/50 current_auc = 0.5670606776989755
User 67422 AUC after training: 0.5664827948515893
User 67422 does not improve AUC. Reverting changes.
Training on augumented user 9744 23/50 current_auc = 0.5670606776989755
User 9744 AUC after training: 0.5671657473075913
User 9744 improves AUC. Keeping the model.
Training on augumented user 68169 24/50 current_auc = 0.5671657473075913
User 68169 AUC after training: 0.5666403992645128
User 68169 does not improve AUC. Reverting changes.
Training on augumented user 31067 25/50 current_auc = 0.5671657473075913
User 31067 AUC after training: 0.5674284213291305
User 31067 improves AUC. Keeping the model.
Training on augumented user 49179 26/50 current_auc = 0.5674284213291305
User 49179 AUC after training: 0.5672708169162071
User 49179 does not improve AUC. Reverting changes.
Training on augumented user 76474 27/50 current_auc = 0.5674284213291305
User 76474 AUC after training: 0.5671657473075913
User 76474 does not improve AUC. Reverting changes.
Training on augumented user 122534 28/50 current_auc = 0.5674284213291305
User 122534 AUC after training: 0.5662201208300499
User 122534 does not improve AUC. Reverting changes.
Training on augumented user 97065 29/50 current_auc = 0.5674284213291305
User 97065 AUC after training: 0.5664302600472813
User 97065 does not improve AUC. Reverting changes.
Training on augumented user 129364 30/50 current_auc = 0.5674284213291305
User 129364 AUC after training: 0.5682164433937483
User 129364 improves AUC. Keeping the model.
Training on augumented user 113105 31/50 current_auc = 0.5682164433937483
User 113105 AUC after training: 0.5678486997635934
User 113105 does not improve AUC. Reverting changes.
Training on augumented user 50927 32/50 current_auc = 0.5682164433937483
User 50927 AUC after training: 0.566903073286052
User 50927 does not improve AUC. Reverting changes.
Training on augumented user 28201 33/50 current_auc = 0.5682164433937483
User 28201 AUC after training: 0.5679537693722091
User 28201 does not improve AUC. Reverting changes.
Training on augumented user 123650 34/50 current_auc = 0.5682164433937483
User 123650 AUC after training: 0.5683740478066719
User 123650 improves AUC. Keeping the model.
Training on augumented user 36117 35/50 current_auc = 0.5683740478066719
User 36117 AUC after training: 0.5682164433937483
User 36117 does not improve AUC. Reverting changes.
Training on augumented user 68087 36/50 current_auc = 0.5683740478066719
User 68087 AUC after training: 0.5680588389808249
User 68087 does not improve AUC. Reverting changes.
Training on augumented user 92288 37/50 current_auc = 0.5683740478066719
User 92288 AUC after training: 0.5679537693722091
User 92288 does not improve AUC. Reverting changes.
Training on augumented user 120606 38/50 current_auc = 0.5683740478066719
User 120606 AUC after training: 0.5681639085894405
User 120606 does not improve AUC. Reverting changes.
Training on augumented user 36838 39/50 current_auc = 0.5683740478066719
User 36838 AUC after training: 0.568321513002364
User 36838 does not improve AUC. Reverting changes.
Training on augumented user 57708 40/50 current_auc = 0.5683740478066719
User 57708 AUC after training: 0.566903073286052
User 57708 does not improve AUC. Reverting changes.
Training on augumented user 59482 41/50 current_auc = 0.5683740478066719
User 59482 AUC after training: 0.566903073286052
User 59482 does not improve AUC. Reverting changes.
Training on augumented user 99630 42/50 current_auc = 0.5683740478066719
User 99630 AUC after training: 0.5657473075912792
User 99630 does not improve AUC. Reverting changes.
Training on augumented user 61536 43/50 current_auc = 0.5683740478066719
User 61536 AUC after training: 0.5685841870239032
User 61536 improves AUC. Keeping the model.
Training on augumented user 113631 44/50 current_auc = 0.5685841870239032
User 113631 AUC after training: 0.5690044654583661
User 113631 improves AUC. Keeping the model.
Training on augumented user 69957 45/50 current_auc = 0.5690044654583661
User 69957 AUC after training: 0.5672708169162071
User 69957 does not improve AUC. Reverting changes.
Training on augumented user 110493 46/50 current_auc = 0.5690044654583661
User 110493 AUC after training: 0.5691095350669819
User 110493 improves AUC. Keeping the model.
Training on augumented user 73851 47/50 current_auc = 0.5691095350669819
User 73851 AUC after training: 0.568689256632519
User 73851 does not improve AUC. Reverting changes.
Training on augumented user 137221 48/50 current_auc = 0.5691095350669819
User 137221 AUC after training: 0.5688993958497504
User 137221 does not improve AUC. Reverting changes.
Training on augumented user 85929 49/50 current_auc = 0.5691095350669819
User 85929 AUC after training: 0.5679537693722091
User 85929 does not improve AUC. Reverting changes.
[2024-12-02 18:13:38.456868] start test user 97828 66/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:13:39.170270] start test user 97828 66/567 recall augumented users by random, augumented_users = [95419, 26215, 72193, 62228, 134530, 120895, 55107, 9140, 3232, 44868, 112696, 43932, 126975, 105382, 91996, 98382, 72680, 106350, 96903, 109174, 136904, 123636, 36180, 58485, 50132, 54305, 10133, 36232, 41342, 118200, 132141, 66943, 59002, 44565, 125957, 123619, 137936, 13698, 108425, 50611, 68554, 89574, 67575, 126156, 109590, 81229, 75935, 76858, 42964, 23424]
[2024-12-02 18:13:39.192889] user = 97828 Cloud 66/567
[2024-12-02 18:13:39.215118] user = 97828 Local 66/567
[2024-12-02 18:13:39.304776] user = 97828 Local+ 66/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:13:42.145906] user = 97828 MPDA- 66/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5277520814061054
Training on augumented user 95419 0/50 current_auc = 0.5277520814061054
User 95419 AUC after training: 0.5272895467160037
User 95419 does not improve AUC. Reverting changes.
Training on augumented user 26215 1/50 current_auc = 0.5277520814061054
User 26215 AUC after training: 0.528677150786309
User 26215 improves AUC. Keeping the model.
Training on augumented user 72193 2/50 current_auc = 0.528677150786309
User 72193 AUC after training: 0.5272895467160037
User 72193 does not improve AUC. Reverting changes.
Training on augumented user 62228 3/50 current_auc = 0.528677150786309
User 62228 AUC after training: 0.5291396854764108
User 62228 improves AUC. Keeping the model.
Training on augumented user 134530 4/50 current_auc = 0.5291396854764108
User 134530 AUC after training: 0.5277520814061054
User 134530 does not improve AUC. Reverting changes.
Training on augumented user 120895 5/50 current_auc = 0.5291396854764108
User 120895 AUC after training: 0.5272895467160038
User 120895 does not improve AUC. Reverting changes.
Training on augumented user 55107 6/50 current_auc = 0.5291396854764108
User 55107 AUC after training: 0.5259019426456985
User 55107 does not improve AUC. Reverting changes.
Training on augumented user 9140 7/50 current_auc = 0.5291396854764108
User 9140 AUC after training: 0.5259019426456985
User 9140 does not improve AUC. Reverting changes.
Training on augumented user 3232 8/50 current_auc = 0.5291396854764108
User 3232 AUC after training: 0.5300647548566143
User 3232 improves AUC. Keeping the model.
Training on augumented user 44868 9/50 current_auc = 0.5300647548566143
User 44868 AUC after training: 0.5296022201665126
User 44868 does not improve AUC. Reverting changes.
Training on augumented user 112696 10/50 current_auc = 0.5300647548566143
User 112696 AUC after training: 0.5291396854764108
User 112696 does not improve AUC. Reverting changes.
Training on augumented user 43932 11/50 current_auc = 0.5300647548566143
User 43932 AUC after training: 0.5286771507863091
User 43932 does not improve AUC. Reverting changes.
Training on augumented user 126975 12/50 current_auc = 0.5300647548566143
User 126975 AUC after training: 0.5291396854764107
User 126975 does not improve AUC. Reverting changes.
Training on augumented user 105382 13/50 current_auc = 0.5300647548566143
User 105382 AUC after training: 0.5291396854764108
User 105382 does not improve AUC. Reverting changes.
Training on augumented user 91996 14/50 current_auc = 0.5300647548566143
User 91996 AUC after training: 0.5272895467160037
User 91996 does not improve AUC. Reverting changes.
Training on augumented user 98382 15/50 current_auc = 0.5300647548566143
User 98382 AUC after training: 0.5277520814061054
User 98382 does not improve AUC. Reverting changes.
Training on augumented user 72680 16/50 current_auc = 0.5300647548566143
User 72680 AUC after training: 0.526827012025902
User 72680 does not improve AUC. Reverting changes.
Training on augumented user 106350 17/50 current_auc = 0.5300647548566143
User 106350 AUC after training: 0.5282146160962072
User 106350 does not improve AUC. Reverting changes.
Training on augumented user 96903 18/50 current_auc = 0.5300647548566143
User 96903 AUC after training: 0.524976873265495
User 96903 does not improve AUC. Reverting changes.
Training on augumented user 109174 19/50 current_auc = 0.5300647548566143
User 109174 AUC after training: 0.528677150786309
User 109174 does not improve AUC. Reverting changes.
Training on augumented user 136904 20/50 current_auc = 0.5300647548566143
User 136904 AUC after training: 0.5296022201665126
User 136904 does not improve AUC. Reverting changes.
Training on augumented user 123636 21/50 current_auc = 0.5300647548566143
User 123636 AUC after training: 0.5254394079555967
User 123636 does not improve AUC. Reverting changes.
Training on augumented user 36180 22/50 current_auc = 0.5300647548566143
User 36180 AUC after training: 0.5277520814061055
User 36180 does not improve AUC. Reverting changes.
Training on augumented user 58485 23/50 current_auc = 0.5300647548566143
User 58485 AUC after training: 0.5282146160962071
User 58485 does not improve AUC. Reverting changes.
Training on augumented user 50132 24/50 current_auc = 0.5300647548566143
User 50132 AUC after training: 0.5282146160962073
User 50132 does not improve AUC. Reverting changes.
Training on augumented user 54305 25/50 current_auc = 0.5300647548566143
User 54305 AUC after training: 0.5296022201665125
User 54305 does not improve AUC. Reverting changes.
Training on augumented user 10133 26/50 current_auc = 0.5300647548566143
User 10133 AUC after training: 0.5296022201665126
User 10133 does not improve AUC. Reverting changes.
Training on augumented user 36232 27/50 current_auc = 0.5300647548566143
User 36232 AUC after training: 0.5296022201665125
User 36232 does not improve AUC. Reverting changes.
Training on augumented user 41342 28/50 current_auc = 0.5300647548566143
User 41342 AUC after training: 0.528677150786309
User 41342 does not improve AUC. Reverting changes.
Training on augumented user 118200 29/50 current_auc = 0.5300647548566143
User 118200 AUC after training: 0.5282146160962072
User 118200 does not improve AUC. Reverting changes.
Training on augumented user 132141 30/50 current_auc = 0.5300647548566143
User 132141 AUC after training: 0.530527289546716
User 132141 improves AUC. Keeping the model.
Training on augumented user 66943 31/50 current_auc = 0.530527289546716
User 66943 AUC after training: 0.5296022201665125
User 66943 does not improve AUC. Reverting changes.
Training on augumented user 59002 32/50 current_auc = 0.530527289546716
User 59002 AUC after training: 0.5296022201665125
User 59002 does not improve AUC. Reverting changes.
Training on augumented user 44565 33/50 current_auc = 0.530527289546716
User 44565 AUC after training: 0.5272895467160036
User 44565 does not improve AUC. Reverting changes.
Training on augumented user 125957 34/50 current_auc = 0.530527289546716
User 125957 AUC after training: 0.5300647548566142
User 125957 does not improve AUC. Reverting changes.
Training on augumented user 123619 35/50 current_auc = 0.530527289546716
User 123619 AUC after training: 0.530527289546716
User 123619 does not improve AUC. Reverting changes.
Training on augumented user 137936 36/50 current_auc = 0.530527289546716
User 137936 AUC after training: 0.5296022201665125
User 137936 does not improve AUC. Reverting changes.
Training on augumented user 13698 37/50 current_auc = 0.530527289546716
User 13698 AUC after training: 0.5259019426456985
User 13698 does not improve AUC. Reverting changes.
Training on augumented user 108425 38/50 current_auc = 0.530527289546716
User 108425 AUC after training: 0.5300647548566142
User 108425 does not improve AUC. Reverting changes.
Training on augumented user 50611 39/50 current_auc = 0.530527289546716
User 50611 AUC after training: 0.5296022201665126
User 50611 does not improve AUC. Reverting changes.
Training on augumented user 68554 40/50 current_auc = 0.530527289546716
User 68554 AUC after training: 0.5300647548566143
User 68554 does not improve AUC. Reverting changes.
Training on augumented user 89574 41/50 current_auc = 0.530527289546716
User 89574 AUC after training: 0.5296022201665125
User 89574 does not improve AUC. Reverting changes.
Training on augumented user 67575 42/50 current_auc = 0.530527289546716
User 67575 AUC after training: 0.5309898242368177
User 67575 improves AUC. Keeping the model.
Training on augumented user 126156 43/50 current_auc = 0.5309898242368177
User 126156 AUC after training: 0.5314523589269196
User 126156 improves AUC. Keeping the model.
Training on augumented user 109590 44/50 current_auc = 0.5314523589269196
User 109590 AUC after training: 0.5300647548566143
User 109590 does not improve AUC. Reverting changes.
Training on augumented user 81229 45/50 current_auc = 0.5314523589269196
User 81229 AUC after training: 0.5314523589269196
User 81229 does not improve AUC. Reverting changes.
Training on augumented user 75935 46/50 current_auc = 0.5314523589269196
User 75935 AUC after training: 0.5328399629972248
User 75935 improves AUC. Keeping the model.
Training on augumented user 76858 47/50 current_auc = 0.5328399629972248
User 76858 AUC after training: 0.5323774283071231
User 76858 does not improve AUC. Reverting changes.
Training on augumented user 42964 48/50 current_auc = 0.5328399629972248
User 42964 AUC after training: 0.5305272895467159
User 42964 does not improve AUC. Reverting changes.
Training on augumented user 23424 49/50 current_auc = 0.5328399629972248
User 23424 AUC after training: 0.5333024976873266
User 23424 improves AUC. Keeping the model.
[2024-12-02 18:14:13.021103] start test user 97845 67/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:14:13.485401] start test user 97845 67/567 recall augumented users by random, augumented_users = [46568, 101627, 65513, 2371, 99633, 61574, 89189, 40858, 23354, 104317, 39825, 128622, 131719, 47536, 69575, 106675, 107183, 7298, 137727, 2220, 117481, 27360, 132269, 115257, 4306, 448, 64874, 103511, 118720, 49810, 40737, 132223, 99016, 101992, 137816, 76973, 48112, 58140, 125490, 123701, 44910, 136785, 76021, 71733, 43820, 110884, 18700, 28340, 122908, 4450]
[2024-12-02 18:14:13.502368] user = 97845 Cloud 67/567
[2024-12-02 18:14:13.534159] user = 97845 Local 67/567
[2024-12-02 18:14:13.637655] user = 97845 Local+ 67/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:14:16.769060] user = 97845 MPDA- 67/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5872461029759093
Training on augumented user 46568 0/50 current_auc = 0.5872461029759093
User 46568 AUC after training: 0.5871201385608564
User 46568 does not improve AUC. Reverting changes.
Training on augumented user 101627 1/50 current_auc = 0.5872461029759093
User 101627 AUC after training: 0.588033380569989
User 101627 improves AUC. Keeping the model.
Training on augumented user 65513 2/50 current_auc = 0.588033380569989
User 65513 AUC after training: 0.5881593449850417
User 65513 improves AUC. Keeping the model.
Training on augumented user 2371 3/50 current_auc = 0.5881593449850417
User 2371 AUC after training: 0.5876869784285939
User 2371 does not improve AUC. Reverting changes.
Training on augumented user 99633 4/50 current_auc = 0.5881593449850417
User 99633 AUC after training: 0.5877184695323571
User 99633 does not improve AUC. Reverting changes.
Training on augumented user 61574 5/50 current_auc = 0.5881593449850417
User 61574 AUC after training: 0.5877814517398834
User 61574 does not improve AUC. Reverting changes.
Training on augumented user 89189 6/50 current_auc = 0.5881593449850417
User 89189 AUC after training: 0.5854511100614077
User 89189 does not improve AUC. Reverting changes.
Training on augumented user 40858 7/50 current_auc = 0.5881593449850417
User 40858 AUC after training: 0.587372067390962
User 40858 does not improve AUC. Reverting changes.
Training on augumented user 23354 8/50 current_auc = 0.5881593449850417
User 23354 AUC after training: 0.5874350495984884
User 23354 does not improve AUC. Reverting changes.
Training on augumented user 104317 9/50 current_auc = 0.5881593449850417
User 104317 AUC after training: 0.5879703983624626
User 104317 does not improve AUC. Reverting changes.
Training on augumented user 39825 10/50 current_auc = 0.5881593449850417
User 39825 AUC after training: 0.5878129428436467
User 39825 does not improve AUC. Reverting changes.
Training on augumented user 128622 11/50 current_auc = 0.5881593449850417
User 128622 AUC after training: 0.5881278538812784
User 128622 does not improve AUC. Reverting changes.
Training on augumented user 131719 12/50 current_auc = 0.5881593449850417
User 131719 AUC after training: 0.5890410958904109
User 131719 improves AUC. Keeping the model.
Training on augumented user 47536 13/50 current_auc = 0.5890410958904109
User 47536 AUC after training: 0.5883482916076208
User 47536 does not improve AUC. Reverting changes.
Training on augumented user 69575 14/50 current_auc = 0.5890410958904109
User 69575 AUC after training: 0.5888521492678318
User 69575 does not improve AUC. Reverting changes.
Training on augumented user 106675 15/50 current_auc = 0.5890410958904109
User 106675 AUC after training: 0.5895764446543851
User 106675 improves AUC. Keeping the model.
Training on augumented user 107183 16/50 current_auc = 0.5895764446543851
User 107183 AUC after training: 0.5880963627775153
User 107183 does not improve AUC. Reverting changes.
Training on augumented user 7298 17/50 current_auc = 0.5895764446543851
User 7298 AUC after training: 0.5885372382301999
User 7298 does not improve AUC. Reverting changes.
Training on augumented user 137727 18/50 current_auc = 0.5895764446543851
User 137727 AUC after training: 0.5887576759565423
User 137727 does not improve AUC. Reverting changes.
Training on augumented user 2220 19/50 current_auc = 0.5895764446543851
User 2220 AUC after training: 0.5888521492678318
User 2220 does not improve AUC. Reverting changes.
Training on augumented user 117481 20/50 current_auc = 0.5895764446543851
User 117481 AUC after training: 0.5894189891355691
User 117481 does not improve AUC. Reverting changes.
Training on augumented user 27360 21/50 current_auc = 0.5895764446543851
User 27360 AUC after training: 0.5879074161549361
User 27360 does not improve AUC. Reverting changes.
Training on augumented user 132269 22/50 current_auc = 0.5895764446543851
User 132269 AUC after training: 0.5892930247205164
User 132269 does not improve AUC. Reverting changes.
Training on augumented user 115257 23/50 current_auc = 0.5895764446543851
User 115257 AUC after training: 0.5895764446543851
User 115257 does not improve AUC. Reverting changes.
Training on augumented user 4306 24/50 current_auc = 0.5895764446543851
User 4306 AUC after training: 0.5897968823807275
User 4306 improves AUC. Keeping the model.
Training on augumented user 448 25/50 current_auc = 0.5897968823807275
User 448 AUC after training: 0.5883482916076208
User 448 does not improve AUC. Reverting changes.
Training on augumented user 64874 26/50 current_auc = 0.5897968823807275
User 64874 AUC after training: 0.5896394268619114
User 64874 does not improve AUC. Reverting changes.
Training on augumented user 103511 27/50 current_auc = 0.5897968823807275
User 103511 AUC after training: 0.5889151314753582
User 103511 does not improve AUC. Reverting changes.
Training on augumented user 118720 28/50 current_auc = 0.5897968823807275
User 118720 AUC after training: 0.5891040780979373
User 118720 does not improve AUC. Reverting changes.
Training on augumented user 49810 29/50 current_auc = 0.5897968823807275
User 49810 AUC after training: 0.5886317115414895
User 49810 does not improve AUC. Reverting changes.
Training on augumented user 40737 30/50 current_auc = 0.5897968823807275
User 40737 AUC after training: 0.5896709179656747
User 40737 does not improve AUC. Reverting changes.
Training on augumented user 132223 31/50 current_auc = 0.5897968823807275
User 132223 AUC after training: 0.5891985514092268
User 132223 does not improve AUC. Reverting changes.
Training on augumented user 99016 32/50 current_auc = 0.5897968823807275
User 99016 AUC after training: 0.5889781136828846
User 99016 does not improve AUC. Reverting changes.
Training on augumented user 101992 33/50 current_auc = 0.5897968823807275
User 101992 AUC after training: 0.5889466225791213
User 101992 does not improve AUC. Reverting changes.
Training on augumented user 137816 34/50 current_auc = 0.5897968823807275
User 137816 AUC after training: 0.5887261848527792
User 137816 does not improve AUC. Reverting changes.
Training on augumented user 76973 35/50 current_auc = 0.5897968823807275
User 76973 AUC after training: 0.5894504802393323
User 76973 does not improve AUC. Reverting changes.
Training on augumented user 48112 36/50 current_auc = 0.5897968823807275
User 48112 AUC after training: 0.5895134624468588
User 48112 does not improve AUC. Reverting changes.
Training on augumented user 58140 37/50 current_auc = 0.5897968823807275
User 58140 AUC after training: 0.5893874980318059
User 58140 does not improve AUC. Reverting changes.
Training on augumented user 125490 38/50 current_auc = 0.5897968823807275
User 125490 AUC after training: 0.5896394268619115
User 125490 does not improve AUC. Reverting changes.
Training on augumented user 123701 39/50 current_auc = 0.5897968823807275
User 123701 AUC after training: 0.5896709179656747
User 123701 does not improve AUC. Reverting changes.
Training on augumented user 44910 40/50 current_auc = 0.5897968823807275
User 44910 AUC after training: 0.5896079357581483
User 44910 does not improve AUC. Reverting changes.
Training on augumented user 136785 41/50 current_auc = 0.5897968823807275
User 136785 AUC after training: 0.5892615336167533
User 136785 does not improve AUC. Reverting changes.
Training on augumented user 76021 42/50 current_auc = 0.5897968823807275
User 76021 AUC after training: 0.5891040780979373
User 76021 does not improve AUC. Reverting changes.
Training on augumented user 71733 43/50 current_auc = 0.5897968823807275
User 71733 AUC after training: 0.5893560069280428
User 71733 does not improve AUC. Reverting changes.
Training on augumented user 43820 44/50 current_auc = 0.5897968823807275
User 43820 AUC after training: 0.5877184695323571
User 43820 does not improve AUC. Reverting changes.
Training on augumented user 110884 45/50 current_auc = 0.5897968823807275
User 110884 AUC after training: 0.5893245158242797
User 110884 does not improve AUC. Reverting changes.
Training on augumented user 18700 46/50 current_auc = 0.5897968823807275
User 18700 AUC after training: 0.5880648716737522
User 18700 does not improve AUC. Reverting changes.
Training on augumented user 28340 47/50 current_auc = 0.5897968823807275
User 28340 AUC after training: 0.5854826011651708
User 28340 does not improve AUC. Reverting changes.
Training on augumented user 122908 48/50 current_auc = 0.5897968823807275
User 122908 AUC after training: 0.589041095890411
User 122908 does not improve AUC. Reverting changes.
Training on augumented user 4450 49/50 current_auc = 0.5897968823807275
User 4450 AUC after training: 0.5886317115414894
User 4450 does not improve AUC. Reverting changes.
[2024-12-02 18:14:52.815071] start test user 97853 68/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:14:53.624955] start test user 97853 68/567 recall augumented users by random, augumented_users = [38397, 79922, 68368, 71655, 95685, 64219, 111543, 14283, 639, 84952, 4859, 1939, 74421, 38044, 103824, 79185, 23862, 107240, 1093, 80822, 137480, 97441, 36558, 67044, 70866, 82112, 45733, 54373, 128882, 35430, 129300, 95810, 41503, 57770, 51613, 14847, 31925, 82539, 15504, 128775, 66011, 89150, 96978, 40026, 63760, 59581, 137752, 17771, 7658, 124390]
[2024-12-02 18:14:53.658497] user = 97853 Cloud 68/567
[2024-12-02 18:14:53.913734] user = 97853 Local 68/567
[2024-12-02 18:14:54.445354] user = 97853 Local+ 68/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:14:57.900911] user = 97853 MPDA- 68/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6959720663424367
Training on augumented user 38397 0/50 current_auc = 0.6959720663424367
User 38397 AUC after training: 0.6965131918835623
User 38397 improves AUC. Keeping the model.
Training on augumented user 79922 1/50 current_auc = 0.6965131918835623
User 79922 AUC after training: 0.6965710900896086
User 79922 improves AUC. Keeping the model.
Training on augumented user 68368 2/50 current_auc = 0.6965710900896086
User 68368 AUC after training: 0.6966534836905207
User 68368 improves AUC. Keeping the model.
Training on augumented user 71655 3/50 current_auc = 0.6966534836905207
User 71655 AUC after training: 0.6967247430210394
User 71655 improves AUC. Keeping the model.
Training on augumented user 95685 4/50 current_auc = 0.6967247430210394
User 95685 AUC after training: 0.6966824327935439
User 95685 does not improve AUC. Reverting changes.
Training on augumented user 64219 5/50 current_auc = 0.6967247430210394
User 64219 AUC after training: 0.6956758947499688
User 64219 does not improve AUC. Reverting changes.
Training on augumented user 111543 6/50 current_auc = 0.6967247430210394
User 111543 AUC after training: 0.6966534836905207
User 111543 does not improve AUC. Reverting changes.
Training on augumented user 14283 7/50 current_auc = 0.6967247430210394
User 14283 AUC after training: 0.6968004560597153
User 14283 improves AUC. Keeping the model.
Training on augumented user 639 8/50 current_auc = 0.6968004560597153
User 639 AUC after training: 0.6968294051627385
User 639 improves AUC. Keeping the model.
Training on augumented user 84952 9/50 current_auc = 0.6968294051627385
User 84952 AUC after training: 0.6967492384159051
User 84952 does not improve AUC. Reverting changes.
Training on augumented user 4859 10/50 current_auc = 0.6968294051627385
User 4859 AUC after training: 0.6968472199953681
User 4859 improves AUC. Keeping the model.
Training on augumented user 1939 11/50 current_auc = 0.6968472199953681
User 1939 AUC after training: 0.696698020772095
User 1939 does not improve AUC. Reverting changes.
Training on augumented user 74421 12/50 current_auc = 0.6968472199953681
User 74421 AUC after training: 0.6968884167958243
User 74421 improves AUC. Keeping the model.
Training on augumented user 38044 13/50 current_auc = 0.6968884167958243
User 38044 AUC after training: 0.696985284948248
User 38044 improves AUC. Keeping the model.
Training on augumented user 103824 14/50 current_auc = 0.696985284948248
User 103824 AUC after training: 0.697014234051271
User 103824 improves AUC. Keeping the model.
Training on augumented user 79185 15/50 current_auc = 0.697014234051271
User 79185 AUC after training: 0.6970231414675859
User 79185 improves AUC. Keeping the model.
Training on augumented user 23862 16/50 current_auc = 0.6970231414675859
User 23862 AUC after training: 0.6970342757379795
User 23862 improves AUC. Keeping the model.
Training on augumented user 107240 17/50 current_auc = 0.6970342757379795
User 107240 AUC after training: 0.6971612064204656
User 107240 improves AUC. Keeping the model.
Training on augumented user 1093 18/50 current_auc = 0.6971612064204656
User 1093 AUC after training: 0.697196836085725
User 1093 improves AUC. Keeping the model.
Training on augumented user 80822 19/50 current_auc = 0.697196836085725
User 80822 AUC after training: 0.6972302388969056
User 80822 improves AUC. Keeping the model.
Training on augumented user 137480 20/50 current_auc = 0.6972302388969056
User 137480 AUC after training: 0.6972658685621649
User 137480 improves AUC. Keeping the model.
Training on augumented user 97441 21/50 current_auc = 0.6972658685621649
User 97441 AUC after training: 0.6971545258582296
User 97441 does not improve AUC. Reverting changes.
Training on augumented user 36558 22/50 current_auc = 0.6972658685621649
User 36558 AUC after training: 0.6969429747207525
User 36558 does not improve AUC. Reverting changes.
Training on augumented user 67044 23/50 current_auc = 0.6972658685621649
User 67044 AUC after training: 0.6972903639570307
User 67044 improves AUC. Keeping the model.
Training on augumented user 70866 24/50 current_auc = 0.6972903639570307
User 70866 AUC after training: 0.6973549427253132
User 70866 improves AUC. Keeping the model.
Training on augumented user 82112 25/50 current_auc = 0.6973549427253132
User 82112 AUC after training: 0.6972246717617088
User 82112 does not improve AUC. Reverting changes.
Training on augumented user 45733 26/50 current_auc = 0.6973549427253132
User 45733 AUC after training: 0.697250280583614
User 45733 does not improve AUC. Reverting changes.
Training on augumented user 54373 27/50 current_auc = 0.6973549427253132
User 54373 AUC after training: 0.6974005932339266
User 54373 improves AUC. Keeping the model.
Training on augumented user 128882 28/50 current_auc = 0.6974005932339266
User 128882 AUC after training: 0.6974685122833271
User 128882 improves AUC. Keeping the model.
Training on augumented user 35430 29/50 current_auc = 0.6974685122833271
User 35430 AUC after training: 0.6972280120428269
User 35430 does not improve AUC. Reverting changes.
Training on augumented user 129300 30/50 current_auc = 0.6974685122833271
User 129300 AUC after training: 0.697537544759767
User 129300 improves AUC. Keeping the model.
Training on augumented user 95810 31/50 current_auc = 0.697537544759767
User 95810 AUC after training: 0.6970743591113961
User 95810 does not improve AUC. Reverting changes.
Training on augumented user 41503 32/50 current_auc = 0.697537544759767
User 41503 AUC after training: 0.6974818734077994
User 41503 does not improve AUC. Reverting changes.
Training on augumented user 57770 33/50 current_auc = 0.697537544759767
User 57770 AUC after training: 0.6970342757379795
User 57770 does not improve AUC. Reverting changes.
Training on augumented user 51613 34/50 current_auc = 0.697537544759767
User 51613 AUC after training: 0.6972580745728894
User 51613 does not improve AUC. Reverting changes.
Training on augumented user 14847 35/50 current_auc = 0.697537544759767
User 14847 AUC after training: 0.6977312810646144
User 14847 improves AUC. Keeping the model.
Training on augumented user 31925 36/50 current_auc = 0.6977312810646144
User 31925 AUC after training: 0.6979651007428784
User 31925 improves AUC. Keeping the model.
Training on augumented user 82539 37/50 current_auc = 0.6979651007428784
User 82539 AUC after training: 0.6974885539700355
User 82539 does not improve AUC. Reverting changes.
Training on augumented user 15504 38/50 current_auc = 0.6979651007428784
User 15504 AUC after training: 0.6979272442235405
User 15504 does not improve AUC. Reverting changes.
Training on augumented user 128775 39/50 current_auc = 0.6979651007428784
User 128775 AUC after training: 0.6979873692836656
User 128775 improves AUC. Keeping the model.
Training on augumented user 66011 40/50 current_auc = 0.6979873692836656
User 66011 AUC after training: 0.6976043503821282
User 66011 does not improve AUC. Reverting changes.
Training on augumented user 89150 41/50 current_auc = 0.6979873692836656
User 89150 AUC after training: 0.6981098462579944
User 89150 improves AUC. Keeping the model.
Training on augumented user 96978 42/50 current_auc = 0.6981098462579944
User 96978 AUC after training: 0.6980319063652396
User 96978 does not improve AUC. Reverting changes.
Training on augumented user 40026 43/50 current_auc = 0.6981098462579944
User 40026 AUC after training: 0.6984327400994068
User 40026 improves AUC. Keeping the model.
Training on augumented user 63760 44/50 current_auc = 0.6984327400994068
User 63760 AUC after training: 0.698348119644416
User 63760 does not improve AUC. Reverting changes.
Training on augumented user 59581 45/50 current_auc = 0.6984327400994068
User 59581 AUC after training: 0.6986754671939858
User 59581 improves AUC. Keeping the model.
Training on augumented user 137752 46/50 current_auc = 0.6986754671939858
User 137752 AUC after training: 0.6988090784387081
User 137752 improves AUC. Keeping the model.
Training on augumented user 17771 47/50 current_auc = 0.6988090784387081
User 17771 AUC after training: 0.6987333654000321
User 17771 does not improve AUC. Reverting changes.
Training on augumented user 7658 48/50 current_auc = 0.6988090784387081
User 7658 AUC after training: 0.6985351753870271
User 7658 does not improve AUC. Reverting changes.
Training on augumented user 124390 49/50 current_auc = 0.6988090784387081
User 124390 AUC after training: 0.6988380275417313
User 124390 improves AUC. Keeping the model.
[2024-12-02 18:15:39.603109] start test user 97858 69/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:15:40.016416] start test user 97858 69/567 recall augumented users by random, augumented_users = [5120, 1550, 27343, 72170, 127100, 34569, 30485, 15781, 102702, 121019, 110898, 111465, 70672, 133420, 77492, 28883, 23832, 68652, 28203, 5989, 95761, 66557, 129079, 15937, 110576, 74667, 90854, 68438, 3444, 119396, 88034, 98021, 33447, 100055, 22228, 16928, 8860, 110347, 82619, 7771, 16325, 69162, 24744, 73747, 85290, 104015, 124151, 123028, 52520, 81311]
[2024-12-02 18:15:40.031687] user = 97858 Cloud 69/567
[2024-12-02 18:15:40.043074] user = 97858 Local 69/567
[2024-12-02 18:15:40.086452] user = 97858 Local+ 69/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:15:41.819324] user = 97858 MPDA- 69/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7414965986394557
Training on augumented user 5120 0/50 current_auc = 0.7414965986394557
User 5120 AUC after training: 0.7428571428571429
User 5120 improves AUC. Keeping the model.
Training on augumented user 1550 1/50 current_auc = 0.7428571428571429
User 1550 AUC after training: 0.7428571428571429
User 1550 does not improve AUC. Reverting changes.
Training on augumented user 27343 2/50 current_auc = 0.7428571428571429
User 27343 AUC after training: 0.7442176870748299
User 27343 improves AUC. Keeping the model.
Training on augumented user 72170 3/50 current_auc = 0.7442176870748299
User 72170 AUC after training: 0.7442176870748299
User 72170 does not improve AUC. Reverting changes.
Training on augumented user 127100 4/50 current_auc = 0.7442176870748299
User 127100 AUC after training: 0.7442176870748299
User 127100 does not improve AUC. Reverting changes.
Training on augumented user 34569 5/50 current_auc = 0.7442176870748299
User 34569 AUC after training: 0.7442176870748299
User 34569 does not improve AUC. Reverting changes.
Training on augumented user 30485 6/50 current_auc = 0.7442176870748299
User 30485 AUC after training: 0.7428571428571429
User 30485 does not improve AUC. Reverting changes.
Training on augumented user 15781 7/50 current_auc = 0.7442176870748299
User 15781 AUC after training: 0.7496598639455783
User 15781 improves AUC. Keeping the model.
Training on augumented user 102702 8/50 current_auc = 0.7496598639455783
User 102702 AUC after training: 0.7482993197278911
User 102702 does not improve AUC. Reverting changes.
Training on augumented user 121019 9/50 current_auc = 0.7496598639455783
User 121019 AUC after training: 0.7482993197278911
User 121019 does not improve AUC. Reverting changes.
Training on augumented user 110898 10/50 current_auc = 0.7496598639455783
User 110898 AUC after training: 0.7496598639455783
User 110898 does not improve AUC. Reverting changes.
Training on augumented user 111465 11/50 current_auc = 0.7496598639455783
User 111465 AUC after training: 0.7496598639455783
User 111465 does not improve AUC. Reverting changes.
Training on augumented user 70672 12/50 current_auc = 0.7496598639455783
User 70672 AUC after training: 0.7496598639455783
User 70672 does not improve AUC. Reverting changes.
Training on augumented user 133420 13/50 current_auc = 0.7496598639455783
User 133420 AUC after training: 0.7496598639455783
User 133420 does not improve AUC. Reverting changes.
Training on augumented user 77492 14/50 current_auc = 0.7496598639455783
User 77492 AUC after training: 0.7496598639455783
User 77492 does not improve AUC. Reverting changes.
Training on augumented user 28883 15/50 current_auc = 0.7496598639455783
User 28883 AUC after training: 0.7496598639455783
User 28883 does not improve AUC. Reverting changes.
Training on augumented user 23832 16/50 current_auc = 0.7496598639455783
User 23832 AUC after training: 0.7523809523809524
User 23832 improves AUC. Keeping the model.
Training on augumented user 68652 17/50 current_auc = 0.7523809523809524
User 68652 AUC after training: 0.7523809523809524
User 68652 does not improve AUC. Reverting changes.
Training on augumented user 28203 18/50 current_auc = 0.7523809523809524
User 28203 AUC after training: 0.7523809523809524
User 28203 does not improve AUC. Reverting changes.
Training on augumented user 5989 19/50 current_auc = 0.7523809523809524
User 5989 AUC after training: 0.7523809523809524
User 5989 does not improve AUC. Reverting changes.
Training on augumented user 95761 20/50 current_auc = 0.7523809523809524
User 95761 AUC after training: 0.7523809523809524
User 95761 does not improve AUC. Reverting changes.
Training on augumented user 66557 21/50 current_auc = 0.7523809523809524
User 66557 AUC after training: 0.7523809523809524
User 66557 does not improve AUC. Reverting changes.
Training on augumented user 129079 22/50 current_auc = 0.7523809523809524
User 129079 AUC after training: 0.7523809523809524
User 129079 does not improve AUC. Reverting changes.
Training on augumented user 15937 23/50 current_auc = 0.7523809523809524
User 15937 AUC after training: 0.7523809523809524
User 15937 does not improve AUC. Reverting changes.
Training on augumented user 110576 24/50 current_auc = 0.7523809523809524
User 110576 AUC after training: 0.7523809523809524
User 110576 does not improve AUC. Reverting changes.
Training on augumented user 74667 25/50 current_auc = 0.7523809523809524
User 74667 AUC after training: 0.7523809523809524
User 74667 does not improve AUC. Reverting changes.
Training on augumented user 90854 26/50 current_auc = 0.7523809523809524
User 90854 AUC after training: 0.7523809523809524
User 90854 does not improve AUC. Reverting changes.
Training on augumented user 68438 27/50 current_auc = 0.7523809523809524
User 68438 AUC after training: 0.7523809523809524
User 68438 does not improve AUC. Reverting changes.
Training on augumented user 3444 28/50 current_auc = 0.7523809523809524
User 3444 AUC after training: 0.7523809523809524
User 3444 does not improve AUC. Reverting changes.
Training on augumented user 119396 29/50 current_auc = 0.7523809523809524
User 119396 AUC after training: 0.7523809523809524
User 119396 does not improve AUC. Reverting changes.
Training on augumented user 88034 30/50 current_auc = 0.7523809523809524
User 88034 AUC after training: 0.7523809523809524
User 88034 does not improve AUC. Reverting changes.
Training on augumented user 98021 31/50 current_auc = 0.7523809523809524
User 98021 AUC after training: 0.7523809523809524
User 98021 does not improve AUC. Reverting changes.
Training on augumented user 33447 32/50 current_auc = 0.7523809523809524
User 33447 AUC after training: 0.7523809523809524
User 33447 does not improve AUC. Reverting changes.
Training on augumented user 100055 33/50 current_auc = 0.7523809523809524
User 100055 AUC after training: 0.7523809523809524
User 100055 does not improve AUC. Reverting changes.
Training on augumented user 22228 34/50 current_auc = 0.7523809523809524
User 22228 AUC after training: 0.7523809523809524
User 22228 does not improve AUC. Reverting changes.
Training on augumented user 16928 35/50 current_auc = 0.7523809523809524
User 16928 AUC after training: 0.7523809523809524
User 16928 does not improve AUC. Reverting changes.
Training on augumented user 8860 36/50 current_auc = 0.7523809523809524
User 8860 AUC after training: 0.7523809523809524
User 8860 does not improve AUC. Reverting changes.
Training on augumented user 110347 37/50 current_auc = 0.7523809523809524
User 110347 AUC after training: 0.7523809523809524
User 110347 does not improve AUC. Reverting changes.
Training on augumented user 82619 38/50 current_auc = 0.7523809523809524
User 82619 AUC after training: 0.7523809523809524
User 82619 does not improve AUC. Reverting changes.
Training on augumented user 7771 39/50 current_auc = 0.7523809523809524
User 7771 AUC after training: 0.7530612244897958
User 7771 improves AUC. Keeping the model.
Training on augumented user 16325 40/50 current_auc = 0.7530612244897958
User 16325 AUC after training: 0.7537414965986395
User 16325 improves AUC. Keeping the model.
Training on augumented user 69162 41/50 current_auc = 0.7537414965986395
User 69162 AUC after training: 0.7537414965986395
User 69162 does not improve AUC. Reverting changes.
Training on augumented user 24744 42/50 current_auc = 0.7537414965986395
User 24744 AUC after training: 0.7537414965986395
User 24744 does not improve AUC. Reverting changes.
Training on augumented user 73747 43/50 current_auc = 0.7537414965986395
User 73747 AUC after training: 0.7537414965986395
User 73747 does not improve AUC. Reverting changes.
Training on augumented user 85290 44/50 current_auc = 0.7537414965986395
User 85290 AUC after training: 0.7537414965986395
User 85290 does not improve AUC. Reverting changes.
Training on augumented user 104015 45/50 current_auc = 0.7537414965986395
User 104015 AUC after training: 0.7537414965986395
User 104015 does not improve AUC. Reverting changes.
Training on augumented user 124151 46/50 current_auc = 0.7537414965986395
User 124151 AUC after training: 0.7537414965986395
User 124151 does not improve AUC. Reverting changes.
Training on augumented user 123028 47/50 current_auc = 0.7537414965986395
User 123028 AUC after training: 0.7530612244897958
User 123028 does not improve AUC. Reverting changes.
Training on augumented user 52520 48/50 current_auc = 0.7537414965986395
User 52520 AUC after training: 0.7496598639455783
User 52520 does not improve AUC. Reverting changes.
Training on augumented user 81311 49/50 current_auc = 0.7537414965986395
User 81311 AUC after training: 0.7537414965986395
User 81311 does not improve AUC. Reverting changes.
[2024-12-02 18:16:10.920431] start test user 97868 70/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:16:11.355621] start test user 97868 70/567 recall augumented users by random, augumented_users = [109232, 114872, 29006, 89971, 46369, 34382, 23413, 127766, 32165, 121220, 15627, 44965, 72351, 44935, 93684, 54648, 32131, 69863, 87256, 60913, 105760, 131370, 5332, 113158, 42214, 123166, 53061, 83678, 33507, 1037, 102844, 138453, 80823, 23113, 3066, 84587, 99964, 114984, 94128, 85194, 78989, 97913, 73859, 124293, 52016, 61410, 35128, 138158, 34564, 58279]
[2024-12-02 18:16:11.372199] user = 97868 Cloud 70/567
[2024-12-02 18:16:11.381782] user = 97868 Local 70/567
[2024-12-02 18:16:11.450919] user = 97868 Local+ 70/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:16:14.043327] user = 97868 MPDA- 70/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6000000000000001
Training on augumented user 109232 0/50 current_auc = 0.6000000000000001
User 109232 AUC after training: 0.6000000000000001
User 109232 does not improve AUC. Reverting changes.
Training on augumented user 114872 1/50 current_auc = 0.6000000000000001
User 114872 AUC after training: 0.6000000000000001
User 114872 does not improve AUC. Reverting changes.
Training on augumented user 29006 2/50 current_auc = 0.6000000000000001
User 29006 AUC after training: 0.6000000000000001
User 29006 does not improve AUC. Reverting changes.
Training on augumented user 89971 3/50 current_auc = 0.6000000000000001
User 89971 AUC after training: 0.6000000000000001
User 89971 does not improve AUC. Reverting changes.
Training on augumented user 46369 4/50 current_auc = 0.6000000000000001
User 46369 AUC after training: 0.6000000000000001
User 46369 does not improve AUC. Reverting changes.
Training on augumented user 34382 5/50 current_auc = 0.6000000000000001
User 34382 AUC after training: 0.62
User 34382 improves AUC. Keeping the model.
Training on augumented user 23413 6/50 current_auc = 0.62
User 23413 AUC after training: 0.62
User 23413 does not improve AUC. Reverting changes.
Training on augumented user 127766 7/50 current_auc = 0.62
User 127766 AUC after training: 0.62
User 127766 does not improve AUC. Reverting changes.
Training on augumented user 32165 8/50 current_auc = 0.62
User 32165 AUC after training: 0.62
User 32165 does not improve AUC. Reverting changes.
Training on augumented user 121220 9/50 current_auc = 0.62
User 121220 AUC after training: 0.6000000000000001
User 121220 does not improve AUC. Reverting changes.
Training on augumented user 15627 10/50 current_auc = 0.62
User 15627 AUC after training: 0.6000000000000001
User 15627 does not improve AUC. Reverting changes.
Training on augumented user 44965 11/50 current_auc = 0.62
User 44965 AUC after training: 0.62
User 44965 does not improve AUC. Reverting changes.
Training on augumented user 72351 12/50 current_auc = 0.62
User 72351 AUC after training: 0.6000000000000001
User 72351 does not improve AUC. Reverting changes.
Training on augumented user 44935 13/50 current_auc = 0.62
User 44935 AUC after training: 0.62
User 44935 does not improve AUC. Reverting changes.
Training on augumented user 93684 14/50 current_auc = 0.62
User 93684 AUC after training: 0.6000000000000001
User 93684 does not improve AUC. Reverting changes.
Training on augumented user 54648 15/50 current_auc = 0.62
User 54648 AUC after training: 0.62
User 54648 does not improve AUC. Reverting changes.
Training on augumented user 32131 16/50 current_auc = 0.62
User 32131 AUC after training: 0.62
User 32131 does not improve AUC. Reverting changes.
Training on augumented user 69863 17/50 current_auc = 0.62
User 69863 AUC after training: 0.6000000000000001
User 69863 does not improve AUC. Reverting changes.
Training on augumented user 87256 18/50 current_auc = 0.62
User 87256 AUC after training: 0.6000000000000001
User 87256 does not improve AUC. Reverting changes.
Training on augumented user 60913 19/50 current_auc = 0.62
User 60913 AUC after training: 0.6000000000000001
User 60913 does not improve AUC. Reverting changes.
Training on augumented user 105760 20/50 current_auc = 0.62
User 105760 AUC after training: 0.6000000000000001
User 105760 does not improve AUC. Reverting changes.
Training on augumented user 131370 21/50 current_auc = 0.62
User 131370 AUC after training: 0.6000000000000001
User 131370 does not improve AUC. Reverting changes.
Training on augumented user 5332 22/50 current_auc = 0.62
User 5332 AUC after training: 0.62
User 5332 does not improve AUC. Reverting changes.
Training on augumented user 113158 23/50 current_auc = 0.62
User 113158 AUC after training: 0.62
User 113158 does not improve AUC. Reverting changes.
Training on augumented user 42214 24/50 current_auc = 0.62
User 42214 AUC after training: 0.6000000000000001
User 42214 does not improve AUC. Reverting changes.
Training on augumented user 123166 25/50 current_auc = 0.62
User 123166 AUC after training: 0.62
User 123166 does not improve AUC. Reverting changes.
Training on augumented user 53061 26/50 current_auc = 0.62
User 53061 AUC after training: 0.6000000000000001
User 53061 does not improve AUC. Reverting changes.
Training on augumented user 83678 27/50 current_auc = 0.62
User 83678 AUC after training: 0.62
User 83678 does not improve AUC. Reverting changes.
Training on augumented user 33507 28/50 current_auc = 0.62
User 33507 AUC after training: 0.6000000000000001
User 33507 does not improve AUC. Reverting changes.
Training on augumented user 1037 29/50 current_auc = 0.62
User 1037 AUC after training: 0.6000000000000001
User 1037 does not improve AUC. Reverting changes.
Training on augumented user 102844 30/50 current_auc = 0.62
User 102844 AUC after training: 0.62
User 102844 does not improve AUC. Reverting changes.
Training on augumented user 138453 31/50 current_auc = 0.62
User 138453 AUC after training: 0.6000000000000001
User 138453 does not improve AUC. Reverting changes.
Training on augumented user 80823 32/50 current_auc = 0.62
User 80823 AUC after training: 0.6000000000000001
User 80823 does not improve AUC. Reverting changes.
Training on augumented user 23113 33/50 current_auc = 0.62
User 23113 AUC after training: 0.62
User 23113 does not improve AUC. Reverting changes.
Training on augumented user 3066 34/50 current_auc = 0.62
User 3066 AUC after training: 0.6000000000000001
User 3066 does not improve AUC. Reverting changes.
Training on augumented user 84587 35/50 current_auc = 0.62
User 84587 AUC after training: 0.6000000000000001
User 84587 does not improve AUC. Reverting changes.
Training on augumented user 99964 36/50 current_auc = 0.62
User 99964 AUC after training: 0.6000000000000001
User 99964 does not improve AUC. Reverting changes.
Training on augumented user 114984 37/50 current_auc = 0.62
User 114984 AUC after training: 0.6000000000000001
User 114984 does not improve AUC. Reverting changes.
Training on augumented user 94128 38/50 current_auc = 0.62
User 94128 AUC after training: 0.6000000000000001
User 94128 does not improve AUC. Reverting changes.
Training on augumented user 85194 39/50 current_auc = 0.62
User 85194 AUC after training: 0.6000000000000001
User 85194 does not improve AUC. Reverting changes.
Training on augumented user 78989 40/50 current_auc = 0.62
User 78989 AUC after training: 0.6000000000000001
User 78989 does not improve AUC. Reverting changes.
Training on augumented user 97913 41/50 current_auc = 0.62
User 97913 AUC after training: 0.6000000000000001
User 97913 does not improve AUC. Reverting changes.
Training on augumented user 73859 42/50 current_auc = 0.62
User 73859 AUC after training: 0.62
User 73859 does not improve AUC. Reverting changes.
Training on augumented user 124293 43/50 current_auc = 0.62
User 124293 AUC after training: 0.62
User 124293 does not improve AUC. Reverting changes.
Training on augumented user 52016 44/50 current_auc = 0.62
User 52016 AUC after training: 0.6000000000000001
User 52016 does not improve AUC. Reverting changes.
Training on augumented user 61410 45/50 current_auc = 0.62
User 61410 AUC after training: 0.6000000000000001
User 61410 does not improve AUC. Reverting changes.
Training on augumented user 35128 46/50 current_auc = 0.62
User 35128 AUC after training: 0.6000000000000001
User 35128 does not improve AUC. Reverting changes.
Training on augumented user 138158 47/50 current_auc = 0.62
User 138158 AUC after training: 0.6000000000000001
User 138158 does not improve AUC. Reverting changes.
Training on augumented user 34564 48/50 current_auc = 0.62
User 34564 AUC after training: 0.6000000000000001
User 34564 does not improve AUC. Reverting changes.
Training on augumented user 58279 49/50 current_auc = 0.62
User 58279 AUC after training: 0.62
User 58279 does not improve AUC. Reverting changes.
[2024-12-02 18:16:44.309553] start test user 97880 71/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:16:44.937088] start test user 97880 71/567 recall augumented users by random, augumented_users = [5235, 14005, 126145, 30722, 102928, 105319, 43987, 98110, 54010, 59436, 39936, 103616, 133215, 78910, 16707, 32092, 33468, 111832, 75373, 65379, 62947, 134480, 66248, 58050, 118387, 105984, 24039, 129437, 77588, 138029, 28751, 119618, 121512, 49495, 94725, 38649, 102016, 116864, 118084, 311, 41918, 108468, 46116, 96016, 27115, 16287, 43963, 111728, 98814, 29218]
[2024-12-02 18:16:44.972902] user = 97880 Cloud 71/567
[2024-12-02 18:16:44.990004] user = 97880 Local 71/567
[2024-12-02 18:16:45.100662] user = 97880 Local+ 71/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:16:47.953404] user = 97880 MPDA- 71/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5714285714285715
Training on augumented user 5235 0/50 current_auc = 0.5714285714285715
User 5235 AUC after training: 0.5714285714285715
User 5235 does not improve AUC. Reverting changes.
Training on augumented user 14005 1/50 current_auc = 0.5714285714285715
User 14005 AUC after training: 0.5714285714285715
User 14005 does not improve AUC. Reverting changes.
Training on augumented user 126145 2/50 current_auc = 0.5714285714285715
User 126145 AUC after training: 0.5714285714285715
User 126145 does not improve AUC. Reverting changes.
Training on augumented user 30722 3/50 current_auc = 0.5714285714285715
User 30722 AUC after training: 0.5714285714285715
User 30722 does not improve AUC. Reverting changes.
Training on augumented user 102928 4/50 current_auc = 0.5714285714285715
User 102928 AUC after training: 0.5714285714285715
User 102928 does not improve AUC. Reverting changes.
Training on augumented user 105319 5/50 current_auc = 0.5714285714285715
User 105319 AUC after training: 0.5714285714285715
User 105319 does not improve AUC. Reverting changes.
Training on augumented user 43987 6/50 current_auc = 0.5714285714285715
User 43987 AUC after training: 0.5714285714285715
User 43987 does not improve AUC. Reverting changes.
Training on augumented user 98110 7/50 current_auc = 0.5714285714285715
User 98110 AUC after training: 0.5714285714285715
User 98110 does not improve AUC. Reverting changes.
Training on augumented user 54010 8/50 current_auc = 0.5714285714285715
User 54010 AUC after training: 0.5714285714285715
User 54010 does not improve AUC. Reverting changes.
Training on augumented user 59436 9/50 current_auc = 0.5714285714285715
User 59436 AUC after training: 0.5714285714285715
User 59436 does not improve AUC. Reverting changes.
Training on augumented user 39936 10/50 current_auc = 0.5714285714285715
User 39936 AUC after training: 0.5714285714285715
User 39936 does not improve AUC. Reverting changes.
Training on augumented user 103616 11/50 current_auc = 0.5714285714285715
User 103616 AUC after training: 0.5476190476190477
User 103616 does not improve AUC. Reverting changes.
Training on augumented user 133215 12/50 current_auc = 0.5714285714285715
User 133215 AUC after training: 0.5476190476190477
User 133215 does not improve AUC. Reverting changes.
Training on augumented user 78910 13/50 current_auc = 0.5714285714285715
User 78910 AUC after training: 0.5714285714285715
User 78910 does not improve AUC. Reverting changes.
Training on augumented user 16707 14/50 current_auc = 0.5714285714285715
User 16707 AUC after training: 0.5714285714285715
User 16707 does not improve AUC. Reverting changes.
Training on augumented user 32092 15/50 current_auc = 0.5714285714285715
User 32092 AUC after training: 0.5714285714285715
User 32092 does not improve AUC. Reverting changes.
Training on augumented user 33468 16/50 current_auc = 0.5714285714285715
User 33468 AUC after training: 0.5238095238095238
User 33468 does not improve AUC. Reverting changes.
Training on augumented user 111832 17/50 current_auc = 0.5714285714285715
User 111832 AUC after training: 0.5714285714285715
User 111832 does not improve AUC. Reverting changes.
Training on augumented user 75373 18/50 current_auc = 0.5714285714285715
User 75373 AUC after training: 0.5476190476190477
User 75373 does not improve AUC. Reverting changes.
Training on augumented user 65379 19/50 current_auc = 0.5714285714285715
User 65379 AUC after training: 0.5714285714285715
User 65379 does not improve AUC. Reverting changes.
Training on augumented user 62947 20/50 current_auc = 0.5714285714285715
User 62947 AUC after training: 0.5714285714285715
User 62947 does not improve AUC. Reverting changes.
Training on augumented user 134480 21/50 current_auc = 0.5714285714285715
User 134480 AUC after training: 0.5714285714285715
User 134480 does not improve AUC. Reverting changes.
Training on augumented user 66248 22/50 current_auc = 0.5714285714285715
User 66248 AUC after training: 0.5714285714285715
User 66248 does not improve AUC. Reverting changes.
Training on augumented user 58050 23/50 current_auc = 0.5714285714285715
User 58050 AUC after training: 0.5714285714285715
User 58050 does not improve AUC. Reverting changes.
Training on augumented user 118387 24/50 current_auc = 0.5714285714285715
User 118387 AUC after training: 0.5714285714285715
User 118387 does not improve AUC. Reverting changes.
Training on augumented user 105984 25/50 current_auc = 0.5714285714285715
User 105984 AUC after training: 0.5714285714285715
User 105984 does not improve AUC. Reverting changes.
Training on augumented user 24039 26/50 current_auc = 0.5714285714285715
User 24039 AUC after training: 0.5476190476190477
User 24039 does not improve AUC. Reverting changes.
Training on augumented user 129437 27/50 current_auc = 0.5714285714285715
User 129437 AUC after training: 0.5714285714285715
User 129437 does not improve AUC. Reverting changes.
Training on augumented user 77588 28/50 current_auc = 0.5714285714285715
User 77588 AUC after training: 0.5714285714285715
User 77588 does not improve AUC. Reverting changes.
Training on augumented user 138029 29/50 current_auc = 0.5714285714285715
User 138029 AUC after training: 0.5714285714285715
User 138029 does not improve AUC. Reverting changes.
Training on augumented user 28751 30/50 current_auc = 0.5714285714285715
User 28751 AUC after training: 0.5714285714285715
User 28751 does not improve AUC. Reverting changes.
Training on augumented user 119618 31/50 current_auc = 0.5714285714285715
User 119618 AUC after training: 0.5476190476190477
User 119618 does not improve AUC. Reverting changes.
Training on augumented user 121512 32/50 current_auc = 0.5714285714285715
User 121512 AUC after training: 0.5476190476190477
User 121512 does not improve AUC. Reverting changes.
Training on augumented user 49495 33/50 current_auc = 0.5714285714285715
User 49495 AUC after training: 0.5714285714285715
User 49495 does not improve AUC. Reverting changes.
Training on augumented user 94725 34/50 current_auc = 0.5714285714285715
User 94725 AUC after training: 0.5714285714285715
User 94725 does not improve AUC. Reverting changes.
Training on augumented user 38649 35/50 current_auc = 0.5714285714285715
User 38649 AUC after training: 0.5714285714285715
User 38649 does not improve AUC. Reverting changes.
Training on augumented user 102016 36/50 current_auc = 0.5714285714285715
User 102016 AUC after training: 0.5714285714285715
User 102016 does not improve AUC. Reverting changes.
Training on augumented user 116864 37/50 current_auc = 0.5714285714285715
User 116864 AUC after training: 0.5238095238095238
User 116864 does not improve AUC. Reverting changes.
Training on augumented user 118084 38/50 current_auc = 0.5714285714285715
User 118084 AUC after training: 0.5714285714285715
User 118084 does not improve AUC. Reverting changes.
Training on augumented user 311 39/50 current_auc = 0.5714285714285715
User 311 AUC after training: 0.5714285714285715
User 311 does not improve AUC. Reverting changes.
Training on augumented user 41918 40/50 current_auc = 0.5714285714285715
User 41918 AUC after training: 0.5714285714285715
User 41918 does not improve AUC. Reverting changes.
Training on augumented user 108468 41/50 current_auc = 0.5714285714285715
User 108468 AUC after training: 0.5476190476190477
User 108468 does not improve AUC. Reverting changes.
Training on augumented user 46116 42/50 current_auc = 0.5714285714285715
User 46116 AUC after training: 0.5714285714285715
User 46116 does not improve AUC. Reverting changes.
Training on augumented user 96016 43/50 current_auc = 0.5714285714285715
User 96016 AUC after training: 0.5714285714285715
User 96016 does not improve AUC. Reverting changes.
Training on augumented user 27115 44/50 current_auc = 0.5714285714285715
User 27115 AUC after training: 0.5714285714285715
User 27115 does not improve AUC. Reverting changes.
Training on augumented user 16287 45/50 current_auc = 0.5714285714285715
User 16287 AUC after training: 0.5714285714285715
User 16287 does not improve AUC. Reverting changes.
Training on augumented user 43963 46/50 current_auc = 0.5714285714285715
User 43963 AUC after training: 0.5714285714285715
User 43963 does not improve AUC. Reverting changes.
Training on augumented user 111728 47/50 current_auc = 0.5714285714285715
User 111728 AUC after training: 0.5714285714285715
User 111728 does not improve AUC. Reverting changes.
Training on augumented user 98814 48/50 current_auc = 0.5714285714285715
User 98814 AUC after training: 0.5714285714285715
User 98814 does not improve AUC. Reverting changes.
Training on augumented user 29218 49/50 current_auc = 0.5714285714285715
User 29218 AUC after training: 0.5714285714285715
User 29218 does not improve AUC. Reverting changes.
[2024-12-02 18:17:21.534937] start test user 97881 72/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:17:22.200567] start test user 97881 72/567 recall augumented users by random, augumented_users = [81195, 69067, 114854, 103427, 19595, 61247, 98888, 40214, 104005, 56214, 82902, 79488, 6013, 125441, 93371, 38007, 65931, 38393, 56297, 79096, 79966, 114987, 95636, 28863, 107034, 46336, 65696, 19231, 77009, 101756, 73000, 124222, 41103, 116342, 44381, 69965, 110599, 34407, 86450, 39522, 135281, 15081, 131646, 77883, 136216, 52255, 13206, 120540, 1501, 2926]
[2024-12-02 18:17:22.229594] user = 97881 Cloud 72/567
[2024-12-02 18:17:22.331026] user = 97881 Local 72/567
[2024-12-02 18:17:22.401026] user = 97881 Local+ 72/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:17:24.266782] user = 97881 MPDA- 72/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6011099332792916
Training on augumented user 81195 0/50 current_auc = 0.6011099332792916
User 81195 AUC after training: 0.6007357984660472
User 81195 does not improve AUC. Reverting changes.
Training on augumented user 69067 1/50 current_auc = 0.6011099332792916
User 69067 AUC after training: 0.6016087796969508
User 69067 improves AUC. Keeping the model.
Training on augumented user 114854 2/50 current_auc = 0.6016087796969508
User 114854 AUC after training: 0.6004863752572176
User 114854 does not improve AUC. Reverting changes.
Training on augumented user 103427 3/50 current_auc = 0.6016087796969508
User 103427 AUC after training: 0.6014217122903286
User 103427 does not improve AUC. Reverting changes.
Training on augumented user 19595 4/50 current_auc = 0.6016087796969508
User 19595 AUC after training: 0.6013281785870176
User 19595 does not improve AUC. Reverting changes.
Training on augumented user 61247 5/50 current_auc = 0.6016087796969508
User 61247 AUC after training: 0.6021388040157136
User 61247 improves AUC. Keeping the model.
Training on augumented user 98888 6/50 current_auc = 0.6021388040157136
User 98888 AUC after training: 0.6027935399388913
User 98888 improves AUC. Keeping the model.
Training on augumented user 40214 7/50 current_auc = 0.6027935399388913
User 40214 AUC after training: 0.6029806073455135
User 40214 improves AUC. Keeping the model.
Training on augumented user 104005 8/50 current_auc = 0.6029806073455135
User 104005 AUC after training: 0.6025441167300617
User 104005 does not improve AUC. Reverting changes.
Training on augumented user 56214 9/50 current_auc = 0.6029806073455135
User 56214 AUC after training: 0.6022323377190247
User 56214 does not improve AUC. Reverting changes.
Training on augumented user 82902 10/50 current_auc = 0.6029806073455135
User 82902 AUC after training: 0.602731184136684
User 82902 does not improve AUC. Reverting changes.
Training on augumented user 79488 11/50 current_auc = 0.6029806073455135
User 79488 AUC after training: 0.6033547421587578
User 79488 improves AUC. Keeping the model.
Training on augumented user 6013 12/50 current_auc = 0.6033547421587578
User 6013 AUC after training: 0.6029806073455134
User 6013 does not improve AUC. Reverting changes.
Training on augumented user 125441 13/50 current_auc = 0.6033547421587578
User 125441 AUC after training: 0.6032300305543431
User 125441 does not improve AUC. Reverting changes.
Training on augumented user 93371 14/50 current_auc = 0.6033547421587578
User 93371 AUC after training: 0.6029182515433061
User 93371 does not improve AUC. Reverting changes.
Training on augumented user 38007 15/50 current_auc = 0.6033547421587578
User 38007 AUC after training: 0.6033547421587578
User 38007 does not improve AUC. Reverting changes.
Training on augumented user 65931 16/50 current_auc = 0.6033547421587578
User 65931 AUC after training: 0.6034170979609652
User 65931 improves AUC. Keeping the model.
Training on augumented user 38393 17/50 current_auc = 0.6034170979609652
User 38393 AUC after training: 0.6032923863565505
User 38393 does not improve AUC. Reverting changes.
Training on augumented user 56297 18/50 current_auc = 0.6034170979609652
User 56297 AUC after training: 0.6030429631477209
User 56297 does not improve AUC. Reverting changes.
Training on augumented user 79096 19/50 current_auc = 0.6034170979609652
User 79096 AUC after training: 0.6030429631477209
User 79096 does not improve AUC. Reverting changes.
Training on augumented user 79966 20/50 current_auc = 0.6034170979609652
User 79966 AUC after training: 0.6023258714223358
User 79966 does not improve AUC. Reverting changes.
Training on augumented user 114987 21/50 current_auc = 0.6034170979609652
User 114987 AUC after training: 0.6030429631477208
User 114987 does not improve AUC. Reverting changes.
Training on augumented user 95636 22/50 current_auc = 0.6034170979609652
User 95636 AUC after training: 0.6032923863565505
User 95636 does not improve AUC. Reverting changes.
Training on augumented user 28863 23/50 current_auc = 0.6034170979609652
User 28863 AUC after training: 0.6032923863565504
User 28863 does not improve AUC. Reverting changes.
Training on augumented user 107034 24/50 current_auc = 0.6034170979609652
User 107034 AUC after training: 0.6030429631477208
User 107034 does not improve AUC. Reverting changes.
Training on augumented user 46336 25/50 current_auc = 0.6034170979609652
User 46336 AUC after training: 0.603853588576417
User 46336 improves AUC. Keeping the model.
Training on augumented user 65696 26/50 current_auc = 0.603853588576417
User 65696 AUC after training: 0.603853588576417
User 65696 does not improve AUC. Reverting changes.
Training on augumented user 19231 27/50 current_auc = 0.603853588576417
User 19231 AUC after training: 0.6026688283344764
User 19231 does not improve AUC. Reverting changes.
Training on augumented user 77009 28/50 current_auc = 0.603853588576417
User 77009 AUC after training: 0.6032923863565505
User 77009 does not improve AUC. Reverting changes.
Training on augumented user 101756 29/50 current_auc = 0.603853588576417
User 101756 AUC after training: 0.6032300305543431
User 101756 does not improve AUC. Reverting changes.
Training on augumented user 73000 30/50 current_auc = 0.603853588576417
User 73000 AUC after training: 0.6032923863565504
User 73000 does not improve AUC. Reverting changes.
Training on augumented user 124222 31/50 current_auc = 0.603853588576417
User 124222 AUC after training: 0.603853588576417
User 124222 does not improve AUC. Reverting changes.
Training on augumented user 41103 32/50 current_auc = 0.603853588576417
User 41103 AUC after training: 0.6034794537631727
User 41103 does not improve AUC. Reverting changes.
Training on augumented user 116342 33/50 current_auc = 0.603853588576417
User 116342 AUC after training: 0.6016399575980544
User 116342 does not improve AUC. Reverting changes.
Training on augumented user 44381 34/50 current_auc = 0.603853588576417
User 44381 AUC after training: 0.603354742158758
User 44381 does not improve AUC. Reverting changes.
Training on augumented user 69965 35/50 current_auc = 0.603853588576417
User 69965 AUC after training: 0.6035418095653801
User 69965 does not improve AUC. Reverting changes.
Training on augumented user 110599 36/50 current_auc = 0.603853588576417
User 110599 AUC after training: 0.6034170979609652
User 110599 does not improve AUC. Reverting changes.
Training on augumented user 34407 37/50 current_auc = 0.603853588576417
User 34407 AUC after training: 0.6033547421587578
User 34407 does not improve AUC. Reverting changes.
Training on augumented user 86450 38/50 current_auc = 0.603853588576417
User 86450 AUC after training: 0.6037288769720022
User 86450 does not improve AUC. Reverting changes.
Training on augumented user 39522 39/50 current_auc = 0.603853588576417
User 39522 AUC after training: 0.6036041653675874
User 39522 does not improve AUC. Reverting changes.
Training on augumented user 135281 40/50 current_auc = 0.603853588576417
User 135281 AUC after training: 0.6035418095653801
User 135281 does not improve AUC. Reverting changes.
Training on augumented user 15081 41/50 current_auc = 0.603853588576417
User 15081 AUC after training: 0.6031676747521356
User 15081 does not improve AUC. Reverting changes.
Training on augumented user 131646 42/50 current_auc = 0.603853588576417
User 131646 AUC after training: 0.6022635156201284
User 131646 does not improve AUC. Reverting changes.
Training on augumented user 77883 43/50 current_auc = 0.603853588576417
User 77883 AUC after training: 0.6034170979609652
User 77883 does not improve AUC. Reverting changes.
Training on augumented user 136216 44/50 current_auc = 0.603853588576417
User 136216 AUC after training: 0.6032923863565504
User 136216 does not improve AUC. Reverting changes.
Training on augumented user 52255 45/50 current_auc = 0.603853588576417
User 52255 AUC after training: 0.6032923863565505
User 52255 does not improve AUC. Reverting changes.
Training on augumented user 13206 46/50 current_auc = 0.603853588576417
User 13206 AUC after training: 0.6035418095653801
User 13206 does not improve AUC. Reverting changes.
Training on augumented user 120540 47/50 current_auc = 0.603853588576417
User 120540 AUC after training: 0.6039159443786244
User 120540 improves AUC. Keeping the model.
Training on augumented user 1501 48/50 current_auc = 0.6039159443786244
User 1501 AUC after training: 0.6033547421587578
User 1501 does not improve AUC. Reverting changes.
Training on augumented user 2926 49/50 current_auc = 0.6039159443786244
User 2926 AUC after training: 0.6034794537631727
User 2926 does not improve AUC. Reverting changes.
[2024-12-02 18:17:55.565646] start test user 97935 73/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:17:56.244934] start test user 97935 73/567 recall augumented users by random, augumented_users = [118366, 34674, 31877, 127198, 40731, 76437, 28119, 126341, 38939, 49737, 61646, 130532, 51072, 92838, 108950, 83875, 73104, 10213, 129400, 48169, 59773, 109587, 34040, 995, 19429, 9563, 39527, 64877, 94264, 95465, 102611, 24208, 69629, 23050, 108674, 15975, 55083, 4645, 106379, 18336, 123180, 88606, 3487, 40595, 85298, 55592, 42119, 136317, 87404, 65595]
[2024-12-02 18:17:56.262117] user = 97935 Cloud 73/567
[2024-12-02 18:17:56.273899] user = 97935 Local 73/567
[2024-12-02 18:17:56.341796] user = 97935 Local+ 73/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:17:59.223727] user = 97935 MPDA- 73/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 1.0
Training on augumented user 118366 0/50 current_auc = 1.0
User 118366 AUC after training: 1.0
User 118366 does not improve AUC. Reverting changes.
Training on augumented user 34674 1/50 current_auc = 1.0
User 34674 AUC after training: 1.0
User 34674 does not improve AUC. Reverting changes.
Training on augumented user 31877 2/50 current_auc = 1.0
User 31877 AUC after training: 1.0
User 31877 does not improve AUC. Reverting changes.
Training on augumented user 127198 3/50 current_auc = 1.0
User 127198 AUC after training: 1.0
User 127198 does not improve AUC. Reverting changes.
Training on augumented user 40731 4/50 current_auc = 1.0
User 40731 AUC after training: 1.0
User 40731 does not improve AUC. Reverting changes.
Training on augumented user 76437 5/50 current_auc = 1.0
User 76437 AUC after training: 1.0
User 76437 does not improve AUC. Reverting changes.
Training on augumented user 28119 6/50 current_auc = 1.0
User 28119 AUC after training: 1.0
User 28119 does not improve AUC. Reverting changes.
Training on augumented user 126341 7/50 current_auc = 1.0
User 126341 AUC after training: 1.0
User 126341 does not improve AUC. Reverting changes.
Training on augumented user 38939 8/50 current_auc = 1.0
User 38939 AUC after training: 1.0
User 38939 does not improve AUC. Reverting changes.
Training on augumented user 49737 9/50 current_auc = 1.0
User 49737 AUC after training: 1.0
User 49737 does not improve AUC. Reverting changes.
Training on augumented user 61646 10/50 current_auc = 1.0
User 61646 AUC after training: 1.0
User 61646 does not improve AUC. Reverting changes.
Training on augumented user 130532 11/50 current_auc = 1.0
User 130532 AUC after training: 1.0
User 130532 does not improve AUC. Reverting changes.
Training on augumented user 51072 12/50 current_auc = 1.0
User 51072 AUC after training: 1.0
User 51072 does not improve AUC. Reverting changes.
Training on augumented user 92838 13/50 current_auc = 1.0
User 92838 AUC after training: 1.0
User 92838 does not improve AUC. Reverting changes.
Training on augumented user 108950 14/50 current_auc = 1.0
User 108950 AUC after training: 1.0
User 108950 does not improve AUC. Reverting changes.
Training on augumented user 83875 15/50 current_auc = 1.0
User 83875 AUC after training: 1.0
User 83875 does not improve AUC. Reverting changes.
Training on augumented user 73104 16/50 current_auc = 1.0
User 73104 AUC after training: 1.0
User 73104 does not improve AUC. Reverting changes.
Training on augumented user 10213 17/50 current_auc = 1.0
User 10213 AUC after training: 1.0
User 10213 does not improve AUC. Reverting changes.
Training on augumented user 129400 18/50 current_auc = 1.0
User 129400 AUC after training: 1.0
User 129400 does not improve AUC. Reverting changes.
Training on augumented user 48169 19/50 current_auc = 1.0
User 48169 AUC after training: 1.0
User 48169 does not improve AUC. Reverting changes.
Training on augumented user 59773 20/50 current_auc = 1.0
User 59773 AUC after training: 1.0
User 59773 does not improve AUC. Reverting changes.
Training on augumented user 109587 21/50 current_auc = 1.0
User 109587 AUC after training: 1.0
User 109587 does not improve AUC. Reverting changes.
Training on augumented user 34040 22/50 current_auc = 1.0
User 34040 AUC after training: 1.0
User 34040 does not improve AUC. Reverting changes.
Training on augumented user 995 23/50 current_auc = 1.0
User 995 AUC after training: 1.0
User 995 does not improve AUC. Reverting changes.
Training on augumented user 19429 24/50 current_auc = 1.0
User 19429 AUC after training: 1.0
User 19429 does not improve AUC. Reverting changes.
Training on augumented user 9563 25/50 current_auc = 1.0
User 9563 AUC after training: 1.0
User 9563 does not improve AUC. Reverting changes.
Training on augumented user 39527 26/50 current_auc = 1.0
User 39527 AUC after training: 1.0
User 39527 does not improve AUC. Reverting changes.
Training on augumented user 64877 27/50 current_auc = 1.0
User 64877 AUC after training: 1.0
User 64877 does not improve AUC. Reverting changes.
Training on augumented user 94264 28/50 current_auc = 1.0
User 94264 AUC after training: 1.0
User 94264 does not improve AUC. Reverting changes.
Training on augumented user 95465 29/50 current_auc = 1.0
User 95465 AUC after training: 1.0
User 95465 does not improve AUC. Reverting changes.
Training on augumented user 102611 30/50 current_auc = 1.0
User 102611 AUC after training: 1.0
User 102611 does not improve AUC. Reverting changes.
Training on augumented user 24208 31/50 current_auc = 1.0
User 24208 AUC after training: 1.0
User 24208 does not improve AUC. Reverting changes.
Training on augumented user 69629 32/50 current_auc = 1.0
User 69629 AUC after training: 1.0
User 69629 does not improve AUC. Reverting changes.
Training on augumented user 23050 33/50 current_auc = 1.0
User 23050 AUC after training: 1.0
User 23050 does not improve AUC. Reverting changes.
Training on augumented user 108674 34/50 current_auc = 1.0
User 108674 AUC after training: 1.0
User 108674 does not improve AUC. Reverting changes.
Training on augumented user 15975 35/50 current_auc = 1.0
User 15975 AUC after training: 1.0
User 15975 does not improve AUC. Reverting changes.
Training on augumented user 55083 36/50 current_auc = 1.0
User 55083 AUC after training: 1.0
User 55083 does not improve AUC. Reverting changes.
Training on augumented user 4645 37/50 current_auc = 1.0
User 4645 AUC after training: 1.0
User 4645 does not improve AUC. Reverting changes.
Training on augumented user 106379 38/50 current_auc = 1.0
User 106379 AUC after training: 1.0
User 106379 does not improve AUC. Reverting changes.
Training on augumented user 18336 39/50 current_auc = 1.0
User 18336 AUC after training: 1.0
User 18336 does not improve AUC. Reverting changes.
Training on augumented user 123180 40/50 current_auc = 1.0
User 123180 AUC after training: 1.0
User 123180 does not improve AUC. Reverting changes.
Training on augumented user 88606 41/50 current_auc = 1.0
User 88606 AUC after training: 1.0
User 88606 does not improve AUC. Reverting changes.
Training on augumented user 3487 42/50 current_auc = 1.0
User 3487 AUC after training: 1.0
User 3487 does not improve AUC. Reverting changes.
Training on augumented user 40595 43/50 current_auc = 1.0
User 40595 AUC after training: 1.0
User 40595 does not improve AUC. Reverting changes.
Training on augumented user 85298 44/50 current_auc = 1.0
User 85298 AUC after training: 1.0
User 85298 does not improve AUC. Reverting changes.
Training on augumented user 55592 45/50 current_auc = 1.0
User 55592 AUC after training: 1.0
User 55592 does not improve AUC. Reverting changes.
Training on augumented user 42119 46/50 current_auc = 1.0
User 42119 AUC after training: 1.0
User 42119 does not improve AUC. Reverting changes.
Training on augumented user 136317 47/50 current_auc = 1.0
User 136317 AUC after training: 1.0
User 136317 does not improve AUC. Reverting changes.
Training on augumented user 87404 48/50 current_auc = 1.0
User 87404 AUC after training: 1.0
User 87404 does not improve AUC. Reverting changes.
Training on augumented user 65595 49/50 current_auc = 1.0
User 65595 AUC after training: 1.0
User 65595 does not improve AUC. Reverting changes.
[2024-12-02 18:18:27.287095] start test user 97950 74/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:18:28.071007] start test user 97950 74/567 recall augumented users by random, augumented_users = [72927, 130749, 132035, 5589, 50691, 87432, 106971, 73389, 72316, 56984, 92744, 67297, 93884, 67713, 97334, 97078, 100641, 91315, 26132, 52757, 90792, 84561, 71934, 40839, 112546, 43562, 51679, 46084, 100577, 77565, 25126, 134327, 114340, 6494, 136380, 42091, 44914, 124607, 53063, 64484, 15443, 106978, 65197, 8788, 61290, 81505, 16799, 102536, 46013, 61281]
[2024-12-02 18:18:28.110877] user = 97950 Cloud 74/567
[2024-12-02 18:18:28.149903] user = 97950 Local 74/567
[2024-12-02 18:18:28.217968] user = 97950 Local+ 74/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:18:30.147556] user = 97950 MPDA- 74/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.588474025974026
Training on augumented user 72927 0/50 current_auc = 0.588474025974026
User 72927 AUC after training: 0.588474025974026
User 72927 does not improve AUC. Reverting changes.
Training on augumented user 130749 1/50 current_auc = 0.588474025974026
User 130749 AUC after training: 0.5876623376623376
User 130749 does not improve AUC. Reverting changes.
Training on augumented user 132035 2/50 current_auc = 0.588474025974026
User 132035 AUC after training: 0.5868506493506493
User 132035 does not improve AUC. Reverting changes.
Training on augumented user 5589 3/50 current_auc = 0.588474025974026
User 5589 AUC after training: 0.5892857142857142
User 5589 improves AUC. Keeping the model.
Training on augumented user 50691 4/50 current_auc = 0.5892857142857142
User 50691 AUC after training: 0.5892857142857142
User 50691 does not improve AUC. Reverting changes.
Training on augumented user 87432 5/50 current_auc = 0.5892857142857142
User 87432 AUC after training: 0.5892857142857142
User 87432 does not improve AUC. Reverting changes.
Training on augumented user 106971 6/50 current_auc = 0.5892857142857142
User 106971 AUC after training: 0.5892857142857142
User 106971 does not improve AUC. Reverting changes.
Training on augumented user 73389 7/50 current_auc = 0.5892857142857142
User 73389 AUC after training: 0.5909090909090908
User 73389 improves AUC. Keeping the model.
Training on augumented user 72316 8/50 current_auc = 0.5909090909090908
User 72316 AUC after training: 0.5884740259740259
User 72316 does not improve AUC. Reverting changes.
Training on augumented user 56984 9/50 current_auc = 0.5909090909090908
User 56984 AUC after training: 0.5909090909090908
User 56984 does not improve AUC. Reverting changes.
Training on augumented user 92744 10/50 current_auc = 0.5909090909090908
User 92744 AUC after training: 0.5909090909090908
User 92744 does not improve AUC. Reverting changes.
Training on augumented user 67297 11/50 current_auc = 0.5909090909090908
User 67297 AUC after training: 0.5909090909090908
User 67297 does not improve AUC. Reverting changes.
Training on augumented user 93884 12/50 current_auc = 0.5909090909090908
User 93884 AUC after training: 0.5909090909090908
User 93884 does not improve AUC. Reverting changes.
Training on augumented user 67713 13/50 current_auc = 0.5909090909090908
User 67713 AUC after training: 0.5892857142857142
User 67713 does not improve AUC. Reverting changes.
Training on augumented user 97334 14/50 current_auc = 0.5909090909090908
User 97334 AUC after training: 0.5900974025974026
User 97334 does not improve AUC. Reverting changes.
Training on augumented user 97078 15/50 current_auc = 0.5909090909090908
User 97078 AUC after training: 0.5900974025974026
User 97078 does not improve AUC. Reverting changes.
Training on augumented user 100641 16/50 current_auc = 0.5909090909090908
User 100641 AUC after training: 0.5892857142857142
User 100641 does not improve AUC. Reverting changes.
Training on augumented user 91315 17/50 current_auc = 0.5909090909090908
User 91315 AUC after training: 0.5909090909090908
User 91315 does not improve AUC. Reverting changes.
Training on augumented user 26132 18/50 current_auc = 0.5909090909090908
User 26132 AUC after training: 0.5900974025974026
User 26132 does not improve AUC. Reverting changes.
Training on augumented user 52757 19/50 current_auc = 0.5909090909090908
User 52757 AUC after training: 0.5876623376623377
User 52757 does not improve AUC. Reverting changes.
Training on augumented user 90792 20/50 current_auc = 0.5909090909090908
User 90792 AUC after training: 0.5900974025974025
User 90792 does not improve AUC. Reverting changes.
Training on augumented user 84561 21/50 current_auc = 0.5909090909090908
User 84561 AUC after training: 0.5909090909090908
User 84561 does not improve AUC. Reverting changes.
Training on augumented user 71934 22/50 current_auc = 0.5909090909090908
User 71934 AUC after training: 0.5900974025974025
User 71934 does not improve AUC. Reverting changes.
Training on augumented user 40839 23/50 current_auc = 0.5909090909090908
User 40839 AUC after training: 0.5900974025974025
User 40839 does not improve AUC. Reverting changes.
Training on augumented user 112546 24/50 current_auc = 0.5909090909090908
User 112546 AUC after training: 0.588474025974026
User 112546 does not improve AUC. Reverting changes.
Training on augumented user 43562 25/50 current_auc = 0.5909090909090908
User 43562 AUC after training: 0.5909090909090908
User 43562 does not improve AUC. Reverting changes.
Training on augumented user 51679 26/50 current_auc = 0.5909090909090908
User 51679 AUC after training: 0.5909090909090908
User 51679 does not improve AUC. Reverting changes.
Training on augumented user 46084 27/50 current_auc = 0.5909090909090908
User 46084 AUC after training: 0.5892857142857142
User 46084 does not improve AUC. Reverting changes.
Training on augumented user 100577 28/50 current_auc = 0.5909090909090908
User 100577 AUC after training: 0.5909090909090908
User 100577 does not improve AUC. Reverting changes.
Training on augumented user 77565 29/50 current_auc = 0.5909090909090908
User 77565 AUC after training: 0.5892857142857143
User 77565 does not improve AUC. Reverting changes.
Training on augumented user 25126 30/50 current_auc = 0.5909090909090908
User 25126 AUC after training: 0.5900974025974026
User 25126 does not improve AUC. Reverting changes.
Training on augumented user 134327 31/50 current_auc = 0.5909090909090908
User 134327 AUC after training: 0.5892857142857142
User 134327 does not improve AUC. Reverting changes.
Training on augumented user 114340 32/50 current_auc = 0.5909090909090908
User 114340 AUC after training: 0.5909090909090908
User 114340 does not improve AUC. Reverting changes.
Training on augumented user 6494 33/50 current_auc = 0.5909090909090908
User 6494 AUC after training: 0.5917207792207791
User 6494 improves AUC. Keeping the model.
Training on augumented user 136380 34/50 current_auc = 0.5917207792207791
User 136380 AUC after training: 0.5917207792207791
User 136380 does not improve AUC. Reverting changes.
Training on augumented user 42091 35/50 current_auc = 0.5917207792207791
User 42091 AUC after training: 0.5917207792207791
User 42091 does not improve AUC. Reverting changes.
Training on augumented user 44914 36/50 current_auc = 0.5917207792207791
User 44914 AUC after training: 0.5900974025974025
User 44914 does not improve AUC. Reverting changes.
Training on augumented user 124607 37/50 current_auc = 0.5917207792207791
User 124607 AUC after training: 0.5909090909090908
User 124607 does not improve AUC. Reverting changes.
Training on augumented user 53063 38/50 current_auc = 0.5917207792207791
User 53063 AUC after training: 0.5900974025974025
User 53063 does not improve AUC. Reverting changes.
Training on augumented user 64484 39/50 current_auc = 0.5917207792207791
User 64484 AUC after training: 0.5909090909090908
User 64484 does not improve AUC. Reverting changes.
Training on augumented user 15443 40/50 current_auc = 0.5917207792207791
User 15443 AUC after training: 0.5909090909090908
User 15443 does not improve AUC. Reverting changes.
Training on augumented user 106978 41/50 current_auc = 0.5917207792207791
User 106978 AUC after training: 0.588474025974026
User 106978 does not improve AUC. Reverting changes.
Training on augumented user 65197 42/50 current_auc = 0.5917207792207791
User 65197 AUC after training: 0.5892857142857142
User 65197 does not improve AUC. Reverting changes.
Training on augumented user 8788 43/50 current_auc = 0.5917207792207791
User 8788 AUC after training: 0.5900974025974025
User 8788 does not improve AUC. Reverting changes.
Training on augumented user 61290 44/50 current_auc = 0.5917207792207791
User 61290 AUC after training: 0.5909090909090908
User 61290 does not improve AUC. Reverting changes.
Training on augumented user 81505 45/50 current_auc = 0.5917207792207791
User 81505 AUC after training: 0.5876623376623377
User 81505 does not improve AUC. Reverting changes.
Training on augumented user 16799 46/50 current_auc = 0.5917207792207791
User 16799 AUC after training: 0.5909090909090908
User 16799 does not improve AUC. Reverting changes.
Training on augumented user 102536 47/50 current_auc = 0.5917207792207791
User 102536 AUC after training: 0.5909090909090909
User 102536 does not improve AUC. Reverting changes.
Training on augumented user 46013 48/50 current_auc = 0.5917207792207791
User 46013 AUC after training: 0.5892857142857142
User 46013 does not improve AUC. Reverting changes.
Training on augumented user 61281 49/50 current_auc = 0.5917207792207791
User 61281 AUC after training: 0.5909090909090908
User 61281 does not improve AUC. Reverting changes.
[2024-12-02 18:18:59.434728] start test user 97953 75/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:18:59.935994] start test user 97953 75/567 recall augumented users by random, augumented_users = [56081, 38401, 80075, 33818, 53643, 32537, 25669, 92151, 117647, 115049, 70461, 73005, 65252, 42510, 135896, 127809, 37013, 50189, 125504, 117290, 94297, 101713, 53459, 983, 100333, 121652, 85203, 117653, 38022, 131062, 42772, 112652, 120233, 131531, 76203, 25257, 109259, 16213, 36097, 5567, 86458, 109553, 74706, 88395, 45159, 69953, 131593, 65133, 127560, 103510]
[2024-12-02 18:18:59.953919] user = 97953 Cloud 75/567
[2024-12-02 18:19:00.014594] user = 97953 Local 75/567
[2024-12-02 18:19:00.103748] user = 97953 Local+ 75/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:19:02.993114] user = 97953 MPDA- 75/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6705612579165756
Training on augumented user 56081 0/50 current_auc = 0.6705612579165756
User 56081 AUC after training: 0.6706860512276542
User 56081 improves AUC. Keeping the model.
Training on augumented user 38401 1/50 current_auc = 0.6706860512276542
User 38401 AUC after training: 0.6705066608429788
User 38401 does not improve AUC. Reverting changes.
Training on augumented user 80075 2/50 current_auc = 0.6706860512276542
User 80075 AUC after training: 0.6694147193710417
User 80075 does not improve AUC. Reverting changes.
Training on augumented user 33818 3/50 current_auc = 0.6706860512276542
User 33818 AUC after training: 0.6705144604249212
User 33818 does not improve AUC. Reverting changes.
Training on augumented user 53643 4/50 current_auc = 0.6706860512276542
User 53643 AUC after training: 0.6709317380588401
User 53643 improves AUC. Keeping the model.
Training on augumented user 32537 5/50 current_auc = 0.6709317380588401
User 32537 AUC after training: 0.6707952453748479
User 32537 does not improve AUC. Reverting changes.
Training on augumented user 25669 6/50 current_auc = 0.6709317380588401
User 25669 AUC after training: 0.6713841138114998
User 25669 improves AUC. Keeping the model.
Training on augumented user 92151 7/50 current_auc = 0.6713841138114998
User 92151 AUC after training: 0.6712164227997379
User 92151 does not improve AUC. Reverting changes.
Training on augumented user 117647 8/50 current_auc = 0.6713841138114998
User 117647 AUC after training: 0.6715362056593767
User 117647 improves AUC. Keeping the model.
Training on augumented user 115049 9/50 current_auc = 0.6715362056593767
User 115049 AUC after training: 0.6713178173649892
User 115049 does not improve AUC. Reverting changes.
Training on augumented user 70461 10/50 current_auc = 0.6715362056593767
User 70461 AUC after training: 0.6713724144385861
User 70461 does not improve AUC. Reverting changes.
Training on augumented user 73005 11/50 current_auc = 0.6715362056593767
User 73005 AUC after training: 0.6711111284435156
User 73005 does not improve AUC. Reverting changes.
Training on augumented user 65252 12/50 current_auc = 0.6715362056593767
User 65252 AUC after training: 0.6712203225907092
User 65252 does not improve AUC. Reverting changes.
Training on augumented user 42510 13/50 current_auc = 0.6715362056593767
User 42510 AUC after training: 0.6713139175740179
User 42510 does not improve AUC. Reverting changes.
Training on augumented user 135896 14/50 current_auc = 0.6715362056593767
User 135896 AUC after training: 0.671274919664306
User 135896 does not improve AUC. Reverting changes.
Training on augumented user 127809 15/50 current_auc = 0.6715362056593767
User 127809 AUC after training: 0.6710214332511777
User 127809 does not improve AUC. Reverting changes.
Training on augumented user 37013 16/50 current_auc = 0.6715362056593767
User 37013 AUC after training: 0.6713646148566437
User 37013 does not improve AUC. Reverting changes.
Training on augumented user 50189 17/50 current_auc = 0.6715362056593767
User 50189 AUC after training: 0.6712398215455652
User 50189 does not improve AUC. Reverting changes.
Training on augumented user 125504 18/50 current_auc = 0.6715362056593767
User 125504 AUC after training: 0.6714777087948086
User 125504 does not improve AUC. Reverting changes.
Training on augumented user 117290 19/50 current_auc = 0.6715362056593767
User 117290 AUC after training: 0.6710136336692353
User 117290 does not improve AUC. Reverting changes.
Training on augumented user 94297 20/50 current_auc = 0.6715362056593767
User 94297 AUC after training: 0.6708576420303872
User 94297 does not improve AUC. Reverting changes.
Training on augumented user 101713 21/50 current_auc = 0.6715362056593767
User 101713 AUC after training: 0.6713529154837301
User 101713 does not improve AUC. Reverting changes.
Training on augumented user 53459 22/50 current_auc = 0.6715362056593767
User 53459 AUC after training: 0.6713490156927588
User 53459 does not improve AUC. Reverting changes.
Training on augumented user 983 23/50 current_auc = 0.6715362056593767
User 983 AUC after training: 0.6712788194552773
User 983 does not improve AUC. Reverting changes.
Training on augumented user 100333 24/50 current_auc = 0.6715362056593767
User 100333 AUC after training: 0.670569057498518
User 100333 does not improve AUC. Reverting changes.
Training on augumented user 121652 25/50 current_auc = 0.6715362056593767
User 121652 AUC after training: 0.6713256169469316
User 121652 does not improve AUC. Reverting changes.
Training on augumented user 85203 26/50 current_auc = 0.6715362056593767
User 85203 AUC after training: 0.6713568152747013
User 85203 does not improve AUC. Reverting changes.
Training on augumented user 117653 27/50 current_auc = 0.6715362056593767
User 117653 AUC after training: 0.6712827192462485
User 117653 does not improve AUC. Reverting changes.
Training on augumented user 38022 28/50 current_auc = 0.6715362056593767
User 38022 AUC after training: 0.6713568152747013
User 38022 does not improve AUC. Reverting changes.
Training on augumented user 131062 29/50 current_auc = 0.6715362056593767
User 131062 AUC after training: 0.6708108445387327
User 131062 does not improve AUC. Reverting changes.
Training on augumented user 42772 30/50 current_auc = 0.6715362056593767
User 42772 AUC after training: 0.6714036127663557
User 42772 does not improve AUC. Reverting changes.
Training on augumented user 112652 31/50 current_auc = 0.6715362056593767
User 112652 AUC after training: 0.6713958131844133
User 112652 does not improve AUC. Reverting changes.
Training on augumented user 120233 32/50 current_auc = 0.6715362056593767
User 120233 AUC after training: 0.6715908027329736
User 120233 improves AUC. Keeping the model.
Training on augumented user 131531 33/50 current_auc = 0.6715908027329736
User 131531 AUC after training: 0.670701650391539
User 131531 does not improve AUC. Reverting changes.
Training on augumented user 76203 34/50 current_auc = 0.6715908027329736
User 76203 AUC after training: 0.6713841138114996
User 76203 does not improve AUC. Reverting changes.
Training on augumented user 25257 35/50 current_auc = 0.6715908027329736
User 25257 AUC after training: 0.6716648987614264
User 25257 improves AUC. Keeping the model.
Training on augumented user 109259 36/50 current_auc = 0.6716648987614264
User 109259 AUC after training: 0.6716220010607431
User 109259 does not improve AUC. Reverting changes.
Training on augumented user 16213 37/50 current_auc = 0.6716648987614264
User 16213 AUC after training: 0.6711306273983715
User 16213 does not improve AUC. Reverting changes.
Training on augumented user 36097 38/50 current_auc = 0.6716648987614264
User 36097 AUC after training: 0.671505007331607
User 36097 does not improve AUC. Reverting changes.
Training on augumented user 5567 39/50 current_auc = 0.6716648987614264
User 5567 AUC after training: 0.6717623935357064
User 5567 improves AUC. Keeping the model.
Training on augumented user 86458 40/50 current_auc = 0.6717623935357064
User 86458 AUC after training: 0.6710136336692353
User 86458 does not improve AUC. Reverting changes.
Training on augumented user 109553 41/50 current_auc = 0.6717623935357064
User 109553 AUC after training: 0.6705027610520076
User 109553 does not improve AUC. Reverting changes.
Training on augumented user 74706 42/50 current_auc = 0.6717623935357064
User 74706 AUC after training: 0.6715518048232615
User 74706 does not improve AUC. Reverting changes.
Training on augumented user 88395 43/50 current_auc = 0.6717623935357064
User 88395 AUC after training: 0.6714933079586934
User 88395 does not improve AUC. Reverting changes.
Training on augumented user 45159 44/50 current_auc = 0.6717623935357064
User 45159 AUC after training: 0.6711306273983715
User 45159 does not improve AUC. Reverting changes.
Training on augumented user 69953 45/50 current_auc = 0.6717623935357064
User 69953 AUC after training: 0.6716531993885128
User 69953 does not improve AUC. Reverting changes.
Training on augumented user 131593 46/50 current_auc = 0.6717623935357064
User 131593 AUC after training: 0.6716843977162825
User 131593 does not improve AUC. Reverting changes.
Training on augumented user 65133 47/50 current_auc = 0.6717623935357064
User 65133 AUC after training: 0.6708966399400992
User 65133 does not improve AUC. Reverting changes.
Training on augumented user 127560 48/50 current_auc = 0.6717623935357064
User 127560 AUC after training: 0.6716687985523977
User 127560 does not improve AUC. Reverting changes.
Training on augumented user 103510 49/50 current_auc = 0.6717623935357064
User 103510 AUC after training: 0.6712281221726515
User 103510 does not improve AUC. Reverting changes.
[2024-12-02 18:19:33.523956] start test user 97970 76/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:19:34.009638] start test user 97970 76/567 recall augumented users by random, augumented_users = [21828, 9513, 110336, 76284, 49956, 67589, 123741, 106861, 44884, 3349, 32406, 120213, 118558, 27047, 69367, 20590, 105890, 18233, 74505, 69419, 29138, 133159, 81085, 38870, 32005, 104733, 2510, 56726, 20502, 47467, 83280, 61987, 6822, 56302, 79236, 99431, 7641, 24458, 64369, 136904, 83874, 123001, 120913, 131229, 14630, 62326, 81154, 129772, 68775, 65195]
[2024-12-02 18:19:34.024968] user = 97970 Cloud 76/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:19:34.030885] user = 97970 Local 76/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:19:34.092791] user = 97970 Local+ 76/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:19:36.455371] user = 97970 MPDA- 76/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 21828 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21828 AUC after training: 0.5
User 21828 does not improve AUC. Reverting changes.
Training on augumented user 9513 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9513 AUC after training: 0.5
User 9513 does not improve AUC. Reverting changes.
Training on augumented user 110336 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110336 AUC after training: 0.5
User 110336 does not improve AUC. Reverting changes.
Training on augumented user 76284 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76284 AUC after training: 0.5
User 76284 does not improve AUC. Reverting changes.
Training on augumented user 49956 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49956 AUC after training: 0.5
User 49956 does not improve AUC. Reverting changes.
Training on augumented user 67589 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67589 AUC after training: 0.5
User 67589 does not improve AUC. Reverting changes.
Training on augumented user 123741 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123741 AUC after training: 0.5
User 123741 does not improve AUC. Reverting changes.
Training on augumented user 106861 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106861 AUC after training: 0.5
User 106861 does not improve AUC. Reverting changes.
Training on augumented user 44884 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44884 AUC after training: 0.5
User 44884 does not improve AUC. Reverting changes.
Training on augumented user 3349 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3349 AUC after training: 0.5
User 3349 does not improve AUC. Reverting changes.
Training on augumented user 32406 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32406 AUC after training: 0.5
User 32406 does not improve AUC. Reverting changes.
Training on augumented user 120213 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120213 AUC after training: 0.5
User 120213 does not improve AUC. Reverting changes.
Training on augumented user 118558 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118558 AUC after training: 0.5
User 118558 does not improve AUC. Reverting changes.
Training on augumented user 27047 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27047 AUC after training: 0.5
User 27047 does not improve AUC. Reverting changes.
Training on augumented user 69367 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 69367 AUC after training: 0.5
User 69367 does not improve AUC. Reverting changes.
Training on augumented user 20590 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20590 AUC after training: 0.5
User 20590 does not improve AUC. Reverting changes.
Training on augumented user 105890 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105890 AUC after training: 0.5
User 105890 does not improve AUC. Reverting changes.
Training on augumented user 18233 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18233 AUC after training: 0.5
User 18233 does not improve AUC. Reverting changes.
Training on augumented user 74505 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74505 AUC after training: 0.5
User 74505 does not improve AUC. Reverting changes.
Training on augumented user 69419 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 69419 AUC after training: 0.5
User 69419 does not improve AUC. Reverting changes.
Training on augumented user 29138 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29138 AUC after training: 0.5
User 29138 does not improve AUC. Reverting changes.
Training on augumented user 133159 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133159 AUC after training: 0.5
User 133159 does not improve AUC. Reverting changes.
Training on augumented user 81085 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81085 AUC after training: 0.5
User 81085 does not improve AUC. Reverting changes.
Training on augumented user 38870 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38870 AUC after training: 0.5
User 38870 does not improve AUC. Reverting changes.
Training on augumented user 32005 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32005 AUC after training: 0.5
User 32005 does not improve AUC. Reverting changes.
Training on augumented user 104733 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104733 AUC after training: 0.5
User 104733 does not improve AUC. Reverting changes.
Training on augumented user 2510 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2510 AUC after training: 0.5
User 2510 does not improve AUC. Reverting changes.
Training on augumented user 56726 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56726 AUC after training: 0.5
User 56726 does not improve AUC. Reverting changes.
Training on augumented user 20502 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20502 AUC after training: 0.5
User 20502 does not improve AUC. Reverting changes.
Training on augumented user 47467 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47467 AUC after training: 0.5
User 47467 does not improve AUC. Reverting changes.
Training on augumented user 83280 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83280 AUC after training: 0.5
User 83280 does not improve AUC. Reverting changes.
Training on augumented user 61987 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61987 AUC after training: 0.5
User 61987 does not improve AUC. Reverting changes.
Training on augumented user 6822 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6822 AUC after training: 0.5
User 6822 does not improve AUC. Reverting changes.
Training on augumented user 56302 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56302 AUC after training: 0.5
User 56302 does not improve AUC. Reverting changes.
Training on augumented user 79236 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79236 AUC after training: 0.5
User 79236 does not improve AUC. Reverting changes.
Training on augumented user 99431 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99431 AUC after training: 0.5
User 99431 does not improve AUC. Reverting changes.
Training on augumented user 7641 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7641 AUC after training: 0.5
User 7641 does not improve AUC. Reverting changes.
Training on augumented user 24458 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24458 AUC after training: 0.5
User 24458 does not improve AUC. Reverting changes.
Training on augumented user 64369 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64369 AUC after training: 0.5
User 64369 does not improve AUC. Reverting changes.
Training on augumented user 136904 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136904 AUC after training: 0.5
User 136904 does not improve AUC. Reverting changes.
Training on augumented user 83874 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83874 AUC after training: 0.5
User 83874 does not improve AUC. Reverting changes.
Training on augumented user 123001 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123001 AUC after training: 0.5
User 123001 does not improve AUC. Reverting changes.
Training on augumented user 120913 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120913 AUC after training: 0.5
User 120913 does not improve AUC. Reverting changes.
Training on augumented user 131229 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131229 AUC after training: 0.5
User 131229 does not improve AUC. Reverting changes.
Training on augumented user 14630 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14630 AUC after training: 0.5
User 14630 does not improve AUC. Reverting changes.
Training on augumented user 62326 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62326 AUC after training: 0.5
User 62326 does not improve AUC. Reverting changes.
Training on augumented user 81154 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81154 AUC after training: 0.5
User 81154 does not improve AUC. Reverting changes.
Training on augumented user 129772 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129772 AUC after training: 0.5
User 129772 does not improve AUC. Reverting changes.
Training on augumented user 68775 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68775 AUC after training: 0.5
User 68775 does not improve AUC. Reverting changes.
Training on augumented user 65195 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 65195 AUC after training: 0.5
User 65195 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:20:08.147625] start test user 98001 77/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:20:08.852081] start test user 98001 77/567 recall augumented users by random, augumented_users = [11912, 120402, 5338, 137312, 2242, 66679, 13858, 66331, 61096, 5427, 103824, 136212, 69042, 110849, 64148, 93053, 80916, 55625, 4523, 137473, 72585, 55092, 44675, 123643, 22073, 126577, 82819, 62640, 47655, 28998, 78919, 113815, 58610, 38699, 25572, 30124, 106288, 49046, 93353, 1337, 42397, 15575, 9783, 118898, 90039, 65736, 23819, 60463, 102989, 133631]
[2024-12-02 18:20:08.867319] user = 98001 Cloud 77/567
[2024-12-02 18:20:08.917505] user = 98001 Local 77/567
[2024-12-02 18:20:08.961459] user = 98001 Local+ 77/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:20:11.192144] user = 98001 MPDA- 77/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7603055865032627
Training on augumented user 11912 0/50 current_auc = 0.7603055865032627
User 11912 AUC after training: 0.7609422250517269
User 11912 improves AUC. Keeping the model.
Training on augumented user 120402 1/50 current_auc = 0.7609422250517269
User 120402 AUC after training: 0.761419703963075
User 120402 improves AUC. Keeping the model.
Training on augumented user 5338 2/50 current_auc = 0.761419703963075
User 5338 AUC after training: 0.7609422250517269
User 5338 does not improve AUC. Reverting changes.
Training on augumented user 137312 3/50 current_auc = 0.761419703963075
User 137312 AUC after training: 0.761578863600191
User 137312 improves AUC. Keeping the model.
Training on augumented user 2242 4/50 current_auc = 0.761578863600191
User 2242 AUC after training: 0.7620563425115391
User 2242 improves AUC. Keeping the model.
Training on augumented user 66679 5/50 current_auc = 0.7620563425115391
User 66679 AUC after training: 0.7611013846888429
User 66679 does not improve AUC. Reverting changes.
Training on augumented user 13858 6/50 current_auc = 0.7620563425115391
User 13858 AUC after training: 0.7618971828744231
User 13858 does not improve AUC. Reverting changes.
Training on augumented user 66331 7/50 current_auc = 0.7620563425115391
User 66331 AUC after training: 0.7604647461403788
User 66331 does not improve AUC. Reverting changes.
Training on augumented user 61096 8/50 current_auc = 0.7620563425115391
User 61096 AUC after training: 0.7622155021486552
User 61096 improves AUC. Keeping the model.
Training on augumented user 5427 9/50 current_auc = 0.7622155021486552
User 5427 AUC after training: 0.761897182874423
User 5427 does not improve AUC. Reverting changes.
Training on augumented user 103824 10/50 current_auc = 0.7622155021486552
User 103824 AUC after training: 0.7630113003342353
User 103824 improves AUC. Keeping the model.
Training on augumented user 136212 11/50 current_auc = 0.7630113003342353
User 136212 AUC after training: 0.7630113003342353
User 136212 does not improve AUC. Reverting changes.
Training on augumented user 69042 12/50 current_auc = 0.7630113003342353
User 69042 AUC after training: 0.7623746617857712
User 69042 does not improve AUC. Reverting changes.
Training on augumented user 110849 13/50 current_auc = 0.7630113003342353
User 110849 AUC after training: 0.7628521406971192
User 110849 does not improve AUC. Reverting changes.
Training on augumented user 64148 14/50 current_auc = 0.7630113003342353
User 64148 AUC after training: 0.7625338214228872
User 64148 does not improve AUC. Reverting changes.
Training on augumented user 93053 15/50 current_auc = 0.7630113003342353
User 93053 AUC after training: 0.7628521406971193
User 93053 does not improve AUC. Reverting changes.
Training on augumented user 80916 16/50 current_auc = 0.7630113003342353
User 80916 AUC after training: 0.7626929810600032
User 80916 does not improve AUC. Reverting changes.
Training on augumented user 55625 17/50 current_auc = 0.7630113003342353
User 55625 AUC after training: 0.7630113003342353
User 55625 does not improve AUC. Reverting changes.
Training on augumented user 4523 18/50 current_auc = 0.7630113003342353
User 4523 AUC after training: 0.7628521406971193
User 4523 does not improve AUC. Reverting changes.
Training on augumented user 137473 19/50 current_auc = 0.7630113003342353
User 137473 AUC after training: 0.7625338214228872
User 137473 does not improve AUC. Reverting changes.
Training on augumented user 72585 20/50 current_auc = 0.7630113003342353
User 72585 AUC after training: 0.7630113003342353
User 72585 does not improve AUC. Reverting changes.
Training on augumented user 55092 21/50 current_auc = 0.7630113003342353
User 55092 AUC after training: 0.7625338214228872
User 55092 does not improve AUC. Reverting changes.
Training on augumented user 44675 22/50 current_auc = 0.7630113003342353
User 44675 AUC after training: 0.7626929810600032
User 44675 does not improve AUC. Reverting changes.
Training on augumented user 123643 23/50 current_auc = 0.7630113003342353
User 123643 AUC after training: 0.7626929810600032
User 123643 does not improve AUC. Reverting changes.
Training on augumented user 22073 24/50 current_auc = 0.7630113003342353
User 22073 AUC after training: 0.7626929810600032
User 22073 does not improve AUC. Reverting changes.
Training on augumented user 126577 25/50 current_auc = 0.7630113003342353
User 126577 AUC after training: 0.7625338214228872
User 126577 does not improve AUC. Reverting changes.
Training on augumented user 82819 26/50 current_auc = 0.7630113003342353
User 82819 AUC after training: 0.7631704599713512
User 82819 improves AUC. Keeping the model.
Training on augumented user 62640 27/50 current_auc = 0.7631704599713512
User 62640 AUC after training: 0.7633296196084673
User 62640 improves AUC. Keeping the model.
Training on augumented user 47655 28/50 current_auc = 0.7633296196084673
User 47655 AUC after training: 0.7625338214228872
User 47655 does not improve AUC. Reverting changes.
Training on augumented user 28998 29/50 current_auc = 0.7633296196084673
User 28998 AUC after training: 0.7636479388826993
User 28998 improves AUC. Keeping the model.
Training on augumented user 78919 30/50 current_auc = 0.7636479388826993
User 78919 AUC after training: 0.7633296196084673
User 78919 does not improve AUC. Reverting changes.
Training on augumented user 113815 31/50 current_auc = 0.7636479388826993
User 113815 AUC after training: 0.7631704599713514
User 113815 does not improve AUC. Reverting changes.
Training on augumented user 58610 32/50 current_auc = 0.7636479388826993
User 58610 AUC after training: 0.7636479388826993
User 58610 does not improve AUC. Reverting changes.
Training on augumented user 38699 33/50 current_auc = 0.7636479388826993
User 38699 AUC after training: 0.7636479388826993
User 38699 does not improve AUC. Reverting changes.
Training on augumented user 25572 34/50 current_auc = 0.7636479388826993
User 25572 AUC after training: 0.7633296196084673
User 25572 does not improve AUC. Reverting changes.
Training on augumented user 30124 35/50 current_auc = 0.7636479388826993
User 30124 AUC after training: 0.7628521406971192
User 30124 does not improve AUC. Reverting changes.
Training on augumented user 106288 36/50 current_auc = 0.7636479388826993
User 106288 AUC after training: 0.7634887792455833
User 106288 does not improve AUC. Reverting changes.
Training on augumented user 49046 37/50 current_auc = 0.7636479388826993
User 49046 AUC after training: 0.7639662581569314
User 49046 improves AUC. Keeping the model.
Training on augumented user 93353 38/50 current_auc = 0.7639662581569314
User 93353 AUC after training: 0.7638070985198154
User 93353 does not improve AUC. Reverting changes.
Training on augumented user 1337 39/50 current_auc = 0.7639662581569314
User 1337 AUC after training: 0.7634887792455833
User 1337 does not improve AUC. Reverting changes.
Training on augumented user 42397 40/50 current_auc = 0.7639662581569314
User 42397 AUC after training: 0.7633296196084673
User 42397 does not improve AUC. Reverting changes.
Training on augumented user 15575 41/50 current_auc = 0.7639662581569314
User 15575 AUC after training: 0.7641254177940474
User 15575 improves AUC. Keeping the model.
Training on augumented user 9783 42/50 current_auc = 0.7641254177940474
User 9783 AUC after training: 0.7657170141652077
User 9783 improves AUC. Keeping the model.
Training on augumented user 118898 43/50 current_auc = 0.7657170141652077
User 118898 AUC after training: 0.7647620563425115
User 118898 does not improve AUC. Reverting changes.
Training on augumented user 90039 44/50 current_auc = 0.7657170141652077
User 90039 AUC after training: 0.7660353334394397
User 90039 improves AUC. Keeping the model.
Training on augumented user 65736 45/50 current_auc = 0.7660353334394397
User 65736 AUC after training: 0.7655578545280917
User 65736 does not improve AUC. Reverting changes.
Training on augumented user 23819 46/50 current_auc = 0.7660353334394397
User 23819 AUC after training: 0.7650803756167436
User 23819 does not improve AUC. Reverting changes.
Training on augumented user 60463 47/50 current_auc = 0.7660353334394397
User 60463 AUC after training: 0.7650803756167436
User 60463 does not improve AUC. Reverting changes.
Training on augumented user 102989 48/50 current_auc = 0.7660353334394397
User 102989 AUC after training: 0.7649212159796277
User 102989 does not improve AUC. Reverting changes.
Training on augumented user 133631 49/50 current_auc = 0.7660353334394397
User 133631 AUC after training: 0.7644437370682794
User 133631 does not improve AUC. Reverting changes.
[2024-12-02 18:20:41.499713] start test user 98017 78/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:20:42.305980] start test user 98017 78/567 recall augumented users by random, augumented_users = [65879, 107572, 46355, 28558, 53821, 134443, 72499, 122632, 18135, 32599, 38166, 14526, 119153, 56040, 115607, 26027, 61409, 125991, 5032, 48622, 131946, 62978, 129689, 32135, 121326, 85151, 27173, 99976, 18792, 51812, 63324, 108132, 71128, 24472, 72640, 110392, 136948, 53148, 47643, 65232, 132472, 26716, 82451, 9700, 126019, 33302, 49460, 137103, 72623, 12789]
[2024-12-02 18:20:42.323821] user = 98017 Cloud 78/567
[2024-12-02 18:20:42.338926] user = 98017 Local 78/567
[2024-12-02 18:20:42.457961] user = 98017 Local+ 78/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:20:45.794864] user = 98017 MPDA- 78/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8304843304843305
Training on augumented user 65879 0/50 current_auc = 0.8304843304843305
User 65879 AUC after training: 0.8323836657169991
User 65879 improves AUC. Keeping the model.
Training on augumented user 107572 1/50 current_auc = 0.8323836657169991
User 107572 AUC after training: 0.8300094966761633
User 107572 does not improve AUC. Reverting changes.
Training on augumented user 46355 2/50 current_auc = 0.8323836657169991
User 46355 AUC after training: 0.8309591642924976
User 46355 does not improve AUC. Reverting changes.
Training on augumented user 28558 3/50 current_auc = 0.8323836657169991
User 28558 AUC after training: 0.8333333333333334
User 28558 improves AUC. Keeping the model.
Training on augumented user 53821 4/50 current_auc = 0.8333333333333334
User 53821 AUC after training: 0.8323836657169991
User 53821 does not improve AUC. Reverting changes.
Training on augumented user 134443 5/50 current_auc = 0.8333333333333334
User 134443 AUC after training: 0.8333333333333334
User 134443 does not improve AUC. Reverting changes.
Training on augumented user 72499 6/50 current_auc = 0.8333333333333334
User 72499 AUC after training: 0.8333333333333334
User 72499 does not improve AUC. Reverting changes.
Training on augumented user 122632 7/50 current_auc = 0.8333333333333334
User 122632 AUC after training: 0.8319088319088319
User 122632 does not improve AUC. Reverting changes.
Training on augumented user 18135 8/50 current_auc = 0.8333333333333334
User 18135 AUC after training: 0.8314339981006648
User 18135 does not improve AUC. Reverting changes.
Training on augumented user 32599 9/50 current_auc = 0.8333333333333334
User 32599 AUC after training: 0.8323836657169991
User 32599 does not improve AUC. Reverting changes.
Training on augumented user 38166 10/50 current_auc = 0.8333333333333334
User 38166 AUC after training: 0.8323836657169991
User 38166 does not improve AUC. Reverting changes.
Training on augumented user 14526 11/50 current_auc = 0.8333333333333334
User 14526 AUC after training: 0.8319088319088319
User 14526 does not improve AUC. Reverting changes.
Training on augumented user 119153 12/50 current_auc = 0.8333333333333334
User 119153 AUC after training: 0.8333333333333334
User 119153 does not improve AUC. Reverting changes.
Training on augumented user 56040 13/50 current_auc = 0.8333333333333334
User 56040 AUC after training: 0.8323836657169991
User 56040 does not improve AUC. Reverting changes.
Training on augumented user 115607 14/50 current_auc = 0.8333333333333334
User 115607 AUC after training: 0.8323836657169991
User 115607 does not improve AUC. Reverting changes.
Training on augumented user 26027 15/50 current_auc = 0.8333333333333334
User 26027 AUC after training: 0.8333333333333333
User 26027 does not improve AUC. Reverting changes.
Training on augumented user 61409 16/50 current_auc = 0.8333333333333334
User 61409 AUC after training: 0.8323836657169991
User 61409 does not improve AUC. Reverting changes.
Training on augumented user 125991 17/50 current_auc = 0.8333333333333334
User 125991 AUC after training: 0.8323836657169991
User 125991 does not improve AUC. Reverting changes.
Training on augumented user 5032 18/50 current_auc = 0.8333333333333334
User 5032 AUC after training: 0.8333333333333334
User 5032 does not improve AUC. Reverting changes.
Training on augumented user 48622 19/50 current_auc = 0.8333333333333334
User 48622 AUC after training: 0.8323836657169991
User 48622 does not improve AUC. Reverting changes.
Training on augumented user 131946 20/50 current_auc = 0.8333333333333334
User 131946 AUC after training: 0.8309591642924976
User 131946 does not improve AUC. Reverting changes.
Training on augumented user 62978 21/50 current_auc = 0.8333333333333334
User 62978 AUC after training: 0.8323836657169991
User 62978 does not improve AUC. Reverting changes.
Training on augumented user 129689 22/50 current_auc = 0.8333333333333334
User 129689 AUC after training: 0.8323836657169991
User 129689 does not improve AUC. Reverting changes.
Training on augumented user 32135 23/50 current_auc = 0.8333333333333334
User 32135 AUC after training: 0.8333333333333334
User 32135 does not improve AUC. Reverting changes.
Training on augumented user 121326 24/50 current_auc = 0.8333333333333334
User 121326 AUC after training: 0.8323836657169991
User 121326 does not improve AUC. Reverting changes.
Training on augumented user 85151 25/50 current_auc = 0.8333333333333334
User 85151 AUC after training: 0.8333333333333334
User 85151 does not improve AUC. Reverting changes.
Training on augumented user 27173 26/50 current_auc = 0.8333333333333334
User 27173 AUC after training: 0.8323836657169991
User 27173 does not improve AUC. Reverting changes.
Training on augumented user 99976 27/50 current_auc = 0.8333333333333334
User 99976 AUC after training: 0.8333333333333334
User 99976 does not improve AUC. Reverting changes.
Training on augumented user 18792 28/50 current_auc = 0.8333333333333334
User 18792 AUC after training: 0.8323836657169991
User 18792 does not improve AUC. Reverting changes.
Training on augumented user 51812 29/50 current_auc = 0.8333333333333334
User 51812 AUC after training: 0.8319088319088319
User 51812 does not improve AUC. Reverting changes.
Training on augumented user 63324 30/50 current_auc = 0.8333333333333334
User 63324 AUC after training: 0.8304843304843305
User 63324 does not improve AUC. Reverting changes.
Training on augumented user 108132 31/50 current_auc = 0.8333333333333334
User 108132 AUC after training: 0.8319088319088319
User 108132 does not improve AUC. Reverting changes.
Training on augumented user 71128 32/50 current_auc = 0.8333333333333334
User 71128 AUC after training: 0.8314339981006648
User 71128 does not improve AUC. Reverting changes.
Training on augumented user 24472 33/50 current_auc = 0.8333333333333334
User 24472 AUC after training: 0.8323836657169991
User 24472 does not improve AUC. Reverting changes.
Training on augumented user 72640 34/50 current_auc = 0.8333333333333334
User 72640 AUC after training: 0.8323836657169991
User 72640 does not improve AUC. Reverting changes.
Training on augumented user 110392 35/50 current_auc = 0.8333333333333334
User 110392 AUC after training: 0.8304843304843305
User 110392 does not improve AUC. Reverting changes.
Training on augumented user 136948 36/50 current_auc = 0.8333333333333334
User 136948 AUC after training: 0.8323836657169991
User 136948 does not improve AUC. Reverting changes.
Training on augumented user 53148 37/50 current_auc = 0.8333333333333334
User 53148 AUC after training: 0.8323836657169991
User 53148 does not improve AUC. Reverting changes.
Training on augumented user 47643 38/50 current_auc = 0.8333333333333334
User 47643 AUC after training: 0.8304843304843305
User 47643 does not improve AUC. Reverting changes.
Training on augumented user 65232 39/50 current_auc = 0.8333333333333334
User 65232 AUC after training: 0.8323836657169991
User 65232 does not improve AUC. Reverting changes.
Training on augumented user 132472 40/50 current_auc = 0.8333333333333334
User 132472 AUC after training: 0.8333333333333333
User 132472 does not improve AUC. Reverting changes.
Training on augumented user 26716 41/50 current_auc = 0.8333333333333334
User 26716 AUC after training: 0.8333333333333334
User 26716 does not improve AUC. Reverting changes.
Training on augumented user 82451 42/50 current_auc = 0.8333333333333334
User 82451 AUC after training: 0.8319088319088318
User 82451 does not improve AUC. Reverting changes.
Training on augumented user 9700 43/50 current_auc = 0.8333333333333334
User 9700 AUC after training: 0.8323836657169991
User 9700 does not improve AUC. Reverting changes.
Training on augumented user 126019 44/50 current_auc = 0.8333333333333334
User 126019 AUC after training: 0.8323836657169991
User 126019 does not improve AUC. Reverting changes.
Training on augumented user 33302 45/50 current_auc = 0.8333333333333334
User 33302 AUC after training: 0.8323836657169991
User 33302 does not improve AUC. Reverting changes.
Training on augumented user 49460 46/50 current_auc = 0.8333333333333334
User 49460 AUC after training: 0.8290598290598291
User 49460 does not improve AUC. Reverting changes.
Training on augumented user 137103 47/50 current_auc = 0.8333333333333334
User 137103 AUC after training: 0.8304843304843305
User 137103 does not improve AUC. Reverting changes.
Training on augumented user 72623 48/50 current_auc = 0.8333333333333334
User 72623 AUC after training: 0.8333333333333334
User 72623 does not improve AUC. Reverting changes.
Training on augumented user 12789 49/50 current_auc = 0.8333333333333334
User 12789 AUC after training: 0.8347578347578347
User 12789 improves AUC. Keeping the model.
[2024-12-02 18:21:15.017030] start test user 98038 79/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:21:15.535607] start test user 98038 79/567 recall augumented users by random, augumented_users = [121367, 32830, 128966, 87508, 7546, 81350, 21509, 52198, 31003, 70429, 74712, 39041, 15572, 78842, 21969, 62809, 37729, 94636, 95162, 54857, 124955, 26622, 72012, 64537, 30880, 4527, 64247, 61536, 26152, 5504, 137657, 21137, 108083, 1609, 49121, 3661, 61605, 110322, 125897, 46364, 122002, 56600, 124554, 58139, 768, 98581, 107335, 21678, 37338, 9726]
[2024-12-02 18:21:15.551149] user = 98038 Cloud 79/567
[2024-12-02 18:21:15.575295] user = 98038 Local 79/567
[2024-12-02 18:21:15.660160] user = 98038 Local+ 79/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:21:18.898353] user = 98038 MPDA- 79/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8089726631393298
Training on augumented user 121367 0/50 current_auc = 0.8089726631393298
User 121367 AUC after training: 0.8094686948853616
User 121367 improves AUC. Keeping the model.
Training on augumented user 32830 1/50 current_auc = 0.8094686948853616
User 32830 AUC after training: 0.8093584656084655
User 32830 does not improve AUC. Reverting changes.
Training on augumented user 128966 2/50 current_auc = 0.8094686948853616
User 128966 AUC after training: 0.8093584656084655
User 128966 does not improve AUC. Reverting changes.
Training on augumented user 87508 3/50 current_auc = 0.8094686948853616
User 87508 AUC after training: 0.8097442680776014
User 87508 improves AUC. Keeping the model.
Training on augumented user 7546 4/50 current_auc = 0.8097442680776014
User 7546 AUC after training: 0.8093584656084657
User 7546 does not improve AUC. Reverting changes.
Training on augumented user 81350 5/50 current_auc = 0.8097442680776014
User 81350 AUC after training: 0.8089726631393298
User 81350 does not improve AUC. Reverting changes.
Training on augumented user 21509 6/50 current_auc = 0.8097442680776014
User 21509 AUC after training: 0.8097993827160493
User 21509 improves AUC. Keeping the model.
Training on augumented user 52198 7/50 current_auc = 0.8097993827160493
User 52198 AUC after training: 0.8098544973544973
User 52198 improves AUC. Keeping the model.
Training on augumented user 31003 8/50 current_auc = 0.8098544973544973
User 31003 AUC after training: 0.8101300705467372
User 31003 improves AUC. Keeping the model.
Training on augumented user 70429 9/50 current_auc = 0.8101300705467372
User 70429 AUC after training: 0.8095789241622574
User 70429 does not improve AUC. Reverting changes.
Training on augumented user 74712 10/50 current_auc = 0.8101300705467372
User 74712 AUC after training: 0.8097718253968252
User 74712 does not improve AUC. Reverting changes.
Training on augumented user 39041 11/50 current_auc = 0.8101300705467372
User 39041 AUC after training: 0.8100198412698413
User 39041 does not improve AUC. Reverting changes.
Training on augumented user 15572 12/50 current_auc = 0.8101300705467372
User 15572 AUC after training: 0.8099647266313933
User 15572 does not improve AUC. Reverting changes.
Training on augumented user 78842 13/50 current_auc = 0.8101300705467372
User 78842 AUC after training: 0.8096615961199295
User 78842 does not improve AUC. Reverting changes.
Training on augumented user 21969 14/50 current_auc = 0.8101300705467372
User 21969 AUC after training: 0.8098544973544973
User 21969 does not improve AUC. Reverting changes.
Training on augumented user 62809 15/50 current_auc = 0.8101300705467372
User 62809 AUC after training: 0.8098544973544973
User 62809 does not improve AUC. Reverting changes.
Training on augumented user 37729 16/50 current_auc = 0.8101300705467372
User 37729 AUC after training: 0.8098544973544973
User 37729 does not improve AUC. Reverting changes.
Training on augumented user 94636 17/50 current_auc = 0.8101300705467372
User 94636 AUC after training: 0.8096340388007054
User 94636 does not improve AUC. Reverting changes.
Training on augumented user 95162 18/50 current_auc = 0.8101300705467372
User 95162 AUC after training: 0.8097442680776015
User 95162 does not improve AUC. Reverting changes.
Training on augumented user 54857 19/50 current_auc = 0.8101300705467372
User 54857 AUC after training: 0.8102402998236332
User 54857 improves AUC. Keeping the model.
Training on augumented user 124955 20/50 current_auc = 0.8102402998236332
User 124955 AUC after training: 0.8099647266313932
User 124955 does not improve AUC. Reverting changes.
Training on augumented user 26622 21/50 current_auc = 0.8102402998236332
User 26622 AUC after training: 0.8095789241622574
User 26622 does not improve AUC. Reverting changes.
Training on augumented user 72012 22/50 current_auc = 0.8102402998236332
User 72012 AUC after training: 0.810240299823633
User 72012 does not improve AUC. Reverting changes.
Training on augumented user 64537 23/50 current_auc = 0.8102402998236332
User 64537 AUC after training: 0.8107363315696648
User 64537 improves AUC. Keeping the model.
Training on augumented user 30880 24/50 current_auc = 0.8107363315696648
User 30880 AUC after training: 0.810598544973545
User 30880 does not improve AUC. Reverting changes.
Training on augumented user 4527 25/50 current_auc = 0.8107363315696648
User 4527 AUC after training: 0.8106812169312169
User 4527 does not improve AUC. Reverting changes.
Training on augumented user 64247 26/50 current_auc = 0.8107363315696648
User 64247 AUC after training: 0.8105158730158729
User 64247 does not improve AUC. Reverting changes.
Training on augumented user 61536 27/50 current_auc = 0.8107363315696648
User 61536 AUC after training: 0.8101851851851851
User 61536 does not improve AUC. Reverting changes.
Training on augumented user 26152 28/50 current_auc = 0.8107363315696648
User 26152 AUC after training: 0.8102127425044092
User 26152 does not improve AUC. Reverting changes.
Training on augumented user 5504 29/50 current_auc = 0.8107363315696648
User 5504 AUC after training: 0.8097718253968254
User 5504 does not improve AUC. Reverting changes.
Training on augumented user 137657 30/50 current_auc = 0.8107363315696648
User 137657 AUC after training: 0.8096891534391534
User 137657 does not improve AUC. Reverting changes.
Training on augumented user 21137 31/50 current_auc = 0.8107363315696648
User 21137 AUC after training: 0.8095513668430334
User 21137 does not improve AUC. Reverting changes.
Training on augumented user 108083 32/50 current_auc = 0.8107363315696648
User 108083 AUC after training: 0.8105158730158729
User 108083 does not improve AUC. Reverting changes.
Training on augumented user 1609 33/50 current_auc = 0.8107363315696648
User 1609 AUC after training: 0.8107363315696648
User 1609 does not improve AUC. Reverting changes.
Training on augumented user 49121 34/50 current_auc = 0.8107363315696648
User 49121 AUC after training: 0.8093309082892416
User 49121 does not improve AUC. Reverting changes.
Training on augumented user 3661 35/50 current_auc = 0.8107363315696648
User 3661 AUC after training: 0.8104607583774252
User 3661 does not improve AUC. Reverting changes.
Training on augumented user 61605 36/50 current_auc = 0.8107363315696648
User 61605 AUC after training: 0.8096615961199293
User 61605 does not improve AUC. Reverting changes.
Training on augumented user 110322 37/50 current_auc = 0.8107363315696648
User 110322 AUC after training: 0.8105158730158729
User 110322 does not improve AUC. Reverting changes.
Training on augumented user 125897 38/50 current_auc = 0.8107363315696648
User 125897 AUC after training: 0.810653659611993
User 125897 does not improve AUC. Reverting changes.
Training on augumented user 46364 39/50 current_auc = 0.8107363315696648
User 46364 AUC after training: 0.810295414462081
User 46364 does not improve AUC. Reverting changes.
Training on augumented user 122002 40/50 current_auc = 0.8107363315696648
User 122002 AUC after training: 0.8106261022927689
User 122002 does not improve AUC. Reverting changes.
Training on augumented user 56600 41/50 current_auc = 0.8107363315696648
User 56600 AUC after training: 0.8105158730158729
User 56600 does not improve AUC. Reverting changes.
Training on augumented user 124554 42/50 current_auc = 0.8107363315696648
User 124554 AUC after training: 0.810570987654321
User 124554 does not improve AUC. Reverting changes.
Training on augumented user 58139 43/50 current_auc = 0.8107363315696648
User 58139 AUC after training: 0.8086419753086419
User 58139 does not improve AUC. Reverting changes.
Training on augumented user 768 44/50 current_auc = 0.8107363315696648
User 768 AUC after training: 0.808779761904762
User 768 does not improve AUC. Reverting changes.
Training on augumented user 98581 45/50 current_auc = 0.8107363315696648
User 98581 AUC after training: 0.8097167107583773
User 98581 does not improve AUC. Reverting changes.
Training on augumented user 107335 46/50 current_auc = 0.8107363315696648
User 107335 AUC after training: 0.8096615961199295
User 107335 does not improve AUC. Reverting changes.
Training on augumented user 21678 47/50 current_auc = 0.8107363315696648
User 21678 AUC after training: 0.8092757936507936
User 21678 does not improve AUC. Reverting changes.
Training on augumented user 37338 48/50 current_auc = 0.8107363315696648
User 37338 AUC after training: 0.8102402998236331
User 37338 does not improve AUC. Reverting changes.
Training on augumented user 9726 49/50 current_auc = 0.8107363315696648
User 9726 AUC after training: 0.8100198412698413
User 9726 does not improve AUC. Reverting changes.
[2024-12-02 18:21:52.712556] start test user 98076 80/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:21:53.312959] start test user 98076 80/567 recall augumented users by random, augumented_users = [40746, 103088, 7893, 66139, 85110, 125833, 111525, 114694, 61067, 135294, 66084, 54176, 13539, 125697, 138259, 84723, 79114, 102055, 82187, 29060, 91150, 28799, 113315, 36230, 123227, 4222, 16770, 79204, 42624, 11895, 18609, 94620, 45928, 18597, 74536, 110667, 80384, 45351, 100484, 86543, 11722, 66707, 2292, 82532, 106169, 39763, 70173, 113158, 89425, 126138]
[2024-12-02 18:21:53.329577] user = 98076 Cloud 80/567
[2024-12-02 18:21:53.339551] user = 98076 Local 80/567
[2024-12-02 18:21:53.367740] user = 98076 Local+ 80/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:21:55.707132] user = 98076 MPDA- 80/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.0
Training on augumented user 40746 0/50 current_auc = 0.0
User 40746 AUC after training: 0.0
User 40746 does not improve AUC. Reverting changes.
Training on augumented user 103088 1/50 current_auc = 0.0
User 103088 AUC after training: 0.0
User 103088 does not improve AUC. Reverting changes.
Training on augumented user 7893 2/50 current_auc = 0.0
User 7893 AUC after training: 0.0
User 7893 does not improve AUC. Reverting changes.
Training on augumented user 66139 3/50 current_auc = 0.0
User 66139 AUC after training: 0.0
User 66139 does not improve AUC. Reverting changes.
Training on augumented user 85110 4/50 current_auc = 0.0
User 85110 AUC after training: 0.0
User 85110 does not improve AUC. Reverting changes.
Training on augumented user 125833 5/50 current_auc = 0.0
User 125833 AUC after training: 0.0
User 125833 does not improve AUC. Reverting changes.
Training on augumented user 111525 6/50 current_auc = 0.0
User 111525 AUC after training: 0.0
User 111525 does not improve AUC. Reverting changes.
Training on augumented user 114694 7/50 current_auc = 0.0
User 114694 AUC after training: 0.0
User 114694 does not improve AUC. Reverting changes.
Training on augumented user 61067 8/50 current_auc = 0.0
User 61067 AUC after training: 0.0
User 61067 does not improve AUC. Reverting changes.
Training on augumented user 135294 9/50 current_auc = 0.0
User 135294 AUC after training: 0.0
User 135294 does not improve AUC. Reverting changes.
Training on augumented user 66084 10/50 current_auc = 0.0
User 66084 AUC after training: 0.0
User 66084 does not improve AUC. Reverting changes.
Training on augumented user 54176 11/50 current_auc = 0.0
User 54176 AUC after training: 0.0
User 54176 does not improve AUC. Reverting changes.
Training on augumented user 13539 12/50 current_auc = 0.0
User 13539 AUC after training: 0.0
User 13539 does not improve AUC. Reverting changes.
Training on augumented user 125697 13/50 current_auc = 0.0
User 125697 AUC after training: 0.0
User 125697 does not improve AUC. Reverting changes.
Training on augumented user 138259 14/50 current_auc = 0.0
User 138259 AUC after training: 0.0
User 138259 does not improve AUC. Reverting changes.
Training on augumented user 84723 15/50 current_auc = 0.0
User 84723 AUC after training: 0.0
User 84723 does not improve AUC. Reverting changes.
Training on augumented user 79114 16/50 current_auc = 0.0
User 79114 AUC after training: 0.0
User 79114 does not improve AUC. Reverting changes.
Training on augumented user 102055 17/50 current_auc = 0.0
User 102055 AUC after training: 0.0
User 102055 does not improve AUC. Reverting changes.
Training on augumented user 82187 18/50 current_auc = 0.0
User 82187 AUC after training: 0.0
User 82187 does not improve AUC. Reverting changes.
Training on augumented user 29060 19/50 current_auc = 0.0
User 29060 AUC after training: 0.0
User 29060 does not improve AUC. Reverting changes.
Training on augumented user 91150 20/50 current_auc = 0.0
User 91150 AUC after training: 0.0
User 91150 does not improve AUC. Reverting changes.
Training on augumented user 28799 21/50 current_auc = 0.0
User 28799 AUC after training: 0.0
User 28799 does not improve AUC. Reverting changes.
Training on augumented user 113315 22/50 current_auc = 0.0
User 113315 AUC after training: 0.0
User 113315 does not improve AUC. Reverting changes.
Training on augumented user 36230 23/50 current_auc = 0.0
User 36230 AUC after training: 0.0
User 36230 does not improve AUC. Reverting changes.
Training on augumented user 123227 24/50 current_auc = 0.0
User 123227 AUC after training: 0.0
User 123227 does not improve AUC. Reverting changes.
Training on augumented user 4222 25/50 current_auc = 0.0
User 4222 AUC after training: 0.0
User 4222 does not improve AUC. Reverting changes.
Training on augumented user 16770 26/50 current_auc = 0.0
User 16770 AUC after training: 0.0
User 16770 does not improve AUC. Reverting changes.
Training on augumented user 79204 27/50 current_auc = 0.0
User 79204 AUC after training: 0.0
User 79204 does not improve AUC. Reverting changes.
Training on augumented user 42624 28/50 current_auc = 0.0
User 42624 AUC after training: 0.0
User 42624 does not improve AUC. Reverting changes.
Training on augumented user 11895 29/50 current_auc = 0.0
User 11895 AUC after training: 0.0
User 11895 does not improve AUC. Reverting changes.
Training on augumented user 18609 30/50 current_auc = 0.0
User 18609 AUC after training: 0.0
User 18609 does not improve AUC. Reverting changes.
Training on augumented user 94620 31/50 current_auc = 0.0
User 94620 AUC after training: 0.0
User 94620 does not improve AUC. Reverting changes.
Training on augumented user 45928 32/50 current_auc = 0.0
User 45928 AUC after training: 0.0
User 45928 does not improve AUC. Reverting changes.
Training on augumented user 18597 33/50 current_auc = 0.0
User 18597 AUC after training: 0.0
User 18597 does not improve AUC. Reverting changes.
Training on augumented user 74536 34/50 current_auc = 0.0
User 74536 AUC after training: 0.0
User 74536 does not improve AUC. Reverting changes.
Training on augumented user 110667 35/50 current_auc = 0.0
User 110667 AUC after training: 0.0
User 110667 does not improve AUC. Reverting changes.
Training on augumented user 80384 36/50 current_auc = 0.0
User 80384 AUC after training: 0.0
User 80384 does not improve AUC. Reverting changes.
Training on augumented user 45351 37/50 current_auc = 0.0
User 45351 AUC after training: 0.0
User 45351 does not improve AUC. Reverting changes.
Training on augumented user 100484 38/50 current_auc = 0.0
User 100484 AUC after training: 0.0
User 100484 does not improve AUC. Reverting changes.
Training on augumented user 86543 39/50 current_auc = 0.0
User 86543 AUC after training: 0.0
User 86543 does not improve AUC. Reverting changes.
Training on augumented user 11722 40/50 current_auc = 0.0
User 11722 AUC after training: 0.0
User 11722 does not improve AUC. Reverting changes.
Training on augumented user 66707 41/50 current_auc = 0.0
User 66707 AUC after training: 0.0
User 66707 does not improve AUC. Reverting changes.
Training on augumented user 2292 42/50 current_auc = 0.0
User 2292 AUC after training: 0.0
User 2292 does not improve AUC. Reverting changes.
Training on augumented user 82532 43/50 current_auc = 0.0
User 82532 AUC after training: 0.0
User 82532 does not improve AUC. Reverting changes.
Training on augumented user 106169 44/50 current_auc = 0.0
User 106169 AUC after training: 0.0
User 106169 does not improve AUC. Reverting changes.
Training on augumented user 39763 45/50 current_auc = 0.0
User 39763 AUC after training: 0.0
User 39763 does not improve AUC. Reverting changes.
Training on augumented user 70173 46/50 current_auc = 0.0
User 70173 AUC after training: 0.0
User 70173 does not improve AUC. Reverting changes.
Training on augumented user 113158 47/50 current_auc = 0.0
User 113158 AUC after training: 0.0
User 113158 does not improve AUC. Reverting changes.
Training on augumented user 89425 48/50 current_auc = 0.0
User 89425 AUC after training: 0.0
User 89425 does not improve AUC. Reverting changes.
Training on augumented user 126138 49/50 current_auc = 0.0
User 126138 AUC after training: 0.0
User 126138 does not improve AUC. Reverting changes.
[2024-12-02 18:22:26.748683] start test user 98108 81/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:22:27.228106] start test user 98108 81/567 recall augumented users by random, augumented_users = [11605, 94716, 79838, 126711, 27285, 105492, 125958, 86410, 81972, 126004, 87204, 128182, 125776, 100739, 73355, 94110, 127656, 115266, 115207, 121621, 15782, 94980, 74718, 54895, 44067, 67828, 39868, 115289, 57821, 31895, 52325, 62598, 33854, 110312, 67641, 36764, 129238, 74301, 40692, 754, 90811, 66980, 90710, 83379, 5231, 93506, 51588, 67068, 33818, 30916]
[2024-12-02 18:22:27.243655] user = 98108 Cloud 81/567
[2024-12-02 18:22:27.268358] user = 98108 Local 81/567
[2024-12-02 18:22:27.325720] user = 98108 Local+ 81/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:22:30.561026] user = 98108 MPDA- 81/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.564927857935627
Training on augumented user 11605 0/50 current_auc = 0.564927857935627
User 11605 AUC after training: 0.562708102108768
User 11605 does not improve AUC. Reverting changes.
Training on augumented user 94716 1/50 current_auc = 0.564927857935627
User 94716 AUC after training: 0.5654827968923418
User 94716 improves AUC. Keeping the model.
Training on augumented user 79838 2/50 current_auc = 0.5654827968923418
User 79838 AUC after training: 0.564927857935627
User 79838 does not improve AUC. Reverting changes.
Training on augumented user 126711 3/50 current_auc = 0.5654827968923418
User 126711 AUC after training: 0.5654827968923418
User 126711 does not improve AUC. Reverting changes.
Training on augumented user 27285 4/50 current_auc = 0.5654827968923418
User 27285 AUC after training: 0.564927857935627
User 27285 does not improve AUC. Reverting changes.
Training on augumented user 105492 5/50 current_auc = 0.5654827968923418
User 105492 AUC after training: 0.5643729189789123
User 105492 does not improve AUC. Reverting changes.
Training on augumented user 125958 6/50 current_auc = 0.5654827968923418
User 125958 AUC after training: 0.5654827968923417
User 125958 does not improve AUC. Reverting changes.
Training on augumented user 86410 7/50 current_auc = 0.5654827968923418
User 86410 AUC after training: 0.5652053274139844
User 86410 does not improve AUC. Reverting changes.
Training on augumented user 81972 8/50 current_auc = 0.5654827968923418
User 81972 AUC after training: 0.5654827968923418
User 81972 does not improve AUC. Reverting changes.
Training on augumented user 126004 9/50 current_auc = 0.5654827968923418
User 126004 AUC after training: 0.5660377358490566
User 126004 improves AUC. Keeping the model.
Training on augumented user 87204 10/50 current_auc = 0.5660377358490566
User 87204 AUC after training: 0.5643729189789123
User 87204 does not improve AUC. Reverting changes.
Training on augumented user 128182 11/50 current_auc = 0.5660377358490566
User 128182 AUC after training: 0.5660377358490565
User 128182 does not improve AUC. Reverting changes.
Training on augumented user 125776 12/50 current_auc = 0.5660377358490566
User 125776 AUC after training: 0.5654827968923417
User 125776 does not improve AUC. Reverting changes.
Training on augumented user 100739 13/50 current_auc = 0.5660377358490566
User 100739 AUC after training: 0.564927857935627
User 100739 does not improve AUC. Reverting changes.
Training on augumented user 73355 14/50 current_auc = 0.5660377358490566
User 73355 AUC after training: 0.5654827968923418
User 73355 does not improve AUC. Reverting changes.
Training on augumented user 94110 15/50 current_auc = 0.5660377358490566
User 94110 AUC after training: 0.5654827968923418
User 94110 does not improve AUC. Reverting changes.
Training on augumented user 127656 16/50 current_auc = 0.5660377358490566
User 127656 AUC after training: 0.5654827968923418
User 127656 does not improve AUC. Reverting changes.
Training on augumented user 115266 17/50 current_auc = 0.5660377358490566
User 115266 AUC after training: 0.564927857935627
User 115266 does not improve AUC. Reverting changes.
Training on augumented user 115207 18/50 current_auc = 0.5660377358490566
User 115207 AUC after training: 0.5654827968923418
User 115207 does not improve AUC. Reverting changes.
Training on augumented user 121621 19/50 current_auc = 0.5660377358490566
User 121621 AUC after training: 0.5654827968923418
User 121621 does not improve AUC. Reverting changes.
Training on augumented user 15782 20/50 current_auc = 0.5660377358490566
User 15782 AUC after training: 0.5654827968923418
User 15782 does not improve AUC. Reverting changes.
Training on augumented user 94980 21/50 current_auc = 0.5660377358490566
User 94980 AUC after training: 0.5638179800221975
User 94980 does not improve AUC. Reverting changes.
Training on augumented user 74718 22/50 current_auc = 0.5660377358490566
User 74718 AUC after training: 0.5660377358490566
User 74718 does not improve AUC. Reverting changes.
Training on augumented user 54895 23/50 current_auc = 0.5660377358490566
User 54895 AUC after training: 0.564927857935627
User 54895 does not improve AUC. Reverting changes.
Training on augumented user 44067 24/50 current_auc = 0.5660377358490566
User 44067 AUC after training: 0.5660377358490566
User 44067 does not improve AUC. Reverting changes.
Training on augumented user 67828 25/50 current_auc = 0.5660377358490566
User 67828 AUC after training: 0.564927857935627
User 67828 does not improve AUC. Reverting changes.
Training on augumented user 39868 26/50 current_auc = 0.5660377358490566
User 39868 AUC after training: 0.5660377358490566
User 39868 does not improve AUC. Reverting changes.
Training on augumented user 115289 27/50 current_auc = 0.5660377358490566
User 115289 AUC after training: 0.5665926748057714
User 115289 improves AUC. Keeping the model.
Training on augumented user 57821 28/50 current_auc = 0.5665926748057714
User 57821 AUC after training: 0.5660377358490566
User 57821 does not improve AUC. Reverting changes.
Training on augumented user 31895 29/50 current_auc = 0.5665926748057714
User 31895 AUC after training: 0.5660377358490566
User 31895 does not improve AUC. Reverting changes.
Training on augumented user 52325 30/50 current_auc = 0.5665926748057714
User 52325 AUC after training: 0.564927857935627
User 52325 does not improve AUC. Reverting changes.
Training on augumented user 62598 31/50 current_auc = 0.5665926748057714
User 62598 AUC after training: 0.5660377358490566
User 62598 does not improve AUC. Reverting changes.
Training on augumented user 33854 32/50 current_auc = 0.5665926748057714
User 33854 AUC after training: 0.5671476137624861
User 33854 improves AUC. Keeping the model.
Training on augumented user 110312 33/50 current_auc = 0.5671476137624861
User 110312 AUC after training: 0.5665926748057714
User 110312 does not improve AUC. Reverting changes.
Training on augumented user 67641 34/50 current_auc = 0.5671476137624861
User 67641 AUC after training: 0.5677025527192009
User 67641 improves AUC. Keeping the model.
Training on augumented user 36764 35/50 current_auc = 0.5677025527192009
User 36764 AUC after training: 0.5665926748057714
User 36764 does not improve AUC. Reverting changes.
Training on augumented user 129238 36/50 current_auc = 0.5677025527192009
User 129238 AUC after training: 0.564927857935627
User 129238 does not improve AUC. Reverting changes.
Training on augumented user 74301 37/50 current_auc = 0.5677025527192009
User 74301 AUC after training: 0.5665926748057714
User 74301 does not improve AUC. Reverting changes.
Training on augumented user 40692 38/50 current_auc = 0.5677025527192009
User 40692 AUC after training: 0.5665926748057714
User 40692 does not improve AUC. Reverting changes.
Training on augumented user 754 39/50 current_auc = 0.5677025527192009
User 754 AUC after training: 0.5671476137624861
User 754 does not improve AUC. Reverting changes.
Training on augumented user 90811 40/50 current_auc = 0.5677025527192009
User 90811 AUC after training: 0.5671476137624861
User 90811 does not improve AUC. Reverting changes.
Training on augumented user 66980 41/50 current_auc = 0.5677025527192009
User 66980 AUC after training: 0.5671476137624861
User 66980 does not improve AUC. Reverting changes.
Training on augumented user 90710 42/50 current_auc = 0.5677025527192009
User 90710 AUC after training: 0.5671476137624861
User 90710 does not improve AUC. Reverting changes.
Training on augumented user 83379 43/50 current_auc = 0.5677025527192009
User 83379 AUC after training: 0.5665926748057714
User 83379 does not improve AUC. Reverting changes.
Training on augumented user 5231 44/50 current_auc = 0.5677025527192009
User 5231 AUC after training: 0.5654827968923419
User 5231 does not improve AUC. Reverting changes.
Training on augumented user 93506 45/50 current_auc = 0.5677025527192009
User 93506 AUC after training: 0.5654827968923418
User 93506 does not improve AUC. Reverting changes.
Training on augumented user 51588 46/50 current_auc = 0.5677025527192009
User 51588 AUC after training: 0.5671476137624861
User 51588 does not improve AUC. Reverting changes.
Training on augumented user 67068 47/50 current_auc = 0.5677025527192009
User 67068 AUC after training: 0.5654827968923418
User 67068 does not improve AUC. Reverting changes.
Training on augumented user 33818 48/50 current_auc = 0.5677025527192009
User 33818 AUC after training: 0.5654827968923418
User 33818 does not improve AUC. Reverting changes.
Training on augumented user 30916 49/50 current_auc = 0.5677025527192009
User 30916 AUC after training: 0.5671476137624861
User 30916 does not improve AUC. Reverting changes.
[2024-12-02 18:23:01.988942] start test user 98113 82/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:23:02.599634] start test user 98113 82/567 recall augumented users by random, augumented_users = [104703, 22936, 130632, 16232, 528, 6708, 76546, 73270, 90087, 96580, 93151, 52522, 99351, 71612, 41149, 17145, 34434, 9102, 79412, 90401, 83911, 8678, 28498, 123282, 61937, 106025, 124001, 118765, 128884, 75992, 57318, 113644, 11657, 10012, 36153, 50769, 48607, 93252, 68981, 76022, 58830, 46619, 103691, 17631, 82645, 16808, 125490, 38972, 30970, 95266]
[2024-12-02 18:23:02.623971] user = 98113 Cloud 82/567
[2024-12-02 18:23:02.635623] user = 98113 Local 82/567
[2024-12-02 18:23:02.849006] user = 98113 Local+ 82/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:23:05.449863] user = 98113 MPDA- 82/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7051282051282051
Training on augumented user 104703 0/50 current_auc = 0.7051282051282051
User 104703 AUC after training: 0.7051282051282051
User 104703 does not improve AUC. Reverting changes.
Training on augumented user 22936 1/50 current_auc = 0.7051282051282051
User 22936 AUC after training: 0.7115384615384616
User 22936 improves AUC. Keeping the model.
Training on augumented user 130632 2/50 current_auc = 0.7115384615384616
User 130632 AUC after training: 0.7115384615384616
User 130632 does not improve AUC. Reverting changes.
Training on augumented user 16232 3/50 current_auc = 0.7115384615384616
User 16232 AUC after training: 0.7051282051282051
User 16232 does not improve AUC. Reverting changes.
Training on augumented user 528 4/50 current_auc = 0.7115384615384616
User 528 AUC after training: 0.7115384615384616
User 528 does not improve AUC. Reverting changes.
Training on augumented user 6708 5/50 current_auc = 0.7115384615384616
User 6708 AUC after training: 0.7115384615384616
User 6708 does not improve AUC. Reverting changes.
Training on augumented user 76546 6/50 current_auc = 0.7115384615384616
User 76546 AUC after training: 0.7115384615384616
User 76546 does not improve AUC. Reverting changes.
Training on augumented user 73270 7/50 current_auc = 0.7115384615384616
User 73270 AUC after training: 0.7051282051282051
User 73270 does not improve AUC. Reverting changes.
Training on augumented user 90087 8/50 current_auc = 0.7115384615384616
User 90087 AUC after training: 0.7051282051282051
User 90087 does not improve AUC. Reverting changes.
Training on augumented user 96580 9/50 current_auc = 0.7115384615384616
User 96580 AUC after training: 0.7115384615384616
User 96580 does not improve AUC. Reverting changes.
Training on augumented user 93151 10/50 current_auc = 0.7115384615384616
User 93151 AUC after training: 0.7115384615384616
User 93151 does not improve AUC. Reverting changes.
Training on augumented user 52522 11/50 current_auc = 0.7115384615384616
User 52522 AUC after training: 0.7115384615384616
User 52522 does not improve AUC. Reverting changes.
Training on augumented user 99351 12/50 current_auc = 0.7115384615384616
User 99351 AUC after training: 0.7115384615384616
User 99351 does not improve AUC. Reverting changes.
Training on augumented user 71612 13/50 current_auc = 0.7115384615384616
User 71612 AUC after training: 0.7051282051282051
User 71612 does not improve AUC. Reverting changes.
Training on augumented user 41149 14/50 current_auc = 0.7115384615384616
User 41149 AUC after training: 0.7115384615384616
User 41149 does not improve AUC. Reverting changes.
Training on augumented user 17145 15/50 current_auc = 0.7115384615384616
User 17145 AUC after training: 0.7115384615384616
User 17145 does not improve AUC. Reverting changes.
Training on augumented user 34434 16/50 current_auc = 0.7115384615384616
User 34434 AUC after training: 0.7051282051282051
User 34434 does not improve AUC. Reverting changes.
Training on augumented user 9102 17/50 current_auc = 0.7115384615384616
User 9102 AUC after training: 0.7115384615384616
User 9102 does not improve AUC. Reverting changes.
Training on augumented user 79412 18/50 current_auc = 0.7115384615384616
User 79412 AUC after training: 0.7115384615384616
User 79412 does not improve AUC. Reverting changes.
Training on augumented user 90401 19/50 current_auc = 0.7115384615384616
User 90401 AUC after training: 0.7115384615384616
User 90401 does not improve AUC. Reverting changes.
Training on augumented user 83911 20/50 current_auc = 0.7115384615384616
User 83911 AUC after training: 0.7115384615384616
User 83911 does not improve AUC. Reverting changes.
Training on augumented user 8678 21/50 current_auc = 0.7115384615384616
User 8678 AUC after training: 0.7051282051282051
User 8678 does not improve AUC. Reverting changes.
Training on augumented user 28498 22/50 current_auc = 0.7115384615384616
User 28498 AUC after training: 0.7115384615384616
User 28498 does not improve AUC. Reverting changes.
Training on augumented user 123282 23/50 current_auc = 0.7115384615384616
User 123282 AUC after training: 0.7115384615384616
User 123282 does not improve AUC. Reverting changes.
Training on augumented user 61937 24/50 current_auc = 0.7115384615384616
User 61937 AUC after training: 0.7115384615384616
User 61937 does not improve AUC. Reverting changes.
Training on augumented user 106025 25/50 current_auc = 0.7115384615384616
User 106025 AUC after training: 0.7115384615384616
User 106025 does not improve AUC. Reverting changes.
Training on augumented user 124001 26/50 current_auc = 0.7115384615384616
User 124001 AUC after training: 0.7115384615384616
User 124001 does not improve AUC. Reverting changes.
Training on augumented user 118765 27/50 current_auc = 0.7115384615384616
User 118765 AUC after training: 0.7115384615384616
User 118765 does not improve AUC. Reverting changes.
Training on augumented user 128884 28/50 current_auc = 0.7115384615384616
User 128884 AUC after training: 0.7115384615384616
User 128884 does not improve AUC. Reverting changes.
Training on augumented user 75992 29/50 current_auc = 0.7115384615384616
User 75992 AUC after training: 0.7115384615384616
User 75992 does not improve AUC. Reverting changes.
Training on augumented user 57318 30/50 current_auc = 0.7115384615384616
User 57318 AUC after training: 0.7051282051282051
User 57318 does not improve AUC. Reverting changes.
Training on augumented user 113644 31/50 current_auc = 0.7115384615384616
User 113644 AUC after training: 0.7115384615384616
User 113644 does not improve AUC. Reverting changes.
Training on augumented user 11657 32/50 current_auc = 0.7115384615384616
User 11657 AUC after training: 0.7115384615384616
User 11657 does not improve AUC. Reverting changes.
Training on augumented user 10012 33/50 current_auc = 0.7115384615384616
User 10012 AUC after training: 0.7051282051282051
User 10012 does not improve AUC. Reverting changes.
Training on augumented user 36153 34/50 current_auc = 0.7115384615384616
User 36153 AUC after training: 0.7115384615384616
User 36153 does not improve AUC. Reverting changes.
Training on augumented user 50769 35/50 current_auc = 0.7115384615384616
User 50769 AUC after training: 0.7115384615384616
User 50769 does not improve AUC. Reverting changes.
Training on augumented user 48607 36/50 current_auc = 0.7115384615384616
User 48607 AUC after training: 0.7115384615384616
User 48607 does not improve AUC. Reverting changes.
Training on augumented user 93252 37/50 current_auc = 0.7115384615384616
User 93252 AUC after training: 0.7115384615384616
User 93252 does not improve AUC. Reverting changes.
Training on augumented user 68981 38/50 current_auc = 0.7115384615384616
User 68981 AUC after training: 0.7051282051282051
User 68981 does not improve AUC. Reverting changes.
Training on augumented user 76022 39/50 current_auc = 0.7115384615384616
User 76022 AUC after training: 0.7051282051282051
User 76022 does not improve AUC. Reverting changes.
Training on augumented user 58830 40/50 current_auc = 0.7115384615384616
User 58830 AUC after training: 0.7115384615384616
User 58830 does not improve AUC. Reverting changes.
Training on augumented user 46619 41/50 current_auc = 0.7115384615384616
User 46619 AUC after training: 0.7115384615384616
User 46619 does not improve AUC. Reverting changes.
Training on augumented user 103691 42/50 current_auc = 0.7115384615384616
User 103691 AUC after training: 0.7115384615384616
User 103691 does not improve AUC. Reverting changes.
Training on augumented user 17631 43/50 current_auc = 0.7115384615384616
User 17631 AUC after training: 0.7115384615384616
User 17631 does not improve AUC. Reverting changes.
Training on augumented user 82645 44/50 current_auc = 0.7115384615384616
User 82645 AUC after training: 0.7115384615384616
User 82645 does not improve AUC. Reverting changes.
Training on augumented user 16808 45/50 current_auc = 0.7115384615384616
User 16808 AUC after training: 0.7115384615384616
User 16808 does not improve AUC. Reverting changes.
Training on augumented user 125490 46/50 current_auc = 0.7115384615384616
User 125490 AUC after training: 0.7115384615384616
User 125490 does not improve AUC. Reverting changes.
Training on augumented user 38972 47/50 current_auc = 0.7115384615384616
User 38972 AUC after training: 0.7115384615384616
User 38972 does not improve AUC. Reverting changes.
Training on augumented user 30970 48/50 current_auc = 0.7115384615384616
User 30970 AUC after training: 0.7115384615384616
User 30970 does not improve AUC. Reverting changes.
Training on augumented user 95266 49/50 current_auc = 0.7115384615384616
User 95266 AUC after training: 0.7115384615384616
User 95266 does not improve AUC. Reverting changes.
[2024-12-02 18:23:34.873237] start test user 98186 83/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:23:35.353832] start test user 98186 83/567 recall augumented users by random, augumented_users = [80774, 82929, 35297, 126901, 8048, 23871, 113397, 137680, 95165, 19609, 43554, 43823, 12281, 98260, 78796, 41523, 110774, 91026, 72297, 46116, 93479, 128180, 119300, 112272, 15805, 1210, 137442, 39403, 48988, 91730, 87449, 18402, 20249, 123351, 114850, 134675, 69547, 24926, 128583, 102050, 3104, 64367, 49544, 63217, 52251, 26424, 125987, 110298, 102152, 100865]
[2024-12-02 18:23:35.368922] user = 98186 Cloud 83/567
[2024-12-02 18:23:35.416790] user = 98186 Local 83/567
[2024-12-02 18:23:35.459131] user = 98186 Local+ 83/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:23:38.075726] user = 98186 MPDA- 83/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7580901330156838
Training on augumented user 80774 0/50 current_auc = 0.7580901330156838
User 80774 AUC after training: 0.7582886638872344
User 80774 improves AUC. Keeping the model.
Training on augumented user 82929 1/50 current_auc = 0.7582886638872344
User 82929 AUC after training: 0.7582886638872344
User 82929 does not improve AUC. Reverting changes.
Training on augumented user 35297 2/50 current_auc = 0.7582886638872344
User 35297 AUC after training: 0.757395274965257
User 35297 does not improve AUC. Reverting changes.
Training on augumented user 126901 3/50 current_auc = 0.7582886638872344
User 126901 AUC after training: 0.7591820528092118
User 126901 improves AUC. Keeping the model.
Training on augumented user 8048 4/50 current_auc = 0.7591820528092118
User 8048 AUC after training: 0.7587849910661106
User 8048 does not improve AUC. Reverting changes.
Training on augumented user 23871 5/50 current_auc = 0.7591820528092118
User 23871 AUC after training: 0.7593805836807623
User 23871 improves AUC. Keeping the model.
Training on augumented user 113397 6/50 current_auc = 0.7593805836807623
User 113397 AUC after training: 0.7586857256303355
User 113397 does not improve AUC. Reverting changes.
Training on augumented user 137680 7/50 current_auc = 0.7593805836807623
User 137680 AUC after training: 0.7589835219376613
User 137680 does not improve AUC. Reverting changes.
Training on augumented user 95165 8/50 current_auc = 0.7593805836807623
User 95165 AUC after training: 0.758884256501886
User 95165 does not improve AUC. Reverting changes.
Training on augumented user 19609 9/50 current_auc = 0.7593805836807623
User 19609 AUC after training: 0.7599761762954139
User 19609 improves AUC. Keeping the model.
Training on augumented user 43554 10/50 current_auc = 0.7599761762954139
User 43554 AUC after training: 0.7597776454238634
User 43554 does not improve AUC. Reverting changes.
Training on augumented user 43823 11/50 current_auc = 0.7599761762954139
User 43823 AUC after training: 0.7606710343458408
User 43823 improves AUC. Keeping the model.
Training on augumented user 12281 12/50 current_auc = 0.7606710343458408
User 12281 AUC after training: 0.7608695652173912
User 12281 improves AUC. Keeping the model.
Training on augumented user 98260 13/50 current_auc = 0.7608695652173912
User 98260 AUC after training: 0.7607702997816159
User 98260 does not improve AUC. Reverting changes.
Training on augumented user 78796 14/50 current_auc = 0.7608695652173912
User 78796 AUC after training: 0.7595791145523129
User 78796 does not improve AUC. Reverting changes.
Training on augumented user 41523 15/50 current_auc = 0.7608695652173912
User 41523 AUC after training: 0.7605717689100655
User 41523 does not improve AUC. Reverting changes.
Training on augumented user 110774 16/50 current_auc = 0.7608695652173912
User 110774 AUC after training: 0.7601747071669644
User 110774 does not improve AUC. Reverting changes.
Training on augumented user 91026 17/50 current_auc = 0.7608695652173912
User 91026 AUC after training: 0.760770299781616
User 91026 does not improve AUC. Reverting changes.
Training on augumented user 72297 18/50 current_auc = 0.7608695652173912
User 72297 AUC after training: 0.7603732380385149
User 72297 does not improve AUC. Reverting changes.
Training on augumented user 46116 19/50 current_auc = 0.7608695652173912
User 46116 AUC after training: 0.7609688306531665
User 46116 improves AUC. Keeping the model.
Training on augumented user 93479 20/50 current_auc = 0.7609688306531665
User 93479 AUC after training: 0.760373238038515
User 93479 does not improve AUC. Reverting changes.
Training on augumented user 128180 21/50 current_auc = 0.7609688306531665
User 128180 AUC after training: 0.7607702997816159
User 128180 does not improve AUC. Reverting changes.
Training on augumented user 119300 22/50 current_auc = 0.7609688306531665
User 119300 AUC after training: 0.760373238038515
User 119300 does not improve AUC. Reverting changes.
Training on augumented user 112272 23/50 current_auc = 0.7609688306531665
User 112272 AUC after training: 0.7607702997816159
User 112272 does not improve AUC. Reverting changes.
Training on augumented user 15805 24/50 current_auc = 0.7609688306531665
User 15805 AUC after training: 0.7615644232678181
User 15805 improves AUC. Keeping the model.
Training on augumented user 1210 25/50 current_auc = 0.7615644232678181
User 1210 AUC after training: 0.7615644232678181
User 1210 does not improve AUC. Reverting changes.
Training on augumented user 137442 26/50 current_auc = 0.7615644232678181
User 137442 AUC after training: 0.7598769108596386
User 137442 does not improve AUC. Reverting changes.
Training on augumented user 39403 27/50 current_auc = 0.7615644232678181
User 39403 AUC after training: 0.7606710343458408
User 39403 does not improve AUC. Reverting changes.
Training on augumented user 48988 28/50 current_auc = 0.7615644232678181
User 48988 AUC after training: 0.7595791145523129
User 48988 does not improve AUC. Reverting changes.
Training on augumented user 91730 29/50 current_auc = 0.7615644232678181
User 91730 AUC after training: 0.7608695652173912
User 91730 does not improve AUC. Reverting changes.
Training on augumented user 87449 30/50 current_auc = 0.7615644232678181
User 87449 AUC after training: 0.7591820528092118
User 87449 does not improve AUC. Reverting changes.
Training on augumented user 18402 31/50 current_auc = 0.7615644232678181
User 18402 AUC after training: 0.7619614850109191
User 18402 improves AUC. Keeping the model.
Training on augumented user 20249 32/50 current_auc = 0.7619614850109191
User 20249 AUC after training: 0.760373238038515
User 20249 does not improve AUC. Reverting changes.
Training on augumented user 123351 33/50 current_auc = 0.7619614850109191
User 123351 AUC after training: 0.7593805836807623
User 123351 does not improve AUC. Reverting changes.
Training on augumented user 114850 34/50 current_auc = 0.7619614850109191
User 114850 AUC after training: 0.7605717689100655
User 114850 does not improve AUC. Reverting changes.
Training on augumented user 134675 35/50 current_auc = 0.7619614850109191
User 134675 AUC after training: 0.7589835219376613
User 134675 does not improve AUC. Reverting changes.
Training on augumented user 69547 36/50 current_auc = 0.7619614850109191
User 69547 AUC after training: 0.7605717689100654
User 69547 does not improve AUC. Reverting changes.
Training on augumented user 24926 37/50 current_auc = 0.7619614850109191
User 24926 AUC after training: 0.7601747071669644
User 24926 does not improve AUC. Reverting changes.
Training on augumented user 128583 38/50 current_auc = 0.7619614850109191
User 128583 AUC after training: 0.7627556084971212
User 128583 improves AUC. Keeping the model.
Training on augumented user 102050 39/50 current_auc = 0.7627556084971212
User 102050 AUC after training: 0.7629541393686718
User 102050 improves AUC. Keeping the model.
Training on augumented user 3104 40/50 current_auc = 0.7629541393686718
User 3104 AUC after training: 0.7629541393686718
User 3104 does not improve AUC. Reverting changes.
Training on augumented user 64367 41/50 current_auc = 0.7629541393686718
User 64367 AUC after training: 0.7619614850109191
User 64367 does not improve AUC. Reverting changes.
Training on augumented user 49544 42/50 current_auc = 0.7629541393686718
User 49544 AUC after training: 0.7610680960889418
User 49544 does not improve AUC. Reverting changes.
Training on augumented user 63217 43/50 current_auc = 0.7629541393686718
User 63217 AUC after training: 0.7619614850109193
User 63217 does not improve AUC. Reverting changes.
Training on augumented user 52251 44/50 current_auc = 0.7629541393686718
User 52251 AUC after training: 0.7605717689100654
User 52251 does not improve AUC. Reverting changes.
Training on augumented user 26424 45/50 current_auc = 0.7629541393686718
User 26424 AUC after training: 0.7623585467540201
User 26424 does not improve AUC. Reverting changes.
Training on augumented user 125987 46/50 current_auc = 0.7629541393686718
User 125987 AUC after training: 0.7610680960889418
User 125987 does not improve AUC. Reverting changes.
Training on augumented user 110298 47/50 current_auc = 0.7629541393686718
User 110298 AUC after training: 0.7613658923962675
User 110298 does not improve AUC. Reverting changes.
Training on augumented user 102152 48/50 current_auc = 0.7629541393686718
User 102152 AUC after training: 0.7607702997816159
User 102152 does not improve AUC. Reverting changes.
Training on augumented user 100865 49/50 current_auc = 0.7629541393686718
User 100865 AUC after training: 0.7623585467540203
User 100865 does not improve AUC. Reverting changes.
[2024-12-02 18:24:06.348383] start test user 98225 84/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:24:07.162602] start test user 98225 84/567 recall augumented users by random, augumented_users = [118331, 33591, 109856, 127105, 35731, 23524, 81068, 113667, 4086, 115383, 6764, 16437, 45558, 80362, 55357, 12045, 72705, 68605, 117383, 9330, 29927, 117235, 34138, 16595, 84222, 104068, 706, 62304, 39031, 136585, 1143, 116899, 39746, 122114, 49591, 82576, 61703, 131768, 90959, 98556, 30961, 6104, 105376, 23863, 117166, 125385, 92440, 87721, 120400, 82543]
[2024-12-02 18:24:07.179011] user = 98225 Cloud 84/567
[2024-12-02 18:24:07.209412] user = 98225 Local 84/567
[2024-12-02 18:24:07.270581] user = 98225 Local+ 84/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:24:09.263107] user = 98225 MPDA- 84/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5333333333333333
Training on augumented user 118331 0/50 current_auc = 0.5333333333333333
User 118331 AUC after training: 0.5324242424242425
User 118331 does not improve AUC. Reverting changes.
Training on augumented user 33591 1/50 current_auc = 0.5333333333333333
User 33591 AUC after training: 0.5327272727272727
User 33591 does not improve AUC. Reverting changes.
Training on augumented user 109856 2/50 current_auc = 0.5333333333333333
User 109856 AUC after training: 0.5324242424242425
User 109856 does not improve AUC. Reverting changes.
Training on augumented user 127105 3/50 current_auc = 0.5333333333333333
User 127105 AUC after training: 0.5333333333333333
User 127105 does not improve AUC. Reverting changes.
Training on augumented user 35731 4/50 current_auc = 0.5333333333333333
User 35731 AUC after training: 0.5315151515151515
User 35731 does not improve AUC. Reverting changes.
Training on augumented user 23524 5/50 current_auc = 0.5333333333333333
User 23524 AUC after training: 0.5339393939393939
User 23524 improves AUC. Keeping the model.
Training on augumented user 81068 6/50 current_auc = 0.5339393939393939
User 81068 AUC after training: 0.5357575757575758
User 81068 improves AUC. Keeping the model.
Training on augumented user 113667 7/50 current_auc = 0.5357575757575758
User 113667 AUC after training: 0.5360606060606061
User 113667 improves AUC. Keeping the model.
Training on augumented user 4086 8/50 current_auc = 0.5360606060606061
User 4086 AUC after training: 0.5357575757575758
User 4086 does not improve AUC. Reverting changes.
Training on augumented user 115383 9/50 current_auc = 0.5360606060606061
User 115383 AUC after training: 0.5354545454545454
User 115383 does not improve AUC. Reverting changes.
Training on augumented user 6764 10/50 current_auc = 0.5360606060606061
User 6764 AUC after training: 0.5345454545454545
User 6764 does not improve AUC. Reverting changes.
Training on augumented user 16437 11/50 current_auc = 0.5360606060606061
User 16437 AUC after training: 0.5360606060606061
User 16437 does not improve AUC. Reverting changes.
Training on augumented user 45558 12/50 current_auc = 0.5360606060606061
User 45558 AUC after training: 0.5360606060606061
User 45558 does not improve AUC. Reverting changes.
Training on augumented user 80362 13/50 current_auc = 0.5360606060606061
User 80362 AUC after training: 0.5357575757575758
User 80362 does not improve AUC. Reverting changes.
Training on augumented user 55357 14/50 current_auc = 0.5360606060606061
User 55357 AUC after training: 0.5345454545454545
User 55357 does not improve AUC. Reverting changes.
Training on augumented user 12045 15/50 current_auc = 0.5360606060606061
User 12045 AUC after training: 0.5354545454545454
User 12045 does not improve AUC. Reverting changes.
Training on augumented user 72705 16/50 current_auc = 0.5360606060606061
User 72705 AUC after training: 0.5351515151515152
User 72705 does not improve AUC. Reverting changes.
Training on augumented user 68605 17/50 current_auc = 0.5360606060606061
User 68605 AUC after training: 0.5339393939393939
User 68605 does not improve AUC. Reverting changes.
Training on augumented user 117383 18/50 current_auc = 0.5360606060606061
User 117383 AUC after training: 0.5354545454545455
User 117383 does not improve AUC. Reverting changes.
Training on augumented user 9330 19/50 current_auc = 0.5360606060606061
User 9330 AUC after training: 0.5366666666666666
User 9330 improves AUC. Keeping the model.
Training on augumented user 29927 20/50 current_auc = 0.5366666666666666
User 29927 AUC after training: 0.5378787878787878
User 29927 improves AUC. Keeping the model.
Training on augumented user 117235 21/50 current_auc = 0.5378787878787878
User 117235 AUC after training: 0.5378787878787878
User 117235 does not improve AUC. Reverting changes.
Training on augumented user 34138 22/50 current_auc = 0.5378787878787878
User 34138 AUC after training: 0.5390909090909091
User 34138 improves AUC. Keeping the model.
Training on augumented user 16595 23/50 current_auc = 0.5390909090909091
User 16595 AUC after training: 0.5393939393939394
User 16595 improves AUC. Keeping the model.
Training on augumented user 84222 24/50 current_auc = 0.5393939393939394
User 84222 AUC after training: 0.5351515151515152
User 84222 does not improve AUC. Reverting changes.
Training on augumented user 104068 25/50 current_auc = 0.5393939393939394
User 104068 AUC after training: 0.5384848484848485
User 104068 does not improve AUC. Reverting changes.
Training on augumented user 706 26/50 current_auc = 0.5393939393939394
User 706 AUC after training: 0.5378787878787878
User 706 does not improve AUC. Reverting changes.
Training on augumented user 62304 27/50 current_auc = 0.5393939393939394
User 62304 AUC after training: 0.536969696969697
User 62304 does not improve AUC. Reverting changes.
Training on augumented user 39031 28/50 current_auc = 0.5393939393939394
User 39031 AUC after training: 0.5390909090909091
User 39031 does not improve AUC. Reverting changes.
Training on augumented user 136585 29/50 current_auc = 0.5393939393939394
User 136585 AUC after training: 0.5378787878787878
User 136585 does not improve AUC. Reverting changes.
Training on augumented user 1143 30/50 current_auc = 0.5393939393939394
User 1143 AUC after training: 0.5396969696969697
User 1143 improves AUC. Keeping the model.
Training on augumented user 116899 31/50 current_auc = 0.5396969696969697
User 116899 AUC after training: 0.5424242424242425
User 116899 improves AUC. Keeping the model.
Training on augumented user 39746 32/50 current_auc = 0.5424242424242425
User 39746 AUC after training: 0.5427272727272727
User 39746 improves AUC. Keeping the model.
Training on augumented user 122114 33/50 current_auc = 0.5427272727272727
User 122114 AUC after training: 0.5445454545454546
User 122114 improves AUC. Keeping the model.
Training on augumented user 49591 34/50 current_auc = 0.5445454545454546
User 49591 AUC after training: 0.5436363636363637
User 49591 does not improve AUC. Reverting changes.
Training on augumented user 82576 35/50 current_auc = 0.5445454545454546
User 82576 AUC after training: 0.543030303030303
User 82576 does not improve AUC. Reverting changes.
Training on augumented user 61703 36/50 current_auc = 0.5445454545454546
User 61703 AUC after training: 0.5433333333333333
User 61703 does not improve AUC. Reverting changes.
Training on augumented user 131768 37/50 current_auc = 0.5445454545454546
User 131768 AUC after training: 0.5433333333333333
User 131768 does not improve AUC. Reverting changes.
Training on augumented user 90959 38/50 current_auc = 0.5445454545454546
User 90959 AUC after training: 0.5451515151515152
User 90959 improves AUC. Keeping the model.
Training on augumented user 98556 39/50 current_auc = 0.5451515151515152
User 98556 AUC after training: 0.5463636363636364
User 98556 improves AUC. Keeping the model.
Training on augumented user 30961 40/50 current_auc = 0.5463636363636364
User 30961 AUC after training: 0.5463636363636364
User 30961 does not improve AUC. Reverting changes.
Training on augumented user 6104 41/50 current_auc = 0.5463636363636364
User 6104 AUC after training: 0.546060606060606
User 6104 does not improve AUC. Reverting changes.
Training on augumented user 105376 42/50 current_auc = 0.5463636363636364
User 105376 AUC after training: 0.5457575757575758
User 105376 does not improve AUC. Reverting changes.
Training on augumented user 23863 43/50 current_auc = 0.5463636363636364
User 23863 AUC after training: 0.546060606060606
User 23863 does not improve AUC. Reverting changes.
Training on augumented user 117166 44/50 current_auc = 0.5463636363636364
User 117166 AUC after training: 0.5463636363636364
User 117166 does not improve AUC. Reverting changes.
Training on augumented user 125385 45/50 current_auc = 0.5463636363636364
User 125385 AUC after training: 0.5445454545454546
User 125385 does not improve AUC. Reverting changes.
Training on augumented user 92440 46/50 current_auc = 0.5463636363636364
User 92440 AUC after training: 0.5460606060606061
User 92440 does not improve AUC. Reverting changes.
Training on augumented user 87721 47/50 current_auc = 0.5463636363636364
User 87721 AUC after training: 0.5454545454545454
User 87721 does not improve AUC. Reverting changes.
Training on augumented user 120400 48/50 current_auc = 0.5463636363636364
User 120400 AUC after training: 0.5445454545454546
User 120400 does not improve AUC. Reverting changes.
Training on augumented user 82543 49/50 current_auc = 0.5463636363636364
User 82543 AUC after training: 0.5463636363636364
User 82543 does not improve AUC. Reverting changes.
[2024-12-02 18:24:42.934406] start test user 98256 85/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:24:43.861863] start test user 98256 85/567 recall augumented users by random, augumented_users = [101646, 1729, 65112, 28618, 24831, 119564, 63273, 40202, 68887, 68248, 55401, 39034, 32601, 111466, 7900, 76752, 18847, 73334, 73340, 115211, 12956, 59053, 70384, 116705, 73743, 56945, 32653, 16289, 77758, 120394, 86245, 67073, 85464, 39901, 21447, 123059, 135856, 102696, 130550, 47961, 110201, 62674, 98217, 45577, 96144, 6326, 132923, 70783, 102507, 7930]
[2024-12-02 18:24:43.891305] user = 98256 Cloud 85/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:24:43.905502] user = 98256 Local 85/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:24:43.945396] user = 98256 Local+ 85/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:24:46.595969] user = 98256 MPDA- 85/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 101646 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101646 AUC after training: 0.5
User 101646 does not improve AUC. Reverting changes.
Training on augumented user 1729 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1729 AUC after training: 0.5
User 1729 does not improve AUC. Reverting changes.
Training on augumented user 65112 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 65112 AUC after training: 0.5
User 65112 does not improve AUC. Reverting changes.
Training on augumented user 28618 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28618 AUC after training: 0.5
User 28618 does not improve AUC. Reverting changes.
Training on augumented user 24831 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24831 AUC after training: 0.5
User 24831 does not improve AUC. Reverting changes.
Training on augumented user 119564 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 119564 AUC after training: 0.5
User 119564 does not improve AUC. Reverting changes.
Training on augumented user 63273 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63273 AUC after training: 0.5
User 63273 does not improve AUC. Reverting changes.
Training on augumented user 40202 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40202 AUC after training: 0.5
User 40202 does not improve AUC. Reverting changes.
Training on augumented user 68887 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68887 AUC after training: 0.5
User 68887 does not improve AUC. Reverting changes.
Training on augumented user 68248 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68248 AUC after training: 0.5
User 68248 does not improve AUC. Reverting changes.
Training on augumented user 55401 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55401 AUC after training: 0.5
User 55401 does not improve AUC. Reverting changes.
Training on augumented user 39034 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 39034 AUC after training: 0.5
User 39034 does not improve AUC. Reverting changes.
Training on augumented user 32601 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32601 AUC after training: 0.5
User 32601 does not improve AUC. Reverting changes.
Training on augumented user 111466 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111466 AUC after training: 0.5
User 111466 does not improve AUC. Reverting changes.
Training on augumented user 7900 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7900 AUC after training: 0.5
User 7900 does not improve AUC. Reverting changes.
Training on augumented user 76752 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76752 AUC after training: 0.5
User 76752 does not improve AUC. Reverting changes.
Training on augumented user 18847 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18847 AUC after training: 0.5
User 18847 does not improve AUC. Reverting changes.
Training on augumented user 73334 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73334 AUC after training: 0.5
User 73334 does not improve AUC. Reverting changes.
Training on augumented user 73340 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73340 AUC after training: 0.5
User 73340 does not improve AUC. Reverting changes.
Training on augumented user 115211 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115211 AUC after training: 0.5
User 115211 does not improve AUC. Reverting changes.
Training on augumented user 12956 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12956 AUC after training: 0.5
User 12956 does not improve AUC. Reverting changes.
Training on augumented user 59053 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59053 AUC after training: 0.5
User 59053 does not improve AUC. Reverting changes.
Training on augumented user 70384 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70384 AUC after training: 0.5
User 70384 does not improve AUC. Reverting changes.
Training on augumented user 116705 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116705 AUC after training: 0.5
User 116705 does not improve AUC. Reverting changes.
Training on augumented user 73743 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73743 AUC after training: 0.5
User 73743 does not improve AUC. Reverting changes.
Training on augumented user 56945 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56945 AUC after training: 0.5
User 56945 does not improve AUC. Reverting changes.
Training on augumented user 32653 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32653 AUC after training: 0.5
User 32653 does not improve AUC. Reverting changes.
Training on augumented user 16289 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16289 AUC after training: 0.5
User 16289 does not improve AUC. Reverting changes.
Training on augumented user 77758 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77758 AUC after training: 0.5
User 77758 does not improve AUC. Reverting changes.
Training on augumented user 120394 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120394 AUC after training: 0.5
User 120394 does not improve AUC. Reverting changes.
Training on augumented user 86245 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86245 AUC after training: 0.5
User 86245 does not improve AUC. Reverting changes.
Training on augumented user 67073 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67073 AUC after training: 0.5
User 67073 does not improve AUC. Reverting changes.
Training on augumented user 85464 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85464 AUC after training: 0.5
User 85464 does not improve AUC. Reverting changes.
Training on augumented user 39901 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 39901 AUC after training: 0.5
User 39901 does not improve AUC. Reverting changes.
Training on augumented user 21447 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21447 AUC after training: 0.5
User 21447 does not improve AUC. Reverting changes.
Training on augumented user 123059 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123059 AUC after training: 0.5
User 123059 does not improve AUC. Reverting changes.
Training on augumented user 135856 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 135856 AUC after training: 0.5
User 135856 does not improve AUC. Reverting changes.
Training on augumented user 102696 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102696 AUC after training: 0.5
User 102696 does not improve AUC. Reverting changes.
Training on augumented user 130550 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130550 AUC after training: 0.5
User 130550 does not improve AUC. Reverting changes.
Training on augumented user 47961 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47961 AUC after training: 0.5
User 47961 does not improve AUC. Reverting changes.
Training on augumented user 110201 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110201 AUC after training: 0.5
User 110201 does not improve AUC. Reverting changes.
Training on augumented user 62674 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62674 AUC after training: 0.5
User 62674 does not improve AUC. Reverting changes.
Training on augumented user 98217 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98217 AUC after training: 0.5
User 98217 does not improve AUC. Reverting changes.
Training on augumented user 45577 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45577 AUC after training: 0.5
User 45577 does not improve AUC. Reverting changes.
Training on augumented user 96144 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96144 AUC after training: 0.5
User 96144 does not improve AUC. Reverting changes.
Training on augumented user 6326 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6326 AUC after training: 0.5
User 6326 does not improve AUC. Reverting changes.
Training on augumented user 132923 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132923 AUC after training: 0.5
User 132923 does not improve AUC. Reverting changes.
Training on augumented user 70783 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70783 AUC after training: 0.5
User 70783 does not improve AUC. Reverting changes.
Training on augumented user 102507 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102507 AUC after training: 0.5
User 102507 does not improve AUC. Reverting changes.
Training on augumented user 7930 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7930 AUC after training: 0.5
User 7930 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:25:15.130530] start test user 98301 86/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:25:15.875843] start test user 98301 86/567 recall augumented users by random, augumented_users = [103895, 89801, 77942, 5216, 136903, 37592, 84279, 57250, 86737, 40238, 81632, 6052, 32855, 112486, 102128, 19497, 39194, 116502, 78795, 87732, 21943, 88786, 79529, 8069, 39383, 54326, 102184, 29537, 15510, 129417, 104953, 110941, 67702, 123383, 15977, 23292, 42912, 6053, 130815, 117428, 89923, 103307, 137409, 85129, 64117, 37755, 43017, 53674, 93987, 78779]
[2024-12-02 18:25:15.891632] user = 98301 Cloud 86/567
[2024-12-02 18:25:15.903031] user = 98301 Local 86/567
[2024-12-02 18:25:15.960921] user = 98301 Local+ 86/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:25:18.693316] user = 98301 MPDA- 86/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.850480109739369
Training on augumented user 103895 0/50 current_auc = 0.850480109739369
User 103895 AUC after training: 0.850480109739369
User 103895 does not improve AUC. Reverting changes.
Training on augumented user 89801 1/50 current_auc = 0.850480109739369
User 89801 AUC after training: 0.850480109739369
User 89801 does not improve AUC. Reverting changes.
Training on augumented user 77942 2/50 current_auc = 0.850480109739369
User 77942 AUC after training: 0.850480109739369
User 77942 does not improve AUC. Reverting changes.
Training on augumented user 5216 3/50 current_auc = 0.850480109739369
User 5216 AUC after training: 0.8491083676268861
User 5216 does not improve AUC. Reverting changes.
Training on augumented user 136903 4/50 current_auc = 0.850480109739369
User 136903 AUC after training: 0.8491083676268861
User 136903 does not improve AUC. Reverting changes.
Training on augumented user 37592 5/50 current_auc = 0.850480109739369
User 37592 AUC after training: 0.850480109739369
User 37592 does not improve AUC. Reverting changes.
Training on augumented user 84279 6/50 current_auc = 0.850480109739369
User 84279 AUC after training: 0.850480109739369
User 84279 does not improve AUC. Reverting changes.
Training on augumented user 57250 7/50 current_auc = 0.850480109739369
User 57250 AUC after training: 0.850480109739369
User 57250 does not improve AUC. Reverting changes.
Training on augumented user 86737 8/50 current_auc = 0.850480109739369
User 86737 AUC after training: 0.850480109739369
User 86737 does not improve AUC. Reverting changes.
Training on augumented user 40238 9/50 current_auc = 0.850480109739369
User 40238 AUC after training: 0.850480109739369
User 40238 does not improve AUC. Reverting changes.
Training on augumented user 81632 10/50 current_auc = 0.850480109739369
User 81632 AUC after training: 0.850480109739369
User 81632 does not improve AUC. Reverting changes.
Training on augumented user 6052 11/50 current_auc = 0.850480109739369
User 6052 AUC after training: 0.850480109739369
User 6052 does not improve AUC. Reverting changes.
Training on augumented user 32855 12/50 current_auc = 0.850480109739369
User 32855 AUC after training: 0.850480109739369
User 32855 does not improve AUC. Reverting changes.
Training on augumented user 112486 13/50 current_auc = 0.850480109739369
User 112486 AUC after training: 0.850480109739369
User 112486 does not improve AUC. Reverting changes.
Training on augumented user 102128 14/50 current_auc = 0.850480109739369
User 102128 AUC after training: 0.850480109739369
User 102128 does not improve AUC. Reverting changes.
Training on augumented user 19497 15/50 current_auc = 0.850480109739369
User 19497 AUC after training: 0.850480109739369
User 19497 does not improve AUC. Reverting changes.
Training on augumented user 39194 16/50 current_auc = 0.850480109739369
User 39194 AUC after training: 0.850480109739369
User 39194 does not improve AUC. Reverting changes.
Training on augumented user 116502 17/50 current_auc = 0.850480109739369
User 116502 AUC after training: 0.8491083676268861
User 116502 does not improve AUC. Reverting changes.
Training on augumented user 78795 18/50 current_auc = 0.850480109739369
User 78795 AUC after training: 0.850480109739369
User 78795 does not improve AUC. Reverting changes.
Training on augumented user 87732 19/50 current_auc = 0.850480109739369
User 87732 AUC after training: 0.850480109739369
User 87732 does not improve AUC. Reverting changes.
Training on augumented user 21943 20/50 current_auc = 0.850480109739369
User 21943 AUC after training: 0.850480109739369
User 21943 does not improve AUC. Reverting changes.
Training on augumented user 88786 21/50 current_auc = 0.850480109739369
User 88786 AUC after training: 0.850480109739369
User 88786 does not improve AUC. Reverting changes.
Training on augumented user 79529 22/50 current_auc = 0.850480109739369
User 79529 AUC after training: 0.8491083676268861
User 79529 does not improve AUC. Reverting changes.
Training on augumented user 8069 23/50 current_auc = 0.850480109739369
User 8069 AUC after training: 0.850480109739369
User 8069 does not improve AUC. Reverting changes.
Training on augumented user 39383 24/50 current_auc = 0.850480109739369
User 39383 AUC after training: 0.8491083676268861
User 39383 does not improve AUC. Reverting changes.
Training on augumented user 54326 25/50 current_auc = 0.850480109739369
User 54326 AUC after training: 0.850480109739369
User 54326 does not improve AUC. Reverting changes.
Training on augumented user 102184 26/50 current_auc = 0.850480109739369
User 102184 AUC after training: 0.850480109739369
User 102184 does not improve AUC. Reverting changes.
Training on augumented user 29537 27/50 current_auc = 0.850480109739369
User 29537 AUC after training: 0.850480109739369
User 29537 does not improve AUC. Reverting changes.
Training on augumented user 15510 28/50 current_auc = 0.850480109739369
User 15510 AUC after training: 0.850480109739369
User 15510 does not improve AUC. Reverting changes.
Training on augumented user 129417 29/50 current_auc = 0.850480109739369
User 129417 AUC after training: 0.850480109739369
User 129417 does not improve AUC. Reverting changes.
Training on augumented user 104953 30/50 current_auc = 0.850480109739369
User 104953 AUC after training: 0.850480109739369
User 104953 does not improve AUC. Reverting changes.
Training on augumented user 110941 31/50 current_auc = 0.850480109739369
User 110941 AUC after training: 0.850480109739369
User 110941 does not improve AUC. Reverting changes.
Training on augumented user 67702 32/50 current_auc = 0.850480109739369
User 67702 AUC after training: 0.850480109739369
User 67702 does not improve AUC. Reverting changes.
Training on augumented user 123383 33/50 current_auc = 0.850480109739369
User 123383 AUC after training: 0.8477366255144032
User 123383 does not improve AUC. Reverting changes.
Training on augumented user 15977 34/50 current_auc = 0.850480109739369
User 15977 AUC after training: 0.850480109739369
User 15977 does not improve AUC. Reverting changes.
Training on augumented user 23292 35/50 current_auc = 0.850480109739369
User 23292 AUC after training: 0.850480109739369
User 23292 does not improve AUC. Reverting changes.
Training on augumented user 42912 36/50 current_auc = 0.850480109739369
User 42912 AUC after training: 0.850480109739369
User 42912 does not improve AUC. Reverting changes.
Training on augumented user 6053 37/50 current_auc = 0.850480109739369
User 6053 AUC after training: 0.850480109739369
User 6053 does not improve AUC. Reverting changes.
Training on augumented user 130815 38/50 current_auc = 0.850480109739369
User 130815 AUC after training: 0.8491083676268861
User 130815 does not improve AUC. Reverting changes.
Training on augumented user 117428 39/50 current_auc = 0.850480109739369
User 117428 AUC after training: 0.850480109739369
User 117428 does not improve AUC. Reverting changes.
Training on augumented user 89923 40/50 current_auc = 0.850480109739369
User 89923 AUC after training: 0.850480109739369
User 89923 does not improve AUC. Reverting changes.
Training on augumented user 103307 41/50 current_auc = 0.850480109739369
User 103307 AUC after training: 0.850480109739369
User 103307 does not improve AUC. Reverting changes.
Training on augumented user 137409 42/50 current_auc = 0.850480109739369
User 137409 AUC after training: 0.8491083676268861
User 137409 does not improve AUC. Reverting changes.
Training on augumented user 85129 43/50 current_auc = 0.850480109739369
User 85129 AUC after training: 0.8491083676268861
User 85129 does not improve AUC. Reverting changes.
Training on augumented user 64117 44/50 current_auc = 0.850480109739369
User 64117 AUC after training: 0.850480109739369
User 64117 does not improve AUC. Reverting changes.
Training on augumented user 37755 45/50 current_auc = 0.850480109739369
User 37755 AUC after training: 0.850480109739369
User 37755 does not improve AUC. Reverting changes.
Training on augumented user 43017 46/50 current_auc = 0.850480109739369
User 43017 AUC after training: 0.8491083676268861
User 43017 does not improve AUC. Reverting changes.
Training on augumented user 53674 47/50 current_auc = 0.850480109739369
User 53674 AUC after training: 0.850480109739369
User 53674 does not improve AUC. Reverting changes.
Training on augumented user 93987 48/50 current_auc = 0.850480109739369
User 93987 AUC after training: 0.850480109739369
User 93987 does not improve AUC. Reverting changes.
Training on augumented user 78779 49/50 current_auc = 0.850480109739369
User 78779 AUC after training: 0.850480109739369
User 78779 does not improve AUC. Reverting changes.
[2024-12-02 18:25:46.116799] start test user 98320 87/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:25:46.642506] start test user 98320 87/567 recall augumented users by random, augumented_users = [112752, 22731, 63607, 50078, 47837, 6120, 55285, 94179, 124410, 57750, 103800, 67974, 114599, 119617, 107841, 114078, 75129, 95359, 50164, 22909, 125551, 36152, 38113, 58954, 38154, 64751, 127401, 86642, 121838, 104778, 18208, 3365, 101744, 114736, 11018, 34651, 76514, 14849, 100048, 80204, 93106, 84557, 46491, 45971, 97301, 84259, 4954, 63148, 129746, 129971]
[2024-12-02 18:25:46.659341] user = 98320 Cloud 87/567
[2024-12-02 18:25:46.669898] user = 98320 Local 87/567
[2024-12-02 18:25:46.739155] user = 98320 Local+ 87/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:25:49.645379] user = 98320 MPDA- 87/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.0
Training on augumented user 112752 0/50 current_auc = 0.0
User 112752 AUC after training: 0.0
User 112752 does not improve AUC. Reverting changes.
Training on augumented user 22731 1/50 current_auc = 0.0
User 22731 AUC after training: 0.0
User 22731 does not improve AUC. Reverting changes.
Training on augumented user 63607 2/50 current_auc = 0.0
User 63607 AUC after training: 0.0
User 63607 does not improve AUC. Reverting changes.
Training on augumented user 50078 3/50 current_auc = 0.0
User 50078 AUC after training: 0.0
User 50078 does not improve AUC. Reverting changes.
Training on augumented user 47837 4/50 current_auc = 0.0
User 47837 AUC after training: 0.0
User 47837 does not improve AUC. Reverting changes.
Training on augumented user 6120 5/50 current_auc = 0.0
User 6120 AUC after training: 0.0
User 6120 does not improve AUC. Reverting changes.
Training on augumented user 55285 6/50 current_auc = 0.0
User 55285 AUC after training: 0.0
User 55285 does not improve AUC. Reverting changes.
Training on augumented user 94179 7/50 current_auc = 0.0
User 94179 AUC after training: 0.0
User 94179 does not improve AUC. Reverting changes.
Training on augumented user 124410 8/50 current_auc = 0.0
User 124410 AUC after training: 0.0
User 124410 does not improve AUC. Reverting changes.
Training on augumented user 57750 9/50 current_auc = 0.0
User 57750 AUC after training: 0.0
User 57750 does not improve AUC. Reverting changes.
Training on augumented user 103800 10/50 current_auc = 0.0
User 103800 AUC after training: 0.0
User 103800 does not improve AUC. Reverting changes.
Training on augumented user 67974 11/50 current_auc = 0.0
User 67974 AUC after training: 0.0
User 67974 does not improve AUC. Reverting changes.
Training on augumented user 114599 12/50 current_auc = 0.0
User 114599 AUC after training: 0.0
User 114599 does not improve AUC. Reverting changes.
Training on augumented user 119617 13/50 current_auc = 0.0
User 119617 AUC after training: 0.0
User 119617 does not improve AUC. Reverting changes.
Training on augumented user 107841 14/50 current_auc = 0.0
User 107841 AUC after training: 0.0
User 107841 does not improve AUC. Reverting changes.
Training on augumented user 114078 15/50 current_auc = 0.0
User 114078 AUC after training: 0.0
User 114078 does not improve AUC. Reverting changes.
Training on augumented user 75129 16/50 current_auc = 0.0
User 75129 AUC after training: 0.0
User 75129 does not improve AUC. Reverting changes.
Training on augumented user 95359 17/50 current_auc = 0.0
User 95359 AUC after training: 0.0
User 95359 does not improve AUC. Reverting changes.
Training on augumented user 50164 18/50 current_auc = 0.0
User 50164 AUC after training: 0.0
User 50164 does not improve AUC. Reverting changes.
Training on augumented user 22909 19/50 current_auc = 0.0
User 22909 AUC after training: 0.0
User 22909 does not improve AUC. Reverting changes.
Training on augumented user 125551 20/50 current_auc = 0.0
User 125551 AUC after training: 0.0
User 125551 does not improve AUC. Reverting changes.
Training on augumented user 36152 21/50 current_auc = 0.0
User 36152 AUC after training: 0.0
User 36152 does not improve AUC. Reverting changes.
Training on augumented user 38113 22/50 current_auc = 0.0
User 38113 AUC after training: 0.0
User 38113 does not improve AUC. Reverting changes.
Training on augumented user 58954 23/50 current_auc = 0.0
User 58954 AUC after training: 0.0
User 58954 does not improve AUC. Reverting changes.
Training on augumented user 38154 24/50 current_auc = 0.0
User 38154 AUC after training: 0.0
User 38154 does not improve AUC. Reverting changes.
Training on augumented user 64751 25/50 current_auc = 0.0
User 64751 AUC after training: 0.0
User 64751 does not improve AUC. Reverting changes.
Training on augumented user 127401 26/50 current_auc = 0.0
User 127401 AUC after training: 0.0
User 127401 does not improve AUC. Reverting changes.
Training on augumented user 86642 27/50 current_auc = 0.0
User 86642 AUC after training: 0.0
User 86642 does not improve AUC. Reverting changes.
Training on augumented user 121838 28/50 current_auc = 0.0
User 121838 AUC after training: 0.0
User 121838 does not improve AUC. Reverting changes.
Training on augumented user 104778 29/50 current_auc = 0.0
User 104778 AUC after training: 0.0
User 104778 does not improve AUC. Reverting changes.
Training on augumented user 18208 30/50 current_auc = 0.0
User 18208 AUC after training: 0.0
User 18208 does not improve AUC. Reverting changes.
Training on augumented user 3365 31/50 current_auc = 0.0
User 3365 AUC after training: 0.0
User 3365 does not improve AUC. Reverting changes.
Training on augumented user 101744 32/50 current_auc = 0.0
User 101744 AUC after training: 0.0
User 101744 does not improve AUC. Reverting changes.
Training on augumented user 114736 33/50 current_auc = 0.0
User 114736 AUC after training: 0.0
User 114736 does not improve AUC. Reverting changes.
Training on augumented user 11018 34/50 current_auc = 0.0
User 11018 AUC after training: 0.0
User 11018 does not improve AUC. Reverting changes.
Training on augumented user 34651 35/50 current_auc = 0.0
User 34651 AUC after training: 0.0
User 34651 does not improve AUC. Reverting changes.
Training on augumented user 76514 36/50 current_auc = 0.0
User 76514 AUC after training: 0.0
User 76514 does not improve AUC. Reverting changes.
Training on augumented user 14849 37/50 current_auc = 0.0
User 14849 AUC after training: 0.0
User 14849 does not improve AUC. Reverting changes.
Training on augumented user 100048 38/50 current_auc = 0.0
User 100048 AUC after training: 0.0
User 100048 does not improve AUC. Reverting changes.
Training on augumented user 80204 39/50 current_auc = 0.0
User 80204 AUC after training: 0.0
User 80204 does not improve AUC. Reverting changes.
Training on augumented user 93106 40/50 current_auc = 0.0
User 93106 AUC after training: 0.0
User 93106 does not improve AUC. Reverting changes.
Training on augumented user 84557 41/50 current_auc = 0.0
User 84557 AUC after training: 0.0
User 84557 does not improve AUC. Reverting changes.
Training on augumented user 46491 42/50 current_auc = 0.0
User 46491 AUC after training: 0.0
User 46491 does not improve AUC. Reverting changes.
Training on augumented user 45971 43/50 current_auc = 0.0
User 45971 AUC after training: 0.0
User 45971 does not improve AUC. Reverting changes.
Training on augumented user 97301 44/50 current_auc = 0.0
User 97301 AUC after training: 0.0
User 97301 does not improve AUC. Reverting changes.
Training on augumented user 84259 45/50 current_auc = 0.0
User 84259 AUC after training: 0.0
User 84259 does not improve AUC. Reverting changes.
Training on augumented user 4954 46/50 current_auc = 0.0
User 4954 AUC after training: 0.0
User 4954 does not improve AUC. Reverting changes.
Training on augumented user 63148 47/50 current_auc = 0.0
User 63148 AUC after training: 0.0
User 63148 does not improve AUC. Reverting changes.
Training on augumented user 129746 48/50 current_auc = 0.0
User 129746 AUC after training: 0.0
User 129746 does not improve AUC. Reverting changes.
Training on augumented user 129971 49/50 current_auc = 0.0
User 129971 AUC after training: 0.0
User 129971 does not improve AUC. Reverting changes.
[2024-12-02 18:26:18.639034] start test user 98323 88/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:26:19.107317] start test user 98323 88/567 recall augumented users by random, augumented_users = [62489, 127506, 12741, 31206, 100514, 10830, 118762, 90699, 127011, 101089, 24379, 30176, 25475, 29967, 81476, 78286, 131106, 138359, 111313, 68954, 89474, 23870, 85566, 58024, 71327, 122605, 15940, 94844, 126318, 25535, 90121, 69125, 26432, 39198, 101393, 62753, 88904, 71163, 6115, 46059, 113891, 102662, 39868, 37889, 96196, 14442, 32848, 117400, 60792, 13139]
[2024-12-02 18:26:19.123513] user = 98323 Cloud 88/567
[2024-12-02 18:26:19.137850] user = 98323 Local 88/567
[2024-12-02 18:26:19.169379] user = 98323 Local+ 88/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:26:21.631895] user = 98323 MPDA- 88/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6039540816326531
Training on augumented user 62489 0/50 current_auc = 0.6039540816326531
User 62489 AUC after training: 0.6033163265306123
User 62489 does not improve AUC. Reverting changes.
Training on augumented user 127506 1/50 current_auc = 0.6039540816326531
User 127506 AUC after training: 0.6039540816326531
User 127506 does not improve AUC. Reverting changes.
Training on augumented user 12741 2/50 current_auc = 0.6039540816326531
User 12741 AUC after training: 0.6052295918367346
User 12741 improves AUC. Keeping the model.
Training on augumented user 31206 3/50 current_auc = 0.6052295918367346
User 31206 AUC after training: 0.6052295918367346
User 31206 does not improve AUC. Reverting changes.
Training on augumented user 100514 4/50 current_auc = 0.6052295918367346
User 100514 AUC after training: 0.6045918367346939
User 100514 does not improve AUC. Reverting changes.
Training on augumented user 10830 5/50 current_auc = 0.6052295918367346
User 10830 AUC after training: 0.6058673469387755
User 10830 improves AUC. Keeping the model.
Training on augumented user 118762 6/50 current_auc = 0.6058673469387755
User 118762 AUC after training: 0.6052295918367347
User 118762 does not improve AUC. Reverting changes.
Training on augumented user 90699 7/50 current_auc = 0.6058673469387755
User 90699 AUC after training: 0.604591836734694
User 90699 does not improve AUC. Reverting changes.
Training on augumented user 127011 8/50 current_auc = 0.6058673469387755
User 127011 AUC after training: 0.6058673469387755
User 127011 does not improve AUC. Reverting changes.
Training on augumented user 101089 9/50 current_auc = 0.6058673469387755
User 101089 AUC after training: 0.6058673469387755
User 101089 does not improve AUC. Reverting changes.
Training on augumented user 24379 10/50 current_auc = 0.6058673469387755
User 24379 AUC after training: 0.6058673469387755
User 24379 does not improve AUC. Reverting changes.
Training on augumented user 30176 11/50 current_auc = 0.6058673469387755
User 30176 AUC after training: 0.6065051020408164
User 30176 improves AUC. Keeping the model.
Training on augumented user 25475 12/50 current_auc = 0.6065051020408164
User 25475 AUC after training: 0.6065051020408163
User 25475 does not improve AUC. Reverting changes.
Training on augumented user 29967 13/50 current_auc = 0.6065051020408164
User 29967 AUC after training: 0.6071428571428572
User 29967 improves AUC. Keeping the model.
Training on augumented user 81476 14/50 current_auc = 0.6071428571428572
User 81476 AUC after training: 0.6065051020408164
User 81476 does not improve AUC. Reverting changes.
Training on augumented user 78286 15/50 current_auc = 0.6071428571428572
User 78286 AUC after training: 0.6096938775510204
User 78286 improves AUC. Keeping the model.
Training on augumented user 131106 16/50 current_auc = 0.6096938775510204
User 131106 AUC after training: 0.6096938775510204
User 131106 does not improve AUC. Reverting changes.
Training on augumented user 138359 17/50 current_auc = 0.6096938775510204
User 138359 AUC after training: 0.6090561224489797
User 138359 does not improve AUC. Reverting changes.
Training on augumented user 111313 18/50 current_auc = 0.6096938775510204
User 111313 AUC after training: 0.6103316326530612
User 111313 improves AUC. Keeping the model.
Training on augumented user 68954 19/50 current_auc = 0.6103316326530612
User 68954 AUC after training: 0.6096938775510204
User 68954 does not improve AUC. Reverting changes.
Training on augumented user 89474 20/50 current_auc = 0.6103316326530612
User 89474 AUC after training: 0.6090561224489797
User 89474 does not improve AUC. Reverting changes.
Training on augumented user 23870 21/50 current_auc = 0.6103316326530612
User 23870 AUC after training: 0.6090561224489796
User 23870 does not improve AUC. Reverting changes.
Training on augumented user 85566 22/50 current_auc = 0.6103316326530612
User 85566 AUC after training: 0.6103316326530612
User 85566 does not improve AUC. Reverting changes.
Training on augumented user 58024 23/50 current_auc = 0.6103316326530612
User 58024 AUC after training: 0.6103316326530612
User 58024 does not improve AUC. Reverting changes.
Training on augumented user 71327 24/50 current_auc = 0.6103316326530612
User 71327 AUC after training: 0.6116071428571429
User 71327 improves AUC. Keeping the model.
Training on augumented user 122605 25/50 current_auc = 0.6116071428571429
User 122605 AUC after training: 0.610969387755102
User 122605 does not improve AUC. Reverting changes.
Training on augumented user 15940 26/50 current_auc = 0.6116071428571429
User 15940 AUC after training: 0.6103316326530613
User 15940 does not improve AUC. Reverting changes.
Training on augumented user 94844 27/50 current_auc = 0.6116071428571429
User 94844 AUC after training: 0.610969387755102
User 94844 does not improve AUC. Reverting changes.
Training on augumented user 126318 28/50 current_auc = 0.6116071428571429
User 126318 AUC after training: 0.6116071428571429
User 126318 does not improve AUC. Reverting changes.
Training on augumented user 25535 29/50 current_auc = 0.6116071428571429
User 25535 AUC after training: 0.610969387755102
User 25535 does not improve AUC. Reverting changes.
Training on augumented user 90121 30/50 current_auc = 0.6116071428571429
User 90121 AUC after training: 0.6103316326530612
User 90121 does not improve AUC. Reverting changes.
Training on augumented user 69125 31/50 current_auc = 0.6116071428571429
User 69125 AUC after training: 0.6116071428571429
User 69125 does not improve AUC. Reverting changes.
Training on augumented user 26432 32/50 current_auc = 0.6116071428571429
User 26432 AUC after training: 0.610969387755102
User 26432 does not improve AUC. Reverting changes.
Training on augumented user 39198 33/50 current_auc = 0.6116071428571429
User 39198 AUC after training: 0.6135204081632653
User 39198 improves AUC. Keeping the model.
Training on augumented user 101393 34/50 current_auc = 0.6135204081632653
User 101393 AUC after training: 0.6090561224489796
User 101393 does not improve AUC. Reverting changes.
Training on augumented user 62753 35/50 current_auc = 0.6135204081632653
User 62753 AUC after training: 0.6141581632653061
User 62753 improves AUC. Keeping the model.
Training on augumented user 88904 36/50 current_auc = 0.6141581632653061
User 88904 AUC after training: 0.6090561224489796
User 88904 does not improve AUC. Reverting changes.
Training on augumented user 71163 37/50 current_auc = 0.6141581632653061
User 71163 AUC after training: 0.6128826530612245
User 71163 does not improve AUC. Reverting changes.
Training on augumented user 6115 38/50 current_auc = 0.6141581632653061
User 6115 AUC after training: 0.6135204081632654
User 6115 does not improve AUC. Reverting changes.
Training on augumented user 46059 39/50 current_auc = 0.6141581632653061
User 46059 AUC after training: 0.6147959183673469
User 46059 improves AUC. Keeping the model.
Training on augumented user 113891 40/50 current_auc = 0.6147959183673469
User 113891 AUC after training: 0.6141581632653061
User 113891 does not improve AUC. Reverting changes.
Training on augumented user 102662 41/50 current_auc = 0.6147959183673469
User 102662 AUC after training: 0.6128826530612245
User 102662 does not improve AUC. Reverting changes.
Training on augumented user 39868 42/50 current_auc = 0.6147959183673469
User 39868 AUC after training: 0.6135204081632653
User 39868 does not improve AUC. Reverting changes.
Training on augumented user 37889 43/50 current_auc = 0.6147959183673469
User 37889 AUC after training: 0.6147959183673469
User 37889 does not improve AUC. Reverting changes.
Training on augumented user 96196 44/50 current_auc = 0.6147959183673469
User 96196 AUC after training: 0.6147959183673469
User 96196 does not improve AUC. Reverting changes.
Training on augumented user 14442 45/50 current_auc = 0.6147959183673469
User 14442 AUC after training: 0.6141581632653061
User 14442 does not improve AUC. Reverting changes.
Training on augumented user 32848 46/50 current_auc = 0.6147959183673469
User 32848 AUC after training: 0.6135204081632654
User 32848 does not improve AUC. Reverting changes.
Training on augumented user 117400 47/50 current_auc = 0.6147959183673469
User 117400 AUC after training: 0.6141581632653061
User 117400 does not improve AUC. Reverting changes.
Training on augumented user 60792 48/50 current_auc = 0.6147959183673469
User 60792 AUC after training: 0.6135204081632654
User 60792 does not improve AUC. Reverting changes.
Training on augumented user 13139 49/50 current_auc = 0.6147959183673469
User 13139 AUC after training: 0.6154336734693878
User 13139 improves AUC. Keeping the model.
[2024-12-02 18:26:57.199336] start test user 98353 89/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:26:57.932357] start test user 98353 89/567 recall augumented users by random, augumented_users = [135355, 53525, 3466, 82557, 64925, 91187, 13006, 124094, 59380, 64992, 98168, 42031, 92426, 33266, 102636, 108699, 28061, 44361, 128567, 61695, 1078, 70110, 106963, 122196, 76891, 114214, 92745, 79725, 74147, 29119, 101187, 130118, 64253, 39138, 2614, 28977, 11899, 127992, 42075, 74892, 81976, 89486, 14648, 119787, 5791, 118522, 3757, 122799, 21719, 36972]
[2024-12-02 18:26:57.953750] user = 98353 Cloud 89/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:26:57.972506] user = 98353 Local 89/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:26:58.023018] user = 98353 Local+ 89/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:27:01.063579] user = 98353 MPDA- 89/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 135355 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 135355 AUC after training: 0.5
User 135355 does not improve AUC. Reverting changes.
Training on augumented user 53525 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53525 AUC after training: 0.5
User 53525 does not improve AUC. Reverting changes.
Training on augumented user 3466 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3466 AUC after training: 0.5
User 3466 does not improve AUC. Reverting changes.
Training on augumented user 82557 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82557 AUC after training: 0.5
User 82557 does not improve AUC. Reverting changes.
Training on augumented user 64925 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64925 AUC after training: 0.5
User 64925 does not improve AUC. Reverting changes.
Training on augumented user 91187 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91187 AUC after training: 0.5
User 91187 does not improve AUC. Reverting changes.
Training on augumented user 13006 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13006 AUC after training: 0.5
User 13006 does not improve AUC. Reverting changes.
Training on augumented user 124094 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124094 AUC after training: 0.5
User 124094 does not improve AUC. Reverting changes.
Training on augumented user 59380 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59380 AUC after training: 0.5
User 59380 does not improve AUC. Reverting changes.
Training on augumented user 64992 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64992 AUC after training: 0.5
User 64992 does not improve AUC. Reverting changes.
Training on augumented user 98168 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98168 AUC after training: 0.5
User 98168 does not improve AUC. Reverting changes.
Training on augumented user 42031 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42031 AUC after training: 0.5
User 42031 does not improve AUC. Reverting changes.
Training on augumented user 92426 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92426 AUC after training: 0.5
User 92426 does not improve AUC. Reverting changes.
Training on augumented user 33266 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33266 AUC after training: 0.5
User 33266 does not improve AUC. Reverting changes.
Training on augumented user 102636 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102636 AUC after training: 0.5
User 102636 does not improve AUC. Reverting changes.
Training on augumented user 108699 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108699 AUC after training: 0.5
User 108699 does not improve AUC. Reverting changes.
Training on augumented user 28061 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28061 AUC after training: 0.5
User 28061 does not improve AUC. Reverting changes.
Training on augumented user 44361 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44361 AUC after training: 0.5
User 44361 does not improve AUC. Reverting changes.
Training on augumented user 128567 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128567 AUC after training: 0.5
User 128567 does not improve AUC. Reverting changes.
Training on augumented user 61695 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61695 AUC after training: 0.5
User 61695 does not improve AUC. Reverting changes.
Training on augumented user 1078 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1078 AUC after training: 0.5
User 1078 does not improve AUC. Reverting changes.
Training on augumented user 70110 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70110 AUC after training: 0.5
User 70110 does not improve AUC. Reverting changes.
Training on augumented user 106963 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106963 AUC after training: 0.5
User 106963 does not improve AUC. Reverting changes.
Training on augumented user 122196 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122196 AUC after training: 0.5
User 122196 does not improve AUC. Reverting changes.
Training on augumented user 76891 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76891 AUC after training: 0.5
User 76891 does not improve AUC. Reverting changes.
Training on augumented user 114214 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114214 AUC after training: 0.5
User 114214 does not improve AUC. Reverting changes.
Training on augumented user 92745 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92745 AUC after training: 0.5
User 92745 does not improve AUC. Reverting changes.
Training on augumented user 79725 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79725 AUC after training: 0.5
User 79725 does not improve AUC. Reverting changes.
Training on augumented user 74147 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74147 AUC after training: 0.5
User 74147 does not improve AUC. Reverting changes.
Training on augumented user 29119 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29119 AUC after training: 0.5
User 29119 does not improve AUC. Reverting changes.
Training on augumented user 101187 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101187 AUC after training: 0.5
User 101187 does not improve AUC. Reverting changes.
Training on augumented user 130118 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130118 AUC after training: 0.5
User 130118 does not improve AUC. Reverting changes.
Training on augumented user 64253 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64253 AUC after training: 0.5
User 64253 does not improve AUC. Reverting changes.
Training on augumented user 39138 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 39138 AUC after training: 0.5
User 39138 does not improve AUC. Reverting changes.
Training on augumented user 2614 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2614 AUC after training: 0.5
User 2614 does not improve AUC. Reverting changes.
Training on augumented user 28977 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28977 AUC after training: 0.5
User 28977 does not improve AUC. Reverting changes.
Training on augumented user 11899 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11899 AUC after training: 0.5
User 11899 does not improve AUC. Reverting changes.
Training on augumented user 127992 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127992 AUC after training: 0.5
User 127992 does not improve AUC. Reverting changes.
Training on augumented user 42075 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42075 AUC after training: 0.5
User 42075 does not improve AUC. Reverting changes.
Training on augumented user 74892 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74892 AUC after training: 0.5
User 74892 does not improve AUC. Reverting changes.
Training on augumented user 81976 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81976 AUC after training: 0.5
User 81976 does not improve AUC. Reverting changes.
Training on augumented user 89486 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89486 AUC after training: 0.5
User 89486 does not improve AUC. Reverting changes.
Training on augumented user 14648 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14648 AUC after training: 0.5
User 14648 does not improve AUC. Reverting changes.
Training on augumented user 119787 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 119787 AUC after training: 0.5
User 119787 does not improve AUC. Reverting changes.
Training on augumented user 5791 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5791 AUC after training: 0.5
User 5791 does not improve AUC. Reverting changes.
Training on augumented user 118522 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118522 AUC after training: 0.5
User 118522 does not improve AUC. Reverting changes.
Training on augumented user 3757 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3757 AUC after training: 0.5
User 3757 does not improve AUC. Reverting changes.
Training on augumented user 122799 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122799 AUC after training: 0.5
User 122799 does not improve AUC. Reverting changes.
Training on augumented user 21719 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21719 AUC after training: 0.5
User 21719 does not improve AUC. Reverting changes.
Training on augumented user 36972 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36972 AUC after training: 0.5
User 36972 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:27:30.406619] start test user 98369 90/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:27:31.168958] start test user 98369 90/567 recall augumented users by random, augumented_users = [64377, 105336, 68772, 70147, 80523, 129475, 125778, 13823, 133559, 9335, 131172, 121248, 134264, 16237, 132690, 85911, 38681, 45505, 19389, 137638, 15249, 61735, 102061, 48018, 55200, 67707, 40548, 114767, 21580, 47629, 43154, 119159, 82126, 97044, 21807, 47387, 94229, 88787, 87279, 6734, 100865, 25586, 21269, 36390, 12934, 106466, 123747, 59197, 56166, 39192]
[2024-12-02 18:27:31.185148] user = 98369 Cloud 90/567
[2024-12-02 18:27:31.214385] user = 98369 Local 90/567
[2024-12-02 18:27:31.293922] user = 98369 Local+ 90/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:27:34.338270] user = 98369 MPDA- 90/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6461102250575935
Training on augumented user 64377 0/50 current_auc = 0.6461102250575935
User 64377 AUC after training: 0.6459551656920077
User 64377 does not improve AUC. Reverting changes.
Training on augumented user 105336 1/50 current_auc = 0.6461102250575935
User 105336 AUC after training: 0.6459330143540669
User 105336 does not improve AUC. Reverting changes.
Training on augumented user 68772 2/50 current_auc = 0.6461102250575935
User 68772 AUC after training: 0.6455785929470139
User 68772 does not improve AUC. Reverting changes.
Training on augumented user 70147 3/50 current_auc = 0.6461102250575935
User 70147 AUC after training: 0.6459773170299486
User 70147 does not improve AUC. Reverting changes.
Training on augumented user 80523 4/50 current_auc = 0.6461102250575935
User 80523 AUC after training: 0.6465532518164098
User 80523 improves AUC. Keeping the model.
Training on augumented user 129475 5/50 current_auc = 0.6465532518164098
User 129475 AUC after training: 0.64628743576112
User 129475 does not improve AUC. Reverting changes.
Training on augumented user 125778 6/50 current_auc = 0.6465532518164098
User 125778 AUC after training: 0.6462431330852383
User 125778 does not improve AUC. Reverting changes.
Training on augumented user 13823 7/50 current_auc = 0.6465532518164098
User 13823 AUC after training: 0.6464646464646464
User 13823 does not improve AUC. Reverting changes.
Training on augumented user 133559 8/50 current_auc = 0.6465532518164098
User 133559 AUC after training: 0.6458444090023037
User 133559 does not improve AUC. Reverting changes.
Training on augumented user 9335 9/50 current_auc = 0.6465532518164098
User 9335 AUC after training: 0.6461988304093568
User 9335 does not improve AUC. Reverting changes.
Training on augumented user 131172 10/50 current_auc = 0.6465532518164098
User 131172 AUC after training: 0.6462874357611199
User 131172 does not improve AUC. Reverting changes.
Training on augumented user 121248 11/50 current_auc = 0.6465532518164098
User 121248 AUC after training: 0.6464867978025872
User 121248 does not improve AUC. Reverting changes.
Training on augumented user 134264 12/50 current_auc = 0.6465532518164098
User 134264 AUC after training: 0.6461988304093567
User 134264 does not improve AUC. Reverting changes.
Training on augumented user 16237 13/50 current_auc = 0.6465532518164098
User 16237 AUC after training: 0.6465975544922913
User 16237 improves AUC. Keeping the model.
Training on augumented user 132690 14/50 current_auc = 0.6465975544922913
User 132690 AUC after training: 0.6463095870990607
User 132690 does not improve AUC. Reverting changes.
Training on augumented user 85911 15/50 current_auc = 0.6465975544922913
User 85911 AUC after training: 0.646176679071416
User 85911 does not improve AUC. Reverting changes.
Training on augumented user 38681 16/50 current_auc = 0.6465975544922913
User 38681 AUC after training: 0.6466418571681729
User 38681 improves AUC. Keeping the model.
Training on augumented user 45505 17/50 current_auc = 0.6466418571681729
User 45505 AUC after training: 0.6460880737196526
User 45505 does not improve AUC. Reverting changes.
Training on augumented user 19389 18/50 current_auc = 0.6466418571681729
User 19389 AUC after training: 0.6476165160375686
User 19389 improves AUC. Keeping the model.
Training on augumented user 137638 19/50 current_auc = 0.6476165160375686
User 137638 AUC after training: 0.6466418571681729
User 137638 does not improve AUC. Reverting changes.
Training on augumented user 15249 20/50 current_auc = 0.6476165160375686
User 15249 AUC after training: 0.6460659223817118
User 15249 does not improve AUC. Reverting changes.
Training on augumented user 61735 21/50 current_auc = 0.6476165160375686
User 61735 AUC after training: 0.6469519758993444
User 61735 does not improve AUC. Reverting changes.
Training on augumented user 102061 22/50 current_auc = 0.6476165160375686
User 102061 AUC after training: 0.6469076732234627
User 102061 does not improve AUC. Reverting changes.
Training on augumented user 48018 23/50 current_auc = 0.6476165160375686
User 48018 AUC after training: 0.647217791954634
User 48018 does not improve AUC. Reverting changes.
Training on augumented user 55200 24/50 current_auc = 0.6476165160375686
User 55200 AUC after training: 0.6472620946305158
User 55200 does not improve AUC. Reverting changes.
Training on augumented user 67707 25/50 current_auc = 0.6476165160375686
User 67707 AUC after training: 0.6475279106858054
User 67707 does not improve AUC. Reverting changes.
Training on augumented user 40548 26/50 current_auc = 0.6476165160375686
User 40548 AUC after training: 0.6473063973063974
User 40548 does not improve AUC. Reverting changes.
Training on augumented user 114767 27/50 current_auc = 0.6476165160375686
User 114767 AUC after training: 0.64710703526493
User 114767 does not improve AUC. Reverting changes.
Training on augumented user 21580 28/50 current_auc = 0.6476165160375686
User 21580 AUC after training: 0.6467304625199362
User 21580 does not improve AUC. Reverting changes.
Training on augumented user 47629 29/50 current_auc = 0.6476165160375686
User 47629 AUC after training: 0.6458444090023038
User 47629 does not improve AUC. Reverting changes.
Training on augumented user 43154 30/50 current_auc = 0.6476165160375686
User 43154 AUC after training: 0.6466418571681729
User 43154 does not improve AUC. Reverting changes.
Training on augumented user 119159 31/50 current_auc = 0.6476165160375686
User 119159 AUC after training: 0.64710703526493
User 119159 does not improve AUC. Reverting changes.
Training on augumented user 82126 32/50 current_auc = 0.6476165160375686
User 82126 AUC after training: 0.6476608187134503
User 82126 improves AUC. Keeping the model.
Training on augumented user 97044 33/50 current_auc = 0.6476608187134503
User 97044 AUC after training: 0.6475279106858054
User 97044 does not improve AUC. Reverting changes.
Training on augumented user 21807 34/50 current_auc = 0.6476608187134503
User 21807 AUC after training: 0.646531100478469
User 21807 does not improve AUC. Reverting changes.
Training on augumented user 47387 35/50 current_auc = 0.6476608187134503
User 47387 AUC after training: 0.6454013822434874
User 47387 does not improve AUC. Reverting changes.
Training on augumented user 94229 36/50 current_auc = 0.6476608187134503
User 94229 AUC after training: 0.6466418571681729
User 94229 does not improve AUC. Reverting changes.
Training on augumented user 88787 37/50 current_auc = 0.6476608187134503
User 88787 AUC after training: 0.6472842459684565
User 88787 does not improve AUC. Reverting changes.
Training on augumented user 87279 38/50 current_auc = 0.6476608187134503
User 87279 AUC after training: 0.6471291866028708
User 87279 does not improve AUC. Reverting changes.
Training on augumented user 6734 39/50 current_auc = 0.6476608187134503
User 6734 AUC after training: 0.6470405812511075
User 6734 does not improve AUC. Reverting changes.
Training on augumented user 100865 40/50 current_auc = 0.6476608187134503
User 100865 AUC after training: 0.647217791954634
User 100865 does not improve AUC. Reverting changes.
Training on augumented user 25586 41/50 current_auc = 0.6476608187134503
User 25586 AUC after training: 0.6476829700513911
User 25586 improves AUC. Keeping the model.
Training on augumented user 21269 42/50 current_auc = 0.6476829700513911
User 21269 AUC after training: 0.6469519758993444
User 21269 does not improve AUC. Reverting changes.
Training on augumented user 36390 43/50 current_auc = 0.6476829700513911
User 36390 AUC after training: 0.6471734892787524
User 36390 does not improve AUC. Reverting changes.
Training on augumented user 12934 44/50 current_auc = 0.6476829700513911
User 12934 AUC after training: 0.6463317384370015
User 12934 does not improve AUC. Reverting changes.
Training on augumented user 106466 45/50 current_auc = 0.6476829700513911
User 106466 AUC after training: 0.6469741272372851
User 106466 does not improve AUC. Reverting changes.
Training on augumented user 123747 46/50 current_auc = 0.6476829700513911
User 123747 AUC after training: 0.647217791954634
User 123747 does not improve AUC. Reverting changes.
Training on augumented user 59197 47/50 current_auc = 0.6476829700513911
User 59197 AUC after training: 0.6472399432925748
User 59197 does not improve AUC. Reverting changes.
Training on augumented user 56166 48/50 current_auc = 0.6476829700513911
User 56166 AUC after training: 0.6471291866028708
User 56166 does not improve AUC. Reverting changes.
Training on augumented user 39192 49/50 current_auc = 0.6476829700513911
User 39192 AUC after training: 0.6479709374446216
User 39192 improves AUC. Keeping the model.
[2024-12-02 18:28:10.313501] start test user 98371 91/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:28:11.251898] start test user 98371 91/567 recall augumented users by random, augumented_users = [98042, 2456, 38498, 41406, 70448, 62107, 33164, 46353, 8909, 100765, 128974, 86792, 127559, 114959, 97397, 11167, 104128, 81355, 73323, 47715, 119652, 97908, 72391, 39376, 58677, 46398, 135914, 132995, 118223, 30471, 50094, 10988, 81046, 62873, 88778, 22364, 57509, 6595, 90702, 17389, 34962, 130052, 40118, 79563, 28598, 102223, 130319, 124243, 56509, 4576]
[2024-12-02 18:28:11.275070] user = 98371 Cloud 91/567
[2024-12-02 18:28:11.305716] user = 98371 Local 91/567
[2024-12-02 18:28:11.368319] user = 98371 Local+ 91/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:28:13.568735] user = 98371 MPDA- 91/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7669037691112746
Training on augumented user 98042 0/50 current_auc = 0.7669037691112746
User 98042 AUC after training: 0.7667402501839587
User 98042 does not improve AUC. Reverting changes.
Training on augumented user 2456 1/50 current_auc = 0.7669037691112746
User 2456 AUC after training: 0.7664132123293271
User 2456 does not improve AUC. Reverting changes.
Training on augumented user 38498 2/50 current_auc = 0.7669037691112746
User 38498 AUC after training: 0.7664132123293271
User 38498 does not improve AUC. Reverting changes.
Training on augumented user 41406 3/50 current_auc = 0.7669037691112746
User 41406 AUC after training: 0.7666584907203009
User 41406 does not improve AUC. Reverting changes.
Training on augumented user 70448 4/50 current_auc = 0.7669037691112746
User 70448 AUC after training: 0.7664132123293271
User 70448 does not improve AUC. Reverting changes.
Training on augumented user 62107 5/50 current_auc = 0.7669037691112746
User 62107 AUC after training: 0.766494971792985
User 62107 does not improve AUC. Reverting changes.
Training on augumented user 33164 6/50 current_auc = 0.7669037691112746
User 33164 AUC after training: 0.76551385822909
User 33164 does not improve AUC. Reverting changes.
Training on augumented user 46353 7/50 current_auc = 0.7669037691112746
User 46353 AUC after training: 0.7666584907203009
User 46353 does not improve AUC. Reverting changes.
Training on augumented user 8909 8/50 current_auc = 0.7669037691112746
User 8909 AUC after training: 0.7665767312566429
User 8909 does not improve AUC. Reverting changes.
Training on augumented user 100765 9/50 current_auc = 0.7669037691112746
User 100765 AUC after training: 0.7668220096476167
User 100765 does not improve AUC. Reverting changes.
Training on augumented user 128974 10/50 current_auc = 0.7669037691112746
User 128974 AUC after training: 0.7666584907203009
User 128974 does not improve AUC. Reverting changes.
Training on augumented user 86792 11/50 current_auc = 0.7669037691112746
User 86792 AUC after training: 0.7666584907203009
User 86792 does not improve AUC. Reverting changes.
Training on augumented user 127559 12/50 current_auc = 0.7669037691112746
User 127559 AUC after training: 0.7668220096476166
User 127559 does not improve AUC. Reverting changes.
Training on augumented user 114959 13/50 current_auc = 0.7669037691112746
User 114959 AUC after training: 0.7667402501839587
User 114959 does not improve AUC. Reverting changes.
Training on augumented user 97397 14/50 current_auc = 0.7669037691112746
User 97397 AUC after training: 0.7668628893794457
User 97397 does not improve AUC. Reverting changes.
Training on augumented user 11167 15/50 current_auc = 0.7669037691112746
User 11167 AUC after training: 0.7666584907203009
User 11167 does not improve AUC. Reverting changes.
Training on augumented user 104128 16/50 current_auc = 0.7669037691112746
User 104128 AUC after training: 0.7666584907203009
User 104128 does not improve AUC. Reverting changes.
Training on augumented user 81355 17/50 current_auc = 0.7669037691112746
User 81355 AUC after training: 0.7669037691112747
User 81355 improves AUC. Keeping the model.
Training on augumented user 73323 18/50 current_auc = 0.7669037691112747
User 73323 AUC after training: 0.7666584907203009
User 73323 does not improve AUC. Reverting changes.
Training on augumented user 47715 19/50 current_auc = 0.7669037691112747
User 47715 AUC after training: 0.7668220096476167
User 47715 does not improve AUC. Reverting changes.
Training on augumented user 119652 20/50 current_auc = 0.7669037691112747
User 119652 AUC after training: 0.7658408960837217
User 119652 does not improve AUC. Reverting changes.
Training on augumented user 97908 21/50 current_auc = 0.7669037691112747
User 97908 AUC after training: 0.7665767312566429
User 97908 does not improve AUC. Reverting changes.
Training on augumented user 72391 22/50 current_auc = 0.7669037691112747
User 72391 AUC after training: 0.7674760853568801
User 72391 improves AUC. Keeping the model.
Training on augumented user 39376 23/50 current_auc = 0.7674760853568801
User 39376 AUC after training: 0.7671490475022484
User 39376 does not improve AUC. Reverting changes.
Training on augumented user 58677 24/50 current_auc = 0.7674760853568801
User 58677 AUC after training: 0.767516965088709
User 58677 improves AUC. Keeping the model.
Training on augumented user 46398 25/50 current_auc = 0.767516965088709
User 46398 AUC after training: 0.7673943258932221
User 46398 does not improve AUC. Reverting changes.
Training on augumented user 135914 26/50 current_auc = 0.767516965088709
User 135914 AUC after training: 0.7672716866977352
User 135914 does not improve AUC. Reverting changes.
Training on augumented user 132995 27/50 current_auc = 0.767516965088709
User 132995 AUC after training: 0.7673534461613931
User 132995 does not improve AUC. Reverting changes.
Training on augumented user 118223 28/50 current_auc = 0.767516965088709
User 118223 AUC after training: 0.7674352056250511
User 118223 does not improve AUC. Reverting changes.
Training on augumented user 30471 29/50 current_auc = 0.767516965088709
User 30471 AUC after training: 0.7673534461613932
User 30471 does not improve AUC. Reverting changes.
Training on augumented user 50094 30/50 current_auc = 0.767516965088709
User 50094 AUC after training: 0.7673125664295642
User 50094 does not improve AUC. Reverting changes.
Training on augumented user 10988 31/50 current_auc = 0.767516965088709
User 10988 AUC after training: 0.7671490475022483
User 10988 does not improve AUC. Reverting changes.
Training on augumented user 81046 32/50 current_auc = 0.767516965088709
User 81046 AUC after training: 0.7674352056250511
User 81046 does not improve AUC. Reverting changes.
Training on augumented user 62873 33/50 current_auc = 0.767516965088709
User 62873 AUC after training: 0.7674760853568801
User 62873 does not improve AUC. Reverting changes.
Training on augumented user 88778 34/50 current_auc = 0.767516965088709
User 88778 AUC after training: 0.7672716866977353
User 88778 does not improve AUC. Reverting changes.
Training on augumented user 22364 35/50 current_auc = 0.767516965088709
User 22364 AUC after training: 0.7674352056250511
User 22364 does not improve AUC. Reverting changes.
Training on augumented user 57509 36/50 current_auc = 0.767516965088709
User 57509 AUC after training: 0.7671490475022484
User 57509 does not improve AUC. Reverting changes.
Training on augumented user 6595 37/50 current_auc = 0.767516965088709
User 6595 AUC after training: 0.7678031232115117
User 6595 improves AUC. Keeping the model.
Training on augumented user 90702 38/50 current_auc = 0.7678031232115117
User 90702 AUC after training: 0.7680484016024854
User 90702 improves AUC. Keeping the model.
Training on augumented user 17389 39/50 current_auc = 0.7680484016024854
User 17389 AUC after training: 0.7679666421388275
User 17389 does not improve AUC. Reverting changes.
Training on augumented user 34962 40/50 current_auc = 0.7680484016024854
User 34962 AUC after training: 0.7667402501839587
User 34962 does not improve AUC. Reverting changes.
Training on augumented user 130052 41/50 current_auc = 0.7680484016024854
User 130052 AUC after training: 0.7682119205298013
User 130052 improves AUC. Keeping the model.
Training on augumented user 40118 42/50 current_auc = 0.7682119205298013
User 40118 AUC after training: 0.7682936799934592
User 40118 improves AUC. Keeping the model.
Training on augumented user 79563 43/50 current_auc = 0.7682936799934592
User 79563 AUC after training: 0.7680484016024854
User 79563 does not improve AUC. Reverting changes.
Training on augumented user 28598 44/50 current_auc = 0.7682936799934592
User 28598 AUC after training: 0.7670672880385905
User 28598 does not improve AUC. Reverting changes.
Training on augumented user 102223 45/50 current_auc = 0.7682936799934592
User 102223 AUC after training: 0.7682119205298013
User 102223 does not improve AUC. Reverting changes.
Training on augumented user 130319 46/50 current_auc = 0.7682936799934592
User 130319 AUC after training: 0.7682119205298013
User 130319 does not improve AUC. Reverting changes.
Training on augumented user 124243 47/50 current_auc = 0.7682936799934592
User 124243 AUC after training: 0.768538958384433
User 124243 improves AUC. Keeping the model.
Training on augumented user 56509 48/50 current_auc = 0.768538958384433
User 56509 AUC after training: 0.7682936799934592
User 56509 does not improve AUC. Reverting changes.
Training on augumented user 4576 49/50 current_auc = 0.768538958384433
User 4576 AUC after training: 0.7684571989207751
User 4576 does not improve AUC. Reverting changes.
[2024-12-02 18:28:41.531778] start test user 98377 92/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:28:41.979710] start test user 98377 92/567 recall augumented users by random, augumented_users = [86702, 51994, 75196, 66802, 78005, 75066, 136329, 120075, 77700, 69755, 116744, 67034, 34534, 92496, 78958, 129350, 108453, 7843, 130196, 40749, 93971, 75300, 3737, 74991, 125300, 13366, 4385, 92139, 4757, 53724, 114254, 41089, 85396, 26679, 71802, 105142, 48803, 100080, 3539, 72098, 41062, 136886, 104364, 100173, 25929, 49193, 2396, 40589, 123208, 95114]
[2024-12-02 18:28:41.995113] user = 98377 Cloud 92/567
[2024-12-02 18:28:42.005445] user = 98377 Local 92/567
[2024-12-02 18:28:42.070425] user = 98377 Local+ 92/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:28:44.002995] user = 98377 MPDA- 92/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.75
Training on augumented user 86702 0/50 current_auc = 0.75
User 86702 AUC after training: 0.75
User 86702 does not improve AUC. Reverting changes.
Training on augumented user 51994 1/50 current_auc = 0.75
User 51994 AUC after training: 0.75
User 51994 does not improve AUC. Reverting changes.
Training on augumented user 75196 2/50 current_auc = 0.75
User 75196 AUC after training: 0.75
User 75196 does not improve AUC. Reverting changes.
Training on augumented user 66802 3/50 current_auc = 0.75
User 66802 AUC after training: 0.75
User 66802 does not improve AUC. Reverting changes.
Training on augumented user 78005 4/50 current_auc = 0.75
User 78005 AUC after training: 0.75
User 78005 does not improve AUC. Reverting changes.
Training on augumented user 75066 5/50 current_auc = 0.75
User 75066 AUC after training: 0.75
User 75066 does not improve AUC. Reverting changes.
Training on augumented user 136329 6/50 current_auc = 0.75
User 136329 AUC after training: 0.75
User 136329 does not improve AUC. Reverting changes.
Training on augumented user 120075 7/50 current_auc = 0.75
User 120075 AUC after training: 0.75
User 120075 does not improve AUC. Reverting changes.
Training on augumented user 77700 8/50 current_auc = 0.75
User 77700 AUC after training: 0.75
User 77700 does not improve AUC. Reverting changes.
Training on augumented user 69755 9/50 current_auc = 0.75
User 69755 AUC after training: 0.75
User 69755 does not improve AUC. Reverting changes.
Training on augumented user 116744 10/50 current_auc = 0.75
User 116744 AUC after training: 0.75
User 116744 does not improve AUC. Reverting changes.
Training on augumented user 67034 11/50 current_auc = 0.75
User 67034 AUC after training: 0.75
User 67034 does not improve AUC. Reverting changes.
Training on augumented user 34534 12/50 current_auc = 0.75
User 34534 AUC after training: 0.75
User 34534 does not improve AUC. Reverting changes.
Training on augumented user 92496 13/50 current_auc = 0.75
User 92496 AUC after training: 0.75
User 92496 does not improve AUC. Reverting changes.
Training on augumented user 78958 14/50 current_auc = 0.75
User 78958 AUC after training: 0.75
User 78958 does not improve AUC. Reverting changes.
Training on augumented user 129350 15/50 current_auc = 0.75
User 129350 AUC after training: 0.75
User 129350 does not improve AUC. Reverting changes.
Training on augumented user 108453 16/50 current_auc = 0.75
User 108453 AUC after training: 0.75
User 108453 does not improve AUC. Reverting changes.
Training on augumented user 7843 17/50 current_auc = 0.75
User 7843 AUC after training: 0.75
User 7843 does not improve AUC. Reverting changes.
Training on augumented user 130196 18/50 current_auc = 0.75
User 130196 AUC after training: 0.75
User 130196 does not improve AUC. Reverting changes.
Training on augumented user 40749 19/50 current_auc = 0.75
User 40749 AUC after training: 0.75
User 40749 does not improve AUC. Reverting changes.
Training on augumented user 93971 20/50 current_auc = 0.75
User 93971 AUC after training: 0.75
User 93971 does not improve AUC. Reverting changes.
Training on augumented user 75300 21/50 current_auc = 0.75
User 75300 AUC after training: 0.75
User 75300 does not improve AUC. Reverting changes.
Training on augumented user 3737 22/50 current_auc = 0.75
User 3737 AUC after training: 0.75
User 3737 does not improve AUC. Reverting changes.
Training on augumented user 74991 23/50 current_auc = 0.75
User 74991 AUC after training: 0.75
User 74991 does not improve AUC. Reverting changes.
Training on augumented user 125300 24/50 current_auc = 0.75
User 125300 AUC after training: 0.75
User 125300 does not improve AUC. Reverting changes.
Training on augumented user 13366 25/50 current_auc = 0.75
User 13366 AUC after training: 0.75
User 13366 does not improve AUC. Reverting changes.
Training on augumented user 4385 26/50 current_auc = 0.75
User 4385 AUC after training: 0.75
User 4385 does not improve AUC. Reverting changes.
Training on augumented user 92139 27/50 current_auc = 0.75
User 92139 AUC after training: 0.75
User 92139 does not improve AUC. Reverting changes.
Training on augumented user 4757 28/50 current_auc = 0.75
User 4757 AUC after training: 0.75
User 4757 does not improve AUC. Reverting changes.
Training on augumented user 53724 29/50 current_auc = 0.75
User 53724 AUC after training: 0.75
User 53724 does not improve AUC. Reverting changes.
Training on augumented user 114254 30/50 current_auc = 0.75
User 114254 AUC after training: 0.75
User 114254 does not improve AUC. Reverting changes.
Training on augumented user 41089 31/50 current_auc = 0.75
User 41089 AUC after training: 0.75
User 41089 does not improve AUC. Reverting changes.
Training on augumented user 85396 32/50 current_auc = 0.75
User 85396 AUC after training: 0.75
User 85396 does not improve AUC. Reverting changes.
Training on augumented user 26679 33/50 current_auc = 0.75
User 26679 AUC after training: 0.75
User 26679 does not improve AUC. Reverting changes.
Training on augumented user 71802 34/50 current_auc = 0.75
User 71802 AUC after training: 0.75
User 71802 does not improve AUC. Reverting changes.
Training on augumented user 105142 35/50 current_auc = 0.75
User 105142 AUC after training: 0.75
User 105142 does not improve AUC. Reverting changes.
Training on augumented user 48803 36/50 current_auc = 0.75
User 48803 AUC after training: 0.75
User 48803 does not improve AUC. Reverting changes.
Training on augumented user 100080 37/50 current_auc = 0.75
User 100080 AUC after training: 0.75
User 100080 does not improve AUC. Reverting changes.
Training on augumented user 3539 38/50 current_auc = 0.75
User 3539 AUC after training: 0.75
User 3539 does not improve AUC. Reverting changes.
Training on augumented user 72098 39/50 current_auc = 0.75
User 72098 AUC after training: 0.75
User 72098 does not improve AUC. Reverting changes.
Training on augumented user 41062 40/50 current_auc = 0.75
User 41062 AUC after training: 0.75
User 41062 does not improve AUC. Reverting changes.
Training on augumented user 136886 41/50 current_auc = 0.75
User 136886 AUC after training: 0.75
User 136886 does not improve AUC. Reverting changes.
Training on augumented user 104364 42/50 current_auc = 0.75
User 104364 AUC after training: 0.75
User 104364 does not improve AUC. Reverting changes.
Training on augumented user 100173 43/50 current_auc = 0.75
User 100173 AUC after training: 0.75
User 100173 does not improve AUC. Reverting changes.
Training on augumented user 25929 44/50 current_auc = 0.75
User 25929 AUC after training: 0.75
User 25929 does not improve AUC. Reverting changes.
Training on augumented user 49193 45/50 current_auc = 0.75
User 49193 AUC after training: 0.75
User 49193 does not improve AUC. Reverting changes.
Training on augumented user 2396 46/50 current_auc = 0.75
User 2396 AUC after training: 0.75
User 2396 does not improve AUC. Reverting changes.
Training on augumented user 40589 47/50 current_auc = 0.75
User 40589 AUC after training: 0.75
User 40589 does not improve AUC. Reverting changes.
Training on augumented user 123208 48/50 current_auc = 0.75
User 123208 AUC after training: 0.75
User 123208 does not improve AUC. Reverting changes.
Training on augumented user 95114 49/50 current_auc = 0.75
User 95114 AUC after training: 0.75
User 95114 does not improve AUC. Reverting changes.
[2024-12-02 18:29:13.331259] start test user 98394 93/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:29:13.938751] start test user 98394 93/567 recall augumented users by random, augumented_users = [76871, 60202, 16207, 92331, 67284, 28544, 65605, 3810, 136010, 91921, 100722, 79821, 91812, 45750, 95084, 45562, 75352, 61870, 74239, 75775, 85564, 61882, 89127, 116294, 85800, 21984, 18115, 55879, 71459, 136285, 88557, 93030, 56243, 96819, 115802, 22711, 52276, 15505, 37870, 14686, 125799, 4151, 32287, 68395, 46677, 55814, 65488, 86196, 66117, 24634]
[2024-12-02 18:29:13.954968] user = 98394 Cloud 93/567
[2024-12-02 18:29:13.974327] user = 98394 Local 93/567
[2024-12-02 18:29:14.141627] user = 98394 Local+ 93/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:29:16.852139] user = 98394 MPDA- 93/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.375
Training on augumented user 76871 0/50 current_auc = 0.375
User 76871 AUC after training: 0.375
User 76871 does not improve AUC. Reverting changes.
Training on augumented user 60202 1/50 current_auc = 0.375
User 60202 AUC after training: 0.375
User 60202 does not improve AUC. Reverting changes.
Training on augumented user 16207 2/50 current_auc = 0.375
User 16207 AUC after training: 0.375
User 16207 does not improve AUC. Reverting changes.
Training on augumented user 92331 3/50 current_auc = 0.375
User 92331 AUC after training: 0.375
User 92331 does not improve AUC. Reverting changes.
Training on augumented user 67284 4/50 current_auc = 0.375
User 67284 AUC after training: 0.375
User 67284 does not improve AUC. Reverting changes.
Training on augumented user 28544 5/50 current_auc = 0.375
User 28544 AUC after training: 0.375
User 28544 does not improve AUC. Reverting changes.
Training on augumented user 65605 6/50 current_auc = 0.375
User 65605 AUC after training: 0.375
User 65605 does not improve AUC. Reverting changes.
Training on augumented user 3810 7/50 current_auc = 0.375
User 3810 AUC after training: 0.375
User 3810 does not improve AUC. Reverting changes.
Training on augumented user 136010 8/50 current_auc = 0.375
User 136010 AUC after training: 0.375
User 136010 does not improve AUC. Reverting changes.
Training on augumented user 91921 9/50 current_auc = 0.375
User 91921 AUC after training: 0.375
User 91921 does not improve AUC. Reverting changes.
Training on augumented user 100722 10/50 current_auc = 0.375
User 100722 AUC after training: 0.375
User 100722 does not improve AUC. Reverting changes.
Training on augumented user 79821 11/50 current_auc = 0.375
User 79821 AUC after training: 0.375
User 79821 does not improve AUC. Reverting changes.
Training on augumented user 91812 12/50 current_auc = 0.375
User 91812 AUC after training: 0.375
User 91812 does not improve AUC. Reverting changes.
Training on augumented user 45750 13/50 current_auc = 0.375
User 45750 AUC after training: 0.375
User 45750 does not improve AUC. Reverting changes.
Training on augumented user 95084 14/50 current_auc = 0.375
User 95084 AUC after training: 0.375
User 95084 does not improve AUC. Reverting changes.
Training on augumented user 45562 15/50 current_auc = 0.375
User 45562 AUC after training: 0.375
User 45562 does not improve AUC. Reverting changes.
Training on augumented user 75352 16/50 current_auc = 0.375
User 75352 AUC after training: 0.375
User 75352 does not improve AUC. Reverting changes.
Training on augumented user 61870 17/50 current_auc = 0.375
User 61870 AUC after training: 0.375
User 61870 does not improve AUC. Reverting changes.
Training on augumented user 74239 18/50 current_auc = 0.375
User 74239 AUC after training: 0.375
User 74239 does not improve AUC. Reverting changes.
Training on augumented user 75775 19/50 current_auc = 0.375
User 75775 AUC after training: 0.375
User 75775 does not improve AUC. Reverting changes.
Training on augumented user 85564 20/50 current_auc = 0.375
User 85564 AUC after training: 0.375
User 85564 does not improve AUC. Reverting changes.
Training on augumented user 61882 21/50 current_auc = 0.375
User 61882 AUC after training: 0.375
User 61882 does not improve AUC. Reverting changes.
Training on augumented user 89127 22/50 current_auc = 0.375
User 89127 AUC after training: 0.375
User 89127 does not improve AUC. Reverting changes.
Training on augumented user 116294 23/50 current_auc = 0.375
User 116294 AUC after training: 0.375
User 116294 does not improve AUC. Reverting changes.
Training on augumented user 85800 24/50 current_auc = 0.375
User 85800 AUC after training: 0.375
User 85800 does not improve AUC. Reverting changes.
Training on augumented user 21984 25/50 current_auc = 0.375
User 21984 AUC after training: 0.375
User 21984 does not improve AUC. Reverting changes.
Training on augumented user 18115 26/50 current_auc = 0.375
User 18115 AUC after training: 0.375
User 18115 does not improve AUC. Reverting changes.
Training on augumented user 55879 27/50 current_auc = 0.375
User 55879 AUC after training: 0.375
User 55879 does not improve AUC. Reverting changes.
Training on augumented user 71459 28/50 current_auc = 0.375
User 71459 AUC after training: 0.375
User 71459 does not improve AUC. Reverting changes.
Training on augumented user 136285 29/50 current_auc = 0.375
User 136285 AUC after training: 0.375
User 136285 does not improve AUC. Reverting changes.
Training on augumented user 88557 30/50 current_auc = 0.375
User 88557 AUC after training: 0.375
User 88557 does not improve AUC. Reverting changes.
Training on augumented user 93030 31/50 current_auc = 0.375
User 93030 AUC after training: 0.375
User 93030 does not improve AUC. Reverting changes.
Training on augumented user 56243 32/50 current_auc = 0.375
User 56243 AUC after training: 0.375
User 56243 does not improve AUC. Reverting changes.
Training on augumented user 96819 33/50 current_auc = 0.375
User 96819 AUC after training: 0.375
User 96819 does not improve AUC. Reverting changes.
Training on augumented user 115802 34/50 current_auc = 0.375
User 115802 AUC after training: 0.375
User 115802 does not improve AUC. Reverting changes.
Training on augumented user 22711 35/50 current_auc = 0.375
User 22711 AUC after training: 0.375
User 22711 does not improve AUC. Reverting changes.
Training on augumented user 52276 36/50 current_auc = 0.375
User 52276 AUC after training: 0.375
User 52276 does not improve AUC. Reverting changes.
Training on augumented user 15505 37/50 current_auc = 0.375
User 15505 AUC after training: 0.375
User 15505 does not improve AUC. Reverting changes.
Training on augumented user 37870 38/50 current_auc = 0.375
User 37870 AUC after training: 0.375
User 37870 does not improve AUC. Reverting changes.
Training on augumented user 14686 39/50 current_auc = 0.375
User 14686 AUC after training: 0.375
User 14686 does not improve AUC. Reverting changes.
Training on augumented user 125799 40/50 current_auc = 0.375
User 125799 AUC after training: 0.375
User 125799 does not improve AUC. Reverting changes.
Training on augumented user 4151 41/50 current_auc = 0.375
User 4151 AUC after training: 0.375
User 4151 does not improve AUC. Reverting changes.
Training on augumented user 32287 42/50 current_auc = 0.375
User 32287 AUC after training: 0.375
User 32287 does not improve AUC. Reverting changes.
Training on augumented user 68395 43/50 current_auc = 0.375
User 68395 AUC after training: 0.375
User 68395 does not improve AUC. Reverting changes.
Training on augumented user 46677 44/50 current_auc = 0.375
User 46677 AUC after training: 0.375
User 46677 does not improve AUC. Reverting changes.
Training on augumented user 55814 45/50 current_auc = 0.375
User 55814 AUC after training: 0.375
User 55814 does not improve AUC. Reverting changes.
Training on augumented user 65488 46/50 current_auc = 0.375
User 65488 AUC after training: 0.375
User 65488 does not improve AUC. Reverting changes.
Training on augumented user 86196 47/50 current_auc = 0.375
User 86196 AUC after training: 0.375
User 86196 does not improve AUC. Reverting changes.
Training on augumented user 66117 48/50 current_auc = 0.375
User 66117 AUC after training: 0.375
User 66117 does not improve AUC. Reverting changes.
Training on augumented user 24634 49/50 current_auc = 0.375
User 24634 AUC after training: 0.375
User 24634 does not improve AUC. Reverting changes.
[2024-12-02 18:29:42.874578] start test user 98426 94/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:29:43.527752] start test user 98426 94/567 recall augumented users by random, augumented_users = [44087, 83558, 37850, 90484, 86548, 19928, 39170, 127801, 74332, 124424, 78598, 111575, 10964, 41455, 86811, 114594, 55007, 44719, 76506, 77032, 23447, 101667, 47159, 119325, 131790, 44106, 55592, 64559, 92425, 64343, 88178, 42823, 54302, 85699, 2883, 10721, 66188, 109130, 92488, 120352, 74006, 8553, 99348, 45228, 99616, 81043, 26603, 20915, 84249, 64299]
[2024-12-02 18:29:43.542503] user = 98426 Cloud 94/567
[2024-12-02 18:29:43.567397] user = 98426 Local 94/567
[2024-12-02 18:29:43.600675] user = 98426 Local+ 94/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:29:46.209144] user = 98426 MPDA- 94/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6658918005071852
Training on augumented user 44087 0/50 current_auc = 0.6658918005071852
User 44087 AUC after training: 0.6657861369399831
User 44087 does not improve AUC. Reverting changes.
Training on augumented user 83558 1/50 current_auc = 0.6658918005071852
User 83558 AUC after training: 0.6666314454775993
User 83558 improves AUC. Keeping the model.
Training on augumented user 37850 2/50 current_auc = 0.6666314454775993
User 37850 AUC after training: 0.6667371090448014
User 37850 improves AUC. Keeping the model.
Training on augumented user 90484 3/50 current_auc = 0.6667371090448014
User 90484 AUC after training: 0.6667371090448014
User 90484 does not improve AUC. Reverting changes.
Training on augumented user 86548 4/50 current_auc = 0.6667371090448014
User 86548 AUC after training: 0.6668427726120034
User 86548 improves AUC. Keeping the model.
Training on augumented user 19928 5/50 current_auc = 0.6668427726120034
User 19928 AUC after training: 0.6665257819103972
User 19928 does not improve AUC. Reverting changes.
Training on augumented user 39170 6/50 current_auc = 0.6668427726120034
User 39170 AUC after training: 0.6664201183431953
User 39170 does not improve AUC. Reverting changes.
Training on augumented user 127801 7/50 current_auc = 0.6668427726120034
User 127801 AUC after training: 0.6698013524936601
User 127801 improves AUC. Keeping the model.
Training on augumented user 74332 8/50 current_auc = 0.6698013524936601
User 74332 AUC after training: 0.6699070160608622
User 74332 improves AUC. Keeping the model.
Training on augumented user 124424 9/50 current_auc = 0.6699070160608622
User 124424 AUC after training: 0.6658918005071851
User 124424 does not improve AUC. Reverting changes.
Training on augumented user 78598 10/50 current_auc = 0.6699070160608622
User 78598 AUC after training: 0.6704353338968724
User 78598 improves AUC. Keeping the model.
Training on augumented user 111575 11/50 current_auc = 0.6704353338968724
User 111575 AUC after training: 0.6709636517328825
User 111575 improves AUC. Keeping the model.
Training on augumented user 10964 12/50 current_auc = 0.6709636517328825
User 10964 AUC after training: 0.6705409974640745
User 10964 does not improve AUC. Reverting changes.
Training on augumented user 41455 13/50 current_auc = 0.6709636517328825
User 41455 AUC after training: 0.6702240067624683
User 41455 does not improve AUC. Reverting changes.
Training on augumented user 86811 14/50 current_auc = 0.6709636517328825
User 86811 AUC after training: 0.6678994082840237
User 86811 does not improve AUC. Reverting changes.
Training on augumented user 114594 15/50 current_auc = 0.6709636517328825
User 114594 AUC after training: 0.669167371090448
User 114594 does not improve AUC. Reverting changes.
Training on augumented user 55007 16/50 current_auc = 0.6709636517328825
User 55007 AUC after training: 0.6705409974640744
User 55007 does not improve AUC. Reverting changes.
Training on augumented user 44719 17/50 current_auc = 0.6709636517328825
User 44719 AUC after training: 0.6706466610312763
User 44719 does not improve AUC. Reverting changes.
Training on augumented user 76506 18/50 current_auc = 0.6709636517328825
User 76506 AUC after training: 0.6683220625528318
User 76506 does not improve AUC. Reverting changes.
Training on augumented user 77032 19/50 current_auc = 0.6709636517328825
User 77032 AUC after training: 0.6700126796280642
User 77032 does not improve AUC. Reverting changes.
Training on augumented user 23447 20/50 current_auc = 0.6709636517328825
User 23447 AUC after training: 0.669061707523246
User 23447 does not improve AUC. Reverting changes.
Training on augumented user 101667 21/50 current_auc = 0.6709636517328825
User 101667 AUC after training: 0.6681107354184277
User 101667 does not improve AUC. Reverting changes.
Training on augumented user 47159 22/50 current_auc = 0.6709636517328825
User 47159 AUC after training: 0.6709636517328825
User 47159 does not improve AUC. Reverting changes.
Training on augumented user 119325 23/50 current_auc = 0.6709636517328825
User 119325 AUC after training: 0.6699070160608622
User 119325 does not improve AUC. Reverting changes.
Training on augumented user 131790 24/50 current_auc = 0.6709636517328825
User 131790 AUC after training: 0.6693786982248521
User 131790 does not improve AUC. Reverting changes.
Training on augumented user 44106 25/50 current_auc = 0.6709636517328825
User 44106 AUC after training: 0.6699070160608622
User 44106 does not improve AUC. Reverting changes.
Training on augumented user 55592 26/50 current_auc = 0.6709636517328825
User 55592 AUC after training: 0.6702240067624683
User 55592 does not improve AUC. Reverting changes.
Training on augumented user 64559 27/50 current_auc = 0.6709636517328825
User 64559 AUC after training: 0.6705409974640745
User 64559 does not improve AUC. Reverting changes.
Training on augumented user 92425 28/50 current_auc = 0.6709636517328825
User 92425 AUC after training: 0.6705409974640744
User 92425 does not improve AUC. Reverting changes.
Training on augumented user 64343 29/50 current_auc = 0.6709636517328825
User 64343 AUC after training: 0.6702240067624683
User 64343 does not improve AUC. Reverting changes.
Training on augumented user 88178 30/50 current_auc = 0.6709636517328825
User 88178 AUC after training: 0.6704353338968724
User 88178 does not improve AUC. Reverting changes.
Training on augumented user 42823 31/50 current_auc = 0.6709636517328825
User 42823 AUC after training: 0.6709636517328825
User 42823 does not improve AUC. Reverting changes.
Training on augumented user 54302 32/50 current_auc = 0.6709636517328825
User 54302 AUC after training: 0.669167371090448
User 54302 does not improve AUC. Reverting changes.
Training on augumented user 85699 33/50 current_auc = 0.6709636517328825
User 85699 AUC after training: 0.6708579881656805
User 85699 does not improve AUC. Reverting changes.
Training on augumented user 2883 34/50 current_auc = 0.6709636517328825
User 2883 AUC after training: 0.6705409974640744
User 2883 does not improve AUC. Reverting changes.
Training on augumented user 10721 35/50 current_auc = 0.6709636517328825
User 10721 AUC after training: 0.6712806424344886
User 10721 improves AUC. Keeping the model.
Training on augumented user 66188 36/50 current_auc = 0.6712806424344886
User 66188 AUC after training: 0.6720202874049028
User 66188 improves AUC. Keeping the model.
Training on augumented user 109130 37/50 current_auc = 0.6720202874049028
User 109130 AUC after training: 0.6718089602704987
User 109130 does not improve AUC. Reverting changes.
Training on augumented user 92488 38/50 current_auc = 0.6720202874049028
User 92488 AUC after training: 0.6715976331360947
User 92488 does not improve AUC. Reverting changes.
Training on augumented user 120352 39/50 current_auc = 0.6720202874049028
User 120352 AUC after training: 0.6714919695688927
User 120352 does not improve AUC. Reverting changes.
Training on augumented user 74006 40/50 current_auc = 0.6720202874049028
User 74006 AUC after training: 0.6715976331360947
User 74006 does not improve AUC. Reverting changes.
Training on augumented user 8553 41/50 current_auc = 0.6720202874049028
User 8553 AUC after training: 0.6722316145393068
User 8553 improves AUC. Keeping the model.
Training on augumented user 99348 42/50 current_auc = 0.6722316145393068
User 99348 AUC after training: 0.6709636517328825
User 99348 does not improve AUC. Reverting changes.
Training on augumented user 45228 43/50 current_auc = 0.6722316145393068
User 45228 AUC after training: 0.6717032967032968
User 45228 does not improve AUC. Reverting changes.
Training on augumented user 99616 44/50 current_auc = 0.6722316145393068
User 99616 AUC after training: 0.6713863060016906
User 99616 does not improve AUC. Reverting changes.
Training on augumented user 81043 45/50 current_auc = 0.6722316145393068
User 81043 AUC after training: 0.6709636517328825
User 81043 does not improve AUC. Reverting changes.
Training on augumented user 26603 46/50 current_auc = 0.6722316145393068
User 26603 AUC after training: 0.6723372781065089
User 26603 improves AUC. Keeping the model.
Training on augumented user 20915 47/50 current_auc = 0.6723372781065089
User 20915 AUC after training: 0.6729712595097209
User 20915 improves AUC. Keeping the model.
Training on augumented user 84249 48/50 current_auc = 0.6729712595097209
User 84249 AUC after training: 0.6722316145393068
User 84249 does not improve AUC. Reverting changes.
Training on augumented user 64299 49/50 current_auc = 0.6729712595097209
User 64299 AUC after training: 0.673076923076923
User 64299 improves AUC. Keeping the model.
[2024-12-02 18:30:21.378087] start test user 98470 95/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:30:22.008088] start test user 98470 95/567 recall augumented users by random, augumented_users = [561, 11582, 28136, 118382, 69616, 65964, 1494, 3218, 95845, 46213, 20435, 61435, 47689, 69388, 94133, 51835, 103445, 54415, 131030, 87395, 8662, 30221, 7426, 67175, 112873, 507, 37352, 10077, 93749, 12568, 71451, 112498, 134653, 20593, 105917, 32648, 112665, 36431, 75655, 99535, 29782, 24820, 61108, 28004, 61769, 81618, 101450, 93256, 98066, 32384]
[2024-12-02 18:30:22.026704] user = 98470 Cloud 95/567
[2024-12-02 18:30:22.049579] user = 98470 Local 95/567
[2024-12-02 18:30:22.399870] user = 98470 Local+ 95/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:30:25.426078] user = 98470 MPDA- 95/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6640522875816993
Training on augumented user 561 0/50 current_auc = 0.6640522875816993
User 561 AUC after training: 0.6639433551198257
User 561 does not improve AUC. Reverting changes.
Training on augumented user 11582 1/50 current_auc = 0.6640522875816993
User 11582 AUC after training: 0.6640522875816993
User 11582 does not improve AUC. Reverting changes.
Training on augumented user 28136 2/50 current_auc = 0.6640522875816993
User 28136 AUC after training: 0.6635076252723312
User 28136 does not improve AUC. Reverting changes.
Training on augumented user 118382 3/50 current_auc = 0.6640522875816993
User 118382 AUC after training: 0.664161220043573
User 118382 improves AUC. Keeping the model.
Training on augumented user 69616 4/50 current_auc = 0.664161220043573
User 69616 AUC after training: 0.6642701525054467
User 69616 improves AUC. Keeping the model.
Training on augumented user 65964 5/50 current_auc = 0.6642701525054467
User 65964 AUC after training: 0.6636165577342049
User 65964 does not improve AUC. Reverting changes.
Training on augumented user 1494 6/50 current_auc = 0.6642701525054467
User 1494 AUC after training: 0.6643790849673202
User 1494 improves AUC. Keeping the model.
Training on augumented user 3218 7/50 current_auc = 0.6643790849673202
User 3218 AUC after training: 0.6653594771241831
User 3218 improves AUC. Keeping the model.
Training on augumented user 95845 8/50 current_auc = 0.6653594771241831
User 95845 AUC after training: 0.665032679738562
User 95845 does not improve AUC. Reverting changes.
Training on augumented user 46213 9/50 current_auc = 0.6653594771241831
User 46213 AUC after training: 0.6654684095860566
User 46213 improves AUC. Keeping the model.
Training on augumented user 20435 10/50 current_auc = 0.6654684095860566
User 20435 AUC after training: 0.6645969498910675
User 20435 does not improve AUC. Reverting changes.
Training on augumented user 61435 11/50 current_auc = 0.6654684095860566
User 61435 AUC after training: 0.6652505446623094
User 61435 does not improve AUC. Reverting changes.
Training on augumented user 47689 12/50 current_auc = 0.6654684095860566
User 47689 AUC after training: 0.6657952069716776
User 47689 improves AUC. Keeping the model.
Training on augumented user 69388 13/50 current_auc = 0.6657952069716776
User 69388 AUC after training: 0.6652505446623093
User 69388 does not improve AUC. Reverting changes.
Training on augumented user 94133 14/50 current_auc = 0.6657952069716776
User 94133 AUC after training: 0.6659041394335511
User 94133 improves AUC. Keeping the model.
Training on augumented user 51835 15/50 current_auc = 0.6659041394335511
User 51835 AUC after training: 0.6657952069716776
User 51835 does not improve AUC. Reverting changes.
Training on augumented user 103445 16/50 current_auc = 0.6659041394335511
User 103445 AUC after training: 0.6655773420479302
User 103445 does not improve AUC. Reverting changes.
Training on augumented user 54415 17/50 current_auc = 0.6659041394335511
User 54415 AUC after training: 0.6655773420479302
User 54415 does not improve AUC. Reverting changes.
Training on augumented user 131030 18/50 current_auc = 0.6659041394335511
User 131030 AUC after training: 0.6657952069716775
User 131030 does not improve AUC. Reverting changes.
Training on augumented user 87395 19/50 current_auc = 0.6659041394335511
User 87395 AUC after training: 0.666013071895425
User 87395 improves AUC. Keeping the model.
Training on augumented user 8662 20/50 current_auc = 0.666013071895425
User 8662 AUC after training: 0.6657952069716777
User 8662 does not improve AUC. Reverting changes.
Training on augumented user 30221 21/50 current_auc = 0.666013071895425
User 30221 AUC after training: 0.6663398692810458
User 30221 improves AUC. Keeping the model.
Training on augumented user 7426 22/50 current_auc = 0.6663398692810458
User 7426 AUC after training: 0.6663398692810457
User 7426 does not improve AUC. Reverting changes.
Training on augumented user 67175 23/50 current_auc = 0.6663398692810458
User 67175 AUC after training: 0.666013071895425
User 67175 does not improve AUC. Reverting changes.
Training on augumented user 112873 24/50 current_auc = 0.6663398692810458
User 112873 AUC after training: 0.6660130718954248
User 112873 does not improve AUC. Reverting changes.
Training on augumented user 507 25/50 current_auc = 0.6663398692810458
User 507 AUC after training: 0.6662309368191722
User 507 does not improve AUC. Reverting changes.
Training on augumented user 37352 26/50 current_auc = 0.6663398692810458
User 37352 AUC after training: 0.6654684095860567
User 37352 does not improve AUC. Reverting changes.
Training on augumented user 10077 27/50 current_auc = 0.6663398692810458
User 10077 AUC after training: 0.6664488017429194
User 10077 improves AUC. Keeping the model.
Training on augumented user 93749 28/50 current_auc = 0.6664488017429194
User 93749 AUC after training: 0.6659041394335512
User 93749 does not improve AUC. Reverting changes.
Training on augumented user 12568 29/50 current_auc = 0.6664488017429194
User 12568 AUC after training: 0.6666666666666667
User 12568 improves AUC. Keeping the model.
Training on augumented user 71451 30/50 current_auc = 0.6666666666666667
User 71451 AUC after training: 0.6655773420479303
User 71451 does not improve AUC. Reverting changes.
Training on augumented user 112498 31/50 current_auc = 0.6666666666666667
User 112498 AUC after training: 0.666557734204793
User 112498 does not improve AUC. Reverting changes.
Training on augumented user 134653 32/50 current_auc = 0.6666666666666667
User 134653 AUC after training: 0.6663398692810457
User 134653 does not improve AUC. Reverting changes.
Training on augumented user 20593 33/50 current_auc = 0.6666666666666667
User 20593 AUC after training: 0.6651416122004357
User 20593 does not improve AUC. Reverting changes.
Training on augumented user 105917 34/50 current_auc = 0.6666666666666667
User 105917 AUC after training: 0.6666666666666667
User 105917 does not improve AUC. Reverting changes.
Training on augumented user 32648 35/50 current_auc = 0.6666666666666667
User 32648 AUC after training: 0.6661220043572985
User 32648 does not improve AUC. Reverting changes.
Training on augumented user 112665 36/50 current_auc = 0.6666666666666667
User 112665 AUC after training: 0.6669934640522877
User 112665 improves AUC. Keeping the model.
Training on augumented user 36431 37/50 current_auc = 0.6669934640522877
User 36431 AUC after training: 0.6671023965141613
User 36431 improves AUC. Keeping the model.
Training on augumented user 75655 38/50 current_auc = 0.6671023965141613
User 75655 AUC after training: 0.6675381263616558
User 75655 improves AUC. Keeping the model.
Training on augumented user 99535 39/50 current_auc = 0.6675381263616558
User 99535 AUC after training: 0.6675381263616558
User 99535 does not improve AUC. Reverting changes.
Training on augumented user 29782 40/50 current_auc = 0.6675381263616558
User 29782 AUC after training: 0.6672113289760349
User 29782 does not improve AUC. Reverting changes.
Training on augumented user 24820 41/50 current_auc = 0.6675381263616558
User 24820 AUC after training: 0.666557734204793
User 24820 does not improve AUC. Reverting changes.
Training on augumented user 61108 42/50 current_auc = 0.6675381263616558
User 61108 AUC after training: 0.6669934640522877
User 61108 does not improve AUC. Reverting changes.
Training on augumented user 28004 43/50 current_auc = 0.6675381263616558
User 28004 AUC after training: 0.6673202614379085
User 28004 does not improve AUC. Reverting changes.
Training on augumented user 61769 44/50 current_auc = 0.6675381263616558
User 61769 AUC after training: 0.6672113289760349
User 61769 does not improve AUC. Reverting changes.
Training on augumented user 81618 45/50 current_auc = 0.6675381263616558
User 81618 AUC after training: 0.6669934640522875
User 81618 does not improve AUC. Reverting changes.
Training on augumented user 101450 46/50 current_auc = 0.6675381263616558
User 101450 AUC after training: 0.6672113289760349
User 101450 does not improve AUC. Reverting changes.
Training on augumented user 93256 47/50 current_auc = 0.6675381263616558
User 93256 AUC after training: 0.6679738562091503
User 93256 improves AUC. Keeping the model.
Training on augumented user 98066 48/50 current_auc = 0.6679738562091503
User 98066 AUC after training: 0.6677559912854031
User 98066 does not improve AUC. Reverting changes.
Training on augumented user 32384 49/50 current_auc = 0.6679738562091503
User 32384 AUC after training: 0.6681917211328976
User 32384 improves AUC. Keeping the model.
[2024-12-02 18:30:59.215776] start test user 98479 96/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:30:59.795688] start test user 98479 96/567 recall augumented users by random, augumented_users = [97837, 82032, 132470, 41651, 136559, 95864, 107545, 21286, 104835, 88018, 134119, 14781, 126717, 57203, 64375, 81236, 88404, 3086, 122171, 49764, 63313, 93831, 121733, 82473, 87047, 9066, 40951, 101159, 138136, 88831, 99769, 6443, 132790, 130731, 57975, 63298, 13925, 131311, 30741, 57556, 100982, 110947, 64892, 4767, 38164, 47896, 105060, 65500, 109337, 106374]
[2024-12-02 18:30:59.811316] user = 98479 Cloud 96/567
[2024-12-02 18:30:59.837728] user = 98479 Local 96/567
[2024-12-02 18:30:59.937826] user = 98479 Local+ 96/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:31:02.258901] user = 98479 MPDA- 96/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7783203125
Training on augumented user 97837 0/50 current_auc = 0.7783203125
User 97837 AUC after training: 0.77734375
User 97837 does not improve AUC. Reverting changes.
Training on augumented user 82032 1/50 current_auc = 0.7783203125
User 82032 AUC after training: 0.7783203125
User 82032 does not improve AUC. Reverting changes.
Training on augumented user 132470 2/50 current_auc = 0.7783203125
User 132470 AUC after training: 0.779296875
User 132470 improves AUC. Keeping the model.
Training on augumented user 41651 3/50 current_auc = 0.779296875
User 41651 AUC after training: 0.77734375
User 41651 does not improve AUC. Reverting changes.
Training on augumented user 136559 4/50 current_auc = 0.779296875
User 136559 AUC after training: 0.779296875
User 136559 does not improve AUC. Reverting changes.
Training on augumented user 95864 5/50 current_auc = 0.779296875
User 95864 AUC after training: 0.7783203125
User 95864 does not improve AUC. Reverting changes.
Training on augumented user 107545 6/50 current_auc = 0.779296875
User 107545 AUC after training: 0.779296875
User 107545 does not improve AUC. Reverting changes.
Training on augumented user 21286 7/50 current_auc = 0.779296875
User 21286 AUC after training: 0.7783203125
User 21286 does not improve AUC. Reverting changes.
Training on augumented user 104835 8/50 current_auc = 0.779296875
User 104835 AUC after training: 0.77734375
User 104835 does not improve AUC. Reverting changes.
Training on augumented user 88018 9/50 current_auc = 0.779296875
User 88018 AUC after training: 0.779296875
User 88018 does not improve AUC. Reverting changes.
Training on augumented user 134119 10/50 current_auc = 0.779296875
User 134119 AUC after training: 0.7783203125
User 134119 does not improve AUC. Reverting changes.
Training on augumented user 14781 11/50 current_auc = 0.779296875
User 14781 AUC after training: 0.7783203125
User 14781 does not improve AUC. Reverting changes.
Training on augumented user 126717 12/50 current_auc = 0.779296875
User 126717 AUC after training: 0.77734375
User 126717 does not improve AUC. Reverting changes.
Training on augumented user 57203 13/50 current_auc = 0.779296875
User 57203 AUC after training: 0.779296875
User 57203 does not improve AUC. Reverting changes.
Training on augumented user 64375 14/50 current_auc = 0.779296875
User 64375 AUC after training: 0.779296875
User 64375 does not improve AUC. Reverting changes.
Training on augumented user 81236 15/50 current_auc = 0.779296875
User 81236 AUC after training: 0.779296875
User 81236 does not improve AUC. Reverting changes.
Training on augumented user 88404 16/50 current_auc = 0.779296875
User 88404 AUC after training: 0.7783203125
User 88404 does not improve AUC. Reverting changes.
Training on augumented user 3086 17/50 current_auc = 0.779296875
User 3086 AUC after training: 0.7783203125
User 3086 does not improve AUC. Reverting changes.
Training on augumented user 122171 18/50 current_auc = 0.779296875
User 122171 AUC after training: 0.7783203125
User 122171 does not improve AUC. Reverting changes.
Training on augumented user 49764 19/50 current_auc = 0.779296875
User 49764 AUC after training: 0.779296875
User 49764 does not improve AUC. Reverting changes.
Training on augumented user 63313 20/50 current_auc = 0.779296875
User 63313 AUC after training: 0.77734375
User 63313 does not improve AUC. Reverting changes.
Training on augumented user 93831 21/50 current_auc = 0.779296875
User 93831 AUC after training: 0.779296875
User 93831 does not improve AUC. Reverting changes.
Training on augumented user 121733 22/50 current_auc = 0.779296875
User 121733 AUC after training: 0.7783203125
User 121733 does not improve AUC. Reverting changes.
Training on augumented user 82473 23/50 current_auc = 0.779296875
User 82473 AUC after training: 0.77734375
User 82473 does not improve AUC. Reverting changes.
Training on augumented user 87047 24/50 current_auc = 0.779296875
User 87047 AUC after training: 0.77734375
User 87047 does not improve AUC. Reverting changes.
Training on augumented user 9066 25/50 current_auc = 0.779296875
User 9066 AUC after training: 0.7783203125
User 9066 does not improve AUC. Reverting changes.
Training on augumented user 40951 26/50 current_auc = 0.779296875
User 40951 AUC after training: 0.779296875
User 40951 does not improve AUC. Reverting changes.
Training on augumented user 101159 27/50 current_auc = 0.779296875
User 101159 AUC after training: 0.7783203125
User 101159 does not improve AUC. Reverting changes.
Training on augumented user 138136 28/50 current_auc = 0.779296875
User 138136 AUC after training: 0.7783203125
User 138136 does not improve AUC. Reverting changes.
Training on augumented user 88831 29/50 current_auc = 0.779296875
User 88831 AUC after training: 0.779296875
User 88831 does not improve AUC. Reverting changes.
Training on augumented user 99769 30/50 current_auc = 0.779296875
User 99769 AUC after training: 0.7783203125
User 99769 does not improve AUC. Reverting changes.
Training on augumented user 6443 31/50 current_auc = 0.779296875
User 6443 AUC after training: 0.779296875
User 6443 does not improve AUC. Reverting changes.
Training on augumented user 132790 32/50 current_auc = 0.779296875
User 132790 AUC after training: 0.7783203125
User 132790 does not improve AUC. Reverting changes.
Training on augumented user 130731 33/50 current_auc = 0.779296875
User 130731 AUC after training: 0.77734375
User 130731 does not improve AUC. Reverting changes.
Training on augumented user 57975 34/50 current_auc = 0.779296875
User 57975 AUC after training: 0.77734375
User 57975 does not improve AUC. Reverting changes.
Training on augumented user 63298 35/50 current_auc = 0.779296875
User 63298 AUC after training: 0.7763671875
User 63298 does not improve AUC. Reverting changes.
Training on augumented user 13925 36/50 current_auc = 0.779296875
User 13925 AUC after training: 0.7783203125
User 13925 does not improve AUC. Reverting changes.
Training on augumented user 131311 37/50 current_auc = 0.779296875
User 131311 AUC after training: 0.77734375
User 131311 does not improve AUC. Reverting changes.
Training on augumented user 30741 38/50 current_auc = 0.779296875
User 30741 AUC after training: 0.7783203125
User 30741 does not improve AUC. Reverting changes.
Training on augumented user 57556 39/50 current_auc = 0.779296875
User 57556 AUC after training: 0.7783203125
User 57556 does not improve AUC. Reverting changes.
Training on augumented user 100982 40/50 current_auc = 0.779296875
User 100982 AUC after training: 0.779296875
User 100982 does not improve AUC. Reverting changes.
Training on augumented user 110947 41/50 current_auc = 0.779296875
User 110947 AUC after training: 0.7783203125
User 110947 does not improve AUC. Reverting changes.
Training on augumented user 64892 42/50 current_auc = 0.779296875
User 64892 AUC after training: 0.77734375
User 64892 does not improve AUC. Reverting changes.
Training on augumented user 4767 43/50 current_auc = 0.779296875
User 4767 AUC after training: 0.7783203125
User 4767 does not improve AUC. Reverting changes.
Training on augumented user 38164 44/50 current_auc = 0.779296875
User 38164 AUC after training: 0.7783203125
User 38164 does not improve AUC. Reverting changes.
Training on augumented user 47896 45/50 current_auc = 0.779296875
User 47896 AUC after training: 0.77734375
User 47896 does not improve AUC. Reverting changes.
Training on augumented user 105060 46/50 current_auc = 0.779296875
User 105060 AUC after training: 0.7783203125
User 105060 does not improve AUC. Reverting changes.
Training on augumented user 65500 47/50 current_auc = 0.779296875
User 65500 AUC after training: 0.7783203125
User 65500 does not improve AUC. Reverting changes.
Training on augumented user 109337 48/50 current_auc = 0.779296875
User 109337 AUC after training: 0.7783203125
User 109337 does not improve AUC. Reverting changes.
Training on augumented user 106374 49/50 current_auc = 0.779296875
User 106374 AUC after training: 0.779296875
User 106374 does not improve AUC. Reverting changes.
[2024-12-02 18:31:35.937159] start test user 98488 97/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:31:36.339755] start test user 98488 97/567 recall augumented users by random, augumented_users = [138363, 7516, 93673, 41687, 122326, 951, 93897, 29221, 20483, 126389, 41984, 47433, 103666, 132879, 9840, 94771, 118667, 102362, 20341, 32011, 65719, 29174, 97782, 7105, 40001, 40314, 64471, 19212, 16061, 93076, 134156, 68195, 138311, 45067, 51970, 92191, 107863, 118790, 120508, 22690, 38774, 33730, 10198, 44966, 28099, 37932, 89116, 54102, 8267, 69127]
[2024-12-02 18:31:36.355258] user = 98488 Cloud 97/567
[2024-12-02 18:31:36.365145] user = 98488 Local 97/567
[2024-12-02 18:31:36.414900] user = 98488 Local+ 97/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:31:39.009712] user = 98488 MPDA- 97/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.9382716049382716
Training on augumented user 138363 0/50 current_auc = 0.9382716049382716
User 138363 AUC after training: 0.9382716049382716
User 138363 does not improve AUC. Reverting changes.
Training on augumented user 7516 1/50 current_auc = 0.9382716049382716
User 7516 AUC after training: 0.9382716049382716
User 7516 does not improve AUC. Reverting changes.
Training on augumented user 93673 2/50 current_auc = 0.9382716049382716
User 93673 AUC after training: 0.9382716049382716
User 93673 does not improve AUC. Reverting changes.
Training on augumented user 41687 3/50 current_auc = 0.9382716049382716
User 41687 AUC after training: 0.941358024691358
User 41687 improves AUC. Keeping the model.
Training on augumented user 122326 4/50 current_auc = 0.941358024691358
User 122326 AUC after training: 0.941358024691358
User 122326 does not improve AUC. Reverting changes.
Training on augumented user 951 5/50 current_auc = 0.941358024691358
User 951 AUC after training: 0.9382716049382716
User 951 does not improve AUC. Reverting changes.
Training on augumented user 93897 6/50 current_auc = 0.941358024691358
User 93897 AUC after training: 0.941358024691358
User 93897 does not improve AUC. Reverting changes.
Training on augumented user 29221 7/50 current_auc = 0.941358024691358
User 29221 AUC after training: 0.941358024691358
User 29221 does not improve AUC. Reverting changes.
Training on augumented user 20483 8/50 current_auc = 0.941358024691358
User 20483 AUC after training: 0.9382716049382716
User 20483 does not improve AUC. Reverting changes.
Training on augumented user 126389 9/50 current_auc = 0.941358024691358
User 126389 AUC after training: 0.941358024691358
User 126389 does not improve AUC. Reverting changes.
Training on augumented user 41984 10/50 current_auc = 0.941358024691358
User 41984 AUC after training: 0.941358024691358
User 41984 does not improve AUC. Reverting changes.
Training on augumented user 47433 11/50 current_auc = 0.941358024691358
User 47433 AUC after training: 0.941358024691358
User 47433 does not improve AUC. Reverting changes.
Training on augumented user 103666 12/50 current_auc = 0.941358024691358
User 103666 AUC after training: 0.941358024691358
User 103666 does not improve AUC. Reverting changes.
Training on augumented user 132879 13/50 current_auc = 0.941358024691358
User 132879 AUC after training: 0.941358024691358
User 132879 does not improve AUC. Reverting changes.
Training on augumented user 9840 14/50 current_auc = 0.941358024691358
User 9840 AUC after training: 0.941358024691358
User 9840 does not improve AUC. Reverting changes.
Training on augumented user 94771 15/50 current_auc = 0.941358024691358
User 94771 AUC after training: 0.9382716049382716
User 94771 does not improve AUC. Reverting changes.
Training on augumented user 118667 16/50 current_auc = 0.941358024691358
User 118667 AUC after training: 0.941358024691358
User 118667 does not improve AUC. Reverting changes.
Training on augumented user 102362 17/50 current_auc = 0.941358024691358
User 102362 AUC after training: 0.941358024691358
User 102362 does not improve AUC. Reverting changes.
Training on augumented user 20341 18/50 current_auc = 0.941358024691358
User 20341 AUC after training: 0.941358024691358
User 20341 does not improve AUC. Reverting changes.
Training on augumented user 32011 19/50 current_auc = 0.941358024691358
User 32011 AUC after training: 0.941358024691358
User 32011 does not improve AUC. Reverting changes.
Training on augumented user 65719 20/50 current_auc = 0.941358024691358
User 65719 AUC after training: 0.9382716049382716
User 65719 does not improve AUC. Reverting changes.
Training on augumented user 29174 21/50 current_auc = 0.941358024691358
User 29174 AUC after training: 0.941358024691358
User 29174 does not improve AUC. Reverting changes.
Training on augumented user 97782 22/50 current_auc = 0.941358024691358
User 97782 AUC after training: 0.941358024691358
User 97782 does not improve AUC. Reverting changes.
Training on augumented user 7105 23/50 current_auc = 0.941358024691358
User 7105 AUC after training: 0.941358024691358
User 7105 does not improve AUC. Reverting changes.
Training on augumented user 40001 24/50 current_auc = 0.941358024691358
User 40001 AUC after training: 0.941358024691358
User 40001 does not improve AUC. Reverting changes.
Training on augumented user 40314 25/50 current_auc = 0.941358024691358
User 40314 AUC after training: 0.941358024691358
User 40314 does not improve AUC. Reverting changes.
Training on augumented user 64471 26/50 current_auc = 0.941358024691358
User 64471 AUC after training: 0.941358024691358
User 64471 does not improve AUC. Reverting changes.
Training on augumented user 19212 27/50 current_auc = 0.941358024691358
User 19212 AUC after training: 0.941358024691358
User 19212 does not improve AUC. Reverting changes.
Training on augumented user 16061 28/50 current_auc = 0.941358024691358
User 16061 AUC after training: 0.941358024691358
User 16061 does not improve AUC. Reverting changes.
Training on augumented user 93076 29/50 current_auc = 0.941358024691358
User 93076 AUC after training: 0.941358024691358
User 93076 does not improve AUC. Reverting changes.
Training on augumented user 134156 30/50 current_auc = 0.941358024691358
User 134156 AUC after training: 0.941358024691358
User 134156 does not improve AUC. Reverting changes.
Training on augumented user 68195 31/50 current_auc = 0.941358024691358
User 68195 AUC after training: 0.941358024691358
User 68195 does not improve AUC. Reverting changes.
Training on augumented user 138311 32/50 current_auc = 0.941358024691358
User 138311 AUC after training: 0.941358024691358
User 138311 does not improve AUC. Reverting changes.
Training on augumented user 45067 33/50 current_auc = 0.941358024691358
User 45067 AUC after training: 0.941358024691358
User 45067 does not improve AUC. Reverting changes.
Training on augumented user 51970 34/50 current_auc = 0.941358024691358
User 51970 AUC after training: 0.941358024691358
User 51970 does not improve AUC. Reverting changes.
Training on augumented user 92191 35/50 current_auc = 0.941358024691358
User 92191 AUC after training: 0.941358024691358
User 92191 does not improve AUC. Reverting changes.
Training on augumented user 107863 36/50 current_auc = 0.941358024691358
User 107863 AUC after training: 0.941358024691358
User 107863 does not improve AUC. Reverting changes.
Training on augumented user 118790 37/50 current_auc = 0.941358024691358
User 118790 AUC after training: 0.941358024691358
User 118790 does not improve AUC. Reverting changes.
Training on augumented user 120508 38/50 current_auc = 0.941358024691358
User 120508 AUC after training: 0.941358024691358
User 120508 does not improve AUC. Reverting changes.
Training on augumented user 22690 39/50 current_auc = 0.941358024691358
User 22690 AUC after training: 0.941358024691358
User 22690 does not improve AUC. Reverting changes.
Training on augumented user 38774 40/50 current_auc = 0.941358024691358
User 38774 AUC after training: 0.941358024691358
User 38774 does not improve AUC. Reverting changes.
Training on augumented user 33730 41/50 current_auc = 0.941358024691358
User 33730 AUC after training: 0.941358024691358
User 33730 does not improve AUC. Reverting changes.
Training on augumented user 10198 42/50 current_auc = 0.941358024691358
User 10198 AUC after training: 0.941358024691358
User 10198 does not improve AUC. Reverting changes.
Training on augumented user 44966 43/50 current_auc = 0.941358024691358
User 44966 AUC after training: 0.941358024691358
User 44966 does not improve AUC. Reverting changes.
Training on augumented user 28099 44/50 current_auc = 0.941358024691358
User 28099 AUC after training: 0.941358024691358
User 28099 does not improve AUC. Reverting changes.
Training on augumented user 37932 45/50 current_auc = 0.941358024691358
User 37932 AUC after training: 0.9382716049382716
User 37932 does not improve AUC. Reverting changes.
Training on augumented user 89116 46/50 current_auc = 0.941358024691358
User 89116 AUC after training: 0.9382716049382716
User 89116 does not improve AUC. Reverting changes.
Training on augumented user 54102 47/50 current_auc = 0.941358024691358
User 54102 AUC after training: 0.941358024691358
User 54102 does not improve AUC. Reverting changes.
Training on augumented user 8267 48/50 current_auc = 0.941358024691358
User 8267 AUC after training: 0.9382716049382716
User 8267 does not improve AUC. Reverting changes.
Training on augumented user 69127 49/50 current_auc = 0.941358024691358
User 69127 AUC after training: 0.941358024691358
User 69127 does not improve AUC. Reverting changes.
[2024-12-02 18:32:09.506849] start test user 98494 98/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:32:10.210900] start test user 98494 98/567 recall augumented users by random, augumented_users = [15451, 33455, 69824, 115012, 20992, 84082, 100620, 91971, 58392, 136465, 84606, 27271, 120674, 128265, 82065, 110834, 121321, 1021, 30879, 80552, 135504, 55153, 88236, 30679, 66020, 18612, 125781, 52879, 58525, 46176, 70091, 16482, 34198, 133420, 125767, 46468, 129387, 47948, 86202, 35958, 99568, 115217, 123748, 32158, 19830, 14192, 79538, 4862, 4776, 135674]
[2024-12-02 18:32:10.235009] user = 98494 Cloud 98/567
[2024-12-02 18:32:10.263523] user = 98494 Local 98/567
[2024-12-02 18:32:10.576104] user = 98494 Local+ 98/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:32:12.840444] user = 98494 MPDA- 98/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4465608465608466
Training on augumented user 15451 0/50 current_auc = 0.4465608465608466
User 15451 AUC after training: 0.44550264550264546
User 15451 does not improve AUC. Reverting changes.
Training on augumented user 33455 1/50 current_auc = 0.4465608465608466
User 33455 AUC after training: 0.4476190476190476
User 33455 improves AUC. Keeping the model.
Training on augumented user 69824 2/50 current_auc = 0.4476190476190476
User 69824 AUC after training: 0.44814814814814813
User 69824 improves AUC. Keeping the model.
Training on augumented user 115012 3/50 current_auc = 0.44814814814814813
User 115012 AUC after training: 0.4486772486772487
User 115012 improves AUC. Keeping the model.
Training on augumented user 20992 4/50 current_auc = 0.4486772486772487
User 20992 AUC after training: 0.44761904761904764
User 20992 does not improve AUC. Reverting changes.
Training on augumented user 84082 5/50 current_auc = 0.4486772486772487
User 84082 AUC after training: 0.4470899470899471
User 84082 does not improve AUC. Reverting changes.
Training on augumented user 100620 6/50 current_auc = 0.4486772486772487
User 100620 AUC after training: 0.44603174603174606
User 100620 does not improve AUC. Reverting changes.
Training on augumented user 91971 7/50 current_auc = 0.4486772486772487
User 91971 AUC after training: 0.44603174603174606
User 91971 does not improve AUC. Reverting changes.
Training on augumented user 58392 8/50 current_auc = 0.4486772486772487
User 58392 AUC after training: 0.44814814814814813
User 58392 does not improve AUC. Reverting changes.
Training on augumented user 136465 9/50 current_auc = 0.4486772486772487
User 136465 AUC after training: 0.44814814814814813
User 136465 does not improve AUC. Reverting changes.
Training on augumented user 84606 10/50 current_auc = 0.4486772486772487
User 84606 AUC after training: 0.44920634920634916
User 84606 improves AUC. Keeping the model.
Training on augumented user 27271 11/50 current_auc = 0.44920634920634916
User 27271 AUC after training: 0.45026455026455026
User 27271 improves AUC. Keeping the model.
Training on augumented user 120674 12/50 current_auc = 0.45026455026455026
User 120674 AUC after training: 0.44550264550264546
User 120674 does not improve AUC. Reverting changes.
Training on augumented user 128265 13/50 current_auc = 0.45026455026455026
User 128265 AUC after training: 0.4470899470899471
User 128265 does not improve AUC. Reverting changes.
Training on augumented user 82065 14/50 current_auc = 0.45026455026455026
User 82065 AUC after training: 0.44920634920634916
User 82065 does not improve AUC. Reverting changes.
Training on augumented user 110834 15/50 current_auc = 0.45026455026455026
User 110834 AUC after training: 0.44920634920634916
User 110834 does not improve AUC. Reverting changes.
Training on augumented user 121321 16/50 current_auc = 0.45026455026455026
User 121321 AUC after training: 0.44920634920634916
User 121321 does not improve AUC. Reverting changes.
Training on augumented user 1021 17/50 current_auc = 0.45026455026455026
User 1021 AUC after training: 0.4513227513227513
User 1021 improves AUC. Keeping the model.
Training on augumented user 30879 18/50 current_auc = 0.4513227513227513
User 30879 AUC after training: 0.4513227513227513
User 30879 does not improve AUC. Reverting changes.
Training on augumented user 80552 19/50 current_auc = 0.4513227513227513
User 80552 AUC after training: 0.4513227513227513
User 80552 does not improve AUC. Reverting changes.
Training on augumented user 135504 20/50 current_auc = 0.4513227513227513
User 135504 AUC after training: 0.4513227513227513
User 135504 does not improve AUC. Reverting changes.
Training on augumented user 55153 21/50 current_auc = 0.4513227513227513
User 55153 AUC after training: 0.44814814814814813
User 55153 does not improve AUC. Reverting changes.
Training on augumented user 88236 22/50 current_auc = 0.4513227513227513
User 88236 AUC after training: 0.44920634920634916
User 88236 does not improve AUC. Reverting changes.
Training on augumented user 30679 23/50 current_auc = 0.4513227513227513
User 30679 AUC after training: 0.45026455026455026
User 30679 does not improve AUC. Reverting changes.
Training on augumented user 66020 24/50 current_auc = 0.4513227513227513
User 66020 AUC after training: 0.4513227513227513
User 66020 does not improve AUC. Reverting changes.
Training on augumented user 18612 25/50 current_auc = 0.4513227513227513
User 18612 AUC after training: 0.4486772486772487
User 18612 does not improve AUC. Reverting changes.
Training on augumented user 125781 26/50 current_auc = 0.4513227513227513
User 125781 AUC after training: 0.44920634920634916
User 125781 does not improve AUC. Reverting changes.
Training on augumented user 52879 27/50 current_auc = 0.4513227513227513
User 52879 AUC after training: 0.4513227513227513
User 52879 does not improve AUC. Reverting changes.
Training on augumented user 58525 28/50 current_auc = 0.4513227513227513
User 58525 AUC after training: 0.4513227513227513
User 58525 does not improve AUC. Reverting changes.
Training on augumented user 46176 29/50 current_auc = 0.4513227513227513
User 46176 AUC after training: 0.4449735449735449
User 46176 does not improve AUC. Reverting changes.
Training on augumented user 70091 30/50 current_auc = 0.4513227513227513
User 70091 AUC after training: 0.44920634920634916
User 70091 does not improve AUC. Reverting changes.
Training on augumented user 16482 31/50 current_auc = 0.4513227513227513
User 16482 AUC after training: 0.4513227513227513
User 16482 does not improve AUC. Reverting changes.
Training on augumented user 34198 32/50 current_auc = 0.4513227513227513
User 34198 AUC after training: 0.45079365079365075
User 34198 does not improve AUC. Reverting changes.
Training on augumented user 133420 33/50 current_auc = 0.4513227513227513
User 133420 AUC after training: 0.45026455026455026
User 133420 does not improve AUC. Reverting changes.
Training on augumented user 125767 34/50 current_auc = 0.4513227513227513
User 125767 AUC after training: 0.45026455026455026
User 125767 does not improve AUC. Reverting changes.
Training on augumented user 46468 35/50 current_auc = 0.4513227513227513
User 46468 AUC after training: 0.44920634920634916
User 46468 does not improve AUC. Reverting changes.
Training on augumented user 129387 36/50 current_auc = 0.4513227513227513
User 129387 AUC after training: 0.44656084656084655
User 129387 does not improve AUC. Reverting changes.
Training on augumented user 47948 37/50 current_auc = 0.4513227513227513
User 47948 AUC after training: 0.4513227513227513
User 47948 does not improve AUC. Reverting changes.
Training on augumented user 86202 38/50 current_auc = 0.4513227513227513
User 86202 AUC after training: 0.4513227513227513
User 86202 does not improve AUC. Reverting changes.
Training on augumented user 35958 39/50 current_auc = 0.4513227513227513
User 35958 AUC after training: 0.4513227513227513
User 35958 does not improve AUC. Reverting changes.
Training on augumented user 99568 40/50 current_auc = 0.4513227513227513
User 99568 AUC after training: 0.4513227513227513
User 99568 does not improve AUC. Reverting changes.
Training on augumented user 115217 41/50 current_auc = 0.4513227513227513
User 115217 AUC after training: 0.4513227513227513
User 115217 does not improve AUC. Reverting changes.
Training on augumented user 123748 42/50 current_auc = 0.4513227513227513
User 123748 AUC after training: 0.4513227513227513
User 123748 does not improve AUC. Reverting changes.
Training on augumented user 32158 43/50 current_auc = 0.4513227513227513
User 32158 AUC after training: 0.4513227513227513
User 32158 does not improve AUC. Reverting changes.
Training on augumented user 19830 44/50 current_auc = 0.4513227513227513
User 19830 AUC after training: 0.4497354497354497
User 19830 does not improve AUC. Reverting changes.
Training on augumented user 14192 45/50 current_auc = 0.4513227513227513
User 14192 AUC after training: 0.45026455026455026
User 14192 does not improve AUC. Reverting changes.
Training on augumented user 79538 46/50 current_auc = 0.4513227513227513
User 79538 AUC after training: 0.45026455026455026
User 79538 does not improve AUC. Reverting changes.
Training on augumented user 4862 47/50 current_auc = 0.4513227513227513
User 4862 AUC after training: 0.4513227513227513
User 4862 does not improve AUC. Reverting changes.
Training on augumented user 4776 48/50 current_auc = 0.4513227513227513
User 4776 AUC after training: 0.44814814814814813
User 4776 does not improve AUC. Reverting changes.
Training on augumented user 135674 49/50 current_auc = 0.4513227513227513
User 135674 AUC after training: 0.44920634920634916
User 135674 does not improve AUC. Reverting changes.
[2024-12-02 18:32:40.588523] start test user 98510 99/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:32:41.223572] start test user 98510 99/567 recall augumented users by random, augumented_users = [69799, 45971, 128165, 96112, 72259, 1190, 20513, 50134, 78452, 55882, 123923, 14063, 23286, 959, 72539, 27596, 110702, 26673, 59377, 120357, 76401, 91327, 130218, 117684, 75370, 124149, 34879, 100360, 28195, 68667, 94340, 99906, 34555, 5014, 6664, 117057, 111375, 37553, 91597, 121795, 80813, 70705, 26478, 39532, 119293, 101459, 71459, 33710, 65607, 44777]
[2024-12-02 18:32:41.264764] user = 98510 Cloud 99/567
[2024-12-02 18:32:41.314860] user = 98510 Local 99/567
[2024-12-02 18:32:41.419755] user = 98510 Local+ 99/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:32:44.175419] user = 98510 MPDA- 99/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.717948717948718
Training on augumented user 69799 0/50 current_auc = 0.717948717948718
User 69799 AUC after training: 0.7186417186417188
User 69799 improves AUC. Keeping the model.
Training on augumented user 45971 1/50 current_auc = 0.7186417186417188
User 45971 AUC after training: 0.7186417186417187
User 45971 does not improve AUC. Reverting changes.
Training on augumented user 128165 2/50 current_auc = 0.7186417186417188
User 128165 AUC after training: 0.7172557172557174
User 128165 does not improve AUC. Reverting changes.
Training on augumented user 96112 3/50 current_auc = 0.7186417186417188
User 96112 AUC after training: 0.7172557172557172
User 96112 does not improve AUC. Reverting changes.
Training on augumented user 72259 4/50 current_auc = 0.7186417186417188
User 72259 AUC after training: 0.717948717948718
User 72259 does not improve AUC. Reverting changes.
Training on augumented user 1190 5/50 current_auc = 0.7186417186417188
User 1190 AUC after training: 0.7148302148302148
User 1190 does not improve AUC. Reverting changes.
Training on augumented user 20513 6/50 current_auc = 0.7186417186417188
User 20513 AUC after training: 0.7193347193347194
User 20513 improves AUC. Keeping the model.
Training on augumented user 50134 7/50 current_auc = 0.7193347193347194
User 50134 AUC after training: 0.7200277200277201
User 50134 improves AUC. Keeping the model.
Training on augumented user 78452 8/50 current_auc = 0.7200277200277201
User 78452 AUC after training: 0.7200277200277201
User 78452 does not improve AUC. Reverting changes.
Training on augumented user 55882 9/50 current_auc = 0.7200277200277201
User 55882 AUC after training: 0.7227997227997228
User 55882 improves AUC. Keeping the model.
Training on augumented user 123923 10/50 current_auc = 0.7227997227997228
User 123923 AUC after training: 0.7221067221067221
User 123923 does not improve AUC. Reverting changes.
Training on augumented user 14063 11/50 current_auc = 0.7227997227997228
User 14063 AUC after training: 0.7221067221067222
User 14063 does not improve AUC. Reverting changes.
Training on augumented user 23286 12/50 current_auc = 0.7227997227997228
User 23286 AUC after training: 0.7200277200277201
User 23286 does not improve AUC. Reverting changes.
Training on augumented user 959 13/50 current_auc = 0.7227997227997228
User 959 AUC after training: 0.7214137214137214
User 959 does not improve AUC. Reverting changes.
Training on augumented user 72539 14/50 current_auc = 0.7227997227997228
User 72539 AUC after training: 0.7227997227997228
User 72539 does not improve AUC. Reverting changes.
Training on augumented user 27596 15/50 current_auc = 0.7227997227997228
User 27596 AUC after training: 0.7217602217602218
User 27596 does not improve AUC. Reverting changes.
Training on augumented user 110702 16/50 current_auc = 0.7227997227997228
User 110702 AUC after training: 0.7203742203742204
User 110702 does not improve AUC. Reverting changes.
Training on augumented user 26673 17/50 current_auc = 0.7227997227997228
User 26673 AUC after training: 0.717948717948718
User 26673 does not improve AUC. Reverting changes.
Training on augumented user 59377 18/50 current_auc = 0.7227997227997228
User 59377 AUC after training: 0.721067221067221
User 59377 does not improve AUC. Reverting changes.
Training on augumented user 120357 19/50 current_auc = 0.7227997227997228
User 120357 AUC after training: 0.7214137214137215
User 120357 does not improve AUC. Reverting changes.
Training on augumented user 76401 20/50 current_auc = 0.7227997227997228
User 76401 AUC after training: 0.7172557172557174
User 76401 does not improve AUC. Reverting changes.
Training on augumented user 91327 21/50 current_auc = 0.7227997227997228
User 91327 AUC after training: 0.7217602217602218
User 91327 does not improve AUC. Reverting changes.
Training on augumented user 130218 22/50 current_auc = 0.7227997227997228
User 130218 AUC after training: 0.7193347193347194
User 130218 does not improve AUC. Reverting changes.
Training on augumented user 117684 23/50 current_auc = 0.7227997227997228
User 117684 AUC after training: 0.7203742203742204
User 117684 does not improve AUC. Reverting changes.
Training on augumented user 75370 24/50 current_auc = 0.7227997227997228
User 75370 AUC after training: 0.7227997227997228
User 75370 does not improve AUC. Reverting changes.
Training on augumented user 124149 25/50 current_auc = 0.7227997227997228
User 124149 AUC after training: 0.7200277200277201
User 124149 does not improve AUC. Reverting changes.
Training on augumented user 34879 26/50 current_auc = 0.7227997227997228
User 34879 AUC after training: 0.7214137214137215
User 34879 does not improve AUC. Reverting changes.
Training on augumented user 100360 27/50 current_auc = 0.7227997227997228
User 100360 AUC after training: 0.7203742203742204
User 100360 does not improve AUC. Reverting changes.
Training on augumented user 28195 28/50 current_auc = 0.7227997227997228
User 28195 AUC after training: 0.7227997227997228
User 28195 does not improve AUC. Reverting changes.
Training on augumented user 68667 29/50 current_auc = 0.7227997227997228
User 68667 AUC after training: 0.7182952182952184
User 68667 does not improve AUC. Reverting changes.
Training on augumented user 94340 30/50 current_auc = 0.7227997227997228
User 94340 AUC after training: 0.7217602217602218
User 94340 does not improve AUC. Reverting changes.
Training on augumented user 99906 31/50 current_auc = 0.7227997227997228
User 99906 AUC after training: 0.7207207207207208
User 99906 does not improve AUC. Reverting changes.
Training on augumented user 34555 32/50 current_auc = 0.7227997227997228
User 34555 AUC after training: 0.7234927234927235
User 34555 improves AUC. Keeping the model.
Training on augumented user 5014 33/50 current_auc = 0.7234927234927235
User 5014 AUC after training: 0.7207207207207207
User 5014 does not improve AUC. Reverting changes.
Training on augumented user 6664 34/50 current_auc = 0.7234927234927235
User 6664 AUC after training: 0.7227997227997228
User 6664 does not improve AUC. Reverting changes.
Training on augumented user 117057 35/50 current_auc = 0.7234927234927235
User 117057 AUC after training: 0.7193347193347194
User 117057 does not improve AUC. Reverting changes.
Training on augumented user 111375 36/50 current_auc = 0.7234927234927235
User 111375 AUC after training: 0.7193347193347194
User 111375 does not improve AUC. Reverting changes.
Training on augumented user 37553 37/50 current_auc = 0.7234927234927235
User 37553 AUC after training: 0.7231462231462232
User 37553 does not improve AUC. Reverting changes.
Training on augumented user 91597 38/50 current_auc = 0.7234927234927235
User 91597 AUC after training: 0.7221067221067221
User 91597 does not improve AUC. Reverting changes.
Training on augumented user 121795 39/50 current_auc = 0.7234927234927235
User 121795 AUC after training: 0.7252252252252253
User 121795 improves AUC. Keeping the model.
Training on augumented user 80813 40/50 current_auc = 0.7252252252252253
User 80813 AUC after training: 0.7252252252252253
User 80813 does not improve AUC. Reverting changes.
Training on augumented user 70705 41/50 current_auc = 0.7252252252252253
User 70705 AUC after training: 0.7227997227997229
User 70705 does not improve AUC. Reverting changes.
Training on augumented user 26478 42/50 current_auc = 0.7252252252252253
User 26478 AUC after training: 0.7245322245322247
User 26478 does not improve AUC. Reverting changes.
Training on augumented user 39532 43/50 current_auc = 0.7252252252252253
User 39532 AUC after training: 0.7245322245322247
User 39532 does not improve AUC. Reverting changes.
Training on augumented user 119293 44/50 current_auc = 0.7252252252252253
User 119293 AUC after training: 0.725918225918226
User 119293 improves AUC. Keeping the model.
Training on augumented user 101459 45/50 current_auc = 0.725918225918226
User 101459 AUC after training: 0.7227997227997228
User 101459 does not improve AUC. Reverting changes.
Training on augumented user 71459 46/50 current_auc = 0.725918225918226
User 71459 AUC after training: 0.7255717255717256
User 71459 does not improve AUC. Reverting changes.
Training on augumented user 33710 47/50 current_auc = 0.725918225918226
User 33710 AUC after training: 0.7245322245322247
User 33710 does not improve AUC. Reverting changes.
Training on augumented user 65607 48/50 current_auc = 0.725918225918226
User 65607 AUC after training: 0.7241857241857242
User 65607 does not improve AUC. Reverting changes.
Training on augumented user 44777 49/50 current_auc = 0.725918225918226
User 44777 AUC after training: 0.7234927234927235
User 44777 does not improve AUC. Reverting changes.
[2024-12-02 18:33:16.288485] start test user 98525 100/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:33:16.701335] start test user 98525 100/567 recall augumented users by random, augumented_users = [77114, 26159, 40099, 16035, 20398, 92443, 34838, 125020, 112461, 66760, 107201, 55391, 64435, 75681, 113671, 20807, 136343, 48132, 103136, 61259, 79517, 135430, 62664, 71666, 14909, 20521, 102674, 7067, 1971, 136221, 108530, 16618, 14167, 90357, 101872, 44029, 12453, 79779, 27210, 68920, 81684, 107932, 17934, 136875, 94619, 112592, 121468, 115416, 117440, 161]
[2024-12-02 18:33:16.715997] user = 98525 Cloud 100/567
[2024-12-02 18:33:16.739792] user = 98525 Local 100/567
[2024-12-02 18:33:16.770218] user = 98525 Local+ 100/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:33:18.612551] user = 98525 MPDA- 100/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7230769230769231
Training on augumented user 77114 0/50 current_auc = 0.7230769230769231
User 77114 AUC after training: 0.7230769230769231
User 77114 does not improve AUC. Reverting changes.
Training on augumented user 26159 1/50 current_auc = 0.7230769230769231
User 26159 AUC after training: 0.7239316239316239
User 26159 improves AUC. Keeping the model.
Training on augumented user 40099 2/50 current_auc = 0.7239316239316239
User 40099 AUC after training: 0.7247863247863248
User 40099 improves AUC. Keeping the model.
Training on augumented user 16035 3/50 current_auc = 0.7247863247863248
User 16035 AUC after training: 0.7239316239316239
User 16035 does not improve AUC. Reverting changes.
Training on augumented user 20398 4/50 current_auc = 0.7247863247863248
User 20398 AUC after training: 0.7256410256410256
User 20398 improves AUC. Keeping the model.
Training on augumented user 92443 5/50 current_auc = 0.7256410256410256
User 92443 AUC after training: 0.7247863247863248
User 92443 does not improve AUC. Reverting changes.
Training on augumented user 34838 6/50 current_auc = 0.7256410256410256
User 34838 AUC after training: 0.7247863247863248
User 34838 does not improve AUC. Reverting changes.
Training on augumented user 125020 7/50 current_auc = 0.7256410256410256
User 125020 AUC after training: 0.7256410256410256
User 125020 does not improve AUC. Reverting changes.
Training on augumented user 112461 8/50 current_auc = 0.7256410256410256
User 112461 AUC after training: 0.7247863247863248
User 112461 does not improve AUC. Reverting changes.
Training on augumented user 66760 9/50 current_auc = 0.7256410256410256
User 66760 AUC after training: 0.7230769230769231
User 66760 does not improve AUC. Reverting changes.
Training on augumented user 107201 10/50 current_auc = 0.7256410256410256
User 107201 AUC after training: 0.7256410256410256
User 107201 does not improve AUC. Reverting changes.
Training on augumented user 55391 11/50 current_auc = 0.7256410256410256
User 55391 AUC after training: 0.7226495726495726
User 55391 does not improve AUC. Reverting changes.
Training on augumented user 64435 12/50 current_auc = 0.7256410256410256
User 64435 AUC after training: 0.7256410256410256
User 64435 does not improve AUC. Reverting changes.
Training on augumented user 75681 13/50 current_auc = 0.7256410256410256
User 75681 AUC after training: 0.7239316239316239
User 75681 does not improve AUC. Reverting changes.
Training on augumented user 113671 14/50 current_auc = 0.7256410256410256
User 113671 AUC after training: 0.7230769230769231
User 113671 does not improve AUC. Reverting changes.
Training on augumented user 20807 15/50 current_auc = 0.7256410256410256
User 20807 AUC after training: 0.7247863247863248
User 20807 does not improve AUC. Reverting changes.
Training on augumented user 136343 16/50 current_auc = 0.7256410256410256
User 136343 AUC after training: 0.7247863247863248
User 136343 does not improve AUC. Reverting changes.
Training on augumented user 48132 17/50 current_auc = 0.7256410256410256
User 48132 AUC after training: 0.7239316239316239
User 48132 does not improve AUC. Reverting changes.
Training on augumented user 103136 18/50 current_auc = 0.7256410256410256
User 103136 AUC after training: 0.7213675213675214
User 103136 does not improve AUC. Reverting changes.
Training on augumented user 61259 19/50 current_auc = 0.7256410256410256
User 61259 AUC after training: 0.7247863247863248
User 61259 does not improve AUC. Reverting changes.
Training on augumented user 79517 20/50 current_auc = 0.7256410256410256
User 79517 AUC after training: 0.7247863247863248
User 79517 does not improve AUC. Reverting changes.
Training on augumented user 135430 21/50 current_auc = 0.7256410256410256
User 135430 AUC after training: 0.7256410256410256
User 135430 does not improve AUC. Reverting changes.
Training on augumented user 62664 22/50 current_auc = 0.7256410256410256
User 62664 AUC after training: 0.7239316239316239
User 62664 does not improve AUC. Reverting changes.
Training on augumented user 71666 23/50 current_auc = 0.7256410256410256
User 71666 AUC after training: 0.7239316239316239
User 71666 does not improve AUC. Reverting changes.
Training on augumented user 14909 24/50 current_auc = 0.7256410256410256
User 14909 AUC after training: 0.7239316239316239
User 14909 does not improve AUC. Reverting changes.
Training on augumented user 20521 25/50 current_auc = 0.7256410256410256
User 20521 AUC after training: 0.7239316239316239
User 20521 does not improve AUC. Reverting changes.
Training on augumented user 102674 26/50 current_auc = 0.7256410256410256
User 102674 AUC after training: 0.7239316239316239
User 102674 does not improve AUC. Reverting changes.
Training on augumented user 7067 27/50 current_auc = 0.7256410256410256
User 7067 AUC after training: 0.7230769230769231
User 7067 does not improve AUC. Reverting changes.
Training on augumented user 1971 28/50 current_auc = 0.7256410256410256
User 1971 AUC after training: 0.7247863247863248
User 1971 does not improve AUC. Reverting changes.
Training on augumented user 136221 29/50 current_auc = 0.7256410256410256
User 136221 AUC after training: 0.7247863247863248
User 136221 does not improve AUC. Reverting changes.
Training on augumented user 108530 30/50 current_auc = 0.7256410256410256
User 108530 AUC after training: 0.7239316239316239
User 108530 does not improve AUC. Reverting changes.
Training on augumented user 16618 31/50 current_auc = 0.7256410256410256
User 16618 AUC after training: 0.7256410256410256
User 16618 does not improve AUC. Reverting changes.
Training on augumented user 14167 32/50 current_auc = 0.7256410256410256
User 14167 AUC after training: 0.7256410256410256
User 14167 does not improve AUC. Reverting changes.
Training on augumented user 90357 33/50 current_auc = 0.7256410256410256
User 90357 AUC after training: 0.7247863247863248
User 90357 does not improve AUC. Reverting changes.
Training on augumented user 101872 34/50 current_auc = 0.7256410256410256
User 101872 AUC after training: 0.7256410256410256
User 101872 does not improve AUC. Reverting changes.
Training on augumented user 44029 35/50 current_auc = 0.7256410256410256
User 44029 AUC after training: 0.7247863247863248
User 44029 does not improve AUC. Reverting changes.
Training on augumented user 12453 36/50 current_auc = 0.7256410256410256
User 12453 AUC after training: 0.7247863247863248
User 12453 does not improve AUC. Reverting changes.
Training on augumented user 79779 37/50 current_auc = 0.7256410256410256
User 79779 AUC after training: 0.7256410256410256
User 79779 does not improve AUC. Reverting changes.
Training on augumented user 27210 38/50 current_auc = 0.7256410256410256
User 27210 AUC after training: 0.7239316239316239
User 27210 does not improve AUC. Reverting changes.
Training on augumented user 68920 39/50 current_auc = 0.7256410256410256
User 68920 AUC after training: 0.7247863247863248
User 68920 does not improve AUC. Reverting changes.
Training on augumented user 81684 40/50 current_auc = 0.7256410256410256
User 81684 AUC after training: 0.7239316239316239
User 81684 does not improve AUC. Reverting changes.
Training on augumented user 107932 41/50 current_auc = 0.7256410256410256
User 107932 AUC after training: 0.7247863247863248
User 107932 does not improve AUC. Reverting changes.
Training on augumented user 17934 42/50 current_auc = 0.7256410256410256
User 17934 AUC after training: 0.7264957264957266
User 17934 improves AUC. Keeping the model.
Training on augumented user 136875 43/50 current_auc = 0.7264957264957266
User 136875 AUC after training: 0.7247863247863248
User 136875 does not improve AUC. Reverting changes.
Training on augumented user 94619 44/50 current_auc = 0.7264957264957266
User 94619 AUC after training: 0.7256410256410256
User 94619 does not improve AUC. Reverting changes.
Training on augumented user 112592 45/50 current_auc = 0.7264957264957266
User 112592 AUC after training: 0.7247863247863248
User 112592 does not improve AUC. Reverting changes.
Training on augumented user 121468 46/50 current_auc = 0.7264957264957266
User 121468 AUC after training: 0.7239316239316239
User 121468 does not improve AUC. Reverting changes.
Training on augumented user 115416 47/50 current_auc = 0.7264957264957266
User 115416 AUC after training: 0.7239316239316239
User 115416 does not improve AUC. Reverting changes.
Training on augumented user 117440 48/50 current_auc = 0.7264957264957266
User 117440 AUC after training: 0.723931623931624
User 117440 does not improve AUC. Reverting changes.
Training on augumented user 161 49/50 current_auc = 0.7264957264957266
User 161 AUC after training: 0.7256410256410256
User 161 does not improve AUC. Reverting changes.
[2024-12-02 18:33:47.546809] start test user 98527 101/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:33:48.081576] start test user 98527 101/567 recall augumented users by random, augumented_users = [29223, 22785, 78334, 29669, 47554, 35482, 132673, 22100, 74733, 73721, 35978, 27543, 47290, 10820, 120641, 110653, 116132, 93135, 120734, 105113, 15734, 107420, 42444, 48593, 56246, 15704, 73874, 101799, 80239, 124679, 76823, 109219, 100795, 52789, 65009, 16835, 28946, 119016, 41229, 101738, 101281, 87519, 116753, 25414, 120619, 113490, 121629, 35405, 5824, 30595]
[2024-12-02 18:33:48.102851] user = 98527 Cloud 101/567
[2024-12-02 18:33:48.113164] user = 98527 Local 101/567
[2024-12-02 18:33:48.135366] user = 98527 Local+ 101/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:33:50.686410] user = 98527 MPDA- 101/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.3333333333333333
Training on augumented user 29223 0/50 current_auc = 0.3333333333333333
User 29223 AUC after training: 0.3333333333333333
User 29223 does not improve AUC. Reverting changes.
Training on augumented user 22785 1/50 current_auc = 0.3333333333333333
User 22785 AUC after training: 0.3333333333333333
User 22785 does not improve AUC. Reverting changes.
Training on augumented user 78334 2/50 current_auc = 0.3333333333333333
User 78334 AUC after training: 0.3333333333333333
User 78334 does not improve AUC. Reverting changes.
Training on augumented user 29669 3/50 current_auc = 0.3333333333333333
User 29669 AUC after training: 0.0
User 29669 does not improve AUC. Reverting changes.
Training on augumented user 47554 4/50 current_auc = 0.3333333333333333
User 47554 AUC after training: 0.3333333333333333
User 47554 does not improve AUC. Reverting changes.
Training on augumented user 35482 5/50 current_auc = 0.3333333333333333
User 35482 AUC after training: 0.0
User 35482 does not improve AUC. Reverting changes.
Training on augumented user 132673 6/50 current_auc = 0.3333333333333333
User 132673 AUC after training: 0.3333333333333333
User 132673 does not improve AUC. Reverting changes.
Training on augumented user 22100 7/50 current_auc = 0.3333333333333333
User 22100 AUC after training: 0.0
User 22100 does not improve AUC. Reverting changes.
Training on augumented user 74733 8/50 current_auc = 0.3333333333333333
User 74733 AUC after training: 0.3333333333333333
User 74733 does not improve AUC. Reverting changes.
Training on augumented user 73721 9/50 current_auc = 0.3333333333333333
User 73721 AUC after training: 0.3333333333333333
User 73721 does not improve AUC. Reverting changes.
Training on augumented user 35978 10/50 current_auc = 0.3333333333333333
User 35978 AUC after training: 0.3333333333333333
User 35978 does not improve AUC. Reverting changes.
Training on augumented user 27543 11/50 current_auc = 0.3333333333333333
User 27543 AUC after training: 0.3333333333333333
User 27543 does not improve AUC. Reverting changes.
Training on augumented user 47290 12/50 current_auc = 0.3333333333333333
User 47290 AUC after training: 0.0
User 47290 does not improve AUC. Reverting changes.
Training on augumented user 10820 13/50 current_auc = 0.3333333333333333
User 10820 AUC after training: 0.3333333333333333
User 10820 does not improve AUC. Reverting changes.
Training on augumented user 120641 14/50 current_auc = 0.3333333333333333
User 120641 AUC after training: 0.3333333333333333
User 120641 does not improve AUC. Reverting changes.
Training on augumented user 110653 15/50 current_auc = 0.3333333333333333
User 110653 AUC after training: 0.0
User 110653 does not improve AUC. Reverting changes.
Training on augumented user 116132 16/50 current_auc = 0.3333333333333333
User 116132 AUC after training: 0.0
User 116132 does not improve AUC. Reverting changes.
Training on augumented user 93135 17/50 current_auc = 0.3333333333333333
User 93135 AUC after training: 0.0
User 93135 does not improve AUC. Reverting changes.
Training on augumented user 120734 18/50 current_auc = 0.3333333333333333
User 120734 AUC after training: 0.0
User 120734 does not improve AUC. Reverting changes.
Training on augumented user 105113 19/50 current_auc = 0.3333333333333333
User 105113 AUC after training: 0.0
User 105113 does not improve AUC. Reverting changes.
Training on augumented user 15734 20/50 current_auc = 0.3333333333333333
User 15734 AUC after training: 0.0
User 15734 does not improve AUC. Reverting changes.
Training on augumented user 107420 21/50 current_auc = 0.3333333333333333
User 107420 AUC after training: 0.3333333333333333
User 107420 does not improve AUC. Reverting changes.
Training on augumented user 42444 22/50 current_auc = 0.3333333333333333
User 42444 AUC after training: 0.0
User 42444 does not improve AUC. Reverting changes.
Training on augumented user 48593 23/50 current_auc = 0.3333333333333333
User 48593 AUC after training: 0.3333333333333333
User 48593 does not improve AUC. Reverting changes.
Training on augumented user 56246 24/50 current_auc = 0.3333333333333333
User 56246 AUC after training: 0.3333333333333333
User 56246 does not improve AUC. Reverting changes.
Training on augumented user 15704 25/50 current_auc = 0.3333333333333333
User 15704 AUC after training: 0.3333333333333333
User 15704 does not improve AUC. Reverting changes.
Training on augumented user 73874 26/50 current_auc = 0.3333333333333333
User 73874 AUC after training: 0.3333333333333333
User 73874 does not improve AUC. Reverting changes.
Training on augumented user 101799 27/50 current_auc = 0.3333333333333333
User 101799 AUC after training: 0.3333333333333333
User 101799 does not improve AUC. Reverting changes.
Training on augumented user 80239 28/50 current_auc = 0.3333333333333333
User 80239 AUC after training: 0.0
User 80239 does not improve AUC. Reverting changes.
Training on augumented user 124679 29/50 current_auc = 0.3333333333333333
User 124679 AUC after training: 0.0
User 124679 does not improve AUC. Reverting changes.
Training on augumented user 76823 30/50 current_auc = 0.3333333333333333
User 76823 AUC after training: 0.3333333333333333
User 76823 does not improve AUC. Reverting changes.
Training on augumented user 109219 31/50 current_auc = 0.3333333333333333
User 109219 AUC after training: 0.0
User 109219 does not improve AUC. Reverting changes.
Training on augumented user 100795 32/50 current_auc = 0.3333333333333333
User 100795 AUC after training: 0.0
User 100795 does not improve AUC. Reverting changes.
Training on augumented user 52789 33/50 current_auc = 0.3333333333333333
User 52789 AUC after training: 0.3333333333333333
User 52789 does not improve AUC. Reverting changes.
Training on augumented user 65009 34/50 current_auc = 0.3333333333333333
User 65009 AUC after training: 0.3333333333333333
User 65009 does not improve AUC. Reverting changes.
Training on augumented user 16835 35/50 current_auc = 0.3333333333333333
User 16835 AUC after training: 0.3333333333333333
User 16835 does not improve AUC. Reverting changes.
Training on augumented user 28946 36/50 current_auc = 0.3333333333333333
User 28946 AUC after training: 0.3333333333333333
User 28946 does not improve AUC. Reverting changes.
Training on augumented user 119016 37/50 current_auc = 0.3333333333333333
User 119016 AUC after training: 0.3333333333333333
User 119016 does not improve AUC. Reverting changes.
Training on augumented user 41229 38/50 current_auc = 0.3333333333333333
User 41229 AUC after training: 0.0
User 41229 does not improve AUC. Reverting changes.
Training on augumented user 101738 39/50 current_auc = 0.3333333333333333
User 101738 AUC after training: 0.3333333333333333
User 101738 does not improve AUC. Reverting changes.
Training on augumented user 101281 40/50 current_auc = 0.3333333333333333
User 101281 AUC after training: 0.3333333333333333
User 101281 does not improve AUC. Reverting changes.
Training on augumented user 87519 41/50 current_auc = 0.3333333333333333
User 87519 AUC after training: 0.3333333333333333
User 87519 does not improve AUC. Reverting changes.
Training on augumented user 116753 42/50 current_auc = 0.3333333333333333
User 116753 AUC after training: 0.0
User 116753 does not improve AUC. Reverting changes.
Training on augumented user 25414 43/50 current_auc = 0.3333333333333333
User 25414 AUC after training: 0.0
User 25414 does not improve AUC. Reverting changes.
Training on augumented user 120619 44/50 current_auc = 0.3333333333333333
User 120619 AUC after training: 0.0
User 120619 does not improve AUC. Reverting changes.
Training on augumented user 113490 45/50 current_auc = 0.3333333333333333
User 113490 AUC after training: 0.3333333333333333
User 113490 does not improve AUC. Reverting changes.
Training on augumented user 121629 46/50 current_auc = 0.3333333333333333
User 121629 AUC after training: 0.0
User 121629 does not improve AUC. Reverting changes.
Training on augumented user 35405 47/50 current_auc = 0.3333333333333333
User 35405 AUC after training: 0.3333333333333333
User 35405 does not improve AUC. Reverting changes.
Training on augumented user 5824 48/50 current_auc = 0.3333333333333333
User 5824 AUC after training: 0.3333333333333333
User 5824 does not improve AUC. Reverting changes.
Training on augumented user 30595 49/50 current_auc = 0.3333333333333333
User 30595 AUC after training: 0.3333333333333333
User 30595 does not improve AUC. Reverting changes.
[2024-12-02 18:34:21.244699] start test user 98528 102/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:34:21.759325] start test user 98528 102/567 recall augumented users by random, augumented_users = [103187, 110018, 14366, 108850, 39135, 113142, 64192, 110407, 78522, 96387, 54148, 134327, 2073, 99157, 107789, 1564, 25817, 119251, 134714, 35889, 105211, 101714, 98214, 109340, 102197, 87927, 119845, 94059, 111822, 134934, 39812, 84367, 47434, 31494, 76757, 74343, 67083, 11869, 1661, 115663, 77315, 116864, 16949, 123150, 63441, 62147, 30721, 44976, 77643, 18134]
[2024-12-02 18:34:21.777923] user = 98528 Cloud 102/567
[2024-12-02 18:34:21.813760] user = 98528 Local 102/567
[2024-12-02 18:34:21.981126] user = 98528 Local+ 102/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:34:24.666466] user = 98528 MPDA- 102/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.764857881136951
Training on augumented user 103187 0/50 current_auc = 0.764857881136951
User 103187 AUC after training: 0.7645597296760088
User 103187 does not improve AUC. Reverting changes.
Training on augumented user 110018 1/50 current_auc = 0.764857881136951
User 110018 AUC after training: 0.7654541840588353
User 110018 improves AUC. Keeping the model.
Training on augumented user 14366 2/50 current_auc = 0.7654541840588353
User 14366 AUC after training: 0.7650566487775791
User 14366 does not improve AUC. Reverting changes.
Training on augumented user 108850 3/50 current_auc = 0.7654541840588353
User 108850 AUC after training: 0.764857881136951
User 108850 does not improve AUC. Reverting changes.
Training on augumented user 39135 4/50 current_auc = 0.7654541840588353
User 39135 AUC after training: 0.7654541840588353
User 39135 does not improve AUC. Reverting changes.
Training on augumented user 113142 5/50 current_auc = 0.7654541840588353
User 113142 AUC after training: 0.7652554164182072
User 113142 does not improve AUC. Reverting changes.
Training on augumented user 64192 6/50 current_auc = 0.7654541840588353
User 64192 AUC after training: 0.7651560325978931
User 64192 does not improve AUC. Reverting changes.
Training on augumented user 110407 7/50 current_auc = 0.7654541840588353
User 110407 AUC after training: 0.7645597296760087
User 110407 does not improve AUC. Reverting changes.
Training on augumented user 78522 8/50 current_auc = 0.7654541840588353
User 78522 AUC after training: 0.7650566487775791
User 78522 does not improve AUC. Reverting changes.
Training on augumented user 96387 9/50 current_auc = 0.7654541840588353
User 96387 AUC after training: 0.7650566487775791
User 96387 does not improve AUC. Reverting changes.
Training on augumented user 54148 10/50 current_auc = 0.7654541840588353
User 54148 AUC after training: 0.7651560325978931
User 54148 does not improve AUC. Reverting changes.
Training on augumented user 134327 11/50 current_auc = 0.7654541840588353
User 134327 AUC after training: 0.7652554164182072
User 134327 does not improve AUC. Reverting changes.
Training on augumented user 2073 12/50 current_auc = 0.7654541840588353
User 2073 AUC after training: 0.7650566487775791
User 2073 does not improve AUC. Reverting changes.
Training on augumented user 99157 13/50 current_auc = 0.7654541840588353
User 99157 AUC after training: 0.7652554164182072
User 99157 does not improve AUC. Reverting changes.
Training on augumented user 107789 14/50 current_auc = 0.7654541840588353
User 107789 AUC after training: 0.7649572649572649
User 107789 does not improve AUC. Reverting changes.
Training on augumented user 1564 15/50 current_auc = 0.7654541840588353
User 1564 AUC after training: 0.7651560325978931
User 1564 does not improve AUC. Reverting changes.
Training on augumented user 25817 16/50 current_auc = 0.7654541840588353
User 25817 AUC after training: 0.7653548002385212
User 25817 does not improve AUC. Reverting changes.
Training on augumented user 119251 17/50 current_auc = 0.7654541840588353
User 119251 AUC after training: 0.764857881136951
User 119251 does not improve AUC. Reverting changes.
Training on augumented user 134714 18/50 current_auc = 0.7654541840588353
User 134714 AUC after training: 0.7655535678791493
User 134714 improves AUC. Keeping the model.
Training on augumented user 35889 19/50 current_auc = 0.7655535678791493
User 35889 AUC after training: 0.7654541840588353
User 35889 does not improve AUC. Reverting changes.
Training on augumented user 105211 20/50 current_auc = 0.7655535678791493
User 105211 AUC after training: 0.7655535678791493
User 105211 does not improve AUC. Reverting changes.
Training on augumented user 101714 21/50 current_auc = 0.7655535678791493
User 101714 AUC after training: 0.7652554164182072
User 101714 does not improve AUC. Reverting changes.
Training on augumented user 98214 22/50 current_auc = 0.7655535678791493
User 98214 AUC after training: 0.764957264957265
User 98214 does not improve AUC. Reverting changes.
Training on augumented user 109340 23/50 current_auc = 0.7655535678791493
User 109340 AUC after training: 0.7657523355197774
User 109340 improves AUC. Keeping the model.
Training on augumented user 102197 24/50 current_auc = 0.7657523355197774
User 102197 AUC after training: 0.764957264957265
User 102197 does not improve AUC. Reverting changes.
Training on augumented user 87927 25/50 current_auc = 0.7657523355197774
User 87927 AUC after training: 0.7656529516994633
User 87927 does not improve AUC. Reverting changes.
Training on augumented user 119845 26/50 current_auc = 0.7657523355197774
User 119845 AUC after training: 0.7651560325978931
User 119845 does not improve AUC. Reverting changes.
Training on augumented user 94059 27/50 current_auc = 0.7657523355197774
User 94059 AUC after training: 0.7655535678791493
User 94059 does not improve AUC. Reverting changes.
Training on augumented user 111822 28/50 current_auc = 0.7657523355197774
User 111822 AUC after training: 0.7641621943947524
User 111822 does not improve AUC. Reverting changes.
Training on augumented user 134934 29/50 current_auc = 0.7657523355197774
User 134934 AUC after training: 0.7656529516994633
User 134934 does not improve AUC. Reverting changes.
Training on augumented user 39812 30/50 current_auc = 0.7657523355197774
User 39812 AUC after training: 0.7652554164182072
User 39812 does not improve AUC. Reverting changes.
Training on augumented user 84367 31/50 current_auc = 0.7657523355197774
User 84367 AUC after training: 0.7658517193400914
User 84367 improves AUC. Keeping the model.
Training on augumented user 47434 32/50 current_auc = 0.7658517193400914
User 47434 AUC after training: 0.7651560325978931
User 47434 does not improve AUC. Reverting changes.
Training on augumented user 31494 33/50 current_auc = 0.7658517193400914
User 31494 AUC after training: 0.7659511031604055
User 31494 improves AUC. Keeping the model.
Training on augumented user 76757 34/50 current_auc = 0.7659511031604055
User 76757 AUC after training: 0.7655535678791492
User 76757 does not improve AUC. Reverting changes.
Training on augumented user 74343 35/50 current_auc = 0.7659511031604055
User 74343 AUC after training: 0.7657523355197774
User 74343 does not improve AUC. Reverting changes.
Training on augumented user 67083 36/50 current_auc = 0.7659511031604055
User 67083 AUC after training: 0.7652554164182072
User 67083 does not improve AUC. Reverting changes.
Training on augumented user 11869 37/50 current_auc = 0.7659511031604055
User 11869 AUC after training: 0.7657523355197774
User 11869 does not improve AUC. Reverting changes.
Training on augumented user 1661 38/50 current_auc = 0.7659511031604055
User 1661 AUC after training: 0.7653548002385212
User 1661 does not improve AUC. Reverting changes.
Training on augumented user 115663 39/50 current_auc = 0.7659511031604055
User 115663 AUC after training: 0.7655535678791493
User 115663 does not improve AUC. Reverting changes.
Training on augumented user 77315 40/50 current_auc = 0.7659511031604055
User 77315 AUC after training: 0.7659511031604055
User 77315 does not improve AUC. Reverting changes.
Training on augumented user 116864 41/50 current_auc = 0.7659511031604055
User 116864 AUC after training: 0.7645597296760088
User 116864 does not improve AUC. Reverting changes.
Training on augumented user 16949 42/50 current_auc = 0.7659511031604055
User 16949 AUC after training: 0.7658517193400914
User 16949 does not improve AUC. Reverting changes.
Training on augumented user 123150 43/50 current_auc = 0.7659511031604055
User 123150 AUC after training: 0.7658517193400914
User 123150 does not improve AUC. Reverting changes.
Training on augumented user 63441 44/50 current_auc = 0.7659511031604055
User 63441 AUC after training: 0.7658517193400914
User 63441 does not improve AUC. Reverting changes.
Training on augumented user 62147 45/50 current_auc = 0.7659511031604055
User 62147 AUC after training: 0.7659511031604055
User 62147 does not improve AUC. Reverting changes.
Training on augumented user 30721 46/50 current_auc = 0.7659511031604055
User 30721 AUC after training: 0.7654541840588353
User 30721 does not improve AUC. Reverting changes.
Training on augumented user 44976 47/50 current_auc = 0.7659511031604055
User 44976 AUC after training: 0.7661498708010336
User 44976 improves AUC. Keeping the model.
Training on augumented user 77643 48/50 current_auc = 0.7661498708010336
User 77643 AUC after training: 0.7665474060822898
User 77643 improves AUC. Keeping the model.
Training on augumented user 18134 49/50 current_auc = 0.7665474060822898
User 18134 AUC after training: 0.7665474060822899
User 18134 improves AUC. Keeping the model.
[2024-12-02 18:34:56.948708] start test user 98586 103/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:34:57.739640] start test user 98586 103/567 recall augumented users by random, augumented_users = [4404, 69735, 127783, 133128, 99052, 84077, 119306, 45853, 51293, 117857, 10504, 11351, 96029, 10291, 23907, 111669, 107788, 32570, 124729, 36943, 27934, 105904, 19030, 104513, 57478, 18443, 11968, 51366, 18277, 135772, 56783, 66760, 53395, 103913, 134233, 111037, 68352, 5904, 81555, 13457, 99081, 48914, 119674, 117446, 134579, 60327, 20700, 52038, 97880, 95380]
[2024-12-02 18:34:57.754874] user = 98586 Cloud 103/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:34:57.762340] user = 98586 Local 103/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:34:57.811368] user = 98586 Local+ 103/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:35:00.823238] user = 98586 MPDA- 103/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 4404 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4404 AUC after training: 0.5
User 4404 does not improve AUC. Reverting changes.
Training on augumented user 69735 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 69735 AUC after training: 0.5
User 69735 does not improve AUC. Reverting changes.
Training on augumented user 127783 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127783 AUC after training: 0.5
User 127783 does not improve AUC. Reverting changes.
Training on augumented user 133128 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133128 AUC after training: 0.5
User 133128 does not improve AUC. Reverting changes.
Training on augumented user 99052 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99052 AUC after training: 0.5
User 99052 does not improve AUC. Reverting changes.
Training on augumented user 84077 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84077 AUC after training: 0.5
User 84077 does not improve AUC. Reverting changes.
Training on augumented user 119306 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 119306 AUC after training: 0.5
User 119306 does not improve AUC. Reverting changes.
Training on augumented user 45853 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45853 AUC after training: 0.5
User 45853 does not improve AUC. Reverting changes.
Training on augumented user 51293 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51293 AUC after training: 0.5
User 51293 does not improve AUC. Reverting changes.
Training on augumented user 117857 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117857 AUC after training: 0.5
User 117857 does not improve AUC. Reverting changes.
Training on augumented user 10504 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10504 AUC after training: 0.5
User 10504 does not improve AUC. Reverting changes.
Training on augumented user 11351 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11351 AUC after training: 0.5
User 11351 does not improve AUC. Reverting changes.
Training on augumented user 96029 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96029 AUC after training: 0.5
User 96029 does not improve AUC. Reverting changes.
Training on augumented user 10291 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10291 AUC after training: 0.5
User 10291 does not improve AUC. Reverting changes.
Training on augumented user 23907 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23907 AUC after training: 0.5
User 23907 does not improve AUC. Reverting changes.
Training on augumented user 111669 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111669 AUC after training: 0.5
User 111669 does not improve AUC. Reverting changes.
Training on augumented user 107788 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107788 AUC after training: 0.5
User 107788 does not improve AUC. Reverting changes.
Training on augumented user 32570 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32570 AUC after training: 0.5
User 32570 does not improve AUC. Reverting changes.
Training on augumented user 124729 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124729 AUC after training: 0.5
User 124729 does not improve AUC. Reverting changes.
Training on augumented user 36943 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36943 AUC after training: 0.5
User 36943 does not improve AUC. Reverting changes.
Training on augumented user 27934 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27934 AUC after training: 0.5
User 27934 does not improve AUC. Reverting changes.
Training on augumented user 105904 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105904 AUC after training: 0.5
User 105904 does not improve AUC. Reverting changes.
Training on augumented user 19030 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19030 AUC after training: 0.5
User 19030 does not improve AUC. Reverting changes.
Training on augumented user 104513 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104513 AUC after training: 0.5
User 104513 does not improve AUC. Reverting changes.
Training on augumented user 57478 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57478 AUC after training: 0.5
User 57478 does not improve AUC. Reverting changes.
Training on augumented user 18443 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18443 AUC after training: 0.5
User 18443 does not improve AUC. Reverting changes.
Training on augumented user 11968 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11968 AUC after training: 0.5
User 11968 does not improve AUC. Reverting changes.
Training on augumented user 51366 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51366 AUC after training: 0.5
User 51366 does not improve AUC. Reverting changes.
Training on augumented user 18277 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18277 AUC after training: 0.5
User 18277 does not improve AUC. Reverting changes.
Training on augumented user 135772 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 135772 AUC after training: 0.5
User 135772 does not improve AUC. Reverting changes.
Training on augumented user 56783 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56783 AUC after training: 0.5
User 56783 does not improve AUC. Reverting changes.
Training on augumented user 66760 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66760 AUC after training: 0.5
User 66760 does not improve AUC. Reverting changes.
Training on augumented user 53395 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53395 AUC after training: 0.5
User 53395 does not improve AUC. Reverting changes.
Training on augumented user 103913 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103913 AUC after training: 0.5
User 103913 does not improve AUC. Reverting changes.
Training on augumented user 134233 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134233 AUC after training: 0.5
User 134233 does not improve AUC. Reverting changes.
Training on augumented user 111037 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111037 AUC after training: 0.5
User 111037 does not improve AUC. Reverting changes.
Training on augumented user 68352 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68352 AUC after training: 0.5
User 68352 does not improve AUC. Reverting changes.
Training on augumented user 5904 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5904 AUC after training: 0.5
User 5904 does not improve AUC. Reverting changes.
Training on augumented user 81555 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81555 AUC after training: 0.5
User 81555 does not improve AUC. Reverting changes.
Training on augumented user 13457 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13457 AUC after training: 0.5
User 13457 does not improve AUC. Reverting changes.
Training on augumented user 99081 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99081 AUC after training: 0.5
User 99081 does not improve AUC. Reverting changes.
Training on augumented user 48914 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48914 AUC after training: 0.5
User 48914 does not improve AUC. Reverting changes.
Training on augumented user 119674 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 119674 AUC after training: 0.5
User 119674 does not improve AUC. Reverting changes.
Training on augumented user 117446 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117446 AUC after training: 0.5
User 117446 does not improve AUC. Reverting changes.
Training on augumented user 134579 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134579 AUC after training: 0.5
User 134579 does not improve AUC. Reverting changes.
Training on augumented user 60327 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60327 AUC after training: 0.5
User 60327 does not improve AUC. Reverting changes.
Training on augumented user 20700 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20700 AUC after training: 0.5
User 20700 does not improve AUC. Reverting changes.
Training on augumented user 52038 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 52038 AUC after training: 0.5
User 52038 does not improve AUC. Reverting changes.
Training on augumented user 97880 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97880 AUC after training: 0.5
User 97880 does not improve AUC. Reverting changes.
Training on augumented user 95380 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95380 AUC after training: 0.5
User 95380 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:35:30.824630] start test user 98587 104/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:35:31.726647] start test user 98587 104/567 recall augumented users by random, augumented_users = [30543, 72861, 49220, 10492, 129295, 17777, 67089, 78928, 27934, 117598, 26966, 78989, 114523, 36433, 3830, 96167, 64295, 55884, 107141, 134497, 86523, 22948, 98207, 92420, 31975, 137757, 81334, 74145, 6747, 79214, 48261, 67358, 2930, 62765, 126708, 68952, 94028, 121701, 2483, 13950, 100407, 78568, 16910, 61293, 20824, 115602, 29844, 128974, 77211, 55786]
[2024-12-02 18:35:31.775960] user = 98587 Cloud 104/567
[2024-12-02 18:35:31.804335] user = 98587 Local 104/567
[2024-12-02 18:35:31.866555] user = 98587 Local+ 104/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:35:34.589052] user = 98587 MPDA- 104/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.796875
Training on augumented user 30543 0/50 current_auc = 0.796875
User 30543 AUC after training: 0.7916666666666666
User 30543 does not improve AUC. Reverting changes.
Training on augumented user 72861 1/50 current_auc = 0.796875
User 72861 AUC after training: 0.796875
User 72861 does not improve AUC. Reverting changes.
Training on augumented user 49220 2/50 current_auc = 0.796875
User 49220 AUC after training: 0.796875
User 49220 does not improve AUC. Reverting changes.
Training on augumented user 10492 3/50 current_auc = 0.796875
User 10492 AUC after training: 0.796875
User 10492 does not improve AUC. Reverting changes.
Training on augumented user 129295 4/50 current_auc = 0.796875
User 129295 AUC after training: 0.796875
User 129295 does not improve AUC. Reverting changes.
Training on augumented user 17777 5/50 current_auc = 0.796875
User 17777 AUC after training: 0.796875
User 17777 does not improve AUC. Reverting changes.
Training on augumented user 67089 6/50 current_auc = 0.796875
User 67089 AUC after training: 0.796875
User 67089 does not improve AUC. Reverting changes.
Training on augumented user 78928 7/50 current_auc = 0.796875
User 78928 AUC after training: 0.796875
User 78928 does not improve AUC. Reverting changes.
Training on augumented user 27934 8/50 current_auc = 0.796875
User 27934 AUC after training: 0.796875
User 27934 does not improve AUC. Reverting changes.
Training on augumented user 117598 9/50 current_auc = 0.796875
User 117598 AUC after training: 0.796875
User 117598 does not improve AUC. Reverting changes.
Training on augumented user 26966 10/50 current_auc = 0.796875
User 26966 AUC after training: 0.796875
User 26966 does not improve AUC. Reverting changes.
Training on augumented user 78989 11/50 current_auc = 0.796875
User 78989 AUC after training: 0.796875
User 78989 does not improve AUC. Reverting changes.
Training on augumented user 114523 12/50 current_auc = 0.796875
User 114523 AUC after training: 0.796875
User 114523 does not improve AUC. Reverting changes.
Training on augumented user 36433 13/50 current_auc = 0.796875
User 36433 AUC after training: 0.796875
User 36433 does not improve AUC. Reverting changes.
Training on augumented user 3830 14/50 current_auc = 0.796875
User 3830 AUC after training: 0.796875
User 3830 does not improve AUC. Reverting changes.
Training on augumented user 96167 15/50 current_auc = 0.796875
User 96167 AUC after training: 0.7916666666666666
User 96167 does not improve AUC. Reverting changes.
Training on augumented user 64295 16/50 current_auc = 0.796875
User 64295 AUC after training: 0.796875
User 64295 does not improve AUC. Reverting changes.
Training on augumented user 55884 17/50 current_auc = 0.796875
User 55884 AUC after training: 0.7916666666666666
User 55884 does not improve AUC. Reverting changes.
Training on augumented user 107141 18/50 current_auc = 0.796875
User 107141 AUC after training: 0.796875
User 107141 does not improve AUC. Reverting changes.
Training on augumented user 134497 19/50 current_auc = 0.796875
User 134497 AUC after training: 0.7916666666666666
User 134497 does not improve AUC. Reverting changes.
Training on augumented user 86523 20/50 current_auc = 0.796875
User 86523 AUC after training: 0.796875
User 86523 does not improve AUC. Reverting changes.
Training on augumented user 22948 21/50 current_auc = 0.796875
User 22948 AUC after training: 0.796875
User 22948 does not improve AUC. Reverting changes.
Training on augumented user 98207 22/50 current_auc = 0.796875
User 98207 AUC after training: 0.796875
User 98207 does not improve AUC. Reverting changes.
Training on augumented user 92420 23/50 current_auc = 0.796875
User 92420 AUC after training: 0.796875
User 92420 does not improve AUC. Reverting changes.
Training on augumented user 31975 24/50 current_auc = 0.796875
User 31975 AUC after training: 0.796875
User 31975 does not improve AUC. Reverting changes.
Training on augumented user 137757 25/50 current_auc = 0.796875
User 137757 AUC after training: 0.796875
User 137757 does not improve AUC. Reverting changes.
Training on augumented user 81334 26/50 current_auc = 0.796875
User 81334 AUC after training: 0.796875
User 81334 does not improve AUC. Reverting changes.
Training on augumented user 74145 27/50 current_auc = 0.796875
User 74145 AUC after training: 0.7916666666666666
User 74145 does not improve AUC. Reverting changes.
Training on augumented user 6747 28/50 current_auc = 0.796875
User 6747 AUC after training: 0.796875
User 6747 does not improve AUC. Reverting changes.
Training on augumented user 79214 29/50 current_auc = 0.796875
User 79214 AUC after training: 0.796875
User 79214 does not improve AUC. Reverting changes.
Training on augumented user 48261 30/50 current_auc = 0.796875
User 48261 AUC after training: 0.796875
User 48261 does not improve AUC. Reverting changes.
Training on augumented user 67358 31/50 current_auc = 0.796875
User 67358 AUC after training: 0.796875
User 67358 does not improve AUC. Reverting changes.
Training on augumented user 2930 32/50 current_auc = 0.796875
User 2930 AUC after training: 0.796875
User 2930 does not improve AUC. Reverting changes.
Training on augumented user 62765 33/50 current_auc = 0.796875
User 62765 AUC after training: 0.796875
User 62765 does not improve AUC. Reverting changes.
Training on augumented user 126708 34/50 current_auc = 0.796875
User 126708 AUC after training: 0.796875
User 126708 does not improve AUC. Reverting changes.
Training on augumented user 68952 35/50 current_auc = 0.796875
User 68952 AUC after training: 0.796875
User 68952 does not improve AUC. Reverting changes.
Training on augumented user 94028 36/50 current_auc = 0.796875
User 94028 AUC after training: 0.796875
User 94028 does not improve AUC. Reverting changes.
Training on augumented user 121701 37/50 current_auc = 0.796875
User 121701 AUC after training: 0.796875
User 121701 does not improve AUC. Reverting changes.
Training on augumented user 2483 38/50 current_auc = 0.796875
User 2483 AUC after training: 0.796875
User 2483 does not improve AUC. Reverting changes.
Training on augumented user 13950 39/50 current_auc = 0.796875
User 13950 AUC after training: 0.796875
User 13950 does not improve AUC. Reverting changes.
Training on augumented user 100407 40/50 current_auc = 0.796875
User 100407 AUC after training: 0.796875
User 100407 does not improve AUC. Reverting changes.
Training on augumented user 78568 41/50 current_auc = 0.796875
User 78568 AUC after training: 0.7916666666666666
User 78568 does not improve AUC. Reverting changes.
Training on augumented user 16910 42/50 current_auc = 0.796875
User 16910 AUC after training: 0.796875
User 16910 does not improve AUC. Reverting changes.
Training on augumented user 61293 43/50 current_auc = 0.796875
User 61293 AUC after training: 0.796875
User 61293 does not improve AUC. Reverting changes.
Training on augumented user 20824 44/50 current_auc = 0.796875
User 20824 AUC after training: 0.796875
User 20824 does not improve AUC. Reverting changes.
Training on augumented user 115602 45/50 current_auc = 0.796875
User 115602 AUC after training: 0.796875
User 115602 does not improve AUC. Reverting changes.
Training on augumented user 29844 46/50 current_auc = 0.796875
User 29844 AUC after training: 0.796875
User 29844 does not improve AUC. Reverting changes.
Training on augumented user 128974 47/50 current_auc = 0.796875
User 128974 AUC after training: 0.796875
User 128974 does not improve AUC. Reverting changes.
Training on augumented user 77211 48/50 current_auc = 0.796875
User 77211 AUC after training: 0.796875
User 77211 does not improve AUC. Reverting changes.
Training on augumented user 55786 49/50 current_auc = 0.796875
User 55786 AUC after training: 0.796875
User 55786 does not improve AUC. Reverting changes.
[2024-12-02 18:36:01.400782] start test user 98611 105/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:36:02.098207] start test user 98611 105/567 recall augumented users by random, augumented_users = [15869, 111270, 7907, 98424, 50240, 119676, 75824, 79144, 64016, 72476, 3328, 81277, 8935, 88771, 57110, 24790, 1587, 53682, 78901, 58605, 8323, 12841, 94665, 96211, 81432, 6359, 85967, 116860, 68813, 77943, 95787, 35531, 85679, 51471, 131067, 21713, 109700, 44393, 100278, 1099, 20899, 23610, 48219, 115216, 41690, 46897, 46292, 78584, 92101, 52911]
[2024-12-02 18:36:02.127226] user = 98611 Cloud 105/567
[2024-12-02 18:36:02.139815] user = 98611 Local 105/567
[2024-12-02 18:36:02.171015] user = 98611 Local+ 105/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:36:04.209096] user = 98611 MPDA- 105/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7015384615384616
Training on augumented user 15869 0/50 current_auc = 0.7015384615384616
User 15869 AUC after training: 0.7015384615384616
User 15869 does not improve AUC. Reverting changes.
Training on augumented user 111270 1/50 current_auc = 0.7015384615384616
User 111270 AUC after training: 0.7015384615384616
User 111270 does not improve AUC. Reverting changes.
Training on augumented user 7907 2/50 current_auc = 0.7015384615384616
User 7907 AUC after training: 0.7015384615384616
User 7907 does not improve AUC. Reverting changes.
Training on augumented user 98424 3/50 current_auc = 0.7015384615384616
User 98424 AUC after training: 0.7015384615384616
User 98424 does not improve AUC. Reverting changes.
Training on augumented user 50240 4/50 current_auc = 0.7015384615384616
User 50240 AUC after training: 0.7015384615384616
User 50240 does not improve AUC. Reverting changes.
Training on augumented user 119676 5/50 current_auc = 0.7015384615384616
User 119676 AUC after training: 0.7015384615384616
User 119676 does not improve AUC. Reverting changes.
Training on augumented user 75824 6/50 current_auc = 0.7015384615384616
User 75824 AUC after training: 0.7015384615384616
User 75824 does not improve AUC. Reverting changes.
Training on augumented user 79144 7/50 current_auc = 0.7015384615384616
User 79144 AUC after training: 0.7015384615384616
User 79144 does not improve AUC. Reverting changes.
Training on augumented user 64016 8/50 current_auc = 0.7015384615384616
User 64016 AUC after training: 0.7015384615384616
User 64016 does not improve AUC. Reverting changes.
Training on augumented user 72476 9/50 current_auc = 0.7015384615384616
User 72476 AUC after training: 0.7015384615384616
User 72476 does not improve AUC. Reverting changes.
Training on augumented user 3328 10/50 current_auc = 0.7015384615384616
User 3328 AUC after training: 0.7015384615384616
User 3328 does not improve AUC. Reverting changes.
Training on augumented user 81277 11/50 current_auc = 0.7015384615384616
User 81277 AUC after training: 0.7015384615384616
User 81277 does not improve AUC. Reverting changes.
Training on augumented user 8935 12/50 current_auc = 0.7015384615384616
User 8935 AUC after training: 0.7046153846153846
User 8935 improves AUC. Keeping the model.
Training on augumented user 88771 13/50 current_auc = 0.7046153846153846
User 88771 AUC after training: 0.7046153846153846
User 88771 does not improve AUC. Reverting changes.
Training on augumented user 57110 14/50 current_auc = 0.7046153846153846
User 57110 AUC after training: 0.7046153846153846
User 57110 does not improve AUC. Reverting changes.
Training on augumented user 24790 15/50 current_auc = 0.7046153846153846
User 24790 AUC after training: 0.7046153846153846
User 24790 does not improve AUC. Reverting changes.
Training on augumented user 1587 16/50 current_auc = 0.7046153846153846
User 1587 AUC after training: 0.7076923076923076
User 1587 improves AUC. Keeping the model.
Training on augumented user 53682 17/50 current_auc = 0.7076923076923076
User 53682 AUC after training: 0.7015384615384616
User 53682 does not improve AUC. Reverting changes.
Training on augumented user 78901 18/50 current_auc = 0.7076923076923076
User 78901 AUC after training: 0.7076923076923076
User 78901 does not improve AUC. Reverting changes.
Training on augumented user 58605 19/50 current_auc = 0.7076923076923076
User 58605 AUC after training: 0.7046153846153846
User 58605 does not improve AUC. Reverting changes.
Training on augumented user 8323 20/50 current_auc = 0.7076923076923076
User 8323 AUC after training: 0.7076923076923076
User 8323 does not improve AUC. Reverting changes.
Training on augumented user 12841 21/50 current_auc = 0.7076923076923076
User 12841 AUC after training: 0.7076923076923076
User 12841 does not improve AUC. Reverting changes.
Training on augumented user 94665 22/50 current_auc = 0.7076923076923076
User 94665 AUC after training: 0.6984615384615385
User 94665 does not improve AUC. Reverting changes.
Training on augumented user 96211 23/50 current_auc = 0.7076923076923076
User 96211 AUC after training: 0.7076923076923076
User 96211 does not improve AUC. Reverting changes.
Training on augumented user 81432 24/50 current_auc = 0.7076923076923076
User 81432 AUC after training: 0.7046153846153846
User 81432 does not improve AUC. Reverting changes.
Training on augumented user 6359 25/50 current_auc = 0.7076923076923076
User 6359 AUC after training: 0.7046153846153846
User 6359 does not improve AUC. Reverting changes.
Training on augumented user 85967 26/50 current_auc = 0.7076923076923076
User 85967 AUC after training: 0.7046153846153846
User 85967 does not improve AUC. Reverting changes.
Training on augumented user 116860 27/50 current_auc = 0.7076923076923076
User 116860 AUC after training: 0.7046153846153846
User 116860 does not improve AUC. Reverting changes.
Training on augumented user 68813 28/50 current_auc = 0.7076923076923076
User 68813 AUC after training: 0.7046153846153846
User 68813 does not improve AUC. Reverting changes.
Training on augumented user 77943 29/50 current_auc = 0.7076923076923076
User 77943 AUC after training: 0.7076923076923076
User 77943 does not improve AUC. Reverting changes.
Training on augumented user 95787 30/50 current_auc = 0.7076923076923076
User 95787 AUC after training: 0.7076923076923076
User 95787 does not improve AUC. Reverting changes.
Training on augumented user 35531 31/50 current_auc = 0.7076923076923076
User 35531 AUC after training: 0.7046153846153846
User 35531 does not improve AUC. Reverting changes.
Training on augumented user 85679 32/50 current_auc = 0.7076923076923076
User 85679 AUC after training: 0.7076923076923076
User 85679 does not improve AUC. Reverting changes.
Training on augumented user 51471 33/50 current_auc = 0.7076923076923076
User 51471 AUC after training: 0.7046153846153846
User 51471 does not improve AUC. Reverting changes.
Training on augumented user 131067 34/50 current_auc = 0.7076923076923076
User 131067 AUC after training: 0.7046153846153846
User 131067 does not improve AUC. Reverting changes.
Training on augumented user 21713 35/50 current_auc = 0.7076923076923076
User 21713 AUC after training: 0.7046153846153846
User 21713 does not improve AUC. Reverting changes.
Training on augumented user 109700 36/50 current_auc = 0.7076923076923076
User 109700 AUC after training: 0.6984615384615385
User 109700 does not improve AUC. Reverting changes.
Training on augumented user 44393 37/50 current_auc = 0.7076923076923076
User 44393 AUC after training: 0.7076923076923076
User 44393 does not improve AUC. Reverting changes.
Training on augumented user 100278 38/50 current_auc = 0.7076923076923076
User 100278 AUC after training: 0.7046153846153846
User 100278 does not improve AUC. Reverting changes.
Training on augumented user 1099 39/50 current_auc = 0.7076923076923076
User 1099 AUC after training: 0.7046153846153846
User 1099 does not improve AUC. Reverting changes.
Training on augumented user 20899 40/50 current_auc = 0.7076923076923076
User 20899 AUC after training: 0.6984615384615385
User 20899 does not improve AUC. Reverting changes.
Training on augumented user 23610 41/50 current_auc = 0.7076923076923076
User 23610 AUC after training: 0.7046153846153846
User 23610 does not improve AUC. Reverting changes.
Training on augumented user 48219 42/50 current_auc = 0.7076923076923076
User 48219 AUC after training: 0.7076923076923076
User 48219 does not improve AUC. Reverting changes.
Training on augumented user 115216 43/50 current_auc = 0.7076923076923076
User 115216 AUC after training: 0.7046153846153846
User 115216 does not improve AUC. Reverting changes.
Training on augumented user 41690 44/50 current_auc = 0.7076923076923076
User 41690 AUC after training: 0.7015384615384614
User 41690 does not improve AUC. Reverting changes.
Training on augumented user 46897 45/50 current_auc = 0.7076923076923076
User 46897 AUC after training: 0.7076923076923076
User 46897 does not improve AUC. Reverting changes.
Training on augumented user 46292 46/50 current_auc = 0.7076923076923076
User 46292 AUC after training: 0.7076923076923076
User 46292 does not improve AUC. Reverting changes.
Training on augumented user 78584 47/50 current_auc = 0.7076923076923076
User 78584 AUC after training: 0.7076923076923076
User 78584 does not improve AUC. Reverting changes.
Training on augumented user 92101 48/50 current_auc = 0.7076923076923076
User 92101 AUC after training: 0.7076923076923076
User 92101 does not improve AUC. Reverting changes.
Training on augumented user 52911 49/50 current_auc = 0.7076923076923076
User 52911 AUC after training: 0.6984615384615385
User 52911 does not improve AUC. Reverting changes.
[2024-12-02 18:36:32.891357] start test user 98645 106/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:36:33.656096] start test user 98645 106/567 recall augumented users by random, augumented_users = [102172, 103472, 94135, 13694, 91141, 59962, 7035, 60139, 33595, 95800, 52801, 94773, 98455, 96836, 2455, 36884, 117818, 83458, 48915, 56077, 99691, 37285, 92326, 105097, 137293, 60683, 128963, 7852, 134282, 38643, 84868, 77976, 110124, 7985, 111402, 75561, 16911, 48332, 96793, 41933, 29950, 5651, 90555, 114712, 37522, 12659, 96350, 18378, 87443, 96188]
[2024-12-02 18:36:33.728384] user = 98645 Cloud 106/567
[2024-12-02 18:36:33.755568] user = 98645 Local 106/567
[2024-12-02 18:36:33.788138] user = 98645 Local+ 106/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:36:36.782438] user = 98645 MPDA- 106/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5909090909090909
Training on augumented user 102172 0/50 current_auc = 0.5909090909090909
User 102172 AUC after training: 0.5909090909090909
User 102172 does not improve AUC. Reverting changes.
Training on augumented user 103472 1/50 current_auc = 0.5909090909090909
User 103472 AUC after training: 0.5909090909090909
User 103472 does not improve AUC. Reverting changes.
Training on augumented user 94135 2/50 current_auc = 0.5909090909090909
User 94135 AUC after training: 0.5852272727272727
User 94135 does not improve AUC. Reverting changes.
Training on augumented user 13694 3/50 current_auc = 0.5909090909090909
User 13694 AUC after training: 0.5909090909090909
User 13694 does not improve AUC. Reverting changes.
Training on augumented user 91141 4/50 current_auc = 0.5909090909090909
User 91141 AUC after training: 0.5795454545454546
User 91141 does not improve AUC. Reverting changes.
Training on augumented user 59962 5/50 current_auc = 0.5909090909090909
User 59962 AUC after training: 0.5909090909090909
User 59962 does not improve AUC. Reverting changes.
Training on augumented user 7035 6/50 current_auc = 0.5909090909090909
User 7035 AUC after training: 0.5909090909090909
User 7035 does not improve AUC. Reverting changes.
Training on augumented user 60139 7/50 current_auc = 0.5909090909090909
User 60139 AUC after training: 0.5909090909090909
User 60139 does not improve AUC. Reverting changes.
Training on augumented user 33595 8/50 current_auc = 0.5909090909090909
User 33595 AUC after training: 0.5909090909090909
User 33595 does not improve AUC. Reverting changes.
Training on augumented user 95800 9/50 current_auc = 0.5909090909090909
User 95800 AUC after training: 0.5909090909090909
User 95800 does not improve AUC. Reverting changes.
Training on augumented user 52801 10/50 current_auc = 0.5909090909090909
User 52801 AUC after training: 0.5909090909090909
User 52801 does not improve AUC. Reverting changes.
Training on augumented user 94773 11/50 current_auc = 0.5909090909090909
User 94773 AUC after training: 0.5965909090909092
User 94773 improves AUC. Keeping the model.
Training on augumented user 98455 12/50 current_auc = 0.5965909090909092
User 98455 AUC after training: 0.5965909090909092
User 98455 does not improve AUC. Reverting changes.
Training on augumented user 96836 13/50 current_auc = 0.5965909090909092
User 96836 AUC after training: 0.5965909090909092
User 96836 does not improve AUC. Reverting changes.
Training on augumented user 2455 14/50 current_auc = 0.5965909090909092
User 2455 AUC after training: 0.5909090909090909
User 2455 does not improve AUC. Reverting changes.
Training on augumented user 36884 15/50 current_auc = 0.5965909090909092
User 36884 AUC after training: 0.5909090909090909
User 36884 does not improve AUC. Reverting changes.
Training on augumented user 117818 16/50 current_auc = 0.5965909090909092
User 117818 AUC after training: 0.5965909090909092
User 117818 does not improve AUC. Reverting changes.
Training on augumented user 83458 17/50 current_auc = 0.5965909090909092
User 83458 AUC after training: 0.5965909090909092
User 83458 does not improve AUC. Reverting changes.
Training on augumented user 48915 18/50 current_auc = 0.5965909090909092
User 48915 AUC after training: 0.5965909090909092
User 48915 does not improve AUC. Reverting changes.
Training on augumented user 56077 19/50 current_auc = 0.5965909090909092
User 56077 AUC after training: 0.5909090909090909
User 56077 does not improve AUC. Reverting changes.
Training on augumented user 99691 20/50 current_auc = 0.5965909090909092
User 99691 AUC after training: 0.5965909090909092
User 99691 does not improve AUC. Reverting changes.
Training on augumented user 37285 21/50 current_auc = 0.5965909090909092
User 37285 AUC after training: 0.5965909090909092
User 37285 does not improve AUC. Reverting changes.
Training on augumented user 92326 22/50 current_auc = 0.5965909090909092
User 92326 AUC after training: 0.5909090909090909
User 92326 does not improve AUC. Reverting changes.
Training on augumented user 105097 23/50 current_auc = 0.5965909090909092
User 105097 AUC after training: 0.5965909090909092
User 105097 does not improve AUC. Reverting changes.
Training on augumented user 137293 24/50 current_auc = 0.5965909090909092
User 137293 AUC after training: 0.5909090909090909
User 137293 does not improve AUC. Reverting changes.
Training on augumented user 60683 25/50 current_auc = 0.5965909090909092
User 60683 AUC after training: 0.5965909090909092
User 60683 does not improve AUC. Reverting changes.
Training on augumented user 128963 26/50 current_auc = 0.5965909090909092
User 128963 AUC after training: 0.5965909090909092
User 128963 does not improve AUC. Reverting changes.
Training on augumented user 7852 27/50 current_auc = 0.5965909090909092
User 7852 AUC after training: 0.5909090909090909
User 7852 does not improve AUC. Reverting changes.
Training on augumented user 134282 28/50 current_auc = 0.5965909090909092
User 134282 AUC after training: 0.5965909090909092
User 134282 does not improve AUC. Reverting changes.
Training on augumented user 38643 29/50 current_auc = 0.5965909090909092
User 38643 AUC after training: 0.5965909090909092
User 38643 does not improve AUC. Reverting changes.
Training on augumented user 84868 30/50 current_auc = 0.5965909090909092
User 84868 AUC after training: 0.5909090909090909
User 84868 does not improve AUC. Reverting changes.
Training on augumented user 77976 31/50 current_auc = 0.5965909090909092
User 77976 AUC after training: 0.5965909090909092
User 77976 does not improve AUC. Reverting changes.
Training on augumented user 110124 32/50 current_auc = 0.5965909090909092
User 110124 AUC after training: 0.5965909090909092
User 110124 does not improve AUC. Reverting changes.
Training on augumented user 7985 33/50 current_auc = 0.5965909090909092
User 7985 AUC after training: 0.5965909090909092
User 7985 does not improve AUC. Reverting changes.
Training on augumented user 111402 34/50 current_auc = 0.5965909090909092
User 111402 AUC after training: 0.5965909090909091
User 111402 does not improve AUC. Reverting changes.
Training on augumented user 75561 35/50 current_auc = 0.5965909090909092
User 75561 AUC after training: 0.5909090909090909
User 75561 does not improve AUC. Reverting changes.
Training on augumented user 16911 36/50 current_auc = 0.5965909090909092
User 16911 AUC after training: 0.5965909090909092
User 16911 does not improve AUC. Reverting changes.
Training on augumented user 48332 37/50 current_auc = 0.5965909090909092
User 48332 AUC after training: 0.5965909090909092
User 48332 does not improve AUC. Reverting changes.
Training on augumented user 96793 38/50 current_auc = 0.5965909090909092
User 96793 AUC after training: 0.5965909090909092
User 96793 does not improve AUC. Reverting changes.
Training on augumented user 41933 39/50 current_auc = 0.5965909090909092
User 41933 AUC after training: 0.5909090909090909
User 41933 does not improve AUC. Reverting changes.
Training on augumented user 29950 40/50 current_auc = 0.5965909090909092
User 29950 AUC after training: 0.5909090909090909
User 29950 does not improve AUC. Reverting changes.
Training on augumented user 5651 41/50 current_auc = 0.5965909090909092
User 5651 AUC after training: 0.5965909090909092
User 5651 does not improve AUC. Reverting changes.
Training on augumented user 90555 42/50 current_auc = 0.5965909090909092
User 90555 AUC after training: 0.5965909090909092
User 90555 does not improve AUC. Reverting changes.
Training on augumented user 114712 43/50 current_auc = 0.5965909090909092
User 114712 AUC after training: 0.5965909090909092
User 114712 does not improve AUC. Reverting changes.
Training on augumented user 37522 44/50 current_auc = 0.5965909090909092
User 37522 AUC after training: 0.5909090909090909
User 37522 does not improve AUC. Reverting changes.
Training on augumented user 12659 45/50 current_auc = 0.5965909090909092
User 12659 AUC after training: 0.5909090909090909
User 12659 does not improve AUC. Reverting changes.
Training on augumented user 96350 46/50 current_auc = 0.5965909090909092
User 96350 AUC after training: 0.5852272727272727
User 96350 does not improve AUC. Reverting changes.
Training on augumented user 18378 47/50 current_auc = 0.5965909090909092
User 18378 AUC after training: 0.5965909090909092
User 18378 does not improve AUC. Reverting changes.
Training on augumented user 87443 48/50 current_auc = 0.5965909090909092
User 87443 AUC after training: 0.5965909090909092
User 87443 does not improve AUC. Reverting changes.
Training on augumented user 96188 49/50 current_auc = 0.5965909090909092
User 96188 AUC after training: 0.5909090909090909
User 96188 does not improve AUC. Reverting changes.
[2024-12-02 18:37:06.520977] start test user 98671 107/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:37:07.100783] start test user 98671 107/567 recall augumented users by random, augumented_users = [122968, 76353, 43402, 8604, 126940, 108622, 74421, 58919, 131566, 36332, 38794, 29367, 130665, 94983, 7446, 116995, 57588, 137205, 1102, 61240, 125944, 82637, 49102, 78396, 59258, 73137, 113484, 52525, 80630, 29152, 53912, 18975, 132575, 69170, 88170, 80477, 20186, 116127, 6927, 42993, 114632, 118771, 50800, 134877, 34429, 8673, 69255, 131891, 67160, 43228]
[2024-12-02 18:37:07.116392] user = 98671 Cloud 107/567
[2024-12-02 18:37:07.135066] user = 98671 Local 107/567
[2024-12-02 18:37:07.198104] user = 98671 Local+ 107/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:37:10.346956] user = 98671 MPDA- 107/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.41608807776234874
Training on augumented user 122968 0/50 current_auc = 0.41608807776234874
User 122968 AUC after training: 0.41707994445546515
User 122968 improves AUC. Keeping the model.
Training on augumented user 76353 1/50 current_auc = 0.41707994445546515
User 76353 AUC after training: 0.41658401110890697
User 76353 does not improve AUC. Reverting changes.
Training on augumented user 43402 2/50 current_auc = 0.41707994445546515
User 43402 AUC after training: 0.41707994445546526
User 43402 improves AUC. Keeping the model.
Training on augumented user 8604 3/50 current_auc = 0.41707994445546526
User 8604 AUC after training: 0.41767506447133507
User 8604 improves AUC. Keeping the model.
Training on augumented user 126940 4/50 current_auc = 0.41767506447133507
User 126940 AUC after training: 0.41707994445546526
User 126940 does not improve AUC. Reverting changes.
Training on augumented user 108622 5/50 current_auc = 0.41767506447133507
User 108622 AUC after training: 0.41727831779408847
User 108622 does not improve AUC. Reverting changes.
Training on augumented user 74421 6/50 current_auc = 0.41767506447133507
User 74421 AUC after training: 0.4174766911327118
User 74421 does not improve AUC. Reverting changes.
Training on augumented user 58919 7/50 current_auc = 0.41767506447133507
User 58919 AUC after training: 0.4170799444554652
User 58919 does not improve AUC. Reverting changes.
Training on augumented user 131566 8/50 current_auc = 0.41767506447133507
User 131566 AUC after training: 0.41767506447133507
User 131566 does not improve AUC. Reverting changes.
Training on augumented user 36332 9/50 current_auc = 0.41767506447133507
User 36332 AUC after training: 0.41727831779408847
User 36332 does not improve AUC. Reverting changes.
Training on augumented user 38794 10/50 current_auc = 0.41767506447133507
User 38794 AUC after training: 0.4172783177940885
User 38794 does not improve AUC. Reverting changes.
Training on augumented user 29367 11/50 current_auc = 0.41767506447133507
User 29367 AUC after training: 0.41767506447133507
User 29367 does not improve AUC. Reverting changes.
Training on augumented user 130665 12/50 current_auc = 0.41767506447133507
User 130665 AUC after training: 0.41767506447133507
User 130665 does not improve AUC. Reverting changes.
Training on augumented user 94983 13/50 current_auc = 0.41767506447133507
User 94983 AUC after training: 0.41787343780995834
User 94983 improves AUC. Keeping the model.
Training on augumented user 7446 14/50 current_auc = 0.41787343780995834
User 7446 AUC after training: 0.41658401110890697
User 7446 does not improve AUC. Reverting changes.
Training on augumented user 116995 15/50 current_auc = 0.41787343780995834
User 116995 AUC after training: 0.4174766911327118
User 116995 does not improve AUC. Reverting changes.
Training on augumented user 57588 16/50 current_auc = 0.41787343780995834
User 57588 AUC after training: 0.41807181114858166
User 57588 improves AUC. Keeping the model.
Training on augumented user 137205 17/50 current_auc = 0.41807181114858166
User 137205 AUC after training: 0.4172783177940885
User 137205 does not improve AUC. Reverting changes.
Training on augumented user 1102 18/50 current_auc = 0.41807181114858166
User 1102 AUC after training: 0.41827018448720493
User 1102 improves AUC. Keeping the model.
Training on augumented user 61240 19/50 current_auc = 0.41827018448720493
User 61240 AUC after training: 0.41846855782582826
User 61240 improves AUC. Keeping the model.
Training on augumented user 125944 20/50 current_auc = 0.41846855782582826
User 125944 AUC after training: 0.4188653045030748
User 125944 improves AUC. Keeping the model.
Training on augumented user 82637 21/50 current_auc = 0.4188653045030748
User 82637 AUC after training: 0.4190636778416981
User 82637 improves AUC. Keeping the model.
Training on augumented user 49102 22/50 current_auc = 0.4190636778416981
User 49102 AUC after training: 0.41757587780202343
User 49102 does not improve AUC. Reverting changes.
Training on augumented user 78396 23/50 current_auc = 0.4190636778416981
User 78396 AUC after training: 0.4188653045030748
User 78396 does not improve AUC. Reverting changes.
Training on augumented user 59258 24/50 current_auc = 0.4190636778416981
User 59258 AUC after training: 0.4191628645110098
User 59258 improves AUC. Keeping the model.
Training on augumented user 73137 25/50 current_auc = 0.4191628645110098
User 73137 AUC after training: 0.41955961118825635
User 73137 improves AUC. Keeping the model.
Training on augumented user 113484 26/50 current_auc = 0.41955961118825635
User 113484 AUC after training: 0.42005554453481453
User 113484 improves AUC. Keeping the model.
Training on augumented user 52525 27/50 current_auc = 0.42005554453481453
User 52525 AUC after training: 0.42065066455068445
User 52525 improves AUC. Keeping the model.
Training on augumented user 80630 28/50 current_auc = 0.42065066455068445
User 80630 AUC after training: 0.42074985121999603
User 80630 improves AUC. Keeping the model.
Training on augumented user 29152 29/50 current_auc = 0.42074985121999603
User 29152 AUC after training: 0.42055147788137276
User 29152 does not improve AUC. Reverting changes.
Training on augumented user 53912 30/50 current_auc = 0.42074985121999603
User 53912 AUC after training: 0.42174171791311255
User 53912 improves AUC. Keeping the model.
Training on augumented user 18975 31/50 current_auc = 0.42174171791311255
User 18975 AUC after training: 0.4219400912517358
User 18975 improves AUC. Keeping the model.
Training on augumented user 132575 32/50 current_auc = 0.4219400912517358
User 132575 AUC after training: 0.42144415790517753
User 132575 does not improve AUC. Reverting changes.
Training on augumented user 69170 33/50 current_auc = 0.4219400912517358
User 69170 AUC after training: 0.4209482245586193
User 69170 does not improve AUC. Reverting changes.
Training on augumented user 88170 34/50 current_auc = 0.4219400912517358
User 88170 AUC after training: 0.42144415790517753
User 88170 does not improve AUC. Reverting changes.
Training on augumented user 80477 35/50 current_auc = 0.4219400912517358
User 80477 AUC after training: 0.42124578456655426
User 80477 does not improve AUC. Reverting changes.
Training on augumented user 20186 36/50 current_auc = 0.4219400912517358
User 20186 AUC after training: 0.4215433445744892
User 20186 does not improve AUC. Reverting changes.
Training on augumented user 116127 37/50 current_auc = 0.4219400912517358
User 116127 AUC after training: 0.4207498512199961
User 116127 does not improve AUC. Reverting changes.
Training on augumented user 6927 38/50 current_auc = 0.4219400912517358
User 6927 AUC after training: 0.4216425312438008
User 6927 does not improve AUC. Reverting changes.
Training on augumented user 42993 39/50 current_auc = 0.4219400912517358
User 42993 AUC after training: 0.42174171791311255
User 42993 does not improve AUC. Reverting changes.
Training on augumented user 114632 40/50 current_auc = 0.4219400912517358
User 114632 AUC after training: 0.4213449712358659
User 114632 does not improve AUC. Reverting changes.
Training on augumented user 118771 41/50 current_auc = 0.4219400912517358
User 118771 AUC after training: 0.4215433445744893
User 118771 does not improve AUC. Reverting changes.
Training on augumented user 50800 42/50 current_auc = 0.4219400912517358
User 50800 AUC after training: 0.421047411227931
User 50800 does not improve AUC. Reverting changes.
Training on augumented user 134877 43/50 current_auc = 0.4219400912517358
User 134877 AUC after training: 0.4217417179131125
User 134877 does not improve AUC. Reverting changes.
Training on augumented user 34429 44/50 current_auc = 0.4219400912517358
User 34429 AUC after training: 0.4217417179131125
User 34429 does not improve AUC. Reverting changes.
Training on augumented user 8673 45/50 current_auc = 0.4219400912517358
User 8673 AUC after training: 0.4218409045824241
User 8673 does not improve AUC. Reverting changes.
Training on augumented user 69255 46/50 current_auc = 0.4219400912517358
User 69255 AUC after training: 0.42154334457448916
User 69255 does not improve AUC. Reverting changes.
Training on augumented user 131891 47/50 current_auc = 0.4219400912517358
User 131891 AUC after training: 0.4211465978972426
User 131891 does not improve AUC. Reverting changes.
Training on augumented user 67160 48/50 current_auc = 0.4219400912517358
User 67160 AUC after training: 0.42164253124380086
User 67160 does not improve AUC. Reverting changes.
Training on augumented user 43228 49/50 current_auc = 0.4219400912517358
User 43228 AUC after training: 0.4217417179131125
User 43228 does not improve AUC. Reverting changes.
[2024-12-02 18:37:42.647582] start test user 98679 108/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:37:43.218016] start test user 98679 108/567 recall augumented users by random, augumented_users = [29883, 48049, 38661, 138423, 115480, 19503, 2567, 105168, 8239, 119180, 109578, 87015, 117750, 90965, 37835, 3602, 114626, 65463, 79722, 132431, 35579, 87479, 8093, 66143, 136277, 42924, 11622, 96206, 122901, 78919, 32742, 36616, 125081, 5274, 22559, 87357, 70786, 47891, 68226, 88369, 128276, 89234, 32734, 12510, 103454, 102899, 99434, 102827, 40210, 131261]
[2024-12-02 18:37:43.232510] user = 98679 Cloud 108/567
[2024-12-02 18:37:43.256159] user = 98679 Local 108/567
[2024-12-02 18:37:43.283961] user = 98679 Local+ 108/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:37:45.856329] user = 98679 MPDA- 108/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.665079365079365
Training on augumented user 29883 0/50 current_auc = 0.665079365079365
User 29883 AUC after training: 0.665079365079365
User 29883 does not improve AUC. Reverting changes.
Training on augumented user 48049 1/50 current_auc = 0.665079365079365
User 48049 AUC after training: 0.6626984126984127
User 48049 does not improve AUC. Reverting changes.
Training on augumented user 38661 2/50 current_auc = 0.665079365079365
User 38661 AUC after training: 0.665079365079365
User 38661 does not improve AUC. Reverting changes.
Training on augumented user 138423 3/50 current_auc = 0.665079365079365
User 138423 AUC after training: 0.6658730158730158
User 138423 improves AUC. Keeping the model.
Training on augumented user 115480 4/50 current_auc = 0.6658730158730158
User 115480 AUC after training: 0.6658730158730158
User 115480 does not improve AUC. Reverting changes.
Training on augumented user 19503 5/50 current_auc = 0.6658730158730158
User 19503 AUC after training: 0.6642857142857143
User 19503 does not improve AUC. Reverting changes.
Training on augumented user 2567 6/50 current_auc = 0.6658730158730158
User 2567 AUC after training: 0.6658730158730158
User 2567 does not improve AUC. Reverting changes.
Training on augumented user 105168 7/50 current_auc = 0.6658730158730158
User 105168 AUC after training: 0.6626984126984126
User 105168 does not improve AUC. Reverting changes.
Training on augumented user 8239 8/50 current_auc = 0.6658730158730158
User 8239 AUC after training: 0.6658730158730158
User 8239 does not improve AUC. Reverting changes.
Training on augumented user 119180 9/50 current_auc = 0.6658730158730158
User 119180 AUC after training: 0.6626984126984127
User 119180 does not improve AUC. Reverting changes.
Training on augumented user 109578 10/50 current_auc = 0.6658730158730158
User 109578 AUC after training: 0.6658730158730158
User 109578 does not improve AUC. Reverting changes.
Training on augumented user 87015 11/50 current_auc = 0.6658730158730158
User 87015 AUC after training: 0.6674603174603174
User 87015 improves AUC. Keeping the model.
Training on augumented user 117750 12/50 current_auc = 0.6674603174603174
User 117750 AUC after training: 0.6658730158730158
User 117750 does not improve AUC. Reverting changes.
Training on augumented user 90965 13/50 current_auc = 0.6674603174603174
User 90965 AUC after training: 0.6674603174603174
User 90965 does not improve AUC. Reverting changes.
Training on augumented user 37835 14/50 current_auc = 0.6674603174603174
User 37835 AUC after training: 0.6642857142857143
User 37835 does not improve AUC. Reverting changes.
Training on augumented user 3602 15/50 current_auc = 0.6674603174603174
User 3602 AUC after training: 0.6674603174603174
User 3602 does not improve AUC. Reverting changes.
Training on augumented user 114626 16/50 current_auc = 0.6674603174603174
User 114626 AUC after training: 0.6642857142857144
User 114626 does not improve AUC. Reverting changes.
Training on augumented user 65463 17/50 current_auc = 0.6674603174603174
User 65463 AUC after training: 0.6634920634920635
User 65463 does not improve AUC. Reverting changes.
Training on augumented user 79722 18/50 current_auc = 0.6674603174603174
User 79722 AUC after training: 0.6658730158730158
User 79722 does not improve AUC. Reverting changes.
Training on augumented user 132431 19/50 current_auc = 0.6674603174603174
User 132431 AUC after training: 0.6634920634920635
User 132431 does not improve AUC. Reverting changes.
Training on augumented user 35579 20/50 current_auc = 0.6674603174603174
User 35579 AUC after training: 0.6634920634920635
User 35579 does not improve AUC. Reverting changes.
Training on augumented user 87479 21/50 current_auc = 0.6674603174603174
User 87479 AUC after training: 0.665873015873016
User 87479 does not improve AUC. Reverting changes.
Training on augumented user 8093 22/50 current_auc = 0.6674603174603174
User 8093 AUC after training: 0.6634920634920634
User 8093 does not improve AUC. Reverting changes.
Training on augumented user 66143 23/50 current_auc = 0.6674603174603174
User 66143 AUC after training: 0.6611111111111111
User 66143 does not improve AUC. Reverting changes.
Training on augumented user 136277 24/50 current_auc = 0.6674603174603174
User 136277 AUC after training: 0.6658730158730158
User 136277 does not improve AUC. Reverting changes.
Training on augumented user 42924 25/50 current_auc = 0.6674603174603174
User 42924 AUC after training: 0.661904761904762
User 42924 does not improve AUC. Reverting changes.
Training on augumented user 11622 26/50 current_auc = 0.6674603174603174
User 11622 AUC after training: 0.6642857142857143
User 11622 does not improve AUC. Reverting changes.
Training on augumented user 96206 27/50 current_auc = 0.6674603174603174
User 96206 AUC after training: 0.6650793650793649
User 96206 does not improve AUC. Reverting changes.
Training on augumented user 122901 28/50 current_auc = 0.6674603174603174
User 122901 AUC after training: 0.665873015873016
User 122901 does not improve AUC. Reverting changes.
Training on augumented user 78919 29/50 current_auc = 0.6674603174603174
User 78919 AUC after training: 0.6634920634920635
User 78919 does not improve AUC. Reverting changes.
Training on augumented user 32742 30/50 current_auc = 0.6674603174603174
User 32742 AUC after training: 0.665079365079365
User 32742 does not improve AUC. Reverting changes.
Training on augumented user 36616 31/50 current_auc = 0.6674603174603174
User 36616 AUC after training: 0.6666666666666666
User 36616 does not improve AUC. Reverting changes.
Training on augumented user 125081 32/50 current_auc = 0.6674603174603174
User 125081 AUC after training: 0.6642857142857143
User 125081 does not improve AUC. Reverting changes.
Training on augumented user 5274 33/50 current_auc = 0.6674603174603174
User 5274 AUC after training: 0.665873015873016
User 5274 does not improve AUC. Reverting changes.
Training on augumented user 22559 34/50 current_auc = 0.6674603174603174
User 22559 AUC after training: 0.665873015873016
User 22559 does not improve AUC. Reverting changes.
Training on augumented user 87357 35/50 current_auc = 0.6674603174603174
User 87357 AUC after training: 0.6650793650793649
User 87357 does not improve AUC. Reverting changes.
Training on augumented user 70786 36/50 current_auc = 0.6674603174603174
User 70786 AUC after training: 0.6634920634920635
User 70786 does not improve AUC. Reverting changes.
Training on augumented user 47891 37/50 current_auc = 0.6674603174603174
User 47891 AUC after training: 0.6650793650793649
User 47891 does not improve AUC. Reverting changes.
Training on augumented user 68226 38/50 current_auc = 0.6674603174603174
User 68226 AUC after training: 0.6642857142857143
User 68226 does not improve AUC. Reverting changes.
Training on augumented user 88369 39/50 current_auc = 0.6674603174603174
User 88369 AUC after training: 0.6642857142857143
User 88369 does not improve AUC. Reverting changes.
Training on augumented user 128276 40/50 current_auc = 0.6674603174603174
User 128276 AUC after training: 0.6658730158730158
User 128276 does not improve AUC. Reverting changes.
Training on augumented user 89234 41/50 current_auc = 0.6674603174603174
User 89234 AUC after training: 0.6658730158730158
User 89234 does not improve AUC. Reverting changes.
Training on augumented user 32734 42/50 current_auc = 0.6674603174603174
User 32734 AUC after training: 0.6650793650793649
User 32734 does not improve AUC. Reverting changes.
Training on augumented user 12510 43/50 current_auc = 0.6674603174603174
User 12510 AUC after training: 0.6658730158730158
User 12510 does not improve AUC. Reverting changes.
Training on augumented user 103454 44/50 current_auc = 0.6674603174603174
User 103454 AUC after training: 0.6642857142857144
User 103454 does not improve AUC. Reverting changes.
Training on augumented user 102899 45/50 current_auc = 0.6674603174603174
User 102899 AUC after training: 0.6658730158730158
User 102899 does not improve AUC. Reverting changes.
Training on augumented user 99434 46/50 current_auc = 0.6674603174603174
User 99434 AUC after training: 0.6626984126984127
User 99434 does not improve AUC. Reverting changes.
Training on augumented user 102827 47/50 current_auc = 0.6674603174603174
User 102827 AUC after training: 0.6595238095238096
User 102827 does not improve AUC. Reverting changes.
Training on augumented user 40210 48/50 current_auc = 0.6674603174603174
User 40210 AUC after training: 0.6642857142857143
User 40210 does not improve AUC. Reverting changes.
Training on augumented user 131261 49/50 current_auc = 0.6674603174603174
User 131261 AUC after training: 0.6563492063492062
User 131261 does not improve AUC. Reverting changes.
[2024-12-02 18:38:08.228062] start test user 98687 109/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:38:08.661632] start test user 98687 109/567 recall augumented users by random, augumented_users = [121443, 73743, 46100, 118943, 32346, 122700, 88731, 80611, 104307, 74674, 124356, 49770, 128105, 112148, 40616, 34046, 42092, 38968, 63002, 66889, 39579, 67503, 119369, 134153, 130566, 123081, 30313, 48207, 6531, 117446, 86829, 98677, 52141, 73677, 66990, 6350, 111161, 63193, 56325, 41543, 47663, 105915, 99216, 101927, 5805, 24956, 103314, 63665, 90946, 126363]
[2024-12-02 18:38:08.678410] user = 98687 Cloud 109/567
[2024-12-02 18:38:08.712291] user = 98687 Local 109/567
[2024-12-02 18:38:08.981518] user = 98687 Local+ 109/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:38:11.523342] user = 98687 MPDA- 109/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6486575704225352
Training on augumented user 121443 0/50 current_auc = 0.6486575704225352
User 121443 AUC after training: 0.6486208920187793
User 121443 does not improve AUC. Reverting changes.
Training on augumented user 73743 1/50 current_auc = 0.6486575704225352
User 73743 AUC after training: 0.6487309272300469
User 73743 improves AUC. Keeping the model.
Training on augumented user 46100 2/50 current_auc = 0.6487309272300469
User 46100 AUC after training: 0.6482907863849765
User 46100 does not improve AUC. Reverting changes.
Training on augumented user 118943 3/50 current_auc = 0.6487309272300469
User 118943 AUC after training: 0.6482907863849766
User 118943 does not improve AUC. Reverting changes.
Training on augumented user 32346 4/50 current_auc = 0.6487309272300469
User 32346 AUC after training: 0.6486208920187793
User 32346 does not improve AUC. Reverting changes.
Training on augumented user 122700 5/50 current_auc = 0.6487309272300469
User 122700 AUC after training: 0.6486208920187793
User 122700 does not improve AUC. Reverting changes.
Training on augumented user 88731 6/50 current_auc = 0.6487309272300469
User 88731 AUC after training: 0.6484008215962442
User 88731 does not improve AUC. Reverting changes.
Training on augumented user 80611 7/50 current_auc = 0.6487309272300469
User 80611 AUC after training: 0.6483641431924881
User 80611 does not improve AUC. Reverting changes.
Training on augumented user 104307 8/50 current_auc = 0.6487309272300469
User 104307 AUC after training: 0.6485475352112675
User 104307 does not improve AUC. Reverting changes.
Training on augumented user 74674 9/50 current_auc = 0.6487309272300469
User 74674 AUC after training: 0.6485475352112676
User 74674 does not improve AUC. Reverting changes.
Training on augumented user 124356 10/50 current_auc = 0.6487309272300469
User 124356 AUC after training: 0.6485108568075116
User 124356 does not improve AUC. Reverting changes.
Training on augumented user 49770 11/50 current_auc = 0.6487309272300469
User 49770 AUC after training: 0.6487676056338028
User 49770 improves AUC. Keeping the model.
Training on augumented user 128105 12/50 current_auc = 0.6487676056338028
User 128105 AUC after training: 0.6487309272300469
User 128105 does not improve AUC. Reverting changes.
Training on augumented user 112148 13/50 current_auc = 0.6487676056338028
User 112148 AUC after training: 0.6483641431924881
User 112148 does not improve AUC. Reverting changes.
Training on augumented user 40616 14/50 current_auc = 0.6487676056338028
User 40616 AUC after training: 0.6483641431924883
User 40616 does not improve AUC. Reverting changes.
Training on augumented user 34046 15/50 current_auc = 0.6487676056338028
User 34046 AUC after training: 0.6487309272300469
User 34046 does not improve AUC. Reverting changes.
Training on augumented user 42092 16/50 current_auc = 0.6487676056338028
User 42092 AUC after training: 0.6486575704225352
User 42092 does not improve AUC. Reverting changes.
Training on augumented user 38968 17/50 current_auc = 0.6487676056338028
User 38968 AUC after training: 0.6487309272300469
User 38968 does not improve AUC. Reverting changes.
Training on augumented user 63002 18/50 current_auc = 0.6487676056338028
User 63002 AUC after training: 0.6488409624413145
User 63002 improves AUC. Keeping the model.
Training on augumented user 66889 19/50 current_auc = 0.6488409624413145
User 66889 AUC after training: 0.648767605633803
User 66889 does not improve AUC. Reverting changes.
Training on augumented user 39579 20/50 current_auc = 0.6488409624413145
User 39579 AUC after training: 0.6496845657276995
User 39579 improves AUC. Keeping the model.
Training on augumented user 67503 21/50 current_auc = 0.6496845657276995
User 67503 AUC after training: 0.6496478873239437
User 67503 does not improve AUC. Reverting changes.
Training on augumented user 119369 22/50 current_auc = 0.6496845657276995
User 119369 AUC after training: 0.6490610328638496
User 119369 does not improve AUC. Reverting changes.
Training on augumented user 134153 23/50 current_auc = 0.6496845657276995
User 134153 AUC after training: 0.6496478873239437
User 134153 does not improve AUC. Reverting changes.
Training on augumented user 130566 24/50 current_auc = 0.6496845657276995
User 130566 AUC after training: 0.6497212441314554
User 130566 improves AUC. Keeping the model.
Training on augumented user 123081 25/50 current_auc = 0.6497212441314554
User 123081 AUC after training: 0.6496112089201878
User 123081 does not improve AUC. Reverting changes.
Training on augumented user 30313 26/50 current_auc = 0.6497212441314554
User 30313 AUC after training: 0.6497579225352113
User 30313 improves AUC. Keeping the model.
Training on augumented user 48207 27/50 current_auc = 0.6497579225352113
User 48207 AUC after training: 0.649519512910798
User 48207 does not improve AUC. Reverting changes.
Training on augumented user 6531 28/50 current_auc = 0.6497579225352113
User 6531 AUC after training: 0.6494644953051643
User 6531 does not improve AUC. Reverting changes.
Training on augumented user 117446 29/50 current_auc = 0.6497579225352113
User 117446 AUC after training: 0.649831279342723
User 117446 improves AUC. Keeping the model.
Training on augumented user 86829 30/50 current_auc = 0.649831279342723
User 86829 AUC after training: 0.6497579225352113
User 86829 does not improve AUC. Reverting changes.
Training on augumented user 98677 31/50 current_auc = 0.649831279342723
User 98677 AUC after training: 0.6499413145539905
User 98677 improves AUC. Keeping the model.
Training on augumented user 52141 32/50 current_auc = 0.6499413145539905
User 52141 AUC after training: 0.6499046361502346
User 52141 does not improve AUC. Reverting changes.
Training on augumented user 73677 33/50 current_auc = 0.6499413145539905
User 73677 AUC after training: 0.6499413145539906
User 73677 improves AUC. Keeping the model.
Training on augumented user 66990 34/50 current_auc = 0.6499413145539906
User 66990 AUC after training: 0.649831279342723
User 66990 does not improve AUC. Reverting changes.
Training on augumented user 6350 35/50 current_auc = 0.6499413145539906
User 6350 AUC after training: 0.6499413145539906
User 6350 does not improve AUC. Reverting changes.
Training on augumented user 111161 36/50 current_auc = 0.6499413145539906
User 111161 AUC after training: 0.649794600938967
User 111161 does not improve AUC. Reverting changes.
Training on augumented user 63193 37/50 current_auc = 0.6499413145539906
User 63193 AUC after training: 0.6497946009389671
User 63193 does not improve AUC. Reverting changes.
Training on augumented user 56325 38/50 current_auc = 0.6499413145539906
User 56325 AUC after training: 0.649794600938967
User 56325 does not improve AUC. Reverting changes.
Training on augumented user 41543 39/50 current_auc = 0.6499413145539906
User 41543 AUC after training: 0.6499779929577464
User 41543 improves AUC. Keeping the model.
Training on augumented user 47663 40/50 current_auc = 0.6499779929577464
User 47663 AUC after training: 0.6497579225352113
User 47663 does not improve AUC. Reverting changes.
Training on augumented user 105915 41/50 current_auc = 0.6499779929577464
User 105915 AUC after training: 0.6499046361502346
User 105915 does not improve AUC. Reverting changes.
Training on augumented user 99216 42/50 current_auc = 0.6499779929577464
User 99216 AUC after training: 0.6496845657276995
User 99216 does not improve AUC. Reverting changes.
Training on augumented user 101927 43/50 current_auc = 0.6499779929577464
User 101927 AUC after training: 0.6499779929577465
User 101927 improves AUC. Keeping the model.
Training on augumented user 5805 44/50 current_auc = 0.6499779929577465
User 5805 AUC after training: 0.649831279342723
User 5805 does not improve AUC. Reverting changes.
Training on augumented user 24956 45/50 current_auc = 0.6499779929577465
User 24956 AUC after training: 0.6499413145539906
User 24956 does not improve AUC. Reverting changes.
Training on augumented user 103314 46/50 current_auc = 0.6499779929577465
User 103314 AUC after training: 0.6497946009389671
User 103314 does not improve AUC. Reverting changes.
Training on augumented user 63665 47/50 current_auc = 0.6499779929577465
User 63665 AUC after training: 0.6499413145539905
User 63665 does not improve AUC. Reverting changes.
Training on augumented user 90946 48/50 current_auc = 0.6499779929577465
User 90946 AUC after training: 0.6496112089201878
User 90946 does not improve AUC. Reverting changes.
Training on augumented user 126363 49/50 current_auc = 0.6499779929577465
User 126363 AUC after training: 0.6499413145539906
User 126363 does not improve AUC. Reverting changes.
[2024-12-02 18:38:41.775198] start test user 98713 110/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:38:42.271266] start test user 98713 110/567 recall augumented users by random, augumented_users = [40126, 257, 36838, 103994, 115525, 21443, 85986, 43891, 94581, 69319, 38457, 24793, 104756, 90329, 105277, 135699, 33946, 7374, 83554, 62042, 51413, 53089, 69886, 62942, 12187, 21388, 17290, 27861, 49921, 97622, 526, 39267, 95470, 25222, 90198, 25418, 74074, 40553, 134649, 88538, 130834, 95580, 57925, 85158, 119273, 135726, 80758, 123857, 19961, 116143]
[2024-12-02 18:38:42.287712] user = 98713 Cloud 110/567
[2024-12-02 18:38:42.297933] user = 98713 Local 110/567
[2024-12-02 18:38:42.366135] user = 98713 Local+ 110/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:38:44.964826] user = 98713 MPDA- 110/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6666666666666667
Training on augumented user 40126 0/50 current_auc = 0.6666666666666667
User 40126 AUC after training: 0.6666666666666667
User 40126 does not improve AUC. Reverting changes.
Training on augumented user 257 1/50 current_auc = 0.6666666666666667
User 257 AUC after training: 0.6666666666666667
User 257 does not improve AUC. Reverting changes.
Training on augumented user 36838 2/50 current_auc = 0.6666666666666667
User 36838 AUC after training: 0.6666666666666667
User 36838 does not improve AUC. Reverting changes.
Training on augumented user 103994 3/50 current_auc = 0.6666666666666667
User 103994 AUC after training: 0.6666666666666667
User 103994 does not improve AUC. Reverting changes.
Training on augumented user 115525 4/50 current_auc = 0.6666666666666667
User 115525 AUC after training: 0.6666666666666667
User 115525 does not improve AUC. Reverting changes.
Training on augumented user 21443 5/50 current_auc = 0.6666666666666667
User 21443 AUC after training: 0.6333333333333333
User 21443 does not improve AUC. Reverting changes.
Training on augumented user 85986 6/50 current_auc = 0.6666666666666667
User 85986 AUC after training: 0.6333333333333333
User 85986 does not improve AUC. Reverting changes.
Training on augumented user 43891 7/50 current_auc = 0.6666666666666667
User 43891 AUC after training: 0.6666666666666667
User 43891 does not improve AUC. Reverting changes.
Training on augumented user 94581 8/50 current_auc = 0.6666666666666667
User 94581 AUC after training: 0.6666666666666667
User 94581 does not improve AUC. Reverting changes.
Training on augumented user 69319 9/50 current_auc = 0.6666666666666667
User 69319 AUC after training: 0.6666666666666667
User 69319 does not improve AUC. Reverting changes.
Training on augumented user 38457 10/50 current_auc = 0.6666666666666667
User 38457 AUC after training: 0.6666666666666667
User 38457 does not improve AUC. Reverting changes.
Training on augumented user 24793 11/50 current_auc = 0.6666666666666667
User 24793 AUC after training: 0.6666666666666667
User 24793 does not improve AUC. Reverting changes.
Training on augumented user 104756 12/50 current_auc = 0.6666666666666667
User 104756 AUC after training: 0.6666666666666667
User 104756 does not improve AUC. Reverting changes.
Training on augumented user 90329 13/50 current_auc = 0.6666666666666667
User 90329 AUC after training: 0.6666666666666667
User 90329 does not improve AUC. Reverting changes.
Training on augumented user 105277 14/50 current_auc = 0.6666666666666667
User 105277 AUC after training: 0.6666666666666667
User 105277 does not improve AUC. Reverting changes.
Training on augumented user 135699 15/50 current_auc = 0.6666666666666667
User 135699 AUC after training: 0.6333333333333333
User 135699 does not improve AUC. Reverting changes.
Training on augumented user 33946 16/50 current_auc = 0.6666666666666667
User 33946 AUC after training: 0.6666666666666667
User 33946 does not improve AUC. Reverting changes.
Training on augumented user 7374 17/50 current_auc = 0.6666666666666667
User 7374 AUC after training: 0.6666666666666667
User 7374 does not improve AUC. Reverting changes.
Training on augumented user 83554 18/50 current_auc = 0.6666666666666667
User 83554 AUC after training: 0.6333333333333333
User 83554 does not improve AUC. Reverting changes.
Training on augumented user 62042 19/50 current_auc = 0.6666666666666667
User 62042 AUC after training: 0.6666666666666667
User 62042 does not improve AUC. Reverting changes.
Training on augumented user 51413 20/50 current_auc = 0.6666666666666667
User 51413 AUC after training: 0.6666666666666667
User 51413 does not improve AUC. Reverting changes.
Training on augumented user 53089 21/50 current_auc = 0.6666666666666667
User 53089 AUC after training: 0.6333333333333333
User 53089 does not improve AUC. Reverting changes.
Training on augumented user 69886 22/50 current_auc = 0.6666666666666667
User 69886 AUC after training: 0.6333333333333333
User 69886 does not improve AUC. Reverting changes.
Training on augumented user 62942 23/50 current_auc = 0.6666666666666667
User 62942 AUC after training: 0.6666666666666667
User 62942 does not improve AUC. Reverting changes.
Training on augumented user 12187 24/50 current_auc = 0.6666666666666667
User 12187 AUC after training: 0.6666666666666667
User 12187 does not improve AUC. Reverting changes.
Training on augumented user 21388 25/50 current_auc = 0.6666666666666667
User 21388 AUC after training: 0.6666666666666667
User 21388 does not improve AUC. Reverting changes.
Training on augumented user 17290 26/50 current_auc = 0.6666666666666667
User 17290 AUC after training: 0.6666666666666667
User 17290 does not improve AUC. Reverting changes.
Training on augumented user 27861 27/50 current_auc = 0.6666666666666667
User 27861 AUC after training: 0.6333333333333333
User 27861 does not improve AUC. Reverting changes.
Training on augumented user 49921 28/50 current_auc = 0.6666666666666667
User 49921 AUC after training: 0.6666666666666667
User 49921 does not improve AUC. Reverting changes.
Training on augumented user 97622 29/50 current_auc = 0.6666666666666667
User 97622 AUC after training: 0.6666666666666667
User 97622 does not improve AUC. Reverting changes.
Training on augumented user 526 30/50 current_auc = 0.6666666666666667
User 526 AUC after training: 0.6666666666666667
User 526 does not improve AUC. Reverting changes.
Training on augumented user 39267 31/50 current_auc = 0.6666666666666667
User 39267 AUC after training: 0.6666666666666667
User 39267 does not improve AUC. Reverting changes.
Training on augumented user 95470 32/50 current_auc = 0.6666666666666667
User 95470 AUC after training: 0.6333333333333333
User 95470 does not improve AUC. Reverting changes.
Training on augumented user 25222 33/50 current_auc = 0.6666666666666667
User 25222 AUC after training: 0.6666666666666667
User 25222 does not improve AUC. Reverting changes.
Training on augumented user 90198 34/50 current_auc = 0.6666666666666667
User 90198 AUC after training: 0.6333333333333333
User 90198 does not improve AUC. Reverting changes.
Training on augumented user 25418 35/50 current_auc = 0.6666666666666667
User 25418 AUC after training: 0.6666666666666667
User 25418 does not improve AUC. Reverting changes.
Training on augumented user 74074 36/50 current_auc = 0.6666666666666667
User 74074 AUC after training: 0.6666666666666667
User 74074 does not improve AUC. Reverting changes.
Training on augumented user 40553 37/50 current_auc = 0.6666666666666667
User 40553 AUC after training: 0.6666666666666667
User 40553 does not improve AUC. Reverting changes.
Training on augumented user 134649 38/50 current_auc = 0.6666666666666667
User 134649 AUC after training: 0.6666666666666667
User 134649 does not improve AUC. Reverting changes.
Training on augumented user 88538 39/50 current_auc = 0.6666666666666667
User 88538 AUC after training: 0.6666666666666667
User 88538 does not improve AUC. Reverting changes.
Training on augumented user 130834 40/50 current_auc = 0.6666666666666667
User 130834 AUC after training: 0.6333333333333333
User 130834 does not improve AUC. Reverting changes.
Training on augumented user 95580 41/50 current_auc = 0.6666666666666667
User 95580 AUC after training: 0.6666666666666667
User 95580 does not improve AUC. Reverting changes.
Training on augumented user 57925 42/50 current_auc = 0.6666666666666667
User 57925 AUC after training: 0.6666666666666667
User 57925 does not improve AUC. Reverting changes.
Training on augumented user 85158 43/50 current_auc = 0.6666666666666667
User 85158 AUC after training: 0.6666666666666667
User 85158 does not improve AUC. Reverting changes.
Training on augumented user 119273 44/50 current_auc = 0.6666666666666667
User 119273 AUC after training: 0.6333333333333333
User 119273 does not improve AUC. Reverting changes.
Training on augumented user 135726 45/50 current_auc = 0.6666666666666667
User 135726 AUC after training: 0.6666666666666667
User 135726 does not improve AUC. Reverting changes.
Training on augumented user 80758 46/50 current_auc = 0.6666666666666667
User 80758 AUC after training: 0.6666666666666667
User 80758 does not improve AUC. Reverting changes.
Training on augumented user 123857 47/50 current_auc = 0.6666666666666667
User 123857 AUC after training: 0.6666666666666667
User 123857 does not improve AUC. Reverting changes.
Training on augumented user 19961 48/50 current_auc = 0.6666666666666667
User 19961 AUC after training: 0.6333333333333333
User 19961 does not improve AUC. Reverting changes.
Training on augumented user 116143 49/50 current_auc = 0.6666666666666667
User 116143 AUC after training: 0.6666666666666667
User 116143 does not improve AUC. Reverting changes.
[2024-12-02 18:39:15.471731] start test user 98758 111/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:39:15.901744] start test user 98758 111/567 recall augumented users by random, augumented_users = [129088, 128852, 28934, 31393, 67670, 103813, 8136, 50911, 117613, 92826, 71974, 35952, 90452, 120923, 34854, 56735, 90552, 38544, 57979, 21548, 23561, 44059, 104549, 102734, 13456, 126470, 119321, 117529, 56428, 3047, 26578, 78361, 96762, 2890, 1956, 22382, 7737, 72151, 112381, 37309, 121953, 89600, 116958, 47977, 76924, 86863, 137905, 82252, 135950, 57270]
[2024-12-02 18:39:15.917562] user = 98758 Cloud 111/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:39:15.924879] user = 98758 Local 111/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:39:16.063364] user = 98758 Local+ 111/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:39:18.321942] user = 98758 MPDA- 111/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 129088 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129088 AUC after training: 0.5
User 129088 does not improve AUC. Reverting changes.
Training on augumented user 128852 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128852 AUC after training: 0.5
User 128852 does not improve AUC. Reverting changes.
Training on augumented user 28934 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28934 AUC after training: 0.5
User 28934 does not improve AUC. Reverting changes.
Training on augumented user 31393 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 31393 AUC after training: 0.5
User 31393 does not improve AUC. Reverting changes.
Training on augumented user 67670 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67670 AUC after training: 0.5
User 67670 does not improve AUC. Reverting changes.
Training on augumented user 103813 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103813 AUC after training: 0.5
User 103813 does not improve AUC. Reverting changes.
Training on augumented user 8136 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8136 AUC after training: 0.5
User 8136 does not improve AUC. Reverting changes.
Training on augumented user 50911 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50911 AUC after training: 0.5
User 50911 does not improve AUC. Reverting changes.
Training on augumented user 117613 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117613 AUC after training: 0.5
User 117613 does not improve AUC. Reverting changes.
Training on augumented user 92826 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92826 AUC after training: 0.5
User 92826 does not improve AUC. Reverting changes.
Training on augumented user 71974 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71974 AUC after training: 0.5
User 71974 does not improve AUC. Reverting changes.
Training on augumented user 35952 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35952 AUC after training: 0.5
User 35952 does not improve AUC. Reverting changes.
Training on augumented user 90452 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90452 AUC after training: 0.5
User 90452 does not improve AUC. Reverting changes.
Training on augumented user 120923 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120923 AUC after training: 0.5
User 120923 does not improve AUC. Reverting changes.
Training on augumented user 34854 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 34854 AUC after training: 0.5
User 34854 does not improve AUC. Reverting changes.
Training on augumented user 56735 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56735 AUC after training: 0.5
User 56735 does not improve AUC. Reverting changes.
Training on augumented user 90552 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90552 AUC after training: 0.5
User 90552 does not improve AUC. Reverting changes.
Training on augumented user 38544 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38544 AUC after training: 0.5
User 38544 does not improve AUC. Reverting changes.
Training on augumented user 57979 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57979 AUC after training: 0.5
User 57979 does not improve AUC. Reverting changes.
Training on augumented user 21548 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21548 AUC after training: 0.5
User 21548 does not improve AUC. Reverting changes.
Training on augumented user 23561 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23561 AUC after training: 0.5
User 23561 does not improve AUC. Reverting changes.
Training on augumented user 44059 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44059 AUC after training: 0.5
User 44059 does not improve AUC. Reverting changes.
Training on augumented user 104549 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104549 AUC after training: 0.5
User 104549 does not improve AUC. Reverting changes.
Training on augumented user 102734 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102734 AUC after training: 0.5
User 102734 does not improve AUC. Reverting changes.
Training on augumented user 13456 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13456 AUC after training: 0.5
User 13456 does not improve AUC. Reverting changes.
Training on augumented user 126470 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126470 AUC after training: 0.5
User 126470 does not improve AUC. Reverting changes.
Training on augumented user 119321 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 119321 AUC after training: 0.5
User 119321 does not improve AUC. Reverting changes.
Training on augumented user 117529 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117529 AUC after training: 0.5
User 117529 does not improve AUC. Reverting changes.
Training on augumented user 56428 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56428 AUC after training: 0.5
User 56428 does not improve AUC. Reverting changes.
Training on augumented user 3047 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3047 AUC after training: 0.5
User 3047 does not improve AUC. Reverting changes.
Training on augumented user 26578 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26578 AUC after training: 0.5
User 26578 does not improve AUC. Reverting changes.
Training on augumented user 78361 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 78361 AUC after training: 0.5
User 78361 does not improve AUC. Reverting changes.
Training on augumented user 96762 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96762 AUC after training: 0.5
User 96762 does not improve AUC. Reverting changes.
Training on augumented user 2890 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2890 AUC after training: 0.5
User 2890 does not improve AUC. Reverting changes.
Training on augumented user 1956 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1956 AUC after training: 0.5
User 1956 does not improve AUC. Reverting changes.
Training on augumented user 22382 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22382 AUC after training: 0.5
User 22382 does not improve AUC. Reverting changes.
Training on augumented user 7737 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7737 AUC after training: 0.5
User 7737 does not improve AUC. Reverting changes.
Training on augumented user 72151 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72151 AUC after training: 0.5
User 72151 does not improve AUC. Reverting changes.
Training on augumented user 112381 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112381 AUC after training: 0.5
User 112381 does not improve AUC. Reverting changes.
Training on augumented user 37309 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37309 AUC after training: 0.5
User 37309 does not improve AUC. Reverting changes.
Training on augumented user 121953 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121953 AUC after training: 0.5
User 121953 does not improve AUC. Reverting changes.
Training on augumented user 89600 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89600 AUC after training: 0.5
User 89600 does not improve AUC. Reverting changes.
Training on augumented user 116958 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116958 AUC after training: 0.5
User 116958 does not improve AUC. Reverting changes.
Training on augumented user 47977 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47977 AUC after training: 0.5
User 47977 does not improve AUC. Reverting changes.
Training on augumented user 76924 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76924 AUC after training: 0.5
User 76924 does not improve AUC. Reverting changes.
Training on augumented user 86863 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86863 AUC after training: 0.5
User 86863 does not improve AUC. Reverting changes.
Training on augumented user 137905 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137905 AUC after training: 0.5
User 137905 does not improve AUC. Reverting changes.
Training on augumented user 82252 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82252 AUC after training: 0.5
User 82252 does not improve AUC. Reverting changes.
Training on augumented user 135950 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 135950 AUC after training: 0.5
User 135950 does not improve AUC. Reverting changes.
Training on augumented user 57270 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57270 AUC after training: 0.5
User 57270 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:39:45.032126] start test user 98781 112/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:39:45.451174] start test user 98781 112/567 recall augumented users by random, augumented_users = [112521, 42745, 88989, 41345, 132592, 100966, 75041, 26939, 84384, 72693, 126059, 128759, 37816, 127539, 84435, 37482, 126884, 69094, 135292, 22531, 80195, 134060, 1431, 61316, 8788, 14057, 133658, 34541, 102786, 114128, 82400, 98198, 19607, 52681, 76438, 84130, 88318, 80667, 99097, 1938, 122683, 40457, 58778, 77228, 36573, 5410, 82727, 83562, 52357, 10998]
[2024-12-02 18:39:45.466391] user = 98781 Cloud 112/567
[2024-12-02 18:39:45.496219] user = 98781 Local 112/567
[2024-12-02 18:39:45.567102] user = 98781 Local+ 112/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:39:48.535585] user = 98781 MPDA- 112/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4850489336606203
Training on augumented user 112521 0/50 current_auc = 0.4850489336606203
User 112521 AUC after training: 0.482817431221907
User 112521 does not improve AUC. Reverting changes.
Training on augumented user 42745 1/50 current_auc = 0.4850489336606203
User 42745 AUC after training: 0.48536771972329373
User 42745 improves AUC. Keeping the model.
Training on augumented user 88989 2/50 current_auc = 0.48536771972329373
User 88989 AUC after training: 0.4851764480856897
User 88989 does not improve AUC. Reverting changes.
Training on augumented user 41345 3/50 current_auc = 0.48536771972329373
User 41345 AUC after training: 0.48581402021103637
User 41345 improves AUC. Keeping the model.
Training on augumented user 132592 4/50 current_auc = 0.48581402021103637
User 132592 AUC after training: 0.48552711275463034
User 132592 does not improve AUC. Reverting changes.
Training on augumented user 100966 5/50 current_auc = 0.48581402021103637
User 100966 AUC after training: 0.48603717045490774
User 100966 improves AUC. Keeping the model.
Training on augumented user 75041 6/50 current_auc = 0.48603717045490774
User 75041 AUC after training: 0.4865472281551851
User 75041 improves AUC. Keeping the model.
Training on augumented user 26939 7/50 current_auc = 0.4865472281551851
User 26939 AUC after training: 0.4854633555420957
User 26939 does not improve AUC. Reverting changes.
Training on augumented user 84384 8/50 current_auc = 0.4865472281551851
User 84384 AUC after training: 0.48648347094265043
User 84384 does not improve AUC. Reverting changes.
Training on augumented user 72693 9/50 current_auc = 0.4865472281551851
User 72693 AUC after training: 0.4872166788867991
User 72693 improves AUC. Keeping the model.
Training on augumented user 126059 10/50 current_auc = 0.4872166788867991
User 126059 AUC after training: 0.48664286397398704
User 126059 does not improve AUC. Reverting changes.
Training on augumented user 128759 11/50 current_auc = 0.4872166788867991
User 128759 AUC after training: 0.4867066211865217
User 128759 does not improve AUC. Reverting changes.
Training on augumented user 37816 12/50 current_auc = 0.4872166788867991
User 37816 AUC after training: 0.4872804360993337
User 37816 improves AUC. Keeping the model.
Training on augumented user 127539 13/50 current_auc = 0.4872804360993337
User 127539 AUC after training: 0.48686601421785836
User 127539 does not improve AUC. Reverting changes.
Training on augumented user 84435 14/50 current_auc = 0.4872804360993337
User 84435 AUC after training: 0.48686601421785836
User 84435 does not improve AUC. Reverting changes.
Training on augumented user 37482 15/50 current_auc = 0.4872804360993337
User 37482 AUC after training: 0.48667474258025445
User 37482 does not improve AUC. Reverting changes.
Training on augumented user 126884 16/50 current_auc = 0.4872804360993337
User 126884 AUC after training: 0.48734419331186846
User 126884 improves AUC. Keeping the model.
Training on augumented user 69094 17/50 current_auc = 0.48734419331186846
User 69094 AUC after training: 0.4865472281551851
User 69094 does not improve AUC. Reverting changes.
Training on augumented user 135292 18/50 current_auc = 0.48734419331186846
User 135292 AUC after training: 0.48677037839905635
User 135292 does not improve AUC. Reverting changes.
Training on augumented user 22531 19/50 current_auc = 0.48734419331186846
User 22531 AUC after training: 0.4871529216742644
User 22531 does not improve AUC. Reverting changes.
Training on augumented user 80195 20/50 current_auc = 0.48734419331186846
User 80195 AUC after training: 0.486260320698779
User 80195 does not improve AUC. Reverting changes.
Training on augumented user 134060 21/50 current_auc = 0.48734419331186846
User 134060 AUC after training: 0.4869935286429278
User 134060 does not improve AUC. Reverting changes.
Training on augumented user 1431 22/50 current_auc = 0.48734419331186846
User 1431 AUC after training: 0.4873441933118684
User 1431 does not improve AUC. Reverting changes.
Training on augumented user 61316 23/50 current_auc = 0.48734419331186846
User 61316 AUC after training: 0.4874079505244031
User 61316 improves AUC. Keeping the model.
Training on augumented user 8788 24/50 current_auc = 0.4874079505244031
User 8788 AUC after training: 0.48852370174375975
User 8788 improves AUC. Keeping the model.
Training on augumented user 14057 25/50 current_auc = 0.48852370174375975
User 14057 AUC after training: 0.48932066690044307
User 14057 improves AUC. Keeping the model.
Training on augumented user 133658 26/50 current_auc = 0.48932066690044307
User 133658 AUC after training: 0.4895756957505818
User 133658 improves AUC. Keeping the model.
Training on augumented user 34541 27/50 current_auc = 0.4895756957505818
User 34541 AUC after training: 0.4881730370748191
User 34541 does not improve AUC. Reverting changes.
Training on augumented user 102786 28/50 current_auc = 0.4895756957505818
User 102786 AUC after training: 0.49043641811979977
User 102786 improves AUC. Keeping the model.
Training on augumented user 114128 29/50 current_auc = 0.49043641811979977
User 114128 AUC after training: 0.48785425101214575
User 114128 does not improve AUC. Reverting changes.
Training on augumented user 82400 30/50 current_auc = 0.49043641811979977
User 82400 AUC after training: 0.48785425101214575
User 82400 does not improve AUC. Reverting changes.
Training on augumented user 98198 31/50 current_auc = 0.49043641811979977
User 98198 AUC after training: 0.4904364181197997
User 98198 does not improve AUC. Reverting changes.
Training on augumented user 19607 32/50 current_auc = 0.49043641811979977
User 19607 AUC after training: 0.4893525455067104
User 19607 does not improve AUC. Reverting changes.
Training on augumented user 52681 33/50 current_auc = 0.49043641811979977
User 52681 AUC after training: 0.48820491568108637
User 52681 does not improve AUC. Reverting changes.
Training on augumented user 76438 34/50 current_auc = 0.49043641811979977
User 76438 AUC after training: 0.4909624151232108
User 76438 improves AUC. Keeping the model.
Training on augumented user 84130 35/50 current_auc = 0.4909624151232108
User 84130 AUC after training: 0.4910102330326118
User 84130 improves AUC. Keeping the model.
Training on augumented user 88318 36/50 current_auc = 0.4910102330326118
User 88318 AUC after training: 0.49030890369473046
User 88318 does not improve AUC. Reverting changes.
Training on augumented user 80667 37/50 current_auc = 0.4910102330326118
User 80667 AUC after training: 0.4922534986770378
User 80667 improves AUC. Keeping the model.
Training on augumented user 99097 38/50 current_auc = 0.4922534986770378
User 99097 AUC after training: 0.49075520418247315
User 99097 does not improve AUC. Reverting changes.
Training on augumented user 1938 39/50 current_auc = 0.4922534986770378
User 1938 AUC after training: 0.4920622270394338
User 1938 does not improve AUC. Reverting changes.
Training on augumented user 122683 40/50 current_auc = 0.4922534986770378
User 122683 AUC after training: 0.4895278778411807
User 122683 does not improve AUC. Reverting changes.
Training on augumented user 40457 41/50 current_auc = 0.4922534986770378
User 40457 AUC after training: 0.49234913449583984
User 40457 improves AUC. Keeping the model.
Training on augumented user 58778 42/50 current_auc = 0.49234913449583984
User 58778 AUC after training: 0.4906755076668048
User 58778 does not improve AUC. Reverting changes.
Training on augumented user 77228 43/50 current_auc = 0.49234913449583984
User 77228 AUC after training: 0.4927476170741815
User 77228 improves AUC. Keeping the model.
Training on augumented user 36573 44/50 current_auc = 0.4927476170741815
User 36573 AUC after training: 0.49332143198699346
User 36573 improves AUC. Keeping the model.
Training on augumented user 5410 45/50 current_auc = 0.49332143198699346
User 5410 AUC after training: 0.4930664031368548
User 5410 does not improve AUC. Reverting changes.
Training on augumented user 82727 46/50 current_auc = 0.49332143198699346
User 82727 AUC after training: 0.49357646083713214
User 82727 improves AUC. Keeping the model.
Training on augumented user 83562 47/50 current_auc = 0.49357646083713214
User 83562 AUC after training: 0.49316203895565686
User 83562 does not improve AUC. Reverting changes.
Training on augumented user 52357 48/50 current_auc = 0.49357646083713214
User 52357 AUC after training: 0.4924925882240429
User 52357 does not improve AUC. Reverting changes.
Training on augumented user 10998 49/50 current_auc = 0.49357646083713214
User 10998 AUC after training: 0.49354458223086484
User 10998 does not improve AUC. Reverting changes.
[2024-12-02 18:40:23.439558] start test user 98782 113/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:40:24.284122] start test user 98782 113/567 recall augumented users by random, augumented_users = [20925, 66465, 67213, 105759, 116299, 114654, 129226, 83068, 57831, 17129, 28931, 109877, 40665, 134016, 111981, 28016, 86439, 137387, 23682, 125571, 5552, 60501, 93598, 55497, 59333, 97617, 8668, 90774, 127408, 5052, 17858, 72079, 30334, 98069, 61103, 28490, 53311, 96420, 80108, 100800, 122922, 59273, 130276, 49992, 14509, 83174, 43785, 116101, 34404, 62018]
[2024-12-02 18:40:24.312321] user = 98782 Cloud 113/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:40:24.326078] user = 98782 Local 113/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:40:24.411088] user = 98782 Local+ 113/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:40:27.218472] user = 98782 MPDA- 113/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 20925 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20925 AUC after training: 0.5
User 20925 does not improve AUC. Reverting changes.
Training on augumented user 66465 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66465 AUC after training: 0.5
User 66465 does not improve AUC. Reverting changes.
Training on augumented user 67213 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67213 AUC after training: 0.5
User 67213 does not improve AUC. Reverting changes.
Training on augumented user 105759 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105759 AUC after training: 0.5
User 105759 does not improve AUC. Reverting changes.
Training on augumented user 116299 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116299 AUC after training: 0.5
User 116299 does not improve AUC. Reverting changes.
Training on augumented user 114654 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114654 AUC after training: 0.5
User 114654 does not improve AUC. Reverting changes.
Training on augumented user 129226 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129226 AUC after training: 0.5
User 129226 does not improve AUC. Reverting changes.
Training on augumented user 83068 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83068 AUC after training: 0.5
User 83068 does not improve AUC. Reverting changes.
Training on augumented user 57831 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57831 AUC after training: 0.5
User 57831 does not improve AUC. Reverting changes.
Training on augumented user 17129 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 17129 AUC after training: 0.5
User 17129 does not improve AUC. Reverting changes.
Training on augumented user 28931 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28931 AUC after training: 0.5
User 28931 does not improve AUC. Reverting changes.
Training on augumented user 109877 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109877 AUC after training: 0.5
User 109877 does not improve AUC. Reverting changes.
Training on augumented user 40665 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40665 AUC after training: 0.5
User 40665 does not improve AUC. Reverting changes.
Training on augumented user 134016 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134016 AUC after training: 0.5
User 134016 does not improve AUC. Reverting changes.
Training on augumented user 111981 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111981 AUC after training: 0.5
User 111981 does not improve AUC. Reverting changes.
Training on augumented user 28016 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28016 AUC after training: 0.5
User 28016 does not improve AUC. Reverting changes.
Training on augumented user 86439 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86439 AUC after training: 0.5
User 86439 does not improve AUC. Reverting changes.
Training on augumented user 137387 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137387 AUC after training: 0.5
User 137387 does not improve AUC. Reverting changes.
Training on augumented user 23682 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23682 AUC after training: 0.5
User 23682 does not improve AUC. Reverting changes.
Training on augumented user 125571 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 125571 AUC after training: 0.5
User 125571 does not improve AUC. Reverting changes.
Training on augumented user 5552 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5552 AUC after training: 0.5
User 5552 does not improve AUC. Reverting changes.
Training on augumented user 60501 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60501 AUC after training: 0.5
User 60501 does not improve AUC. Reverting changes.
Training on augumented user 93598 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93598 AUC after training: 0.5
User 93598 does not improve AUC. Reverting changes.
Training on augumented user 55497 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55497 AUC after training: 0.5
User 55497 does not improve AUC. Reverting changes.
Training on augumented user 59333 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59333 AUC after training: 0.5
User 59333 does not improve AUC. Reverting changes.
Training on augumented user 97617 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97617 AUC after training: 0.5
User 97617 does not improve AUC. Reverting changes.
Training on augumented user 8668 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8668 AUC after training: 0.5
User 8668 does not improve AUC. Reverting changes.
Training on augumented user 90774 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90774 AUC after training: 0.5
User 90774 does not improve AUC. Reverting changes.
Training on augumented user 127408 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127408 AUC after training: 0.5
User 127408 does not improve AUC. Reverting changes.
Training on augumented user 5052 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5052 AUC after training: 0.5
User 5052 does not improve AUC. Reverting changes.
Training on augumented user 17858 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 17858 AUC after training: 0.5
User 17858 does not improve AUC. Reverting changes.
Training on augumented user 72079 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72079 AUC after training: 0.5
User 72079 does not improve AUC. Reverting changes.
Training on augumented user 30334 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30334 AUC after training: 0.5
User 30334 does not improve AUC. Reverting changes.
Training on augumented user 98069 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98069 AUC after training: 0.5
User 98069 does not improve AUC. Reverting changes.
Training on augumented user 61103 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61103 AUC after training: 0.5
User 61103 does not improve AUC. Reverting changes.
Training on augumented user 28490 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28490 AUC after training: 0.5
User 28490 does not improve AUC. Reverting changes.
Training on augumented user 53311 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53311 AUC after training: 0.5
User 53311 does not improve AUC. Reverting changes.
Training on augumented user 96420 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96420 AUC after training: 0.5
User 96420 does not improve AUC. Reverting changes.
Training on augumented user 80108 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80108 AUC after training: 0.5
User 80108 does not improve AUC. Reverting changes.
Training on augumented user 100800 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100800 AUC after training: 0.5
User 100800 does not improve AUC. Reverting changes.
Training on augumented user 122922 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122922 AUC after training: 0.5
User 122922 does not improve AUC. Reverting changes.
Training on augumented user 59273 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59273 AUC after training: 0.5
User 59273 does not improve AUC. Reverting changes.
Training on augumented user 130276 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130276 AUC after training: 0.5
User 130276 does not improve AUC. Reverting changes.
Training on augumented user 49992 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49992 AUC after training: 0.5
User 49992 does not improve AUC. Reverting changes.
Training on augumented user 14509 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14509 AUC after training: 0.5
User 14509 does not improve AUC. Reverting changes.
Training on augumented user 83174 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83174 AUC after training: 0.5
User 83174 does not improve AUC. Reverting changes.
Training on augumented user 43785 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43785 AUC after training: 0.5
User 43785 does not improve AUC. Reverting changes.
Training on augumented user 116101 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116101 AUC after training: 0.5
User 116101 does not improve AUC. Reverting changes.
Training on augumented user 34404 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 34404 AUC after training: 0.5
User 34404 does not improve AUC. Reverting changes.
Training on augumented user 62018 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62018 AUC after training: 0.5
User 62018 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:40:57.329391] start test user 98788 114/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:40:57.778997] start test user 98788 114/567 recall augumented users by random, augumented_users = [50518, 43296, 43946, 94123, 128005, 35241, 35788, 92310, 8687, 81067, 129164, 19983, 114834, 93427, 31876, 28256, 96430, 135476, 78232, 2893, 77549, 105644, 85877, 54345, 133830, 104899, 80794, 5270, 58606, 99846, 79049, 125533, 24299, 58294, 60401, 60147, 118112, 53237, 106932, 99598, 35038, 11125, 98423, 44014, 98231, 43858, 76792, 90639, 93103, 14279]
[2024-12-02 18:40:57.793931] user = 98788 Cloud 114/567
[2024-12-02 18:40:57.804252] user = 98788 Local 114/567
[2024-12-02 18:40:57.824770] user = 98788 Local+ 114/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:41:00.327790] user = 98788 MPDA- 114/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.375
Training on augumented user 50518 0/50 current_auc = 0.375
User 50518 AUC after training: 0.375
User 50518 does not improve AUC. Reverting changes.
Training on augumented user 43296 1/50 current_auc = 0.375
User 43296 AUC after training: 0.375
User 43296 does not improve AUC. Reverting changes.
Training on augumented user 43946 2/50 current_auc = 0.375
User 43946 AUC after training: 0.375
User 43946 does not improve AUC. Reverting changes.
Training on augumented user 94123 3/50 current_auc = 0.375
User 94123 AUC after training: 0.375
User 94123 does not improve AUC. Reverting changes.
Training on augumented user 128005 4/50 current_auc = 0.375
User 128005 AUC after training: 0.375
User 128005 does not improve AUC. Reverting changes.
Training on augumented user 35241 5/50 current_auc = 0.375
User 35241 AUC after training: 0.375
User 35241 does not improve AUC. Reverting changes.
Training on augumented user 35788 6/50 current_auc = 0.375
User 35788 AUC after training: 0.375
User 35788 does not improve AUC. Reverting changes.
Training on augumented user 92310 7/50 current_auc = 0.375
User 92310 AUC after training: 0.375
User 92310 does not improve AUC. Reverting changes.
Training on augumented user 8687 8/50 current_auc = 0.375
User 8687 AUC after training: 0.375
User 8687 does not improve AUC. Reverting changes.
Training on augumented user 81067 9/50 current_auc = 0.375
User 81067 AUC after training: 0.375
User 81067 does not improve AUC. Reverting changes.
Training on augumented user 129164 10/50 current_auc = 0.375
User 129164 AUC after training: 0.375
User 129164 does not improve AUC. Reverting changes.
Training on augumented user 19983 11/50 current_auc = 0.375
User 19983 AUC after training: 0.375
User 19983 does not improve AUC. Reverting changes.
Training on augumented user 114834 12/50 current_auc = 0.375
User 114834 AUC after training: 0.375
User 114834 does not improve AUC. Reverting changes.
Training on augumented user 93427 13/50 current_auc = 0.375
User 93427 AUC after training: 0.375
User 93427 does not improve AUC. Reverting changes.
Training on augumented user 31876 14/50 current_auc = 0.375
User 31876 AUC after training: 0.375
User 31876 does not improve AUC. Reverting changes.
Training on augumented user 28256 15/50 current_auc = 0.375
User 28256 AUC after training: 0.375
User 28256 does not improve AUC. Reverting changes.
Training on augumented user 96430 16/50 current_auc = 0.375
User 96430 AUC after training: 0.375
User 96430 does not improve AUC. Reverting changes.
Training on augumented user 135476 17/50 current_auc = 0.375
User 135476 AUC after training: 0.375
User 135476 does not improve AUC. Reverting changes.
Training on augumented user 78232 18/50 current_auc = 0.375
User 78232 AUC after training: 0.375
User 78232 does not improve AUC. Reverting changes.
Training on augumented user 2893 19/50 current_auc = 0.375
User 2893 AUC after training: 0.375
User 2893 does not improve AUC. Reverting changes.
Training on augumented user 77549 20/50 current_auc = 0.375
User 77549 AUC after training: 0.375
User 77549 does not improve AUC. Reverting changes.
Training on augumented user 105644 21/50 current_auc = 0.375
User 105644 AUC after training: 0.375
User 105644 does not improve AUC. Reverting changes.
Training on augumented user 85877 22/50 current_auc = 0.375
User 85877 AUC after training: 0.375
User 85877 does not improve AUC. Reverting changes.
Training on augumented user 54345 23/50 current_auc = 0.375
User 54345 AUC after training: 0.375
User 54345 does not improve AUC. Reverting changes.
Training on augumented user 133830 24/50 current_auc = 0.375
User 133830 AUC after training: 0.375
User 133830 does not improve AUC. Reverting changes.
Training on augumented user 104899 25/50 current_auc = 0.375
User 104899 AUC after training: 0.375
User 104899 does not improve AUC. Reverting changes.
Training on augumented user 80794 26/50 current_auc = 0.375
User 80794 AUC after training: 0.4
User 80794 improves AUC. Keeping the model.
Training on augumented user 5270 27/50 current_auc = 0.4
User 5270 AUC after training: 0.4
User 5270 does not improve AUC. Reverting changes.
Training on augumented user 58606 28/50 current_auc = 0.4
User 58606 AUC after training: 0.375
User 58606 does not improve AUC. Reverting changes.
Training on augumented user 99846 29/50 current_auc = 0.4
User 99846 AUC after training: 0.4
User 99846 does not improve AUC. Reverting changes.
Training on augumented user 79049 30/50 current_auc = 0.4
User 79049 AUC after training: 0.4
User 79049 does not improve AUC. Reverting changes.
Training on augumented user 125533 31/50 current_auc = 0.4
User 125533 AUC after training: 0.4
User 125533 does not improve AUC. Reverting changes.
Training on augumented user 24299 32/50 current_auc = 0.4
User 24299 AUC after training: 0.4
User 24299 does not improve AUC. Reverting changes.
Training on augumented user 58294 33/50 current_auc = 0.4
User 58294 AUC after training: 0.4
User 58294 does not improve AUC. Reverting changes.
Training on augumented user 60401 34/50 current_auc = 0.4
User 60401 AUC after training: 0.4
User 60401 does not improve AUC. Reverting changes.
Training on augumented user 60147 35/50 current_auc = 0.4
User 60147 AUC after training: 0.4
User 60147 does not improve AUC. Reverting changes.
Training on augumented user 118112 36/50 current_auc = 0.4
User 118112 AUC after training: 0.375
User 118112 does not improve AUC. Reverting changes.
Training on augumented user 53237 37/50 current_auc = 0.4
User 53237 AUC after training: 0.4
User 53237 does not improve AUC. Reverting changes.
Training on augumented user 106932 38/50 current_auc = 0.4
User 106932 AUC after training: 0.4
User 106932 does not improve AUC. Reverting changes.
Training on augumented user 99598 39/50 current_auc = 0.4
User 99598 AUC after training: 0.4
User 99598 does not improve AUC. Reverting changes.
Training on augumented user 35038 40/50 current_auc = 0.4
User 35038 AUC after training: 0.375
User 35038 does not improve AUC. Reverting changes.
Training on augumented user 11125 41/50 current_auc = 0.4
User 11125 AUC after training: 0.4
User 11125 does not improve AUC. Reverting changes.
Training on augumented user 98423 42/50 current_auc = 0.4
User 98423 AUC after training: 0.4
User 98423 does not improve AUC. Reverting changes.
Training on augumented user 44014 43/50 current_auc = 0.4
User 44014 AUC after training: 0.4
User 44014 does not improve AUC. Reverting changes.
Training on augumented user 98231 44/50 current_auc = 0.4
User 98231 AUC after training: 0.4
User 98231 does not improve AUC. Reverting changes.
Training on augumented user 43858 45/50 current_auc = 0.4
User 43858 AUC after training: 0.4
User 43858 does not improve AUC. Reverting changes.
Training on augumented user 76792 46/50 current_auc = 0.4
User 76792 AUC after training: 0.4
User 76792 does not improve AUC. Reverting changes.
Training on augumented user 90639 47/50 current_auc = 0.4
User 90639 AUC after training: 0.4
User 90639 does not improve AUC. Reverting changes.
Training on augumented user 93103 48/50 current_auc = 0.4
User 93103 AUC after training: 0.4
User 93103 does not improve AUC. Reverting changes.
Training on augumented user 14279 49/50 current_auc = 0.4
User 14279 AUC after training: 0.4
User 14279 does not improve AUC. Reverting changes.
[2024-12-02 18:41:37.147375] start test user 98842 115/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:41:37.947127] start test user 98842 115/567 recall augumented users by random, augumented_users = [68220, 125181, 71594, 132928, 20969, 113844, 21631, 7232, 129065, 105328, 127901, 8730, 112283, 84008, 23179, 12300, 55707, 83474, 118398, 15037, 135398, 63575, 39557, 69354, 2816, 137024, 67453, 87427, 97483, 31734, 24940, 70856, 118299, 68046, 49509, 134366, 63108, 103428, 96659, 111297, 53011, 32931, 84456, 92208, 53467, 88513, 48888, 130443, 103042, 77393]
[2024-12-02 18:41:37.972014] user = 98842 Cloud 115/567
[2024-12-02 18:41:38.006417] user = 98842 Local 115/567
[2024-12-02 18:41:38.095882] user = 98842 Local+ 115/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:41:40.311083] user = 98842 MPDA- 115/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7848932676518883
Training on augumented user 68220 0/50 current_auc = 0.7848932676518883
User 68220 AUC after training: 0.7854406130268199
User 68220 improves AUC. Keeping the model.
Training on augumented user 125181 1/50 current_auc = 0.7854406130268199
User 125181 AUC after training: 0.7854406130268199
User 125181 does not improve AUC. Reverting changes.
Training on augumented user 71594 2/50 current_auc = 0.7854406130268199
User 71594 AUC after training: 0.7848932676518884
User 71594 does not improve AUC. Reverting changes.
Training on augumented user 132928 3/50 current_auc = 0.7854406130268199
User 132928 AUC after training: 0.7848932676518883
User 132928 does not improve AUC. Reverting changes.
Training on augumented user 20969 4/50 current_auc = 0.7854406130268199
User 20969 AUC after training: 0.7854406130268199
User 20969 does not improve AUC. Reverting changes.
Training on augumented user 113844 5/50 current_auc = 0.7854406130268199
User 113844 AUC after training: 0.7848932676518883
User 113844 does not improve AUC. Reverting changes.
Training on augumented user 21631 6/50 current_auc = 0.7854406130268199
User 21631 AUC after training: 0.7843459222769568
User 21631 does not improve AUC. Reverting changes.
Training on augumented user 7232 7/50 current_auc = 0.7854406130268199
User 7232 AUC after training: 0.7843459222769567
User 7232 does not improve AUC. Reverting changes.
Training on augumented user 129065 8/50 current_auc = 0.7854406130268199
User 129065 AUC after training: 0.7859879584017515
User 129065 improves AUC. Keeping the model.
Training on augumented user 105328 9/50 current_auc = 0.7859879584017515
User 105328 AUC after training: 0.7848932676518884
User 105328 does not improve AUC. Reverting changes.
Training on augumented user 127901 10/50 current_auc = 0.7859879584017515
User 127901 AUC after training: 0.7854406130268199
User 127901 does not improve AUC. Reverting changes.
Training on augumented user 8730 11/50 current_auc = 0.7859879584017515
User 8730 AUC after training: 0.7859879584017515
User 8730 does not improve AUC. Reverting changes.
Training on augumented user 112283 12/50 current_auc = 0.7859879584017515
User 112283 AUC after training: 0.7854406130268199
User 112283 does not improve AUC. Reverting changes.
Training on augumented user 84008 13/50 current_auc = 0.7859879584017515
User 84008 AUC after training: 0.7865353037766831
User 84008 improves AUC. Keeping the model.
Training on augumented user 23179 14/50 current_auc = 0.7865353037766831
User 23179 AUC after training: 0.7865353037766831
User 23179 does not improve AUC. Reverting changes.
Training on augumented user 12300 15/50 current_auc = 0.7865353037766831
User 12300 AUC after training: 0.7859879584017515
User 12300 does not improve AUC. Reverting changes.
Training on augumented user 55707 16/50 current_auc = 0.7865353037766831
User 55707 AUC after training: 0.7859879584017515
User 55707 does not improve AUC. Reverting changes.
Training on augumented user 83474 17/50 current_auc = 0.7865353037766831
User 83474 AUC after training: 0.7865353037766831
User 83474 does not improve AUC. Reverting changes.
Training on augumented user 118398 18/50 current_auc = 0.7865353037766831
User 118398 AUC after training: 0.7865353037766831
User 118398 does not improve AUC. Reverting changes.
Training on augumented user 15037 19/50 current_auc = 0.7865353037766831
User 15037 AUC after training: 0.7865353037766831
User 15037 does not improve AUC. Reverting changes.
Training on augumented user 135398 20/50 current_auc = 0.7865353037766831
User 135398 AUC after training: 0.7865353037766831
User 135398 does not improve AUC. Reverting changes.
Training on augumented user 63575 21/50 current_auc = 0.7865353037766831
User 63575 AUC after training: 0.7865353037766831
User 63575 does not improve AUC. Reverting changes.
Training on augumented user 39557 22/50 current_auc = 0.7865353037766831
User 39557 AUC after training: 0.7865353037766831
User 39557 does not improve AUC. Reverting changes.
Training on augumented user 69354 23/50 current_auc = 0.7865353037766831
User 69354 AUC after training: 0.7854406130268199
User 69354 does not improve AUC. Reverting changes.
Training on augumented user 2816 24/50 current_auc = 0.7865353037766831
User 2816 AUC after training: 0.7854406130268199
User 2816 does not improve AUC. Reverting changes.
Training on augumented user 137024 25/50 current_auc = 0.7865353037766831
User 137024 AUC after training: 0.7865353037766831
User 137024 does not improve AUC. Reverting changes.
Training on augumented user 67453 26/50 current_auc = 0.7865353037766831
User 67453 AUC after training: 0.7865353037766831
User 67453 does not improve AUC. Reverting changes.
Training on augumented user 87427 27/50 current_auc = 0.7865353037766831
User 87427 AUC after training: 0.7854406130268199
User 87427 does not improve AUC. Reverting changes.
Training on augumented user 97483 28/50 current_auc = 0.7865353037766831
User 97483 AUC after training: 0.7865353037766831
User 97483 does not improve AUC. Reverting changes.
Training on augumented user 31734 29/50 current_auc = 0.7865353037766831
User 31734 AUC after training: 0.7870826491516147
User 31734 improves AUC. Keeping the model.
Training on augumented user 24940 30/50 current_auc = 0.7870826491516147
User 24940 AUC after training: 0.7848932676518883
User 24940 does not improve AUC. Reverting changes.
Training on augumented user 70856 31/50 current_auc = 0.7870826491516147
User 70856 AUC after training: 0.7865353037766831
User 70856 does not improve AUC. Reverting changes.
Training on augumented user 118299 32/50 current_auc = 0.7870826491516147
User 118299 AUC after training: 0.7865353037766831
User 118299 does not improve AUC. Reverting changes.
Training on augumented user 68046 33/50 current_auc = 0.7870826491516147
User 68046 AUC after training: 0.7854406130268199
User 68046 does not improve AUC. Reverting changes.
Training on augumented user 49509 34/50 current_auc = 0.7870826491516147
User 49509 AUC after training: 0.7865353037766831
User 49509 does not improve AUC. Reverting changes.
Training on augumented user 134366 35/50 current_auc = 0.7870826491516147
User 134366 AUC after training: 0.7854406130268199
User 134366 does not improve AUC. Reverting changes.
Training on augumented user 63108 36/50 current_auc = 0.7870826491516147
User 63108 AUC after training: 0.7865353037766831
User 63108 does not improve AUC. Reverting changes.
Training on augumented user 103428 37/50 current_auc = 0.7870826491516147
User 103428 AUC after training: 0.7865353037766831
User 103428 does not improve AUC. Reverting changes.
Training on augumented user 96659 38/50 current_auc = 0.7870826491516147
User 96659 AUC after training: 0.7859879584017515
User 96659 does not improve AUC. Reverting changes.
Training on augumented user 111297 39/50 current_auc = 0.7870826491516147
User 111297 AUC after training: 0.7854406130268199
User 111297 does not improve AUC. Reverting changes.
Training on augumented user 53011 40/50 current_auc = 0.7870826491516147
User 53011 AUC after training: 0.7865353037766831
User 53011 does not improve AUC. Reverting changes.
Training on augumented user 32931 41/50 current_auc = 0.7870826491516147
User 32931 AUC after training: 0.7859879584017515
User 32931 does not improve AUC. Reverting changes.
Training on augumented user 84456 42/50 current_auc = 0.7870826491516147
User 84456 AUC after training: 0.7865353037766831
User 84456 does not improve AUC. Reverting changes.
Training on augumented user 92208 43/50 current_auc = 0.7870826491516147
User 92208 AUC after training: 0.7859879584017515
User 92208 does not improve AUC. Reverting changes.
Training on augumented user 53467 44/50 current_auc = 0.7870826491516147
User 53467 AUC after training: 0.7859879584017515
User 53467 does not improve AUC. Reverting changes.
Training on augumented user 88513 45/50 current_auc = 0.7870826491516147
User 88513 AUC after training: 0.7859879584017515
User 88513 does not improve AUC. Reverting changes.
Training on augumented user 48888 46/50 current_auc = 0.7870826491516147
User 48888 AUC after training: 0.7865353037766831
User 48888 does not improve AUC. Reverting changes.
Training on augumented user 130443 47/50 current_auc = 0.7870826491516147
User 130443 AUC after training: 0.7865353037766831
User 130443 does not improve AUC. Reverting changes.
Training on augumented user 103042 48/50 current_auc = 0.7870826491516147
User 103042 AUC after training: 0.7843459222769568
User 103042 does not improve AUC. Reverting changes.
Training on augumented user 77393 49/50 current_auc = 0.7870826491516147
User 77393 AUC after training: 0.7870826491516147
User 77393 does not improve AUC. Reverting changes.
[2024-12-02 18:42:13.785413] start test user 98865 116/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:42:14.525113] start test user 98865 116/567 recall augumented users by random, augumented_users = [57088, 93687, 129568, 129306, 36644, 109613, 96752, 4141, 63577, 27009, 96385, 44645, 20458, 32436, 17615, 74759, 135499, 136945, 129067, 70917, 65603, 22909, 133790, 11499, 126175, 57215, 27355, 70014, 130534, 109781, 69500, 134175, 118150, 71091, 34914, 118329, 34965, 39735, 102086, 101965, 126795, 42487, 127215, 106333, 16190, 86923, 37564, 445, 44219, 6169]
[2024-12-02 18:42:14.558711] user = 98865 Cloud 116/567
[2024-12-02 18:42:14.615639] user = 98865 Local 116/567
[2024-12-02 18:42:14.988797] user = 98865 Local+ 116/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:42:17.954933] user = 98865 MPDA- 116/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5246067193470136
Training on augumented user 57088 0/50 current_auc = 0.5246067193470136
User 57088 AUC after training: 0.5245963082112628
User 57088 does not improve AUC. Reverting changes.
Training on augumented user 93687 1/50 current_auc = 0.5246067193470136
User 93687 AUC after training: 0.5245390469646334
User 93687 does not improve AUC. Reverting changes.
Training on augumented user 129568 2/50 current_auc = 0.5246067193470136
User 129568 AUC after training: 0.5246015137791381
User 129568 does not improve AUC. Reverting changes.
Training on augumented user 129306 3/50 current_auc = 0.5246067193470136
User 129306 AUC after training: 0.5258768779086112
User 129306 improves AUC. Keeping the model.
Training on augumented user 36644 4/50 current_auc = 0.5258768779086112
User 36644 AUC after training: 0.5256061883790903
User 36644 does not improve AUC. Reverting changes.
Training on augumented user 109613 5/50 current_auc = 0.5258768779086112
User 109613 AUC after training: 0.5260538672163747
User 109613 improves AUC. Keeping the model.
Training on augumented user 96752 6/50 current_auc = 0.5260538672163747
User 96752 AUC after training: 0.525876877908611
User 96752 does not improve AUC. Reverting changes.
Training on augumented user 4141 7/50 current_auc = 0.5260538672163747
User 4141 AUC after training: 0.5251897429490582
User 4141 does not improve AUC. Reverting changes.
Training on augumented user 63577 8/50 current_auc = 0.5260538672163747
User 63577 AUC after training: 0.5262204453883874
User 63577 improves AUC. Keeping the model.
Training on augumented user 27009 9/50 current_auc = 0.5262204453883874
User 27009 AUC after training: 0.5260122226733714
User 27009 does not improve AUC. Reverting changes.
Training on augumented user 96385 10/50 current_auc = 0.5262204453883874
User 96385 AUC after training: 0.5261267451666303
User 96385 does not improve AUC. Reverting changes.
Training on augumented user 44645 11/50 current_auc = 0.5262204453883874
User 44645 AUC after training: 0.5262308565241383
User 44645 improves AUC. Keeping the model.
Training on augumented user 20458 12/50 current_auc = 0.5262308565241383
User 20458 AUC after training: 0.5260538672163746
User 20458 does not improve AUC. Reverting changes.
Training on augumented user 32436 13/50 current_auc = 0.5262308565241383
User 32436 AUC after training: 0.5262725010671414
User 32436 improves AUC. Keeping the model.
Training on augumented user 17615 14/50 current_auc = 0.5262725010671414
User 17615 AUC after training: 0.5262568843635153
User 17615 does not improve AUC. Reverting changes.
Training on augumented user 74759 15/50 current_auc = 0.5262725010671414
User 74759 AUC after training: 0.5262464732277645
User 74759 does not improve AUC. Reverting changes.
Training on augumented user 135499 16/50 current_auc = 0.5262725010671414
User 135499 AUC after training: 0.5263870235604002
User 135499 improves AUC. Keeping the model.
Training on augumented user 136945 17/50 current_auc = 0.5263870235604002
User 136945 AUC after training: 0.5264390792391542
User 136945 improves AUC. Keeping the model.
Training on augumented user 129067 18/50 current_auc = 0.5264390792391542
User 129067 AUC after training: 0.5264286681034034
User 129067 does not improve AUC. Reverting changes.
Training on augumented user 70917 19/50 current_auc = 0.5264390792391542
User 70917 AUC after training: 0.5265119571894098
User 70917 improves AUC. Keeping the model.
Training on augumented user 65603 20/50 current_auc = 0.5265119571894098
User 65603 AUC after training: 0.5267201799044258
User 65603 improves AUC. Keeping the model.
Training on augumented user 22909 21/50 current_auc = 0.5267201799044258
User 22909 AUC after training: 0.5262464732277644
User 22909 does not improve AUC. Reverting changes.
Training on augumented user 133790 22/50 current_auc = 0.5267201799044258
User 133790 AUC after training: 0.5265431905966622
User 133790 does not improve AUC. Reverting changes.
Training on augumented user 11499 23/50 current_auc = 0.5267201799044258
User 11499 AUC after training: 0.5264286681034034
User 11499 does not improve AUC. Reverting changes.
Training on augumented user 126175 24/50 current_auc = 0.5267201799044258
User 126175 AUC after training: 0.5268399079655599
User 126175 improves AUC. Keeping the model.
Training on augumented user 57215 25/50 current_auc = 0.5268399079655599
User 57215 AUC after training: 0.5265588073002884
User 57215 does not improve AUC. Reverting changes.
Training on augumented user 27355 26/50 current_auc = 0.5268399079655599
User 27355 AUC after training: 0.5268867580764386
User 27355 improves AUC. Keeping the model.
Training on augumented user 70014 27/50 current_auc = 0.5268867580764386
User 70014 AUC after training: 0.5270116917054481
User 70014 improves AUC. Keeping the model.
Training on augumented user 130534 28/50 current_auc = 0.5270116917054481
User 130534 AUC after training: 0.5272199144204641
User 130534 improves AUC. Keeping the model.
Training on augumented user 109781 29/50 current_auc = 0.5272199144204641
User 109781 AUC after training: 0.5270637473842021
User 109781 does not improve AUC. Reverting changes.
Training on augumented user 69500 30/50 current_auc = 0.5272199144204641
User 69500 AUC after training: 0.5268451135334353
User 69500 does not improve AUC. Reverting changes.
Training on augumented user 134175 31/50 current_auc = 0.5272199144204641
User 134175 AUC after training: 0.5268242912619338
User 134175 does not improve AUC. Reverting changes.
Training on augumented user 118150 32/50 current_auc = 0.5272199144204641
User 118150 AUC after training: 0.5265952462754162
User 118150 does not improve AUC. Reverting changes.
Training on augumented user 71091 33/50 current_auc = 0.5272199144204641
User 71091 AUC after training: 0.527282381234969
User 71091 improves AUC. Keeping the model.
Training on augumented user 34914 34/50 current_auc = 0.527282381234969
User 34914 AUC after training: 0.5268347023976846
User 34914 does not improve AUC. Reverting changes.
Training on augumented user 118329 35/50 current_auc = 0.527282381234969
User 118329 AUC after training: 0.5273292313458475
User 118329 improves AUC. Keeping the model.
Training on augumented user 34965 36/50 current_auc = 0.5273292313458475
User 34965 AUC after training: 0.5271053919272054
User 34965 does not improve AUC. Reverting changes.
Training on augumented user 39735 37/50 current_auc = 0.5273292313458475
User 39735 AUC after training: 0.5268294968298092
User 39735 does not improve AUC. Reverting changes.
Training on augumented user 102086 38/50 current_auc = 0.5273292313458475
User 102086 AUC after training: 0.5268451135334353
User 102086 does not improve AUC. Reverting changes.
Training on augumented user 101965 39/50 current_auc = 0.5273292313458475
User 101965 AUC after training: 0.5270012805696973
User 101965 does not improve AUC. Reverting changes.
Training on augumented user 126795 40/50 current_auc = 0.5273292313458475
User 126795 AUC after training: 0.5267722355831798
User 126795 does not improve AUC. Reverting changes.
Training on augumented user 42487 41/50 current_auc = 0.5273292313458475
User 42487 AUC after training: 0.5270637473842021
User 42487 does not improve AUC. Reverting changes.
Training on augumented user 127215 42/50 current_auc = 0.5273292313458475
User 127215 AUC after training: 0.5271938865810871
User 127215 does not improve AUC. Reverting changes.
Training on augumented user 106333 43/50 current_auc = 0.5273292313458475
User 106333 AUC after training: 0.5269856638660713
User 106333 does not improve AUC. Reverting changes.
Training on augumented user 16190 44/50 current_auc = 0.5273292313458475
User 16190 AUC after training: 0.5270012805696973
User 16190 does not improve AUC. Reverting changes.
Training on augumented user 86923 45/50 current_auc = 0.5273292313458475
User 86923 AUC after training: 0.527074158519953
User 86923 does not improve AUC. Reverting changes.
Training on augumented user 37564 46/50 current_auc = 0.5273292313458475
User 37564 AUC after training: 0.5266889464971733
User 37564 does not improve AUC. Reverting changes.
Training on augumented user 445 47/50 current_auc = 0.5273292313458475
User 445 AUC after training: 0.5269284026194417
User 445 does not improve AUC. Reverting changes.
Training on augumented user 44219 48/50 current_auc = 0.5273292313458475
User 44219 AUC after training: 0.5271990921489625
User 44219 does not improve AUC. Reverting changes.
Training on augumented user 6169 49/50 current_auc = 0.5273292313458475
User 6169 AUC after training: 0.5271158030629561
User 6169 does not improve AUC. Reverting changes.
[2024-12-02 18:42:53.142777] start test user 98871 117/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:42:53.968672] start test user 98871 117/567 recall augumented users by random, augumented_users = [16112, 10044, 52927, 20949, 10259, 77898, 603, 101848, 127641, 26379, 107436, 54101, 49969, 1832, 37578, 137783, 71908, 100920, 104801, 138334, 101689, 108537, 121561, 5991, 101373, 16569, 136454, 114654, 132943, 95905, 107405, 85948, 96791, 113323, 56454, 33416, 121038, 10338, 2395, 51266, 61354, 23568, 3516, 19910, 31855, 54754, 57903, 10193, 58836, 102947]
[2024-12-02 18:42:53.992598] user = 98871 Cloud 117/567
[2024-12-02 18:42:54.042666] user = 98871 Local 117/567
[2024-12-02 18:42:54.260491] user = 98871 Local+ 117/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:42:57.243908] user = 98871 MPDA- 117/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6583686440677966
Training on augumented user 16112 0/50 current_auc = 0.6583686440677966
User 16112 AUC after training: 0.6541313559322034
User 16112 does not improve AUC. Reverting changes.
Training on augumented user 10044 1/50 current_auc = 0.6583686440677966
User 10044 AUC after training: 0.6504237288135594
User 10044 does not improve AUC. Reverting changes.
Training on augumented user 52927 2/50 current_auc = 0.6583686440677966
User 52927 AUC after training: 0.649364406779661
User 52927 does not improve AUC. Reverting changes.
Training on augumented user 20949 3/50 current_auc = 0.6583686440677966
User 20949 AUC after training: 0.6567796610169492
User 20949 does not improve AUC. Reverting changes.
Training on augumented user 10259 4/50 current_auc = 0.6583686440677966
User 10259 AUC after training: 0.6588983050847458
User 10259 improves AUC. Keeping the model.
Training on augumented user 77898 5/50 current_auc = 0.6588983050847458
User 77898 AUC after training: 0.6541313559322034
User 77898 does not improve AUC. Reverting changes.
Training on augumented user 603 6/50 current_auc = 0.6588983050847458
User 603 AUC after training: 0.6536016949152542
User 603 does not improve AUC. Reverting changes.
Training on augumented user 101848 7/50 current_auc = 0.6588983050847458
User 101848 AUC after training: 0.6551906779661018
User 101848 does not improve AUC. Reverting changes.
Training on augumented user 127641 8/50 current_auc = 0.6588983050847458
User 127641 AUC after training: 0.6583686440677966
User 127641 does not improve AUC. Reverting changes.
Training on augumented user 26379 9/50 current_auc = 0.6588983050847458
User 26379 AUC after training: 0.6583686440677966
User 26379 does not improve AUC. Reverting changes.
Training on augumented user 107436 10/50 current_auc = 0.6588983050847458
User 107436 AUC after training: 0.6567796610169492
User 107436 does not improve AUC. Reverting changes.
Training on augumented user 54101 11/50 current_auc = 0.6588983050847458
User 54101 AUC after training: 0.6573093220338982
User 54101 does not improve AUC. Reverting changes.
Training on augumented user 49969 12/50 current_auc = 0.6588983050847458
User 49969 AUC after training: 0.6578389830508474
User 49969 does not improve AUC. Reverting changes.
Training on augumented user 1832 13/50 current_auc = 0.6588983050847458
User 1832 AUC after training: 0.6620762711864406
User 1832 improves AUC. Keeping the model.
Training on augumented user 37578 14/50 current_auc = 0.6620762711864406
User 37578 AUC after training: 0.6567796610169492
User 37578 does not improve AUC. Reverting changes.
Training on augumented user 137783 15/50 current_auc = 0.6620762711864406
User 137783 AUC after training: 0.666313559322034
User 137783 improves AUC. Keeping the model.
Training on augumented user 71908 16/50 current_auc = 0.666313559322034
User 71908 AUC after training: 0.6795550847457628
User 71908 improves AUC. Keeping the model.
Training on augumented user 100920 17/50 current_auc = 0.6795550847457628
User 100920 AUC after training: 0.6811440677966102
User 100920 improves AUC. Keeping the model.
Training on augumented user 104801 18/50 current_auc = 0.6811440677966102
User 104801 AUC after training: 0.6795550847457628
User 104801 does not improve AUC. Reverting changes.
Training on augumented user 138334 19/50 current_auc = 0.6811440677966102
User 138334 AUC after training: 0.6795550847457628
User 138334 does not improve AUC. Reverting changes.
Training on augumented user 101689 20/50 current_auc = 0.6811440677966102
User 101689 AUC after training: 0.670021186440678
User 101689 does not improve AUC. Reverting changes.
Training on augumented user 108537 21/50 current_auc = 0.6811440677966102
User 108537 AUC after training: 0.6790254237288136
User 108537 does not improve AUC. Reverting changes.
Training on augumented user 121561 22/50 current_auc = 0.6811440677966102
User 121561 AUC after training: 0.6620762711864407
User 121561 does not improve AUC. Reverting changes.
Training on augumented user 5991 23/50 current_auc = 0.6811440677966102
User 5991 AUC after training: 0.670550847457627
User 5991 does not improve AUC. Reverting changes.
Training on augumented user 101373 24/50 current_auc = 0.6811440677966102
User 101373 AUC after training: 0.6641949152542374
User 101373 does not improve AUC. Reverting changes.
Training on augumented user 16569 25/50 current_auc = 0.6811440677966102
User 16569 AUC after training: 0.680614406779661
User 16569 does not improve AUC. Reverting changes.
Training on augumented user 136454 26/50 current_auc = 0.6811440677966102
User 136454 AUC after training: 0.6726694915254238
User 136454 does not improve AUC. Reverting changes.
Training on augumented user 114654 27/50 current_auc = 0.6811440677966102
User 114654 AUC after training: 0.6710805084745762
User 114654 does not improve AUC. Reverting changes.
Training on augumented user 132943 28/50 current_auc = 0.6811440677966102
User 132943 AUC after training: 0.6827330508474576
User 132943 improves AUC. Keeping the model.
Training on augumented user 95905 29/50 current_auc = 0.6827330508474576
User 95905 AUC after training: 0.6811440677966102
User 95905 does not improve AUC. Reverting changes.
Training on augumented user 107405 30/50 current_auc = 0.6827330508474576
User 107405 AUC after training: 0.6737288135593221
User 107405 does not improve AUC. Reverting changes.
Training on augumented user 85948 31/50 current_auc = 0.6827330508474576
User 85948 AUC after training: 0.6784957627118644
User 85948 does not improve AUC. Reverting changes.
Training on augumented user 96791 32/50 current_auc = 0.6827330508474576
User 96791 AUC after training: 0.6758474576271186
User 96791 does not improve AUC. Reverting changes.
Training on augumented user 113323 33/50 current_auc = 0.6827330508474576
User 113323 AUC after training: 0.6827330508474576
User 113323 does not improve AUC. Reverting changes.
Training on augumented user 56454 34/50 current_auc = 0.6827330508474576
User 56454 AUC after training: 0.6880296610169492
User 56454 improves AUC. Keeping the model.
Training on augumented user 33416 35/50 current_auc = 0.6880296610169492
User 33416 AUC after training: 0.6869703389830508
User 33416 does not improve AUC. Reverting changes.
Training on augumented user 121038 36/50 current_auc = 0.6880296610169492
User 121038 AUC after training: 0.6848516949152542
User 121038 does not improve AUC. Reverting changes.
Training on augumented user 10338 37/50 current_auc = 0.6880296610169492
User 10338 AUC after training: 0.673199152542373
User 10338 does not improve AUC. Reverting changes.
Training on augumented user 2395 38/50 current_auc = 0.6880296610169492
User 2395 AUC after training: 0.6811440677966102
User 2395 does not improve AUC. Reverting changes.
Training on augumented user 51266 39/50 current_auc = 0.6880296610169492
User 51266 AUC after training: 0.6641949152542374
User 51266 does not improve AUC. Reverting changes.
Training on augumented user 61354 40/50 current_auc = 0.6880296610169492
User 61354 AUC after training: 0.6875
User 61354 does not improve AUC. Reverting changes.
Training on augumented user 23568 41/50 current_auc = 0.6880296610169492
User 23568 AUC after training: 0.6864406779661016
User 23568 does not improve AUC. Reverting changes.
Training on augumented user 3516 42/50 current_auc = 0.6880296610169492
User 3516 AUC after training: 0.6843220338983051
User 3516 does not improve AUC. Reverting changes.
Training on augumented user 19910 43/50 current_auc = 0.6880296610169492
User 19910 AUC after training: 0.6742584745762712
User 19910 does not improve AUC. Reverting changes.
Training on augumented user 31855 44/50 current_auc = 0.6880296610169492
User 31855 AUC after training: 0.6827330508474576
User 31855 does not improve AUC. Reverting changes.
Training on augumented user 54754 45/50 current_auc = 0.6880296610169492
User 54754 AUC after training: 0.680614406779661
User 54754 does not improve AUC. Reverting changes.
Training on augumented user 57903 46/50 current_auc = 0.6880296610169492
User 57903 AUC after training: 0.6615466101694915
User 57903 does not improve AUC. Reverting changes.
Training on augumented user 10193 47/50 current_auc = 0.6880296610169492
User 10193 AUC after training: 0.6864406779661016
User 10193 does not improve AUC. Reverting changes.
Training on augumented user 58836 48/50 current_auc = 0.6880296610169492
User 58836 AUC after training: 0.6853813559322034
User 58836 does not improve AUC. Reverting changes.
Training on augumented user 102947 49/50 current_auc = 0.6880296610169492
User 102947 AUC after training: 0.6848516949152542
User 102947 does not improve AUC. Reverting changes.
[2024-12-02 18:43:29.634926] start test user 98939 118/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:43:30.124439] start test user 98939 118/567 recall augumented users by random, augumented_users = [26225, 67410, 3465, 119464, 28848, 35017, 82459, 4246, 115485, 97681, 99413, 24708, 113942, 107408, 47928, 20521, 75679, 13286, 56114, 50962, 115307, 30447, 95711, 10572, 62101, 105149, 106477, 88277, 27899, 62216, 3574, 110529, 35939, 40032, 82182, 65939, 92792, 88885, 20915, 127769, 115170, 84994, 115451, 132617, 65617, 90551, 1437, 128539, 86350, 113072]
[2024-12-02 18:43:30.140857] user = 98939 Cloud 118/567
[2024-12-02 18:43:30.168079] user = 98939 Local 118/567
[2024-12-02 18:43:30.231200] user = 98939 Local+ 118/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:43:32.428382] user = 98939 MPDA- 118/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5777777777777777
Training on augumented user 26225 0/50 current_auc = 0.5777777777777777
User 26225 AUC after training: 0.5792114695340502
User 26225 improves AUC. Keeping the model.
Training on augumented user 67410 1/50 current_auc = 0.5792114695340502
User 67410 AUC after training: 0.582078853046595
User 67410 improves AUC. Keeping the model.
Training on augumented user 3465 2/50 current_auc = 0.582078853046595
User 3465 AUC after training: 0.5827956989247312
User 3465 improves AUC. Keeping the model.
Training on augumented user 119464 3/50 current_auc = 0.5827956989247312
User 119464 AUC after training: 0.5827956989247312
User 119464 does not improve AUC. Reverting changes.
Training on augumented user 28848 4/50 current_auc = 0.5827956989247312
User 28848 AUC after training: 0.582078853046595
User 28848 does not improve AUC. Reverting changes.
Training on augumented user 35017 5/50 current_auc = 0.5827956989247312
User 35017 AUC after training: 0.582078853046595
User 35017 does not improve AUC. Reverting changes.
Training on augumented user 82459 6/50 current_auc = 0.5827956989247312
User 82459 AUC after training: 0.5827956989247312
User 82459 does not improve AUC. Reverting changes.
Training on augumented user 4246 7/50 current_auc = 0.5827956989247312
User 4246 AUC after training: 0.5827956989247312
User 4246 does not improve AUC. Reverting changes.
Training on augumented user 115485 8/50 current_auc = 0.5827956989247312
User 115485 AUC after training: 0.582078853046595
User 115485 does not improve AUC. Reverting changes.
Training on augumented user 97681 9/50 current_auc = 0.5827956989247312
User 97681 AUC after training: 0.5835125448028674
User 97681 improves AUC. Keeping the model.
Training on augumented user 99413 10/50 current_auc = 0.5835125448028674
User 99413 AUC after training: 0.5842293906810037
User 99413 improves AUC. Keeping the model.
Training on augumented user 24708 11/50 current_auc = 0.5842293906810037
User 24708 AUC after training: 0.5842293906810037
User 24708 does not improve AUC. Reverting changes.
Training on augumented user 113942 12/50 current_auc = 0.5842293906810037
User 113942 AUC after training: 0.5835125448028674
User 113942 does not improve AUC. Reverting changes.
Training on augumented user 107408 13/50 current_auc = 0.5842293906810037
User 107408 AUC after training: 0.5813620071684589
User 107408 does not improve AUC. Reverting changes.
Training on augumented user 47928 14/50 current_auc = 0.5842293906810037
User 47928 AUC after training: 0.5842293906810037
User 47928 does not improve AUC. Reverting changes.
Training on augumented user 20521 15/50 current_auc = 0.5842293906810037
User 20521 AUC after training: 0.5849462365591398
User 20521 improves AUC. Keeping the model.
Training on augumented user 75679 16/50 current_auc = 0.5849462365591398
User 75679 AUC after training: 0.5849462365591398
User 75679 does not improve AUC. Reverting changes.
Training on augumented user 13286 17/50 current_auc = 0.5849462365591398
User 13286 AUC after training: 0.5849462365591398
User 13286 does not improve AUC. Reverting changes.
Training on augumented user 56114 18/50 current_auc = 0.5849462365591398
User 56114 AUC after training: 0.5849462365591398
User 56114 does not improve AUC. Reverting changes.
Training on augumented user 50962 19/50 current_auc = 0.5849462365591398
User 50962 AUC after training: 0.5849462365591398
User 50962 does not improve AUC. Reverting changes.
Training on augumented user 115307 20/50 current_auc = 0.5849462365591398
User 115307 AUC after training: 0.5849462365591398
User 115307 does not improve AUC. Reverting changes.
Training on augumented user 30447 21/50 current_auc = 0.5849462365591398
User 30447 AUC after training: 0.5827956989247312
User 30447 does not improve AUC. Reverting changes.
Training on augumented user 95711 22/50 current_auc = 0.5849462365591398
User 95711 AUC after training: 0.5849462365591398
User 95711 does not improve AUC. Reverting changes.
Training on augumented user 10572 23/50 current_auc = 0.5849462365591398
User 10572 AUC after training: 0.5849462365591398
User 10572 does not improve AUC. Reverting changes.
Training on augumented user 62101 24/50 current_auc = 0.5849462365591398
User 62101 AUC after training: 0.5856630824372759
User 62101 improves AUC. Keeping the model.
Training on augumented user 105149 25/50 current_auc = 0.5856630824372759
User 105149 AUC after training: 0.5842293906810037
User 105149 does not improve AUC. Reverting changes.
Training on augumented user 106477 26/50 current_auc = 0.5856630824372759
User 106477 AUC after training: 0.5856630824372759
User 106477 does not improve AUC. Reverting changes.
Training on augumented user 88277 27/50 current_auc = 0.5856630824372759
User 88277 AUC after training: 0.5856630824372759
User 88277 does not improve AUC. Reverting changes.
Training on augumented user 27899 28/50 current_auc = 0.5856630824372759
User 27899 AUC after training: 0.5842293906810035
User 27899 does not improve AUC. Reverting changes.
Training on augumented user 62216 29/50 current_auc = 0.5856630824372759
User 62216 AUC after training: 0.5863799283154122
User 62216 improves AUC. Keeping the model.
Training on augumented user 3574 30/50 current_auc = 0.5863799283154122
User 3574 AUC after training: 0.5863799283154122
User 3574 does not improve AUC. Reverting changes.
Training on augumented user 110529 31/50 current_auc = 0.5863799283154122
User 110529 AUC after training: 0.5863799283154122
User 110529 does not improve AUC. Reverting changes.
Training on augumented user 35939 32/50 current_auc = 0.5863799283154122
User 35939 AUC after training: 0.5863799283154122
User 35939 does not improve AUC. Reverting changes.
Training on augumented user 40032 33/50 current_auc = 0.5863799283154122
User 40032 AUC after training: 0.5863799283154122
User 40032 does not improve AUC. Reverting changes.
Training on augumented user 82182 34/50 current_auc = 0.5863799283154122
User 82182 AUC after training: 0.5863799283154122
User 82182 does not improve AUC. Reverting changes.
Training on augumented user 65939 35/50 current_auc = 0.5863799283154122
User 65939 AUC after training: 0.5863799283154122
User 65939 does not improve AUC. Reverting changes.
Training on augumented user 92792 36/50 current_auc = 0.5863799283154122
User 92792 AUC after training: 0.5856630824372759
User 92792 does not improve AUC. Reverting changes.
Training on augumented user 88885 37/50 current_auc = 0.5863799283154122
User 88885 AUC after training: 0.5863799283154122
User 88885 does not improve AUC. Reverting changes.
Training on augumented user 20915 38/50 current_auc = 0.5863799283154122
User 20915 AUC after training: 0.5863799283154122
User 20915 does not improve AUC. Reverting changes.
Training on augumented user 127769 39/50 current_auc = 0.5863799283154122
User 127769 AUC after training: 0.5849462365591398
User 127769 does not improve AUC. Reverting changes.
Training on augumented user 115170 40/50 current_auc = 0.5863799283154122
User 115170 AUC after training: 0.5870967741935484
User 115170 improves AUC. Keeping the model.
Training on augumented user 84994 41/50 current_auc = 0.5870967741935484
User 84994 AUC after training: 0.5870967741935484
User 84994 does not improve AUC. Reverting changes.
Training on augumented user 115451 42/50 current_auc = 0.5870967741935484
User 115451 AUC after training: 0.5863799283154122
User 115451 does not improve AUC. Reverting changes.
Training on augumented user 132617 43/50 current_auc = 0.5870967741935484
User 132617 AUC after training: 0.5870967741935484
User 132617 does not improve AUC. Reverting changes.
Training on augumented user 65617 44/50 current_auc = 0.5870967741935484
User 65617 AUC after training: 0.5878136200716846
User 65617 improves AUC. Keeping the model.
Training on augumented user 90551 45/50 current_auc = 0.5878136200716846
User 90551 AUC after training: 0.5878136200716846
User 90551 does not improve AUC. Reverting changes.
Training on augumented user 1437 46/50 current_auc = 0.5878136200716846
User 1437 AUC after training: 0.5856630824372759
User 1437 does not improve AUC. Reverting changes.
Training on augumented user 128539 47/50 current_auc = 0.5878136200716846
User 128539 AUC after training: 0.5878136200716846
User 128539 does not improve AUC. Reverting changes.
Training on augumented user 86350 48/50 current_auc = 0.5878136200716846
User 86350 AUC after training: 0.5878136200716846
User 86350 does not improve AUC. Reverting changes.
Training on augumented user 113072 49/50 current_auc = 0.5878136200716846
User 113072 AUC after training: 0.5878136200716846
User 113072 does not improve AUC. Reverting changes.
[2024-12-02 18:44:03.575258] start test user 98997 119/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:44:04.427995] start test user 98997 119/567 recall augumented users by random, augumented_users = [16063, 113450, 67614, 62962, 47603, 134565, 12419, 34593, 81933, 98656, 78604, 129460, 39416, 59055, 25659, 76138, 82015, 21911, 51490, 103192, 2581, 32445, 22813, 81245, 12967, 48627, 19173, 70387, 63060, 89447, 91214, 129497, 63406, 27638, 85807, 118989, 126697, 25036, 24012, 77895, 121323, 23315, 102161, 53413, 32451, 35379, 61291, 46127, 95639, 116483]
[2024-12-02 18:44:04.456931] user = 98997 Cloud 119/567
[2024-12-02 18:44:04.484775] user = 98997 Local 119/567
[2024-12-02 18:44:04.581267] user = 98997 Local+ 119/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:44:08.248362] user = 98997 MPDA- 119/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5308176100628931
Training on augumented user 16063 0/50 current_auc = 0.5308176100628931
User 16063 AUC after training: 0.5283018867924528
User 16063 does not improve AUC. Reverting changes.
Training on augumented user 113450 1/50 current_auc = 0.5308176100628931
User 113450 AUC after training: 0.530188679245283
User 113450 does not improve AUC. Reverting changes.
Training on augumented user 67614 2/50 current_auc = 0.5308176100628931
User 67614 AUC after training: 0.530188679245283
User 67614 does not improve AUC. Reverting changes.
Training on augumented user 62962 3/50 current_auc = 0.5308176100628931
User 62962 AUC after training: 0.5289308176100629
User 62962 does not improve AUC. Reverting changes.
Training on augumented user 47603 4/50 current_auc = 0.5308176100628931
User 47603 AUC after training: 0.5314465408805031
User 47603 improves AUC. Keeping the model.
Training on augumented user 134565 5/50 current_auc = 0.5314465408805031
User 134565 AUC after training: 0.5320754716981132
User 134565 improves AUC. Keeping the model.
Training on augumented user 12419 6/50 current_auc = 0.5320754716981132
User 12419 AUC after training: 0.5226415094339623
User 12419 does not improve AUC. Reverting changes.
Training on augumented user 34593 7/50 current_auc = 0.5320754716981132
User 34593 AUC after training: 0.5320754716981132
User 34593 does not improve AUC. Reverting changes.
Training on augumented user 81933 8/50 current_auc = 0.5320754716981132
User 81933 AUC after training: 0.5308176100628931
User 81933 does not improve AUC. Reverting changes.
Training on augumented user 98656 9/50 current_auc = 0.5320754716981132
User 98656 AUC after training: 0.5389937106918239
User 98656 improves AUC. Keeping the model.
Training on augumented user 78604 10/50 current_auc = 0.5389937106918239
User 78604 AUC after training: 0.5383647798742138
User 78604 does not improve AUC. Reverting changes.
Training on augumented user 129460 11/50 current_auc = 0.5389937106918239
User 129460 AUC after training: 0.5421383647798742
User 129460 improves AUC. Keeping the model.
Training on augumented user 39416 12/50 current_auc = 0.5421383647798742
User 39416 AUC after training: 0.5408805031446541
User 39416 does not improve AUC. Reverting changes.
Training on augumented user 59055 13/50 current_auc = 0.5421383647798742
User 59055 AUC after training: 0.5389937106918239
User 59055 does not improve AUC. Reverting changes.
Training on augumented user 25659 14/50 current_auc = 0.5421383647798742
User 25659 AUC after training: 0.5333333333333333
User 25659 does not improve AUC. Reverting changes.
Training on augumented user 76138 15/50 current_auc = 0.5421383647798742
User 76138 AUC after training: 0.5358490566037736
User 76138 does not improve AUC. Reverting changes.
Training on augumented user 82015 16/50 current_auc = 0.5421383647798742
User 82015 AUC after training: 0.5415094339622641
User 82015 does not improve AUC. Reverting changes.
Training on augumented user 21911 17/50 current_auc = 0.5421383647798742
User 21911 AUC after training: 0.5358490566037736
User 21911 does not improve AUC. Reverting changes.
Training on augumented user 51490 18/50 current_auc = 0.5421383647798742
User 51490 AUC after training: 0.5352201257861635
User 51490 does not improve AUC. Reverting changes.
Training on augumented user 103192 19/50 current_auc = 0.5421383647798742
User 103192 AUC after training: 0.5276729559748428
User 103192 does not improve AUC. Reverting changes.
Training on augumented user 2581 20/50 current_auc = 0.5421383647798742
User 2581 AUC after training: 0.5421383647798742
User 2581 does not improve AUC. Reverting changes.
Training on augumented user 32445 21/50 current_auc = 0.5421383647798742
User 32445 AUC after training: 0.5289308176100629
User 32445 does not improve AUC. Reverting changes.
Training on augumented user 22813 22/50 current_auc = 0.5421383647798742
User 22813 AUC after training: 0.5333333333333333
User 22813 does not improve AUC. Reverting changes.
Training on augumented user 81245 23/50 current_auc = 0.5421383647798742
User 81245 AUC after training: 0.5345911949685535
User 81245 does not improve AUC. Reverting changes.
Training on augumented user 12967 24/50 current_auc = 0.5421383647798742
User 12967 AUC after training: 0.5408805031446541
User 12967 does not improve AUC. Reverting changes.
Training on augumented user 48627 25/50 current_auc = 0.5421383647798742
User 48627 AUC after training: 0.5339622641509434
User 48627 does not improve AUC. Reverting changes.
Training on augumented user 19173 26/50 current_auc = 0.5421383647798742
User 19173 AUC after training: 0.540251572327044
User 19173 does not improve AUC. Reverting changes.
Training on augumented user 70387 27/50 current_auc = 0.5421383647798742
User 70387 AUC after training: 0.5421383647798742
User 70387 does not improve AUC. Reverting changes.
Training on augumented user 63060 28/50 current_auc = 0.5421383647798742
User 63060 AUC after training: 0.5408805031446541
User 63060 does not improve AUC. Reverting changes.
Training on augumented user 89447 29/50 current_auc = 0.5421383647798742
User 89447 AUC after training: 0.5314465408805031
User 89447 does not improve AUC. Reverting changes.
Training on augumented user 91214 30/50 current_auc = 0.5421383647798742
User 91214 AUC after training: 0.5371069182389937
User 91214 does not improve AUC. Reverting changes.
Training on augumented user 129497 31/50 current_auc = 0.5421383647798742
User 129497 AUC after training: 0.5427672955974843
User 129497 improves AUC. Keeping the model.
Training on augumented user 63406 32/50 current_auc = 0.5427672955974843
User 63406 AUC after training: 0.5339622641509434
User 63406 does not improve AUC. Reverting changes.
Training on augumented user 27638 33/50 current_auc = 0.5427672955974843
User 27638 AUC after training: 0.5345911949685535
User 27638 does not improve AUC. Reverting changes.
Training on augumented user 85807 34/50 current_auc = 0.5427672955974843
User 85807 AUC after training: 0.5383647798742138
User 85807 does not improve AUC. Reverting changes.
Training on augumented user 118989 35/50 current_auc = 0.5427672955974843
User 118989 AUC after training: 0.5440251572327044
User 118989 improves AUC. Keeping the model.
Training on augumented user 126697 36/50 current_auc = 0.5440251572327044
User 126697 AUC after training: 0.5446540880503145
User 126697 improves AUC. Keeping the model.
Training on augumented user 25036 37/50 current_auc = 0.5446540880503145
User 25036 AUC after training: 0.5446540880503145
User 25036 does not improve AUC. Reverting changes.
Training on augumented user 24012 38/50 current_auc = 0.5446540880503145
User 24012 AUC after training: 0.5408805031446541
User 24012 does not improve AUC. Reverting changes.
Training on augumented user 77895 39/50 current_auc = 0.5446540880503145
User 77895 AUC after training: 0.5452830188679245
User 77895 improves AUC. Keeping the model.
Training on augumented user 121323 40/50 current_auc = 0.5452830188679245
User 121323 AUC after training: 0.5440251572327044
User 121323 does not improve AUC. Reverting changes.
Training on augumented user 23315 41/50 current_auc = 0.5452830188679245
User 23315 AUC after training: 0.5440251572327044
User 23315 does not improve AUC. Reverting changes.
Training on augumented user 102161 42/50 current_auc = 0.5452830188679245
User 102161 AUC after training: 0.5421383647798742
User 102161 does not improve AUC. Reverting changes.
Training on augumented user 53413 43/50 current_auc = 0.5452830188679245
User 53413 AUC after training: 0.5421383647798742
User 53413 does not improve AUC. Reverting changes.
Training on augumented user 32451 44/50 current_auc = 0.5452830188679245
User 32451 AUC after training: 0.5440251572327044
User 32451 does not improve AUC. Reverting changes.
Training on augumented user 35379 45/50 current_auc = 0.5452830188679245
User 35379 AUC after training: 0.5433962264150943
User 35379 does not improve AUC. Reverting changes.
Training on augumented user 61291 46/50 current_auc = 0.5452830188679245
User 61291 AUC after training: 0.5421383647798742
User 61291 does not improve AUC. Reverting changes.
Training on augumented user 46127 47/50 current_auc = 0.5452830188679245
User 46127 AUC after training: 0.5446540880503145
User 46127 does not improve AUC. Reverting changes.
Training on augumented user 95639 48/50 current_auc = 0.5452830188679245
User 95639 AUC after training: 0.5433962264150943
User 95639 does not improve AUC. Reverting changes.
Training on augumented user 116483 49/50 current_auc = 0.5452830188679245
User 116483 AUC after training: 0.5327044025157233
User 116483 does not improve AUC. Reverting changes.
[2024-12-02 18:44:38.577923] start test user 98999 120/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:44:39.018262] start test user 98999 120/567 recall augumented users by random, augumented_users = [33492, 25505, 48925, 103421, 118705, 53673, 113884, 72362, 107841, 6024, 75901, 49099, 66788, 34726, 120802, 16192, 27437, 25091, 53619, 70789, 130910, 114856, 34989, 75781, 124968, 43563, 5991, 123585, 44344, 89910, 118579, 89960, 97510, 6489, 956, 108758, 32131, 96459, 104700, 6941, 36335, 100157, 10689, 117, 85691, 94206, 27887, 91663, 55374, 43435]
[2024-12-02 18:44:39.033818] user = 98999 Cloud 120/567
[2024-12-02 18:44:39.043995] user = 98999 Local 120/567
[2024-12-02 18:44:39.243450] user = 98999 Local+ 120/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:44:41.924871] user = 98999 MPDA- 120/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7824675324675325
Training on augumented user 33492 0/50 current_auc = 0.7824675324675325
User 33492 AUC after training: 0.7808441558441559
User 33492 does not improve AUC. Reverting changes.
Training on augumented user 25505 1/50 current_auc = 0.7824675324675325
User 25505 AUC after training: 0.7824675324675325
User 25505 does not improve AUC. Reverting changes.
Training on augumented user 48925 2/50 current_auc = 0.7824675324675325
User 48925 AUC after training: 0.7808441558441559
User 48925 does not improve AUC. Reverting changes.
Training on augumented user 103421 3/50 current_auc = 0.7824675324675325
User 103421 AUC after training: 0.7792207792207793
User 103421 does not improve AUC. Reverting changes.
Training on augumented user 118705 4/50 current_auc = 0.7824675324675325
User 118705 AUC after training: 0.7824675324675325
User 118705 does not improve AUC. Reverting changes.
Training on augumented user 53673 5/50 current_auc = 0.7824675324675325
User 53673 AUC after training: 0.7792207792207793
User 53673 does not improve AUC. Reverting changes.
Training on augumented user 113884 6/50 current_auc = 0.7824675324675325
User 113884 AUC after training: 0.7808441558441559
User 113884 does not improve AUC. Reverting changes.
Training on augumented user 72362 7/50 current_auc = 0.7824675324675325
User 72362 AUC after training: 0.7938311688311688
User 72362 improves AUC. Keeping the model.
Training on augumented user 107841 8/50 current_auc = 0.7938311688311688
User 107841 AUC after training: 0.7938311688311688
User 107841 does not improve AUC. Reverting changes.
Training on augumented user 6024 9/50 current_auc = 0.7938311688311688
User 6024 AUC after training: 0.7938311688311688
User 6024 does not improve AUC. Reverting changes.
Training on augumented user 75901 10/50 current_auc = 0.7938311688311688
User 75901 AUC after training: 0.7938311688311688
User 75901 does not improve AUC. Reverting changes.
Training on augumented user 49099 11/50 current_auc = 0.7938311688311688
User 49099 AUC after training: 0.788961038961039
User 49099 does not improve AUC. Reverting changes.
Training on augumented user 66788 12/50 current_auc = 0.7938311688311688
User 66788 AUC after training: 0.7938311688311688
User 66788 does not improve AUC. Reverting changes.
Training on augumented user 34726 13/50 current_auc = 0.7938311688311688
User 34726 AUC after training: 0.7922077922077922
User 34726 does not improve AUC. Reverting changes.
Training on augumented user 120802 14/50 current_auc = 0.7938311688311688
User 120802 AUC after training: 0.7922077922077922
User 120802 does not improve AUC. Reverting changes.
Training on augumented user 16192 15/50 current_auc = 0.7938311688311688
User 16192 AUC after training: 0.7938311688311688
User 16192 does not improve AUC. Reverting changes.
Training on augumented user 27437 16/50 current_auc = 0.7938311688311688
User 27437 AUC after training: 0.7922077922077921
User 27437 does not improve AUC. Reverting changes.
Training on augumented user 25091 17/50 current_auc = 0.7938311688311688
User 25091 AUC after training: 0.7905844155844156
User 25091 does not improve AUC. Reverting changes.
Training on augumented user 53619 18/50 current_auc = 0.7938311688311688
User 53619 AUC after training: 0.7905844155844156
User 53619 does not improve AUC. Reverting changes.
Training on augumented user 70789 19/50 current_auc = 0.7938311688311688
User 70789 AUC after training: 0.788961038961039
User 70789 does not improve AUC. Reverting changes.
Training on augumented user 130910 20/50 current_auc = 0.7938311688311688
User 130910 AUC after training: 0.7922077922077922
User 130910 does not improve AUC. Reverting changes.
Training on augumented user 114856 21/50 current_auc = 0.7938311688311688
User 114856 AUC after training: 0.7938311688311688
User 114856 does not improve AUC. Reverting changes.
Training on augumented user 34989 22/50 current_auc = 0.7938311688311688
User 34989 AUC after training: 0.7922077922077921
User 34989 does not improve AUC. Reverting changes.
Training on augumented user 75781 23/50 current_auc = 0.7938311688311688
User 75781 AUC after training: 0.7922077922077921
User 75781 does not improve AUC. Reverting changes.
Training on augumented user 124968 24/50 current_auc = 0.7938311688311688
User 124968 AUC after training: 0.7905844155844156
User 124968 does not improve AUC. Reverting changes.
Training on augumented user 43563 25/50 current_auc = 0.7938311688311688
User 43563 AUC after training: 0.7922077922077922
User 43563 does not improve AUC. Reverting changes.
Training on augumented user 5991 26/50 current_auc = 0.7938311688311688
User 5991 AUC after training: 0.7857142857142857
User 5991 does not improve AUC. Reverting changes.
Training on augumented user 123585 27/50 current_auc = 0.7938311688311688
User 123585 AUC after training: 0.7938311688311688
User 123585 does not improve AUC. Reverting changes.
Training on augumented user 44344 28/50 current_auc = 0.7938311688311688
User 44344 AUC after training: 0.7922077922077921
User 44344 does not improve AUC. Reverting changes.
Training on augumented user 89910 29/50 current_auc = 0.7938311688311688
User 89910 AUC after training: 0.7922077922077922
User 89910 does not improve AUC. Reverting changes.
Training on augumented user 118579 30/50 current_auc = 0.7938311688311688
User 118579 AUC after training: 0.7938311688311688
User 118579 does not improve AUC. Reverting changes.
Training on augumented user 89960 31/50 current_auc = 0.7938311688311688
User 89960 AUC after training: 0.7938311688311688
User 89960 does not improve AUC. Reverting changes.
Training on augumented user 97510 32/50 current_auc = 0.7938311688311688
User 97510 AUC after training: 0.7922077922077922
User 97510 does not improve AUC. Reverting changes.
Training on augumented user 6489 33/50 current_auc = 0.7938311688311688
User 6489 AUC after training: 0.7922077922077922
User 6489 does not improve AUC. Reverting changes.
Training on augumented user 956 34/50 current_auc = 0.7938311688311688
User 956 AUC after training: 0.7922077922077922
User 956 does not improve AUC. Reverting changes.
Training on augumented user 108758 35/50 current_auc = 0.7938311688311688
User 108758 AUC after training: 0.7905844155844156
User 108758 does not improve AUC. Reverting changes.
Training on augumented user 32131 36/50 current_auc = 0.7938311688311688
User 32131 AUC after training: 0.788961038961039
User 32131 does not improve AUC. Reverting changes.
Training on augumented user 96459 37/50 current_auc = 0.7938311688311688
User 96459 AUC after training: 0.7922077922077921
User 96459 does not improve AUC. Reverting changes.
Training on augumented user 104700 38/50 current_auc = 0.7938311688311688
User 104700 AUC after training: 0.7922077922077922
User 104700 does not improve AUC. Reverting changes.
Training on augumented user 6941 39/50 current_auc = 0.7938311688311688
User 6941 AUC after training: 0.7922077922077922
User 6941 does not improve AUC. Reverting changes.
Training on augumented user 36335 40/50 current_auc = 0.7938311688311688
User 36335 AUC after training: 0.7905844155844156
User 36335 does not improve AUC. Reverting changes.
Training on augumented user 100157 41/50 current_auc = 0.7938311688311688
User 100157 AUC after training: 0.7922077922077922
User 100157 does not improve AUC. Reverting changes.
Training on augumented user 10689 42/50 current_auc = 0.7938311688311688
User 10689 AUC after training: 0.7938311688311688
User 10689 does not improve AUC. Reverting changes.
Training on augumented user 117 43/50 current_auc = 0.7938311688311688
User 117 AUC after training: 0.7922077922077921
User 117 does not improve AUC. Reverting changes.
Training on augumented user 85691 44/50 current_auc = 0.7938311688311688
User 85691 AUC after training: 0.7905844155844156
User 85691 does not improve AUC. Reverting changes.
Training on augumented user 94206 45/50 current_auc = 0.7938311688311688
User 94206 AUC after training: 0.7922077922077921
User 94206 does not improve AUC. Reverting changes.
Training on augumented user 27887 46/50 current_auc = 0.7938311688311688
User 27887 AUC after training: 0.7938311688311688
User 27887 does not improve AUC. Reverting changes.
Training on augumented user 91663 47/50 current_auc = 0.7938311688311688
User 91663 AUC after training: 0.7905844155844156
User 91663 does not improve AUC. Reverting changes.
Training on augumented user 55374 48/50 current_auc = 0.7938311688311688
User 55374 AUC after training: 0.7922077922077922
User 55374 does not improve AUC. Reverting changes.
Training on augumented user 43435 49/50 current_auc = 0.7938311688311688
User 43435 AUC after training: 0.7938311688311688
User 43435 does not improve AUC. Reverting changes.
[2024-12-02 18:45:10.545729] start test user 99009 121/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:45:11.097920] start test user 99009 121/567 recall augumented users by random, augumented_users = [33872, 73655, 124187, 6878, 70148, 93680, 22280, 13956, 103430, 35552, 50196, 116817, 31643, 45993, 137832, 37545, 130771, 107326, 8831, 18999, 115945, 36438, 108161, 69357, 122781, 56536, 124553, 44139, 1915, 34513, 29950, 131610, 56363, 27999, 41229, 28607, 90292, 70876, 118451, 83066, 93949, 21867, 105226, 62628, 115811, 102000, 39182, 50756, 89425, 18480]
[2024-12-02 18:45:11.114986] user = 99009 Cloud 121/567
[2024-12-02 18:45:11.146503] user = 99009 Local 121/567
[2024-12-02 18:45:11.221510] user = 99009 Local+ 121/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:45:14.322904] user = 99009 MPDA- 121/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6127214170692432
Training on augumented user 33872 0/50 current_auc = 0.6127214170692432
User 33872 AUC after training: 0.6129227053140096
User 33872 improves AUC. Keeping the model.
Training on augumented user 73655 1/50 current_auc = 0.6129227053140096
User 73655 AUC after training: 0.6123188405797101
User 73655 does not improve AUC. Reverting changes.
Training on augumented user 124187 2/50 current_auc = 0.6129227053140096
User 124187 AUC after training: 0.6133252818035426
User 124187 improves AUC. Keeping the model.
Training on augumented user 6878 3/50 current_auc = 0.6133252818035426
User 6878 AUC after training: 0.6135265700483092
User 6878 improves AUC. Keeping the model.
Training on augumented user 70148 4/50 current_auc = 0.6135265700483092
User 70148 AUC after training: 0.6137278582930756
User 70148 improves AUC. Keeping the model.
Training on augumented user 93680 5/50 current_auc = 0.6137278582930756
User 93680 AUC after training: 0.6129227053140096
User 93680 does not improve AUC. Reverting changes.
Training on augumented user 22280 6/50 current_auc = 0.6137278582930756
User 22280 AUC after training: 0.6135265700483091
User 22280 does not improve AUC. Reverting changes.
Training on augumented user 13956 7/50 current_auc = 0.6137278582930756
User 13956 AUC after training: 0.6133252818035427
User 13956 does not improve AUC. Reverting changes.
Training on augumented user 103430 8/50 current_auc = 0.6137278582930756
User 103430 AUC after training: 0.6137278582930757
User 103430 improves AUC. Keeping the model.
Training on augumented user 35552 9/50 current_auc = 0.6137278582930757
User 35552 AUC after training: 0.6147342995169082
User 35552 improves AUC. Keeping the model.
Training on augumented user 50196 10/50 current_auc = 0.6147342995169082
User 50196 AUC after training: 0.6137278582930756
User 50196 does not improve AUC. Reverting changes.
Training on augumented user 116817 11/50 current_auc = 0.6147342995169082
User 116817 AUC after training: 0.6139291465378421
User 116817 does not improve AUC. Reverting changes.
Training on augumented user 31643 12/50 current_auc = 0.6147342995169082
User 31643 AUC after training: 0.6135265700483092
User 31643 does not improve AUC. Reverting changes.
Training on augumented user 45993 13/50 current_auc = 0.6147342995169082
User 45993 AUC after training: 0.6147342995169082
User 45993 does not improve AUC. Reverting changes.
Training on augumented user 137832 14/50 current_auc = 0.6147342995169082
User 137832 AUC after training: 0.6147342995169082
User 137832 does not improve AUC. Reverting changes.
Training on augumented user 37545 15/50 current_auc = 0.6147342995169082
User 37545 AUC after training: 0.6123188405797101
User 37545 does not improve AUC. Reverting changes.
Training on augumented user 130771 16/50 current_auc = 0.6147342995169082
User 130771 AUC after training: 0.6157407407407407
User 130771 improves AUC. Keeping the model.
Training on augumented user 107326 17/50 current_auc = 0.6157407407407407
User 107326 AUC after training: 0.6218800322061192
User 107326 improves AUC. Keeping the model.
Training on augumented user 8831 18/50 current_auc = 0.6218800322061192
User 8831 AUC after training: 0.6218800322061192
User 8831 does not improve AUC. Reverting changes.
Training on augumented user 18999 19/50 current_auc = 0.6218800322061192
User 18999 AUC after training: 0.6222826086956522
User 18999 improves AUC. Keeping the model.
Training on augumented user 115945 20/50 current_auc = 0.6222826086956522
User 115945 AUC after training: 0.6224838969404186
User 115945 improves AUC. Keeping the model.
Training on augumented user 36438 21/50 current_auc = 0.6224838969404186
User 36438 AUC after training: 0.6234903381642513
User 36438 improves AUC. Keeping the model.
Training on augumented user 108161 22/50 current_auc = 0.6234903381642513
User 108161 AUC after training: 0.6236916264090177
User 108161 improves AUC. Keeping the model.
Training on augumented user 69357 23/50 current_auc = 0.6236916264090177
User 69357 AUC after training: 0.6232890499194848
User 69357 does not improve AUC. Reverting changes.
Training on augumented user 122781 24/50 current_auc = 0.6236916264090177
User 122781 AUC after training: 0.6228864734299517
User 122781 does not improve AUC. Reverting changes.
Training on augumented user 56536 25/50 current_auc = 0.6236916264090177
User 56536 AUC after training: 0.6234903381642513
User 56536 does not improve AUC. Reverting changes.
Training on augumented user 124553 26/50 current_auc = 0.6236916264090177
User 124553 AUC after training: 0.6232890499194848
User 124553 does not improve AUC. Reverting changes.
Training on augumented user 44139 27/50 current_auc = 0.6236916264090177
User 44139 AUC after training: 0.6234903381642511
User 44139 does not improve AUC. Reverting changes.
Training on augumented user 1915 28/50 current_auc = 0.6236916264090177
User 1915 AUC after training: 0.6226851851851851
User 1915 does not improve AUC. Reverting changes.
Training on augumented user 34513 29/50 current_auc = 0.6236916264090177
User 34513 AUC after training: 0.6234903381642513
User 34513 does not improve AUC. Reverting changes.
Training on augumented user 29950 30/50 current_auc = 0.6236916264090177
User 29950 AUC after training: 0.6240942028985507
User 29950 improves AUC. Keeping the model.
Training on augumented user 131610 31/50 current_auc = 0.6240942028985507
User 131610 AUC after training: 0.6234903381642511
User 131610 does not improve AUC. Reverting changes.
Training on augumented user 56363 32/50 current_auc = 0.6240942028985507
User 56363 AUC after training: 0.6234903381642513
User 56363 does not improve AUC. Reverting changes.
Training on augumented user 27999 33/50 current_auc = 0.6240942028985507
User 27999 AUC after training: 0.6230877616747182
User 27999 does not improve AUC. Reverting changes.
Training on augumented user 41229 34/50 current_auc = 0.6240942028985507
User 41229 AUC after training: 0.6246980676328503
User 41229 improves AUC. Keeping the model.
Training on augumented user 28607 35/50 current_auc = 0.6246980676328503
User 28607 AUC after training: 0.6246980676328503
User 28607 does not improve AUC. Reverting changes.
Training on augumented user 90292 36/50 current_auc = 0.6246980676328503
User 90292 AUC after training: 0.6216787439613526
User 90292 does not improve AUC. Reverting changes.
Training on augumented user 70876 37/50 current_auc = 0.6246980676328503
User 70876 AUC after training: 0.6244967793880838
User 70876 does not improve AUC. Reverting changes.
Training on augumented user 118451 38/50 current_auc = 0.6246980676328503
User 118451 AUC after training: 0.6248993558776168
User 118451 improves AUC. Keeping the model.
Training on augumented user 83066 39/50 current_auc = 0.6248993558776168
User 83066 AUC after training: 0.6242954911433173
User 83066 does not improve AUC. Reverting changes.
Training on augumented user 93949 40/50 current_auc = 0.6248993558776168
User 93949 AUC after training: 0.6238929146537842
User 93949 does not improve AUC. Reverting changes.
Training on augumented user 21867 41/50 current_auc = 0.6248993558776168
User 21867 AUC after training: 0.6244967793880838
User 21867 does not improve AUC. Reverting changes.
Training on augumented user 105226 42/50 current_auc = 0.6248993558776168
User 105226 AUC after training: 0.6248993558776167
User 105226 does not improve AUC. Reverting changes.
Training on augumented user 62628 43/50 current_auc = 0.6248993558776168
User 62628 AUC after training: 0.6244967793880837
User 62628 does not improve AUC. Reverting changes.
Training on augumented user 115811 44/50 current_auc = 0.6248993558776168
User 115811 AUC after training: 0.6235909822866346
User 115811 does not improve AUC. Reverting changes.
Training on augumented user 102000 45/50 current_auc = 0.6248993558776168
User 102000 AUC after training: 0.6243961352657005
User 102000 does not improve AUC. Reverting changes.
Training on augumented user 39182 46/50 current_auc = 0.6248993558776168
User 39182 AUC after training: 0.6244967793880837
User 39182 does not improve AUC. Reverting changes.
Training on augumented user 50756 47/50 current_auc = 0.6248993558776168
User 50756 AUC after training: 0.6251006441223832
User 50756 improves AUC. Keeping the model.
Training on augumented user 89425 48/50 current_auc = 0.6251006441223832
User 89425 AUC after training: 0.6242954911433172
User 89425 does not improve AUC. Reverting changes.
Training on augumented user 18480 49/50 current_auc = 0.6251006441223832
User 18480 AUC after training: 0.6244967793880838
User 18480 does not improve AUC. Reverting changes.
[2024-12-02 18:45:43.150089] start test user 99015 122/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:45:43.841340] start test user 99015 122/567 recall augumented users by random, augumented_users = [34518, 19819, 59930, 104517, 38726, 68440, 45625, 55457, 113233, 84772, 79655, 650, 33704, 66486, 16447, 111197, 77758, 56277, 63612, 52704, 88735, 50604, 70146, 124363, 5958, 64747, 106929, 95527, 33302, 39130, 19333, 37211, 62096, 136843, 34438, 14918, 52372, 1738, 17592, 22123, 133317, 28518, 58907, 32376, 59325, 26935, 48900, 88155, 8455, 48976]
[2024-12-02 18:45:43.858629] user = 99015 Cloud 122/567
[2024-12-02 18:45:43.874583] user = 99015 Local 122/567
[2024-12-02 18:45:43.926922] user = 99015 Local+ 122/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:45:46.549617] user = 99015 MPDA- 122/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7172342621259029
Training on augumented user 34518 0/50 current_auc = 0.7172342621259029
User 34518 AUC after training: 0.7234262125902993
User 34518 improves AUC. Keeping the model.
Training on augumented user 19819 1/50 current_auc = 0.7234262125902993
User 19819 AUC after training: 0.7213622291021672
User 19819 does not improve AUC. Reverting changes.
Training on augumented user 59930 2/50 current_auc = 0.7234262125902993
User 59930 AUC after training: 0.7223942208462333
User 59930 does not improve AUC. Reverting changes.
Training on augumented user 104517 3/50 current_auc = 0.7234262125902993
User 104517 AUC after training: 0.7254901960784313
User 104517 improves AUC. Keeping the model.
Training on augumented user 38726 4/50 current_auc = 0.7254901960784313
User 38726 AUC after training: 0.7213622291021672
User 38726 does not improve AUC. Reverting changes.
Training on augumented user 68440 5/50 current_auc = 0.7254901960784313
User 68440 AUC after training: 0.7213622291021673
User 68440 does not improve AUC. Reverting changes.
Training on augumented user 45625 6/50 current_auc = 0.7254901960784313
User 45625 AUC after training: 0.7234262125902993
User 45625 does not improve AUC. Reverting changes.
Training on augumented user 55457 7/50 current_auc = 0.7254901960784313
User 55457 AUC after training: 0.7244582043343653
User 55457 does not improve AUC. Reverting changes.
Training on augumented user 113233 8/50 current_auc = 0.7254901960784313
User 113233 AUC after training: 0.7223942208462333
User 113233 does not improve AUC. Reverting changes.
Training on augumented user 84772 9/50 current_auc = 0.7254901960784313
User 84772 AUC after training: 0.7213622291021672
User 84772 does not improve AUC. Reverting changes.
Training on augumented user 79655 10/50 current_auc = 0.7254901960784313
User 79655 AUC after training: 0.7244582043343653
User 79655 does not improve AUC. Reverting changes.
Training on augumented user 650 11/50 current_auc = 0.7254901960784313
User 650 AUC after training: 0.7223942208462332
User 650 does not improve AUC. Reverting changes.
Training on augumented user 33704 12/50 current_auc = 0.7254901960784313
User 33704 AUC after training: 0.7213622291021672
User 33704 does not improve AUC. Reverting changes.
Training on augumented user 66486 13/50 current_auc = 0.7254901960784313
User 66486 AUC after training: 0.7192982456140351
User 66486 does not improve AUC. Reverting changes.
Training on augumented user 16447 14/50 current_auc = 0.7254901960784313
User 16447 AUC after training: 0.7213622291021672
User 16447 does not improve AUC. Reverting changes.
Training on augumented user 111197 15/50 current_auc = 0.7254901960784313
User 111197 AUC after training: 0.7203302373581011
User 111197 does not improve AUC. Reverting changes.
Training on augumented user 77758 16/50 current_auc = 0.7254901960784313
User 77758 AUC after training: 0.7275541795665634
User 77758 improves AUC. Keeping the model.
Training on augumented user 56277 17/50 current_auc = 0.7275541795665634
User 56277 AUC after training: 0.7223942208462333
User 56277 does not improve AUC. Reverting changes.
Training on augumented user 63612 18/50 current_auc = 0.7275541795665634
User 63612 AUC after training: 0.7254901960784313
User 63612 does not improve AUC. Reverting changes.
Training on augumented user 52704 19/50 current_auc = 0.7275541795665634
User 52704 AUC after training: 0.7203302373581012
User 52704 does not improve AUC. Reverting changes.
Training on augumented user 88735 20/50 current_auc = 0.7275541795665634
User 88735 AUC after training: 0.7244582043343653
User 88735 does not improve AUC. Reverting changes.
Training on augumented user 50604 21/50 current_auc = 0.7275541795665634
User 50604 AUC after training: 0.7244582043343654
User 50604 does not improve AUC. Reverting changes.
Training on augumented user 70146 22/50 current_auc = 0.7275541795665634
User 70146 AUC after training: 0.7275541795665634
User 70146 does not improve AUC. Reverting changes.
Training on augumented user 124363 23/50 current_auc = 0.7275541795665634
User 124363 AUC after training: 0.7203302373581012
User 124363 does not improve AUC. Reverting changes.
Training on augumented user 5958 24/50 current_auc = 0.7275541795665634
User 5958 AUC after training: 0.7254901960784313
User 5958 does not improve AUC. Reverting changes.
Training on augumented user 64747 25/50 current_auc = 0.7275541795665634
User 64747 AUC after training: 0.7244582043343653
User 64747 does not improve AUC. Reverting changes.
Training on augumented user 106929 26/50 current_auc = 0.7275541795665634
User 106929 AUC after training: 0.7203302373581012
User 106929 does not improve AUC. Reverting changes.
Training on augumented user 95527 27/50 current_auc = 0.7275541795665634
User 95527 AUC after training: 0.7244582043343653
User 95527 does not improve AUC. Reverting changes.
Training on augumented user 33302 28/50 current_auc = 0.7275541795665634
User 33302 AUC after training: 0.7265221878224974
User 33302 does not improve AUC. Reverting changes.
Training on augumented user 39130 29/50 current_auc = 0.7275541795665634
User 39130 AUC after training: 0.7244582043343653
User 39130 does not improve AUC. Reverting changes.
Training on augumented user 19333 30/50 current_auc = 0.7275541795665634
User 19333 AUC after training: 0.7234262125902993
User 19333 does not improve AUC. Reverting changes.
Training on augumented user 37211 31/50 current_auc = 0.7275541795665634
User 37211 AUC after training: 0.7244582043343654
User 37211 does not improve AUC. Reverting changes.
Training on augumented user 62096 32/50 current_auc = 0.7275541795665634
User 62096 AUC after training: 0.7234262125902993
User 62096 does not improve AUC. Reverting changes.
Training on augumented user 136843 33/50 current_auc = 0.7275541795665634
User 136843 AUC after training: 0.7275541795665634
User 136843 does not improve AUC. Reverting changes.
Training on augumented user 34438 34/50 current_auc = 0.7275541795665634
User 34438 AUC after training: 0.7223942208462332
User 34438 does not improve AUC. Reverting changes.
Training on augumented user 14918 35/50 current_auc = 0.7275541795665634
User 14918 AUC after training: 0.7254901960784313
User 14918 does not improve AUC. Reverting changes.
Training on augumented user 52372 36/50 current_auc = 0.7275541795665634
User 52372 AUC after training: 0.7244582043343653
User 52372 does not improve AUC. Reverting changes.
Training on augumented user 1738 37/50 current_auc = 0.7275541795665634
User 1738 AUC after training: 0.7223942208462333
User 1738 does not improve AUC. Reverting changes.
Training on augumented user 17592 38/50 current_auc = 0.7275541795665634
User 17592 AUC after training: 0.7275541795665634
User 17592 does not improve AUC. Reverting changes.
Training on augumented user 22123 39/50 current_auc = 0.7275541795665634
User 22123 AUC after training: 0.7265221878224974
User 22123 does not improve AUC. Reverting changes.
Training on augumented user 133317 40/50 current_auc = 0.7275541795665634
User 133317 AUC after training: 0.7213622291021672
User 133317 does not improve AUC. Reverting changes.
Training on augumented user 28518 41/50 current_auc = 0.7275541795665634
User 28518 AUC after training: 0.7254901960784313
User 28518 does not improve AUC. Reverting changes.
Training on augumented user 58907 42/50 current_auc = 0.7275541795665634
User 58907 AUC after training: 0.7265221878224974
User 58907 does not improve AUC. Reverting changes.
Training on augumented user 32376 43/50 current_auc = 0.7275541795665634
User 32376 AUC after training: 0.7265221878224974
User 32376 does not improve AUC. Reverting changes.
Training on augumented user 59325 44/50 current_auc = 0.7275541795665634
User 59325 AUC after training: 0.7265221878224974
User 59325 does not improve AUC. Reverting changes.
Training on augumented user 26935 45/50 current_auc = 0.7275541795665634
User 26935 AUC after training: 0.7234262125902993
User 26935 does not improve AUC. Reverting changes.
Training on augumented user 48900 46/50 current_auc = 0.7275541795665634
User 48900 AUC after training: 0.7265221878224974
User 48900 does not improve AUC. Reverting changes.
Training on augumented user 88155 47/50 current_auc = 0.7275541795665634
User 88155 AUC after training: 0.7234262125902993
User 88155 does not improve AUC. Reverting changes.
Training on augumented user 8455 48/50 current_auc = 0.7275541795665634
User 8455 AUC after training: 0.7223942208462332
User 8455 does not improve AUC. Reverting changes.
Training on augumented user 48976 49/50 current_auc = 0.7275541795665634
User 48976 AUC after training: 0.7234262125902993
User 48976 does not improve AUC. Reverting changes.
[2024-12-02 18:46:16.329189] start test user 99054 123/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:46:16.992707] start test user 99054 123/567 recall augumented users by random, augumented_users = [45351, 108315, 30828, 46356, 110532, 127663, 125937, 103652, 8092, 111196, 132267, 5017, 29367, 127145, 35714, 73230, 26952, 48657, 11858, 61070, 138204, 3264, 114049, 138222, 120301, 88801, 137142, 4888, 94727, 83544, 35809, 6850, 101472, 8504, 31184, 46661, 31209, 41393, 124146, 85325, 23253, 51963, 39844, 76882, 10418, 85092, 44022, 27934, 93550, 90854]
[2024-12-02 18:46:17.020151] user = 99054 Cloud 123/567
[2024-12-02 18:46:17.109316] user = 99054 Local 123/567
[2024-12-02 18:46:17.175724] user = 99054 Local+ 123/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:46:19.630278] user = 99054 MPDA- 123/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.675705329153605
Training on augumented user 45351 0/50 current_auc = 0.675705329153605
User 45351 AUC after training: 0.6755485893416928
User 45351 does not improve AUC. Reverting changes.
Training on augumented user 108315 1/50 current_auc = 0.675705329153605
User 108315 AUC after training: 0.6757575757575758
User 108315 improves AUC. Keeping the model.
Training on augumented user 30828 2/50 current_auc = 0.6757575757575758
User 30828 AUC after training: 0.6762277951933124
User 30828 improves AUC. Keeping the model.
Training on augumented user 46356 3/50 current_auc = 0.6762277951933124
User 46356 AUC after training: 0.6758098223615465
User 46356 does not improve AUC. Reverting changes.
Training on augumented user 110532 4/50 current_auc = 0.6762277951933124
User 110532 AUC after training: 0.6757575757575758
User 110532 does not improve AUC. Reverting changes.
Training on augumented user 127663 5/50 current_auc = 0.6762277951933124
User 127663 AUC after training: 0.6762277951933124
User 127663 does not improve AUC. Reverting changes.
Training on augumented user 125937 6/50 current_auc = 0.6762277951933124
User 125937 AUC after training: 0.6760710553814002
User 125937 does not improve AUC. Reverting changes.
Training on augumented user 103652 7/50 current_auc = 0.6762277951933124
User 103652 AUC after training: 0.6753918495297806
User 103652 does not improve AUC. Reverting changes.
Training on augumented user 8092 8/50 current_auc = 0.6762277951933124
User 8092 AUC after training: 0.6762800417972832
User 8092 improves AUC. Keeping the model.
Training on augumented user 111196 9/50 current_auc = 0.6762800417972832
User 111196 AUC after training: 0.6768547544409613
User 111196 improves AUC. Keeping the model.
Training on augumented user 132267 10/50 current_auc = 0.6768547544409613
User 132267 AUC after training: 0.6764890282131661
User 132267 does not improve AUC. Reverting changes.
Training on augumented user 5017 11/50 current_auc = 0.6768547544409613
User 5017 AUC after training: 0.6767502612330198
User 5017 does not improve AUC. Reverting changes.
Training on augumented user 29367 12/50 current_auc = 0.6768547544409613
User 29367 AUC after training: 0.6764367816091954
User 29367 does not improve AUC. Reverting changes.
Training on augumented user 127145 13/50 current_auc = 0.6768547544409613
User 127145 AUC after training: 0.6760188087774295
User 127145 does not improve AUC. Reverting changes.
Training on augumented user 35714 14/50 current_auc = 0.6768547544409613
User 35714 AUC after training: 0.6767502612330198
User 35714 does not improve AUC. Reverting changes.
Training on augumented user 73230 15/50 current_auc = 0.6768547544409613
User 73230 AUC after training: 0.6770637408568443
User 73230 improves AUC. Keeping the model.
Training on augumented user 26952 16/50 current_auc = 0.6770637408568443
User 26952 AUC after training: 0.6768547544409613
User 26952 does not improve AUC. Reverting changes.
Training on augumented user 48657 17/50 current_auc = 0.6770637408568443
User 48657 AUC after training: 0.6775862068965517
User 48657 improves AUC. Keeping the model.
Training on augumented user 11858 18/50 current_auc = 0.6775862068965517
User 11858 AUC after training: 0.6769592476489029
User 11858 does not improve AUC. Reverting changes.
Training on augumented user 61070 19/50 current_auc = 0.6775862068965517
User 61070 AUC after training: 0.6776907001044932
User 61070 improves AUC. Keeping the model.
Training on augumented user 138204 20/50 current_auc = 0.6776907001044932
User 138204 AUC after training: 0.6776384535005224
User 138204 does not improve AUC. Reverting changes.
Training on augumented user 3264 21/50 current_auc = 0.6776907001044932
User 3264 AUC after training: 0.6778996865203761
User 3264 improves AUC. Keeping the model.
Training on augumented user 114049 22/50 current_auc = 0.6778996865203761
User 114049 AUC after training: 0.6769592476489029
User 114049 does not improve AUC. Reverting changes.
Training on augumented user 138222 23/50 current_auc = 0.6778996865203761
User 138222 AUC after training: 0.6754963427377221
User 138222 does not improve AUC. Reverting changes.
Training on augumented user 120301 24/50 current_auc = 0.6778996865203761
User 120301 AUC after training: 0.6777951933124347
User 120301 does not improve AUC. Reverting changes.
Training on augumented user 88801 25/50 current_auc = 0.6778996865203761
User 88801 AUC after training: 0.6778996865203762
User 88801 improves AUC. Keeping the model.
Training on augumented user 137142 26/50 current_auc = 0.6778996865203762
User 137142 AUC after training: 0.6769070010449321
User 137142 does not improve AUC. Reverting changes.
Training on augumented user 4888 27/50 current_auc = 0.6778996865203762
User 4888 AUC after training: 0.6775339602925811
User 4888 does not improve AUC. Reverting changes.
Training on augumented user 94727 28/50 current_auc = 0.6778996865203762
User 94727 AUC after training: 0.6779519331243469
User 94727 improves AUC. Keeping the model.
Training on augumented user 83544 29/50 current_auc = 0.6779519331243469
User 83544 AUC after training: 0.6783699059561128
User 83544 improves AUC. Keeping the model.
Training on augumented user 35809 30/50 current_auc = 0.6783699059561128
User 35809 AUC after training: 0.6780041797283176
User 35809 does not improve AUC. Reverting changes.
Training on augumented user 6850 31/50 current_auc = 0.6783699059561128
User 6850 AUC after training: 0.6778474399164054
User 6850 does not improve AUC. Reverting changes.
Training on augumented user 101472 32/50 current_auc = 0.6783699059561128
User 101472 AUC after training: 0.6784743991640544
User 101472 improves AUC. Keeping the model.
Training on augumented user 8504 33/50 current_auc = 0.6784743991640544
User 8504 AUC after training: 0.6781609195402298
User 8504 does not improve AUC. Reverting changes.
Training on augumented user 31184 34/50 current_auc = 0.6784743991640544
User 31184 AUC after training: 0.6786311389759666
User 31184 improves AUC. Keeping the model.
Training on augumented user 46661 35/50 current_auc = 0.6786311389759666
User 46661 AUC after training: 0.6788401253918496
User 46661 improves AUC. Keeping the model.
Training on augumented user 31209 36/50 current_auc = 0.6788401253918496
User 31209 AUC after training: 0.6792580982236155
User 31209 improves AUC. Keeping the model.
Training on augumented user 41393 37/50 current_auc = 0.6792580982236155
User 41393 AUC after training: 0.6785788923719959
User 41393 does not improve AUC. Reverting changes.
Training on augumented user 124146 38/50 current_auc = 0.6792580982236155
User 124146 AUC after training: 0.6749738766980146
User 124146 does not improve AUC. Reverting changes.
Training on augumented user 85325 39/50 current_auc = 0.6792580982236155
User 85325 AUC after training: 0.6783699059561128
User 85325 does not improve AUC. Reverting changes.
Training on augumented user 23253 40/50 current_auc = 0.6792580982236155
User 23253 AUC after training: 0.6792058516196448
User 23253 does not improve AUC. Reverting changes.
Training on augumented user 51963 41/50 current_auc = 0.6792580982236155
User 51963 AUC after training: 0.6788401253918496
User 51963 does not improve AUC. Reverting changes.
Training on augumented user 39844 42/50 current_auc = 0.6792580982236155
User 39844 AUC after training: 0.6783699059561128
User 39844 does not improve AUC. Reverting changes.
Training on augumented user 76882 43/50 current_auc = 0.6792580982236155
User 76882 AUC after training: 0.6792058516196448
User 76882 does not improve AUC. Reverting changes.
Training on augumented user 10418 44/50 current_auc = 0.6792580982236155
User 10418 AUC after training: 0.6788401253918496
User 10418 does not improve AUC. Reverting changes.
Training on augumented user 85092 45/50 current_auc = 0.6792580982236155
User 85092 AUC after training: 0.6791013584117033
User 85092 does not improve AUC. Reverting changes.
Training on augumented user 44022 46/50 current_auc = 0.6792580982236155
User 44022 AUC after training: 0.6790491118077325
User 44022 does not improve AUC. Reverting changes.
Training on augumented user 27934 47/50 current_auc = 0.6792580982236155
User 27934 AUC after training: 0.6783699059561129
User 27934 does not improve AUC. Reverting changes.
Training on augumented user 93550 48/50 current_auc = 0.6792580982236155
User 93550 AUC after training: 0.6791013584117033
User 93550 does not improve AUC. Reverting changes.
Training on augumented user 90854 49/50 current_auc = 0.6792580982236155
User 90854 AUC after training: 0.6787878787878787
User 90854 does not improve AUC. Reverting changes.
[2024-12-02 18:46:53.810319] start test user 99096 124/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:46:54.646245] start test user 99096 124/567 recall augumented users by random, augumented_users = [111286, 43329, 6108, 34992, 65539, 15875, 62937, 61608, 90805, 111660, 95074, 69942, 73020, 11762, 77158, 130552, 110662, 21099, 24115, 60005, 136326, 42924, 66616, 74784, 48627, 104216, 75405, 107147, 100026, 94108, 105866, 32038, 114975, 61680, 21438, 125549, 121830, 71204, 65907, 28105, 133145, 59956, 58279, 44411, 72523, 93790, 10111, 49761, 111979, 76433]
[2024-12-02 18:46:54.662751] user = 99096 Cloud 124/567
[2024-12-02 18:46:54.700456] user = 99096 Local 124/567
[2024-12-02 18:46:54.873797] user = 99096 Local+ 124/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:46:58.311530] user = 99096 MPDA- 124/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6397630507219548
Training on augumented user 111286 0/50 current_auc = 0.6397630507219548
User 111286 AUC after training: 0.6401332839689005
User 111286 improves AUC. Keeping the model.
Training on augumented user 43329 1/50 current_auc = 0.6401332839689005
User 43329 AUC after training: 0.6397630507219548
User 43329 does not improve AUC. Reverting changes.
Training on augumented user 6108 2/50 current_auc = 0.6401332839689005
User 6108 AUC after training: 0.6406886338393188
User 6108 improves AUC. Keeping the model.
Training on augumented user 34992 3/50 current_auc = 0.6406886338393188
User 34992 AUC after training: 0.6393928174750093
User 34992 does not improve AUC. Reverting changes.
Training on augumented user 65539 4/50 current_auc = 0.6406886338393188
User 65539 AUC after training: 0.6443909663087746
User 65539 improves AUC. Keeping the model.
Training on augumented user 15875 5/50 current_auc = 0.6443909663087746
User 15875 AUC after training: 0.6429100333209923
User 15875 does not improve AUC. Reverting changes.
Training on augumented user 62937 6/50 current_auc = 0.6443909663087746
User 62937 AUC after training: 0.6440207330618289
User 62937 does not improve AUC. Reverting changes.
Training on augumented user 61608 7/50 current_auc = 0.6443909663087746
User 61608 AUC after training: 0.6432802665679379
User 61608 does not improve AUC. Reverting changes.
Training on augumented user 90805 8/50 current_auc = 0.6443909663087746
User 90805 AUC after training: 0.6421695668271011
User 90805 does not improve AUC. Reverting changes.
Training on augumented user 111660 9/50 current_auc = 0.6443909663087746
User 111660 AUC after training: 0.6443909663087747
User 111660 improves AUC. Keeping the model.
Training on augumented user 95074 10/50 current_auc = 0.6443909663087747
User 95074 AUC after training: 0.6412439837097371
User 95074 does not improve AUC. Reverting changes.
Training on augumented user 69942 11/50 current_auc = 0.6443909663087747
User 69942 AUC after training: 0.6429100333209923
User 69942 does not improve AUC. Reverting changes.
Training on augumented user 73020 12/50 current_auc = 0.6443909663087747
User 73020 AUC after training: 0.6429100333209923
User 73020 does not improve AUC. Reverting changes.
Training on augumented user 11762 13/50 current_auc = 0.6443909663087747
User 11762 AUC after training: 0.6436504998148834
User 11762 does not improve AUC. Reverting changes.
Training on augumented user 77158 14/50 current_auc = 0.6443909663087747
User 77158 AUC after training: 0.6432802665679378
User 77158 does not improve AUC. Reverting changes.
Training on augumented user 130552 15/50 current_auc = 0.6443909663087747
User 130552 AUC after training: 0.6434653831914107
User 130552 does not improve AUC. Reverting changes.
Training on augumented user 110662 16/50 current_auc = 0.6443909663087747
User 110662 AUC after training: 0.6432802665679378
User 110662 does not improve AUC. Reverting changes.
Training on augumented user 21099 17/50 current_auc = 0.6443909663087747
User 21099 AUC after training: 0.6425398000740467
User 21099 does not improve AUC. Reverting changes.
Training on augumented user 24115 18/50 current_auc = 0.6443909663087747
User 24115 AUC after training: 0.6432802665679379
User 24115 does not improve AUC. Reverting changes.
Training on augumented user 60005 19/50 current_auc = 0.6443909663087747
User 60005 AUC after training: 0.642169566827101
User 60005 does not improve AUC. Reverting changes.
Training on augumented user 136326 20/50 current_auc = 0.6443909663087747
User 136326 AUC after training: 0.64142910033321
User 136326 does not improve AUC. Reverting changes.
Training on augumented user 42924 21/50 current_auc = 0.6443909663087747
User 42924 AUC after training: 0.6421695668271011
User 42924 does not improve AUC. Reverting changes.
Training on augumented user 66616 22/50 current_auc = 0.6443909663087747
User 66616 AUC after training: 0.6436504998148834
User 66616 does not improve AUC. Reverting changes.
Training on augumented user 74784 23/50 current_auc = 0.6443909663087747
User 74784 AUC after training: 0.6421695668271011
User 74784 does not improve AUC. Reverting changes.
Training on augumented user 48627 24/50 current_auc = 0.6443909663087747
User 48627 AUC after training: 0.6440207330618289
User 48627 does not improve AUC. Reverting changes.
Training on augumented user 104216 25/50 current_auc = 0.6443909663087747
User 104216 AUC after training: 0.6429100333209923
User 104216 does not improve AUC. Reverting changes.
Training on augumented user 75405 26/50 current_auc = 0.6443909663087747
User 75405 AUC after training: 0.6421695668271011
User 75405 does not improve AUC. Reverting changes.
Training on augumented user 107147 27/50 current_auc = 0.6443909663087747
User 107147 AUC after training: 0.6436504998148834
User 107147 does not improve AUC. Reverting changes.
Training on augumented user 100026 28/50 current_auc = 0.6443909663087747
User 100026 AUC after training: 0.6425398000740468
User 100026 does not improve AUC. Reverting changes.
Training on augumented user 94108 29/50 current_auc = 0.6443909663087747
User 94108 AUC after training: 0.6425398000740467
User 94108 does not improve AUC. Reverting changes.
Training on augumented user 105866 30/50 current_auc = 0.6443909663087747
User 105866 AUC after training: 0.6425398000740467
User 105866 does not improve AUC. Reverting changes.
Training on augumented user 32038 31/50 current_auc = 0.6443909663087747
User 32038 AUC after training: 0.6436504998148835
User 32038 does not improve AUC. Reverting changes.
Training on augumented user 114975 32/50 current_auc = 0.6443909663087747
User 114975 AUC after training: 0.644020733061829
User 114975 does not improve AUC. Reverting changes.
Training on augumented user 61680 33/50 current_auc = 0.6443909663087747
User 61680 AUC after training: 0.6436504998148834
User 61680 does not improve AUC. Reverting changes.
Training on augumented user 21438 34/50 current_auc = 0.6443909663087747
User 21438 AUC after training: 0.6436504998148835
User 21438 does not improve AUC. Reverting changes.
Training on augumented user 125549 35/50 current_auc = 0.6443909663087747
User 125549 AUC after training: 0.6421695668271011
User 125549 does not improve AUC. Reverting changes.
Training on augumented user 121830 36/50 current_auc = 0.6443909663087747
User 121830 AUC after training: 0.6432802665679379
User 121830 does not improve AUC. Reverting changes.
Training on augumented user 71204 37/50 current_auc = 0.6443909663087747
User 71204 AUC after training: 0.6436504998148835
User 71204 does not improve AUC. Reverting changes.
Training on augumented user 65907 38/50 current_auc = 0.6443909663087747
User 65907 AUC after training: 0.6429100333209922
User 65907 does not improve AUC. Reverting changes.
Training on augumented user 28105 39/50 current_auc = 0.6443909663087747
User 28105 AUC after training: 0.6429100333209924
User 28105 does not improve AUC. Reverting changes.
Training on augumented user 133145 40/50 current_auc = 0.6443909663087747
User 133145 AUC after training: 0.6432802665679378
User 133145 does not improve AUC. Reverting changes.
Training on augumented user 59956 41/50 current_auc = 0.6443909663087747
User 59956 AUC after training: 0.6432802665679379
User 59956 does not improve AUC. Reverting changes.
Training on augumented user 58279 42/50 current_auc = 0.6443909663087747
User 58279 AUC after training: 0.6429100333209923
User 58279 does not improve AUC. Reverting changes.
Training on augumented user 44411 43/50 current_auc = 0.6443909663087747
User 44411 AUC after training: 0.644020733061829
User 44411 does not improve AUC. Reverting changes.
Training on augumented user 72523 44/50 current_auc = 0.6443909663087747
User 72523 AUC after training: 0.6429100333209923
User 72523 does not improve AUC. Reverting changes.
Training on augumented user 93790 45/50 current_auc = 0.6443909663087747
User 93790 AUC after training: 0.6429100333209923
User 93790 does not improve AUC. Reverting changes.
Training on augumented user 10111 46/50 current_auc = 0.6443909663087747
User 10111 AUC after training: 0.6440207330618289
User 10111 does not improve AUC. Reverting changes.
Training on augumented user 49761 47/50 current_auc = 0.6443909663087747
User 49761 AUC after training: 0.6436504998148834
User 49761 does not improve AUC. Reverting changes.
Training on augumented user 111979 48/50 current_auc = 0.6443909663087747
User 111979 AUC after training: 0.644020733061829
User 111979 does not improve AUC. Reverting changes.
Training on augumented user 76433 49/50 current_auc = 0.6443909663087747
User 76433 AUC after training: 0.6412439837097371
User 76433 does not improve AUC. Reverting changes.
[2024-12-02 18:47:29.889348] start test user 99097 125/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:47:30.506811] start test user 99097 125/567 recall augumented users by random, augumented_users = [62889, 27697, 129978, 134749, 69979, 75436, 95803, 99116, 132253, 47561, 6786, 112740, 26708, 58002, 116071, 20453, 71311, 10303, 123371, 85604, 38462, 103759, 119144, 4915, 38735, 118178, 57948, 27800, 39831, 64896, 831, 43572, 22367, 38078, 58037, 106329, 90588, 29218, 52297, 57683, 61066, 47344, 37753, 97813, 29863, 112607, 78498, 17298, 3946, 102238]
[2024-12-02 18:47:30.522329] user = 99097 Cloud 125/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:47:30.535680] user = 99097 Local 125/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:47:30.592568] user = 99097 Local+ 125/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:47:34.418823] user = 99097 MPDA- 125/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 62889 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62889 AUC after training: 0.5
User 62889 does not improve AUC. Reverting changes.
Training on augumented user 27697 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27697 AUC after training: 0.5
User 27697 does not improve AUC. Reverting changes.
Training on augumented user 129978 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129978 AUC after training: 0.5
User 129978 does not improve AUC. Reverting changes.
Training on augumented user 134749 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134749 AUC after training: 0.5
User 134749 does not improve AUC. Reverting changes.
Training on augumented user 69979 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 69979 AUC after training: 0.5
User 69979 does not improve AUC. Reverting changes.
Training on augumented user 75436 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75436 AUC after training: 0.5
User 75436 does not improve AUC. Reverting changes.
Training on augumented user 95803 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95803 AUC after training: 0.5
User 95803 does not improve AUC. Reverting changes.
Training on augumented user 99116 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99116 AUC after training: 0.5
User 99116 does not improve AUC. Reverting changes.
Training on augumented user 132253 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132253 AUC after training: 0.5
User 132253 does not improve AUC. Reverting changes.
Training on augumented user 47561 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47561 AUC after training: 0.5
User 47561 does not improve AUC. Reverting changes.
Training on augumented user 6786 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6786 AUC after training: 0.5
User 6786 does not improve AUC. Reverting changes.
Training on augumented user 112740 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112740 AUC after training: 0.5
User 112740 does not improve AUC. Reverting changes.
Training on augumented user 26708 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26708 AUC after training: 0.5
User 26708 does not improve AUC. Reverting changes.
Training on augumented user 58002 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58002 AUC after training: 0.5
User 58002 does not improve AUC. Reverting changes.
Training on augumented user 116071 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116071 AUC after training: 0.5
User 116071 does not improve AUC. Reverting changes.
Training on augumented user 20453 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20453 AUC after training: 0.5
User 20453 does not improve AUC. Reverting changes.
Training on augumented user 71311 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71311 AUC after training: 0.5
User 71311 does not improve AUC. Reverting changes.
Training on augumented user 10303 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10303 AUC after training: 0.5
User 10303 does not improve AUC. Reverting changes.
Training on augumented user 123371 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123371 AUC after training: 0.5
User 123371 does not improve AUC. Reverting changes.
Training on augumented user 85604 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85604 AUC after training: 0.5
User 85604 does not improve AUC. Reverting changes.
Training on augumented user 38462 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38462 AUC after training: 0.5
User 38462 does not improve AUC. Reverting changes.
Training on augumented user 103759 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103759 AUC after training: 0.5
User 103759 does not improve AUC. Reverting changes.
Training on augumented user 119144 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 119144 AUC after training: 0.5
User 119144 does not improve AUC. Reverting changes.
Training on augumented user 4915 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4915 AUC after training: 0.5
User 4915 does not improve AUC. Reverting changes.
Training on augumented user 38735 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38735 AUC after training: 0.5
User 38735 does not improve AUC. Reverting changes.
Training on augumented user 118178 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118178 AUC after training: 0.5
User 118178 does not improve AUC. Reverting changes.
Training on augumented user 57948 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57948 AUC after training: 0.5
User 57948 does not improve AUC. Reverting changes.
Training on augumented user 27800 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27800 AUC after training: 0.5
User 27800 does not improve AUC. Reverting changes.
Training on augumented user 39831 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 39831 AUC after training: 0.5
User 39831 does not improve AUC. Reverting changes.
Training on augumented user 64896 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64896 AUC after training: 0.5
User 64896 does not improve AUC. Reverting changes.
Training on augumented user 831 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 831 AUC after training: 0.5
User 831 does not improve AUC. Reverting changes.
Training on augumented user 43572 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43572 AUC after training: 0.5
User 43572 does not improve AUC. Reverting changes.
Training on augumented user 22367 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22367 AUC after training: 0.5
User 22367 does not improve AUC. Reverting changes.
Training on augumented user 38078 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38078 AUC after training: 0.5
User 38078 does not improve AUC. Reverting changes.
Training on augumented user 58037 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58037 AUC after training: 0.5
User 58037 does not improve AUC. Reverting changes.
Training on augumented user 106329 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106329 AUC after training: 0.5
User 106329 does not improve AUC. Reverting changes.
Training on augumented user 90588 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90588 AUC after training: 0.5
User 90588 does not improve AUC. Reverting changes.
Training on augumented user 29218 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29218 AUC after training: 0.5
User 29218 does not improve AUC. Reverting changes.
Training on augumented user 52297 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 52297 AUC after training: 0.5
User 52297 does not improve AUC. Reverting changes.
Training on augumented user 57683 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57683 AUC after training: 0.5
User 57683 does not improve AUC. Reverting changes.
Training on augumented user 61066 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61066 AUC after training: 0.5
User 61066 does not improve AUC. Reverting changes.
Training on augumented user 47344 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47344 AUC after training: 0.5
User 47344 does not improve AUC. Reverting changes.
Training on augumented user 37753 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37753 AUC after training: 0.5
User 37753 does not improve AUC. Reverting changes.
Training on augumented user 97813 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97813 AUC after training: 0.5
User 97813 does not improve AUC. Reverting changes.
Training on augumented user 29863 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29863 AUC after training: 0.5
User 29863 does not improve AUC. Reverting changes.
Training on augumented user 112607 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112607 AUC after training: 0.5
User 112607 does not improve AUC. Reverting changes.
Training on augumented user 78498 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 78498 AUC after training: 0.5
User 78498 does not improve AUC. Reverting changes.
Training on augumented user 17298 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 17298 AUC after training: 0.5
User 17298 does not improve AUC. Reverting changes.
Training on augumented user 3946 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3946 AUC after training: 0.5
User 3946 does not improve AUC. Reverting changes.
Training on augumented user 102238 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102238 AUC after training: 0.5
User 102238 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 18:48:07.843862] start test user 99103 126/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:48:08.572287] start test user 99103 126/567 recall augumented users by random, augumented_users = [18916, 112965, 31072, 30890, 47594, 33473, 91844, 122716, 103592, 29183, 28242, 51384, 77609, 100138, 35173, 51951, 24461, 91190, 111012, 21113, 136248, 108728, 13533, 100903, 9772, 67301, 33974, 86286, 98850, 84269, 56381, 120318, 55600, 112984, 132846, 130223, 137771, 131950, 132430, 113059, 38654, 93061, 129809, 115867, 50260, 111684, 41525, 124869, 16392, 49607]
[2024-12-02 18:48:08.589458] user = 99103 Cloud 126/567
[2024-12-02 18:48:08.607448] user = 99103 Local 126/567
[2024-12-02 18:48:08.825338] user = 99103 Local+ 126/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:48:12.153860] user = 99103 MPDA- 126/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7092198581560284
Training on augumented user 18916 0/50 current_auc = 0.7092198581560284
User 18916 AUC after training: 0.7092198581560284
User 18916 does not improve AUC. Reverting changes.
Training on augumented user 112965 1/50 current_auc = 0.7092198581560284
User 112965 AUC after training: 0.7120567375886524
User 112965 improves AUC. Keeping the model.
Training on augumented user 31072 2/50 current_auc = 0.7120567375886524
User 31072 AUC after training: 0.7092198581560284
User 31072 does not improve AUC. Reverting changes.
Training on augumented user 30890 3/50 current_auc = 0.7120567375886524
User 30890 AUC after training: 0.7099290780141844
User 30890 does not improve AUC. Reverting changes.
Training on augumented user 47594 4/50 current_auc = 0.7120567375886524
User 47594 AUC after training: 0.7120567375886524
User 47594 does not improve AUC. Reverting changes.
Training on augumented user 33473 5/50 current_auc = 0.7120567375886524
User 33473 AUC after training: 0.7085106382978723
User 33473 does not improve AUC. Reverting changes.
Training on augumented user 91844 6/50 current_auc = 0.7120567375886524
User 91844 AUC after training: 0.7085106382978723
User 91844 does not improve AUC. Reverting changes.
Training on augumented user 122716 7/50 current_auc = 0.7120567375886524
User 122716 AUC after training: 0.7120567375886524
User 122716 does not improve AUC. Reverting changes.
Training on augumented user 103592 8/50 current_auc = 0.7120567375886524
User 103592 AUC after training: 0.7120567375886525
User 103592 improves AUC. Keeping the model.
Training on augumented user 29183 9/50 current_auc = 0.7120567375886525
User 29183 AUC after training: 0.7099290780141844
User 29183 does not improve AUC. Reverting changes.
Training on augumented user 28242 10/50 current_auc = 0.7120567375886525
User 28242 AUC after training: 0.7113475177304964
User 28242 does not improve AUC. Reverting changes.
Training on augumented user 51384 11/50 current_auc = 0.7120567375886525
User 51384 AUC after training: 0.7078014184397163
User 51384 does not improve AUC. Reverting changes.
Training on augumented user 77609 12/50 current_auc = 0.7120567375886525
User 77609 AUC after training: 0.7120567375886524
User 77609 does not improve AUC. Reverting changes.
Training on augumented user 100138 13/50 current_auc = 0.7120567375886525
User 100138 AUC after training: 0.7092198581560284
User 100138 does not improve AUC. Reverting changes.
Training on augumented user 35173 14/50 current_auc = 0.7120567375886525
User 35173 AUC after training: 0.7127659574468086
User 35173 improves AUC. Keeping the model.
Training on augumented user 51951 15/50 current_auc = 0.7127659574468086
User 51951 AUC after training: 0.7099290780141845
User 51951 does not improve AUC. Reverting changes.
Training on augumented user 24461 16/50 current_auc = 0.7127659574468086
User 24461 AUC after training: 0.7113475177304964
User 24461 does not improve AUC. Reverting changes.
Training on augumented user 91190 17/50 current_auc = 0.7127659574468086
User 91190 AUC after training: 0.7092198581560284
User 91190 does not improve AUC. Reverting changes.
Training on augumented user 111012 18/50 current_auc = 0.7127659574468086
User 111012 AUC after training: 0.7092198581560284
User 111012 does not improve AUC. Reverting changes.
Training on augumented user 21113 19/50 current_auc = 0.7127659574468086
User 21113 AUC after training: 0.7120567375886525
User 21113 does not improve AUC. Reverting changes.
Training on augumented user 136248 20/50 current_auc = 0.7127659574468086
User 136248 AUC after training: 0.7120567375886525
User 136248 does not improve AUC. Reverting changes.
Training on augumented user 108728 21/50 current_auc = 0.7127659574468086
User 108728 AUC after training: 0.7092198581560284
User 108728 does not improve AUC. Reverting changes.
Training on augumented user 13533 22/50 current_auc = 0.7127659574468086
User 13533 AUC after training: 0.7127659574468086
User 13533 does not improve AUC. Reverting changes.
Training on augumented user 100903 23/50 current_auc = 0.7127659574468086
User 100903 AUC after training: 0.7070921985815604
User 100903 does not improve AUC. Reverting changes.
Training on augumented user 9772 24/50 current_auc = 0.7127659574468086
User 9772 AUC after training: 0.7113475177304964
User 9772 does not improve AUC. Reverting changes.
Training on augumented user 67301 25/50 current_auc = 0.7127659574468086
User 67301 AUC after training: 0.7120567375886524
User 67301 does not improve AUC. Reverting changes.
Training on augumented user 33974 26/50 current_auc = 0.7127659574468086
User 33974 AUC after training: 0.7113475177304964
User 33974 does not improve AUC. Reverting changes.
Training on augumented user 86286 27/50 current_auc = 0.7127659574468086
User 86286 AUC after training: 0.7127659574468086
User 86286 does not improve AUC. Reverting changes.
Training on augumented user 98850 28/50 current_auc = 0.7127659574468086
User 98850 AUC after training: 0.7120567375886525
User 98850 does not improve AUC. Reverting changes.
Training on augumented user 84269 29/50 current_auc = 0.7127659574468086
User 84269 AUC after training: 0.7106382978723405
User 84269 does not improve AUC. Reverting changes.
Training on augumented user 56381 30/50 current_auc = 0.7127659574468086
User 56381 AUC after training: 0.7113475177304964
User 56381 does not improve AUC. Reverting changes.
Training on augumented user 120318 31/50 current_auc = 0.7127659574468086
User 120318 AUC after training: 0.7120567375886525
User 120318 does not improve AUC. Reverting changes.
Training on augumented user 55600 32/50 current_auc = 0.7127659574468086
User 55600 AUC after training: 0.7106382978723405
User 55600 does not improve AUC. Reverting changes.
Training on augumented user 112984 33/50 current_auc = 0.7127659574468086
User 112984 AUC after training: 0.7113475177304964
User 112984 does not improve AUC. Reverting changes.
Training on augumented user 132846 34/50 current_auc = 0.7127659574468086
User 132846 AUC after training: 0.7106382978723405
User 132846 does not improve AUC. Reverting changes.
Training on augumented user 130223 35/50 current_auc = 0.7127659574468086
User 130223 AUC after training: 0.7120567375886524
User 130223 does not improve AUC. Reverting changes.
Training on augumented user 137771 36/50 current_auc = 0.7127659574468086
User 137771 AUC after training: 0.7127659574468086
User 137771 does not improve AUC. Reverting changes.
Training on augumented user 131950 37/50 current_auc = 0.7127659574468086
User 131950 AUC after training: 0.7092198581560284
User 131950 does not improve AUC. Reverting changes.
Training on augumented user 132430 38/50 current_auc = 0.7127659574468086
User 132430 AUC after training: 0.7099290780141844
User 132430 does not improve AUC. Reverting changes.
Training on augumented user 113059 39/50 current_auc = 0.7127659574468086
User 113059 AUC after training: 0.7113475177304964
User 113059 does not improve AUC. Reverting changes.
Training on augumented user 38654 40/50 current_auc = 0.7127659574468086
User 38654 AUC after training: 0.7099290780141844
User 38654 does not improve AUC. Reverting changes.
Training on augumented user 93061 41/50 current_auc = 0.7127659574468086
User 93061 AUC after training: 0.7113475177304964
User 93061 does not improve AUC. Reverting changes.
Training on augumented user 129809 42/50 current_auc = 0.7127659574468086
User 129809 AUC after training: 0.7113475177304964
User 129809 does not improve AUC. Reverting changes.
Training on augumented user 115867 43/50 current_auc = 0.7127659574468086
User 115867 AUC after training: 0.7063829787234043
User 115867 does not improve AUC. Reverting changes.
Training on augumented user 50260 44/50 current_auc = 0.7127659574468086
User 50260 AUC after training: 0.7092198581560284
User 50260 does not improve AUC. Reverting changes.
Training on augumented user 111684 45/50 current_auc = 0.7127659574468086
User 111684 AUC after training: 0.7092198581560284
User 111684 does not improve AUC. Reverting changes.
Training on augumented user 41525 46/50 current_auc = 0.7127659574468086
User 41525 AUC after training: 0.7127659574468086
User 41525 does not improve AUC. Reverting changes.
Training on augumented user 124869 47/50 current_auc = 0.7127659574468086
User 124869 AUC after training: 0.7127659574468086
User 124869 does not improve AUC. Reverting changes.
Training on augumented user 16392 48/50 current_auc = 0.7127659574468086
User 16392 AUC after training: 0.7120567375886525
User 16392 does not improve AUC. Reverting changes.
Training on augumented user 49607 49/50 current_auc = 0.7127659574468086
User 49607 AUC after training: 0.7106382978723405
User 49607 does not improve AUC. Reverting changes.
[2024-12-02 18:48:45.534408] start test user 99119 127/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:48:46.071059] start test user 99119 127/567 recall augumented users by random, augumented_users = [12035, 130602, 16123, 111426, 21269, 79544, 66593, 29313, 20244, 81878, 72435, 76427, 45456, 119923, 125798, 13360, 72867, 68697, 124805, 41474, 103516, 105174, 19794, 107196, 17734, 45087, 94678, 125827, 65446, 125247, 78482, 52298, 12958, 54103, 88166, 92264, 95761, 51945, 39082, 20205, 112416, 121440, 118728, 57971, 94489, 39488, 55608, 6786, 74550, 131018]
[2024-12-02 18:48:46.088412] user = 99119 Cloud 127/567
[2024-12-02 18:48:46.100540] user = 99119 Local 127/567
[2024-12-02 18:48:46.375932] user = 99119 Local+ 127/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:48:49.094977] user = 99119 MPDA- 127/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6166666666666667
Training on augumented user 12035 0/50 current_auc = 0.6166666666666667
User 12035 AUC after training: 0.6055555555555555
User 12035 does not improve AUC. Reverting changes.
Training on augumented user 130602 1/50 current_auc = 0.6166666666666667
User 130602 AUC after training: 0.6055555555555555
User 130602 does not improve AUC. Reverting changes.
Training on augumented user 16123 2/50 current_auc = 0.6166666666666667
User 16123 AUC after training: 0.6194444444444445
User 16123 improves AUC. Keeping the model.
Training on augumented user 111426 3/50 current_auc = 0.6194444444444445
User 111426 AUC after training: 0.6138888888888889
User 111426 does not improve AUC. Reverting changes.
Training on augumented user 21269 4/50 current_auc = 0.6194444444444445
User 21269 AUC after training: 0.6111111111111112
User 21269 does not improve AUC. Reverting changes.
Training on augumented user 79544 5/50 current_auc = 0.6194444444444445
User 79544 AUC after training: 0.6194444444444445
User 79544 does not improve AUC. Reverting changes.
Training on augumented user 66593 6/50 current_auc = 0.6194444444444445
User 66593 AUC after training: 0.6138888888888889
User 66593 does not improve AUC. Reverting changes.
Training on augumented user 29313 7/50 current_auc = 0.6194444444444445
User 29313 AUC after training: 0.6083333333333334
User 29313 does not improve AUC. Reverting changes.
Training on augumented user 20244 8/50 current_auc = 0.6194444444444445
User 20244 AUC after training: 0.6222222222222222
User 20244 improves AUC. Keeping the model.
Training on augumented user 81878 9/50 current_auc = 0.6222222222222222
User 81878 AUC after training: 0.6083333333333333
User 81878 does not improve AUC. Reverting changes.
Training on augumented user 72435 10/50 current_auc = 0.6222222222222222
User 72435 AUC after training: 0.6194444444444445
User 72435 does not improve AUC. Reverting changes.
Training on augumented user 76427 11/50 current_auc = 0.6222222222222222
User 76427 AUC after training: 0.6194444444444445
User 76427 does not improve AUC. Reverting changes.
Training on augumented user 45456 12/50 current_auc = 0.6222222222222222
User 45456 AUC after training: 0.6166666666666667
User 45456 does not improve AUC. Reverting changes.
Training on augumented user 119923 13/50 current_auc = 0.6222222222222222
User 119923 AUC after training: 0.6222222222222222
User 119923 does not improve AUC. Reverting changes.
Training on augumented user 125798 14/50 current_auc = 0.6222222222222222
User 125798 AUC after training: 0.6083333333333333
User 125798 does not improve AUC. Reverting changes.
Training on augumented user 13360 15/50 current_auc = 0.6222222222222222
User 13360 AUC after training: 0.6222222222222222
User 13360 does not improve AUC. Reverting changes.
Training on augumented user 72867 16/50 current_auc = 0.6222222222222222
User 72867 AUC after training: 0.6083333333333333
User 72867 does not improve AUC. Reverting changes.
Training on augumented user 68697 17/50 current_auc = 0.6222222222222222
User 68697 AUC after training: 0.6166666666666667
User 68697 does not improve AUC. Reverting changes.
Training on augumented user 124805 18/50 current_auc = 0.6222222222222222
User 124805 AUC after training: 0.6222222222222222
User 124805 does not improve AUC. Reverting changes.
Training on augumented user 41474 19/50 current_auc = 0.6222222222222222
User 41474 AUC after training: 0.6194444444444445
User 41474 does not improve AUC. Reverting changes.
Training on augumented user 103516 20/50 current_auc = 0.6222222222222222
User 103516 AUC after training: 0.6166666666666666
User 103516 does not improve AUC. Reverting changes.
Training on augumented user 105174 21/50 current_auc = 0.6222222222222222
User 105174 AUC after training: 0.6194444444444445
User 105174 does not improve AUC. Reverting changes.
Training on augumented user 19794 22/50 current_auc = 0.6222222222222222
User 19794 AUC after training: 0.6194444444444445
User 19794 does not improve AUC. Reverting changes.
Training on augumented user 107196 23/50 current_auc = 0.6222222222222222
User 107196 AUC after training: 0.6222222222222222
User 107196 does not improve AUC. Reverting changes.
Training on augumented user 17734 24/50 current_auc = 0.6222222222222222
User 17734 AUC after training: 0.6194444444444445
User 17734 does not improve AUC. Reverting changes.
Training on augumented user 45087 25/50 current_auc = 0.6222222222222222
User 45087 AUC after training: 0.6222222222222222
User 45087 does not improve AUC. Reverting changes.
Training on augumented user 94678 26/50 current_auc = 0.6222222222222222
User 94678 AUC after training: 0.6194444444444445
User 94678 does not improve AUC. Reverting changes.
Training on augumented user 125827 27/50 current_auc = 0.6222222222222222
User 125827 AUC after training: 0.6222222222222222
User 125827 does not improve AUC. Reverting changes.
Training on augumented user 65446 28/50 current_auc = 0.6222222222222222
User 65446 AUC after training: 0.6166666666666666
User 65446 does not improve AUC. Reverting changes.
Training on augumented user 125247 29/50 current_auc = 0.6222222222222222
User 125247 AUC after training: 0.6166666666666666
User 125247 does not improve AUC. Reverting changes.
Training on augumented user 78482 30/50 current_auc = 0.6222222222222222
User 78482 AUC after training: 0.6194444444444445
User 78482 does not improve AUC. Reverting changes.
Training on augumented user 52298 31/50 current_auc = 0.6222222222222222
User 52298 AUC after training: 0.611111111111111
User 52298 does not improve AUC. Reverting changes.
Training on augumented user 12958 32/50 current_auc = 0.6222222222222222
User 12958 AUC after training: 0.6222222222222222
User 12958 does not improve AUC. Reverting changes.
Training on augumented user 54103 33/50 current_auc = 0.6222222222222222
User 54103 AUC after training: 0.6222222222222222
User 54103 does not improve AUC. Reverting changes.
Training on augumented user 88166 34/50 current_auc = 0.6222222222222222
User 88166 AUC after training: 0.6138888888888888
User 88166 does not improve AUC. Reverting changes.
Training on augumented user 92264 35/50 current_auc = 0.6222222222222222
User 92264 AUC after training: 0.6166666666666667
User 92264 does not improve AUC. Reverting changes.
Training on augumented user 95761 36/50 current_auc = 0.6222222222222222
User 95761 AUC after training: 0.6194444444444445
User 95761 does not improve AUC. Reverting changes.
Training on augumented user 51945 37/50 current_auc = 0.6222222222222222
User 51945 AUC after training: 0.6166666666666667
User 51945 does not improve AUC. Reverting changes.
Training on augumented user 39082 38/50 current_auc = 0.6222222222222222
User 39082 AUC after training: 0.6194444444444444
User 39082 does not improve AUC. Reverting changes.
Training on augumented user 20205 39/50 current_auc = 0.6222222222222222
User 20205 AUC after training: 0.6194444444444445
User 20205 does not improve AUC. Reverting changes.
Training on augumented user 112416 40/50 current_auc = 0.6222222222222222
User 112416 AUC after training: 0.6194444444444445
User 112416 does not improve AUC. Reverting changes.
Training on augumented user 121440 41/50 current_auc = 0.6222222222222222
User 121440 AUC after training: 0.6222222222222222
User 121440 does not improve AUC. Reverting changes.
Training on augumented user 118728 42/50 current_auc = 0.6222222222222222
User 118728 AUC after training: 0.6166666666666667
User 118728 does not improve AUC. Reverting changes.
Training on augumented user 57971 43/50 current_auc = 0.6222222222222222
User 57971 AUC after training: 0.6166666666666666
User 57971 does not improve AUC. Reverting changes.
Training on augumented user 94489 44/50 current_auc = 0.6222222222222222
User 94489 AUC after training: 0.6194444444444445
User 94489 does not improve AUC. Reverting changes.
Training on augumented user 39488 45/50 current_auc = 0.6222222222222222
User 39488 AUC after training: 0.6222222222222222
User 39488 does not improve AUC. Reverting changes.
Training on augumented user 55608 46/50 current_auc = 0.6222222222222222
User 55608 AUC after training: 0.6194444444444445
User 55608 does not improve AUC. Reverting changes.
Training on augumented user 6786 47/50 current_auc = 0.6222222222222222
User 6786 AUC after training: 0.6222222222222222
User 6786 does not improve AUC. Reverting changes.
Training on augumented user 74550 48/50 current_auc = 0.6222222222222222
User 74550 AUC after training: 0.6111111111111112
User 74550 does not improve AUC. Reverting changes.
Training on augumented user 131018 49/50 current_auc = 0.6222222222222222
User 131018 AUC after training: 0.6194444444444445
User 131018 does not improve AUC. Reverting changes.
[2024-12-02 18:49:20.715077] start test user 99149 128/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:49:21.219946] start test user 99149 128/567 recall augumented users by random, augumented_users = [115339, 129054, 75702, 69028, 32917, 90431, 133835, 14899, 94331, 59446, 63708, 53900, 27601, 127262, 93271, 84568, 101237, 64574, 52239, 90722, 133026, 96329, 28454, 89539, 49468, 51308, 86292, 99699, 95356, 95588, 82855, 16518, 112740, 331, 47890, 21069, 20562, 64509, 9444, 114656, 62558, 120965, 103585, 25510, 36692, 114545, 47755, 58360, 1646, 68801]
[2024-12-02 18:49:21.235919] user = 99149 Cloud 128/567
[2024-12-02 18:49:21.255239] user = 99149 Local 128/567
[2024-12-02 18:49:21.292013] user = 99149 Local+ 128/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:49:23.536172] user = 99149 MPDA- 128/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7999999999999999
Training on augumented user 115339 0/50 current_auc = 0.7999999999999999
User 115339 AUC after training: 0.7999999999999999
User 115339 does not improve AUC. Reverting changes.
Training on augumented user 129054 1/50 current_auc = 0.7999999999999999
User 129054 AUC after training: 0.7999999999999999
User 129054 does not improve AUC. Reverting changes.
Training on augumented user 75702 2/50 current_auc = 0.7999999999999999
User 75702 AUC after training: 0.7999999999999999
User 75702 does not improve AUC. Reverting changes.
Training on augumented user 69028 3/50 current_auc = 0.7999999999999999
User 69028 AUC after training: 0.7999999999999999
User 69028 does not improve AUC. Reverting changes.
Training on augumented user 32917 4/50 current_auc = 0.7999999999999999
User 32917 AUC after training: 0.7962264150943396
User 32917 does not improve AUC. Reverting changes.
Training on augumented user 90431 5/50 current_auc = 0.7999999999999999
User 90431 AUC after training: 0.7999999999999999
User 90431 does not improve AUC. Reverting changes.
Training on augumented user 133835 6/50 current_auc = 0.7999999999999999
User 133835 AUC after training: 0.7999999999999999
User 133835 does not improve AUC. Reverting changes.
Training on augumented user 14899 7/50 current_auc = 0.7999999999999999
User 14899 AUC after training: 0.7999999999999999
User 14899 does not improve AUC. Reverting changes.
Training on augumented user 94331 8/50 current_auc = 0.7999999999999999
User 94331 AUC after training: 0.8
User 94331 improves AUC. Keeping the model.
Training on augumented user 59446 9/50 current_auc = 0.8
User 59446 AUC after training: 0.7962264150943397
User 59446 does not improve AUC. Reverting changes.
Training on augumented user 63708 10/50 current_auc = 0.8
User 63708 AUC after training: 0.8
User 63708 does not improve AUC. Reverting changes.
Training on augumented user 53900 11/50 current_auc = 0.8
User 53900 AUC after training: 0.8
User 53900 does not improve AUC. Reverting changes.
Training on augumented user 27601 12/50 current_auc = 0.8
User 27601 AUC after training: 0.7962264150943397
User 27601 does not improve AUC. Reverting changes.
Training on augumented user 127262 13/50 current_auc = 0.8
User 127262 AUC after training: 0.8
User 127262 does not improve AUC. Reverting changes.
Training on augumented user 93271 14/50 current_auc = 0.8
User 93271 AUC after training: 0.7962264150943397
User 93271 does not improve AUC. Reverting changes.
Training on augumented user 84568 15/50 current_auc = 0.8
User 84568 AUC after training: 0.8
User 84568 does not improve AUC. Reverting changes.
Training on augumented user 101237 16/50 current_auc = 0.8
User 101237 AUC after training: 0.8
User 101237 does not improve AUC. Reverting changes.
Training on augumented user 64574 17/50 current_auc = 0.8
User 64574 AUC after training: 0.7962264150943397
User 64574 does not improve AUC. Reverting changes.
Training on augumented user 52239 18/50 current_auc = 0.8
User 52239 AUC after training: 0.8037735849056603
User 52239 improves AUC. Keeping the model.
Training on augumented user 90722 19/50 current_auc = 0.8037735849056603
User 90722 AUC after training: 0.8037735849056603
User 90722 does not improve AUC. Reverting changes.
Training on augumented user 133026 20/50 current_auc = 0.8037735849056603
User 133026 AUC after training: 0.7999999999999999
User 133026 does not improve AUC. Reverting changes.
Training on augumented user 96329 21/50 current_auc = 0.8037735849056603
User 96329 AUC after training: 0.8037735849056603
User 96329 does not improve AUC. Reverting changes.
Training on augumented user 28454 22/50 current_auc = 0.8037735849056603
User 28454 AUC after training: 0.8037735849056603
User 28454 does not improve AUC. Reverting changes.
Training on augumented user 89539 23/50 current_auc = 0.8037735849056603
User 89539 AUC after training: 0.8037735849056603
User 89539 does not improve AUC. Reverting changes.
Training on augumented user 49468 24/50 current_auc = 0.8037735849056603
User 49468 AUC after training: 0.8037735849056603
User 49468 does not improve AUC. Reverting changes.
Training on augumented user 51308 25/50 current_auc = 0.8037735849056603
User 51308 AUC after training: 0.8037735849056603
User 51308 does not improve AUC. Reverting changes.
Training on augumented user 86292 26/50 current_auc = 0.8037735849056603
User 86292 AUC after training: 0.8037735849056603
User 86292 does not improve AUC. Reverting changes.
Training on augumented user 99699 27/50 current_auc = 0.8037735849056603
User 99699 AUC after training: 0.8037735849056603
User 99699 does not improve AUC. Reverting changes.
Training on augumented user 95356 28/50 current_auc = 0.8037735849056603
User 95356 AUC after training: 0.8037735849056603
User 95356 does not improve AUC. Reverting changes.
Training on augumented user 95588 29/50 current_auc = 0.8037735849056603
User 95588 AUC after training: 0.7999999999999999
User 95588 does not improve AUC. Reverting changes.
Training on augumented user 82855 30/50 current_auc = 0.8037735849056603
User 82855 AUC after training: 0.8
User 82855 does not improve AUC. Reverting changes.
Training on augumented user 16518 31/50 current_auc = 0.8037735849056603
User 16518 AUC after training: 0.8037735849056603
User 16518 does not improve AUC. Reverting changes.
Training on augumented user 112740 32/50 current_auc = 0.8037735849056603
User 112740 AUC after training: 0.8037735849056603
User 112740 does not improve AUC. Reverting changes.
Training on augumented user 331 33/50 current_auc = 0.8037735849056603
User 331 AUC after training: 0.8037735849056603
User 331 does not improve AUC. Reverting changes.
Training on augumented user 47890 34/50 current_auc = 0.8037735849056603
User 47890 AUC after training: 0.8037735849056603
User 47890 does not improve AUC. Reverting changes.
Training on augumented user 21069 35/50 current_auc = 0.8037735849056603
User 21069 AUC after training: 0.8037735849056603
User 21069 does not improve AUC. Reverting changes.
Training on augumented user 20562 36/50 current_auc = 0.8037735849056603
User 20562 AUC after training: 0.8037735849056603
User 20562 does not improve AUC. Reverting changes.
Training on augumented user 64509 37/50 current_auc = 0.8037735849056603
User 64509 AUC after training: 0.8
User 64509 does not improve AUC. Reverting changes.
Training on augumented user 9444 38/50 current_auc = 0.8037735849056603
User 9444 AUC after training: 0.8037735849056603
User 9444 does not improve AUC. Reverting changes.
Training on augumented user 114656 39/50 current_auc = 0.8037735849056603
User 114656 AUC after training: 0.8037735849056603
User 114656 does not improve AUC. Reverting changes.
Training on augumented user 62558 40/50 current_auc = 0.8037735849056603
User 62558 AUC after training: 0.7999999999999999
User 62558 does not improve AUC. Reverting changes.
Training on augumented user 120965 41/50 current_auc = 0.8037735849056603
User 120965 AUC after training: 0.8037735849056603
User 120965 does not improve AUC. Reverting changes.
Training on augumented user 103585 42/50 current_auc = 0.8037735849056603
User 103585 AUC after training: 0.8037735849056603
User 103585 does not improve AUC. Reverting changes.
Training on augumented user 25510 43/50 current_auc = 0.8037735849056603
User 25510 AUC after training: 0.8037735849056603
User 25510 does not improve AUC. Reverting changes.
Training on augumented user 36692 44/50 current_auc = 0.8037735849056603
User 36692 AUC after training: 0.8037735849056603
User 36692 does not improve AUC. Reverting changes.
Training on augumented user 114545 45/50 current_auc = 0.8037735849056603
User 114545 AUC after training: 0.8
User 114545 does not improve AUC. Reverting changes.
Training on augumented user 47755 46/50 current_auc = 0.8037735849056603
User 47755 AUC after training: 0.8037735849056603
User 47755 does not improve AUC. Reverting changes.
Training on augumented user 58360 47/50 current_auc = 0.8037735849056603
User 58360 AUC after training: 0.7962264150943396
User 58360 does not improve AUC. Reverting changes.
Training on augumented user 1646 48/50 current_auc = 0.8037735849056603
User 1646 AUC after training: 0.8037735849056603
User 1646 does not improve AUC. Reverting changes.
Training on augumented user 68801 49/50 current_auc = 0.8037735849056603
User 68801 AUC after training: 0.8037735849056603
User 68801 does not improve AUC. Reverting changes.
[2024-12-02 18:49:52.663257] start test user 99159 129/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:49:53.097854] start test user 99159 129/567 recall augumented users by random, augumented_users = [42408, 35008, 56868, 67630, 108807, 5193, 70916, 112968, 105018, 82075, 50810, 103371, 136960, 9840, 27292, 121733, 59412, 3705, 77209, 78636, 118663, 7749, 131260, 72781, 86447, 72075, 53948, 5547, 56916, 74091, 34593, 7142, 94694, 44818, 124869, 59333, 61283, 134325, 48563, 37195, 12109, 80078, 5369, 45529, 34743, 9608, 62258, 18780, 111027, 19635]
[2024-12-02 18:49:53.113287] user = 99159 Cloud 129/567
[2024-12-02 18:49:53.128010] user = 99159 Local 129/567
[2024-12-02 18:49:53.161821] user = 99159 Local+ 129/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:49:55.974513] user = 99159 MPDA- 129/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5765151515151514
Training on augumented user 42408 0/50 current_auc = 0.5765151515151514
User 42408 AUC after training: 0.5772727272727272
User 42408 improves AUC. Keeping the model.
Training on augumented user 35008 1/50 current_auc = 0.5772727272727272
User 35008 AUC after training: 0.5772727272727272
User 35008 does not improve AUC. Reverting changes.
Training on augumented user 56868 2/50 current_auc = 0.5772727272727272
User 56868 AUC after training: 0.5780303030303029
User 56868 improves AUC. Keeping the model.
Training on augumented user 67630 3/50 current_auc = 0.5780303030303029
User 67630 AUC after training: 0.5795454545454545
User 67630 improves AUC. Keeping the model.
Training on augumented user 108807 4/50 current_auc = 0.5795454545454545
User 108807 AUC after training: 0.5772727272727272
User 108807 does not improve AUC. Reverting changes.
Training on augumented user 5193 5/50 current_auc = 0.5795454545454545
User 5193 AUC after training: 0.5765151515151514
User 5193 does not improve AUC. Reverting changes.
Training on augumented user 70916 6/50 current_auc = 0.5795454545454545
User 70916 AUC after training: 0.5772727272727273
User 70916 does not improve AUC. Reverting changes.
Training on augumented user 112968 7/50 current_auc = 0.5795454545454545
User 112968 AUC after training: 0.5803030303030303
User 112968 improves AUC. Keeping the model.
Training on augumented user 105018 8/50 current_auc = 0.5803030303030303
User 105018 AUC after training: 0.5787878787878787
User 105018 does not improve AUC. Reverting changes.
Training on augumented user 82075 9/50 current_auc = 0.5803030303030303
User 82075 AUC after training: 0.5795454545454546
User 82075 does not improve AUC. Reverting changes.
Training on augumented user 50810 10/50 current_auc = 0.5803030303030303
User 50810 AUC after training: 0.5795454545454545
User 50810 does not improve AUC. Reverting changes.
Training on augumented user 103371 11/50 current_auc = 0.5803030303030303
User 103371 AUC after training: 0.5795454545454546
User 103371 does not improve AUC. Reverting changes.
Training on augumented user 136960 12/50 current_auc = 0.5803030303030303
User 136960 AUC after training: 0.5757575757575757
User 136960 does not improve AUC. Reverting changes.
Training on augumented user 9840 13/50 current_auc = 0.5803030303030303
User 9840 AUC after training: 0.5818181818181818
User 9840 improves AUC. Keeping the model.
Training on augumented user 27292 14/50 current_auc = 0.5818181818181818
User 27292 AUC after training: 0.5772727272727273
User 27292 does not improve AUC. Reverting changes.
Training on augumented user 121733 15/50 current_auc = 0.5818181818181818
User 121733 AUC after training: 0.5825757575757575
User 121733 improves AUC. Keeping the model.
Training on augumented user 59412 16/50 current_auc = 0.5825757575757575
User 59412 AUC after training: 0.5825757575757575
User 59412 does not improve AUC. Reverting changes.
Training on augumented user 3705 17/50 current_auc = 0.5825757575757575
User 3705 AUC after training: 0.5825757575757575
User 3705 does not improve AUC. Reverting changes.
Training on augumented user 77209 18/50 current_auc = 0.5825757575757575
User 77209 AUC after training: 0.5825757575757575
User 77209 does not improve AUC. Reverting changes.
Training on augumented user 78636 19/50 current_auc = 0.5825757575757575
User 78636 AUC after training: 0.5803030303030303
User 78636 does not improve AUC. Reverting changes.
Training on augumented user 118663 20/50 current_auc = 0.5825757575757575
User 118663 AUC after training: 0.5825757575757575
User 118663 does not improve AUC. Reverting changes.
Training on augumented user 7749 21/50 current_auc = 0.5825757575757575
User 7749 AUC after training: 0.5825757575757575
User 7749 does not improve AUC. Reverting changes.
Training on augumented user 131260 22/50 current_auc = 0.5825757575757575
User 131260 AUC after training: 0.5795454545454546
User 131260 does not improve AUC. Reverting changes.
Training on augumented user 72781 23/50 current_auc = 0.5825757575757575
User 72781 AUC after training: 0.5825757575757575
User 72781 does not improve AUC. Reverting changes.
Training on augumented user 86447 24/50 current_auc = 0.5825757575757575
User 86447 AUC after training: 0.5833333333333333
User 86447 improves AUC. Keeping the model.
Training on augumented user 72075 25/50 current_auc = 0.5833333333333333
User 72075 AUC after training: 0.581060606060606
User 72075 does not improve AUC. Reverting changes.
Training on augumented user 53948 26/50 current_auc = 0.5833333333333333
User 53948 AUC after training: 0.584090909090909
User 53948 improves AUC. Keeping the model.
Training on augumented user 5547 27/50 current_auc = 0.584090909090909
User 5547 AUC after training: 0.5803030303030303
User 5547 does not improve AUC. Reverting changes.
Training on augumented user 56916 28/50 current_auc = 0.584090909090909
User 56916 AUC after training: 0.5803030303030303
User 56916 does not improve AUC. Reverting changes.
Training on augumented user 74091 29/50 current_auc = 0.584090909090909
User 74091 AUC after training: 0.584090909090909
User 74091 does not improve AUC. Reverting changes.
Training on augumented user 34593 30/50 current_auc = 0.584090909090909
User 34593 AUC after training: 0.5795454545454546
User 34593 does not improve AUC. Reverting changes.
Training on augumented user 7142 31/50 current_auc = 0.584090909090909
User 7142 AUC after training: 0.5848484848484848
User 7142 improves AUC. Keeping the model.
Training on augumented user 94694 32/50 current_auc = 0.5848484848484848
User 94694 AUC after training: 0.581060606060606
User 94694 does not improve AUC. Reverting changes.
Training on augumented user 44818 33/50 current_auc = 0.5848484848484848
User 44818 AUC after training: 0.5803030303030303
User 44818 does not improve AUC. Reverting changes.
Training on augumented user 124869 34/50 current_auc = 0.5848484848484848
User 124869 AUC after training: 0.5848484848484848
User 124869 does not improve AUC. Reverting changes.
Training on augumented user 59333 35/50 current_auc = 0.5848484848484848
User 59333 AUC after training: 0.5848484848484848
User 59333 does not improve AUC. Reverting changes.
Training on augumented user 61283 36/50 current_auc = 0.5848484848484848
User 61283 AUC after training: 0.5848484848484848
User 61283 does not improve AUC. Reverting changes.
Training on augumented user 134325 37/50 current_auc = 0.5848484848484848
User 134325 AUC after training: 0.5765151515151514
User 134325 does not improve AUC. Reverting changes.
Training on augumented user 48563 38/50 current_auc = 0.5848484848484848
User 48563 AUC after training: 0.5818181818181818
User 48563 does not improve AUC. Reverting changes.
Training on augumented user 37195 39/50 current_auc = 0.5848484848484848
User 37195 AUC after training: 0.5803030303030303
User 37195 does not improve AUC. Reverting changes.
Training on augumented user 12109 40/50 current_auc = 0.5848484848484848
User 12109 AUC after training: 0.5825757575757575
User 12109 does not improve AUC. Reverting changes.
Training on augumented user 80078 41/50 current_auc = 0.5848484848484848
User 80078 AUC after training: 0.5833333333333333
User 80078 does not improve AUC. Reverting changes.
Training on augumented user 5369 42/50 current_auc = 0.5848484848484848
User 5369 AUC after training: 0.5803030303030303
User 5369 does not improve AUC. Reverting changes.
Training on augumented user 45529 43/50 current_auc = 0.5848484848484848
User 45529 AUC after training: 0.5818181818181818
User 45529 does not improve AUC. Reverting changes.
Training on augumented user 34743 44/50 current_auc = 0.5848484848484848
User 34743 AUC after training: 0.5787878787878787
User 34743 does not improve AUC. Reverting changes.
Training on augumented user 9608 45/50 current_auc = 0.5848484848484848
User 9608 AUC after training: 0.5863636363636364
User 9608 improves AUC. Keeping the model.
Training on augumented user 62258 46/50 current_auc = 0.5863636363636364
User 62258 AUC after training: 0.5833333333333333
User 62258 does not improve AUC. Reverting changes.
Training on augumented user 18780 47/50 current_auc = 0.5863636363636364
User 18780 AUC after training: 0.5825757575757575
User 18780 does not improve AUC. Reverting changes.
Training on augumented user 111027 48/50 current_auc = 0.5863636363636364
User 111027 AUC after training: 0.5856060606060607
User 111027 does not improve AUC. Reverting changes.
Training on augumented user 19635 49/50 current_auc = 0.5863636363636364
User 19635 AUC after training: 0.5848484848484847
User 19635 does not improve AUC. Reverting changes.
[2024-12-02 18:50:26.397504] start test user 99199 130/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:50:26.969261] start test user 99199 130/567 recall augumented users by random, augumented_users = [45431, 40392, 14389, 116584, 79481, 47994, 85239, 80480, 61162, 34816, 531, 89241, 54791, 1868, 3851, 128948, 46269, 8943, 112216, 77970, 49199, 121294, 54367, 98370, 79202, 17675, 116601, 117645, 85945, 87091, 72477, 88755, 90622, 120368, 111439, 27540, 68001, 80420, 2047, 112223, 38094, 56342, 121548, 14816, 107648, 136525, 39769, 45001, 78456, 129403]
[2024-12-02 18:50:26.994921] user = 99199 Cloud 130/567
[2024-12-02 18:50:27.018442] user = 99199 Local 130/567
[2024-12-02 18:50:27.094213] user = 99199 Local+ 130/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:50:29.832608] user = 99199 MPDA- 130/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5754716981132075
Training on augumented user 45431 0/50 current_auc = 0.5754716981132075
User 45431 AUC after training: 0.5747460087082729
User 45431 does not improve AUC. Reverting changes.
Training on augumented user 40392 1/50 current_auc = 0.5754716981132075
User 40392 AUC after training: 0.5747460087082729
User 40392 does not improve AUC. Reverting changes.
Training on augumented user 14389 2/50 current_auc = 0.5754716981132075
User 14389 AUC after training: 0.5754716981132075
User 14389 does not improve AUC. Reverting changes.
Training on augumented user 116584 3/50 current_auc = 0.5754716981132075
User 116584 AUC after training: 0.5754716981132075
User 116584 does not improve AUC. Reverting changes.
Training on augumented user 79481 4/50 current_auc = 0.5754716981132075
User 79481 AUC after training: 0.5747460087082729
User 79481 does not improve AUC. Reverting changes.
Training on augumented user 47994 5/50 current_auc = 0.5754716981132075
User 47994 AUC after training: 0.5776487663280117
User 47994 improves AUC. Keeping the model.
Training on augumented user 85239 6/50 current_auc = 0.5776487663280117
User 85239 AUC after training: 0.5776487663280117
User 85239 does not improve AUC. Reverting changes.
Training on augumented user 80480 7/50 current_auc = 0.5776487663280117
User 80480 AUC after training: 0.5754716981132076
User 80480 does not improve AUC. Reverting changes.
Training on augumented user 61162 8/50 current_auc = 0.5776487663280117
User 61162 AUC after training: 0.576923076923077
User 61162 does not improve AUC. Reverting changes.
Training on augumented user 34816 9/50 current_auc = 0.5776487663280117
User 34816 AUC after training: 0.5783744557329463
User 34816 improves AUC. Keeping the model.
Training on augumented user 531 10/50 current_auc = 0.5783744557329463
User 531 AUC after training: 0.5747460087082729
User 531 does not improve AUC. Reverting changes.
Training on augumented user 89241 11/50 current_auc = 0.5783744557329463
User 89241 AUC after training: 0.5776487663280117
User 89241 does not improve AUC. Reverting changes.
Training on augumented user 54791 12/50 current_auc = 0.5783744557329463
User 54791 AUC after training: 0.5776487663280117
User 54791 does not improve AUC. Reverting changes.
Training on augumented user 1868 13/50 current_auc = 0.5783744557329463
User 1868 AUC after training: 0.5747460087082727
User 1868 does not improve AUC. Reverting changes.
Training on augumented user 3851 14/50 current_auc = 0.5783744557329463
User 3851 AUC after training: 0.5776487663280117
User 3851 does not improve AUC. Reverting changes.
Training on augumented user 128948 15/50 current_auc = 0.5783744557329463
User 128948 AUC after training: 0.5761973875181422
User 128948 does not improve AUC. Reverting changes.
Training on augumented user 46269 16/50 current_auc = 0.5783744557329463
User 46269 AUC after training: 0.5761973875181422
User 46269 does not improve AUC. Reverting changes.
Training on augumented user 8943 17/50 current_auc = 0.5783744557329463
User 8943 AUC after training: 0.5761973875181422
User 8943 does not improve AUC. Reverting changes.
Training on augumented user 112216 18/50 current_auc = 0.5783744557329463
User 112216 AUC after training: 0.5754716981132075
User 112216 does not improve AUC. Reverting changes.
Training on augumented user 77970 19/50 current_auc = 0.5783744557329463
User 77970 AUC after training: 0.5769230769230769
User 77970 does not improve AUC. Reverting changes.
Training on augumented user 49199 20/50 current_auc = 0.5783744557329463
User 49199 AUC after training: 0.5783744557329463
User 49199 does not improve AUC. Reverting changes.
Training on augumented user 121294 21/50 current_auc = 0.5783744557329463
User 121294 AUC after training: 0.5776487663280117
User 121294 does not improve AUC. Reverting changes.
Training on augumented user 54367 22/50 current_auc = 0.5783744557329463
User 54367 AUC after training: 0.5776487663280117
User 54367 does not improve AUC. Reverting changes.
Training on augumented user 98370 23/50 current_auc = 0.5783744557329463
User 98370 AUC after training: 0.5740203193033382
User 98370 does not improve AUC. Reverting changes.
Training on augumented user 79202 24/50 current_auc = 0.5783744557329463
User 79202 AUC after training: 0.5776487663280117
User 79202 does not improve AUC. Reverting changes.
Training on augumented user 17675 25/50 current_auc = 0.5783744557329463
User 17675 AUC after training: 0.576923076923077
User 17675 does not improve AUC. Reverting changes.
Training on augumented user 116601 26/50 current_auc = 0.5783744557329463
User 116601 AUC after training: 0.5776487663280117
User 116601 does not improve AUC. Reverting changes.
Training on augumented user 117645 27/50 current_auc = 0.5783744557329463
User 117645 AUC after training: 0.5776487663280115
User 117645 does not improve AUC. Reverting changes.
Training on augumented user 85945 28/50 current_auc = 0.5783744557329463
User 85945 AUC after training: 0.5754716981132075
User 85945 does not improve AUC. Reverting changes.
Training on augumented user 87091 29/50 current_auc = 0.5783744557329463
User 87091 AUC after training: 0.5783744557329463
User 87091 does not improve AUC. Reverting changes.
Training on augumented user 72477 30/50 current_auc = 0.5783744557329463
User 72477 AUC after training: 0.5761973875181422
User 72477 does not improve AUC. Reverting changes.
Training on augumented user 88755 31/50 current_auc = 0.5783744557329463
User 88755 AUC after training: 0.5776487663280117
User 88755 does not improve AUC. Reverting changes.
Training on augumented user 90622 32/50 current_auc = 0.5783744557329463
User 90622 AUC after training: 0.5754716981132075
User 90622 does not improve AUC. Reverting changes.
Training on augumented user 120368 33/50 current_auc = 0.5783744557329463
User 120368 AUC after training: 0.5776487663280117
User 120368 does not improve AUC. Reverting changes.
Training on augumented user 111439 34/50 current_auc = 0.5783744557329463
User 111439 AUC after training: 0.5783744557329463
User 111439 does not improve AUC. Reverting changes.
Training on augumented user 27540 35/50 current_auc = 0.5783744557329463
User 27540 AUC after training: 0.576923076923077
User 27540 does not improve AUC. Reverting changes.
Training on augumented user 68001 36/50 current_auc = 0.5783744557329463
User 68001 AUC after training: 0.576923076923077
User 68001 does not improve AUC. Reverting changes.
Training on augumented user 80420 37/50 current_auc = 0.5783744557329463
User 80420 AUC after training: 0.5761973875181423
User 80420 does not improve AUC. Reverting changes.
Training on augumented user 2047 38/50 current_auc = 0.5783744557329463
User 2047 AUC after training: 0.5761973875181422
User 2047 does not improve AUC. Reverting changes.
Training on augumented user 112223 39/50 current_auc = 0.5783744557329463
User 112223 AUC after training: 0.5769230769230769
User 112223 does not improve AUC. Reverting changes.
Training on augumented user 38094 40/50 current_auc = 0.5783744557329463
User 38094 AUC after training: 0.5740203193033382
User 38094 does not improve AUC. Reverting changes.
Training on augumented user 56342 41/50 current_auc = 0.5783744557329463
User 56342 AUC after training: 0.5754716981132075
User 56342 does not improve AUC. Reverting changes.
Training on augumented user 121548 42/50 current_auc = 0.5783744557329463
User 121548 AUC after training: 0.576923076923077
User 121548 does not improve AUC. Reverting changes.
Training on augumented user 14816 43/50 current_auc = 0.5783744557329463
User 14816 AUC after training: 0.5776487663280117
User 14816 does not improve AUC. Reverting changes.
Training on augumented user 107648 44/50 current_auc = 0.5783744557329463
User 107648 AUC after training: 0.5754716981132075
User 107648 does not improve AUC. Reverting changes.
Training on augumented user 136525 45/50 current_auc = 0.5783744557329463
User 136525 AUC after training: 0.5776487663280117
User 136525 does not improve AUC. Reverting changes.
Training on augumented user 39769 46/50 current_auc = 0.5783744557329463
User 39769 AUC after training: 0.5776487663280117
User 39769 does not improve AUC. Reverting changes.
Training on augumented user 45001 47/50 current_auc = 0.5783744557329463
User 45001 AUC after training: 0.5754716981132075
User 45001 does not improve AUC. Reverting changes.
Training on augumented user 78456 48/50 current_auc = 0.5783744557329463
User 78456 AUC after training: 0.5783744557329463
User 78456 does not improve AUC. Reverting changes.
Training on augumented user 129403 49/50 current_auc = 0.5783744557329463
User 129403 AUC after training: 0.5761973875181422
User 129403 does not improve AUC. Reverting changes.
[2024-12-02 18:51:01.583268] start test user 99210 131/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:51:02.688775] start test user 99210 131/567 recall augumented users by random, augumented_users = [41482, 123128, 16325, 91426, 11018, 123446, 65393, 49167, 34414, 100904, 98342, 37143, 54386, 42313, 76125, 68014, 34612, 15450, 112155, 346, 34344, 21218, 28508, 119362, 16969, 18952, 98168, 96720, 99640, 132053, 85301, 68202, 3960, 134144, 66891, 61479, 111028, 129764, 27381, 87760, 73543, 130365, 16524, 117909, 125099, 36013, 12881, 28845, 114873, 5007]
[2024-12-02 18:51:02.705494] user = 99210 Cloud 131/567
[2024-12-02 18:51:02.716757] user = 99210 Local 131/567
[2024-12-02 18:51:02.928731] user = 99210 Local+ 131/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:51:05.875526] user = 99210 MPDA- 131/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6
Training on augumented user 41482 0/50 current_auc = 0.6
User 41482 AUC after training: 0.6000000000000001
User 41482 improves AUC. Keeping the model.
Training on augumented user 123128 1/50 current_auc = 0.6000000000000001
User 123128 AUC after training: 0.6000000000000001
User 123128 does not improve AUC. Reverting changes.
Training on augumented user 16325 2/50 current_auc = 0.6000000000000001
User 16325 AUC after training: 0.5800000000000001
User 16325 does not improve AUC. Reverting changes.
Training on augumented user 91426 3/50 current_auc = 0.6000000000000001
User 91426 AUC after training: 0.6000000000000001
User 91426 does not improve AUC. Reverting changes.
Training on augumented user 11018 4/50 current_auc = 0.6000000000000001
User 11018 AUC after training: 0.6000000000000001
User 11018 does not improve AUC. Reverting changes.
Training on augumented user 123446 5/50 current_auc = 0.6000000000000001
User 123446 AUC after training: 0.6000000000000001
User 123446 does not improve AUC. Reverting changes.
Training on augumented user 65393 6/50 current_auc = 0.6000000000000001
User 65393 AUC after training: 0.62
User 65393 improves AUC. Keeping the model.
Training on augumented user 49167 7/50 current_auc = 0.62
User 49167 AUC after training: 0.62
User 49167 does not improve AUC. Reverting changes.
Training on augumented user 34414 8/50 current_auc = 0.62
User 34414 AUC after training: 0.62
User 34414 does not improve AUC. Reverting changes.
Training on augumented user 100904 9/50 current_auc = 0.62
User 100904 AUC after training: 0.62
User 100904 does not improve AUC. Reverting changes.
Training on augumented user 98342 10/50 current_auc = 0.62
User 98342 AUC after training: 0.62
User 98342 does not improve AUC. Reverting changes.
Training on augumented user 37143 11/50 current_auc = 0.62
User 37143 AUC after training: 0.62
User 37143 does not improve AUC. Reverting changes.
Training on augumented user 54386 12/50 current_auc = 0.62
User 54386 AUC after training: 0.62
User 54386 does not improve AUC. Reverting changes.
Training on augumented user 42313 13/50 current_auc = 0.62
User 42313 AUC after training: 0.62
User 42313 does not improve AUC. Reverting changes.
Training on augumented user 76125 14/50 current_auc = 0.62
User 76125 AUC after training: 0.62
User 76125 does not improve AUC. Reverting changes.
Training on augumented user 68014 15/50 current_auc = 0.62
User 68014 AUC after training: 0.62
User 68014 does not improve AUC. Reverting changes.
Training on augumented user 34612 16/50 current_auc = 0.62
User 34612 AUC after training: 0.62
User 34612 does not improve AUC. Reverting changes.
Training on augumented user 15450 17/50 current_auc = 0.62
User 15450 AUC after training: 0.62
User 15450 does not improve AUC. Reverting changes.
Training on augumented user 112155 18/50 current_auc = 0.62
User 112155 AUC after training: 0.62
User 112155 does not improve AUC. Reverting changes.
Training on augumented user 346 19/50 current_auc = 0.62
User 346 AUC after training: 0.62
User 346 does not improve AUC. Reverting changes.
Training on augumented user 34344 20/50 current_auc = 0.62
User 34344 AUC after training: 0.6000000000000001
User 34344 does not improve AUC. Reverting changes.
Training on augumented user 21218 21/50 current_auc = 0.62
User 21218 AUC after training: 0.62
User 21218 does not improve AUC. Reverting changes.
Training on augumented user 28508 22/50 current_auc = 0.62
User 28508 AUC after training: 0.62
User 28508 does not improve AUC. Reverting changes.
Training on augumented user 119362 23/50 current_auc = 0.62
User 119362 AUC after training: 0.62
User 119362 does not improve AUC. Reverting changes.
Training on augumented user 16969 24/50 current_auc = 0.62
User 16969 AUC after training: 0.62
User 16969 does not improve AUC. Reverting changes.
Training on augumented user 18952 25/50 current_auc = 0.62
User 18952 AUC after training: 0.62
User 18952 does not improve AUC. Reverting changes.
Training on augumented user 98168 26/50 current_auc = 0.62
User 98168 AUC after training: 0.5800000000000001
User 98168 does not improve AUC. Reverting changes.
Training on augumented user 96720 27/50 current_auc = 0.62
User 96720 AUC after training: 0.6
User 96720 does not improve AUC. Reverting changes.
Training on augumented user 99640 28/50 current_auc = 0.62
User 99640 AUC after training: 0.62
User 99640 does not improve AUC. Reverting changes.
Training on augumented user 132053 29/50 current_auc = 0.62
User 132053 AUC after training: 0.62
User 132053 does not improve AUC. Reverting changes.
Training on augumented user 85301 30/50 current_auc = 0.62
User 85301 AUC after training: 0.62
User 85301 does not improve AUC. Reverting changes.
Training on augumented user 68202 31/50 current_auc = 0.62
User 68202 AUC after training: 0.56
User 68202 does not improve AUC. Reverting changes.
Training on augumented user 3960 32/50 current_auc = 0.62
User 3960 AUC after training: 0.62
User 3960 does not improve AUC. Reverting changes.
Training on augumented user 134144 33/50 current_auc = 0.62
User 134144 AUC after training: 0.6
User 134144 does not improve AUC. Reverting changes.
Training on augumented user 66891 34/50 current_auc = 0.62
User 66891 AUC after training: 0.62
User 66891 does not improve AUC. Reverting changes.
Training on augumented user 61479 35/50 current_auc = 0.62
User 61479 AUC after training: 0.62
User 61479 does not improve AUC. Reverting changes.
Training on augumented user 111028 36/50 current_auc = 0.62
User 111028 AUC after training: 0.62
User 111028 does not improve AUC. Reverting changes.
Training on augumented user 129764 37/50 current_auc = 0.62
User 129764 AUC after training: 0.62
User 129764 does not improve AUC. Reverting changes.
Training on augumented user 27381 38/50 current_auc = 0.62
User 27381 AUC after training: 0.62
User 27381 does not improve AUC. Reverting changes.
Training on augumented user 87760 39/50 current_auc = 0.62
User 87760 AUC after training: 0.62
User 87760 does not improve AUC. Reverting changes.
Training on augumented user 73543 40/50 current_auc = 0.62
User 73543 AUC after training: 0.62
User 73543 does not improve AUC. Reverting changes.
Training on augumented user 130365 41/50 current_auc = 0.62
User 130365 AUC after training: 0.62
User 130365 does not improve AUC. Reverting changes.
Training on augumented user 16524 42/50 current_auc = 0.62
User 16524 AUC after training: 0.62
User 16524 does not improve AUC. Reverting changes.
Training on augumented user 117909 43/50 current_auc = 0.62
User 117909 AUC after training: 0.62
User 117909 does not improve AUC. Reverting changes.
Training on augumented user 125099 44/50 current_auc = 0.62
User 125099 AUC after training: 0.62
User 125099 does not improve AUC. Reverting changes.
Training on augumented user 36013 45/50 current_auc = 0.62
User 36013 AUC after training: 0.62
User 36013 does not improve AUC. Reverting changes.
Training on augumented user 12881 46/50 current_auc = 0.62
User 12881 AUC after training: 0.5800000000000001
User 12881 does not improve AUC. Reverting changes.
Training on augumented user 28845 47/50 current_auc = 0.62
User 28845 AUC after training: 0.62
User 28845 does not improve AUC. Reverting changes.
Training on augumented user 114873 48/50 current_auc = 0.62
User 114873 AUC after training: 0.62
User 114873 does not improve AUC. Reverting changes.
Training on augumented user 5007 49/50 current_auc = 0.62
User 5007 AUC after training: 0.62
User 5007 does not improve AUC. Reverting changes.
[2024-12-02 18:51:39.836077] start test user 99254 132/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:51:40.560074] start test user 99254 132/567 recall augumented users by random, augumented_users = [76770, 132822, 116390, 103967, 133196, 31627, 110229, 75911, 61980, 136179, 33076, 5818, 12499, 61584, 2954, 95300, 65244, 79885, 85776, 133242, 81, 60567, 128417, 36247, 93664, 100333, 94359, 38997, 106385, 124401, 133928, 44024, 109198, 118956, 101492, 41984, 107457, 137596, 34902, 138338, 680, 39380, 96900, 56166, 116320, 35087, 33063, 67777, 11728, 36699]
[2024-12-02 18:51:40.583914] user = 99254 Cloud 132/567
[2024-12-02 18:51:40.667895] user = 99254 Local 132/567
[2024-12-02 18:51:40.832483] user = 99254 Local+ 132/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:51:43.286726] user = 99254 MPDA- 132/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6077631303620005
Training on augumented user 76770 0/50 current_auc = 0.6077631303620005
User 76770 AUC after training: 0.6069261351747227
User 76770 does not improve AUC. Reverting changes.
Training on augumented user 132822 1/50 current_auc = 0.6077631303620005
User 132822 AUC after training: 0.6083908767524586
User 132822 improves AUC. Keeping the model.
Training on augumented user 116390 2/50 current_auc = 0.6083908767524586
User 116390 AUC after training: 0.6079723791588199
User 116390 does not improve AUC. Reverting changes.
Training on augumented user 103967 3/50 current_auc = 0.6083908767524586
User 103967 AUC after training: 0.6083908767524586
User 103967 does not improve AUC. Reverting changes.
Training on augumented user 133196 4/50 current_auc = 0.6083908767524586
User 133196 AUC after training: 0.607553881565181
User 133196 does not improve AUC. Reverting changes.
Training on augumented user 31627 5/50 current_auc = 0.6083908767524586
User 31627 AUC after training: 0.6070307595731325
User 31627 does not improve AUC. Reverting changes.
Training on augumented user 110229 6/50 current_auc = 0.6083908767524586
User 110229 AUC after training: 0.6083908767524586
User 110229 does not improve AUC. Reverting changes.
Training on augumented user 75911 7/50 current_auc = 0.6083908767524586
User 75911 AUC after training: 0.6083908767524586
User 75911 does not improve AUC. Reverting changes.
Training on augumented user 61980 8/50 current_auc = 0.6083908767524586
User 61980 AUC after training: 0.6067168863779033
User 61980 does not improve AUC. Reverting changes.
Training on augumented user 136179 9/50 current_auc = 0.6083908767524586
User 136179 AUC after training: 0.6069261351747227
User 136179 does not improve AUC. Reverting changes.
Training on augumented user 33076 10/50 current_auc = 0.6083908767524586
User 33076 AUC after training: 0.6071353839715421
User 33076 does not improve AUC. Reverting changes.
Training on augumented user 5818 11/50 current_auc = 0.6083908767524586
User 5818 AUC after training: 0.6083908767524586
User 5818 does not improve AUC. Reverting changes.
Training on augumented user 12499 12/50 current_auc = 0.6083908767524586
User 12499 AUC after training: 0.6090186231429169
User 12499 improves AUC. Keeping the model.
Training on augumented user 61584 13/50 current_auc = 0.6090186231429169
User 61584 AUC after training: 0.6086001255492781
User 61584 does not improve AUC. Reverting changes.
Training on augumented user 2954 14/50 current_auc = 0.6090186231429169
User 2954 AUC after training: 0.6094371207365558
User 2954 improves AUC. Keeping the model.
Training on augumented user 95300 15/50 current_auc = 0.6094371207365558
User 95300 AUC after training: 0.6088093743460975
User 95300 does not improve AUC. Reverting changes.
Training on augumented user 65244 16/50 current_auc = 0.6094371207365558
User 65244 AUC after training: 0.6086001255492781
User 65244 does not improve AUC. Reverting changes.
Training on augumented user 79885 17/50 current_auc = 0.6094371207365558
User 79885 AUC after training: 0.6098556183301946
User 79885 improves AUC. Keeping the model.
Training on augumented user 85776 18/50 current_auc = 0.6098556183301946
User 85776 AUC after training: 0.6098556183301946
User 85776 does not improve AUC. Reverting changes.
Training on augumented user 133242 19/50 current_auc = 0.6098556183301946
User 133242 AUC after training: 0.6102741159238334
User 133242 improves AUC. Keeping the model.
Training on augumented user 81 20/50 current_auc = 0.6102741159238334
User 81 AUC after training: 0.6100648671270141
User 81 does not improve AUC. Reverting changes.
Training on augumented user 60567 21/50 current_auc = 0.6102741159238334
User 60567 AUC after training: 0.6079723791588199
User 60567 does not improve AUC. Reverting changes.
Training on augumented user 128417 22/50 current_auc = 0.6102741159238334
User 128417 AUC after training: 0.6109018623142918
User 128417 improves AUC. Keeping the model.
Training on augumented user 36247 23/50 current_auc = 0.6109018623142918
User 36247 AUC after training: 0.6109018623142918
User 36247 does not improve AUC. Reverting changes.
Training on augumented user 93664 24/50 current_auc = 0.6109018623142918
User 93664 AUC after training: 0.6090186231429169
User 93664 does not improve AUC. Reverting changes.
Training on augumented user 100333 25/50 current_auc = 0.6109018623142918
User 100333 AUC after training: 0.6077631303620004
User 100333 does not improve AUC. Reverting changes.
Training on augumented user 94359 26/50 current_auc = 0.6109018623142918
User 94359 AUC after training: 0.6117388575015694
User 94359 improves AUC. Keeping the model.
Training on augumented user 38997 27/50 current_auc = 0.6117388575015694
User 38997 AUC after training: 0.6119481062983888
User 38997 improves AUC. Keeping the model.
Training on augumented user 106385 28/50 current_auc = 0.6119481062983888
User 106385 AUC after training: 0.6115296087047499
User 106385 does not improve AUC. Reverting changes.
Training on augumented user 124401 29/50 current_auc = 0.6119481062983888
User 124401 AUC after training: 0.6111111111111112
User 124401 does not improve AUC. Reverting changes.
Training on augumented user 133928 30/50 current_auc = 0.6119481062983888
User 133928 AUC after training: 0.6123666038920277
User 133928 improves AUC. Keeping the model.
Training on augumented user 44024 31/50 current_auc = 0.6123666038920277
User 44024 AUC after training: 0.6121573550952082
User 44024 does not improve AUC. Reverting changes.
Training on augumented user 109198 32/50 current_auc = 0.6123666038920277
User 109198 AUC after training: 0.6132035990793053
User 109198 improves AUC. Keeping the model.
Training on augumented user 118956 33/50 current_auc = 0.6132035990793053
User 118956 AUC after training: 0.6123666038920277
User 118956 does not improve AUC. Reverting changes.
Training on augumented user 101492 34/50 current_auc = 0.6132035990793053
User 101492 AUC after training: 0.6125758526888471
User 101492 does not improve AUC. Reverting changes.
Training on augumented user 41984 35/50 current_auc = 0.6132035990793053
User 41984 AUC after training: 0.6126804770872567
User 41984 does not improve AUC. Reverting changes.
Training on augumented user 107457 36/50 current_auc = 0.6132035990793053
User 107457 AUC after training: 0.6127851014856665
User 107457 does not improve AUC. Reverting changes.
Training on augumented user 137596 37/50 current_auc = 0.6132035990793053
User 137596 AUC after training: 0.6139359698681732
User 137596 improves AUC. Keeping the model.
Training on augumented user 34902 38/50 current_auc = 0.6139359698681732
User 34902 AUC after training: 0.6121573550952082
User 34902 does not improve AUC. Reverting changes.
Training on augumented user 138338 39/50 current_auc = 0.6139359698681732
User 138338 AUC after training: 0.6133082234777151
User 138338 does not improve AUC. Reverting changes.
Training on augumented user 680 40/50 current_auc = 0.6139359698681732
User 680 AUC after training: 0.6125758526888471
User 680 does not improve AUC. Reverting changes.
Training on augumented user 39380 41/50 current_auc = 0.6139359698681732
User 39380 AUC after training: 0.6113203599079307
User 39380 does not improve AUC. Reverting changes.
Training on augumented user 96900 42/50 current_auc = 0.6139359698681732
User 96900 AUC after training: 0.6106926135174723
User 96900 does not improve AUC. Reverting changes.
Training on augumented user 56166 43/50 current_auc = 0.6139359698681732
User 56166 AUC after training: 0.6145637162586315
User 56166 improves AUC. Keeping the model.
Training on augumented user 116320 44/50 current_auc = 0.6145637162586315
User 116320 AUC after training: 0.6130989746808956
User 116320 does not improve AUC. Reverting changes.
Training on augumented user 35087 45/50 current_auc = 0.6145637162586315
User 35087 AUC after training: 0.6141452186649927
User 35087 does not improve AUC. Reverting changes.
Training on augumented user 33063 46/50 current_auc = 0.6145637162586315
User 33063 AUC after training: 0.6141452186649927
User 33063 does not improve AUC. Reverting changes.
Training on augumented user 67777 47/50 current_auc = 0.6145637162586315
User 67777 AUC after training: 0.6130989746808957
User 67777 does not improve AUC. Reverting changes.
Training on augumented user 11728 48/50 current_auc = 0.6145637162586315
User 11728 AUC after training: 0.6126804770872568
User 11728 does not improve AUC. Reverting changes.
Training on augumented user 36699 49/50 current_auc = 0.6145637162586315
User 36699 AUC after training: 0.613308223477715
User 36699 does not improve AUC. Reverting changes.
[2024-12-02 18:52:17.663058] start test user 99286 133/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:52:18.289271] start test user 99286 133/567 recall augumented users by random, augumented_users = [130934, 11719, 15480, 63739, 17078, 85363, 89609, 8088, 64427, 128326, 87818, 101717, 9092, 17650, 82401, 98467, 7713, 28443, 119809, 113072, 117918, 90806, 134252, 134452, 113662, 137468, 92101, 80619, 113587, 41380, 58834, 52124, 36155, 56615, 51993, 94788, 38551, 66484, 70430, 70280, 30461, 70247, 100519, 109121, 86351, 102077, 126541, 18519, 49948, 72572]
[2024-12-02 18:52:18.320198] user = 99286 Cloud 133/567
[2024-12-02 18:52:18.338661] user = 99286 Local 133/567
[2024-12-02 18:52:18.432239] user = 99286 Local+ 133/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:52:21.551843] user = 99286 MPDA- 133/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 130934 0/50 current_auc = 0.5
User 130934 AUC after training: 0.5
User 130934 does not improve AUC. Reverting changes.
Training on augumented user 11719 1/50 current_auc = 0.5
User 11719 AUC after training: 0.5
User 11719 does not improve AUC. Reverting changes.
Training on augumented user 15480 2/50 current_auc = 0.5
User 15480 AUC after training: 0.5
User 15480 does not improve AUC. Reverting changes.
Training on augumented user 63739 3/50 current_auc = 0.5
User 63739 AUC after training: 0.5
User 63739 does not improve AUC. Reverting changes.
Training on augumented user 17078 4/50 current_auc = 0.5
User 17078 AUC after training: 0.5
User 17078 does not improve AUC. Reverting changes.
Training on augumented user 85363 5/50 current_auc = 0.5
User 85363 AUC after training: 0.5
User 85363 does not improve AUC. Reverting changes.
Training on augumented user 89609 6/50 current_auc = 0.5
User 89609 AUC after training: 0.5
User 89609 does not improve AUC. Reverting changes.
Training on augumented user 8088 7/50 current_auc = 0.5
User 8088 AUC after training: 0.5
User 8088 does not improve AUC. Reverting changes.
Training on augumented user 64427 8/50 current_auc = 0.5
User 64427 AUC after training: 0.5
User 64427 does not improve AUC. Reverting changes.
Training on augumented user 128326 9/50 current_auc = 0.5
User 128326 AUC after training: 0.5
User 128326 does not improve AUC. Reverting changes.
Training on augumented user 87818 10/50 current_auc = 0.5
User 87818 AUC after training: 0.5
User 87818 does not improve AUC. Reverting changes.
Training on augumented user 101717 11/50 current_auc = 0.5
User 101717 AUC after training: 0.5
User 101717 does not improve AUC. Reverting changes.
Training on augumented user 9092 12/50 current_auc = 0.5
User 9092 AUC after training: 0.5
User 9092 does not improve AUC. Reverting changes.
Training on augumented user 17650 13/50 current_auc = 0.5
User 17650 AUC after training: 0.5
User 17650 does not improve AUC. Reverting changes.
Training on augumented user 82401 14/50 current_auc = 0.5
User 82401 AUC after training: 0.5
User 82401 does not improve AUC. Reverting changes.
Training on augumented user 98467 15/50 current_auc = 0.5
User 98467 AUC after training: 0.5
User 98467 does not improve AUC. Reverting changes.
Training on augumented user 7713 16/50 current_auc = 0.5
User 7713 AUC after training: 0.5
User 7713 does not improve AUC. Reverting changes.
Training on augumented user 28443 17/50 current_auc = 0.5
User 28443 AUC after training: 0.5
User 28443 does not improve AUC. Reverting changes.
Training on augumented user 119809 18/50 current_auc = 0.5
User 119809 AUC after training: 0.5
User 119809 does not improve AUC. Reverting changes.
Training on augumented user 113072 19/50 current_auc = 0.5
User 113072 AUC after training: 0.5
User 113072 does not improve AUC. Reverting changes.
Training on augumented user 117918 20/50 current_auc = 0.5
User 117918 AUC after training: 0.5
User 117918 does not improve AUC. Reverting changes.
Training on augumented user 90806 21/50 current_auc = 0.5
User 90806 AUC after training: 0.5
User 90806 does not improve AUC. Reverting changes.
Training on augumented user 134252 22/50 current_auc = 0.5
User 134252 AUC after training: 0.5
User 134252 does not improve AUC. Reverting changes.
Training on augumented user 134452 23/50 current_auc = 0.5
User 134452 AUC after training: 0.5
User 134452 does not improve AUC. Reverting changes.
Training on augumented user 113662 24/50 current_auc = 0.5
User 113662 AUC after training: 0.5
User 113662 does not improve AUC. Reverting changes.
Training on augumented user 137468 25/50 current_auc = 0.5
User 137468 AUC after training: 0.5
User 137468 does not improve AUC. Reverting changes.
Training on augumented user 92101 26/50 current_auc = 0.5
User 92101 AUC after training: 0.5
User 92101 does not improve AUC. Reverting changes.
Training on augumented user 80619 27/50 current_auc = 0.5
User 80619 AUC after training: 0.5
User 80619 does not improve AUC. Reverting changes.
Training on augumented user 113587 28/50 current_auc = 0.5
User 113587 AUC after training: 0.5
User 113587 does not improve AUC. Reverting changes.
Training on augumented user 41380 29/50 current_auc = 0.5
User 41380 AUC after training: 0.5
User 41380 does not improve AUC. Reverting changes.
Training on augumented user 58834 30/50 current_auc = 0.5
User 58834 AUC after training: 0.5
User 58834 does not improve AUC. Reverting changes.
Training on augumented user 52124 31/50 current_auc = 0.5
User 52124 AUC after training: 0.5
User 52124 does not improve AUC. Reverting changes.
Training on augumented user 36155 32/50 current_auc = 0.5
User 36155 AUC after training: 0.5
User 36155 does not improve AUC. Reverting changes.
Training on augumented user 56615 33/50 current_auc = 0.5
User 56615 AUC after training: 0.5
User 56615 does not improve AUC. Reverting changes.
Training on augumented user 51993 34/50 current_auc = 0.5
User 51993 AUC after training: 0.5
User 51993 does not improve AUC. Reverting changes.
Training on augumented user 94788 35/50 current_auc = 0.5
User 94788 AUC after training: 0.5
User 94788 does not improve AUC. Reverting changes.
Training on augumented user 38551 36/50 current_auc = 0.5
User 38551 AUC after training: 0.5
User 38551 does not improve AUC. Reverting changes.
Training on augumented user 66484 37/50 current_auc = 0.5
User 66484 AUC after training: 0.5
User 66484 does not improve AUC. Reverting changes.
Training on augumented user 70430 38/50 current_auc = 0.5
User 70430 AUC after training: 0.5
User 70430 does not improve AUC. Reverting changes.
Training on augumented user 70280 39/50 current_auc = 0.5
User 70280 AUC after training: 0.5
User 70280 does not improve AUC. Reverting changes.
Training on augumented user 30461 40/50 current_auc = 0.5
User 30461 AUC after training: 0.5
User 30461 does not improve AUC. Reverting changes.
Training on augumented user 70247 41/50 current_auc = 0.5
User 70247 AUC after training: 0.5
User 70247 does not improve AUC. Reverting changes.
Training on augumented user 100519 42/50 current_auc = 0.5
User 100519 AUC after training: 0.5
User 100519 does not improve AUC. Reverting changes.
Training on augumented user 109121 43/50 current_auc = 0.5
User 109121 AUC after training: 0.5
User 109121 does not improve AUC. Reverting changes.
Training on augumented user 86351 44/50 current_auc = 0.5
User 86351 AUC after training: 0.5
User 86351 does not improve AUC. Reverting changes.
Training on augumented user 102077 45/50 current_auc = 0.5
User 102077 AUC after training: 0.5
User 102077 does not improve AUC. Reverting changes.
Training on augumented user 126541 46/50 current_auc = 0.5
User 126541 AUC after training: 0.5
User 126541 does not improve AUC. Reverting changes.
Training on augumented user 18519 47/50 current_auc = 0.5
User 18519 AUC after training: 0.5
User 18519 does not improve AUC. Reverting changes.
Training on augumented user 49948 48/50 current_auc = 0.5
User 49948 AUC after training: 0.5
User 49948 does not improve AUC. Reverting changes.
Training on augumented user 72572 49/50 current_auc = 0.5
User 72572 AUC after training: 0.5
User 72572 does not improve AUC. Reverting changes.
[2024-12-02 18:52:52.708209] start test user 99313 134/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:52:53.115687] start test user 99313 134/567 recall augumented users by random, augumented_users = [33143, 116525, 56668, 35013, 98512, 78441, 79027, 119034, 117123, 26531, 99896, 45192, 104271, 48174, 32855, 22967, 40893, 9137, 120010, 12031, 41164, 86690, 55604, 68638, 67728, 30648, 73168, 5496, 74043, 43910, 53373, 66114, 108563, 10364, 116357, 102094, 71144, 49994, 104940, 52987, 106202, 44291, 97517, 110774, 35101, 106370, 70348, 43532, 41315, 65923]
[2024-12-02 18:52:53.132036] user = 99313 Cloud 134/567
[2024-12-02 18:52:53.141819] user = 99313 Local 134/567
[2024-12-02 18:52:53.247908] user = 99313 Local+ 134/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:52:55.185270] user = 99313 MPDA- 134/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.475
Training on augumented user 33143 0/50 current_auc = 0.475
User 33143 AUC after training: 0.475
User 33143 does not improve AUC. Reverting changes.
Training on augumented user 116525 1/50 current_auc = 0.475
User 116525 AUC after training: 0.475
User 116525 does not improve AUC. Reverting changes.
Training on augumented user 56668 2/50 current_auc = 0.475
User 56668 AUC after training: 0.475
User 56668 does not improve AUC. Reverting changes.
Training on augumented user 35013 3/50 current_auc = 0.475
User 35013 AUC after training: 0.475
User 35013 does not improve AUC. Reverting changes.
Training on augumented user 98512 4/50 current_auc = 0.475
User 98512 AUC after training: 0.475
User 98512 does not improve AUC. Reverting changes.
Training on augumented user 78441 5/50 current_auc = 0.475
User 78441 AUC after training: 0.475
User 78441 does not improve AUC. Reverting changes.
Training on augumented user 79027 6/50 current_auc = 0.475
User 79027 AUC after training: 0.475
User 79027 does not improve AUC. Reverting changes.
Training on augumented user 119034 7/50 current_auc = 0.475
User 119034 AUC after training: 0.475
User 119034 does not improve AUC. Reverting changes.
Training on augumented user 117123 8/50 current_auc = 0.475
User 117123 AUC after training: 0.475
User 117123 does not improve AUC. Reverting changes.
Training on augumented user 26531 9/50 current_auc = 0.475
User 26531 AUC after training: 0.49166666666666664
User 26531 improves AUC. Keeping the model.
Training on augumented user 99896 10/50 current_auc = 0.49166666666666664
User 99896 AUC after training: 0.475
User 99896 does not improve AUC. Reverting changes.
Training on augumented user 45192 11/50 current_auc = 0.49166666666666664
User 45192 AUC after training: 0.48333333333333334
User 45192 does not improve AUC. Reverting changes.
Training on augumented user 104271 12/50 current_auc = 0.49166666666666664
User 104271 AUC after training: 0.49166666666666664
User 104271 does not improve AUC. Reverting changes.
Training on augumented user 48174 13/50 current_auc = 0.49166666666666664
User 48174 AUC after training: 0.48333333333333334
User 48174 does not improve AUC. Reverting changes.
Training on augumented user 32855 14/50 current_auc = 0.49166666666666664
User 32855 AUC after training: 0.49166666666666664
User 32855 does not improve AUC. Reverting changes.
Training on augumented user 22967 15/50 current_auc = 0.49166666666666664
User 22967 AUC after training: 0.475
User 22967 does not improve AUC. Reverting changes.
Training on augumented user 40893 16/50 current_auc = 0.49166666666666664
User 40893 AUC after training: 0.48333333333333334
User 40893 does not improve AUC. Reverting changes.
Training on augumented user 9137 17/50 current_auc = 0.49166666666666664
User 9137 AUC after training: 0.475
User 9137 does not improve AUC. Reverting changes.
Training on augumented user 120010 18/50 current_auc = 0.49166666666666664
User 120010 AUC after training: 0.48333333333333334
User 120010 does not improve AUC. Reverting changes.
Training on augumented user 12031 19/50 current_auc = 0.49166666666666664
User 12031 AUC after training: 0.475
User 12031 does not improve AUC. Reverting changes.
Training on augumented user 41164 20/50 current_auc = 0.49166666666666664
User 41164 AUC after training: 0.49166666666666664
User 41164 does not improve AUC. Reverting changes.
Training on augumented user 86690 21/50 current_auc = 0.49166666666666664
User 86690 AUC after training: 0.48333333333333334
User 86690 does not improve AUC. Reverting changes.
Training on augumented user 55604 22/50 current_auc = 0.49166666666666664
User 55604 AUC after training: 0.475
User 55604 does not improve AUC. Reverting changes.
Training on augumented user 68638 23/50 current_auc = 0.49166666666666664
User 68638 AUC after training: 0.49166666666666664
User 68638 does not improve AUC. Reverting changes.
Training on augumented user 67728 24/50 current_auc = 0.49166666666666664
User 67728 AUC after training: 0.49166666666666664
User 67728 does not improve AUC. Reverting changes.
Training on augumented user 30648 25/50 current_auc = 0.49166666666666664
User 30648 AUC after training: 0.49166666666666664
User 30648 does not improve AUC. Reverting changes.
Training on augumented user 73168 26/50 current_auc = 0.49166666666666664
User 73168 AUC after training: 0.49166666666666664
User 73168 does not improve AUC. Reverting changes.
Training on augumented user 5496 27/50 current_auc = 0.49166666666666664
User 5496 AUC after training: 0.49166666666666664
User 5496 does not improve AUC. Reverting changes.
Training on augumented user 74043 28/50 current_auc = 0.49166666666666664
User 74043 AUC after training: 0.49166666666666664
User 74043 does not improve AUC. Reverting changes.
Training on augumented user 43910 29/50 current_auc = 0.49166666666666664
User 43910 AUC after training: 0.475
User 43910 does not improve AUC. Reverting changes.
Training on augumented user 53373 30/50 current_auc = 0.49166666666666664
User 53373 AUC after training: 0.475
User 53373 does not improve AUC. Reverting changes.
Training on augumented user 66114 31/50 current_auc = 0.49166666666666664
User 66114 AUC after training: 0.475
User 66114 does not improve AUC. Reverting changes.
Training on augumented user 108563 32/50 current_auc = 0.49166666666666664
User 108563 AUC after training: 0.48333333333333334
User 108563 does not improve AUC. Reverting changes.
Training on augumented user 10364 33/50 current_auc = 0.49166666666666664
User 10364 AUC after training: 0.49166666666666664
User 10364 does not improve AUC. Reverting changes.
Training on augumented user 116357 34/50 current_auc = 0.49166666666666664
User 116357 AUC after training: 0.49166666666666664
User 116357 does not improve AUC. Reverting changes.
Training on augumented user 102094 35/50 current_auc = 0.49166666666666664
User 102094 AUC after training: 0.49166666666666664
User 102094 does not improve AUC. Reverting changes.
Training on augumented user 71144 36/50 current_auc = 0.49166666666666664
User 71144 AUC after training: 0.49166666666666664
User 71144 does not improve AUC. Reverting changes.
Training on augumented user 49994 37/50 current_auc = 0.49166666666666664
User 49994 AUC after training: 0.475
User 49994 does not improve AUC. Reverting changes.
Training on augumented user 104940 38/50 current_auc = 0.49166666666666664
User 104940 AUC after training: 0.475
User 104940 does not improve AUC. Reverting changes.
Training on augumented user 52987 39/50 current_auc = 0.49166666666666664
User 52987 AUC after training: 0.48333333333333334
User 52987 does not improve AUC. Reverting changes.
Training on augumented user 106202 40/50 current_auc = 0.49166666666666664
User 106202 AUC after training: 0.49166666666666664
User 106202 does not improve AUC. Reverting changes.
Training on augumented user 44291 41/50 current_auc = 0.49166666666666664
User 44291 AUC after training: 0.48333333333333334
User 44291 does not improve AUC. Reverting changes.
Training on augumented user 97517 42/50 current_auc = 0.49166666666666664
User 97517 AUC after training: 0.49166666666666664
User 97517 does not improve AUC. Reverting changes.
Training on augumented user 110774 43/50 current_auc = 0.49166666666666664
User 110774 AUC after training: 0.48333333333333334
User 110774 does not improve AUC. Reverting changes.
Training on augumented user 35101 44/50 current_auc = 0.49166666666666664
User 35101 AUC after training: 0.49166666666666664
User 35101 does not improve AUC. Reverting changes.
Training on augumented user 106370 45/50 current_auc = 0.49166666666666664
User 106370 AUC after training: 0.49166666666666664
User 106370 does not improve AUC. Reverting changes.
Training on augumented user 70348 46/50 current_auc = 0.49166666666666664
User 70348 AUC after training: 0.49166666666666664
User 70348 does not improve AUC. Reverting changes.
Training on augumented user 43532 47/50 current_auc = 0.49166666666666664
User 43532 AUC after training: 0.475
User 43532 does not improve AUC. Reverting changes.
Training on augumented user 41315 48/50 current_auc = 0.49166666666666664
User 41315 AUC after training: 0.48333333333333334
User 41315 does not improve AUC. Reverting changes.
Training on augumented user 65923 49/50 current_auc = 0.49166666666666664
User 65923 AUC after training: 0.48333333333333334
User 65923 does not improve AUC. Reverting changes.
[2024-12-02 18:53:25.193815] start test user 99320 135/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:53:25.742713] start test user 99320 135/567 recall augumented users by random, augumented_users = [101302, 426, 120624, 90575, 7355, 101366, 9984, 85413, 74473, 130146, 125511, 127392, 26872, 80205, 41987, 132827, 126440, 56670, 86103, 85651, 91210, 10054, 33423, 43933, 3759, 66765, 42927, 100018, 106468, 113678, 134010, 124957, 72745, 92407, 43612, 26271, 132758, 122505, 84777, 138322, 13627, 110587, 17574, 46354, 60524, 108317, 125441, 137418, 50790, 37612]
[2024-12-02 18:53:25.772621] user = 99320 Cloud 135/567
[2024-12-02 18:53:25.801841] user = 99320 Local 135/567
[2024-12-02 18:53:25.874269] user = 99320 Local+ 135/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:53:28.506199] user = 99320 MPDA- 135/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7206349206349206
Training on augumented user 101302 0/50 current_auc = 0.7206349206349206
User 101302 AUC after training: 0.7201814058956916
User 101302 does not improve AUC. Reverting changes.
Training on augumented user 426 1/50 current_auc = 0.7206349206349206
User 426 AUC after training: 0.7206349206349206
User 426 does not improve AUC. Reverting changes.
Training on augumented user 120624 2/50 current_auc = 0.7206349206349206
User 120624 AUC after training: 0.7219954648526077
User 120624 improves AUC. Keeping the model.
Training on augumented user 90575 3/50 current_auc = 0.7219954648526077
User 90575 AUC after training: 0.719501133786848
User 90575 does not improve AUC. Reverting changes.
Training on augumented user 7355 4/50 current_auc = 0.7219954648526077
User 7355 AUC after training: 0.7224489795918366
User 7355 improves AUC. Keeping the model.
Training on augumented user 101366 5/50 current_auc = 0.7224489795918366
User 101366 AUC after training: 0.7206349206349206
User 101366 does not improve AUC. Reverting changes.
Training on augumented user 9984 6/50 current_auc = 0.7224489795918366
User 9984 AUC after training: 0.7224489795918366
User 9984 does not improve AUC. Reverting changes.
Training on augumented user 85413 7/50 current_auc = 0.7224489795918366
User 85413 AUC after training: 0.7224489795918366
User 85413 does not improve AUC. Reverting changes.
Training on augumented user 74473 8/50 current_auc = 0.7224489795918366
User 74473 AUC after training: 0.7215419501133786
User 74473 does not improve AUC. Reverting changes.
Training on augumented user 130146 9/50 current_auc = 0.7224489795918366
User 130146 AUC after training: 0.7219954648526077
User 130146 does not improve AUC. Reverting changes.
Training on augumented user 125511 10/50 current_auc = 0.7224489795918366
User 125511 AUC after training: 0.7224489795918366
User 125511 does not improve AUC. Reverting changes.
Training on augumented user 127392 11/50 current_auc = 0.7224489795918366
User 127392 AUC after training: 0.7224489795918366
User 127392 does not improve AUC. Reverting changes.
Training on augumented user 26872 12/50 current_auc = 0.7224489795918366
User 26872 AUC after training: 0.7224489795918366
User 26872 does not improve AUC. Reverting changes.
Training on augumented user 80205 13/50 current_auc = 0.7224489795918366
User 80205 AUC after training: 0.7224489795918366
User 80205 does not improve AUC. Reverting changes.
Training on augumented user 41987 14/50 current_auc = 0.7224489795918366
User 41987 AUC after training: 0.7215419501133786
User 41987 does not improve AUC. Reverting changes.
Training on augumented user 132827 15/50 current_auc = 0.7224489795918366
User 132827 AUC after training: 0.7229024943310657
User 132827 improves AUC. Keeping the model.
Training on augumented user 126440 16/50 current_auc = 0.7229024943310657
User 126440 AUC after training: 0.7229024943310657
User 126440 does not improve AUC. Reverting changes.
Training on augumented user 56670 17/50 current_auc = 0.7229024943310657
User 56670 AUC after training: 0.7224489795918366
User 56670 does not improve AUC. Reverting changes.
Training on augumented user 86103 18/50 current_auc = 0.7229024943310657
User 86103 AUC after training: 0.7229024943310657
User 86103 does not improve AUC. Reverting changes.
Training on augumented user 85651 19/50 current_auc = 0.7229024943310657
User 85651 AUC after training: 0.7219954648526078
User 85651 does not improve AUC. Reverting changes.
Training on augumented user 91210 20/50 current_auc = 0.7229024943310657
User 91210 AUC after training: 0.7224489795918366
User 91210 does not improve AUC. Reverting changes.
Training on augumented user 10054 21/50 current_auc = 0.7229024943310657
User 10054 AUC after training: 0.720861678004535
User 10054 does not improve AUC. Reverting changes.
Training on augumented user 33423 22/50 current_auc = 0.7229024943310657
User 33423 AUC after training: 0.7226757369614513
User 33423 does not improve AUC. Reverting changes.
Training on augumented user 43933 23/50 current_auc = 0.7229024943310657
User 43933 AUC after training: 0.7247165532879818
User 43933 improves AUC. Keeping the model.
Training on augumented user 3759 24/50 current_auc = 0.7247165532879818
User 3759 AUC after training: 0.7247165532879818
User 3759 does not improve AUC. Reverting changes.
Training on augumented user 66765 25/50 current_auc = 0.7247165532879818
User 66765 AUC after training: 0.7247165532879818
User 66765 does not improve AUC. Reverting changes.
Training on augumented user 42927 26/50 current_auc = 0.7247165532879818
User 42927 AUC after training: 0.7233560090702947
User 42927 does not improve AUC. Reverting changes.
Training on augumented user 100018 27/50 current_auc = 0.7247165532879818
User 100018 AUC after training: 0.7242630385487528
User 100018 does not improve AUC. Reverting changes.
Training on augumented user 106468 28/50 current_auc = 0.7247165532879818
User 106468 AUC after training: 0.7251700680272108
User 106468 improves AUC. Keeping the model.
Training on augumented user 113678 29/50 current_auc = 0.7251700680272108
User 113678 AUC after training: 0.726077097505669
User 113678 improves AUC. Keeping the model.
Training on augumented user 134010 30/50 current_auc = 0.726077097505669
User 134010 AUC after training: 0.7256235827664399
User 134010 does not improve AUC. Reverting changes.
Training on augumented user 124957 31/50 current_auc = 0.726077097505669
User 124957 AUC after training: 0.726984126984127
User 124957 improves AUC. Keeping the model.
Training on augumented user 72745 32/50 current_auc = 0.726984126984127
User 72745 AUC after training: 0.726984126984127
User 72745 does not improve AUC. Reverting changes.
Training on augumented user 92407 33/50 current_auc = 0.726984126984127
User 92407 AUC after training: 0.7251700680272108
User 92407 does not improve AUC. Reverting changes.
Training on augumented user 43612 34/50 current_auc = 0.726984126984127
User 43612 AUC after training: 0.7247165532879819
User 43612 does not improve AUC. Reverting changes.
Training on augumented user 26271 35/50 current_auc = 0.726984126984127
User 26271 AUC after training: 0.7256235827664398
User 26271 does not improve AUC. Reverting changes.
Training on augumented user 132758 36/50 current_auc = 0.726984126984127
User 132758 AUC after training: 0.7256235827664398
User 132758 does not improve AUC. Reverting changes.
Training on augumented user 122505 37/50 current_auc = 0.726984126984127
User 122505 AUC after training: 0.7219954648526077
User 122505 does not improve AUC. Reverting changes.
Training on augumented user 84777 38/50 current_auc = 0.726984126984127
User 84777 AUC after training: 0.7242630385487528
User 84777 does not improve AUC. Reverting changes.
Training on augumented user 138322 39/50 current_auc = 0.726984126984127
User 138322 AUC after training: 0.7265306122448979
User 138322 does not improve AUC. Reverting changes.
Training on augumented user 13627 40/50 current_auc = 0.726984126984127
User 13627 AUC after training: 0.7265306122448979
User 13627 does not improve AUC. Reverting changes.
Training on augumented user 110587 41/50 current_auc = 0.726984126984127
User 110587 AUC after training: 0.7256235827664399
User 110587 does not improve AUC. Reverting changes.
Training on augumented user 17574 42/50 current_auc = 0.726984126984127
User 17574 AUC after training: 0.7265306122448979
User 17574 does not improve AUC. Reverting changes.
Training on augumented user 46354 43/50 current_auc = 0.726984126984127
User 46354 AUC after training: 0.7242630385487528
User 46354 does not improve AUC. Reverting changes.
Training on augumented user 60524 44/50 current_auc = 0.726984126984127
User 60524 AUC after training: 0.7256235827664399
User 60524 does not improve AUC. Reverting changes.
Training on augumented user 108317 45/50 current_auc = 0.726984126984127
User 108317 AUC after training: 0.7206349206349206
User 108317 does not improve AUC. Reverting changes.
Training on augumented user 125441 46/50 current_auc = 0.726984126984127
User 125441 AUC after training: 0.7256235827664399
User 125441 does not improve AUC. Reverting changes.
Training on augumented user 137418 47/50 current_auc = 0.726984126984127
User 137418 AUC after training: 0.726984126984127
User 137418 does not improve AUC. Reverting changes.
Training on augumented user 50790 48/50 current_auc = 0.726984126984127
User 50790 AUC after training: 0.7233560090702947
User 50790 does not improve AUC. Reverting changes.
Training on augumented user 37612 49/50 current_auc = 0.726984126984127
User 37612 AUC after training: 0.7256235827664399
User 37612 does not improve AUC. Reverting changes.
[2024-12-02 18:54:00.479216] start test user 99347 136/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:54:01.048862] start test user 99347 136/567 recall augumented users by random, augumented_users = [30645, 83558, 123651, 58983, 11522, 80004, 95576, 110865, 31694, 9986, 80019, 66512, 85004, 91544, 27131, 28297, 85858, 60051, 56123, 92028, 38751, 121514, 100042, 109958, 61479, 109919, 28005, 101512, 25386, 121044, 42329, 59115, 13883, 921, 59652, 48471, 77584, 58387, 3073, 77839, 51813, 90001, 19500, 116061, 52704, 79187, 115645, 9146, 16646, 102882]
[2024-12-02 18:54:01.066858] user = 99347 Cloud 136/567
[2024-12-02 18:54:01.100500] user = 99347 Local 136/567
[2024-12-02 18:54:01.313057] user = 99347 Local+ 136/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:54:03.946101] user = 99347 MPDA- 136/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6604892512972572
Training on augumented user 30645 0/50 current_auc = 0.6604892512972572
User 30645 AUC after training: 0.6601186063750927
User 30645 does not improve AUC. Reverting changes.
Training on augumented user 83558 1/50 current_auc = 0.6604892512972572
User 83558 AUC after training: 0.6620953792933038
User 83558 improves AUC. Keeping the model.
Training on augumented user 123651 2/50 current_auc = 0.6620953792933038
User 123651 AUC after training: 0.6627131208302446
User 123651 improves AUC. Keeping the model.
Training on augumented user 58983 3/50 current_auc = 0.6627131208302446
User 58983 AUC after training: 0.6619718309859156
User 58983 does not improve AUC. Reverting changes.
Training on augumented user 11522 4/50 current_auc = 0.6627131208302446
User 11522 AUC after training: 0.6632073140597974
User 11522 improves AUC. Keeping the model.
Training on augumented user 80004 5/50 current_auc = 0.6632073140597974
User 80004 AUC after training: 0.6614776377563627
User 80004 does not improve AUC. Reverting changes.
Training on augumented user 95576 6/50 current_auc = 0.6632073140597974
User 95576 AUC after training: 0.6612305411415864
User 95576 does not improve AUC. Reverting changes.
Training on augumented user 110865 7/50 current_auc = 0.6632073140597974
User 110865 AUC after training: 0.6607363479120336
User 110865 does not improve AUC. Reverting changes.
Training on augumented user 31694 8/50 current_auc = 0.6632073140597974
User 31694 AUC after training: 0.6630837657524092
User 31694 does not improve AUC. Reverting changes.
Training on augumented user 9986 9/50 current_auc = 0.6632073140597974
User 9986 AUC after training: 0.6632073140597974
User 9986 does not improve AUC. Reverting changes.
Training on augumented user 80019 10/50 current_auc = 0.6632073140597974
User 80019 AUC after training: 0.6632073140597974
User 80019 does not improve AUC. Reverting changes.
Training on augumented user 66512 11/50 current_auc = 0.6632073140597974
User 66512 AUC after training: 0.6632073140597974
User 66512 does not improve AUC. Reverting changes.
Training on augumented user 85004 12/50 current_auc = 0.6632073140597974
User 85004 AUC after training: 0.6619718309859155
User 85004 does not improve AUC. Reverting changes.
Training on augumented user 91544 13/50 current_auc = 0.6632073140597974
User 91544 AUC after training: 0.6597479614529281
User 91544 does not improve AUC. Reverting changes.
Training on augumented user 27131 14/50 current_auc = 0.6632073140597974
User 27131 AUC after training: 0.6639486039041266
User 27131 improves AUC. Keeping the model.
Training on augumented user 28297 15/50 current_auc = 0.6639486039041266
User 28297 AUC after training: 0.663577958981962
User 28297 does not improve AUC. Reverting changes.
Training on augumented user 85858 16/50 current_auc = 0.6639486039041266
User 85858 AUC after training: 0.6643192488262911
User 85858 improves AUC. Keeping the model.
Training on augumented user 60051 17/50 current_auc = 0.6643192488262911
User 60051 AUC after training: 0.6637015072893502
User 60051 does not improve AUC. Reverting changes.
Training on augumented user 56123 18/50 current_auc = 0.6643192488262911
User 56123 AUC after training: 0.6651840869780085
User 56123 improves AUC. Keeping the model.
Training on augumented user 92028 19/50 current_auc = 0.6651840869780085
User 92028 AUC after training: 0.6651840869780085
User 92028 does not improve AUC. Reverting changes.
Training on augumented user 38751 20/50 current_auc = 0.6651840869780085
User 38751 AUC after training: 0.6638250555967384
User 38751 does not improve AUC. Reverting changes.
Training on augumented user 121514 21/50 current_auc = 0.6651840869780085
User 121514 AUC after training: 0.6625895725228564
User 121514 does not improve AUC. Reverting changes.
Training on augumented user 100042 22/50 current_auc = 0.6651840869780085
User 100042 AUC after training: 0.6644427971336794
User 100042 does not improve AUC. Reverting changes.
Training on augumented user 109958 23/50 current_auc = 0.6651840869780085
User 109958 AUC after training: 0.6651840869780085
User 109958 does not improve AUC. Reverting changes.
Training on augumented user 61479 24/50 current_auc = 0.6651840869780085
User 61479 AUC after training: 0.6651840869780083
User 61479 does not improve AUC. Reverting changes.
Training on augumented user 109919 25/50 current_auc = 0.6651840869780085
User 109919 AUC after training: 0.6646898937484557
User 109919 does not improve AUC. Reverting changes.
Training on augumented user 28005 26/50 current_auc = 0.6651840869780085
User 28005 AUC after training: 0.6659253768223377
User 28005 improves AUC. Keeping the model.
Training on augumented user 101512 27/50 current_auc = 0.6659253768223377
User 101512 AUC after training: 0.665554731900173
User 101512 does not improve AUC. Reverting changes.
Training on augumented user 25386 28/50 current_auc = 0.6659253768223377
User 25386 AUC after training: 0.664936990363232
User 25386 does not improve AUC. Reverting changes.
Training on augumented user 121044 29/50 current_auc = 0.6659253768223377
User 121044 AUC after training: 0.6651840869780083
User 121044 does not improve AUC. Reverting changes.
Training on augumented user 42329 30/50 current_auc = 0.6659253768223377
User 42329 AUC after training: 0.6638250555967384
User 42329 does not improve AUC. Reverting changes.
Training on augumented user 59115 31/50 current_auc = 0.6659253768223377
User 59115 AUC after training: 0.6644427971336793
User 59115 does not improve AUC. Reverting changes.
Training on augumented user 13883 32/50 current_auc = 0.6659253768223377
User 13883 AUC after training: 0.665554731900173
User 13883 does not improve AUC. Reverting changes.
Training on augumented user 921 33/50 current_auc = 0.6659253768223377
User 921 AUC after training: 0.6648134420558438
User 921 does not improve AUC. Reverting changes.
Training on augumented user 59652 34/50 current_auc = 0.6659253768223377
User 59652 AUC after training: 0.6654311835927849
User 59652 does not improve AUC. Reverting changes.
Training on augumented user 48471 35/50 current_auc = 0.6659253768223377
User 48471 AUC after training: 0.6653076352853967
User 48471 does not improve AUC. Reverting changes.
Training on augumented user 77584 36/50 current_auc = 0.6659253768223377
User 77584 AUC after training: 0.6661724734371138
User 77584 improves AUC. Keeping the model.
Training on augumented user 58387 37/50 current_auc = 0.6661724734371138
User 58387 AUC after training: 0.6667902149740549
User 58387 improves AUC. Keeping the model.
Training on augumented user 3073 38/50 current_auc = 0.6667902149740549
User 3073 AUC after training: 0.6656782802075613
User 3073 does not improve AUC. Reverting changes.
Training on augumented user 77839 39/50 current_auc = 0.6667902149740549
User 77839 AUC after training: 0.6659253768223375
User 77839 does not improve AUC. Reverting changes.
Training on augumented user 51813 40/50 current_auc = 0.6667902149740549
User 51813 AUC after training: 0.6664195700518903
User 51813 does not improve AUC. Reverting changes.
Training on augumented user 90001 41/50 current_auc = 0.6667902149740549
User 90001 AUC after training: 0.6643192488262911
User 90001 does not improve AUC. Reverting changes.
Training on augumented user 19500 42/50 current_auc = 0.6667902149740549
User 19500 AUC after training: 0.6660489251297257
User 19500 does not improve AUC. Reverting changes.
Training on augumented user 116061 43/50 current_auc = 0.6667902149740549
User 116061 AUC after training: 0.6640721522115148
User 116061 does not improve AUC. Reverting changes.
Training on augumented user 52704 44/50 current_auc = 0.6667902149740549
User 52704 AUC after training: 0.6651840869780085
User 52704 does not improve AUC. Reverting changes.
Training on augumented user 79187 45/50 current_auc = 0.6667902149740549
User 79187 AUC after training: 0.6670373115888312
User 79187 improves AUC. Keeping the model.
Training on augumented user 115645 46/50 current_auc = 0.6670373115888312
User 115645 AUC after training: 0.6671608598962194
User 115645 improves AUC. Keeping the model.
Training on augumented user 9146 47/50 current_auc = 0.6671608598962194
User 9146 AUC after training: 0.6653076352853965
User 9146 does not improve AUC. Reverting changes.
Training on augumented user 16646 48/50 current_auc = 0.6671608598962194
User 16646 AUC after training: 0.6646898937484557
User 16646 does not improve AUC. Reverting changes.
Training on augumented user 102882 49/50 current_auc = 0.6671608598962194
User 102882 AUC after training: 0.6646898937484556
User 102882 does not improve AUC. Reverting changes.
[2024-12-02 18:54:34.996986] start test user 99360 137/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:54:35.695275] start test user 99360 137/567 recall augumented users by random, augumented_users = [33042, 107285, 67106, 1791, 119081, 10977, 91720, 63126, 84766, 5561, 77664, 28461, 121558, 53569, 23917, 56110, 84478, 114194, 107364, 132859, 129890, 135244, 107422, 92041, 97793, 10947, 45120, 80328, 95197, 52414, 38859, 61038, 76856, 21247, 61245, 90877, 137079, 116153, 117869, 127612, 128165, 39880, 31670, 114676, 41140, 93950, 64187, 136899, 99729, 110173]
[2024-12-02 18:54:35.726847] user = 99360 Cloud 137/567
[2024-12-02 18:54:35.754526] user = 99360 Local 137/567
[2024-12-02 18:54:36.245195] user = 99360 Local+ 137/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:54:39.145687] user = 99360 MPDA- 137/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.9104761904761904
Training on augumented user 33042 0/50 current_auc = 0.9104761904761904
User 33042 AUC after training: 0.9114285714285715
User 33042 improves AUC. Keeping the model.
Training on augumented user 107285 1/50 current_auc = 0.9114285714285715
User 107285 AUC after training: 0.9114285714285715
User 107285 does not improve AUC. Reverting changes.
Training on augumented user 67106 2/50 current_auc = 0.9114285714285715
User 67106 AUC after training: 0.9114285714285715
User 67106 does not improve AUC. Reverting changes.
Training on augumented user 1791 3/50 current_auc = 0.9114285714285715
User 1791 AUC after training: 0.9104761904761904
User 1791 does not improve AUC. Reverting changes.
Training on augumented user 119081 4/50 current_auc = 0.9114285714285715
User 119081 AUC after training: 0.9114285714285715
User 119081 does not improve AUC. Reverting changes.
Training on augumented user 10977 5/50 current_auc = 0.9114285714285715
User 10977 AUC after training: 0.9085714285714286
User 10977 does not improve AUC. Reverting changes.
Training on augumented user 91720 6/50 current_auc = 0.9114285714285715
User 91720 AUC after training: 0.9114285714285715
User 91720 does not improve AUC. Reverting changes.
Training on augumented user 63126 7/50 current_auc = 0.9114285714285715
User 63126 AUC after training: 0.9104761904761904
User 63126 does not improve AUC. Reverting changes.
Training on augumented user 84766 8/50 current_auc = 0.9114285714285715
User 84766 AUC after training: 0.9104761904761904
User 84766 does not improve AUC. Reverting changes.
Training on augumented user 5561 9/50 current_auc = 0.9114285714285715
User 5561 AUC after training: 0.9114285714285715
User 5561 does not improve AUC. Reverting changes.
Training on augumented user 77664 10/50 current_auc = 0.9114285714285715
User 77664 AUC after training: 0.9104761904761904
User 77664 does not improve AUC. Reverting changes.
Training on augumented user 28461 11/50 current_auc = 0.9114285714285715
User 28461 AUC after training: 0.9114285714285715
User 28461 does not improve AUC. Reverting changes.
Training on augumented user 121558 12/50 current_auc = 0.9114285714285715
User 121558 AUC after training: 0.9114285714285715
User 121558 does not improve AUC. Reverting changes.
Training on augumented user 53569 13/50 current_auc = 0.9114285714285715
User 53569 AUC after training: 0.9114285714285715
User 53569 does not improve AUC. Reverting changes.
Training on augumented user 23917 14/50 current_auc = 0.9114285714285715
User 23917 AUC after training: 0.9104761904761904
User 23917 does not improve AUC. Reverting changes.
Training on augumented user 56110 15/50 current_auc = 0.9114285714285715
User 56110 AUC after training: 0.9114285714285715
User 56110 does not improve AUC. Reverting changes.
Training on augumented user 84478 16/50 current_auc = 0.9114285714285715
User 84478 AUC after training: 0.9104761904761904
User 84478 does not improve AUC. Reverting changes.
Training on augumented user 114194 17/50 current_auc = 0.9114285714285715
User 114194 AUC after training: 0.9104761904761904
User 114194 does not improve AUC. Reverting changes.
Training on augumented user 107364 18/50 current_auc = 0.9114285714285715
User 107364 AUC after training: 0.9114285714285715
User 107364 does not improve AUC. Reverting changes.
Training on augumented user 132859 19/50 current_auc = 0.9114285714285715
User 132859 AUC after training: 0.9104761904761904
User 132859 does not improve AUC. Reverting changes.
Training on augumented user 129890 20/50 current_auc = 0.9114285714285715
User 129890 AUC after training: 0.9104761904761904
User 129890 does not improve AUC. Reverting changes.
Training on augumented user 135244 21/50 current_auc = 0.9114285714285715
User 135244 AUC after training: 0.9114285714285715
User 135244 does not improve AUC. Reverting changes.
Training on augumented user 107422 22/50 current_auc = 0.9114285714285715
User 107422 AUC after training: 0.9114285714285715
User 107422 does not improve AUC. Reverting changes.
Training on augumented user 92041 23/50 current_auc = 0.9114285714285715
User 92041 AUC after training: 0.9114285714285715
User 92041 does not improve AUC. Reverting changes.
Training on augumented user 97793 24/50 current_auc = 0.9114285714285715
User 97793 AUC after training: 0.9104761904761904
User 97793 does not improve AUC. Reverting changes.
Training on augumented user 10947 25/50 current_auc = 0.9114285714285715
User 10947 AUC after training: 0.9114285714285715
User 10947 does not improve AUC. Reverting changes.
Training on augumented user 45120 26/50 current_auc = 0.9114285714285715
User 45120 AUC after training: 0.9114285714285715
User 45120 does not improve AUC. Reverting changes.
Training on augumented user 80328 27/50 current_auc = 0.9114285714285715
User 80328 AUC after training: 0.9104761904761904
User 80328 does not improve AUC. Reverting changes.
Training on augumented user 95197 28/50 current_auc = 0.9114285714285715
User 95197 AUC after training: 0.9114285714285715
User 95197 does not improve AUC. Reverting changes.
Training on augumented user 52414 29/50 current_auc = 0.9114285714285715
User 52414 AUC after training: 0.9104761904761904
User 52414 does not improve AUC. Reverting changes.
Training on augumented user 38859 30/50 current_auc = 0.9114285714285715
User 38859 AUC after training: 0.9123809523809524
User 38859 improves AUC. Keeping the model.
Training on augumented user 61038 31/50 current_auc = 0.9123809523809524
User 61038 AUC after training: 0.9123809523809524
User 61038 does not improve AUC. Reverting changes.
Training on augumented user 76856 32/50 current_auc = 0.9123809523809524
User 76856 AUC after training: 0.9133333333333333
User 76856 improves AUC. Keeping the model.
Training on augumented user 21247 33/50 current_auc = 0.9133333333333333
User 21247 AUC after training: 0.9133333333333333
User 21247 does not improve AUC. Reverting changes.
Training on augumented user 61245 34/50 current_auc = 0.9133333333333333
User 61245 AUC after training: 0.9133333333333333
User 61245 does not improve AUC. Reverting changes.
Training on augumented user 90877 35/50 current_auc = 0.9133333333333333
User 90877 AUC after training: 0.9123809523809524
User 90877 does not improve AUC. Reverting changes.
Training on augumented user 137079 36/50 current_auc = 0.9133333333333333
User 137079 AUC after training: 0.9133333333333333
User 137079 does not improve AUC. Reverting changes.
Training on augumented user 116153 37/50 current_auc = 0.9133333333333333
User 116153 AUC after training: 0.9114285714285715
User 116153 does not improve AUC. Reverting changes.
Training on augumented user 117869 38/50 current_auc = 0.9133333333333333
User 117869 AUC after training: 0.9114285714285715
User 117869 does not improve AUC. Reverting changes.
Training on augumented user 127612 39/50 current_auc = 0.9133333333333333
User 127612 AUC after training: 0.9142857142857143
User 127612 improves AUC. Keeping the model.
Training on augumented user 128165 40/50 current_auc = 0.9142857142857143
User 128165 AUC after training: 0.9161904761904762
User 128165 improves AUC. Keeping the model.
Training on augumented user 39880 41/50 current_auc = 0.9161904761904762
User 39880 AUC after training: 0.9142857142857143
User 39880 does not improve AUC. Reverting changes.
Training on augumented user 31670 42/50 current_auc = 0.9161904761904762
User 31670 AUC after training: 0.9142857142857143
User 31670 does not improve AUC. Reverting changes.
Training on augumented user 114676 43/50 current_auc = 0.9161904761904762
User 114676 AUC after training: 0.9123809523809524
User 114676 does not improve AUC. Reverting changes.
Training on augumented user 41140 44/50 current_auc = 0.9161904761904762
User 41140 AUC after training: 0.9104761904761904
User 41140 does not improve AUC. Reverting changes.
Training on augumented user 93950 45/50 current_auc = 0.9161904761904762
User 93950 AUC after training: 0.9142857142857143
User 93950 does not improve AUC. Reverting changes.
Training on augumented user 64187 46/50 current_auc = 0.9161904761904762
User 64187 AUC after training: 0.9142857142857143
User 64187 does not improve AUC. Reverting changes.
Training on augumented user 136899 47/50 current_auc = 0.9161904761904762
User 136899 AUC after training: 0.9123809523809524
User 136899 does not improve AUC. Reverting changes.
Training on augumented user 99729 48/50 current_auc = 0.9161904761904762
User 99729 AUC after training: 0.9152380952380952
User 99729 does not improve AUC. Reverting changes.
Training on augumented user 110173 49/50 current_auc = 0.9161904761904762
User 110173 AUC after training: 0.9114285714285715
User 110173 does not improve AUC. Reverting changes.
[2024-12-02 18:55:09.848329] start test user 99372 138/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:55:10.516544] start test user 99372 138/567 recall augumented users by random, augumented_users = [63519, 46411, 72736, 111646, 97111, 30740, 6609, 66433, 66532, 114773, 98370, 38227, 49115, 131510, 87413, 11692, 52765, 69856, 70874, 6696, 97903, 110692, 119270, 8919, 131564, 92453, 739, 103266, 33774, 136124, 47222, 20550, 126421, 35523, 10779, 54955, 78477, 78502, 87358, 70316, 101144, 77031, 114084, 93780, 85800, 51757, 131327, 23110, 130581, 136166]
[2024-12-02 18:55:10.538653] user = 99372 Cloud 138/567
[2024-12-02 18:55:10.549336] user = 99372 Local 138/567
[2024-12-02 18:55:10.584453] user = 99372 Local+ 138/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:55:13.169404] user = 99372 MPDA- 138/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5333333333333333
Training on augumented user 63519 0/50 current_auc = 0.5333333333333333
User 63519 AUC after training: 0.5333333333333333
User 63519 does not improve AUC. Reverting changes.
Training on augumented user 46411 1/50 current_auc = 0.5333333333333333
User 46411 AUC after training: 0.5333333333333333
User 46411 does not improve AUC. Reverting changes.
Training on augumented user 72736 2/50 current_auc = 0.5333333333333333
User 72736 AUC after training: 0.5333333333333333
User 72736 does not improve AUC. Reverting changes.
Training on augumented user 111646 3/50 current_auc = 0.5333333333333333
User 111646 AUC after training: 0.5333333333333333
User 111646 does not improve AUC. Reverting changes.
Training on augumented user 97111 4/50 current_auc = 0.5333333333333333
User 97111 AUC after training: 0.5333333333333333
User 97111 does not improve AUC. Reverting changes.
Training on augumented user 30740 5/50 current_auc = 0.5333333333333333
User 30740 AUC after training: 0.5333333333333333
User 30740 does not improve AUC. Reverting changes.
Training on augumented user 6609 6/50 current_auc = 0.5333333333333333
User 6609 AUC after training: 0.5333333333333333
User 6609 does not improve AUC. Reverting changes.
Training on augumented user 66433 7/50 current_auc = 0.5333333333333333
User 66433 AUC after training: 0.5333333333333333
User 66433 does not improve AUC. Reverting changes.
Training on augumented user 66532 8/50 current_auc = 0.5333333333333333
User 66532 AUC after training: 0.5333333333333333
User 66532 does not improve AUC. Reverting changes.
Training on augumented user 114773 9/50 current_auc = 0.5333333333333333
User 114773 AUC after training: 0.5333333333333333
User 114773 does not improve AUC. Reverting changes.
Training on augumented user 98370 10/50 current_auc = 0.5333333333333333
User 98370 AUC after training: 0.5666666666666667
User 98370 improves AUC. Keeping the model.
Training on augumented user 38227 11/50 current_auc = 0.5666666666666667
User 38227 AUC after training: 0.5333333333333333
User 38227 does not improve AUC. Reverting changes.
Training on augumented user 49115 12/50 current_auc = 0.5666666666666667
User 49115 AUC after training: 0.5666666666666667
User 49115 does not improve AUC. Reverting changes.
Training on augumented user 131510 13/50 current_auc = 0.5666666666666667
User 131510 AUC after training: 0.5666666666666667
User 131510 does not improve AUC. Reverting changes.
Training on augumented user 87413 14/50 current_auc = 0.5666666666666667
User 87413 AUC after training: 0.5666666666666667
User 87413 does not improve AUC. Reverting changes.
Training on augumented user 11692 15/50 current_auc = 0.5666666666666667
User 11692 AUC after training: 0.5666666666666667
User 11692 does not improve AUC. Reverting changes.
Training on augumented user 52765 16/50 current_auc = 0.5666666666666667
User 52765 AUC after training: 0.5666666666666667
User 52765 does not improve AUC. Reverting changes.
Training on augumented user 69856 17/50 current_auc = 0.5666666666666667
User 69856 AUC after training: 0.5333333333333333
User 69856 does not improve AUC. Reverting changes.
Training on augumented user 70874 18/50 current_auc = 0.5666666666666667
User 70874 AUC after training: 0.5666666666666667
User 70874 does not improve AUC. Reverting changes.
Training on augumented user 6696 19/50 current_auc = 0.5666666666666667
User 6696 AUC after training: 0.5666666666666667
User 6696 does not improve AUC. Reverting changes.
Training on augumented user 97903 20/50 current_auc = 0.5666666666666667
User 97903 AUC after training: 0.5333333333333333
User 97903 does not improve AUC. Reverting changes.
Training on augumented user 110692 21/50 current_auc = 0.5666666666666667
User 110692 AUC after training: 0.5666666666666667
User 110692 does not improve AUC. Reverting changes.
Training on augumented user 119270 22/50 current_auc = 0.5666666666666667
User 119270 AUC after training: 0.5333333333333333
User 119270 does not improve AUC. Reverting changes.
Training on augumented user 8919 23/50 current_auc = 0.5666666666666667
User 8919 AUC after training: 0.5333333333333333
User 8919 does not improve AUC. Reverting changes.
Training on augumented user 131564 24/50 current_auc = 0.5666666666666667
User 131564 AUC after training: 0.5666666666666667
User 131564 does not improve AUC. Reverting changes.
Training on augumented user 92453 25/50 current_auc = 0.5666666666666667
User 92453 AUC after training: 0.5666666666666667
User 92453 does not improve AUC. Reverting changes.
Training on augumented user 739 26/50 current_auc = 0.5666666666666667
User 739 AUC after training: 0.5666666666666667
User 739 does not improve AUC. Reverting changes.
Training on augumented user 103266 27/50 current_auc = 0.5666666666666667
User 103266 AUC after training: 0.5666666666666667
User 103266 does not improve AUC. Reverting changes.
Training on augumented user 33774 28/50 current_auc = 0.5666666666666667
User 33774 AUC after training: 0.5666666666666667
User 33774 does not improve AUC. Reverting changes.
Training on augumented user 136124 29/50 current_auc = 0.5666666666666667
User 136124 AUC after training: 0.5666666666666667
User 136124 does not improve AUC. Reverting changes.
Training on augumented user 47222 30/50 current_auc = 0.5666666666666667
User 47222 AUC after training: 0.5666666666666667
User 47222 does not improve AUC. Reverting changes.
Training on augumented user 20550 31/50 current_auc = 0.5666666666666667
User 20550 AUC after training: 0.5666666666666667
User 20550 does not improve AUC. Reverting changes.
Training on augumented user 126421 32/50 current_auc = 0.5666666666666667
User 126421 AUC after training: 0.5666666666666667
User 126421 does not improve AUC. Reverting changes.
Training on augumented user 35523 33/50 current_auc = 0.5666666666666667
User 35523 AUC after training: 0.5333333333333333
User 35523 does not improve AUC. Reverting changes.
Training on augumented user 10779 34/50 current_auc = 0.5666666666666667
User 10779 AUC after training: 0.5666666666666667
User 10779 does not improve AUC. Reverting changes.
Training on augumented user 54955 35/50 current_auc = 0.5666666666666667
User 54955 AUC after training: 0.5666666666666667
User 54955 does not improve AUC. Reverting changes.
Training on augumented user 78477 36/50 current_auc = 0.5666666666666667
User 78477 AUC after training: 0.5666666666666667
User 78477 does not improve AUC. Reverting changes.
Training on augumented user 78502 37/50 current_auc = 0.5666666666666667
User 78502 AUC after training: 0.5333333333333333
User 78502 does not improve AUC. Reverting changes.
Training on augumented user 87358 38/50 current_auc = 0.5666666666666667
User 87358 AUC after training: 0.5333333333333333
User 87358 does not improve AUC. Reverting changes.
Training on augumented user 70316 39/50 current_auc = 0.5666666666666667
User 70316 AUC after training: 0.5333333333333333
User 70316 does not improve AUC. Reverting changes.
Training on augumented user 101144 40/50 current_auc = 0.5666666666666667
User 101144 AUC after training: 0.5666666666666667
User 101144 does not improve AUC. Reverting changes.
Training on augumented user 77031 41/50 current_auc = 0.5666666666666667
User 77031 AUC after training: 0.5666666666666667
User 77031 does not improve AUC. Reverting changes.
Training on augumented user 114084 42/50 current_auc = 0.5666666666666667
User 114084 AUC after training: 0.5666666666666667
User 114084 does not improve AUC. Reverting changes.
Training on augumented user 93780 43/50 current_auc = 0.5666666666666667
User 93780 AUC after training: 0.5333333333333333
User 93780 does not improve AUC. Reverting changes.
Training on augumented user 85800 44/50 current_auc = 0.5666666666666667
User 85800 AUC after training: 0.5666666666666667
User 85800 does not improve AUC. Reverting changes.
Training on augumented user 51757 45/50 current_auc = 0.5666666666666667
User 51757 AUC after training: 0.5666666666666667
User 51757 does not improve AUC. Reverting changes.
Training on augumented user 131327 46/50 current_auc = 0.5666666666666667
User 131327 AUC after training: 0.5333333333333333
User 131327 does not improve AUC. Reverting changes.
Training on augumented user 23110 47/50 current_auc = 0.5666666666666667
User 23110 AUC after training: 0.5666666666666667
User 23110 does not improve AUC. Reverting changes.
Training on augumented user 130581 48/50 current_auc = 0.5666666666666667
User 130581 AUC after training: 0.5666666666666667
User 130581 does not improve AUC. Reverting changes.
Training on augumented user 136166 49/50 current_auc = 0.5666666666666667
User 136166 AUC after training: 0.5333333333333333
User 136166 does not improve AUC. Reverting changes.
[2024-12-02 18:55:44.318433] start test user 99404 139/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:55:45.106724] start test user 99404 139/567 recall augumented users by random, augumented_users = [96653, 39645, 16867, 87862, 39300, 124433, 130827, 106768, 61751, 111275, 43358, 97335, 127320, 133970, 81408, 65077, 60793, 39166, 91748, 56663, 16448, 71776, 87371, 98581, 85394, 50912, 113383, 66143, 5468, 50293, 95124, 76292, 71948, 33656, 106186, 106228, 41411, 110141, 83275, 127529, 54273, 24012, 88952, 126359, 115086, 122891, 20335, 95827, 72693, 125182]
[2024-12-02 18:55:45.128510] user = 99404 Cloud 139/567
[2024-12-02 18:55:45.144642] user = 99404 Local 139/567
[2024-12-02 18:55:45.185857] user = 99404 Local+ 139/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:55:48.629361] user = 99404 MPDA- 139/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.3333333333333333
Training on augumented user 96653 0/50 current_auc = 0.3333333333333333
User 96653 AUC after training: 0.3333333333333333
User 96653 does not improve AUC. Reverting changes.
Training on augumented user 39645 1/50 current_auc = 0.3333333333333333
User 39645 AUC after training: 0.3333333333333333
User 39645 does not improve AUC. Reverting changes.
Training on augumented user 16867 2/50 current_auc = 0.3333333333333333
User 16867 AUC after training: 0.3333333333333333
User 16867 does not improve AUC. Reverting changes.
Training on augumented user 87862 3/50 current_auc = 0.3333333333333333
User 87862 AUC after training: 0.3333333333333333
User 87862 does not improve AUC. Reverting changes.
Training on augumented user 39300 4/50 current_auc = 0.3333333333333333
User 39300 AUC after training: 0.3333333333333333
User 39300 does not improve AUC. Reverting changes.
Training on augumented user 124433 5/50 current_auc = 0.3333333333333333
User 124433 AUC after training: 0.3333333333333333
User 124433 does not improve AUC. Reverting changes.
Training on augumented user 130827 6/50 current_auc = 0.3333333333333333
User 130827 AUC after training: 0.3333333333333333
User 130827 does not improve AUC. Reverting changes.
Training on augumented user 106768 7/50 current_auc = 0.3333333333333333
User 106768 AUC after training: 0.3333333333333333
User 106768 does not improve AUC. Reverting changes.
Training on augumented user 61751 8/50 current_auc = 0.3333333333333333
User 61751 AUC after training: 0.3333333333333333
User 61751 does not improve AUC. Reverting changes.
Training on augumented user 111275 9/50 current_auc = 0.3333333333333333
User 111275 AUC after training: 0.3333333333333333
User 111275 does not improve AUC. Reverting changes.
Training on augumented user 43358 10/50 current_auc = 0.3333333333333333
User 43358 AUC after training: 0.3333333333333333
User 43358 does not improve AUC. Reverting changes.
Training on augumented user 97335 11/50 current_auc = 0.3333333333333333
User 97335 AUC after training: 0.3333333333333333
User 97335 does not improve AUC. Reverting changes.
Training on augumented user 127320 12/50 current_auc = 0.3333333333333333
User 127320 AUC after training: 0.3333333333333333
User 127320 does not improve AUC. Reverting changes.
Training on augumented user 133970 13/50 current_auc = 0.3333333333333333
User 133970 AUC after training: 0.3333333333333333
User 133970 does not improve AUC. Reverting changes.
Training on augumented user 81408 14/50 current_auc = 0.3333333333333333
User 81408 AUC after training: 0.3333333333333333
User 81408 does not improve AUC. Reverting changes.
Training on augumented user 65077 15/50 current_auc = 0.3333333333333333
User 65077 AUC after training: 0.3333333333333333
User 65077 does not improve AUC. Reverting changes.
Training on augumented user 60793 16/50 current_auc = 0.3333333333333333
User 60793 AUC after training: 0.3333333333333333
User 60793 does not improve AUC. Reverting changes.
Training on augumented user 39166 17/50 current_auc = 0.3333333333333333
User 39166 AUC after training: 0.3333333333333333
User 39166 does not improve AUC. Reverting changes.
Training on augumented user 91748 18/50 current_auc = 0.3333333333333333
User 91748 AUC after training: 0.3333333333333333
User 91748 does not improve AUC. Reverting changes.
Training on augumented user 56663 19/50 current_auc = 0.3333333333333333
User 56663 AUC after training: 0.3333333333333333
User 56663 does not improve AUC. Reverting changes.
Training on augumented user 16448 20/50 current_auc = 0.3333333333333333
User 16448 AUC after training: 0.3333333333333333
User 16448 does not improve AUC. Reverting changes.
Training on augumented user 71776 21/50 current_auc = 0.3333333333333333
User 71776 AUC after training: 0.3333333333333333
User 71776 does not improve AUC. Reverting changes.
Training on augumented user 87371 22/50 current_auc = 0.3333333333333333
User 87371 AUC after training: 0.3333333333333333
User 87371 does not improve AUC. Reverting changes.
Training on augumented user 98581 23/50 current_auc = 0.3333333333333333
User 98581 AUC after training: 0.3333333333333333
User 98581 does not improve AUC. Reverting changes.
Training on augumented user 85394 24/50 current_auc = 0.3333333333333333
User 85394 AUC after training: 0.3333333333333333
User 85394 does not improve AUC. Reverting changes.
Training on augumented user 50912 25/50 current_auc = 0.3333333333333333
User 50912 AUC after training: 0.3333333333333333
User 50912 does not improve AUC. Reverting changes.
Training on augumented user 113383 26/50 current_auc = 0.3333333333333333
User 113383 AUC after training: 0.3333333333333333
User 113383 does not improve AUC. Reverting changes.
Training on augumented user 66143 27/50 current_auc = 0.3333333333333333
User 66143 AUC after training: 0.3333333333333333
User 66143 does not improve AUC. Reverting changes.
Training on augumented user 5468 28/50 current_auc = 0.3333333333333333
User 5468 AUC after training: 0.3333333333333333
User 5468 does not improve AUC. Reverting changes.
Training on augumented user 50293 29/50 current_auc = 0.3333333333333333
User 50293 AUC after training: 0.3333333333333333
User 50293 does not improve AUC. Reverting changes.
Training on augumented user 95124 30/50 current_auc = 0.3333333333333333
User 95124 AUC after training: 0.3333333333333333
User 95124 does not improve AUC. Reverting changes.
Training on augumented user 76292 31/50 current_auc = 0.3333333333333333
User 76292 AUC after training: 0.3333333333333333
User 76292 does not improve AUC. Reverting changes.
Training on augumented user 71948 32/50 current_auc = 0.3333333333333333
User 71948 AUC after training: 0.3333333333333333
User 71948 does not improve AUC. Reverting changes.
Training on augumented user 33656 33/50 current_auc = 0.3333333333333333
User 33656 AUC after training: 0.3333333333333333
User 33656 does not improve AUC. Reverting changes.
Training on augumented user 106186 34/50 current_auc = 0.3333333333333333
User 106186 AUC after training: 0.3333333333333333
User 106186 does not improve AUC. Reverting changes.
Training on augumented user 106228 35/50 current_auc = 0.3333333333333333
User 106228 AUC after training: 0.3333333333333333
User 106228 does not improve AUC. Reverting changes.
Training on augumented user 41411 36/50 current_auc = 0.3333333333333333
User 41411 AUC after training: 0.3333333333333333
User 41411 does not improve AUC. Reverting changes.
Training on augumented user 110141 37/50 current_auc = 0.3333333333333333
User 110141 AUC after training: 0.3333333333333333
User 110141 does not improve AUC. Reverting changes.
Training on augumented user 83275 38/50 current_auc = 0.3333333333333333
User 83275 AUC after training: 0.3333333333333333
User 83275 does not improve AUC. Reverting changes.
Training on augumented user 127529 39/50 current_auc = 0.3333333333333333
User 127529 AUC after training: 0.3333333333333333
User 127529 does not improve AUC. Reverting changes.
Training on augumented user 54273 40/50 current_auc = 0.3333333333333333
User 54273 AUC after training: 0.3333333333333333
User 54273 does not improve AUC. Reverting changes.
Training on augumented user 24012 41/50 current_auc = 0.3333333333333333
User 24012 AUC after training: 0.3333333333333333
User 24012 does not improve AUC. Reverting changes.
Training on augumented user 88952 42/50 current_auc = 0.3333333333333333
User 88952 AUC after training: 0.3333333333333333
User 88952 does not improve AUC. Reverting changes.
Training on augumented user 126359 43/50 current_auc = 0.3333333333333333
User 126359 AUC after training: 0.3333333333333333
User 126359 does not improve AUC. Reverting changes.
Training on augumented user 115086 44/50 current_auc = 0.3333333333333333
User 115086 AUC after training: 0.3333333333333333
User 115086 does not improve AUC. Reverting changes.
Training on augumented user 122891 45/50 current_auc = 0.3333333333333333
User 122891 AUC after training: 0.3333333333333333
User 122891 does not improve AUC. Reverting changes.
Training on augumented user 20335 46/50 current_auc = 0.3333333333333333
User 20335 AUC after training: 0.3333333333333333
User 20335 does not improve AUC. Reverting changes.
Training on augumented user 95827 47/50 current_auc = 0.3333333333333333
User 95827 AUC after training: 0.3333333333333333
User 95827 does not improve AUC. Reverting changes.
Training on augumented user 72693 48/50 current_auc = 0.3333333333333333
User 72693 AUC after training: 0.3333333333333333
User 72693 does not improve AUC. Reverting changes.
Training on augumented user 125182 49/50 current_auc = 0.3333333333333333
User 125182 AUC after training: 0.3333333333333333
User 125182 does not improve AUC. Reverting changes.
[2024-12-02 18:56:20.568587] start test user 99429 140/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:56:21.236529] start test user 99429 140/567 recall augumented users by random, augumented_users = [111277, 63747, 50297, 24785, 109195, 108391, 1777, 683, 31707, 27619, 32643, 50117, 1928, 114820, 48646, 72489, 114574, 107452, 50414, 92552, 10985, 74190, 49117, 114925, 93933, 126803, 117315, 88556, 93960, 112353, 115950, 128819, 33832, 27480, 117809, 23367, 75096, 62745, 107962, 83011, 33005, 65338, 132784, 83922, 124671, 24064, 53685, 135921, 125017, 137410]
[2024-12-02 18:56:21.252349] user = 99429 Cloud 140/567
[2024-12-02 18:56:21.262554] user = 99429 Local 140/567
[2024-12-02 18:56:21.353412] user = 99429 Local+ 140/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:56:24.576218] user = 99429 MPDA- 140/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 111277 0/50 current_auc = 0.5
User 111277 AUC after training: 0.5
User 111277 does not improve AUC. Reverting changes.
Training on augumented user 63747 1/50 current_auc = 0.5
User 63747 AUC after training: 0.5
User 63747 does not improve AUC. Reverting changes.
Training on augumented user 50297 2/50 current_auc = 0.5
User 50297 AUC after training: 0.5
User 50297 does not improve AUC. Reverting changes.
Training on augumented user 24785 3/50 current_auc = 0.5
User 24785 AUC after training: 0.5
User 24785 does not improve AUC. Reverting changes.
Training on augumented user 109195 4/50 current_auc = 0.5
User 109195 AUC after training: 0.5
User 109195 does not improve AUC. Reverting changes.
Training on augumented user 108391 5/50 current_auc = 0.5
User 108391 AUC after training: 0.5
User 108391 does not improve AUC. Reverting changes.
Training on augumented user 1777 6/50 current_auc = 0.5
User 1777 AUC after training: 0.5
User 1777 does not improve AUC. Reverting changes.
Training on augumented user 683 7/50 current_auc = 0.5
User 683 AUC after training: 0.5
User 683 does not improve AUC. Reverting changes.
Training on augumented user 31707 8/50 current_auc = 0.5
User 31707 AUC after training: 0.5
User 31707 does not improve AUC. Reverting changes.
Training on augumented user 27619 9/50 current_auc = 0.5
User 27619 AUC after training: 0.5
User 27619 does not improve AUC. Reverting changes.
Training on augumented user 32643 10/50 current_auc = 0.5
User 32643 AUC after training: 0.5
User 32643 does not improve AUC. Reverting changes.
Training on augumented user 50117 11/50 current_auc = 0.5
User 50117 AUC after training: 0.5
User 50117 does not improve AUC. Reverting changes.
Training on augumented user 1928 12/50 current_auc = 0.5
User 1928 AUC after training: 0.5
User 1928 does not improve AUC. Reverting changes.
Training on augumented user 114820 13/50 current_auc = 0.5
User 114820 AUC after training: 0.5
User 114820 does not improve AUC. Reverting changes.
Training on augumented user 48646 14/50 current_auc = 0.5
User 48646 AUC after training: 0.5
User 48646 does not improve AUC. Reverting changes.
Training on augumented user 72489 15/50 current_auc = 0.5
User 72489 AUC after training: 0.5
User 72489 does not improve AUC. Reverting changes.
Training on augumented user 114574 16/50 current_auc = 0.5
User 114574 AUC after training: 0.5
User 114574 does not improve AUC. Reverting changes.
Training on augumented user 107452 17/50 current_auc = 0.5
User 107452 AUC after training: 0.5
User 107452 does not improve AUC. Reverting changes.
Training on augumented user 50414 18/50 current_auc = 0.5
User 50414 AUC after training: 0.5333333333333333
User 50414 improves AUC. Keeping the model.
Training on augumented user 92552 19/50 current_auc = 0.5333333333333333
User 92552 AUC after training: 0.5
User 92552 does not improve AUC. Reverting changes.
Training on augumented user 10985 20/50 current_auc = 0.5333333333333333
User 10985 AUC after training: 0.5
User 10985 does not improve AUC. Reverting changes.
Training on augumented user 74190 21/50 current_auc = 0.5333333333333333
User 74190 AUC after training: 0.5
User 74190 does not improve AUC. Reverting changes.
Training on augumented user 49117 22/50 current_auc = 0.5333333333333333
User 49117 AUC after training: 0.5
User 49117 does not improve AUC. Reverting changes.
Training on augumented user 114925 23/50 current_auc = 0.5333333333333333
User 114925 AUC after training: 0.5
User 114925 does not improve AUC. Reverting changes.
Training on augumented user 93933 24/50 current_auc = 0.5333333333333333
User 93933 AUC after training: 0.5333333333333333
User 93933 does not improve AUC. Reverting changes.
Training on augumented user 126803 25/50 current_auc = 0.5333333333333333
User 126803 AUC after training: 0.5
User 126803 does not improve AUC. Reverting changes.
Training on augumented user 117315 26/50 current_auc = 0.5333333333333333
User 117315 AUC after training: 0.5
User 117315 does not improve AUC. Reverting changes.
Training on augumented user 88556 27/50 current_auc = 0.5333333333333333
User 88556 AUC after training: 0.5
User 88556 does not improve AUC. Reverting changes.
Training on augumented user 93960 28/50 current_auc = 0.5333333333333333
User 93960 AUC after training: 0.5
User 93960 does not improve AUC. Reverting changes.
Training on augumented user 112353 29/50 current_auc = 0.5333333333333333
User 112353 AUC after training: 0.5333333333333333
User 112353 does not improve AUC. Reverting changes.
Training on augumented user 115950 30/50 current_auc = 0.5333333333333333
User 115950 AUC after training: 0.5333333333333333
User 115950 does not improve AUC. Reverting changes.
Training on augumented user 128819 31/50 current_auc = 0.5333333333333333
User 128819 AUC after training: 0.5333333333333333
User 128819 does not improve AUC. Reverting changes.
Training on augumented user 33832 32/50 current_auc = 0.5333333333333333
User 33832 AUC after training: 0.5333333333333333
User 33832 does not improve AUC. Reverting changes.
Training on augumented user 27480 33/50 current_auc = 0.5333333333333333
User 27480 AUC after training: 0.5
User 27480 does not improve AUC. Reverting changes.
Training on augumented user 117809 34/50 current_auc = 0.5333333333333333
User 117809 AUC after training: 0.5
User 117809 does not improve AUC. Reverting changes.
Training on augumented user 23367 35/50 current_auc = 0.5333333333333333
User 23367 AUC after training: 0.5
User 23367 does not improve AUC. Reverting changes.
Training on augumented user 75096 36/50 current_auc = 0.5333333333333333
User 75096 AUC after training: 0.5
User 75096 does not improve AUC. Reverting changes.
Training on augumented user 62745 37/50 current_auc = 0.5333333333333333
User 62745 AUC after training: 0.5
User 62745 does not improve AUC. Reverting changes.
Training on augumented user 107962 38/50 current_auc = 0.5333333333333333
User 107962 AUC after training: 0.5
User 107962 does not improve AUC. Reverting changes.
Training on augumented user 83011 39/50 current_auc = 0.5333333333333333
User 83011 AUC after training: 0.5
User 83011 does not improve AUC. Reverting changes.
Training on augumented user 33005 40/50 current_auc = 0.5333333333333333
User 33005 AUC after training: 0.5
User 33005 does not improve AUC. Reverting changes.
Training on augumented user 65338 41/50 current_auc = 0.5333333333333333
User 65338 AUC after training: 0.5
User 65338 does not improve AUC. Reverting changes.
Training on augumented user 132784 42/50 current_auc = 0.5333333333333333
User 132784 AUC after training: 0.5
User 132784 does not improve AUC. Reverting changes.
Training on augumented user 83922 43/50 current_auc = 0.5333333333333333
User 83922 AUC after training: 0.5333333333333333
User 83922 does not improve AUC. Reverting changes.
Training on augumented user 124671 44/50 current_auc = 0.5333333333333333
User 124671 AUC after training: 0.5
User 124671 does not improve AUC. Reverting changes.
Training on augumented user 24064 45/50 current_auc = 0.5333333333333333
User 24064 AUC after training: 0.5
User 24064 does not improve AUC. Reverting changes.
Training on augumented user 53685 46/50 current_auc = 0.5333333333333333
User 53685 AUC after training: 0.5333333333333333
User 53685 does not improve AUC. Reverting changes.
Training on augumented user 135921 47/50 current_auc = 0.5333333333333333
User 135921 AUC after training: 0.5
User 135921 does not improve AUC. Reverting changes.
Training on augumented user 125017 48/50 current_auc = 0.5333333333333333
User 125017 AUC after training: 0.5333333333333333
User 125017 does not improve AUC. Reverting changes.
Training on augumented user 137410 49/50 current_auc = 0.5333333333333333
User 137410 AUC after training: 0.5
User 137410 does not improve AUC. Reverting changes.
[2024-12-02 18:56:52.173454] start test user 99448 141/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:56:53.099572] start test user 99448 141/567 recall augumented users by random, augumented_users = [41684, 37801, 121380, 59612, 7536, 115425, 81578, 75654, 26376, 55058, 101575, 115122, 22183, 63114, 96299, 84587, 81516, 23956, 49937, 122191, 132948, 101935, 34506, 124333, 40123, 113112, 25758, 134612, 103573, 118128, 63861, 120333, 133659, 123178, 135082, 125730, 84095, 47522, 36661, 127078, 43266, 73300, 79760, 59403, 6066, 15986, 106079, 129629, 9434, 13576]
[2024-12-02 18:56:53.225464] user = 99448 Cloud 141/567
[2024-12-02 18:56:53.289492] user = 99448 Local 141/567
[2024-12-02 18:56:53.578643] user = 99448 Local+ 141/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:56:56.236918] user = 99448 MPDA- 141/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.3695652173913043
Training on augumented user 41684 0/50 current_auc = 0.3695652173913043
User 41684 AUC after training: 0.3695652173913043
User 41684 does not improve AUC. Reverting changes.
Training on augumented user 37801 1/50 current_auc = 0.3695652173913043
User 37801 AUC after training: 0.3695652173913043
User 37801 does not improve AUC. Reverting changes.
Training on augumented user 121380 2/50 current_auc = 0.3695652173913043
User 121380 AUC after training: 0.3695652173913043
User 121380 does not improve AUC. Reverting changes.
Training on augumented user 59612 3/50 current_auc = 0.3695652173913043
User 59612 AUC after training: 0.34782608695652173
User 59612 does not improve AUC. Reverting changes.
Training on augumented user 7536 4/50 current_auc = 0.3695652173913043
User 7536 AUC after training: 0.3695652173913043
User 7536 does not improve AUC. Reverting changes.
Training on augumented user 115425 5/50 current_auc = 0.3695652173913043
User 115425 AUC after training: 0.3695652173913043
User 115425 does not improve AUC. Reverting changes.
Training on augumented user 81578 6/50 current_auc = 0.3695652173913043
User 81578 AUC after training: 0.3695652173913043
User 81578 does not improve AUC. Reverting changes.
Training on augumented user 75654 7/50 current_auc = 0.3695652173913043
User 75654 AUC after training: 0.34782608695652173
User 75654 does not improve AUC. Reverting changes.
Training on augumented user 26376 8/50 current_auc = 0.3695652173913043
User 26376 AUC after training: 0.3695652173913043
User 26376 does not improve AUC. Reverting changes.
Training on augumented user 55058 9/50 current_auc = 0.3695652173913043
User 55058 AUC after training: 0.3695652173913043
User 55058 does not improve AUC. Reverting changes.
Training on augumented user 101575 10/50 current_auc = 0.3695652173913043
User 101575 AUC after training: 0.3695652173913043
User 101575 does not improve AUC. Reverting changes.
Training on augumented user 115122 11/50 current_auc = 0.3695652173913043
User 115122 AUC after training: 0.3695652173913043
User 115122 does not improve AUC. Reverting changes.
Training on augumented user 22183 12/50 current_auc = 0.3695652173913043
User 22183 AUC after training: 0.3695652173913043
User 22183 does not improve AUC. Reverting changes.
Training on augumented user 63114 13/50 current_auc = 0.3695652173913043
User 63114 AUC after training: 0.3695652173913043
User 63114 does not improve AUC. Reverting changes.
Training on augumented user 96299 14/50 current_auc = 0.3695652173913043
User 96299 AUC after training: 0.3695652173913043
User 96299 does not improve AUC. Reverting changes.
Training on augumented user 84587 15/50 current_auc = 0.3695652173913043
User 84587 AUC after training: 0.3695652173913043
User 84587 does not improve AUC. Reverting changes.
Training on augumented user 81516 16/50 current_auc = 0.3695652173913043
User 81516 AUC after training: 0.3695652173913043
User 81516 does not improve AUC. Reverting changes.
Training on augumented user 23956 17/50 current_auc = 0.3695652173913043
User 23956 AUC after training: 0.3695652173913043
User 23956 does not improve AUC. Reverting changes.
Training on augumented user 49937 18/50 current_auc = 0.3695652173913043
User 49937 AUC after training: 0.3695652173913043
User 49937 does not improve AUC. Reverting changes.
Training on augumented user 122191 19/50 current_auc = 0.3695652173913043
User 122191 AUC after training: 0.3695652173913043
User 122191 does not improve AUC. Reverting changes.
Training on augumented user 132948 20/50 current_auc = 0.3695652173913043
User 132948 AUC after training: 0.3695652173913043
User 132948 does not improve AUC. Reverting changes.
Training on augumented user 101935 21/50 current_auc = 0.3695652173913043
User 101935 AUC after training: 0.3695652173913043
User 101935 does not improve AUC. Reverting changes.
Training on augumented user 34506 22/50 current_auc = 0.3695652173913043
User 34506 AUC after training: 0.3695652173913043
User 34506 does not improve AUC. Reverting changes.
Training on augumented user 124333 23/50 current_auc = 0.3695652173913043
User 124333 AUC after training: 0.3695652173913043
User 124333 does not improve AUC. Reverting changes.
Training on augumented user 40123 24/50 current_auc = 0.3695652173913043
User 40123 AUC after training: 0.32608695652173914
User 40123 does not improve AUC. Reverting changes.
Training on augumented user 113112 25/50 current_auc = 0.3695652173913043
User 113112 AUC after training: 0.3695652173913043
User 113112 does not improve AUC. Reverting changes.
Training on augumented user 25758 26/50 current_auc = 0.3695652173913043
User 25758 AUC after training: 0.3695652173913043
User 25758 does not improve AUC. Reverting changes.
Training on augumented user 134612 27/50 current_auc = 0.3695652173913043
User 134612 AUC after training: 0.3695652173913043
User 134612 does not improve AUC. Reverting changes.
Training on augumented user 103573 28/50 current_auc = 0.3695652173913043
User 103573 AUC after training: 0.3695652173913043
User 103573 does not improve AUC. Reverting changes.
Training on augumented user 118128 29/50 current_auc = 0.3695652173913043
User 118128 AUC after training: 0.3695652173913043
User 118128 does not improve AUC. Reverting changes.
Training on augumented user 63861 30/50 current_auc = 0.3695652173913043
User 63861 AUC after training: 0.3695652173913043
User 63861 does not improve AUC. Reverting changes.
Training on augumented user 120333 31/50 current_auc = 0.3695652173913043
User 120333 AUC after training: 0.3695652173913043
User 120333 does not improve AUC. Reverting changes.
Training on augumented user 133659 32/50 current_auc = 0.3695652173913043
User 133659 AUC after training: 0.3695652173913043
User 133659 does not improve AUC. Reverting changes.
Training on augumented user 123178 33/50 current_auc = 0.3695652173913043
User 123178 AUC after training: 0.3695652173913043
User 123178 does not improve AUC. Reverting changes.
Training on augumented user 135082 34/50 current_auc = 0.3695652173913043
User 135082 AUC after training: 0.3695652173913043
User 135082 does not improve AUC. Reverting changes.
Training on augumented user 125730 35/50 current_auc = 0.3695652173913043
User 125730 AUC after training: 0.34782608695652173
User 125730 does not improve AUC. Reverting changes.
Training on augumented user 84095 36/50 current_auc = 0.3695652173913043
User 84095 AUC after training: 0.34782608695652173
User 84095 does not improve AUC. Reverting changes.
Training on augumented user 47522 37/50 current_auc = 0.3695652173913043
User 47522 AUC after training: 0.3695652173913043
User 47522 does not improve AUC. Reverting changes.
Training on augumented user 36661 38/50 current_auc = 0.3695652173913043
User 36661 AUC after training: 0.3695652173913043
User 36661 does not improve AUC. Reverting changes.
Training on augumented user 127078 39/50 current_auc = 0.3695652173913043
User 127078 AUC after training: 0.34782608695652173
User 127078 does not improve AUC. Reverting changes.
Training on augumented user 43266 40/50 current_auc = 0.3695652173913043
User 43266 AUC after training: 0.3695652173913043
User 43266 does not improve AUC. Reverting changes.
Training on augumented user 73300 41/50 current_auc = 0.3695652173913043
User 73300 AUC after training: 0.3695652173913043
User 73300 does not improve AUC. Reverting changes.
Training on augumented user 79760 42/50 current_auc = 0.3695652173913043
User 79760 AUC after training: 0.3695652173913043
User 79760 does not improve AUC. Reverting changes.
Training on augumented user 59403 43/50 current_auc = 0.3695652173913043
User 59403 AUC after training: 0.3695652173913043
User 59403 does not improve AUC. Reverting changes.
Training on augumented user 6066 44/50 current_auc = 0.3695652173913043
User 6066 AUC after training: 0.3695652173913043
User 6066 does not improve AUC. Reverting changes.
Training on augumented user 15986 45/50 current_auc = 0.3695652173913043
User 15986 AUC after training: 0.3695652173913043
User 15986 does not improve AUC. Reverting changes.
Training on augumented user 106079 46/50 current_auc = 0.3695652173913043
User 106079 AUC after training: 0.3695652173913043
User 106079 does not improve AUC. Reverting changes.
Training on augumented user 129629 47/50 current_auc = 0.3695652173913043
User 129629 AUC after training: 0.3695652173913044
User 129629 improves AUC. Keeping the model.
Training on augumented user 9434 48/50 current_auc = 0.3695652173913044
User 9434 AUC after training: 0.34782608695652173
User 9434 does not improve AUC. Reverting changes.
Training on augumented user 13576 49/50 current_auc = 0.3695652173913044
User 13576 AUC after training: 0.34782608695652173
User 13576 does not improve AUC. Reverting changes.
[2024-12-02 18:57:26.102768] start test user 99451 142/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:57:26.935762] start test user 99451 142/567 recall augumented users by random, augumented_users = [100596, 82438, 122040, 7750, 44099, 135384, 83611, 117257, 81874, 14508, 38521, 97558, 115614, 77510, 105164, 12762, 49857, 71905, 71951, 118985, 37944, 114281, 19193, 77768, 74001, 50614, 136840, 120718, 18265, 103478, 17345, 12272, 22021, 53779, 114462, 66516, 25526, 124896, 111937, 135618, 23233, 96064, 60965, 79651, 20563, 88102, 50086, 97346, 92114, 94747]
[2024-12-02 18:57:26.973044] user = 99451 Cloud 142/567
[2024-12-02 18:57:27.034562] user = 99451 Local 142/567
[2024-12-02 18:57:27.110818] user = 99451 Local+ 142/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:57:28.989705] user = 99451 MPDA- 142/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7261275904104023
Training on augumented user 100596 0/50 current_auc = 0.7261275904104023
User 100596 AUC after training: 0.7265339292970338
User 100596 improves AUC. Keeping the model.
Training on augumented user 82438 1/50 current_auc = 0.7265339292970338
User 82438 AUC after training: 0.7269402681836652
User 82438 improves AUC. Keeping the model.
Training on augumented user 122040 2/50 current_auc = 0.7269402681836652
User 122040 AUC after training: 0.7269402681836652
User 122040 does not improve AUC. Reverting changes.
Training on augumented user 7750 3/50 current_auc = 0.7269402681836652
User 7750 AUC after training: 0.7265339292970336
User 7750 does not improve AUC. Reverting changes.
Training on augumented user 44099 4/50 current_auc = 0.7269402681836652
User 44099 AUC after training: 0.7265339292970338
User 44099 does not improve AUC. Reverting changes.
Training on augumented user 135384 5/50 current_auc = 0.7269402681836652
User 135384 AUC after training: 0.7277529459569282
User 135384 improves AUC. Keeping the model.
Training on augumented user 83611 6/50 current_auc = 0.7277529459569282
User 83611 AUC after training: 0.7269402681836651
User 83611 does not improve AUC. Reverting changes.
Training on augumented user 117257 7/50 current_auc = 0.7277529459569282
User 117257 AUC after training: 0.7305973181633483
User 117257 improves AUC. Keeping the model.
Training on augumented user 81874 8/50 current_auc = 0.7305973181633483
User 81874 AUC after training: 0.7289719626168224
User 81874 does not improve AUC. Reverting changes.
Training on augumented user 14508 9/50 current_auc = 0.7305973181633483
User 14508 AUC after training: 0.7301909792767168
User 14508 does not improve AUC. Reverting changes.
Training on augumented user 38521 10/50 current_auc = 0.7305973181633483
User 38521 AUC after training: 0.7305973181633483
User 38521 does not improve AUC. Reverting changes.
Training on augumented user 97558 11/50 current_auc = 0.7305973181633483
User 97558 AUC after training: 0.7305973181633482
User 97558 does not improve AUC. Reverting changes.
Training on augumented user 115614 12/50 current_auc = 0.7305973181633483
User 115614 AUC after training: 0.7269402681836653
User 115614 does not improve AUC. Reverting changes.
Training on augumented user 77510 13/50 current_auc = 0.7305973181633483
User 77510 AUC after training: 0.729378301503454
User 77510 does not improve AUC. Reverting changes.
Training on augumented user 105164 14/50 current_auc = 0.7305973181633483
User 105164 AUC after training: 0.7301909792767167
User 105164 does not improve AUC. Reverting changes.
Training on augumented user 12762 15/50 current_auc = 0.7305973181633483
User 12762 AUC after training: 0.7310036570499797
User 12762 improves AUC. Keeping the model.
Training on augumented user 49857 16/50 current_auc = 0.7310036570499797
User 49857 AUC after training: 0.7318163348232427
User 49857 improves AUC. Keeping the model.
Training on augumented user 71905 17/50 current_auc = 0.7318163348232427
User 71905 AUC after training: 0.7318163348232426
User 71905 does not improve AUC. Reverting changes.
Training on augumented user 71951 18/50 current_auc = 0.7318163348232427
User 71951 AUC after training: 0.7322226737098742
User 71951 improves AUC. Keeping the model.
Training on augumented user 118985 19/50 current_auc = 0.7322226737098742
User 118985 AUC after training: 0.7326290125965055
User 118985 improves AUC. Keeping the model.
Training on augumented user 37944 20/50 current_auc = 0.7326290125965055
User 37944 AUC after training: 0.7305973181633483
User 37944 does not improve AUC. Reverting changes.
Training on augumented user 114281 21/50 current_auc = 0.7326290125965055
User 114281 AUC after training: 0.732222673709874
User 114281 does not improve AUC. Reverting changes.
Training on augumented user 19193 22/50 current_auc = 0.7326290125965055
User 19193 AUC after training: 0.7310036570499797
User 19193 does not improve AUC. Reverting changes.
Training on augumented user 77768 23/50 current_auc = 0.7326290125965055
User 77768 AUC after training: 0.7314099959366112
User 77768 does not improve AUC. Reverting changes.
Training on augumented user 74001 24/50 current_auc = 0.7326290125965055
User 74001 AUC after training: 0.732222673709874
User 74001 does not improve AUC. Reverting changes.
Training on augumented user 50614 25/50 current_auc = 0.7326290125965055
User 50614 AUC after training: 0.7322226737098742
User 50614 does not improve AUC. Reverting changes.
Training on augumented user 136840 26/50 current_auc = 0.7326290125965055
User 136840 AUC after training: 0.7305973181633482
User 136840 does not improve AUC. Reverting changes.
Training on augumented user 120718 27/50 current_auc = 0.7326290125965055
User 120718 AUC after training: 0.7269402681836652
User 120718 does not improve AUC. Reverting changes.
Training on augumented user 18265 28/50 current_auc = 0.7326290125965055
User 18265 AUC after training: 0.7310036570499797
User 18265 does not improve AUC. Reverting changes.
Training on augumented user 103478 29/50 current_auc = 0.7326290125965055
User 103478 AUC after training: 0.732222673709874
User 103478 does not improve AUC. Reverting changes.
Training on augumented user 17345 30/50 current_auc = 0.7326290125965055
User 17345 AUC after training: 0.729378301503454
User 17345 does not improve AUC. Reverting changes.
Training on augumented user 12272 31/50 current_auc = 0.7326290125965055
User 12272 AUC after training: 0.7273466070702965
User 12272 does not improve AUC. Reverting changes.
Training on augumented user 22021 32/50 current_auc = 0.7326290125965055
User 22021 AUC after training: 0.7318163348232426
User 22021 does not improve AUC. Reverting changes.
Training on augumented user 53779 33/50 current_auc = 0.7326290125965055
User 53779 AUC after training: 0.7318163348232425
User 53779 does not improve AUC. Reverting changes.
Training on augumented user 114462 34/50 current_auc = 0.7326290125965055
User 114462 AUC after training: 0.7297846403900853
User 114462 does not improve AUC. Reverting changes.
Training on augumented user 66516 35/50 current_auc = 0.7326290125965055
User 66516 AUC after training: 0.7318163348232426
User 66516 does not improve AUC. Reverting changes.
Training on augumented user 25526 36/50 current_auc = 0.7326290125965055
User 25526 AUC after training: 0.7326290125965055
User 25526 does not improve AUC. Reverting changes.
Training on augumented user 124896 37/50 current_auc = 0.7326290125965055
User 124896 AUC after training: 0.7318163348232426
User 124896 does not improve AUC. Reverting changes.
Training on augumented user 111937 38/50 current_auc = 0.7326290125965055
User 111937 AUC after training: 0.7310036570499797
User 111937 does not improve AUC. Reverting changes.
Training on augumented user 135618 39/50 current_auc = 0.7326290125965055
User 135618 AUC after training: 0.7314099959366112
User 135618 does not improve AUC. Reverting changes.
Training on augumented user 23233 40/50 current_auc = 0.7326290125965055
User 23233 AUC after training: 0.732222673709874
User 23233 does not improve AUC. Reverting changes.
Training on augumented user 96064 41/50 current_auc = 0.7326290125965055
User 96064 AUC after training: 0.7301909792767168
User 96064 does not improve AUC. Reverting changes.
Training on augumented user 60965 42/50 current_auc = 0.7326290125965055
User 60965 AUC after training: 0.7285656237301911
User 60965 does not improve AUC. Reverting changes.
Training on augumented user 79651 43/50 current_auc = 0.7326290125965055
User 79651 AUC after training: 0.7322226737098742
User 79651 does not improve AUC. Reverting changes.
Training on augumented user 20563 44/50 current_auc = 0.7326290125965055
User 20563 AUC after training: 0.732222673709874
User 20563 does not improve AUC. Reverting changes.
Training on augumented user 88102 45/50 current_auc = 0.7326290125965055
User 88102 AUC after training: 0.732222673709874
User 88102 does not improve AUC. Reverting changes.
Training on augumented user 50086 46/50 current_auc = 0.7326290125965055
User 50086 AUC after training: 0.7310036570499796
User 50086 does not improve AUC. Reverting changes.
Training on augumented user 97346 47/50 current_auc = 0.7326290125965055
User 97346 AUC after training: 0.7314099959366112
User 97346 does not improve AUC. Reverting changes.
Training on augumented user 92114 48/50 current_auc = 0.7326290125965055
User 92114 AUC after training: 0.7289719626168225
User 92114 does not improve AUC. Reverting changes.
Training on augumented user 94747 49/50 current_auc = 0.7326290125965055
User 94747 AUC after training: 0.7289719626168224
User 94747 does not improve AUC. Reverting changes.
[2024-12-02 18:58:00.021719] start test user 99474 143/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:58:00.954500] start test user 99474 143/567 recall augumented users by random, augumented_users = [12626, 49946, 115039, 8728, 132278, 70879, 85228, 38040, 40484, 31516, 99111, 8134, 100428, 86072, 81243, 136532, 120809, 60525, 65907, 129809, 78241, 56089, 66858, 30229, 9643, 76972, 9692, 134455, 109165, 24057, 55209, 132524, 51410, 31473, 62080, 33922, 47416, 109897, 116722, 115670, 54592, 14106, 38769, 137797, 104263, 86, 22533, 39078, 27839, 68713]
[2024-12-02 18:58:00.972077] user = 99474 Cloud 143/567
[2024-12-02 18:58:01.018740] user = 99474 Local 143/567
[2024-12-02 18:58:01.194124] user = 99474 Local+ 143/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:58:03.914528] user = 99474 MPDA- 143/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.44015632633121643
Training on augumented user 12626 0/50 current_auc = 0.44015632633121643
User 12626 AUC after training: 0.440400586223742
User 12626 improves AUC. Keeping the model.
Training on augumented user 49946 1/50 current_auc = 0.440400586223742
User 49946 AUC after training: 0.44137762579384465
User 49946 improves AUC. Keeping the model.
Training on augumented user 115039 2/50 current_auc = 0.44137762579384465
User 115039 AUC after training: 0.44137762579384465
User 115039 does not improve AUC. Reverting changes.
Training on augumented user 8728 3/50 current_auc = 0.44137762579384465
User 8728 AUC after training: 0.4413776257938447
User 8728 improves AUC. Keeping the model.
Training on augumented user 132278 4/50 current_auc = 0.4413776257938447
User 132278 AUC after training: 0.4421104054714216
User 132278 improves AUC. Keeping the model.
Training on augumented user 70879 5/50 current_auc = 0.4421104054714216
User 70879 AUC after training: 0.44211040547142155
User 70879 does not improve AUC. Reverting changes.
Training on augumented user 85228 6/50 current_auc = 0.4421104054714216
User 85228 AUC after training: 0.4406448461162677
User 85228 does not improve AUC. Reverting changes.
Training on augumented user 38040 7/50 current_auc = 0.4421104054714216
User 38040 AUC after training: 0.44137762579384465
User 38040 does not improve AUC. Reverting changes.
Training on augumented user 40484 8/50 current_auc = 0.4421104054714216
User 40484 AUC after training: 0.4425989252564729
User 40484 improves AUC. Keeping the model.
Training on augumented user 31516 9/50 current_auc = 0.4425989252564729
User 31516 AUC after training: 0.4421104054714216
User 31516 does not improve AUC. Reverting changes.
Training on augumented user 99111 10/50 current_auc = 0.4425989252564729
User 99111 AUC after training: 0.4416218856863703
User 99111 does not improve AUC. Reverting changes.
Training on augumented user 8134 11/50 current_auc = 0.4425989252564729
User 8134 AUC after training: 0.4425989252564729
User 8134 does not improve AUC. Reverting changes.
Training on augumented user 100428 12/50 current_auc = 0.4425989252564729
User 100428 AUC after training: 0.44259892525647293
User 100428 improves AUC. Keeping the model.
Training on augumented user 86072 13/50 current_auc = 0.44259892525647293
User 86072 AUC after training: 0.4425989252564729
User 86072 does not improve AUC. Reverting changes.
Training on augumented user 81243 14/50 current_auc = 0.44259892525647293
User 81243 AUC after training: 0.4430874450415242
User 81243 improves AUC. Keeping the model.
Training on augumented user 136532 15/50 current_auc = 0.4430874450415242
User 136532 AUC after training: 0.4416218856863703
User 136532 does not improve AUC. Reverting changes.
Training on augumented user 120809 16/50 current_auc = 0.4430874450415242
User 120809 AUC after training: 0.4425989252564729
User 120809 does not improve AUC. Reverting changes.
Training on augumented user 60525 17/50 current_auc = 0.4430874450415242
User 60525 AUC after training: 0.44259892525647293
User 60525 does not improve AUC. Reverting changes.
Training on augumented user 65907 18/50 current_auc = 0.4430874450415242
User 65907 AUC after training: 0.44284318514899856
User 65907 does not improve AUC. Reverting changes.
Training on augumented user 129809 19/50 current_auc = 0.4430874450415242
User 129809 AUC after training: 0.44308744504152414
User 129809 does not improve AUC. Reverting changes.
Training on augumented user 78241 20/50 current_auc = 0.4430874450415242
User 78241 AUC after training: 0.441866145578896
User 78241 does not improve AUC. Reverting changes.
Training on augumented user 56089 21/50 current_auc = 0.4430874450415242
User 56089 AUC after training: 0.4394235466536395
User 56089 does not improve AUC. Reverting changes.
Training on augumented user 66858 22/50 current_auc = 0.4430874450415242
User 66858 AUC after training: 0.44259892525647293
User 66858 does not improve AUC. Reverting changes.
Training on augumented user 30229 23/50 current_auc = 0.4430874450415242
User 30229 AUC after training: 0.4440644846116268
User 30229 improves AUC. Keeping the model.
Training on augumented user 9643 24/50 current_auc = 0.4440644846116268
User 9643 AUC after training: 0.44284318514899856
User 9643 does not improve AUC. Reverting changes.
Training on augumented user 76972 25/50 current_auc = 0.4440644846116268
User 76972 AUC after training: 0.4433317049340498
User 76972 does not improve AUC. Reverting changes.
Training on augumented user 9692 26/50 current_auc = 0.4440644846116268
User 9692 AUC after training: 0.44284318514899856
User 9692 does not improve AUC. Reverting changes.
Training on augumented user 134455 27/50 current_auc = 0.4440644846116268
User 134455 AUC after training: 0.441866145578896
User 134455 does not improve AUC. Reverting changes.
Training on augumented user 109165 28/50 current_auc = 0.4440644846116268
User 109165 AUC after training: 0.44406448461162673
User 109165 does not improve AUC. Reverting changes.
Training on augumented user 24057 29/50 current_auc = 0.4440644846116268
User 24057 AUC after training: 0.4435759648265755
User 24057 does not improve AUC. Reverting changes.
Training on augumented user 55209 30/50 current_auc = 0.4440644846116268
User 55209 AUC after training: 0.4421104054714216
User 55209 does not improve AUC. Reverting changes.
Training on augumented user 132524 31/50 current_auc = 0.4440644846116268
User 132524 AUC after training: 0.4430874450415242
User 132524 does not improve AUC. Reverting changes.
Training on augumented user 51410 32/50 current_auc = 0.4440644846116268
User 51410 AUC after training: 0.4421104054714216
User 51410 does not improve AUC. Reverting changes.
Training on augumented user 31473 33/50 current_auc = 0.4440644846116268
User 31473 AUC after training: 0.44479726428920374
User 31473 improves AUC. Keeping the model.
Training on augumented user 62080 34/50 current_auc = 0.44479726428920374
User 62080 AUC after training: 0.44382022471910115
User 62080 does not improve AUC. Reverting changes.
Training on augumented user 33922 35/50 current_auc = 0.44479726428920374
User 33922 AUC after training: 0.44333170493404983
User 33922 does not improve AUC. Reverting changes.
Training on augumented user 47416 36/50 current_auc = 0.44479726428920374
User 47416 AUC after training: 0.4435759648265755
User 47416 does not improve AUC. Reverting changes.
Training on augumented user 109897 37/50 current_auc = 0.44479726428920374
User 109897 AUC after training: 0.4430874450415242
User 109897 does not improve AUC. Reverting changes.
Training on augumented user 116722 38/50 current_auc = 0.44479726428920374
User 116722 AUC after training: 0.441133365901319
User 116722 does not improve AUC. Reverting changes.
Training on augumented user 115670 39/50 current_auc = 0.44479726428920374
User 115670 AUC after training: 0.44528578407425506
User 115670 improves AUC. Keeping the model.
Training on augumented user 54592 40/50 current_auc = 0.44528578407425506
User 54592 AUC after training: 0.44382022471910115
User 54592 does not improve AUC. Reverting changes.
Training on augumented user 14106 41/50 current_auc = 0.44528578407425506
User 14106 AUC after training: 0.44479726428920374
User 14106 does not improve AUC. Reverting changes.
Training on augumented user 38769 42/50 current_auc = 0.44528578407425506
User 38769 AUC after training: 0.44479726428920374
User 38769 does not improve AUC. Reverting changes.
Training on augumented user 137797 43/50 current_auc = 0.44528578407425506
User 137797 AUC after training: 0.44479726428920374
User 137797 does not improve AUC. Reverting changes.
Training on augumented user 104263 44/50 current_auc = 0.44528578407425506
User 104263 AUC after training: 0.4443087445041524
User 104263 does not improve AUC. Reverting changes.
Training on augumented user 86 45/50 current_auc = 0.44528578407425506
User 86 AUC after training: 0.4450415241817293
User 86 does not improve AUC. Reverting changes.
Training on augumented user 22533 46/50 current_auc = 0.44528578407425506
User 22533 AUC after training: 0.4430874450415242
User 22533 does not improve AUC. Reverting changes.
Training on augumented user 39078 47/50 current_auc = 0.44528578407425506
User 39078 AUC after training: 0.4440644846116268
User 39078 does not improve AUC. Reverting changes.
Training on augumented user 27839 48/50 current_auc = 0.44528578407425506
User 27839 AUC after training: 0.4433317049340499
User 27839 does not improve AUC. Reverting changes.
Training on augumented user 68713 49/50 current_auc = 0.44528578407425506
User 68713 AUC after training: 0.44455300439667805
User 68713 does not improve AUC. Reverting changes.
[2024-12-02 18:58:33.349349] start test user 99499 144/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:58:34.170402] start test user 99499 144/567 recall augumented users by random, augumented_users = [29605, 113666, 50820, 19339, 34175, 120538, 120298, 40353, 110496, 130101, 65584, 105897, 10781, 35873, 15579, 93080, 26286, 133480, 7664, 13743, 37056, 132428, 96153, 106319, 71563, 26374, 39697, 126539, 49763, 101744, 12123, 2390, 126392, 61663, 50231, 12768, 90888, 76954, 18694, 16488, 100210, 119413, 1838, 27218, 104539, 110080, 51649, 65593, 119325, 45243]
[2024-12-02 18:58:34.200269] user = 99499 Cloud 144/567
[2024-12-02 18:58:34.210602] user = 99499 Local 144/567
[2024-12-02 18:58:34.443507] user = 99499 Local+ 144/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:58:37.043980] user = 99499 MPDA- 144/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5461538461538462
Training on augumented user 29605 0/50 current_auc = 0.5461538461538462
User 29605 AUC after training: 0.5487179487179488
User 29605 improves AUC. Keeping the model.
Training on augumented user 113666 1/50 current_auc = 0.5487179487179488
User 113666 AUC after training: 0.5461538461538462
User 113666 does not improve AUC. Reverting changes.
Training on augumented user 50820 2/50 current_auc = 0.5487179487179488
User 50820 AUC after training: 0.5487179487179488
User 50820 does not improve AUC. Reverting changes.
Training on augumented user 19339 3/50 current_auc = 0.5487179487179488
User 19339 AUC after training: 0.5487179487179488
User 19339 does not improve AUC. Reverting changes.
Training on augumented user 34175 4/50 current_auc = 0.5487179487179488
User 34175 AUC after training: 0.5487179487179488
User 34175 does not improve AUC. Reverting changes.
Training on augumented user 120538 5/50 current_auc = 0.5487179487179488
User 120538 AUC after training: 0.5461538461538462
User 120538 does not improve AUC. Reverting changes.
Training on augumented user 120298 6/50 current_auc = 0.5487179487179488
User 120298 AUC after training: 0.5487179487179488
User 120298 does not improve AUC. Reverting changes.
Training on augumented user 40353 7/50 current_auc = 0.5487179487179488
User 40353 AUC after training: 0.5461538461538462
User 40353 does not improve AUC. Reverting changes.
Training on augumented user 110496 8/50 current_auc = 0.5487179487179488
User 110496 AUC after training: 0.5461538461538461
User 110496 does not improve AUC. Reverting changes.
Training on augumented user 130101 9/50 current_auc = 0.5487179487179488
User 130101 AUC after training: 0.5512820512820513
User 130101 improves AUC. Keeping the model.
Training on augumented user 65584 10/50 current_auc = 0.5512820512820513
User 65584 AUC after training: 0.5461538461538462
User 65584 does not improve AUC. Reverting changes.
Training on augumented user 105897 11/50 current_auc = 0.5512820512820513
User 105897 AUC after training: 0.5487179487179488
User 105897 does not improve AUC. Reverting changes.
Training on augumented user 10781 12/50 current_auc = 0.5512820512820513
User 10781 AUC after training: 0.5384615384615384
User 10781 does not improve AUC. Reverting changes.
Training on augumented user 35873 13/50 current_auc = 0.5512820512820513
User 35873 AUC after training: 0.5512820512820513
User 35873 does not improve AUC. Reverting changes.
Training on augumented user 15579 14/50 current_auc = 0.5512820512820513
User 15579 AUC after training: 0.5487179487179488
User 15579 does not improve AUC. Reverting changes.
Training on augumented user 93080 15/50 current_auc = 0.5512820512820513
User 93080 AUC after training: 0.5538461538461539
User 93080 improves AUC. Keeping the model.
Training on augumented user 26286 16/50 current_auc = 0.5538461538461539
User 26286 AUC after training: 0.5461538461538462
User 26286 does not improve AUC. Reverting changes.
Training on augumented user 133480 17/50 current_auc = 0.5538461538461539
User 133480 AUC after training: 0.5461538461538462
User 133480 does not improve AUC. Reverting changes.
Training on augumented user 7664 18/50 current_auc = 0.5538461538461539
User 7664 AUC after training: 0.5461538461538462
User 7664 does not improve AUC. Reverting changes.
Training on augumented user 13743 19/50 current_auc = 0.5538461538461539
User 13743 AUC after training: 0.5487179487179488
User 13743 does not improve AUC. Reverting changes.
Training on augumented user 37056 20/50 current_auc = 0.5538461538461539
User 37056 AUC after training: 0.5512820512820513
User 37056 does not improve AUC. Reverting changes.
Training on augumented user 132428 21/50 current_auc = 0.5538461538461539
User 132428 AUC after training: 0.5538461538461539
User 132428 does not improve AUC. Reverting changes.
Training on augumented user 96153 22/50 current_auc = 0.5538461538461539
User 96153 AUC after training: 0.5461538461538462
User 96153 does not improve AUC. Reverting changes.
Training on augumented user 106319 23/50 current_auc = 0.5538461538461539
User 106319 AUC after training: 0.5461538461538462
User 106319 does not improve AUC. Reverting changes.
Training on augumented user 71563 24/50 current_auc = 0.5538461538461539
User 71563 AUC after training: 0.5487179487179488
User 71563 does not improve AUC. Reverting changes.
Training on augumented user 26374 25/50 current_auc = 0.5538461538461539
User 26374 AUC after training: 0.5461538461538462
User 26374 does not improve AUC. Reverting changes.
Training on augumented user 39697 26/50 current_auc = 0.5538461538461539
User 39697 AUC after training: 0.5461538461538462
User 39697 does not improve AUC. Reverting changes.
Training on augumented user 126539 27/50 current_auc = 0.5538461538461539
User 126539 AUC after training: 0.5512820512820513
User 126539 does not improve AUC. Reverting changes.
Training on augumented user 49763 28/50 current_auc = 0.5538461538461539
User 49763 AUC after training: 0.5512820512820513
User 49763 does not improve AUC. Reverting changes.
Training on augumented user 101744 29/50 current_auc = 0.5538461538461539
User 101744 AUC after training: 0.5512820512820513
User 101744 does not improve AUC. Reverting changes.
Training on augumented user 12123 30/50 current_auc = 0.5538461538461539
User 12123 AUC after training: 0.5538461538461539
User 12123 does not improve AUC. Reverting changes.
Training on augumented user 2390 31/50 current_auc = 0.5538461538461539
User 2390 AUC after training: 0.5487179487179488
User 2390 does not improve AUC. Reverting changes.
Training on augumented user 126392 32/50 current_auc = 0.5538461538461539
User 126392 AUC after training: 0.541025641025641
User 126392 does not improve AUC. Reverting changes.
Training on augumented user 61663 33/50 current_auc = 0.5538461538461539
User 61663 AUC after training: 0.5487179487179488
User 61663 does not improve AUC. Reverting changes.
Training on augumented user 50231 34/50 current_auc = 0.5538461538461539
User 50231 AUC after training: 0.5461538461538462
User 50231 does not improve AUC. Reverting changes.
Training on augumented user 12768 35/50 current_auc = 0.5538461538461539
User 12768 AUC after training: 0.5487179487179487
User 12768 does not improve AUC. Reverting changes.
Training on augumented user 90888 36/50 current_auc = 0.5538461538461539
User 90888 AUC after training: 0.5512820512820513
User 90888 does not improve AUC. Reverting changes.
Training on augumented user 76954 37/50 current_auc = 0.5538461538461539
User 76954 AUC after training: 0.5487179487179488
User 76954 does not improve AUC. Reverting changes.
Training on augumented user 18694 38/50 current_auc = 0.5538461538461539
User 18694 AUC after training: 0.5538461538461539
User 18694 does not improve AUC. Reverting changes.
Training on augumented user 16488 39/50 current_auc = 0.5538461538461539
User 16488 AUC after training: 0.5564102564102564
User 16488 improves AUC. Keeping the model.
Training on augumented user 100210 40/50 current_auc = 0.5564102564102564
User 100210 AUC after training: 0.5461538461538461
User 100210 does not improve AUC. Reverting changes.
Training on augumented user 119413 41/50 current_auc = 0.5564102564102564
User 119413 AUC after training: 0.5538461538461539
User 119413 does not improve AUC. Reverting changes.
Training on augumented user 1838 42/50 current_auc = 0.5564102564102564
User 1838 AUC after training: 0.5512820512820513
User 1838 does not improve AUC. Reverting changes.
Training on augumented user 27218 43/50 current_auc = 0.5564102564102564
User 27218 AUC after training: 0.5538461538461539
User 27218 does not improve AUC. Reverting changes.
Training on augumented user 104539 44/50 current_auc = 0.5564102564102564
User 104539 AUC after training: 0.5538461538461539
User 104539 does not improve AUC. Reverting changes.
Training on augumented user 110080 45/50 current_auc = 0.5564102564102564
User 110080 AUC after training: 0.5538461538461539
User 110080 does not improve AUC. Reverting changes.
Training on augumented user 51649 46/50 current_auc = 0.5564102564102564
User 51649 AUC after training: 0.5538461538461539
User 51649 does not improve AUC. Reverting changes.
Training on augumented user 65593 47/50 current_auc = 0.5564102564102564
User 65593 AUC after training: 0.5538461538461539
User 65593 does not improve AUC. Reverting changes.
Training on augumented user 119325 48/50 current_auc = 0.5564102564102564
User 119325 AUC after training: 0.5538461538461539
User 119325 does not improve AUC. Reverting changes.
Training on augumented user 45243 49/50 current_auc = 0.5564102564102564
User 45243 AUC after training: 0.5538461538461539
User 45243 does not improve AUC. Reverting changes.
[2024-12-02 18:59:11.055966] start test user 99504 145/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:59:11.779997] start test user 99504 145/567 recall augumented users by random, augumented_users = [108418, 101027, 126274, 70339, 20292, 115785, 40839, 118558, 111028, 95241, 4007, 136063, 104298, 48266, 6870, 48497, 116384, 129994, 95898, 28381, 73719, 75490, 64081, 102368, 131945, 44000, 28668, 64347, 73230, 41961, 37778, 72547, 79208, 93525, 116758, 3280, 114266, 123418, 60022, 16123, 2551, 53141, 76698, 137992, 138328, 121711, 119307, 45726, 125263, 5143]
[2024-12-02 18:59:11.795438] user = 99504 Cloud 145/567
[2024-12-02 18:59:11.817248] user = 99504 Local 145/567
[2024-12-02 18:59:12.015138] user = 99504 Local+ 145/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:59:15.683703] user = 99504 MPDA- 145/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.90625
Training on augumented user 108418 0/50 current_auc = 0.90625
User 108418 AUC after training: 0.90625
User 108418 does not improve AUC. Reverting changes.
Training on augumented user 101027 1/50 current_auc = 0.90625
User 101027 AUC after training: 0.90625
User 101027 does not improve AUC. Reverting changes.
Training on augumented user 126274 2/50 current_auc = 0.90625
User 126274 AUC after training: 0.90625
User 126274 does not improve AUC. Reverting changes.
Training on augumented user 70339 3/50 current_auc = 0.90625
User 70339 AUC after training: 0.90625
User 70339 does not improve AUC. Reverting changes.
Training on augumented user 20292 4/50 current_auc = 0.90625
User 20292 AUC after training: 0.90625
User 20292 does not improve AUC. Reverting changes.
Training on augumented user 115785 5/50 current_auc = 0.90625
User 115785 AUC after training: 0.90625
User 115785 does not improve AUC. Reverting changes.
Training on augumented user 40839 6/50 current_auc = 0.90625
User 40839 AUC after training: 0.90625
User 40839 does not improve AUC. Reverting changes.
Training on augumented user 118558 7/50 current_auc = 0.90625
User 118558 AUC after training: 0.90625
User 118558 does not improve AUC. Reverting changes.
Training on augumented user 111028 8/50 current_auc = 0.90625
User 111028 AUC after training: 0.90625
User 111028 does not improve AUC. Reverting changes.
Training on augumented user 95241 9/50 current_auc = 0.90625
User 95241 AUC after training: 0.90625
User 95241 does not improve AUC. Reverting changes.
Training on augumented user 4007 10/50 current_auc = 0.90625
User 4007 AUC after training: 0.90625
User 4007 does not improve AUC. Reverting changes.
Training on augumented user 136063 11/50 current_auc = 0.90625
User 136063 AUC after training: 0.90625
User 136063 does not improve AUC. Reverting changes.
Training on augumented user 104298 12/50 current_auc = 0.90625
User 104298 AUC after training: 0.90625
User 104298 does not improve AUC. Reverting changes.
Training on augumented user 48266 13/50 current_auc = 0.90625
User 48266 AUC after training: 0.90625
User 48266 does not improve AUC. Reverting changes.
Training on augumented user 6870 14/50 current_auc = 0.90625
User 6870 AUC after training: 0.90625
User 6870 does not improve AUC. Reverting changes.
Training on augumented user 48497 15/50 current_auc = 0.90625
User 48497 AUC after training: 0.90625
User 48497 does not improve AUC. Reverting changes.
Training on augumented user 116384 16/50 current_auc = 0.90625
User 116384 AUC after training: 0.90625
User 116384 does not improve AUC. Reverting changes.
Training on augumented user 129994 17/50 current_auc = 0.90625
User 129994 AUC after training: 0.90625
User 129994 does not improve AUC. Reverting changes.
Training on augumented user 95898 18/50 current_auc = 0.90625
User 95898 AUC after training: 0.90625
User 95898 does not improve AUC. Reverting changes.
Training on augumented user 28381 19/50 current_auc = 0.90625
User 28381 AUC after training: 0.90625
User 28381 does not improve AUC. Reverting changes.
Training on augumented user 73719 20/50 current_auc = 0.90625
User 73719 AUC after training: 0.90625
User 73719 does not improve AUC. Reverting changes.
Training on augumented user 75490 21/50 current_auc = 0.90625
User 75490 AUC after training: 0.90625
User 75490 does not improve AUC. Reverting changes.
Training on augumented user 64081 22/50 current_auc = 0.90625
User 64081 AUC after training: 0.90625
User 64081 does not improve AUC. Reverting changes.
Training on augumented user 102368 23/50 current_auc = 0.90625
User 102368 AUC after training: 0.90625
User 102368 does not improve AUC. Reverting changes.
Training on augumented user 131945 24/50 current_auc = 0.90625
User 131945 AUC after training: 0.90625
User 131945 does not improve AUC. Reverting changes.
Training on augumented user 44000 25/50 current_auc = 0.90625
User 44000 AUC after training: 0.90625
User 44000 does not improve AUC. Reverting changes.
Training on augumented user 28668 26/50 current_auc = 0.90625
User 28668 AUC after training: 0.90625
User 28668 does not improve AUC. Reverting changes.
Training on augumented user 64347 27/50 current_auc = 0.90625
User 64347 AUC after training: 0.90625
User 64347 does not improve AUC. Reverting changes.
Training on augumented user 73230 28/50 current_auc = 0.90625
User 73230 AUC after training: 0.90625
User 73230 does not improve AUC. Reverting changes.
Training on augumented user 41961 29/50 current_auc = 0.90625
User 41961 AUC after training: 0.90625
User 41961 does not improve AUC. Reverting changes.
Training on augumented user 37778 30/50 current_auc = 0.90625
User 37778 AUC after training: 0.90625
User 37778 does not improve AUC. Reverting changes.
Training on augumented user 72547 31/50 current_auc = 0.90625
User 72547 AUC after training: 0.90625
User 72547 does not improve AUC. Reverting changes.
Training on augumented user 79208 32/50 current_auc = 0.90625
User 79208 AUC after training: 0.90625
User 79208 does not improve AUC. Reverting changes.
Training on augumented user 93525 33/50 current_auc = 0.90625
User 93525 AUC after training: 0.90625
User 93525 does not improve AUC. Reverting changes.
Training on augumented user 116758 34/50 current_auc = 0.90625
User 116758 AUC after training: 0.90625
User 116758 does not improve AUC. Reverting changes.
Training on augumented user 3280 35/50 current_auc = 0.90625
User 3280 AUC after training: 0.90625
User 3280 does not improve AUC. Reverting changes.
Training on augumented user 114266 36/50 current_auc = 0.90625
User 114266 AUC after training: 0.90625
User 114266 does not improve AUC. Reverting changes.
Training on augumented user 123418 37/50 current_auc = 0.90625
User 123418 AUC after training: 0.90625
User 123418 does not improve AUC. Reverting changes.
Training on augumented user 60022 38/50 current_auc = 0.90625
User 60022 AUC after training: 0.90625
User 60022 does not improve AUC. Reverting changes.
Training on augumented user 16123 39/50 current_auc = 0.90625
User 16123 AUC after training: 0.90625
User 16123 does not improve AUC. Reverting changes.
Training on augumented user 2551 40/50 current_auc = 0.90625
User 2551 AUC after training: 0.90625
User 2551 does not improve AUC. Reverting changes.
Training on augumented user 53141 41/50 current_auc = 0.90625
User 53141 AUC after training: 0.90625
User 53141 does not improve AUC. Reverting changes.
Training on augumented user 76698 42/50 current_auc = 0.90625
User 76698 AUC after training: 0.90625
User 76698 does not improve AUC. Reverting changes.
Training on augumented user 137992 43/50 current_auc = 0.90625
User 137992 AUC after training: 0.90625
User 137992 does not improve AUC. Reverting changes.
Training on augumented user 138328 44/50 current_auc = 0.90625
User 138328 AUC after training: 0.90625
User 138328 does not improve AUC. Reverting changes.
Training on augumented user 121711 45/50 current_auc = 0.90625
User 121711 AUC after training: 0.90625
User 121711 does not improve AUC. Reverting changes.
Training on augumented user 119307 46/50 current_auc = 0.90625
User 119307 AUC after training: 0.90625
User 119307 does not improve AUC. Reverting changes.
Training on augumented user 45726 47/50 current_auc = 0.90625
User 45726 AUC after training: 0.90625
User 45726 does not improve AUC. Reverting changes.
Training on augumented user 125263 48/50 current_auc = 0.90625
User 125263 AUC after training: 0.90625
User 125263 does not improve AUC. Reverting changes.
Training on augumented user 5143 49/50 current_auc = 0.90625
User 5143 AUC after training: 0.90625
User 5143 does not improve AUC. Reverting changes.
[2024-12-02 18:59:46.263400] start test user 99511 146/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:59:46.720907] start test user 99511 146/567 recall augumented users by random, augumented_users = [61256, 34043, 40314, 8050, 4285, 76731, 31465, 127248, 87674, 36918, 50890, 135559, 54166, 39587, 73866, 105038, 29870, 18193, 58592, 117910, 109513, 15559, 65423, 107826, 81578, 9516, 128065, 101553, 98217, 75339, 68735, 56236, 20875, 62609, 47285, 35312, 4551, 121463, 55935, 42518, 29173, 104251, 108222, 68013, 69426, 45848, 106181, 11088, 20968, 11457]
[2024-12-02 18:59:46.736263] user = 99511 Cloud 146/567
[2024-12-02 18:59:46.746659] user = 99511 Local 146/567
[2024-12-02 18:59:46.766741] user = 99511 Local+ 146/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 18:59:49.274653] user = 99511 MPDA- 146/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7291666666666667
Training on augumented user 61256 0/50 current_auc = 0.7291666666666667
User 61256 AUC after training: 0.7291666666666667
User 61256 does not improve AUC. Reverting changes.
Training on augumented user 34043 1/50 current_auc = 0.7291666666666667
User 34043 AUC after training: 0.7291666666666667
User 34043 does not improve AUC. Reverting changes.
Training on augumented user 40314 2/50 current_auc = 0.7291666666666667
User 40314 AUC after training: 0.7291666666666667
User 40314 does not improve AUC. Reverting changes.
Training on augumented user 8050 3/50 current_auc = 0.7291666666666667
User 8050 AUC after training: 0.7291666666666667
User 8050 does not improve AUC. Reverting changes.
Training on augumented user 4285 4/50 current_auc = 0.7291666666666667
User 4285 AUC after training: 0.7291666666666667
User 4285 does not improve AUC. Reverting changes.
Training on augumented user 76731 5/50 current_auc = 0.7291666666666667
User 76731 AUC after training: 0.7291666666666667
User 76731 does not improve AUC. Reverting changes.
Training on augumented user 31465 6/50 current_auc = 0.7291666666666667
User 31465 AUC after training: 0.7083333333333334
User 31465 does not improve AUC. Reverting changes.
Training on augumented user 127248 7/50 current_auc = 0.7291666666666667
User 127248 AUC after training: 0.7291666666666667
User 127248 does not improve AUC. Reverting changes.
Training on augumented user 87674 8/50 current_auc = 0.7291666666666667
User 87674 AUC after training: 0.7291666666666667
User 87674 does not improve AUC. Reverting changes.
Training on augumented user 36918 9/50 current_auc = 0.7291666666666667
User 36918 AUC after training: 0.7291666666666667
User 36918 does not improve AUC. Reverting changes.
Training on augumented user 50890 10/50 current_auc = 0.7291666666666667
User 50890 AUC after training: 0.7291666666666667
User 50890 does not improve AUC. Reverting changes.
Training on augumented user 135559 11/50 current_auc = 0.7291666666666667
User 135559 AUC after training: 0.7291666666666667
User 135559 does not improve AUC. Reverting changes.
Training on augumented user 54166 12/50 current_auc = 0.7291666666666667
User 54166 AUC after training: 0.7291666666666667
User 54166 does not improve AUC. Reverting changes.
Training on augumented user 39587 13/50 current_auc = 0.7291666666666667
User 39587 AUC after training: 0.7291666666666667
User 39587 does not improve AUC. Reverting changes.
Training on augumented user 73866 14/50 current_auc = 0.7291666666666667
User 73866 AUC after training: 0.6875
User 73866 does not improve AUC. Reverting changes.
Training on augumented user 105038 15/50 current_auc = 0.7291666666666667
User 105038 AUC after training: 0.7291666666666667
User 105038 does not improve AUC. Reverting changes.
Training on augumented user 29870 16/50 current_auc = 0.7291666666666667
User 29870 AUC after training: 0.7291666666666667
User 29870 does not improve AUC. Reverting changes.
Training on augumented user 18193 17/50 current_auc = 0.7291666666666667
User 18193 AUC after training: 0.7083333333333334
User 18193 does not improve AUC. Reverting changes.
Training on augumented user 58592 18/50 current_auc = 0.7291666666666667
User 58592 AUC after training: 0.7291666666666667
User 58592 does not improve AUC. Reverting changes.
Training on augumented user 117910 19/50 current_auc = 0.7291666666666667
User 117910 AUC after training: 0.7291666666666667
User 117910 does not improve AUC. Reverting changes.
Training on augumented user 109513 20/50 current_auc = 0.7291666666666667
User 109513 AUC after training: 0.7291666666666667
User 109513 does not improve AUC. Reverting changes.
Training on augumented user 15559 21/50 current_auc = 0.7291666666666667
User 15559 AUC after training: 0.7291666666666667
User 15559 does not improve AUC. Reverting changes.
Training on augumented user 65423 22/50 current_auc = 0.7291666666666667
User 65423 AUC after training: 0.7083333333333334
User 65423 does not improve AUC. Reverting changes.
Training on augumented user 107826 23/50 current_auc = 0.7291666666666667
User 107826 AUC after training: 0.7291666666666667
User 107826 does not improve AUC. Reverting changes.
Training on augumented user 81578 24/50 current_auc = 0.7291666666666667
User 81578 AUC after training: 0.7083333333333334
User 81578 does not improve AUC. Reverting changes.
Training on augumented user 9516 25/50 current_auc = 0.7291666666666667
User 9516 AUC after training: 0.7291666666666667
User 9516 does not improve AUC. Reverting changes.
Training on augumented user 128065 26/50 current_auc = 0.7291666666666667
User 128065 AUC after training: 0.7083333333333334
User 128065 does not improve AUC. Reverting changes.
Training on augumented user 101553 27/50 current_auc = 0.7291666666666667
User 101553 AUC after training: 0.7291666666666667
User 101553 does not improve AUC. Reverting changes.
Training on augumented user 98217 28/50 current_auc = 0.7291666666666667
User 98217 AUC after training: 0.7291666666666667
User 98217 does not improve AUC. Reverting changes.
Training on augumented user 75339 29/50 current_auc = 0.7291666666666667
User 75339 AUC after training: 0.7291666666666667
User 75339 does not improve AUC. Reverting changes.
Training on augumented user 68735 30/50 current_auc = 0.7291666666666667
User 68735 AUC after training: 0.7291666666666667
User 68735 does not improve AUC. Reverting changes.
Training on augumented user 56236 31/50 current_auc = 0.7291666666666667
User 56236 AUC after training: 0.7291666666666667
User 56236 does not improve AUC. Reverting changes.
Training on augumented user 20875 32/50 current_auc = 0.7291666666666667
User 20875 AUC after training: 0.7083333333333334
User 20875 does not improve AUC. Reverting changes.
Training on augumented user 62609 33/50 current_auc = 0.7291666666666667
User 62609 AUC after training: 0.7291666666666667
User 62609 does not improve AUC. Reverting changes.
Training on augumented user 47285 34/50 current_auc = 0.7291666666666667
User 47285 AUC after training: 0.7291666666666667
User 47285 does not improve AUC. Reverting changes.
Training on augumented user 35312 35/50 current_auc = 0.7291666666666667
User 35312 AUC after training: 0.7291666666666667
User 35312 does not improve AUC. Reverting changes.
Training on augumented user 4551 36/50 current_auc = 0.7291666666666667
User 4551 AUC after training: 0.7291666666666667
User 4551 does not improve AUC. Reverting changes.
Training on augumented user 121463 37/50 current_auc = 0.7291666666666667
User 121463 AUC after training: 0.7083333333333334
User 121463 does not improve AUC. Reverting changes.
Training on augumented user 55935 38/50 current_auc = 0.7291666666666667
User 55935 AUC after training: 0.7083333333333334
User 55935 does not improve AUC. Reverting changes.
Training on augumented user 42518 39/50 current_auc = 0.7291666666666667
User 42518 AUC after training: 0.7083333333333334
User 42518 does not improve AUC. Reverting changes.
Training on augumented user 29173 40/50 current_auc = 0.7291666666666667
User 29173 AUC after training: 0.7291666666666667
User 29173 does not improve AUC. Reverting changes.
Training on augumented user 104251 41/50 current_auc = 0.7291666666666667
User 104251 AUC after training: 0.7291666666666667
User 104251 does not improve AUC. Reverting changes.
Training on augumented user 108222 42/50 current_auc = 0.7291666666666667
User 108222 AUC after training: 0.6875
User 108222 does not improve AUC. Reverting changes.
Training on augumented user 68013 43/50 current_auc = 0.7291666666666667
User 68013 AUC after training: 0.7083333333333334
User 68013 does not improve AUC. Reverting changes.
Training on augumented user 69426 44/50 current_auc = 0.7291666666666667
User 69426 AUC after training: 0.7291666666666667
User 69426 does not improve AUC. Reverting changes.
Training on augumented user 45848 45/50 current_auc = 0.7291666666666667
User 45848 AUC after training: 0.7291666666666667
User 45848 does not improve AUC. Reverting changes.
Training on augumented user 106181 46/50 current_auc = 0.7291666666666667
User 106181 AUC after training: 0.7291666666666667
User 106181 does not improve AUC. Reverting changes.
Training on augumented user 11088 47/50 current_auc = 0.7291666666666667
User 11088 AUC after training: 0.7083333333333334
User 11088 does not improve AUC. Reverting changes.
Training on augumented user 20968 48/50 current_auc = 0.7291666666666667
User 20968 AUC after training: 0.7291666666666667
User 20968 does not improve AUC. Reverting changes.
Training on augumented user 11457 49/50 current_auc = 0.7291666666666667
User 11457 AUC after training: 0.7083333333333334
User 11457 does not improve AUC. Reverting changes.
[2024-12-02 19:00:25.926506] start test user 99523 147/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:00:26.671390] start test user 99523 147/567 recall augumented users by random, augumented_users = [51459, 132612, 96948, 88347, 109492, 124464, 137320, 73966, 134047, 92030, 86992, 34729, 98974, 36623, 116464, 57749, 56891, 22401, 17618, 87015, 9477, 68174, 105761, 68770, 83501, 41389, 128021, 54579, 47882, 84745, 133357, 49496, 48990, 124792, 118159, 83006, 84145, 58188, 108903, 128635, 137519, 120699, 11228, 128437, 32172, 15163, 120180, 100514, 11589, 118411]
[2024-12-02 19:00:26.689515] user = 99523 Cloud 147/567
[2024-12-02 19:00:26.743293] user = 99523 Local 147/567
[2024-12-02 19:00:26.883052] user = 99523 Local+ 147/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:00:28.900316] user = 99523 MPDA- 147/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6193827160493828
Training on augumented user 51459 0/50 current_auc = 0.6193827160493828
User 51459 AUC after training: 0.6191358024691358
User 51459 does not improve AUC. Reverting changes.
Training on augumented user 132612 1/50 current_auc = 0.6193827160493828
User 132612 AUC after training: 0.6195061728395062
User 132612 improves AUC. Keeping the model.
Training on augumented user 96948 2/50 current_auc = 0.6195061728395062
User 96948 AUC after training: 0.62
User 96948 improves AUC. Keeping the model.
Training on augumented user 88347 3/50 current_auc = 0.62
User 88347 AUC after training: 0.6188888888888888
User 88347 does not improve AUC. Reverting changes.
Training on augumented user 109492 4/50 current_auc = 0.62
User 109492 AUC after training: 0.62
User 109492 does not improve AUC. Reverting changes.
Training on augumented user 124464 5/50 current_auc = 0.62
User 124464 AUC after training: 0.6187654320987654
User 124464 does not improve AUC. Reverting changes.
Training on augumented user 137320 6/50 current_auc = 0.62
User 137320 AUC after training: 0.6175308641975308
User 137320 does not improve AUC. Reverting changes.
Training on augumented user 73966 7/50 current_auc = 0.62
User 73966 AUC after training: 0.6198765432098765
User 73966 does not improve AUC. Reverting changes.
Training on augumented user 134047 8/50 current_auc = 0.62
User 134047 AUC after training: 0.6192592592592593
User 134047 does not improve AUC. Reverting changes.
Training on augumented user 92030 9/50 current_auc = 0.62
User 92030 AUC after training: 0.6199999999999999
User 92030 does not improve AUC. Reverting changes.
Training on augumented user 86992 10/50 current_auc = 0.62
User 86992 AUC after training: 0.6212345679012345
User 86992 improves AUC. Keeping the model.
Training on augumented user 34729 11/50 current_auc = 0.6212345679012345
User 34729 AUC after training: 0.6204938271604938
User 34729 does not improve AUC. Reverting changes.
Training on augumented user 98974 12/50 current_auc = 0.6212345679012345
User 98974 AUC after training: 0.6212345679012345
User 98974 does not improve AUC. Reverting changes.
Training on augumented user 36623 13/50 current_auc = 0.6212345679012345
User 36623 AUC after training: 0.6213580246913579
User 36623 improves AUC. Keeping the model.
Training on augumented user 116464 14/50 current_auc = 0.6213580246913579
User 116464 AUC after training: 0.6211111111111111
User 116464 does not improve AUC. Reverting changes.
Training on augumented user 57749 15/50 current_auc = 0.6213580246913579
User 57749 AUC after training: 0.6212345679012347
User 57749 does not improve AUC. Reverting changes.
Training on augumented user 56891 16/50 current_auc = 0.6213580246913579
User 56891 AUC after training: 0.6208641975308642
User 56891 does not improve AUC. Reverting changes.
Training on augumented user 22401 17/50 current_auc = 0.6213580246913579
User 22401 AUC after training: 0.6203703703703703
User 22401 does not improve AUC. Reverting changes.
Training on augumented user 17618 18/50 current_auc = 0.6213580246913579
User 17618 AUC after training: 0.6203703703703703
User 17618 does not improve AUC. Reverting changes.
Training on augumented user 87015 19/50 current_auc = 0.6213580246913579
User 87015 AUC after training: 0.6208641975308642
User 87015 does not improve AUC. Reverting changes.
Training on augumented user 9477 20/50 current_auc = 0.6213580246913579
User 9477 AUC after training: 0.6218518518518519
User 9477 improves AUC. Keeping the model.
Training on augumented user 68174 21/50 current_auc = 0.6218518518518519
User 68174 AUC after training: 0.6196296296296295
User 68174 does not improve AUC. Reverting changes.
Training on augumented user 105761 22/50 current_auc = 0.6218518518518519
User 105761 AUC after training: 0.6213580246913579
User 105761 does not improve AUC. Reverting changes.
Training on augumented user 68770 23/50 current_auc = 0.6218518518518519
User 68770 AUC after training: 0.6207407407407407
User 68770 does not improve AUC. Reverting changes.
Training on augumented user 83501 24/50 current_auc = 0.6218518518518519
User 83501 AUC after training: 0.621358024691358
User 83501 does not improve AUC. Reverting changes.
Training on augumented user 41389 25/50 current_auc = 0.6218518518518519
User 41389 AUC after training: 0.6180246913580247
User 41389 does not improve AUC. Reverting changes.
Training on augumented user 128021 26/50 current_auc = 0.6218518518518519
User 128021 AUC after training: 0.6195061728395062
User 128021 does not improve AUC. Reverting changes.
Training on augumented user 54579 27/50 current_auc = 0.6218518518518519
User 54579 AUC after training: 0.6219753086419753
User 54579 improves AUC. Keeping the model.
Training on augumented user 47882 28/50 current_auc = 0.6219753086419753
User 47882 AUC after training: 0.6222222222222222
User 47882 improves AUC. Keeping the model.
Training on augumented user 84745 29/50 current_auc = 0.6222222222222222
User 84745 AUC after training: 0.6224691358024691
User 84745 improves AUC. Keeping the model.
Training on augumented user 133357 30/50 current_auc = 0.6224691358024691
User 133357 AUC after training: 0.6234567901234568
User 133357 improves AUC. Keeping the model.
Training on augumented user 49496 31/50 current_auc = 0.6234567901234568
User 49496 AUC after training: 0.6222222222222222
User 49496 does not improve AUC. Reverting changes.
Training on augumented user 48990 32/50 current_auc = 0.6234567901234568
User 48990 AUC after training: 0.622716049382716
User 48990 does not improve AUC. Reverting changes.
Training on augumented user 124792 33/50 current_auc = 0.6234567901234568
User 124792 AUC after training: 0.6237037037037036
User 124792 improves AUC. Keeping the model.
Training on augumented user 118159 34/50 current_auc = 0.6237037037037036
User 118159 AUC after training: 0.6238271604938271
User 118159 improves AUC. Keeping the model.
Training on augumented user 83006 35/50 current_auc = 0.6238271604938271
User 83006 AUC after training: 0.6238271604938271
User 83006 does not improve AUC. Reverting changes.
Training on augumented user 84145 36/50 current_auc = 0.6238271604938271
User 84145 AUC after training: 0.6235802469135803
User 84145 does not improve AUC. Reverting changes.
Training on augumented user 58188 37/50 current_auc = 0.6238271604938271
User 58188 AUC after training: 0.6237037037037036
User 58188 does not improve AUC. Reverting changes.
Training on augumented user 108903 38/50 current_auc = 0.6238271604938271
User 108903 AUC after training: 0.6228395061728396
User 108903 does not improve AUC. Reverting changes.
Training on augumented user 128635 39/50 current_auc = 0.6238271604938271
User 128635 AUC after training: 0.6238271604938271
User 128635 does not improve AUC. Reverting changes.
Training on augumented user 137519 40/50 current_auc = 0.6238271604938271
User 137519 AUC after training: 0.6238271604938271
User 137519 does not improve AUC. Reverting changes.
Training on augumented user 120699 41/50 current_auc = 0.6238271604938271
User 120699 AUC after training: 0.6224691358024691
User 120699 does not improve AUC. Reverting changes.
Training on augumented user 11228 42/50 current_auc = 0.6238271604938271
User 11228 AUC after training: 0.6209876543209877
User 11228 does not improve AUC. Reverting changes.
Training on augumented user 128437 43/50 current_auc = 0.6238271604938271
User 128437 AUC after training: 0.6235802469135803
User 128437 does not improve AUC. Reverting changes.
Training on augumented user 32172 44/50 current_auc = 0.6238271604938271
User 32172 AUC after training: 0.623827160493827
User 32172 does not improve AUC. Reverting changes.
Training on augumented user 15163 45/50 current_auc = 0.6238271604938271
User 15163 AUC after training: 0.623827160493827
User 15163 does not improve AUC. Reverting changes.
Training on augumented user 120180 46/50 current_auc = 0.6238271604938271
User 120180 AUC after training: 0.6239506172839506
User 120180 improves AUC. Keeping the model.
Training on augumented user 100514 47/50 current_auc = 0.6239506172839506
User 100514 AUC after training: 0.6238271604938271
User 100514 does not improve AUC. Reverting changes.
Training on augumented user 11589 48/50 current_auc = 0.6239506172839506
User 11589 AUC after training: 0.6238271604938271
User 11589 does not improve AUC. Reverting changes.
Training on augumented user 118411 49/50 current_auc = 0.6239506172839506
User 118411 AUC after training: 0.624074074074074
User 118411 improves AUC. Keeping the model.
[2024-12-02 19:01:00.537085] start test user 99524 148/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:01:01.202197] start test user 99524 148/567 recall augumented users by random, augumented_users = [90305, 92303, 62761, 3661, 64102, 3439, 136628, 124124, 130717, 27324, 84957, 102135, 94034, 99453, 52362, 98076, 55780, 9534, 99589, 9646, 52524, 113334, 31559, 131568, 23880, 2909, 62405, 126923, 4064, 39537, 56287, 65969, 3827, 124570, 82707, 37799, 23061, 1736, 70907, 7068, 51269, 49507, 115704, 86305, 47292, 109294, 54695, 56074, 7135, 70539]
[2024-12-02 19:01:01.220814] user = 99524 Cloud 148/567
[2024-12-02 19:01:01.260923] user = 99524 Local 148/567
[2024-12-02 19:01:01.830421] user = 99524 Local+ 148/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:01:06.385826] user = 99524 MPDA- 148/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.566304347826087
Training on augumented user 90305 0/50 current_auc = 0.566304347826087
User 90305 AUC after training: 0.5655797101449275
User 90305 does not improve AUC. Reverting changes.
Training on augumented user 92303 1/50 current_auc = 0.566304347826087
User 92303 AUC after training: 0.567391304347826
User 92303 improves AUC. Keeping the model.
Training on augumented user 62761 2/50 current_auc = 0.567391304347826
User 62761 AUC after training: 0.5670289855072463
User 62761 does not improve AUC. Reverting changes.
Training on augumented user 3661 3/50 current_auc = 0.567391304347826
User 3661 AUC after training: 0.5655797101449276
User 3661 does not improve AUC. Reverting changes.
Training on augumented user 64102 4/50 current_auc = 0.567391304347826
User 64102 AUC after training: 0.566304347826087
User 64102 does not improve AUC. Reverting changes.
Training on augumented user 3439 5/50 current_auc = 0.567391304347826
User 3439 AUC after training: 0.5666666666666667
User 3439 does not improve AUC. Reverting changes.
Training on augumented user 136628 6/50 current_auc = 0.567391304347826
User 136628 AUC after training: 0.5673913043478261
User 136628 improves AUC. Keeping the model.
Training on augumented user 124124 7/50 current_auc = 0.5673913043478261
User 124124 AUC after training: 0.5634057971014492
User 124124 does not improve AUC. Reverting changes.
Training on augumented user 130717 8/50 current_auc = 0.5673913043478261
User 130717 AUC after training: 0.566304347826087
User 130717 does not improve AUC. Reverting changes.
Training on augumented user 27324 9/50 current_auc = 0.5673913043478261
User 27324 AUC after training: 0.5648550724637681
User 27324 does not improve AUC. Reverting changes.
Training on augumented user 84957 10/50 current_auc = 0.5673913043478261
User 84957 AUC after training: 0.5648550724637681
User 84957 does not improve AUC. Reverting changes.
Training on augumented user 102135 11/50 current_auc = 0.5673913043478261
User 102135 AUC after training: 0.5684782608695652
User 102135 improves AUC. Keeping the model.
Training on augumented user 94034 12/50 current_auc = 0.5684782608695652
User 94034 AUC after training: 0.5681159420289854
User 94034 does not improve AUC. Reverting changes.
Training on augumented user 99453 13/50 current_auc = 0.5684782608695652
User 99453 AUC after training: 0.5681159420289855
User 99453 does not improve AUC. Reverting changes.
Training on augumented user 52362 14/50 current_auc = 0.5684782608695652
User 52362 AUC after training: 0.5677536231884058
User 52362 does not improve AUC. Reverting changes.
Training on augumented user 98076 15/50 current_auc = 0.5684782608695652
User 98076 AUC after training: 0.5659420289855073
User 98076 does not improve AUC. Reverting changes.
Training on augumented user 55780 16/50 current_auc = 0.5684782608695652
User 55780 AUC after training: 0.5677536231884058
User 55780 does not improve AUC. Reverting changes.
Training on augumented user 9534 17/50 current_auc = 0.5684782608695652
User 9534 AUC after training: 0.5677536231884057
User 9534 does not improve AUC. Reverting changes.
Training on augumented user 99589 18/50 current_auc = 0.5684782608695652
User 99589 AUC after training: 0.5677536231884058
User 99589 does not improve AUC. Reverting changes.
Training on augumented user 9646 19/50 current_auc = 0.5684782608695652
User 9646 AUC after training: 0.569927536231884
User 9646 improves AUC. Keeping the model.
Training on augumented user 52524 20/50 current_auc = 0.569927536231884
User 52524 AUC after training: 0.5652173913043478
User 52524 does not improve AUC. Reverting changes.
Training on augumented user 113334 21/50 current_auc = 0.569927536231884
User 113334 AUC after training: 0.5699275362318841
User 113334 improves AUC. Keeping the model.
Training on augumented user 31559 22/50 current_auc = 0.5699275362318841
User 31559 AUC after training: 0.571376811594203
User 31559 improves AUC. Keeping the model.
Training on augumented user 131568 23/50 current_auc = 0.571376811594203
User 131568 AUC after training: 0.5695652173913043
User 131568 does not improve AUC. Reverting changes.
Training on augumented user 23880 24/50 current_auc = 0.571376811594203
User 23880 AUC after training: 0.5677536231884057
User 23880 does not improve AUC. Reverting changes.
Training on augumented user 2909 25/50 current_auc = 0.571376811594203
User 2909 AUC after training: 0.5695652173913044
User 2909 does not improve AUC. Reverting changes.
Training on augumented user 62405 26/50 current_auc = 0.571376811594203
User 62405 AUC after training: 0.5692028985507246
User 62405 does not improve AUC. Reverting changes.
Training on augumented user 126923 27/50 current_auc = 0.571376811594203
User 126923 AUC after training: 0.5713768115942028
User 126923 does not improve AUC. Reverting changes.
Training on augumented user 4064 28/50 current_auc = 0.571376811594203
User 4064 AUC after training: 0.5677536231884057
User 4064 does not improve AUC. Reverting changes.
Training on augumented user 39537 29/50 current_auc = 0.571376811594203
User 39537 AUC after training: 0.5692028985507246
User 39537 does not improve AUC. Reverting changes.
Training on augumented user 56287 30/50 current_auc = 0.571376811594203
User 56287 AUC after training: 0.5721014492753623
User 56287 improves AUC. Keeping the model.
Training on augumented user 65969 31/50 current_auc = 0.5721014492753623
User 65969 AUC after training: 0.5746376811594203
User 65969 improves AUC. Keeping the model.
Training on augumented user 3827 32/50 current_auc = 0.5746376811594203
User 3827 AUC after training: 0.5688405797101449
User 3827 does not improve AUC. Reverting changes.
Training on augumented user 124570 33/50 current_auc = 0.5746376811594203
User 124570 AUC after training: 0.5717391304347826
User 124570 does not improve AUC. Reverting changes.
Training on augumented user 82707 34/50 current_auc = 0.5746376811594203
User 82707 AUC after training: 0.5717391304347826
User 82707 does not improve AUC. Reverting changes.
Training on augumented user 37799 35/50 current_auc = 0.5746376811594203
User 37799 AUC after training: 0.5717391304347825
User 37799 does not improve AUC. Reverting changes.
Training on augumented user 23061 36/50 current_auc = 0.5746376811594203
User 23061 AUC after training: 0.5684782608695651
User 23061 does not improve AUC. Reverting changes.
Training on augumented user 1736 37/50 current_auc = 0.5746376811594203
User 1736 AUC after training: 0.572463768115942
User 1736 does not improve AUC. Reverting changes.
Training on augumented user 70907 38/50 current_auc = 0.5746376811594203
User 70907 AUC after training: 0.5677536231884057
User 70907 does not improve AUC. Reverting changes.
Training on augumented user 7068 39/50 current_auc = 0.5746376811594203
User 7068 AUC after training: 0.5746376811594203
User 7068 does not improve AUC. Reverting changes.
Training on augumented user 51269 40/50 current_auc = 0.5746376811594203
User 51269 AUC after training: 0.5739130434782609
User 51269 does not improve AUC. Reverting changes.
Training on augumented user 49507 41/50 current_auc = 0.5746376811594203
User 49507 AUC after training: 0.5739130434782609
User 49507 does not improve AUC. Reverting changes.
Training on augumented user 115704 42/50 current_auc = 0.5746376811594203
User 115704 AUC after training: 0.5721014492753623
User 115704 does not improve AUC. Reverting changes.
Training on augumented user 86305 43/50 current_auc = 0.5746376811594203
User 86305 AUC after training: 0.5695652173913044
User 86305 does not improve AUC. Reverting changes.
Training on augumented user 47292 44/50 current_auc = 0.5746376811594203
User 47292 AUC after training: 0.5717391304347825
User 47292 does not improve AUC. Reverting changes.
Training on augumented user 109294 45/50 current_auc = 0.5746376811594203
User 109294 AUC after training: 0.5728260869565217
User 109294 does not improve AUC. Reverting changes.
Training on augumented user 54695 46/50 current_auc = 0.5746376811594203
User 54695 AUC after training: 0.5717391304347826
User 54695 does not improve AUC. Reverting changes.
Training on augumented user 56074 47/50 current_auc = 0.5746376811594203
User 56074 AUC after training: 0.5721014492753623
User 56074 does not improve AUC. Reverting changes.
Training on augumented user 7135 48/50 current_auc = 0.5746376811594203
User 7135 AUC after training: 0.5728260869565217
User 7135 does not improve AUC. Reverting changes.
Training on augumented user 70539 49/50 current_auc = 0.5746376811594203
User 70539 AUC after training: 0.5728260869565217
User 70539 does not improve AUC. Reverting changes.
[2024-12-02 19:01:40.471937] start test user 99525 149/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:01:41.206264] start test user 99525 149/567 recall augumented users by random, augumented_users = [51958, 104742, 116055, 88626, 135265, 89784, 107165, 44673, 20899, 101477, 88901, 47312, 105022, 128307, 84762, 75719, 135938, 92224, 25841, 105647, 119348, 52921, 129731, 53593, 26557, 132389, 109660, 92931, 86351, 42769, 22623, 42699, 12616, 52127, 48831, 69893, 47959, 6110, 6512, 66995, 21753, 101880, 18615, 25296, 94387, 119562, 6180, 92585, 55681, 109713]
[2024-12-02 19:01:41.244421] user = 99525 Cloud 149/567
[2024-12-02 19:01:41.286547] user = 99525 Local 149/567
[2024-12-02 19:01:41.451562] user = 99525 Local+ 149/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:01:43.675390] user = 99525 MPDA- 149/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6483974358974359
Training on augumented user 51958 0/50 current_auc = 0.6483974358974359
User 51958 AUC after training: 0.6477564102564103
User 51958 does not improve AUC. Reverting changes.
Training on augumented user 104742 1/50 current_auc = 0.6483974358974359
User 104742 AUC after training: 0.65
User 104742 improves AUC. Keeping the model.
Training on augumented user 116055 2/50 current_auc = 0.65
User 116055 AUC after training: 0.6522435897435898
User 116055 improves AUC. Keeping the model.
Training on augumented user 88626 3/50 current_auc = 0.6522435897435898
User 88626 AUC after training: 0.6538461538461537
User 88626 improves AUC. Keeping the model.
Training on augumented user 135265 4/50 current_auc = 0.6538461538461537
User 135265 AUC after training: 0.6544871794871795
User 135265 improves AUC. Keeping the model.
Training on augumented user 89784 5/50 current_auc = 0.6544871794871795
User 89784 AUC after training: 0.6548076923076923
User 89784 improves AUC. Keeping the model.
Training on augumented user 107165 6/50 current_auc = 0.6548076923076923
User 107165 AUC after training: 0.6516025641025641
User 107165 does not improve AUC. Reverting changes.
Training on augumented user 44673 7/50 current_auc = 0.6548076923076923
User 44673 AUC after training: 0.6538461538461539
User 44673 does not improve AUC. Reverting changes.
Training on augumented user 20899 8/50 current_auc = 0.6548076923076923
User 20899 AUC after training: 0.653525641025641
User 20899 does not improve AUC. Reverting changes.
Training on augumented user 101477 9/50 current_auc = 0.6548076923076923
User 101477 AUC after training: 0.6544871794871795
User 101477 does not improve AUC. Reverting changes.
Training on augumented user 88901 10/50 current_auc = 0.6548076923076923
User 88901 AUC after training: 0.655448717948718
User 88901 improves AUC. Keeping the model.
Training on augumented user 47312 11/50 current_auc = 0.655448717948718
User 47312 AUC after training: 0.6544871794871795
User 47312 does not improve AUC. Reverting changes.
Training on augumented user 105022 12/50 current_auc = 0.655448717948718
User 105022 AUC after training: 0.6548076923076922
User 105022 does not improve AUC. Reverting changes.
Training on augumented user 128307 13/50 current_auc = 0.655448717948718
User 128307 AUC after training: 0.6557692307692308
User 128307 improves AUC. Keeping the model.
Training on augumented user 84762 14/50 current_auc = 0.6557692307692308
User 84762 AUC after training: 0.6557692307692308
User 84762 does not improve AUC. Reverting changes.
Training on augumented user 75719 15/50 current_auc = 0.6557692307692308
User 75719 AUC after training: 0.6567307692307692
User 75719 improves AUC. Keeping the model.
Training on augumented user 135938 16/50 current_auc = 0.6567307692307692
User 135938 AUC after training: 0.6573717948717949
User 135938 improves AUC. Keeping the model.
Training on augumented user 92224 17/50 current_auc = 0.6573717948717949
User 92224 AUC after training: 0.6560897435897436
User 92224 does not improve AUC. Reverting changes.
Training on augumented user 25841 18/50 current_auc = 0.6573717948717949
User 25841 AUC after training: 0.6567307692307692
User 25841 does not improve AUC. Reverting changes.
Training on augumented user 105647 19/50 current_auc = 0.6573717948717949
User 105647 AUC after training: 0.6560897435897436
User 105647 does not improve AUC. Reverting changes.
Training on augumented user 119348 20/50 current_auc = 0.6573717948717949
User 119348 AUC after training: 0.6567307692307692
User 119348 does not improve AUC. Reverting changes.
Training on augumented user 52921 21/50 current_auc = 0.6573717948717949
User 52921 AUC after training: 0.6573717948717949
User 52921 does not improve AUC. Reverting changes.
Training on augumented user 129731 22/50 current_auc = 0.6573717948717949
User 129731 AUC after training: 0.6560897435897436
User 129731 does not improve AUC. Reverting changes.
Training on augumented user 53593 23/50 current_auc = 0.6573717948717949
User 53593 AUC after training: 0.657051282051282
User 53593 does not improve AUC. Reverting changes.
Training on augumented user 26557 24/50 current_auc = 0.6573717948717949
User 26557 AUC after training: 0.657051282051282
User 26557 does not improve AUC. Reverting changes.
Training on augumented user 132389 25/50 current_auc = 0.6573717948717949
User 132389 AUC after training: 0.6573717948717949
User 132389 does not improve AUC. Reverting changes.
Training on augumented user 109660 26/50 current_auc = 0.6573717948717949
User 109660 AUC after training: 0.6573717948717949
User 109660 does not improve AUC. Reverting changes.
Training on augumented user 92931 27/50 current_auc = 0.6573717948717949
User 92931 AUC after training: 0.6573717948717949
User 92931 does not improve AUC. Reverting changes.
Training on augumented user 86351 28/50 current_auc = 0.6573717948717949
User 86351 AUC after training: 0.6573717948717949
User 86351 does not improve AUC. Reverting changes.
Training on augumented user 42769 29/50 current_auc = 0.6573717948717949
User 42769 AUC after training: 0.6522435897435898
User 42769 does not improve AUC. Reverting changes.
Training on augumented user 22623 30/50 current_auc = 0.6573717948717949
User 22623 AUC after training: 0.6548076923076923
User 22623 does not improve AUC. Reverting changes.
Training on augumented user 42699 31/50 current_auc = 0.6573717948717949
User 42699 AUC after training: 0.6573717948717949
User 42699 does not improve AUC. Reverting changes.
Training on augumented user 12616 32/50 current_auc = 0.6573717948717949
User 12616 AUC after training: 0.657051282051282
User 12616 does not improve AUC. Reverting changes.
Training on augumented user 52127 33/50 current_auc = 0.6573717948717949
User 52127 AUC after training: 0.6573717948717949
User 52127 does not improve AUC. Reverting changes.
Training on augumented user 48831 34/50 current_auc = 0.6573717948717949
User 48831 AUC after training: 0.655448717948718
User 48831 does not improve AUC. Reverting changes.
Training on augumented user 69893 35/50 current_auc = 0.6573717948717949
User 69893 AUC after training: 0.6573717948717949
User 69893 does not improve AUC. Reverting changes.
Training on augumented user 47959 36/50 current_auc = 0.6573717948717949
User 47959 AUC after training: 0.655448717948718
User 47959 does not improve AUC. Reverting changes.
Training on augumented user 6110 37/50 current_auc = 0.6573717948717949
User 6110 AUC after training: 0.6567307692307692
User 6110 does not improve AUC. Reverting changes.
Training on augumented user 6512 38/50 current_auc = 0.6573717948717949
User 6512 AUC after training: 0.657051282051282
User 6512 does not improve AUC. Reverting changes.
Training on augumented user 66995 39/50 current_auc = 0.6573717948717949
User 66995 AUC after training: 0.6573717948717949
User 66995 does not improve AUC. Reverting changes.
Training on augumented user 21753 40/50 current_auc = 0.6573717948717949
User 21753 AUC after training: 0.6576923076923077
User 21753 improves AUC. Keeping the model.
Training on augumented user 101880 41/50 current_auc = 0.6576923076923077
User 101880 AUC after training: 0.6564102564102564
User 101880 does not improve AUC. Reverting changes.
Training on augumented user 18615 42/50 current_auc = 0.6576923076923077
User 18615 AUC after training: 0.6560897435897436
User 18615 does not improve AUC. Reverting changes.
Training on augumented user 25296 43/50 current_auc = 0.6576923076923077
User 25296 AUC after training: 0.6573717948717949
User 25296 does not improve AUC. Reverting changes.
Training on augumented user 94387 44/50 current_auc = 0.6576923076923077
User 94387 AUC after training: 0.6573717948717949
User 94387 does not improve AUC. Reverting changes.
Training on augumented user 119562 45/50 current_auc = 0.6576923076923077
User 119562 AUC after training: 0.6560897435897435
User 119562 does not improve AUC. Reverting changes.
Training on augumented user 6180 46/50 current_auc = 0.6576923076923077
User 6180 AUC after training: 0.6567307692307692
User 6180 does not improve AUC. Reverting changes.
Training on augumented user 92585 47/50 current_auc = 0.6576923076923077
User 92585 AUC after training: 0.6576923076923077
User 92585 does not improve AUC. Reverting changes.
Training on augumented user 55681 48/50 current_auc = 0.6576923076923077
User 55681 AUC after training: 0.657051282051282
User 55681 does not improve AUC. Reverting changes.
Training on augumented user 109713 49/50 current_auc = 0.6576923076923077
User 109713 AUC after training: 0.6576923076923077
User 109713 does not improve AUC. Reverting changes.
[2024-12-02 19:02:15.722403] start test user 99533 150/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:02:16.523065] start test user 99533 150/567 recall augumented users by random, augumented_users = [126712, 100968, 125768, 27305, 89210, 114359, 90436, 5354, 16339, 105062, 89751, 77839, 132503, 26711, 45585, 94942, 74596, 8591, 113746, 14946, 78598, 94245, 137370, 58585, 93719, 96896, 128026, 1150, 49005, 56581, 137958, 133390, 54871, 28541, 56199, 67976, 127977, 91636, 69343, 9964, 25082, 69948, 57755, 77569, 89272, 2857, 83730, 59292, 98995, 97331]
[2024-12-02 19:02:16.537960] user = 99533 Cloud 150/567
[2024-12-02 19:02:16.560421] user = 99533 Local 150/567
[2024-12-02 19:02:16.604096] user = 99533 Local+ 150/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:02:19.049634] user = 99533 MPDA- 150/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.0
Training on augumented user 126712 0/50 current_auc = 0.0
User 126712 AUC after training: 0.0
User 126712 does not improve AUC. Reverting changes.
Training on augumented user 100968 1/50 current_auc = 0.0
User 100968 AUC after training: 0.0
User 100968 does not improve AUC. Reverting changes.
Training on augumented user 125768 2/50 current_auc = 0.0
User 125768 AUC after training: 0.0
User 125768 does not improve AUC. Reverting changes.
Training on augumented user 27305 3/50 current_auc = 0.0
User 27305 AUC after training: 0.0
User 27305 does not improve AUC. Reverting changes.
Training on augumented user 89210 4/50 current_auc = 0.0
User 89210 AUC after training: 0.0
User 89210 does not improve AUC. Reverting changes.
Training on augumented user 114359 5/50 current_auc = 0.0
User 114359 AUC after training: 0.0
User 114359 does not improve AUC. Reverting changes.
Training on augumented user 90436 6/50 current_auc = 0.0
User 90436 AUC after training: 0.0
User 90436 does not improve AUC. Reverting changes.
Training on augumented user 5354 7/50 current_auc = 0.0
User 5354 AUC after training: 0.0
User 5354 does not improve AUC. Reverting changes.
Training on augumented user 16339 8/50 current_auc = 0.0
User 16339 AUC after training: 0.0
User 16339 does not improve AUC. Reverting changes.
Training on augumented user 105062 9/50 current_auc = 0.0
User 105062 AUC after training: 0.0
User 105062 does not improve AUC. Reverting changes.
Training on augumented user 89751 10/50 current_auc = 0.0
User 89751 AUC after training: 0.0
User 89751 does not improve AUC. Reverting changes.
Training on augumented user 77839 11/50 current_auc = 0.0
User 77839 AUC after training: 0.0
User 77839 does not improve AUC. Reverting changes.
Training on augumented user 132503 12/50 current_auc = 0.0
User 132503 AUC after training: 0.0
User 132503 does not improve AUC. Reverting changes.
Training on augumented user 26711 13/50 current_auc = 0.0
User 26711 AUC after training: 0.0
User 26711 does not improve AUC. Reverting changes.
Training on augumented user 45585 14/50 current_auc = 0.0
User 45585 AUC after training: 0.0
User 45585 does not improve AUC. Reverting changes.
Training on augumented user 94942 15/50 current_auc = 0.0
User 94942 AUC after training: 0.0
User 94942 does not improve AUC. Reverting changes.
Training on augumented user 74596 16/50 current_auc = 0.0
User 74596 AUC after training: 0.0
User 74596 does not improve AUC. Reverting changes.
Training on augumented user 8591 17/50 current_auc = 0.0
User 8591 AUC after training: 0.0
User 8591 does not improve AUC. Reverting changes.
Training on augumented user 113746 18/50 current_auc = 0.0
User 113746 AUC after training: 0.0
User 113746 does not improve AUC. Reverting changes.
Training on augumented user 14946 19/50 current_auc = 0.0
User 14946 AUC after training: 0.0
User 14946 does not improve AUC. Reverting changes.
Training on augumented user 78598 20/50 current_auc = 0.0
User 78598 AUC after training: 0.0
User 78598 does not improve AUC. Reverting changes.
Training on augumented user 94245 21/50 current_auc = 0.0
User 94245 AUC after training: 0.0
User 94245 does not improve AUC. Reverting changes.
Training on augumented user 137370 22/50 current_auc = 0.0
User 137370 AUC after training: 0.0
User 137370 does not improve AUC. Reverting changes.
Training on augumented user 58585 23/50 current_auc = 0.0
User 58585 AUC after training: 0.0
User 58585 does not improve AUC. Reverting changes.
Training on augumented user 93719 24/50 current_auc = 0.0
User 93719 AUC after training: 0.0
User 93719 does not improve AUC. Reverting changes.
Training on augumented user 96896 25/50 current_auc = 0.0
User 96896 AUC after training: 0.0
User 96896 does not improve AUC. Reverting changes.
Training on augumented user 128026 26/50 current_auc = 0.0
User 128026 AUC after training: 0.0
User 128026 does not improve AUC. Reverting changes.
Training on augumented user 1150 27/50 current_auc = 0.0
User 1150 AUC after training: 0.0
User 1150 does not improve AUC. Reverting changes.
Training on augumented user 49005 28/50 current_auc = 0.0
User 49005 AUC after training: 0.0
User 49005 does not improve AUC. Reverting changes.
Training on augumented user 56581 29/50 current_auc = 0.0
User 56581 AUC after training: 0.0
User 56581 does not improve AUC. Reverting changes.
Training on augumented user 137958 30/50 current_auc = 0.0
User 137958 AUC after training: 0.0
User 137958 does not improve AUC. Reverting changes.
Training on augumented user 133390 31/50 current_auc = 0.0
User 133390 AUC after training: 0.0
User 133390 does not improve AUC. Reverting changes.
Training on augumented user 54871 32/50 current_auc = 0.0
User 54871 AUC after training: 0.0
User 54871 does not improve AUC. Reverting changes.
Training on augumented user 28541 33/50 current_auc = 0.0
User 28541 AUC after training: 0.0
User 28541 does not improve AUC. Reverting changes.
Training on augumented user 56199 34/50 current_auc = 0.0
User 56199 AUC after training: 0.0
User 56199 does not improve AUC. Reverting changes.
Training on augumented user 67976 35/50 current_auc = 0.0
User 67976 AUC after training: 0.0
User 67976 does not improve AUC. Reverting changes.
Training on augumented user 127977 36/50 current_auc = 0.0
User 127977 AUC after training: 0.0
User 127977 does not improve AUC. Reverting changes.
Training on augumented user 91636 37/50 current_auc = 0.0
User 91636 AUC after training: 0.0
User 91636 does not improve AUC. Reverting changes.
Training on augumented user 69343 38/50 current_auc = 0.0
User 69343 AUC after training: 0.0
User 69343 does not improve AUC. Reverting changes.
Training on augumented user 9964 39/50 current_auc = 0.0
User 9964 AUC after training: 0.0
User 9964 does not improve AUC. Reverting changes.
Training on augumented user 25082 40/50 current_auc = 0.0
User 25082 AUC after training: 0.0
User 25082 does not improve AUC. Reverting changes.
Training on augumented user 69948 41/50 current_auc = 0.0
User 69948 AUC after training: 0.0
User 69948 does not improve AUC. Reverting changes.
Training on augumented user 57755 42/50 current_auc = 0.0
User 57755 AUC after training: 0.0
User 57755 does not improve AUC. Reverting changes.
Training on augumented user 77569 43/50 current_auc = 0.0
User 77569 AUC after training: 0.0
User 77569 does not improve AUC. Reverting changes.
Training on augumented user 89272 44/50 current_auc = 0.0
User 89272 AUC after training: 0.0
User 89272 does not improve AUC. Reverting changes.
Training on augumented user 2857 45/50 current_auc = 0.0
User 2857 AUC after training: 0.0
User 2857 does not improve AUC. Reverting changes.
Training on augumented user 83730 46/50 current_auc = 0.0
User 83730 AUC after training: 0.0
User 83730 does not improve AUC. Reverting changes.
Training on augumented user 59292 47/50 current_auc = 0.0
User 59292 AUC after training: 0.0
User 59292 does not improve AUC. Reverting changes.
Training on augumented user 98995 48/50 current_auc = 0.0
User 98995 AUC after training: 0.0
User 98995 does not improve AUC. Reverting changes.
Training on augumented user 97331 49/50 current_auc = 0.0
User 97331 AUC after training: 0.0
User 97331 does not improve AUC. Reverting changes.
[2024-12-02 19:02:48.584809] start test user 99549 151/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:02:49.013622] start test user 99549 151/567 recall augumented users by random, augumented_users = [47041, 16365, 81717, 81412, 125984, 30854, 33370, 80560, 39053, 107948, 12539, 58036, 108384, 32335, 17741, 124327, 84646, 98290, 46206, 9750, 84453, 23214, 62810, 66618, 32279, 84523, 53668, 20913, 43961, 93364, 95106, 63543, 43759, 40369, 53070, 63596, 52793, 90967, 41319, 82645, 9011, 72407, 37008, 90096, 110309, 106199, 125438, 52849, 132740, 123343]
[2024-12-02 19:02:49.029842] user = 99549 Cloud 151/567
[2024-12-02 19:02:49.041518] user = 99549 Local 151/567
[2024-12-02 19:02:49.154107] user = 99549 Local+ 151/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:02:51.064573] user = 99549 MPDA- 151/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4340659340659341
Training on augumented user 47041 0/50 current_auc = 0.4340659340659341
User 47041 AUC after training: 0.4340659340659341
User 47041 does not improve AUC. Reverting changes.
Training on augumented user 16365 1/50 current_auc = 0.4340659340659341
User 16365 AUC after training: 0.43223443223443225
User 16365 does not improve AUC. Reverting changes.
Training on augumented user 81717 2/50 current_auc = 0.4340659340659341
User 81717 AUC after training: 0.43223443223443225
User 81717 does not improve AUC. Reverting changes.
Training on augumented user 81412 3/50 current_auc = 0.4340659340659341
User 81412 AUC after training: 0.43223443223443225
User 81412 does not improve AUC. Reverting changes.
Training on augumented user 125984 4/50 current_auc = 0.4340659340659341
User 125984 AUC after training: 0.43223443223443225
User 125984 does not improve AUC. Reverting changes.
Training on augumented user 30854 5/50 current_auc = 0.4340659340659341
User 30854 AUC after training: 0.4340659340659341
User 30854 does not improve AUC. Reverting changes.
Training on augumented user 33370 6/50 current_auc = 0.4340659340659341
User 33370 AUC after training: 0.4358974358974359
User 33370 improves AUC. Keeping the model.
Training on augumented user 80560 7/50 current_auc = 0.4358974358974359
User 80560 AUC after training: 0.4358974358974359
User 80560 does not improve AUC. Reverting changes.
Training on augumented user 39053 8/50 current_auc = 0.4358974358974359
User 39053 AUC after training: 0.4358974358974359
User 39053 does not improve AUC. Reverting changes.
Training on augumented user 107948 9/50 current_auc = 0.4358974358974359
User 107948 AUC after training: 0.4340659340659341
User 107948 does not improve AUC. Reverting changes.
Training on augumented user 12539 10/50 current_auc = 0.4358974358974359
User 12539 AUC after training: 0.43040293040293043
User 12539 does not improve AUC. Reverting changes.
Training on augumented user 58036 11/50 current_auc = 0.4358974358974359
User 58036 AUC after training: 0.4358974358974359
User 58036 does not improve AUC. Reverting changes.
Training on augumented user 108384 12/50 current_auc = 0.4358974358974359
User 108384 AUC after training: 0.4340659340659341
User 108384 does not improve AUC. Reverting changes.
Training on augumented user 32335 13/50 current_auc = 0.4358974358974359
User 32335 AUC after training: 0.4358974358974359
User 32335 does not improve AUC. Reverting changes.
Training on augumented user 17741 14/50 current_auc = 0.4358974358974359
User 17741 AUC after training: 0.4340659340659341
User 17741 does not improve AUC. Reverting changes.
Training on augumented user 124327 15/50 current_auc = 0.4358974358974359
User 124327 AUC after training: 0.4340659340659341
User 124327 does not improve AUC. Reverting changes.
Training on augumented user 84646 16/50 current_auc = 0.4358974358974359
User 84646 AUC after training: 0.4358974358974359
User 84646 does not improve AUC. Reverting changes.
Training on augumented user 98290 17/50 current_auc = 0.4358974358974359
User 98290 AUC after training: 0.4358974358974359
User 98290 does not improve AUC. Reverting changes.
Training on augumented user 46206 18/50 current_auc = 0.4358974358974359
User 46206 AUC after training: 0.4340659340659341
User 46206 does not improve AUC. Reverting changes.
Training on augumented user 9750 19/50 current_auc = 0.4358974358974359
User 9750 AUC after training: 0.4340659340659341
User 9750 does not improve AUC. Reverting changes.
Training on augumented user 84453 20/50 current_auc = 0.4358974358974359
User 84453 AUC after training: 0.4358974358974359
User 84453 does not improve AUC. Reverting changes.
Training on augumented user 23214 21/50 current_auc = 0.4358974358974359
User 23214 AUC after training: 0.4340659340659341
User 23214 does not improve AUC. Reverting changes.
Training on augumented user 62810 22/50 current_auc = 0.4358974358974359
User 62810 AUC after training: 0.43223443223443225
User 62810 does not improve AUC. Reverting changes.
Training on augumented user 66618 23/50 current_auc = 0.4358974358974359
User 66618 AUC after training: 0.4358974358974359
User 66618 does not improve AUC. Reverting changes.
Training on augumented user 32279 24/50 current_auc = 0.4358974358974359
User 32279 AUC after training: 0.4358974358974359
User 32279 does not improve AUC. Reverting changes.
Training on augumented user 84523 25/50 current_auc = 0.4358974358974359
User 84523 AUC after training: 0.4358974358974359
User 84523 does not improve AUC. Reverting changes.
Training on augumented user 53668 26/50 current_auc = 0.4358974358974359
User 53668 AUC after training: 0.43956043956043955
User 53668 improves AUC. Keeping the model.
Training on augumented user 20913 27/50 current_auc = 0.43956043956043955
User 20913 AUC after training: 0.43956043956043955
User 20913 does not improve AUC. Reverting changes.
Training on augumented user 43961 28/50 current_auc = 0.43956043956043955
User 43961 AUC after training: 0.43956043956043955
User 43961 does not improve AUC. Reverting changes.
Training on augumented user 93364 29/50 current_auc = 0.43956043956043955
User 93364 AUC after training: 0.43956043956043955
User 93364 does not improve AUC. Reverting changes.
Training on augumented user 95106 30/50 current_auc = 0.43956043956043955
User 95106 AUC after training: 0.43956043956043955
User 95106 does not improve AUC. Reverting changes.
Training on augumented user 63543 31/50 current_auc = 0.43956043956043955
User 63543 AUC after training: 0.43772893772893773
User 63543 does not improve AUC. Reverting changes.
Training on augumented user 43759 32/50 current_auc = 0.43956043956043955
User 43759 AUC after training: 0.4340659340659341
User 43759 does not improve AUC. Reverting changes.
Training on augumented user 40369 33/50 current_auc = 0.43956043956043955
User 40369 AUC after training: 0.4432234432234432
User 40369 improves AUC. Keeping the model.
Training on augumented user 53070 34/50 current_auc = 0.4432234432234432
User 53070 AUC after training: 0.4432234432234432
User 53070 does not improve AUC. Reverting changes.
Training on augumented user 63596 35/50 current_auc = 0.4432234432234432
User 63596 AUC after training: 0.43040293040293043
User 63596 does not improve AUC. Reverting changes.
Training on augumented user 52793 36/50 current_auc = 0.4432234432234432
User 52793 AUC after training: 0.4413919413919414
User 52793 does not improve AUC. Reverting changes.
Training on augumented user 90967 37/50 current_auc = 0.4432234432234432
User 90967 AUC after training: 0.43772893772893773
User 90967 does not improve AUC. Reverting changes.
Training on augumented user 41319 38/50 current_auc = 0.4432234432234432
User 41319 AUC after training: 0.4413919413919414
User 41319 does not improve AUC. Reverting changes.
Training on augumented user 82645 39/50 current_auc = 0.4432234432234432
User 82645 AUC after training: 0.43956043956043955
User 82645 does not improve AUC. Reverting changes.
Training on augumented user 9011 40/50 current_auc = 0.4432234432234432
User 9011 AUC after training: 0.4413919413919414
User 9011 does not improve AUC. Reverting changes.
Training on augumented user 72407 41/50 current_auc = 0.4432234432234432
User 72407 AUC after training: 0.43956043956043955
User 72407 does not improve AUC. Reverting changes.
Training on augumented user 37008 42/50 current_auc = 0.4432234432234432
User 37008 AUC after training: 0.4413919413919414
User 37008 does not improve AUC. Reverting changes.
Training on augumented user 90096 43/50 current_auc = 0.4432234432234432
User 90096 AUC after training: 0.4340659340659341
User 90096 does not improve AUC. Reverting changes.
Training on augumented user 110309 44/50 current_auc = 0.4432234432234432
User 110309 AUC after training: 0.44505494505494503
User 110309 improves AUC. Keeping the model.
Training on augumented user 106199 45/50 current_auc = 0.44505494505494503
User 106199 AUC after training: 0.44871794871794873
User 106199 improves AUC. Keeping the model.
Training on augumented user 125438 46/50 current_auc = 0.44871794871794873
User 125438 AUC after training: 0.44871794871794873
User 125438 does not improve AUC. Reverting changes.
Training on augumented user 52849 47/50 current_auc = 0.44871794871794873
User 52849 AUC after training: 0.45054945054945056
User 52849 improves AUC. Keeping the model.
Training on augumented user 132740 48/50 current_auc = 0.45054945054945056
User 132740 AUC after training: 0.45054945054945056
User 132740 does not improve AUC. Reverting changes.
Training on augumented user 123343 49/50 current_auc = 0.45054945054945056
User 123343 AUC after training: 0.45054945054945056
User 123343 does not improve AUC. Reverting changes.
[2024-12-02 19:03:22.474120] start test user 99557 152/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:03:23.326339] start test user 99557 152/567 recall augumented users by random, augumented_users = [12441, 40664, 119591, 74761, 60920, 102779, 125339, 21865, 116338, 6249, 77396, 89970, 30120, 27669, 101387, 48267, 54637, 67354, 41410, 81211, 4171, 2817, 34460, 111647, 93357, 81282, 10992, 138469, 42360, 80269, 42664, 4349, 121836, 12485, 74162, 111617, 7721, 79521, 32332, 9249, 45337, 5720, 122793, 65402, 63996, 128981, 34850, 19951, 39920, 110576]
[2024-12-02 19:03:23.354113] user = 99557 Cloud 152/567
[2024-12-02 19:03:23.371428] user = 99557 Local 152/567
[2024-12-02 19:03:23.428339] user = 99557 Local+ 152/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:03:25.770259] user = 99557 MPDA- 152/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4897959183673469
Training on augumented user 12441 0/50 current_auc = 0.4897959183673469
User 12441 AUC after training: 0.4897959183673469
User 12441 does not improve AUC. Reverting changes.
Training on augumented user 40664 1/50 current_auc = 0.4897959183673469
User 40664 AUC after training: 0.4965986394557823
User 40664 improves AUC. Keeping the model.
Training on augumented user 119591 2/50 current_auc = 0.4965986394557823
User 119591 AUC after training: 0.4897959183673469
User 119591 does not improve AUC. Reverting changes.
Training on augumented user 74761 3/50 current_auc = 0.4965986394557823
User 74761 AUC after training: 0.4965986394557823
User 74761 does not improve AUC. Reverting changes.
Training on augumented user 60920 4/50 current_auc = 0.4965986394557823
User 60920 AUC after training: 0.4965986394557823
User 60920 does not improve AUC. Reverting changes.
Training on augumented user 102779 5/50 current_auc = 0.4965986394557823
User 102779 AUC after training: 0.4965986394557823
User 102779 does not improve AUC. Reverting changes.
Training on augumented user 125339 6/50 current_auc = 0.4965986394557823
User 125339 AUC after training: 0.4965986394557823
User 125339 does not improve AUC. Reverting changes.
Training on augumented user 21865 7/50 current_auc = 0.4965986394557823
User 21865 AUC after training: 0.4965986394557823
User 21865 does not improve AUC. Reverting changes.
Training on augumented user 116338 8/50 current_auc = 0.4965986394557823
User 116338 AUC after training: 0.48299319727891155
User 116338 does not improve AUC. Reverting changes.
Training on augumented user 6249 9/50 current_auc = 0.4965986394557823
User 6249 AUC after training: 0.48299319727891155
User 6249 does not improve AUC. Reverting changes.
Training on augumented user 77396 10/50 current_auc = 0.4965986394557823
User 77396 AUC after training: 0.4897959183673469
User 77396 does not improve AUC. Reverting changes.
Training on augumented user 89970 11/50 current_auc = 0.4965986394557823
User 89970 AUC after training: 0.4965986394557823
User 89970 does not improve AUC. Reverting changes.
Training on augumented user 30120 12/50 current_auc = 0.4965986394557823
User 30120 AUC after training: 0.5034013605442176
User 30120 improves AUC. Keeping the model.
Training on augumented user 27669 13/50 current_auc = 0.5034013605442176
User 27669 AUC after training: 0.5170068027210883
User 27669 improves AUC. Keeping the model.
Training on augumented user 101387 14/50 current_auc = 0.5170068027210883
User 101387 AUC after training: 0.5034013605442176
User 101387 does not improve AUC. Reverting changes.
Training on augumented user 48267 15/50 current_auc = 0.5170068027210883
User 48267 AUC after training: 0.4965986394557823
User 48267 does not improve AUC. Reverting changes.
Training on augumented user 54637 16/50 current_auc = 0.5170068027210883
User 54637 AUC after training: 0.5034013605442176
User 54637 does not improve AUC. Reverting changes.
Training on augumented user 67354 17/50 current_auc = 0.5170068027210883
User 67354 AUC after training: 0.5034013605442176
User 67354 does not improve AUC. Reverting changes.
Training on augumented user 41410 18/50 current_auc = 0.5170068027210883
User 41410 AUC after training: 0.5034013605442176
User 41410 does not improve AUC. Reverting changes.
Training on augumented user 81211 19/50 current_auc = 0.5170068027210883
User 81211 AUC after training: 0.5034013605442176
User 81211 does not improve AUC. Reverting changes.
Training on augumented user 4171 20/50 current_auc = 0.5170068027210883
User 4171 AUC after training: 0.5170068027210883
User 4171 does not improve AUC. Reverting changes.
Training on augumented user 2817 21/50 current_auc = 0.5170068027210883
User 2817 AUC after training: 0.510204081632653
User 2817 does not improve AUC. Reverting changes.
Training on augumented user 34460 22/50 current_auc = 0.5170068027210883
User 34460 AUC after training: 0.510204081632653
User 34460 does not improve AUC. Reverting changes.
Training on augumented user 111647 23/50 current_auc = 0.5170068027210883
User 111647 AUC after training: 0.5034013605442176
User 111647 does not improve AUC. Reverting changes.
Training on augumented user 93357 24/50 current_auc = 0.5170068027210883
User 93357 AUC after training: 0.5034013605442176
User 93357 does not improve AUC. Reverting changes.
Training on augumented user 81282 25/50 current_auc = 0.5170068027210883
User 81282 AUC after training: 0.4965986394557823
User 81282 does not improve AUC. Reverting changes.
Training on augumented user 10992 26/50 current_auc = 0.5170068027210883
User 10992 AUC after training: 0.5034013605442176
User 10992 does not improve AUC. Reverting changes.
Training on augumented user 138469 27/50 current_auc = 0.5170068027210883
User 138469 AUC after training: 0.5170068027210883
User 138469 does not improve AUC. Reverting changes.
Training on augumented user 42360 28/50 current_auc = 0.5170068027210883
User 42360 AUC after training: 0.5170068027210883
User 42360 does not improve AUC. Reverting changes.
Training on augumented user 80269 29/50 current_auc = 0.5170068027210883
User 80269 AUC after training: 0.5170068027210883
User 80269 does not improve AUC. Reverting changes.
Training on augumented user 42664 30/50 current_auc = 0.5170068027210883
User 42664 AUC after training: 0.4965986394557823
User 42664 does not improve AUC. Reverting changes.
Training on augumented user 4349 31/50 current_auc = 0.5170068027210883
User 4349 AUC after training: 0.5170068027210883
User 4349 does not improve AUC. Reverting changes.
Training on augumented user 121836 32/50 current_auc = 0.5170068027210883
User 121836 AUC after training: 0.5170068027210883
User 121836 does not improve AUC. Reverting changes.
Training on augumented user 12485 33/50 current_auc = 0.5170068027210883
User 12485 AUC after training: 0.510204081632653
User 12485 does not improve AUC. Reverting changes.
Training on augumented user 74162 34/50 current_auc = 0.5170068027210883
User 74162 AUC after training: 0.4965986394557823
User 74162 does not improve AUC. Reverting changes.
Training on augumented user 111617 35/50 current_auc = 0.5170068027210883
User 111617 AUC after training: 0.5170068027210883
User 111617 does not improve AUC. Reverting changes.
Training on augumented user 7721 36/50 current_auc = 0.5170068027210883
User 7721 AUC after training: 0.5170068027210883
User 7721 does not improve AUC. Reverting changes.
Training on augumented user 79521 37/50 current_auc = 0.5170068027210883
User 79521 AUC after training: 0.4965986394557823
User 79521 does not improve AUC. Reverting changes.
Training on augumented user 32332 38/50 current_auc = 0.5170068027210883
User 32332 AUC after training: 0.5170068027210883
User 32332 does not improve AUC. Reverting changes.
Training on augumented user 9249 39/50 current_auc = 0.5170068027210883
User 9249 AUC after training: 0.5170068027210883
User 9249 does not improve AUC. Reverting changes.
Training on augumented user 45337 40/50 current_auc = 0.5170068027210883
User 45337 AUC after training: 0.510204081632653
User 45337 does not improve AUC. Reverting changes.
Training on augumented user 5720 41/50 current_auc = 0.5170068027210883
User 5720 AUC after training: 0.5170068027210883
User 5720 does not improve AUC. Reverting changes.
Training on augumented user 122793 42/50 current_auc = 0.5170068027210883
User 122793 AUC after training: 0.5170068027210883
User 122793 does not improve AUC. Reverting changes.
Training on augumented user 65402 43/50 current_auc = 0.5170068027210883
User 65402 AUC after training: 0.5238095238095237
User 65402 improves AUC. Keeping the model.
Training on augumented user 63996 44/50 current_auc = 0.5238095238095237
User 63996 AUC after training: 0.5238095238095237
User 63996 does not improve AUC. Reverting changes.
Training on augumented user 128981 45/50 current_auc = 0.5238095238095237
User 128981 AUC after training: 0.5238095238095237
User 128981 does not improve AUC. Reverting changes.
Training on augumented user 34850 46/50 current_auc = 0.5238095238095237
User 34850 AUC after training: 0.5238095238095237
User 34850 does not improve AUC. Reverting changes.
Training on augumented user 19951 47/50 current_auc = 0.5238095238095237
User 19951 AUC after training: 0.5238095238095237
User 19951 does not improve AUC. Reverting changes.
Training on augumented user 39920 48/50 current_auc = 0.5238095238095237
User 39920 AUC after training: 0.5238095238095237
User 39920 does not improve AUC. Reverting changes.
Training on augumented user 110576 49/50 current_auc = 0.5238095238095237
User 110576 AUC after training: 0.5238095238095237
User 110576 does not improve AUC. Reverting changes.
[2024-12-02 19:03:57.889421] start test user 99565 153/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:03:58.423552] start test user 99565 153/567 recall augumented users by random, augumented_users = [59368, 47782, 120518, 82735, 5789, 46820, 89047, 103266, 137912, 113551, 52349, 19892, 27314, 81118, 18020, 36892, 51014, 56812, 75099, 4932, 5270, 122171, 109822, 122759, 122519, 116418, 118138, 11057, 48980, 52626, 65960, 101926, 41987, 65390, 70897, 36756, 87085, 87897, 116999, 76836, 58516, 8881, 73965, 26847, 93690, 66020, 130613, 37728, 4446, 126556]
[2024-12-02 19:03:58.438028] user = 99565 Cloud 153/567
[2024-12-02 19:03:58.463050] user = 99565 Local 153/567
[2024-12-02 19:03:58.511905] user = 99565 Local+ 153/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:04:00.834816] user = 99565 MPDA- 153/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.576923076923077
Training on augumented user 59368 0/50 current_auc = 0.576923076923077
User 59368 AUC after training: 0.5865384615384616
User 59368 improves AUC. Keeping the model.
Training on augumented user 47782 1/50 current_auc = 0.5865384615384616
User 47782 AUC after training: 0.5961538461538461
User 47782 improves AUC. Keeping the model.
Training on augumented user 120518 2/50 current_auc = 0.5961538461538461
User 120518 AUC after training: 0.5865384615384616
User 120518 does not improve AUC. Reverting changes.
Training on augumented user 82735 3/50 current_auc = 0.5961538461538461
User 82735 AUC after training: 0.576923076923077
User 82735 does not improve AUC. Reverting changes.
Training on augumented user 5789 4/50 current_auc = 0.5961538461538461
User 5789 AUC after training: 0.5961538461538461
User 5789 does not improve AUC. Reverting changes.
Training on augumented user 46820 5/50 current_auc = 0.5961538461538461
User 46820 AUC after training: 0.576923076923077
User 46820 does not improve AUC. Reverting changes.
Training on augumented user 89047 6/50 current_auc = 0.5961538461538461
User 89047 AUC after training: 0.5961538461538461
User 89047 does not improve AUC. Reverting changes.
Training on augumented user 103266 7/50 current_auc = 0.5961538461538461
User 103266 AUC after training: 0.5961538461538461
User 103266 does not improve AUC. Reverting changes.
Training on augumented user 137912 8/50 current_auc = 0.5961538461538461
User 137912 AUC after training: 0.5865384615384616
User 137912 does not improve AUC. Reverting changes.
Training on augumented user 113551 9/50 current_auc = 0.5961538461538461
User 113551 AUC after training: 0.5961538461538461
User 113551 does not improve AUC. Reverting changes.
Training on augumented user 52349 10/50 current_auc = 0.5961538461538461
User 52349 AUC after training: 0.5961538461538461
User 52349 does not improve AUC. Reverting changes.
Training on augumented user 19892 11/50 current_auc = 0.5961538461538461
User 19892 AUC after training: 0.5961538461538461
User 19892 does not improve AUC. Reverting changes.
Training on augumented user 27314 12/50 current_auc = 0.5961538461538461
User 27314 AUC after training: 0.5961538461538461
User 27314 does not improve AUC. Reverting changes.
Training on augumented user 81118 13/50 current_auc = 0.5961538461538461
User 81118 AUC after training: 0.5961538461538461
User 81118 does not improve AUC. Reverting changes.
Training on augumented user 18020 14/50 current_auc = 0.5961538461538461
User 18020 AUC after training: 0.5865384615384616
User 18020 does not improve AUC. Reverting changes.
Training on augumented user 36892 15/50 current_auc = 0.5961538461538461
User 36892 AUC after training: 0.5961538461538461
User 36892 does not improve AUC. Reverting changes.
Training on augumented user 51014 16/50 current_auc = 0.5961538461538461
User 51014 AUC after training: 0.5961538461538461
User 51014 does not improve AUC. Reverting changes.
Training on augumented user 56812 17/50 current_auc = 0.5961538461538461
User 56812 AUC after training: 0.5961538461538461
User 56812 does not improve AUC. Reverting changes.
Training on augumented user 75099 18/50 current_auc = 0.5961538461538461
User 75099 AUC after training: 0.5961538461538461
User 75099 does not improve AUC. Reverting changes.
Training on augumented user 4932 19/50 current_auc = 0.5961538461538461
User 4932 AUC after training: 0.576923076923077
User 4932 does not improve AUC. Reverting changes.
Training on augumented user 5270 20/50 current_auc = 0.5961538461538461
User 5270 AUC after training: 0.5961538461538461
User 5270 does not improve AUC. Reverting changes.
Training on augumented user 122171 21/50 current_auc = 0.5961538461538461
User 122171 AUC after training: 0.5961538461538461
User 122171 does not improve AUC. Reverting changes.
Training on augumented user 109822 22/50 current_auc = 0.5961538461538461
User 109822 AUC after training: 0.576923076923077
User 109822 does not improve AUC. Reverting changes.
Training on augumented user 122759 23/50 current_auc = 0.5961538461538461
User 122759 AUC after training: 0.5961538461538461
User 122759 does not improve AUC. Reverting changes.
Training on augumented user 122519 24/50 current_auc = 0.5961538461538461
User 122519 AUC after training: 0.5961538461538461
User 122519 does not improve AUC. Reverting changes.
Training on augumented user 116418 25/50 current_auc = 0.5961538461538461
User 116418 AUC after training: 0.5865384615384616
User 116418 does not improve AUC. Reverting changes.
Training on augumented user 118138 26/50 current_auc = 0.5961538461538461
User 118138 AUC after training: 0.5961538461538461
User 118138 does not improve AUC. Reverting changes.
Training on augumented user 11057 27/50 current_auc = 0.5961538461538461
User 11057 AUC after training: 0.5961538461538461
User 11057 does not improve AUC. Reverting changes.
Training on augumented user 48980 28/50 current_auc = 0.5961538461538461
User 48980 AUC after training: 0.576923076923077
User 48980 does not improve AUC. Reverting changes.
Training on augumented user 52626 29/50 current_auc = 0.5961538461538461
User 52626 AUC after training: 0.5865384615384616
User 52626 does not improve AUC. Reverting changes.
Training on augumented user 65960 30/50 current_auc = 0.5961538461538461
User 65960 AUC after training: 0.5961538461538461
User 65960 does not improve AUC. Reverting changes.
Training on augumented user 101926 31/50 current_auc = 0.5961538461538461
User 101926 AUC after training: 0.5961538461538461
User 101926 does not improve AUC. Reverting changes.
Training on augumented user 41987 32/50 current_auc = 0.5961538461538461
User 41987 AUC after training: 0.5865384615384616
User 41987 does not improve AUC. Reverting changes.
Training on augumented user 65390 33/50 current_auc = 0.5961538461538461
User 65390 AUC after training: 0.5961538461538461
User 65390 does not improve AUC. Reverting changes.
Training on augumented user 70897 34/50 current_auc = 0.5961538461538461
User 70897 AUC after training: 0.5961538461538461
User 70897 does not improve AUC. Reverting changes.
Training on augumented user 36756 35/50 current_auc = 0.5961538461538461
User 36756 AUC after training: 0.5961538461538461
User 36756 does not improve AUC. Reverting changes.
Training on augumented user 87085 36/50 current_auc = 0.5961538461538461
User 87085 AUC after training: 0.5961538461538461
User 87085 does not improve AUC. Reverting changes.
Training on augumented user 87897 37/50 current_auc = 0.5961538461538461
User 87897 AUC after training: 0.5961538461538461
User 87897 does not improve AUC. Reverting changes.
Training on augumented user 116999 38/50 current_auc = 0.5961538461538461
User 116999 AUC after training: 0.5961538461538461
User 116999 does not improve AUC. Reverting changes.
Training on augumented user 76836 39/50 current_auc = 0.5961538461538461
User 76836 AUC after training: 0.5961538461538461
User 76836 does not improve AUC. Reverting changes.
Training on augumented user 58516 40/50 current_auc = 0.5961538461538461
User 58516 AUC after training: 0.5961538461538461
User 58516 does not improve AUC. Reverting changes.
Training on augumented user 8881 41/50 current_auc = 0.5961538461538461
User 8881 AUC after training: 0.5865384615384616
User 8881 does not improve AUC. Reverting changes.
Training on augumented user 73965 42/50 current_auc = 0.5961538461538461
User 73965 AUC after training: 0.5865384615384616
User 73965 does not improve AUC. Reverting changes.
Training on augumented user 26847 43/50 current_auc = 0.5961538461538461
User 26847 AUC after training: 0.5865384615384616
User 26847 does not improve AUC. Reverting changes.
Training on augumented user 93690 44/50 current_auc = 0.5961538461538461
User 93690 AUC after training: 0.5865384615384616
User 93690 does not improve AUC. Reverting changes.
Training on augumented user 66020 45/50 current_auc = 0.5961538461538461
User 66020 AUC after training: 0.5961538461538461
User 66020 does not improve AUC. Reverting changes.
Training on augumented user 130613 46/50 current_auc = 0.5961538461538461
User 130613 AUC after training: 0.5961538461538461
User 130613 does not improve AUC. Reverting changes.
Training on augumented user 37728 47/50 current_auc = 0.5961538461538461
User 37728 AUC after training: 0.5961538461538461
User 37728 does not improve AUC. Reverting changes.
Training on augumented user 4446 48/50 current_auc = 0.5961538461538461
User 4446 AUC after training: 0.5865384615384616
User 4446 does not improve AUC. Reverting changes.
Training on augumented user 126556 49/50 current_auc = 0.5961538461538461
User 126556 AUC after training: 0.5865384615384616
User 126556 does not improve AUC. Reverting changes.
[2024-12-02 19:04:32.738999] start test user 99603 154/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:04:33.172858] start test user 99603 154/567 recall augumented users by random, augumented_users = [68959, 13303, 98269, 27727, 134618, 96234, 53179, 73539, 113447, 5613, 70875, 129334, 40123, 110612, 48868, 65246, 62943, 45419, 99096, 56340, 56527, 43214, 115339, 128773, 94762, 115696, 11161, 29043, 125371, 89414, 92486, 1399, 36330, 28010, 61896, 65321, 8747, 19814, 16332, 44404, 56686, 46569, 135273, 58591, 5426, 120821, 11151, 113937, 113261, 103743]
[2024-12-02 19:04:33.187197] user = 99603 Cloud 154/567
[2024-12-02 19:04:33.200861] user = 99603 Local 154/567
[2024-12-02 19:04:33.230967] user = 99603 Local+ 154/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:04:35.913142] user = 99603 MPDA- 154/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8378995433789954
Training on augumented user 68959 0/50 current_auc = 0.8378995433789954
User 68959 AUC after training: 0.8378995433789954
User 68959 does not improve AUC. Reverting changes.
Training on augumented user 13303 1/50 current_auc = 0.8378995433789954
User 13303 AUC after training: 0.8378995433789954
User 13303 does not improve AUC. Reverting changes.
Training on augumented user 98269 2/50 current_auc = 0.8378995433789954
User 98269 AUC after training: 0.8378995433789954
User 98269 does not improve AUC. Reverting changes.
Training on augumented user 27727 3/50 current_auc = 0.8378995433789954
User 27727 AUC after training: 0.8378995433789954
User 27727 does not improve AUC. Reverting changes.
Training on augumented user 134618 4/50 current_auc = 0.8378995433789954
User 134618 AUC after training: 0.8378995433789954
User 134618 does not improve AUC. Reverting changes.
Training on augumented user 96234 5/50 current_auc = 0.8378995433789954
User 96234 AUC after training: 0.8378995433789954
User 96234 does not improve AUC. Reverting changes.
Training on augumented user 53179 6/50 current_auc = 0.8378995433789954
User 53179 AUC after training: 0.8378995433789954
User 53179 does not improve AUC. Reverting changes.
Training on augumented user 73539 7/50 current_auc = 0.8378995433789954
User 73539 AUC after training: 0.8378995433789954
User 73539 does not improve AUC. Reverting changes.
Training on augumented user 113447 8/50 current_auc = 0.8378995433789954
User 113447 AUC after training: 0.8378995433789954
User 113447 does not improve AUC. Reverting changes.
Training on augumented user 5613 9/50 current_auc = 0.8378995433789954
User 5613 AUC after training: 0.8424657534246576
User 5613 improves AUC. Keeping the model.
Training on augumented user 70875 10/50 current_auc = 0.8424657534246576
User 70875 AUC after training: 0.8401826484018264
User 70875 does not improve AUC. Reverting changes.
Training on augumented user 129334 11/50 current_auc = 0.8424657534246576
User 129334 AUC after training: 0.8401826484018265
User 129334 does not improve AUC. Reverting changes.
Training on augumented user 40123 12/50 current_auc = 0.8424657534246576
User 40123 AUC after training: 0.8401826484018264
User 40123 does not improve AUC. Reverting changes.
Training on augumented user 110612 13/50 current_auc = 0.8424657534246576
User 110612 AUC after training: 0.8447488584474886
User 110612 improves AUC. Keeping the model.
Training on augumented user 48868 14/50 current_auc = 0.8447488584474886
User 48868 AUC after training: 0.8447488584474886
User 48868 does not improve AUC. Reverting changes.
Training on augumented user 65246 15/50 current_auc = 0.8447488584474886
User 65246 AUC after training: 0.8447488584474886
User 65246 does not improve AUC. Reverting changes.
Training on augumented user 62943 16/50 current_auc = 0.8447488584474886
User 62943 AUC after training: 0.8447488584474886
User 62943 does not improve AUC. Reverting changes.
Training on augumented user 45419 17/50 current_auc = 0.8447488584474886
User 45419 AUC after training: 0.8447488584474886
User 45419 does not improve AUC. Reverting changes.
Training on augumented user 99096 18/50 current_auc = 0.8447488584474886
User 99096 AUC after training: 0.8447488584474886
User 99096 does not improve AUC. Reverting changes.
Training on augumented user 56340 19/50 current_auc = 0.8447488584474886
User 56340 AUC after training: 0.8447488584474886
User 56340 does not improve AUC. Reverting changes.
Training on augumented user 56527 20/50 current_auc = 0.8447488584474886
User 56527 AUC after training: 0.8447488584474886
User 56527 does not improve AUC. Reverting changes.
Training on augumented user 43214 21/50 current_auc = 0.8447488584474886
User 43214 AUC after training: 0.8424657534246576
User 43214 does not improve AUC. Reverting changes.
Training on augumented user 115339 22/50 current_auc = 0.8447488584474886
User 115339 AUC after training: 0.8424657534246576
User 115339 does not improve AUC. Reverting changes.
Training on augumented user 128773 23/50 current_auc = 0.8447488584474886
User 128773 AUC after training: 0.8424657534246576
User 128773 does not improve AUC. Reverting changes.
Training on augumented user 94762 24/50 current_auc = 0.8447488584474886
User 94762 AUC after training: 0.8447488584474886
User 94762 does not improve AUC. Reverting changes.
Training on augumented user 115696 25/50 current_auc = 0.8447488584474886
User 115696 AUC after training: 0.8424657534246576
User 115696 does not improve AUC. Reverting changes.
Training on augumented user 11161 26/50 current_auc = 0.8447488584474886
User 11161 AUC after training: 0.8447488584474886
User 11161 does not improve AUC. Reverting changes.
Training on augumented user 29043 27/50 current_auc = 0.8447488584474886
User 29043 AUC after training: 0.8424657534246576
User 29043 does not improve AUC. Reverting changes.
Training on augumented user 125371 28/50 current_auc = 0.8447488584474886
User 125371 AUC after training: 0.8447488584474886
User 125371 does not improve AUC. Reverting changes.
Training on augumented user 89414 29/50 current_auc = 0.8447488584474886
User 89414 AUC after training: 0.8447488584474886
User 89414 does not improve AUC. Reverting changes.
Training on augumented user 92486 30/50 current_auc = 0.8447488584474886
User 92486 AUC after training: 0.8447488584474886
User 92486 does not improve AUC. Reverting changes.
Training on augumented user 1399 31/50 current_auc = 0.8447488584474886
User 1399 AUC after training: 0.8447488584474886
User 1399 does not improve AUC. Reverting changes.
Training on augumented user 36330 32/50 current_auc = 0.8447488584474886
User 36330 AUC after training: 0.8447488584474886
User 36330 does not improve AUC. Reverting changes.
Training on augumented user 28010 33/50 current_auc = 0.8447488584474886
User 28010 AUC after training: 0.8447488584474886
User 28010 does not improve AUC. Reverting changes.
Training on augumented user 61896 34/50 current_auc = 0.8447488584474886
User 61896 AUC after training: 0.8447488584474886
User 61896 does not improve AUC. Reverting changes.
Training on augumented user 65321 35/50 current_auc = 0.8447488584474886
User 65321 AUC after training: 0.8447488584474886
User 65321 does not improve AUC. Reverting changes.
Training on augumented user 8747 36/50 current_auc = 0.8447488584474886
User 8747 AUC after training: 0.8447488584474886
User 8747 does not improve AUC. Reverting changes.
Training on augumented user 19814 37/50 current_auc = 0.8447488584474886
User 19814 AUC after training: 0.8447488584474886
User 19814 does not improve AUC. Reverting changes.
Training on augumented user 16332 38/50 current_auc = 0.8447488584474886
User 16332 AUC after training: 0.8447488584474886
User 16332 does not improve AUC. Reverting changes.
Training on augumented user 44404 39/50 current_auc = 0.8447488584474886
User 44404 AUC after training: 0.8447488584474886
User 44404 does not improve AUC. Reverting changes.
Training on augumented user 56686 40/50 current_auc = 0.8447488584474886
User 56686 AUC after training: 0.8447488584474886
User 56686 does not improve AUC. Reverting changes.
Training on augumented user 46569 41/50 current_auc = 0.8447488584474886
User 46569 AUC after training: 0.8424657534246576
User 46569 does not improve AUC. Reverting changes.
Training on augumented user 135273 42/50 current_auc = 0.8447488584474886
User 135273 AUC after training: 0.8447488584474886
User 135273 does not improve AUC. Reverting changes.
Training on augumented user 58591 43/50 current_auc = 0.8447488584474886
User 58591 AUC after training: 0.8447488584474886
User 58591 does not improve AUC. Reverting changes.
Training on augumented user 5426 44/50 current_auc = 0.8447488584474886
User 5426 AUC after training: 0.8447488584474886
User 5426 does not improve AUC. Reverting changes.
Training on augumented user 120821 45/50 current_auc = 0.8447488584474886
User 120821 AUC after training: 0.8447488584474886
User 120821 does not improve AUC. Reverting changes.
Training on augumented user 11151 46/50 current_auc = 0.8447488584474886
User 11151 AUC after training: 0.8447488584474886
User 11151 does not improve AUC. Reverting changes.
Training on augumented user 113937 47/50 current_auc = 0.8447488584474886
User 113937 AUC after training: 0.8447488584474886
User 113937 does not improve AUC. Reverting changes.
Training on augumented user 113261 48/50 current_auc = 0.8447488584474886
User 113261 AUC after training: 0.8447488584474886
User 113261 does not improve AUC. Reverting changes.
Training on augumented user 103743 49/50 current_auc = 0.8447488584474886
User 103743 AUC after training: 0.8447488584474886
User 103743 does not improve AUC. Reverting changes.
[2024-12-02 19:05:05.089621] start test user 99674 155/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:05:05.609359] start test user 99674 155/567 recall augumented users by random, augumented_users = [127428, 135761, 94013, 21796, 50998, 123849, 120734, 57295, 13890, 36790, 59779, 23845, 84239, 68730, 4162, 21606, 87516, 73041, 81056, 25823, 98841, 57071, 38173, 57609, 92064, 40868, 89751, 57959, 102255, 118701, 31867, 22858, 78334, 29655, 99469, 79144, 133272, 80374, 109387, 133909, 102022, 12424, 113907, 136860, 75629, 84181, 28091, 87511, 92040, 54034]
[2024-12-02 19:05:05.625729] user = 99674 Cloud 155/567
[2024-12-02 19:05:05.636751] user = 99674 Local 155/567
[2024-12-02 19:05:05.677668] user = 99674 Local+ 155/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:05:09.416848] user = 99674 MPDA- 155/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4814814814814815
Training on augumented user 127428 0/50 current_auc = 0.4814814814814815
User 127428 AUC after training: 0.5
User 127428 improves AUC. Keeping the model.
Training on augumented user 135761 1/50 current_auc = 0.5
User 135761 AUC after training: 0.5185185185185186
User 135761 improves AUC. Keeping the model.
Training on augumented user 94013 2/50 current_auc = 0.5185185185185186
User 94013 AUC after training: 0.462962962962963
User 94013 does not improve AUC. Reverting changes.
Training on augumented user 21796 3/50 current_auc = 0.5185185185185186
User 21796 AUC after training: 0.4814814814814815
User 21796 does not improve AUC. Reverting changes.
Training on augumented user 50998 4/50 current_auc = 0.5185185185185186
User 50998 AUC after training: 0.5
User 50998 does not improve AUC. Reverting changes.
Training on augumented user 123849 5/50 current_auc = 0.5185185185185186
User 123849 AUC after training: 0.5
User 123849 does not improve AUC. Reverting changes.
Training on augumented user 120734 6/50 current_auc = 0.5185185185185186
User 120734 AUC after training: 0.4814814814814815
User 120734 does not improve AUC. Reverting changes.
Training on augumented user 57295 7/50 current_auc = 0.5185185185185186
User 57295 AUC after training: 0.4814814814814815
User 57295 does not improve AUC. Reverting changes.
Training on augumented user 13890 8/50 current_auc = 0.5185185185185186
User 13890 AUC after training: 0.5
User 13890 does not improve AUC. Reverting changes.
Training on augumented user 36790 9/50 current_auc = 0.5185185185185186
User 36790 AUC after training: 0.4814814814814815
User 36790 does not improve AUC. Reverting changes.
Training on augumented user 59779 10/50 current_auc = 0.5185185185185186
User 59779 AUC after training: 0.4814814814814815
User 59779 does not improve AUC. Reverting changes.
Training on augumented user 23845 11/50 current_auc = 0.5185185185185186
User 23845 AUC after training: 0.4814814814814815
User 23845 does not improve AUC. Reverting changes.
Training on augumented user 84239 12/50 current_auc = 0.5185185185185186
User 84239 AUC after training: 0.4814814814814815
User 84239 does not improve AUC. Reverting changes.
Training on augumented user 68730 13/50 current_auc = 0.5185185185185186
User 68730 AUC after training: 0.4814814814814815
User 68730 does not improve AUC. Reverting changes.
Training on augumented user 4162 14/50 current_auc = 0.5185185185185186
User 4162 AUC after training: 0.4814814814814815
User 4162 does not improve AUC. Reverting changes.
Training on augumented user 21606 15/50 current_auc = 0.5185185185185186
User 21606 AUC after training: 0.5370370370370371
User 21606 improves AUC. Keeping the model.
Training on augumented user 87516 16/50 current_auc = 0.5370370370370371
User 87516 AUC after training: 0.5185185185185186
User 87516 does not improve AUC. Reverting changes.
Training on augumented user 73041 17/50 current_auc = 0.5370370370370371
User 73041 AUC after training: 0.5370370370370371
User 73041 does not improve AUC. Reverting changes.
Training on augumented user 81056 18/50 current_auc = 0.5370370370370371
User 81056 AUC after training: 0.5185185185185186
User 81056 does not improve AUC. Reverting changes.
Training on augumented user 25823 19/50 current_auc = 0.5370370370370371
User 25823 AUC after training: 0.5370370370370371
User 25823 does not improve AUC. Reverting changes.
Training on augumented user 98841 20/50 current_auc = 0.5370370370370371
User 98841 AUC after training: 0.4814814814814815
User 98841 does not improve AUC. Reverting changes.
Training on augumented user 57071 21/50 current_auc = 0.5370370370370371
User 57071 AUC after training: 0.5
User 57071 does not improve AUC. Reverting changes.
Training on augumented user 38173 22/50 current_auc = 0.5370370370370371
User 38173 AUC after training: 0.5370370370370371
User 38173 does not improve AUC. Reverting changes.
Training on augumented user 57609 23/50 current_auc = 0.5370370370370371
User 57609 AUC after training: 0.5
User 57609 does not improve AUC. Reverting changes.
Training on augumented user 92064 24/50 current_auc = 0.5370370370370371
User 92064 AUC after training: 0.5185185185185186
User 92064 does not improve AUC. Reverting changes.
Training on augumented user 40868 25/50 current_auc = 0.5370370370370371
User 40868 AUC after training: 0.5
User 40868 does not improve AUC. Reverting changes.
Training on augumented user 89751 26/50 current_auc = 0.5370370370370371
User 89751 AUC after training: 0.4814814814814815
User 89751 does not improve AUC. Reverting changes.
Training on augumented user 57959 27/50 current_auc = 0.5370370370370371
User 57959 AUC after training: 0.4444444444444445
User 57959 does not improve AUC. Reverting changes.
Training on augumented user 102255 28/50 current_auc = 0.5370370370370371
User 102255 AUC after training: 0.5185185185185186
User 102255 does not improve AUC. Reverting changes.
Training on augumented user 118701 29/50 current_auc = 0.5370370370370371
User 118701 AUC after training: 0.4814814814814815
User 118701 does not improve AUC. Reverting changes.
Training on augumented user 31867 30/50 current_auc = 0.5370370370370371
User 31867 AUC after training: 0.5370370370370371
User 31867 does not improve AUC. Reverting changes.
Training on augumented user 22858 31/50 current_auc = 0.5370370370370371
User 22858 AUC after training: 0.4814814814814815
User 22858 does not improve AUC. Reverting changes.
Training on augumented user 78334 32/50 current_auc = 0.5370370370370371
User 78334 AUC after training: 0.5
User 78334 does not improve AUC. Reverting changes.
Training on augumented user 29655 33/50 current_auc = 0.5370370370370371
User 29655 AUC after training: 0.5
User 29655 does not improve AUC. Reverting changes.
Training on augumented user 99469 34/50 current_auc = 0.5370370370370371
User 99469 AUC after training: 0.4814814814814815
User 99469 does not improve AUC. Reverting changes.
Training on augumented user 79144 35/50 current_auc = 0.5370370370370371
User 79144 AUC after training: 0.5370370370370371
User 79144 does not improve AUC. Reverting changes.
Training on augumented user 133272 36/50 current_auc = 0.5370370370370371
User 133272 AUC after training: 0.4814814814814815
User 133272 does not improve AUC. Reverting changes.
Training on augumented user 80374 37/50 current_auc = 0.5370370370370371
User 80374 AUC after training: 0.5370370370370371
User 80374 does not improve AUC. Reverting changes.
Training on augumented user 109387 38/50 current_auc = 0.5370370370370371
User 109387 AUC after training: 0.5185185185185186
User 109387 does not improve AUC. Reverting changes.
Training on augumented user 133909 39/50 current_auc = 0.5370370370370371
User 133909 AUC after training: 0.4814814814814815
User 133909 does not improve AUC. Reverting changes.
Training on augumented user 102022 40/50 current_auc = 0.5370370370370371
User 102022 AUC after training: 0.5370370370370371
User 102022 does not improve AUC. Reverting changes.
Training on augumented user 12424 41/50 current_auc = 0.5370370370370371
User 12424 AUC after training: 0.4814814814814815
User 12424 does not improve AUC. Reverting changes.
Training on augumented user 113907 42/50 current_auc = 0.5370370370370371
User 113907 AUC after training: 0.4814814814814815
User 113907 does not improve AUC. Reverting changes.
Training on augumented user 136860 43/50 current_auc = 0.5370370370370371
User 136860 AUC after training: 0.4814814814814815
User 136860 does not improve AUC. Reverting changes.
Training on augumented user 75629 44/50 current_auc = 0.5370370370370371
User 75629 AUC after training: 0.4814814814814815
User 75629 does not improve AUC. Reverting changes.
Training on augumented user 84181 45/50 current_auc = 0.5370370370370371
User 84181 AUC after training: 0.4814814814814815
User 84181 does not improve AUC. Reverting changes.
Training on augumented user 28091 46/50 current_auc = 0.5370370370370371
User 28091 AUC after training: 0.5185185185185186
User 28091 does not improve AUC. Reverting changes.
Training on augumented user 87511 47/50 current_auc = 0.5370370370370371
User 87511 AUC after training: 0.5185185185185186
User 87511 does not improve AUC. Reverting changes.
Training on augumented user 92040 48/50 current_auc = 0.5370370370370371
User 92040 AUC after training: 0.5
User 92040 does not improve AUC. Reverting changes.
Training on augumented user 54034 49/50 current_auc = 0.5370370370370371
User 54034 AUC after training: 0.5185185185185186
User 54034 does not improve AUC. Reverting changes.
[2024-12-02 19:05:40.797405] start test user 99706 156/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:05:41.264330] start test user 99706 156/567 recall augumented users by random, augumented_users = [62808, 13622, 85801, 71690, 120425, 44622, 135607, 26043, 102578, 8605, 135825, 21593, 50475, 94322, 58504, 93148, 47267, 51210, 23405, 9178, 76230, 118949, 36298, 83029, 18700, 49383, 90625, 56338, 63447, 66641, 57443, 84582, 107966, 47538, 87568, 36486, 108602, 66270, 7743, 28744, 124043, 76866, 59667, 55514, 51651, 101403, 63402, 83963, 67216, 81930]
[2024-12-02 19:05:41.287262] user = 99706 Cloud 156/567
[2024-12-02 19:05:41.315553] user = 99706 Local 156/567
[2024-12-02 19:05:41.417480] user = 99706 Local+ 156/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:05:44.329687] user = 99706 MPDA- 156/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6868432114333753
Training on augumented user 62808 0/50 current_auc = 0.6868432114333753
User 62808 AUC after training: 0.6872635561160151
User 62808 improves AUC. Keeping the model.
Training on augumented user 13622 1/50 current_auc = 0.6872635561160151
User 13622 AUC after training: 0.6846364018495166
User 13622 does not improve AUC. Reverting changes.
Training on augumented user 85801 2/50 current_auc = 0.6872635561160151
User 85801 AUC after training: 0.6871584699453552
User 85801 does not improve AUC. Reverting changes.
Training on augumented user 71690 3/50 current_auc = 0.6872635561160151
User 71690 AUC after training: 0.6871584699453551
User 71690 does not improve AUC. Reverting changes.
Training on augumented user 120425 4/50 current_auc = 0.6872635561160151
User 120425 AUC after training: 0.685687263556116
User 120425 does not improve AUC. Reverting changes.
Training on augumented user 44622 5/50 current_auc = 0.6872635561160151
User 44622 AUC after training: 0.6871584699453552
User 44622 does not improve AUC. Reverting changes.
Training on augumented user 135607 6/50 current_auc = 0.6872635561160151
User 135607 AUC after training: 0.6869482976040353
User 135607 does not improve AUC. Reverting changes.
Training on augumented user 26043 7/50 current_auc = 0.6872635561160151
User 26043 AUC after training: 0.6860025220680958
User 26043 does not improve AUC. Reverting changes.
Training on augumented user 102578 8/50 current_auc = 0.6872635561160151
User 102578 AUC after training: 0.6858974358974359
User 102578 does not improve AUC. Reverting changes.
Training on augumented user 8605 9/50 current_auc = 0.6872635561160151
User 8605 AUC after training: 0.6865279529213956
User 8605 does not improve AUC. Reverting changes.
Training on augumented user 135825 10/50 current_auc = 0.6872635561160151
User 135825 AUC after training: 0.6868432114333753
User 135825 does not improve AUC. Reverting changes.
Training on augumented user 21593 11/50 current_auc = 0.6872635561160151
User 21593 AUC after training: 0.6871584699453551
User 21593 does not improve AUC. Reverting changes.
Training on augumented user 50475 12/50 current_auc = 0.6872635561160151
User 50475 AUC after training: 0.6869482976040353
User 50475 does not improve AUC. Reverting changes.
Training on augumented user 94322 13/50 current_auc = 0.6872635561160151
User 94322 AUC after training: 0.6866330390920555
User 94322 does not improve AUC. Reverting changes.
Training on augumented user 58504 14/50 current_auc = 0.6872635561160151
User 58504 AUC after training: 0.6870533837746953
User 58504 does not improve AUC. Reverting changes.
Training on augumented user 93148 15/50 current_auc = 0.6872635561160151
User 93148 AUC after training: 0.6867381252627155
User 93148 does not improve AUC. Reverting changes.
Training on augumented user 47267 16/50 current_auc = 0.6872635561160151
User 47267 AUC after training: 0.6865279529213956
User 47267 does not improve AUC. Reverting changes.
Training on augumented user 51210 17/50 current_auc = 0.6872635561160151
User 51210 AUC after training: 0.6865279529213956
User 51210 does not improve AUC. Reverting changes.
Training on augumented user 23405 18/50 current_auc = 0.6872635561160151
User 23405 AUC after training: 0.6869482976040353
User 23405 does not improve AUC. Reverting changes.
Training on augumented user 9178 19/50 current_auc = 0.6872635561160151
User 9178 AUC after training: 0.687368642286675
User 9178 improves AUC. Keeping the model.
Training on augumented user 76230 20/50 current_auc = 0.687368642286675
User 76230 AUC after training: 0.6868432114333753
User 76230 does not improve AUC. Reverting changes.
Training on augumented user 118949 21/50 current_auc = 0.687368642286675
User 118949 AUC after training: 0.687473728457335
User 118949 improves AUC. Keeping the model.
Training on augumented user 36298 22/50 current_auc = 0.687473728457335
User 36298 AUC after training: 0.6871584699453552
User 36298 does not improve AUC. Reverting changes.
Training on augumented user 83029 23/50 current_auc = 0.687473728457335
User 83029 AUC after training: 0.6876839007986549
User 83029 improves AUC. Keeping the model.
Training on augumented user 18700 24/50 current_auc = 0.6876839007986549
User 18700 AUC after training: 0.6869482976040352
User 18700 does not improve AUC. Reverting changes.
Training on augumented user 49383 25/50 current_auc = 0.6876839007986549
User 49383 AUC after training: 0.6871584699453552
User 49383 does not improve AUC. Reverting changes.
Training on augumented user 90625 26/50 current_auc = 0.6876839007986549
User 90625 AUC after training: 0.687473728457335
User 90625 does not improve AUC. Reverting changes.
Training on augumented user 56338 27/50 current_auc = 0.6876839007986549
User 56338 AUC after training: 0.6868432114333753
User 56338 does not improve AUC. Reverting changes.
Training on augumented user 63447 28/50 current_auc = 0.6876839007986549
User 63447 AUC after training: 0.6869482976040353
User 63447 does not improve AUC. Reverting changes.
Training on augumented user 66641 29/50 current_auc = 0.6876839007986549
User 66641 AUC after training: 0.687368642286675
User 66641 does not improve AUC. Reverting changes.
Training on augumented user 57443 30/50 current_auc = 0.6876839007986549
User 57443 AUC after training: 0.6875788146279949
User 57443 does not improve AUC. Reverting changes.
Training on augumented user 84582 31/50 current_auc = 0.6876839007986549
User 84582 AUC after training: 0.685687263556116
User 84582 does not improve AUC. Reverting changes.
Training on augumented user 107966 32/50 current_auc = 0.6876839007986549
User 107966 AUC after training: 0.685477091214796
User 107966 does not improve AUC. Reverting changes.
Training on augumented user 47538 33/50 current_auc = 0.6876839007986549
User 47538 AUC after training: 0.687578814627995
User 47538 does not improve AUC. Reverting changes.
Training on augumented user 87568 34/50 current_auc = 0.6876839007986549
User 87568 AUC after training: 0.6865279529213956
User 87568 does not improve AUC. Reverting changes.
Training on augumented user 36486 35/50 current_auc = 0.6876839007986549
User 36486 AUC after training: 0.6858974358974358
User 36486 does not improve AUC. Reverting changes.
Training on augumented user 108602 36/50 current_auc = 0.6876839007986549
User 108602 AUC after training: 0.6871584699453552
User 108602 does not improve AUC. Reverting changes.
Training on augumented user 66270 37/50 current_auc = 0.6876839007986549
User 66270 AUC after training: 0.6863177805800756
User 66270 does not improve AUC. Reverting changes.
Training on augumented user 7743 38/50 current_auc = 0.6876839007986549
User 7743 AUC after training: 0.6866330390920555
User 7743 does not improve AUC. Reverting changes.
Training on augumented user 28744 39/50 current_auc = 0.6876839007986549
User 28744 AUC after training: 0.6851618327028163
User 28744 does not improve AUC. Reverting changes.
Training on augumented user 124043 40/50 current_auc = 0.6876839007986549
User 124043 AUC after training: 0.687368642286675
User 124043 does not improve AUC. Reverting changes.
Training on augumented user 76866 41/50 current_auc = 0.6876839007986549
User 76866 AUC after training: 0.685687263556116
User 76866 does not improve AUC. Reverting changes.
Training on augumented user 59667 42/50 current_auc = 0.6876839007986549
User 59667 AUC after training: 0.6875788146279949
User 59667 does not improve AUC. Reverting changes.
Training on augumented user 55514 43/50 current_auc = 0.6876839007986549
User 55514 AUC after training: 0.6858974358974359
User 55514 does not improve AUC. Reverting changes.
Training on augumented user 51651 44/50 current_auc = 0.6876839007986549
User 51651 AUC after training: 0.6872635561160152
User 51651 does not improve AUC. Reverting changes.
Training on augumented user 101403 45/50 current_auc = 0.6876839007986549
User 101403 AUC after training: 0.687473728457335
User 101403 does not improve AUC. Reverting changes.
Training on augumented user 63402 46/50 current_auc = 0.6876839007986549
User 63402 AUC after training: 0.6869482976040353
User 63402 does not improve AUC. Reverting changes.
Training on augumented user 83963 47/50 current_auc = 0.6876839007986549
User 83963 AUC after training: 0.6872635561160151
User 83963 does not improve AUC. Reverting changes.
Training on augumented user 67216 48/50 current_auc = 0.6876839007986549
User 67216 AUC after training: 0.6875788146279949
User 67216 does not improve AUC. Reverting changes.
Training on augumented user 81930 49/50 current_auc = 0.6876839007986549
User 81930 AUC after training: 0.6869482976040352
User 81930 does not improve AUC. Reverting changes.
[2024-12-02 19:06:12.695477] start test user 99711 157/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:06:13.105133] start test user 99711 157/567 recall augumented users by random, augumented_users = [64640, 9052, 42435, 8733, 46238, 71218, 81380, 46468, 24643, 130869, 132262, 101578, 112844, 58196, 75953, 12236, 110042, 103417, 91310, 115150, 29873, 77940, 51805, 125989, 2794, 138167, 104740, 134047, 85451, 24073, 80681, 87735, 70155, 132922, 14155, 115561, 119842, 128409, 8160, 33455, 122773, 71765, 74619, 111476, 47006, 33845, 78845, 136879, 6873, 113051]
[2024-12-02 19:06:13.120928] user = 99711 Cloud 157/567
[2024-12-02 19:06:13.132340] user = 99711 Local 157/567
[2024-12-02 19:06:13.220972] user = 99711 Local+ 157/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:06:16.291705] user = 99711 MPDA- 157/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.35842293906810035
Training on augumented user 64640 0/50 current_auc = 0.35842293906810035
User 64640 AUC after training: 0.35842293906810035
User 64640 does not improve AUC. Reverting changes.
Training on augumented user 9052 1/50 current_auc = 0.35842293906810035
User 9052 AUC after training: 0.35842293906810035
User 9052 does not improve AUC. Reverting changes.
Training on augumented user 42435 2/50 current_auc = 0.35842293906810035
User 42435 AUC after training: 0.35842293906810035
User 42435 does not improve AUC. Reverting changes.
Training on augumented user 8733 3/50 current_auc = 0.35842293906810035
User 8733 AUC after training: 0.35842293906810035
User 8733 does not improve AUC. Reverting changes.
Training on augumented user 46238 4/50 current_auc = 0.35842293906810035
User 46238 AUC after training: 0.35842293906810035
User 46238 does not improve AUC. Reverting changes.
Training on augumented user 71218 5/50 current_auc = 0.35842293906810035
User 71218 AUC after training: 0.35842293906810035
User 71218 does not improve AUC. Reverting changes.
Training on augumented user 81380 6/50 current_auc = 0.35842293906810035
User 81380 AUC after training: 0.35842293906810035
User 81380 does not improve AUC. Reverting changes.
Training on augumented user 46468 7/50 current_auc = 0.35842293906810035
User 46468 AUC after training: 0.35842293906810035
User 46468 does not improve AUC. Reverting changes.
Training on augumented user 24643 8/50 current_auc = 0.35842293906810035
User 24643 AUC after training: 0.3548387096774194
User 24643 does not improve AUC. Reverting changes.
Training on augumented user 130869 9/50 current_auc = 0.35842293906810035
User 130869 AUC after training: 0.35842293906810035
User 130869 does not improve AUC. Reverting changes.
Training on augumented user 132262 10/50 current_auc = 0.35842293906810035
User 132262 AUC after training: 0.35842293906810035
User 132262 does not improve AUC. Reverting changes.
Training on augumented user 101578 11/50 current_auc = 0.35842293906810035
User 101578 AUC after training: 0.35842293906810035
User 101578 does not improve AUC. Reverting changes.
Training on augumented user 112844 12/50 current_auc = 0.35842293906810035
User 112844 AUC after training: 0.35842293906810035
User 112844 does not improve AUC. Reverting changes.
Training on augumented user 58196 13/50 current_auc = 0.35842293906810035
User 58196 AUC after training: 0.35842293906810035
User 58196 does not improve AUC. Reverting changes.
Training on augumented user 75953 14/50 current_auc = 0.35842293906810035
User 75953 AUC after training: 0.35842293906810035
User 75953 does not improve AUC. Reverting changes.
Training on augumented user 12236 15/50 current_auc = 0.35842293906810035
User 12236 AUC after training: 0.35842293906810035
User 12236 does not improve AUC. Reverting changes.
Training on augumented user 110042 16/50 current_auc = 0.35842293906810035
User 110042 AUC after training: 0.35842293906810035
User 110042 does not improve AUC. Reverting changes.
Training on augumented user 103417 17/50 current_auc = 0.35842293906810035
User 103417 AUC after training: 0.35842293906810035
User 103417 does not improve AUC. Reverting changes.
Training on augumented user 91310 18/50 current_auc = 0.35842293906810035
User 91310 AUC after training: 0.35842293906810035
User 91310 does not improve AUC. Reverting changes.
Training on augumented user 115150 19/50 current_auc = 0.35842293906810035
User 115150 AUC after training: 0.35842293906810035
User 115150 does not improve AUC. Reverting changes.
Training on augumented user 29873 20/50 current_auc = 0.35842293906810035
User 29873 AUC after training: 0.35842293906810035
User 29873 does not improve AUC. Reverting changes.
Training on augumented user 77940 21/50 current_auc = 0.35842293906810035
User 77940 AUC after training: 0.35842293906810035
User 77940 does not improve AUC. Reverting changes.
Training on augumented user 51805 22/50 current_auc = 0.35842293906810035
User 51805 AUC after training: 0.35842293906810035
User 51805 does not improve AUC. Reverting changes.
Training on augumented user 125989 23/50 current_auc = 0.35842293906810035
User 125989 AUC after training: 0.3548387096774194
User 125989 does not improve AUC. Reverting changes.
Training on augumented user 2794 24/50 current_auc = 0.35842293906810035
User 2794 AUC after training: 0.35842293906810035
User 2794 does not improve AUC. Reverting changes.
Training on augumented user 138167 25/50 current_auc = 0.35842293906810035
User 138167 AUC after training: 0.35842293906810035
User 138167 does not improve AUC. Reverting changes.
Training on augumented user 104740 26/50 current_auc = 0.35842293906810035
User 104740 AUC after training: 0.35842293906810035
User 104740 does not improve AUC. Reverting changes.
Training on augumented user 134047 27/50 current_auc = 0.35842293906810035
User 134047 AUC after training: 0.35842293906810035
User 134047 does not improve AUC. Reverting changes.
Training on augumented user 85451 28/50 current_auc = 0.35842293906810035
User 85451 AUC after training: 0.35842293906810035
User 85451 does not improve AUC. Reverting changes.
Training on augumented user 24073 29/50 current_auc = 0.35842293906810035
User 24073 AUC after training: 0.35842293906810035
User 24073 does not improve AUC. Reverting changes.
Training on augumented user 80681 30/50 current_auc = 0.35842293906810035
User 80681 AUC after training: 0.3548387096774194
User 80681 does not improve AUC. Reverting changes.
Training on augumented user 87735 31/50 current_auc = 0.35842293906810035
User 87735 AUC after training: 0.3548387096774194
User 87735 does not improve AUC. Reverting changes.
Training on augumented user 70155 32/50 current_auc = 0.35842293906810035
User 70155 AUC after training: 0.35842293906810035
User 70155 does not improve AUC. Reverting changes.
Training on augumented user 132922 33/50 current_auc = 0.35842293906810035
User 132922 AUC after training: 0.35842293906810035
User 132922 does not improve AUC. Reverting changes.
Training on augumented user 14155 34/50 current_auc = 0.35842293906810035
User 14155 AUC after training: 0.35842293906810035
User 14155 does not improve AUC. Reverting changes.
Training on augumented user 115561 35/50 current_auc = 0.35842293906810035
User 115561 AUC after training: 0.35842293906810035
User 115561 does not improve AUC. Reverting changes.
Training on augumented user 119842 36/50 current_auc = 0.35842293906810035
User 119842 AUC after training: 0.3476702508960573
User 119842 does not improve AUC. Reverting changes.
Training on augumented user 128409 37/50 current_auc = 0.35842293906810035
User 128409 AUC after training: 0.35842293906810035
User 128409 does not improve AUC. Reverting changes.
Training on augumented user 8160 38/50 current_auc = 0.35842293906810035
User 8160 AUC after training: 0.35842293906810035
User 8160 does not improve AUC. Reverting changes.
Training on augumented user 33455 39/50 current_auc = 0.35842293906810035
User 33455 AUC after training: 0.3548387096774194
User 33455 does not improve AUC. Reverting changes.
Training on augumented user 122773 40/50 current_auc = 0.35842293906810035
User 122773 AUC after training: 0.35842293906810035
User 122773 does not improve AUC. Reverting changes.
Training on augumented user 71765 41/50 current_auc = 0.35842293906810035
User 71765 AUC after training: 0.35842293906810035
User 71765 does not improve AUC. Reverting changes.
Training on augumented user 74619 42/50 current_auc = 0.35842293906810035
User 74619 AUC after training: 0.35842293906810035
User 74619 does not improve AUC. Reverting changes.
Training on augumented user 111476 43/50 current_auc = 0.35842293906810035
User 111476 AUC after training: 0.35842293906810035
User 111476 does not improve AUC. Reverting changes.
Training on augumented user 47006 44/50 current_auc = 0.35842293906810035
User 47006 AUC after training: 0.35842293906810035
User 47006 does not improve AUC. Reverting changes.
Training on augumented user 33845 45/50 current_auc = 0.35842293906810035
User 33845 AUC after training: 0.35842293906810035
User 33845 does not improve AUC. Reverting changes.
Training on augumented user 78845 46/50 current_auc = 0.35842293906810035
User 78845 AUC after training: 0.35842293906810035
User 78845 does not improve AUC. Reverting changes.
Training on augumented user 136879 47/50 current_auc = 0.35842293906810035
User 136879 AUC after training: 0.3548387096774194
User 136879 does not improve AUC. Reverting changes.
Training on augumented user 6873 48/50 current_auc = 0.35842293906810035
User 6873 AUC after training: 0.34408602150537637
User 6873 does not improve AUC. Reverting changes.
Training on augumented user 113051 49/50 current_auc = 0.35842293906810035
User 113051 AUC after training: 0.35842293906810035
User 113051 does not improve AUC. Reverting changes.
[2024-12-02 19:06:48.804396] start test user 99712 158/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:06:49.521435] start test user 99712 158/567 recall augumented users by random, augumented_users = [48524, 10741, 114052, 92695, 65801, 58652, 6963, 23016, 19509, 34203, 86671, 109631, 66551, 115564, 132433, 44113, 92659, 2643, 117118, 114151, 86333, 108736, 126083, 72160, 111578, 47996, 14393, 61326, 137873, 40110, 130483, 102408, 61897, 13631, 84558, 7467, 68881, 93799, 108397, 51757, 33171, 4643, 42955, 95305, 73620, 80659, 81236, 112353, 15002, 16816]
[2024-12-02 19:06:49.536444] user = 99712 Cloud 158/567
[2024-12-02 19:06:49.545661] user = 99712 Local 158/567
[2024-12-02 19:06:49.587039] user = 99712 Local+ 158/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:06:52.398665] user = 99712 MPDA- 158/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.0
Training on augumented user 48524 0/50 current_auc = 0.0
User 48524 AUC after training: 0.0
User 48524 does not improve AUC. Reverting changes.
Training on augumented user 10741 1/50 current_auc = 0.0
User 10741 AUC after training: 0.0
User 10741 does not improve AUC. Reverting changes.
Training on augumented user 114052 2/50 current_auc = 0.0
User 114052 AUC after training: 0.0
User 114052 does not improve AUC. Reverting changes.
Training on augumented user 92695 3/50 current_auc = 0.0
User 92695 AUC after training: 0.0
User 92695 does not improve AUC. Reverting changes.
Training on augumented user 65801 4/50 current_auc = 0.0
User 65801 AUC after training: 0.0
User 65801 does not improve AUC. Reverting changes.
Training on augumented user 58652 5/50 current_auc = 0.0
User 58652 AUC after training: 0.0
User 58652 does not improve AUC. Reverting changes.
Training on augumented user 6963 6/50 current_auc = 0.0
User 6963 AUC after training: 0.0
User 6963 does not improve AUC. Reverting changes.
Training on augumented user 23016 7/50 current_auc = 0.0
User 23016 AUC after training: 0.0
User 23016 does not improve AUC. Reverting changes.
Training on augumented user 19509 8/50 current_auc = 0.0
User 19509 AUC after training: 0.0
User 19509 does not improve AUC. Reverting changes.
Training on augumented user 34203 9/50 current_auc = 0.0
User 34203 AUC after training: 0.0
User 34203 does not improve AUC. Reverting changes.
Training on augumented user 86671 10/50 current_auc = 0.0
User 86671 AUC after training: 0.0
User 86671 does not improve AUC. Reverting changes.
Training on augumented user 109631 11/50 current_auc = 0.0
User 109631 AUC after training: 0.0
User 109631 does not improve AUC. Reverting changes.
Training on augumented user 66551 12/50 current_auc = 0.0
User 66551 AUC after training: 0.0
User 66551 does not improve AUC. Reverting changes.
Training on augumented user 115564 13/50 current_auc = 0.0
User 115564 AUC after training: 0.0
User 115564 does not improve AUC. Reverting changes.
Training on augumented user 132433 14/50 current_auc = 0.0
User 132433 AUC after training: 0.0
User 132433 does not improve AUC. Reverting changes.
Training on augumented user 44113 15/50 current_auc = 0.0
User 44113 AUC after training: 0.0
User 44113 does not improve AUC. Reverting changes.
Training on augumented user 92659 16/50 current_auc = 0.0
User 92659 AUC after training: 0.0
User 92659 does not improve AUC. Reverting changes.
Training on augumented user 2643 17/50 current_auc = 0.0
User 2643 AUC after training: 0.0
User 2643 does not improve AUC. Reverting changes.
Training on augumented user 117118 18/50 current_auc = 0.0
User 117118 AUC after training: 0.0
User 117118 does not improve AUC. Reverting changes.
Training on augumented user 114151 19/50 current_auc = 0.0
User 114151 AUC after training: 0.0
User 114151 does not improve AUC. Reverting changes.
Training on augumented user 86333 20/50 current_auc = 0.0
User 86333 AUC after training: 0.0
User 86333 does not improve AUC. Reverting changes.
Training on augumented user 108736 21/50 current_auc = 0.0
User 108736 AUC after training: 0.0
User 108736 does not improve AUC. Reverting changes.
Training on augumented user 126083 22/50 current_auc = 0.0
User 126083 AUC after training: 0.0
User 126083 does not improve AUC. Reverting changes.
Training on augumented user 72160 23/50 current_auc = 0.0
User 72160 AUC after training: 0.0
User 72160 does not improve AUC. Reverting changes.
Training on augumented user 111578 24/50 current_auc = 0.0
User 111578 AUC after training: 0.0
User 111578 does not improve AUC. Reverting changes.
Training on augumented user 47996 25/50 current_auc = 0.0
User 47996 AUC after training: 0.0
User 47996 does not improve AUC. Reverting changes.
Training on augumented user 14393 26/50 current_auc = 0.0
User 14393 AUC after training: 0.0
User 14393 does not improve AUC. Reverting changes.
Training on augumented user 61326 27/50 current_auc = 0.0
User 61326 AUC after training: 0.0
User 61326 does not improve AUC. Reverting changes.
Training on augumented user 137873 28/50 current_auc = 0.0
User 137873 AUC after training: 0.0
User 137873 does not improve AUC. Reverting changes.
Training on augumented user 40110 29/50 current_auc = 0.0
User 40110 AUC after training: 0.0
User 40110 does not improve AUC. Reverting changes.
Training on augumented user 130483 30/50 current_auc = 0.0
User 130483 AUC after training: 0.0
User 130483 does not improve AUC. Reverting changes.
Training on augumented user 102408 31/50 current_auc = 0.0
User 102408 AUC after training: 0.0
User 102408 does not improve AUC. Reverting changes.
Training on augumented user 61897 32/50 current_auc = 0.0
User 61897 AUC after training: 0.0
User 61897 does not improve AUC. Reverting changes.
Training on augumented user 13631 33/50 current_auc = 0.0
User 13631 AUC after training: 0.0
User 13631 does not improve AUC. Reverting changes.
Training on augumented user 84558 34/50 current_auc = 0.0
User 84558 AUC after training: 0.0
User 84558 does not improve AUC. Reverting changes.
Training on augumented user 7467 35/50 current_auc = 0.0
User 7467 AUC after training: 0.0
User 7467 does not improve AUC. Reverting changes.
Training on augumented user 68881 36/50 current_auc = 0.0
User 68881 AUC after training: 0.0
User 68881 does not improve AUC. Reverting changes.
Training on augumented user 93799 37/50 current_auc = 0.0
User 93799 AUC after training: 0.0
User 93799 does not improve AUC. Reverting changes.
Training on augumented user 108397 38/50 current_auc = 0.0
User 108397 AUC after training: 0.0
User 108397 does not improve AUC. Reverting changes.
Training on augumented user 51757 39/50 current_auc = 0.0
User 51757 AUC after training: 0.0
User 51757 does not improve AUC. Reverting changes.
Training on augumented user 33171 40/50 current_auc = 0.0
User 33171 AUC after training: 0.0
User 33171 does not improve AUC. Reverting changes.
Training on augumented user 4643 41/50 current_auc = 0.0
User 4643 AUC after training: 0.0
User 4643 does not improve AUC. Reverting changes.
Training on augumented user 42955 42/50 current_auc = 0.0
User 42955 AUC after training: 0.0
User 42955 does not improve AUC. Reverting changes.
Training on augumented user 95305 43/50 current_auc = 0.0
User 95305 AUC after training: 0.0
User 95305 does not improve AUC. Reverting changes.
Training on augumented user 73620 44/50 current_auc = 0.0
User 73620 AUC after training: 0.0
User 73620 does not improve AUC. Reverting changes.
Training on augumented user 80659 45/50 current_auc = 0.0
User 80659 AUC after training: 0.0
User 80659 does not improve AUC. Reverting changes.
Training on augumented user 81236 46/50 current_auc = 0.0
User 81236 AUC after training: 0.0
User 81236 does not improve AUC. Reverting changes.
Training on augumented user 112353 47/50 current_auc = 0.0
User 112353 AUC after training: 0.0
User 112353 does not improve AUC. Reverting changes.
Training on augumented user 15002 48/50 current_auc = 0.0
User 15002 AUC after training: 0.0
User 15002 does not improve AUC. Reverting changes.
Training on augumented user 16816 49/50 current_auc = 0.0
User 16816 AUC after training: 0.0
User 16816 does not improve AUC. Reverting changes.
[2024-12-02 19:07:22.085447] start test user 99754 159/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:07:22.908450] start test user 99754 159/567 recall augumented users by random, augumented_users = [93901, 49696, 66911, 51391, 118691, 138429, 6276, 71905, 46012, 78679, 95640, 32728, 124049, 35274, 91447, 14600, 8094, 87183, 18343, 73270, 25636, 12670, 33063, 120766, 23855, 25132, 104572, 121801, 73759, 134789, 61623, 98940, 130508, 91644, 31951, 33110, 71162, 47848, 116768, 14135, 15837, 54327, 43213, 27861, 130189, 25726, 63733, 17511, 41657, 133266]
[2024-12-02 19:07:22.929289] user = 99754 Cloud 159/567
[2024-12-02 19:07:22.948235] user = 99754 Local 159/567
[2024-12-02 19:07:23.530301] user = 99754 Local+ 159/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:07:25.592848] user = 99754 MPDA- 159/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6525173611111111
Training on augumented user 93901 0/50 current_auc = 0.6525173611111111
User 93901 AUC after training: 0.6525173611111111
User 93901 does not improve AUC. Reverting changes.
Training on augumented user 49696 1/50 current_auc = 0.6525173611111111
User 49696 AUC after training: 0.6525173611111111
User 49696 does not improve AUC. Reverting changes.
Training on augumented user 66911 2/50 current_auc = 0.6525173611111111
User 66911 AUC after training: 0.65078125
User 66911 does not improve AUC. Reverting changes.
Training on augumented user 51391 3/50 current_auc = 0.6525173611111111
User 51391 AUC after training: 0.6525173611111111
User 51391 does not improve AUC. Reverting changes.
Training on augumented user 118691 4/50 current_auc = 0.6525173611111111
User 118691 AUC after training: 0.65234375
User 118691 does not improve AUC. Reverting changes.
Training on augumented user 138429 5/50 current_auc = 0.6525173611111111
User 138429 AUC after training: 0.6521701388888889
User 138429 does not improve AUC. Reverting changes.
Training on augumented user 6276 6/50 current_auc = 0.6525173611111111
User 6276 AUC after training: 0.6526909722222223
User 6276 improves AUC. Keeping the model.
Training on augumented user 71905 7/50 current_auc = 0.6526909722222223
User 71905 AUC after training: 0.6521701388888889
User 71905 does not improve AUC. Reverting changes.
Training on augumented user 46012 8/50 current_auc = 0.6526909722222223
User 46012 AUC after training: 0.65234375
User 46012 does not improve AUC. Reverting changes.
Training on augumented user 78679 9/50 current_auc = 0.6526909722222223
User 78679 AUC after training: 0.6526909722222223
User 78679 does not improve AUC. Reverting changes.
Training on augumented user 95640 10/50 current_auc = 0.6526909722222223
User 95640 AUC after training: 0.6519965277777777
User 95640 does not improve AUC. Reverting changes.
Training on augumented user 32728 11/50 current_auc = 0.6526909722222223
User 32728 AUC after training: 0.652517361111111
User 32728 does not improve AUC. Reverting changes.
Training on augumented user 124049 12/50 current_auc = 0.6526909722222223
User 124049 AUC after training: 0.652517361111111
User 124049 does not improve AUC. Reverting changes.
Training on augumented user 35274 13/50 current_auc = 0.6526909722222223
User 35274 AUC after training: 0.6530381944444446
User 35274 improves AUC. Keeping the model.
Training on augumented user 91447 14/50 current_auc = 0.6530381944444446
User 91447 AUC after training: 0.6532118055555556
User 91447 improves AUC. Keeping the model.
Training on augumented user 14600 15/50 current_auc = 0.6532118055555556
User 14600 AUC after training: 0.6528645833333333
User 14600 does not improve AUC. Reverting changes.
Training on augumented user 8094 16/50 current_auc = 0.6532118055555556
User 8094 AUC after training: 0.652170138888889
User 8094 does not improve AUC. Reverting changes.
Training on augumented user 87183 17/50 current_auc = 0.6532118055555556
User 87183 AUC after training: 0.6528645833333333
User 87183 does not improve AUC. Reverting changes.
Training on augumented user 18343 18/50 current_auc = 0.6532118055555556
User 18343 AUC after training: 0.6521701388888889
User 18343 does not improve AUC. Reverting changes.
Training on augumented user 73270 19/50 current_auc = 0.6532118055555556
User 73270 AUC after training: 0.6535590277777779
User 73270 improves AUC. Keeping the model.
Training on augumented user 25636 20/50 current_auc = 0.6535590277777779
User 25636 AUC after training: 0.6528645833333333
User 25636 does not improve AUC. Reverting changes.
Training on augumented user 12670 21/50 current_auc = 0.6535590277777779
User 12670 AUC after training: 0.6516493055555556
User 12670 does not improve AUC. Reverting changes.
Training on augumented user 33063 22/50 current_auc = 0.6535590277777779
User 33063 AUC after training: 0.6535590277777779
User 33063 does not improve AUC. Reverting changes.
Training on augumented user 120766 23/50 current_auc = 0.6535590277777779
User 120766 AUC after training: 0.6533854166666667
User 120766 does not improve AUC. Reverting changes.
Training on augumented user 23855 24/50 current_auc = 0.6535590277777779
User 23855 AUC after training: 0.6533854166666666
User 23855 does not improve AUC. Reverting changes.
Training on augumented user 25132 25/50 current_auc = 0.6535590277777779
User 25132 AUC after training: 0.654079861111111
User 25132 improves AUC. Keeping the model.
Training on augumented user 104572 26/50 current_auc = 0.654079861111111
User 104572 AUC after training: 0.6542534722222222
User 104572 improves AUC. Keeping the model.
Training on augumented user 121801 27/50 current_auc = 0.6542534722222222
User 121801 AUC after training: 0.6537326388888889
User 121801 does not improve AUC. Reverting changes.
Training on augumented user 73759 28/50 current_auc = 0.6542534722222222
User 73759 AUC after training: 0.6542534722222222
User 73759 does not improve AUC. Reverting changes.
Training on augumented user 134789 29/50 current_auc = 0.6542534722222222
User 134789 AUC after training: 0.654079861111111
User 134789 does not improve AUC. Reverting changes.
Training on augumented user 61623 30/50 current_auc = 0.6542534722222222
User 61623 AUC after training: 0.6546006944444445
User 61623 improves AUC. Keeping the model.
Training on augumented user 98940 31/50 current_auc = 0.6546006944444445
User 98940 AUC after training: 0.6546006944444445
User 98940 does not improve AUC. Reverting changes.
Training on augumented user 130508 32/50 current_auc = 0.6546006944444445
User 130508 AUC after training: 0.6526909722222222
User 130508 does not improve AUC. Reverting changes.
Training on augumented user 91644 33/50 current_auc = 0.6546006944444445
User 91644 AUC after training: 0.6537326388888889
User 91644 does not improve AUC. Reverting changes.
Training on augumented user 31951 34/50 current_auc = 0.6546006944444445
User 31951 AUC after training: 0.6540798611111112
User 31951 does not improve AUC. Reverting changes.
Training on augumented user 33110 35/50 current_auc = 0.6546006944444445
User 33110 AUC after training: 0.654079861111111
User 33110 does not improve AUC. Reverting changes.
Training on augumented user 71162 36/50 current_auc = 0.6546006944444445
User 71162 AUC after training: 0.6525173611111111
User 71162 does not improve AUC. Reverting changes.
Training on augumented user 47848 37/50 current_auc = 0.6546006944444445
User 47848 AUC after training: 0.6521701388888889
User 47848 does not improve AUC. Reverting changes.
Training on augumented user 116768 38/50 current_auc = 0.6546006944444445
User 116768 AUC after training: 0.6537326388888889
User 116768 does not improve AUC. Reverting changes.
Training on augumented user 14135 39/50 current_auc = 0.6546006944444445
User 14135 AUC after training: 0.6546006944444445
User 14135 does not improve AUC. Reverting changes.
Training on augumented user 15837 40/50 current_auc = 0.6546006944444445
User 15837 AUC after training: 0.6526041666666667
User 15837 does not improve AUC. Reverting changes.
Training on augumented user 54327 41/50 current_auc = 0.6546006944444445
User 54327 AUC after training: 0.6535590277777777
User 54327 does not improve AUC. Reverting changes.
Training on augumented user 43213 42/50 current_auc = 0.6546006944444445
User 43213 AUC after training: 0.6533854166666666
User 43213 does not improve AUC. Reverting changes.
Training on augumented user 27861 43/50 current_auc = 0.6546006944444445
User 27861 AUC after training: 0.6521701388888889
User 27861 does not improve AUC. Reverting changes.
Training on augumented user 130189 44/50 current_auc = 0.6546006944444445
User 130189 AUC after training: 0.6530381944444444
User 130189 does not improve AUC. Reverting changes.
Training on augumented user 25726 45/50 current_auc = 0.6546006944444445
User 25726 AUC after training: 0.6535590277777777
User 25726 does not improve AUC. Reverting changes.
Training on augumented user 63733 46/50 current_auc = 0.6546006944444445
User 63733 AUC after training: 0.6533854166666666
User 63733 does not improve AUC. Reverting changes.
Training on augumented user 17511 47/50 current_auc = 0.6546006944444445
User 17511 AUC after training: 0.6530381944444444
User 17511 does not improve AUC. Reverting changes.
Training on augumented user 41657 48/50 current_auc = 0.6546006944444445
User 41657 AUC after training: 0.6532118055555556
User 41657 does not improve AUC. Reverting changes.
Training on augumented user 133266 49/50 current_auc = 0.6546006944444445
User 133266 AUC after training: 0.6532118055555556
User 133266 does not improve AUC. Reverting changes.
[2024-12-02 19:07:54.971142] start test user 99770 160/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:07:55.669100] start test user 99770 160/567 recall augumented users by random, augumented_users = [82357, 29764, 64187, 14162, 29765, 81255, 38867, 16566, 2680, 126283, 57932, 92361, 84406, 115940, 10357, 99113, 41047, 99856, 112583, 72725, 126374, 110125, 119392, 90731, 119449, 31736, 108749, 92769, 108412, 136071, 57956, 85312, 47535, 67028, 45569, 40458, 130690, 23577, 80984, 39698, 2621, 116109, 41821, 88041, 40475, 26384, 837, 57291, 6181, 114716]
[2024-12-02 19:07:55.686020] user = 99770 Cloud 160/567
[2024-12-02 19:07:55.697560] user = 99770 Local 160/567
[2024-12-02 19:07:55.728444] user = 99770 Local+ 160/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:07:57.832080] user = 99770 MPDA- 160/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7765625
Training on augumented user 82357 0/50 current_auc = 0.7765625
User 82357 AUC after training: 0.7765625
User 82357 does not improve AUC. Reverting changes.
Training on augumented user 29764 1/50 current_auc = 0.7765625
User 29764 AUC after training: 0.7781250000000001
User 29764 improves AUC. Keeping the model.
Training on augumented user 64187 2/50 current_auc = 0.7781250000000001
User 64187 AUC after training: 0.7781250000000001
User 64187 does not improve AUC. Reverting changes.
Training on augumented user 14162 3/50 current_auc = 0.7781250000000001
User 14162 AUC after training: 0.7781250000000001
User 14162 does not improve AUC. Reverting changes.
Training on augumented user 29765 4/50 current_auc = 0.7781250000000001
User 29765 AUC after training: 0.7781250000000001
User 29765 does not improve AUC. Reverting changes.
Training on augumented user 81255 5/50 current_auc = 0.7781250000000001
User 81255 AUC after training: 0.7781250000000001
User 81255 does not improve AUC. Reverting changes.
Training on augumented user 38867 6/50 current_auc = 0.7781250000000001
User 38867 AUC after training: 0.7765625
User 38867 does not improve AUC. Reverting changes.
Training on augumented user 16566 7/50 current_auc = 0.7781250000000001
User 16566 AUC after training: 0.7765625
User 16566 does not improve AUC. Reverting changes.
Training on augumented user 2680 8/50 current_auc = 0.7781250000000001
User 2680 AUC after training: 0.7781250000000001
User 2680 does not improve AUC. Reverting changes.
Training on augumented user 126283 9/50 current_auc = 0.7781250000000001
User 126283 AUC after training: 0.7765625
User 126283 does not improve AUC. Reverting changes.
Training on augumented user 57932 10/50 current_auc = 0.7781250000000001
User 57932 AUC after training: 0.7781250000000001
User 57932 does not improve AUC. Reverting changes.
Training on augumented user 92361 11/50 current_auc = 0.7781250000000001
User 92361 AUC after training: 0.7781250000000001
User 92361 does not improve AUC. Reverting changes.
Training on augumented user 84406 12/50 current_auc = 0.7781250000000001
User 84406 AUC after training: 0.7828125
User 84406 improves AUC. Keeping the model.
Training on augumented user 115940 13/50 current_auc = 0.7828125
User 115940 AUC after training: 0.7796875000000001
User 115940 does not improve AUC. Reverting changes.
Training on augumented user 10357 14/50 current_auc = 0.7828125
User 10357 AUC after training: 0.78125
User 10357 does not improve AUC. Reverting changes.
Training on augumented user 99113 15/50 current_auc = 0.7828125
User 99113 AUC after training: 0.7859375000000001
User 99113 improves AUC. Keeping the model.
Training on augumented user 41047 16/50 current_auc = 0.7859375000000001
User 41047 AUC after training: 0.7828125
User 41047 does not improve AUC. Reverting changes.
Training on augumented user 99856 17/50 current_auc = 0.7859375000000001
User 99856 AUC after training: 0.7828125
User 99856 does not improve AUC. Reverting changes.
Training on augumented user 112583 18/50 current_auc = 0.7859375000000001
User 112583 AUC after training: 0.7828125
User 112583 does not improve AUC. Reverting changes.
Training on augumented user 72725 19/50 current_auc = 0.7859375000000001
User 72725 AUC after training: 0.7828125
User 72725 does not improve AUC. Reverting changes.
Training on augumented user 126374 20/50 current_auc = 0.7859375000000001
User 126374 AUC after training: 0.7890625
User 126374 improves AUC. Keeping the model.
Training on augumented user 110125 21/50 current_auc = 0.7890625
User 110125 AUC after training: 0.7875
User 110125 does not improve AUC. Reverting changes.
Training on augumented user 119392 22/50 current_auc = 0.7890625
User 119392 AUC after training: 0.7890625
User 119392 does not improve AUC. Reverting changes.
Training on augumented user 90731 23/50 current_auc = 0.7890625
User 90731 AUC after training: 0.7859375
User 90731 does not improve AUC. Reverting changes.
Training on augumented user 119449 24/50 current_auc = 0.7890625
User 119449 AUC after training: 0.7843749999999999
User 119449 does not improve AUC. Reverting changes.
Training on augumented user 31736 25/50 current_auc = 0.7890625
User 31736 AUC after training: 0.7890625
User 31736 does not improve AUC. Reverting changes.
Training on augumented user 108749 26/50 current_auc = 0.7890625
User 108749 AUC after training: 0.7859375
User 108749 does not improve AUC. Reverting changes.
Training on augumented user 92769 27/50 current_auc = 0.7890625
User 92769 AUC after training: 0.7890625
User 92769 does not improve AUC. Reverting changes.
Training on augumented user 108412 28/50 current_auc = 0.7890625
User 108412 AUC after training: 0.7875
User 108412 does not improve AUC. Reverting changes.
Training on augumented user 136071 29/50 current_auc = 0.7890625
User 136071 AUC after training: 0.7875
User 136071 does not improve AUC. Reverting changes.
Training on augumented user 57956 30/50 current_auc = 0.7890625
User 57956 AUC after training: 0.7859375
User 57956 does not improve AUC. Reverting changes.
Training on augumented user 85312 31/50 current_auc = 0.7890625
User 85312 AUC after training: 0.784375
User 85312 does not improve AUC. Reverting changes.
Training on augumented user 47535 32/50 current_auc = 0.7890625
User 47535 AUC after training: 0.7875
User 47535 does not improve AUC. Reverting changes.
Training on augumented user 67028 33/50 current_auc = 0.7890625
User 67028 AUC after training: 0.790625
User 67028 improves AUC. Keeping the model.
Training on augumented user 45569 34/50 current_auc = 0.790625
User 45569 AUC after training: 0.7875
User 45569 does not improve AUC. Reverting changes.
Training on augumented user 40458 35/50 current_auc = 0.790625
User 40458 AUC after training: 0.7890625
User 40458 does not improve AUC. Reverting changes.
Training on augumented user 130690 36/50 current_auc = 0.790625
User 130690 AUC after training: 0.7906249999999999
User 130690 does not improve AUC. Reverting changes.
Training on augumented user 23577 37/50 current_auc = 0.790625
User 23577 AUC after training: 0.7859375
User 23577 does not improve AUC. Reverting changes.
Training on augumented user 80984 38/50 current_auc = 0.790625
User 80984 AUC after training: 0.7890625
User 80984 does not improve AUC. Reverting changes.
Training on augumented user 39698 39/50 current_auc = 0.790625
User 39698 AUC after training: 0.790625
User 39698 does not improve AUC. Reverting changes.
Training on augumented user 2621 40/50 current_auc = 0.790625
User 2621 AUC after training: 0.7890625
User 2621 does not improve AUC. Reverting changes.
Training on augumented user 116109 41/50 current_auc = 0.790625
User 116109 AUC after training: 0.7890625
User 116109 does not improve AUC. Reverting changes.
Training on augumented user 41821 42/50 current_auc = 0.790625
User 41821 AUC after training: 0.7875
User 41821 does not improve AUC. Reverting changes.
Training on augumented user 88041 43/50 current_auc = 0.790625
User 88041 AUC after training: 0.790625
User 88041 does not improve AUC. Reverting changes.
Training on augumented user 40475 44/50 current_auc = 0.790625
User 40475 AUC after training: 0.790625
User 40475 does not improve AUC. Reverting changes.
Training on augumented user 26384 45/50 current_auc = 0.790625
User 26384 AUC after training: 0.7890625
User 26384 does not improve AUC. Reverting changes.
Training on augumented user 837 46/50 current_auc = 0.790625
User 837 AUC after training: 0.7890625
User 837 does not improve AUC. Reverting changes.
Training on augumented user 57291 47/50 current_auc = 0.790625
User 57291 AUC after training: 0.7859375
User 57291 does not improve AUC. Reverting changes.
Training on augumented user 6181 48/50 current_auc = 0.790625
User 6181 AUC after training: 0.7890625
User 6181 does not improve AUC. Reverting changes.
Training on augumented user 114716 49/50 current_auc = 0.790625
User 114716 AUC after training: 0.7875
User 114716 does not improve AUC. Reverting changes.
[2024-12-02 19:08:27.689933] start test user 99781 161/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:08:28.191838] start test user 99781 161/567 recall augumented users by random, augumented_users = [30099, 47539, 59796, 43014, 107263, 32183, 33942, 99590, 54534, 102846, 19220, 15242, 64498, 47600, 37688, 81368, 6304, 73558, 108327, 16759, 32579, 10532, 98010, 130948, 52467, 61686, 102329, 42721, 11106, 95121, 92467, 120591, 17417, 85710, 119511, 114019, 96150, 66369, 63160, 118028, 37948, 49003, 717, 86987, 103845, 89048, 43096, 61416, 18828, 136257]
[2024-12-02 19:08:28.209769] user = 99781 Cloud 161/567
[2024-12-02 19:08:28.232669] user = 99781 Local 161/567
[2024-12-02 19:08:28.430517] user = 99781 Local+ 161/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:08:30.284655] user = 99781 MPDA- 161/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.824966078697422
Training on augumented user 30099 0/50 current_auc = 0.824966078697422
User 30099 AUC after training: 0.8263229308005428
User 30099 improves AUC. Keeping the model.
Training on augumented user 47539 1/50 current_auc = 0.8263229308005428
User 47539 AUC after training: 0.8263229308005428
User 47539 does not improve AUC. Reverting changes.
Training on augumented user 59796 2/50 current_auc = 0.8263229308005428
User 59796 AUC after training: 0.8263229308005428
User 59796 does not improve AUC. Reverting changes.
Training on augumented user 43014 3/50 current_auc = 0.8263229308005428
User 43014 AUC after training: 0.8263229308005428
User 43014 does not improve AUC. Reverting changes.
Training on augumented user 107263 4/50 current_auc = 0.8263229308005428
User 107263 AUC after training: 0.8263229308005428
User 107263 does not improve AUC. Reverting changes.
Training on augumented user 32183 5/50 current_auc = 0.8263229308005428
User 32183 AUC after training: 0.8263229308005428
User 32183 does not improve AUC. Reverting changes.
Training on augumented user 33942 6/50 current_auc = 0.8263229308005428
User 33942 AUC after training: 0.8263229308005428
User 33942 does not improve AUC. Reverting changes.
Training on augumented user 99590 7/50 current_auc = 0.8263229308005428
User 99590 AUC after training: 0.8263229308005428
User 99590 does not improve AUC. Reverting changes.
Training on augumented user 54534 8/50 current_auc = 0.8263229308005428
User 54534 AUC after training: 0.8263229308005428
User 54534 does not improve AUC. Reverting changes.
Training on augumented user 102846 9/50 current_auc = 0.8263229308005428
User 102846 AUC after training: 0.8263229308005428
User 102846 does not improve AUC. Reverting changes.
Training on augumented user 19220 10/50 current_auc = 0.8263229308005428
User 19220 AUC after training: 0.8263229308005428
User 19220 does not improve AUC. Reverting changes.
Training on augumented user 15242 11/50 current_auc = 0.8263229308005428
User 15242 AUC after training: 0.8236092265943012
User 15242 does not improve AUC. Reverting changes.
Training on augumented user 64498 12/50 current_auc = 0.8263229308005428
User 64498 AUC after training: 0.824966078697422
User 64498 does not improve AUC. Reverting changes.
Training on augumented user 47600 13/50 current_auc = 0.8263229308005428
User 47600 AUC after training: 0.824966078697422
User 47600 does not improve AUC. Reverting changes.
Training on augumented user 37688 14/50 current_auc = 0.8263229308005428
User 37688 AUC after training: 0.8263229308005428
User 37688 does not improve AUC. Reverting changes.
Training on augumented user 81368 15/50 current_auc = 0.8263229308005428
User 81368 AUC after training: 0.8263229308005428
User 81368 does not improve AUC. Reverting changes.
Training on augumented user 6304 16/50 current_auc = 0.8263229308005428
User 6304 AUC after training: 0.8263229308005428
User 6304 does not improve AUC. Reverting changes.
Training on augumented user 73558 17/50 current_auc = 0.8263229308005428
User 73558 AUC after training: 0.824966078697422
User 73558 does not improve AUC. Reverting changes.
Training on augumented user 108327 18/50 current_auc = 0.8263229308005428
User 108327 AUC after training: 0.8263229308005428
User 108327 does not improve AUC. Reverting changes.
Training on augumented user 16759 19/50 current_auc = 0.8263229308005428
User 16759 AUC after training: 0.824966078697422
User 16759 does not improve AUC. Reverting changes.
Training on augumented user 32579 20/50 current_auc = 0.8263229308005428
User 32579 AUC after training: 0.8263229308005428
User 32579 does not improve AUC. Reverting changes.
Training on augumented user 10532 21/50 current_auc = 0.8263229308005428
User 10532 AUC after training: 0.8263229308005428
User 10532 does not improve AUC. Reverting changes.
Training on augumented user 98010 22/50 current_auc = 0.8263229308005428
User 98010 AUC after training: 0.8222523744911805
User 98010 does not improve AUC. Reverting changes.
Training on augumented user 130948 23/50 current_auc = 0.8263229308005428
User 130948 AUC after training: 0.8263229308005428
User 130948 does not improve AUC. Reverting changes.
Training on augumented user 52467 24/50 current_auc = 0.8263229308005428
User 52467 AUC after training: 0.8263229308005428
User 52467 does not improve AUC. Reverting changes.
Training on augumented user 61686 25/50 current_auc = 0.8263229308005428
User 61686 AUC after training: 0.8263229308005428
User 61686 does not improve AUC. Reverting changes.
Training on augumented user 102329 26/50 current_auc = 0.8263229308005428
User 102329 AUC after training: 0.8263229308005428
User 102329 does not improve AUC. Reverting changes.
Training on augumented user 42721 27/50 current_auc = 0.8263229308005428
User 42721 AUC after training: 0.8263229308005428
User 42721 does not improve AUC. Reverting changes.
Training on augumented user 11106 28/50 current_auc = 0.8263229308005428
User 11106 AUC after training: 0.8263229308005428
User 11106 does not improve AUC. Reverting changes.
Training on augumented user 95121 29/50 current_auc = 0.8263229308005428
User 95121 AUC after training: 0.8263229308005428
User 95121 does not improve AUC. Reverting changes.
Training on augumented user 92467 30/50 current_auc = 0.8263229308005428
User 92467 AUC after training: 0.8263229308005428
User 92467 does not improve AUC. Reverting changes.
Training on augumented user 120591 31/50 current_auc = 0.8263229308005428
User 120591 AUC after training: 0.8263229308005428
User 120591 does not improve AUC. Reverting changes.
Training on augumented user 17417 32/50 current_auc = 0.8263229308005428
User 17417 AUC after training: 0.8263229308005428
User 17417 does not improve AUC. Reverting changes.
Training on augumented user 85710 33/50 current_auc = 0.8263229308005428
User 85710 AUC after training: 0.8263229308005428
User 85710 does not improve AUC. Reverting changes.
Training on augumented user 119511 34/50 current_auc = 0.8263229308005428
User 119511 AUC after training: 0.8263229308005428
User 119511 does not improve AUC. Reverting changes.
Training on augumented user 114019 35/50 current_auc = 0.8263229308005428
User 114019 AUC after training: 0.8263229308005428
User 114019 does not improve AUC. Reverting changes.
Training on augumented user 96150 36/50 current_auc = 0.8263229308005428
User 96150 AUC after training: 0.8263229308005428
User 96150 does not improve AUC. Reverting changes.
Training on augumented user 66369 37/50 current_auc = 0.8263229308005428
User 66369 AUC after training: 0.8263229308005428
User 66369 does not improve AUC. Reverting changes.
Training on augumented user 63160 38/50 current_auc = 0.8263229308005428
User 63160 AUC after training: 0.8263229308005428
User 63160 does not improve AUC. Reverting changes.
Training on augumented user 118028 39/50 current_auc = 0.8263229308005428
User 118028 AUC after training: 0.824966078697422
User 118028 does not improve AUC. Reverting changes.
Training on augumented user 37948 40/50 current_auc = 0.8263229308005428
User 37948 AUC after training: 0.8263229308005428
User 37948 does not improve AUC. Reverting changes.
Training on augumented user 49003 41/50 current_auc = 0.8263229308005428
User 49003 AUC after training: 0.8263229308005428
User 49003 does not improve AUC. Reverting changes.
Training on augumented user 717 42/50 current_auc = 0.8263229308005428
User 717 AUC after training: 0.8276797829036635
User 717 improves AUC. Keeping the model.
Training on augumented user 86987 43/50 current_auc = 0.8276797829036635
User 86987 AUC after training: 0.8276797829036635
User 86987 does not improve AUC. Reverting changes.
Training on augumented user 103845 44/50 current_auc = 0.8276797829036635
User 103845 AUC after training: 0.8263229308005426
User 103845 does not improve AUC. Reverting changes.
Training on augumented user 89048 45/50 current_auc = 0.8276797829036635
User 89048 AUC after training: 0.8263229308005426
User 89048 does not improve AUC. Reverting changes.
Training on augumented user 43096 46/50 current_auc = 0.8276797829036635
User 43096 AUC after training: 0.8276797829036635
User 43096 does not improve AUC. Reverting changes.
Training on augumented user 61416 47/50 current_auc = 0.8276797829036635
User 61416 AUC after training: 0.8276797829036635
User 61416 does not improve AUC. Reverting changes.
Training on augumented user 18828 48/50 current_auc = 0.8276797829036635
User 18828 AUC after training: 0.8276797829036635
User 18828 does not improve AUC. Reverting changes.
Training on augumented user 136257 49/50 current_auc = 0.8276797829036635
User 136257 AUC after training: 0.8276797829036635
User 136257 does not improve AUC. Reverting changes.
[2024-12-02 19:09:02.884865] start test user 99800 162/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:09:03.279817] start test user 99800 162/567 recall augumented users by random, augumented_users = [55440, 137701, 91388, 61811, 43075, 15568, 35566, 7524, 78780, 113703, 72229, 46266, 3314, 18212, 46583, 60029, 29409, 117656, 99413, 118404, 19582, 49603, 97963, 129558, 18393, 122759, 94652, 89150, 98660, 106982, 43817, 29659, 101087, 115064, 80785, 23127, 130786, 81508, 127336, 69095, 104191, 105147, 25931, 122857, 14846, 372, 49675, 62810, 99966, 126510]
[2024-12-02 19:09:03.294709] user = 99800 Cloud 162/567
[2024-12-02 19:09:03.343895] user = 99800 Local 162/567
[2024-12-02 19:09:03.406705] user = 99800 Local+ 162/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:09:05.926457] user = 99800 MPDA- 162/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6260638297872341
Training on augumented user 55440 0/50 current_auc = 0.6260638297872341
User 55440 AUC after training: 0.6260638297872341
User 55440 does not improve AUC. Reverting changes.
Training on augumented user 137701 1/50 current_auc = 0.6260638297872341
User 137701 AUC after training: 0.6257978723404256
User 137701 does not improve AUC. Reverting changes.
Training on augumented user 91388 2/50 current_auc = 0.6260638297872341
User 91388 AUC after training: 0.6257978723404256
User 91388 does not improve AUC. Reverting changes.
Training on augumented user 61811 3/50 current_auc = 0.6260638297872341
User 61811 AUC after training: 0.6252659574468085
User 61811 does not improve AUC. Reverting changes.
Training on augumented user 43075 4/50 current_auc = 0.6260638297872341
User 43075 AUC after training: 0.6260638297872341
User 43075 does not improve AUC. Reverting changes.
Training on augumented user 15568 5/50 current_auc = 0.6260638297872341
User 15568 AUC after training: 0.6260638297872341
User 15568 does not improve AUC. Reverting changes.
Training on augumented user 35566 6/50 current_auc = 0.6260638297872341
User 35566 AUC after training: 0.6263297872340425
User 35566 improves AUC. Keeping the model.
Training on augumented user 7524 7/50 current_auc = 0.6263297872340425
User 7524 AUC after training: 0.6260638297872341
User 7524 does not improve AUC. Reverting changes.
Training on augumented user 78780 8/50 current_auc = 0.6263297872340425
User 78780 AUC after training: 0.626595744680851
User 78780 improves AUC. Keeping the model.
Training on augumented user 113703 9/50 current_auc = 0.626595744680851
User 113703 AUC after training: 0.6257978723404255
User 113703 does not improve AUC. Reverting changes.
Training on augumented user 72229 10/50 current_auc = 0.626595744680851
User 72229 AUC after training: 0.6273936170212766
User 72229 improves AUC. Keeping the model.
Training on augumented user 46266 11/50 current_auc = 0.6273936170212766
User 46266 AUC after training: 0.6276595744680851
User 46266 improves AUC. Keeping the model.
Training on augumented user 3314 12/50 current_auc = 0.6276595744680851
User 3314 AUC after training: 0.6279255319148936
User 3314 improves AUC. Keeping the model.
Training on augumented user 18212 13/50 current_auc = 0.6279255319148936
User 18212 AUC after training: 0.626595744680851
User 18212 does not improve AUC. Reverting changes.
Training on augumented user 46583 14/50 current_auc = 0.6279255319148936
User 46583 AUC after training: 0.6281914893617022
User 46583 improves AUC. Keeping the model.
Training on augumented user 60029 15/50 current_auc = 0.6281914893617022
User 60029 AUC after training: 0.6276595744680851
User 60029 does not improve AUC. Reverting changes.
Training on augumented user 29409 16/50 current_auc = 0.6281914893617022
User 29409 AUC after training: 0.626595744680851
User 29409 does not improve AUC. Reverting changes.
Training on augumented user 117656 17/50 current_auc = 0.6281914893617022
User 117656 AUC after training: 0.6276595744680851
User 117656 does not improve AUC. Reverting changes.
Training on augumented user 99413 18/50 current_auc = 0.6281914893617022
User 99413 AUC after training: 0.6273936170212766
User 99413 does not improve AUC. Reverting changes.
Training on augumented user 118404 19/50 current_auc = 0.6281914893617022
User 118404 AUC after training: 0.6276595744680851
User 118404 does not improve AUC. Reverting changes.
Training on augumented user 19582 20/50 current_auc = 0.6281914893617022
User 19582 AUC after training: 0.6276595744680851
User 19582 does not improve AUC. Reverting changes.
Training on augumented user 49603 21/50 current_auc = 0.6281914893617022
User 49603 AUC after training: 0.6279255319148936
User 49603 does not improve AUC. Reverting changes.
Training on augumented user 97963 22/50 current_auc = 0.6281914893617022
User 97963 AUC after training: 0.6279255319148936
User 97963 does not improve AUC. Reverting changes.
Training on augumented user 129558 23/50 current_auc = 0.6281914893617022
User 129558 AUC after training: 0.6281914893617022
User 129558 does not improve AUC. Reverting changes.
Training on augumented user 18393 24/50 current_auc = 0.6281914893617022
User 18393 AUC after training: 0.6276595744680852
User 18393 does not improve AUC. Reverting changes.
Training on augumented user 122759 25/50 current_auc = 0.6281914893617022
User 122759 AUC after training: 0.6281914893617022
User 122759 does not improve AUC. Reverting changes.
Training on augumented user 94652 26/50 current_auc = 0.6281914893617022
User 94652 AUC after training: 0.6268617021276596
User 94652 does not improve AUC. Reverting changes.
Training on augumented user 89150 27/50 current_auc = 0.6281914893617022
User 89150 AUC after training: 0.627127659574468
User 89150 does not improve AUC. Reverting changes.
Training on augumented user 98660 28/50 current_auc = 0.6281914893617022
User 98660 AUC after training: 0.6279255319148936
User 98660 does not improve AUC. Reverting changes.
Training on augumented user 106982 29/50 current_auc = 0.6281914893617022
User 106982 AUC after training: 0.6273936170212766
User 106982 does not improve AUC. Reverting changes.
Training on augumented user 43817 30/50 current_auc = 0.6281914893617022
User 43817 AUC after training: 0.6281914893617022
User 43817 does not improve AUC. Reverting changes.
Training on augumented user 29659 31/50 current_auc = 0.6281914893617022
User 29659 AUC after training: 0.6273936170212766
User 29659 does not improve AUC. Reverting changes.
Training on augumented user 101087 32/50 current_auc = 0.6281914893617022
User 101087 AUC after training: 0.6279255319148936
User 101087 does not improve AUC. Reverting changes.
Training on augumented user 115064 33/50 current_auc = 0.6281914893617022
User 115064 AUC after training: 0.6279255319148936
User 115064 does not improve AUC. Reverting changes.
Training on augumented user 80785 34/50 current_auc = 0.6281914893617022
User 80785 AUC after training: 0.6273936170212766
User 80785 does not improve AUC. Reverting changes.
Training on augumented user 23127 35/50 current_auc = 0.6281914893617022
User 23127 AUC after training: 0.6271276595744681
User 23127 does not improve AUC. Reverting changes.
Training on augumented user 130786 36/50 current_auc = 0.6281914893617022
User 130786 AUC after training: 0.6263297872340425
User 130786 does not improve AUC. Reverting changes.
Training on augumented user 81508 37/50 current_auc = 0.6281914893617022
User 81508 AUC after training: 0.6279255319148936
User 81508 does not improve AUC. Reverting changes.
Training on augumented user 127336 38/50 current_auc = 0.6281914893617022
User 127336 AUC after training: 0.6276595744680851
User 127336 does not improve AUC. Reverting changes.
Training on augumented user 69095 39/50 current_auc = 0.6281914893617022
User 69095 AUC after training: 0.6279255319148936
User 69095 does not improve AUC. Reverting changes.
Training on augumented user 104191 40/50 current_auc = 0.6281914893617022
User 104191 AUC after training: 0.6273936170212766
User 104191 does not improve AUC. Reverting changes.
Training on augumented user 105147 41/50 current_auc = 0.6281914893617022
User 105147 AUC after training: 0.6273936170212766
User 105147 does not improve AUC. Reverting changes.
Training on augumented user 25931 42/50 current_auc = 0.6281914893617022
User 25931 AUC after training: 0.6276595744680851
User 25931 does not improve AUC. Reverting changes.
Training on augumented user 122857 43/50 current_auc = 0.6281914893617022
User 122857 AUC after training: 0.6276595744680851
User 122857 does not improve AUC. Reverting changes.
Training on augumented user 14846 44/50 current_auc = 0.6281914893617022
User 14846 AUC after training: 0.6271276595744681
User 14846 does not improve AUC. Reverting changes.
Training on augumented user 372 45/50 current_auc = 0.6281914893617022
User 372 AUC after training: 0.6281914893617022
User 372 does not improve AUC. Reverting changes.
Training on augumented user 49675 46/50 current_auc = 0.6281914893617022
User 49675 AUC after training: 0.6276595744680852
User 49675 does not improve AUC. Reverting changes.
Training on augumented user 62810 47/50 current_auc = 0.6281914893617022
User 62810 AUC after training: 0.6276595744680851
User 62810 does not improve AUC. Reverting changes.
Training on augumented user 99966 48/50 current_auc = 0.6281914893617022
User 99966 AUC after training: 0.6273936170212766
User 99966 does not improve AUC. Reverting changes.
Training on augumented user 126510 49/50 current_auc = 0.6281914893617022
User 126510 AUC after training: 0.6279255319148935
User 126510 does not improve AUC. Reverting changes.
[2024-12-02 19:09:35.092368] start test user 99807 163/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:09:35.852228] start test user 99807 163/567 recall augumented users by random, augumented_users = [25138, 80019, 136604, 80917, 23483, 47529, 89596, 75473, 131831, 27902, 118264, 105075, 72300, 123408, 53400, 125280, 59312, 28715, 83846, 1743, 28254, 37920, 85143, 70045, 69542, 6914, 118575, 138015, 133162, 68959, 107270, 120492, 109362, 88712, 131760, 66954, 41162, 17603, 28053, 93982, 1851, 61125, 39988, 54227, 66737, 71812, 95920, 102002, 87315, 92243]
[2024-12-02 19:09:35.882121] user = 99807 Cloud 163/567
[2024-12-02 19:09:35.936476] user = 99807 Local 163/567
[2024-12-02 19:09:36.090856] user = 99807 Local+ 163/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:09:37.943042] user = 99807 MPDA- 163/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7307592774701103
Training on augumented user 25138 0/50 current_auc = 0.7307592774701103
User 25138 AUC after training: 0.7306557631592568
User 25138 does not improve AUC. Reverting changes.
Training on augumented user 80019 1/50 current_auc = 0.7307592774701103
User 80019 AUC after training: 0.7303969773821231
User 80019 does not improve AUC. Reverting changes.
Training on augumented user 136604 2/50 current_auc = 0.7307592774701103
User 136604 AUC after training: 0.7299311629832824
User 136604 does not improve AUC. Reverting changes.
Training on augumented user 80917 3/50 current_auc = 0.7307592774701103
User 80917 AUC after training: 0.7310180632472439
User 80917 improves AUC. Keeping the model.
Training on augumented user 23483 4/50 current_auc = 0.7310180632472439
User 23483 AUC after training: 0.7305522488484033
User 23483 does not improve AUC. Reverting changes.
Training on augumented user 47529 5/50 current_auc = 0.7310180632472439
User 47529 AUC after training: 0.73060400600383
User 47529 does not improve AUC. Reverting changes.
Training on augumented user 89596 6/50 current_auc = 0.7310180632472439
User 89596 AUC after training: 0.7298794058278557
User 89596 does not improve AUC. Reverting changes.
Training on augumented user 75473 7/50 current_auc = 0.7310180632472439
User 75473 AUC after training: 0.7303969773821231
User 75473 does not improve AUC. Reverting changes.
Training on augumented user 131831 8/50 current_auc = 0.7310180632472439
User 131831 AUC after training: 0.7311215775580975
User 131831 improves AUC. Keeping the model.
Training on augumented user 27902 9/50 current_auc = 0.7311215775580975
User 27902 AUC after training: 0.7302417059158428
User 27902 does not improve AUC. Reverting changes.
Training on augumented user 118264 10/50 current_auc = 0.7311215775580975
User 118264 AUC after training: 0.7308627917809637
User 118264 does not improve AUC. Reverting changes.
Training on augumented user 105075 11/50 current_auc = 0.7311215775580975
User 105075 AUC after training: 0.7312768490243776
User 105075 improves AUC. Keeping the model.
Training on augumented user 72300 12/50 current_auc = 0.7312768490243776
User 72300 AUC after training: 0.7303969773821231
User 72300 does not improve AUC. Reverting changes.
Training on augumented user 123408 13/50 current_auc = 0.7312768490243776
User 123408 AUC after training: 0.7306040060038301
User 123408 does not improve AUC. Reverting changes.
Training on augumented user 53400 14/50 current_auc = 0.7312768490243776
User 53400 AUC after training: 0.7311733347135241
User 53400 does not improve AUC. Reverting changes.
Training on augumented user 125280 15/50 current_auc = 0.7312768490243776
User 125280 AUC after training: 0.7311733347135242
User 125280 does not improve AUC. Reverting changes.
Training on augumented user 59312 16/50 current_auc = 0.7312768490243776
User 59312 AUC after training: 0.7310698204026707
User 59312 does not improve AUC. Reverting changes.
Training on augumented user 28715 17/50 current_auc = 0.7312768490243776
User 28715 AUC after training: 0.7311733347135241
User 28715 does not improve AUC. Reverting changes.
Training on augumented user 83846 18/50 current_auc = 0.7312768490243776
User 83846 AUC after training: 0.7312250918689509
User 83846 does not improve AUC. Reverting changes.
Training on augumented user 1743 19/50 current_auc = 0.7312768490243776
User 1743 AUC after training: 0.7312250918689509
User 1743 does not improve AUC. Reverting changes.
Training on augumented user 28254 20/50 current_auc = 0.7312768490243776
User 28254 AUC after training: 0.73060400600383
User 28254 does not improve AUC. Reverting changes.
Training on augumented user 37920 21/50 current_auc = 0.7312768490243776
User 37920 AUC after training: 0.7316909062677915
User 37920 improves AUC. Keeping the model.
Training on augumented user 85143 22/50 current_auc = 0.7316909062677915
User 85143 AUC after training: 0.7316391491123648
User 85143 does not improve AUC. Reverting changes.
Training on augumented user 70045 23/50 current_auc = 0.7316909062677915
User 70045 AUC after training: 0.7315356348015113
User 70045 does not improve AUC. Reverting changes.
Training on augumented user 69542 24/50 current_auc = 0.7316909062677915
User 69542 AUC after training: 0.7315356348015114
User 69542 does not improve AUC. Reverting changes.
Training on augumented user 6914 25/50 current_auc = 0.7316909062677915
User 6914 AUC after training: 0.7316391491123648
User 6914 does not improve AUC. Reverting changes.
Training on augumented user 118575 26/50 current_auc = 0.7316909062677915
User 118575 AUC after training: 0.731302727602091
User 118575 does not improve AUC. Reverting changes.
Training on augumented user 138015 27/50 current_auc = 0.7316909062677915
User 138015 AUC after training: 0.7314321204906579
User 138015 does not improve AUC. Reverting changes.
Training on augumented user 133162 28/50 current_auc = 0.7316909062677915
User 133162 AUC after training: 0.731587391956938
User 133162 does not improve AUC. Reverting changes.
Training on augumented user 68959 29/50 current_auc = 0.7316909062677915
User 68959 AUC after training: 0.7316391491123648
User 68959 does not improve AUC. Reverting changes.
Training on augumented user 107270 30/50 current_auc = 0.7316909062677915
User 107270 AUC after training: 0.732208477822059
User 107270 improves AUC. Keeping the model.
Training on augumented user 120492 31/50 current_auc = 0.732208477822059
User 120492 AUC after training: 0.732363749288339
User 120492 improves AUC. Keeping the model.
Training on augumented user 109362 32/50 current_auc = 0.732363749288339
User 109362 AUC after training: 0.7321567206666322
User 109362 does not improve AUC. Reverting changes.
Training on augumented user 88712 33/50 current_auc = 0.732363749288339
User 88712 AUC after training: 0.7322602349774856
User 88712 does not improve AUC. Reverting changes.
Training on augumented user 131760 34/50 current_auc = 0.732363749288339
User 131760 AUC after training: 0.7324672635991926
User 131760 improves AUC. Keeping the model.
Training on augumented user 66954 35/50 current_auc = 0.7324672635991926
User 66954 AUC after training: 0.7314062419129445
User 66954 does not improve AUC. Reverting changes.
Training on augumented user 41162 36/50 current_auc = 0.7324672635991926
User 41162 AUC after training: 0.7320014492003519
User 41162 does not improve AUC. Reverting changes.
Training on augumented user 17603 37/50 current_auc = 0.7324672635991926
User 17603 AUC after training: 0.7331659851974535
User 17603 improves AUC. Keeping the model.
Training on augumented user 28053 38/50 current_auc = 0.7331659851974535
User 28053 AUC after training: 0.7326484136431861
User 28053 does not improve AUC. Reverting changes.
Training on augumented user 93982 39/50 current_auc = 0.7331659851974535
User 93982 AUC after training: 0.7329589565757466
User 93982 does not improve AUC. Reverting changes.
Training on augumented user 1851 40/50 current_auc = 0.7331659851974535
User 1851 AUC after training: 0.7329071994203199
User 1851 does not improve AUC. Reverting changes.
Training on augumented user 61125 41/50 current_auc = 0.7331659851974535
User 61125 AUC after training: 0.7326742922208995
User 61125 does not improve AUC. Reverting changes.
Training on augumented user 39988 42/50 current_auc = 0.7331659851974535
User 39988 AUC after training: 0.7324413850214793
User 39988 does not improve AUC. Reverting changes.
Training on augumented user 54227 43/50 current_auc = 0.7331659851974535
User 54227 AUC after training: 0.7332953780860205
User 54227 improves AUC. Keeping the model.
Training on augumented user 66737 44/50 current_auc = 0.7332953780860205
User 66737 AUC after training: 0.7332953780860204
User 66737 does not improve AUC. Reverting changes.
Training on augumented user 71812 45/50 current_auc = 0.7332953780860205
User 71812 AUC after training: 0.7332177423528803
User 71812 does not improve AUC. Reverting changes.
Training on augumented user 95920 46/50 current_auc = 0.7332953780860205
User 95920 AUC after training: 0.7331142280420269
User 95920 does not improve AUC. Reverting changes.
Training on augumented user 102002 47/50 current_auc = 0.7332953780860205
User 102002 AUC after training: 0.7332436209305937
User 102002 does not improve AUC. Reverting changes.
Training on augumented user 87315 48/50 current_auc = 0.7332953780860205
User 87315 AUC after training: 0.7327778065317531
User 87315 does not improve AUC. Reverting changes.
Training on augumented user 92243 49/50 current_auc = 0.7332953780860205
User 92243 AUC after training: 0.7332436209305937
User 92243 does not improve AUC. Reverting changes.
[2024-12-02 19:10:10.840723] start test user 99890 164/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:10:11.355004] start test user 99890 164/567 recall augumented users by random, augumented_users = [104668, 83850, 34504, 137519, 113418, 16029, 63821, 69355, 132994, 26468, 31505, 69048, 77160, 124205, 51390, 12582, 41774, 123551, 59799, 133084, 124872, 38070, 96452, 43837, 9001, 8702, 97236, 41991, 13860, 40603, 49790, 85777, 86143, 75929, 56174, 130271, 109745, 39501, 121119, 52671, 27349, 89660, 132764, 58903, 137751, 104674, 55364, 98895, 73217, 85203]
[2024-12-02 19:10:11.383642] user = 99890 Cloud 164/567
[2024-12-02 19:10:11.402688] user = 99890 Local 164/567
[2024-12-02 19:10:11.455449] user = 99890 Local+ 164/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:10:14.527578] user = 99890 MPDA- 164/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7666666666666666
Training on augumented user 104668 0/50 current_auc = 0.7666666666666666
User 104668 AUC after training: 0.7666666666666666
User 104668 does not improve AUC. Reverting changes.
Training on augumented user 83850 1/50 current_auc = 0.7666666666666666
User 83850 AUC after training: 0.7666666666666666
User 83850 does not improve AUC. Reverting changes.
Training on augumented user 34504 2/50 current_auc = 0.7666666666666666
User 34504 AUC after training: 0.7722222222222221
User 34504 improves AUC. Keeping the model.
Training on augumented user 137519 3/50 current_auc = 0.7722222222222221
User 137519 AUC after training: 0.7666666666666666
User 137519 does not improve AUC. Reverting changes.
Training on augumented user 113418 4/50 current_auc = 0.7722222222222221
User 113418 AUC after training: 0.7888888888888889
User 113418 improves AUC. Keeping the model.
Training on augumented user 16029 5/50 current_auc = 0.7888888888888889
User 16029 AUC after training: 0.7888888888888889
User 16029 does not improve AUC. Reverting changes.
Training on augumented user 63821 6/50 current_auc = 0.7888888888888889
User 63821 AUC after training: 0.7666666666666666
User 63821 does not improve AUC. Reverting changes.
Training on augumented user 69355 7/50 current_auc = 0.7888888888888889
User 69355 AUC after training: 0.7888888888888889
User 69355 does not improve AUC. Reverting changes.
Training on augumented user 132994 8/50 current_auc = 0.7888888888888889
User 132994 AUC after training: 0.7888888888888889
User 132994 does not improve AUC. Reverting changes.
Training on augumented user 26468 9/50 current_auc = 0.7888888888888889
User 26468 AUC after training: 0.7833333333333333
User 26468 does not improve AUC. Reverting changes.
Training on augumented user 31505 10/50 current_auc = 0.7888888888888889
User 31505 AUC after training: 0.7888888888888889
User 31505 does not improve AUC. Reverting changes.
Training on augumented user 69048 11/50 current_auc = 0.7888888888888889
User 69048 AUC after training: 0.7777777777777777
User 69048 does not improve AUC. Reverting changes.
Training on augumented user 77160 12/50 current_auc = 0.7888888888888889
User 77160 AUC after training: 0.7777777777777777
User 77160 does not improve AUC. Reverting changes.
Training on augumented user 124205 13/50 current_auc = 0.7888888888888889
User 124205 AUC after training: 0.7888888888888889
User 124205 does not improve AUC. Reverting changes.
Training on augumented user 51390 14/50 current_auc = 0.7888888888888889
User 51390 AUC after training: 0.7888888888888889
User 51390 does not improve AUC. Reverting changes.
Training on augumented user 12582 15/50 current_auc = 0.7888888888888889
User 12582 AUC after training: 0.7888888888888889
User 12582 does not improve AUC. Reverting changes.
Training on augumented user 41774 16/50 current_auc = 0.7888888888888889
User 41774 AUC after training: 0.7888888888888889
User 41774 does not improve AUC. Reverting changes.
Training on augumented user 123551 17/50 current_auc = 0.7888888888888889
User 123551 AUC after training: 0.7888888888888889
User 123551 does not improve AUC. Reverting changes.
Training on augumented user 59799 18/50 current_auc = 0.7888888888888889
User 59799 AUC after training: 0.7833333333333333
User 59799 does not improve AUC. Reverting changes.
Training on augumented user 133084 19/50 current_auc = 0.7888888888888889
User 133084 AUC after training: 0.7833333333333333
User 133084 does not improve AUC. Reverting changes.
Training on augumented user 124872 20/50 current_auc = 0.7888888888888889
User 124872 AUC after training: 0.7888888888888889
User 124872 does not improve AUC. Reverting changes.
Training on augumented user 38070 21/50 current_auc = 0.7888888888888889
User 38070 AUC after training: 0.7833333333333333
User 38070 does not improve AUC. Reverting changes.
Training on augumented user 96452 22/50 current_auc = 0.7888888888888889
User 96452 AUC after training: 0.7777777777777777
User 96452 does not improve AUC. Reverting changes.
Training on augumented user 43837 23/50 current_auc = 0.7888888888888889
User 43837 AUC after training: 0.7888888888888889
User 43837 does not improve AUC. Reverting changes.
Training on augumented user 9001 24/50 current_auc = 0.7888888888888889
User 9001 AUC after training: 0.7888888888888889
User 9001 does not improve AUC. Reverting changes.
Training on augumented user 8702 25/50 current_auc = 0.7888888888888889
User 8702 AUC after training: 0.7833333333333333
User 8702 does not improve AUC. Reverting changes.
Training on augumented user 97236 26/50 current_auc = 0.7888888888888889
User 97236 AUC after training: 0.7833333333333333
User 97236 does not improve AUC. Reverting changes.
Training on augumented user 41991 27/50 current_auc = 0.7888888888888889
User 41991 AUC after training: 0.7888888888888889
User 41991 does not improve AUC. Reverting changes.
Training on augumented user 13860 28/50 current_auc = 0.7888888888888889
User 13860 AUC after training: 0.7888888888888889
User 13860 does not improve AUC. Reverting changes.
Training on augumented user 40603 29/50 current_auc = 0.7888888888888889
User 40603 AUC after training: 0.7888888888888889
User 40603 does not improve AUC. Reverting changes.
Training on augumented user 49790 30/50 current_auc = 0.7888888888888889
User 49790 AUC after training: 0.7833333333333333
User 49790 does not improve AUC. Reverting changes.
Training on augumented user 85777 31/50 current_auc = 0.7888888888888889
User 85777 AUC after training: 0.7777777777777778
User 85777 does not improve AUC. Reverting changes.
Training on augumented user 86143 32/50 current_auc = 0.7888888888888889
User 86143 AUC after training: 0.7888888888888889
User 86143 does not improve AUC. Reverting changes.
Training on augumented user 75929 33/50 current_auc = 0.7888888888888889
User 75929 AUC after training: 0.7833333333333333
User 75929 does not improve AUC. Reverting changes.
Training on augumented user 56174 34/50 current_auc = 0.7888888888888889
User 56174 AUC after training: 0.7722222222222221
User 56174 does not improve AUC. Reverting changes.
Training on augumented user 130271 35/50 current_auc = 0.7888888888888889
User 130271 AUC after training: 0.7833333333333333
User 130271 does not improve AUC. Reverting changes.
Training on augumented user 109745 36/50 current_auc = 0.7888888888888889
User 109745 AUC after training: 0.7666666666666666
User 109745 does not improve AUC. Reverting changes.
Training on augumented user 39501 37/50 current_auc = 0.7888888888888889
User 39501 AUC after training: 0.7888888888888889
User 39501 does not improve AUC. Reverting changes.
Training on augumented user 121119 38/50 current_auc = 0.7888888888888889
User 121119 AUC after training: 0.7722222222222221
User 121119 does not improve AUC. Reverting changes.
Training on augumented user 52671 39/50 current_auc = 0.7888888888888889
User 52671 AUC after training: 0.7777777777777777
User 52671 does not improve AUC. Reverting changes.
Training on augumented user 27349 40/50 current_auc = 0.7888888888888889
User 27349 AUC after training: 0.7777777777777777
User 27349 does not improve AUC. Reverting changes.
Training on augumented user 89660 41/50 current_auc = 0.7888888888888889
User 89660 AUC after training: 0.7888888888888889
User 89660 does not improve AUC. Reverting changes.
Training on augumented user 132764 42/50 current_auc = 0.7888888888888889
User 132764 AUC after training: 0.7888888888888889
User 132764 does not improve AUC. Reverting changes.
Training on augumented user 58903 43/50 current_auc = 0.7888888888888889
User 58903 AUC after training: 0.7888888888888889
User 58903 does not improve AUC. Reverting changes.
Training on augumented user 137751 44/50 current_auc = 0.7888888888888889
User 137751 AUC after training: 0.7888888888888889
User 137751 does not improve AUC. Reverting changes.
Training on augumented user 104674 45/50 current_auc = 0.7888888888888889
User 104674 AUC after training: 0.7777777777777777
User 104674 does not improve AUC. Reverting changes.
Training on augumented user 55364 46/50 current_auc = 0.7888888888888889
User 55364 AUC after training: 0.7666666666666666
User 55364 does not improve AUC. Reverting changes.
Training on augumented user 98895 47/50 current_auc = 0.7888888888888889
User 98895 AUC after training: 0.7888888888888889
User 98895 does not improve AUC. Reverting changes.
Training on augumented user 73217 48/50 current_auc = 0.7888888888888889
User 73217 AUC after training: 0.7888888888888889
User 73217 does not improve AUC. Reverting changes.
Training on augumented user 85203 49/50 current_auc = 0.7888888888888889
User 85203 AUC after training: 0.7888888888888889
User 85203 does not improve AUC. Reverting changes.
[2024-12-02 19:10:46.724075] start test user 99892 165/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:10:47.327893] start test user 99892 165/567 recall augumented users by random, augumented_users = [5126, 103028, 99393, 69251, 74846, 52487, 98607, 72594, 45979, 127421, 56692, 75095, 54234, 4558, 128371, 75758, 30854, 29168, 111609, 1696, 55830, 88700, 26623, 81444, 66307, 132887, 93556, 133694, 61460, 75845, 89448, 55255, 23874, 43698, 81212, 84924, 82806, 42840, 74254, 86841, 60103, 60561, 117654, 75586, 93868, 91911, 40680, 41203, 38804, 25404]
[2024-12-02 19:10:47.344392] user = 99892 Cloud 165/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:10:47.351577] user = 99892 Local 165/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:10:47.375584] user = 99892 Local+ 165/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:10:50.796971] user = 99892 MPDA- 165/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 5126 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5126 AUC after training: 0.5
User 5126 does not improve AUC. Reverting changes.
Training on augumented user 103028 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103028 AUC after training: 0.5
User 103028 does not improve AUC. Reverting changes.
Training on augumented user 99393 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99393 AUC after training: 0.5
User 99393 does not improve AUC. Reverting changes.
Training on augumented user 69251 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 69251 AUC after training: 0.5
User 69251 does not improve AUC. Reverting changes.
Training on augumented user 74846 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74846 AUC after training: 0.5
User 74846 does not improve AUC. Reverting changes.
Training on augumented user 52487 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 52487 AUC after training: 0.5
User 52487 does not improve AUC. Reverting changes.
Training on augumented user 98607 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98607 AUC after training: 0.5
User 98607 does not improve AUC. Reverting changes.
Training on augumented user 72594 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72594 AUC after training: 0.5
User 72594 does not improve AUC. Reverting changes.
Training on augumented user 45979 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45979 AUC after training: 0.5
User 45979 does not improve AUC. Reverting changes.
Training on augumented user 127421 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127421 AUC after training: 0.5
User 127421 does not improve AUC. Reverting changes.
Training on augumented user 56692 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56692 AUC after training: 0.5
User 56692 does not improve AUC. Reverting changes.
Training on augumented user 75095 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75095 AUC after training: 0.5
User 75095 does not improve AUC. Reverting changes.
Training on augumented user 54234 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54234 AUC after training: 0.5
User 54234 does not improve AUC. Reverting changes.
Training on augumented user 4558 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4558 AUC after training: 0.5
User 4558 does not improve AUC. Reverting changes.
Training on augumented user 128371 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128371 AUC after training: 0.5
User 128371 does not improve AUC. Reverting changes.
Training on augumented user 75758 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75758 AUC after training: 0.5
User 75758 does not improve AUC. Reverting changes.
Training on augumented user 30854 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30854 AUC after training: 0.5
User 30854 does not improve AUC. Reverting changes.
Training on augumented user 29168 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29168 AUC after training: 0.5
User 29168 does not improve AUC. Reverting changes.
Training on augumented user 111609 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111609 AUC after training: 0.5
User 111609 does not improve AUC. Reverting changes.
Training on augumented user 1696 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1696 AUC after training: 0.5
User 1696 does not improve AUC. Reverting changes.
Training on augumented user 55830 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55830 AUC after training: 0.5
User 55830 does not improve AUC. Reverting changes.
Training on augumented user 88700 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88700 AUC after training: 0.5
User 88700 does not improve AUC. Reverting changes.
Training on augumented user 26623 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26623 AUC after training: 0.5
User 26623 does not improve AUC. Reverting changes.
Training on augumented user 81444 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81444 AUC after training: 0.5
User 81444 does not improve AUC. Reverting changes.
Training on augumented user 66307 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66307 AUC after training: 0.5
User 66307 does not improve AUC. Reverting changes.
Training on augumented user 132887 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132887 AUC after training: 0.5
User 132887 does not improve AUC. Reverting changes.
Training on augumented user 93556 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93556 AUC after training: 0.5
User 93556 does not improve AUC. Reverting changes.
Training on augumented user 133694 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133694 AUC after training: 0.5
User 133694 does not improve AUC. Reverting changes.
Training on augumented user 61460 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61460 AUC after training: 0.5
User 61460 does not improve AUC. Reverting changes.
Training on augumented user 75845 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75845 AUC after training: 0.5
User 75845 does not improve AUC. Reverting changes.
Training on augumented user 89448 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89448 AUC after training: 0.5
User 89448 does not improve AUC. Reverting changes.
Training on augumented user 55255 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55255 AUC after training: 0.5
User 55255 does not improve AUC. Reverting changes.
Training on augumented user 23874 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23874 AUC after training: 0.5
User 23874 does not improve AUC. Reverting changes.
Training on augumented user 43698 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43698 AUC after training: 0.5
User 43698 does not improve AUC. Reverting changes.
Training on augumented user 81212 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81212 AUC after training: 0.5
User 81212 does not improve AUC. Reverting changes.
Training on augumented user 84924 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84924 AUC after training: 0.5
User 84924 does not improve AUC. Reverting changes.
Training on augumented user 82806 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82806 AUC after training: 0.5
User 82806 does not improve AUC. Reverting changes.
Training on augumented user 42840 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42840 AUC after training: 0.5
User 42840 does not improve AUC. Reverting changes.
Training on augumented user 74254 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74254 AUC after training: 0.5
User 74254 does not improve AUC. Reverting changes.
Training on augumented user 86841 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86841 AUC after training: 0.5
User 86841 does not improve AUC. Reverting changes.
Training on augumented user 60103 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60103 AUC after training: 0.5
User 60103 does not improve AUC. Reverting changes.
Training on augumented user 60561 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60561 AUC after training: 0.5
User 60561 does not improve AUC. Reverting changes.
Training on augumented user 117654 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117654 AUC after training: 0.5
User 117654 does not improve AUC. Reverting changes.
Training on augumented user 75586 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75586 AUC after training: 0.5
User 75586 does not improve AUC. Reverting changes.
Training on augumented user 93868 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93868 AUC after training: 0.5
User 93868 does not improve AUC. Reverting changes.
Training on augumented user 91911 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91911 AUC after training: 0.5
User 91911 does not improve AUC. Reverting changes.
Training on augumented user 40680 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40680 AUC after training: 0.5
User 40680 does not improve AUC. Reverting changes.
Training on augumented user 41203 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41203 AUC after training: 0.5
User 41203 does not improve AUC. Reverting changes.
Training on augumented user 38804 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38804 AUC after training: 0.5
User 38804 does not improve AUC. Reverting changes.
Training on augumented user 25404 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25404 AUC after training: 0.5
User 25404 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:11:22.659270] start test user 99930 166/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:11:23.087011] start test user 99930 166/567 recall augumented users by random, augumented_users = [99487, 88393, 116887, 15128, 79921, 99545, 109689, 29020, 70940, 6999, 39350, 7587, 52782, 68110, 137108, 64273, 109877, 75999, 42142, 33902, 34078, 38262, 133877, 16970, 56214, 129446, 35654, 131674, 117838, 88693, 31863, 96546, 105674, 119924, 119115, 90198, 9096, 105045, 101012, 62668, 49857, 49938, 113463, 66434, 25143, 126350, 35706, 134863, 56386, 99903]
[2024-12-02 19:11:23.102441] user = 99930 Cloud 166/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:11:23.120242] user = 99930 Local 166/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:11:23.213985] user = 99930 Local+ 166/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:11:25.705530] user = 99930 MPDA- 166/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 99487 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99487 AUC after training: 0.5
User 99487 does not improve AUC. Reverting changes.
Training on augumented user 88393 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88393 AUC after training: 0.5
User 88393 does not improve AUC. Reverting changes.
Training on augumented user 116887 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116887 AUC after training: 0.5
User 116887 does not improve AUC. Reverting changes.
Training on augumented user 15128 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15128 AUC after training: 0.5
User 15128 does not improve AUC. Reverting changes.
Training on augumented user 79921 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79921 AUC after training: 0.5
User 79921 does not improve AUC. Reverting changes.
Training on augumented user 99545 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99545 AUC after training: 0.5
User 99545 does not improve AUC. Reverting changes.
Training on augumented user 109689 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109689 AUC after training: 0.5
User 109689 does not improve AUC. Reverting changes.
Training on augumented user 29020 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29020 AUC after training: 0.5
User 29020 does not improve AUC. Reverting changes.
Training on augumented user 70940 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70940 AUC after training: 0.5
User 70940 does not improve AUC. Reverting changes.
Training on augumented user 6999 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6999 AUC after training: 0.5
User 6999 does not improve AUC. Reverting changes.
Training on augumented user 39350 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 39350 AUC after training: 0.5
User 39350 does not improve AUC. Reverting changes.
Training on augumented user 7587 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7587 AUC after training: 0.5
User 7587 does not improve AUC. Reverting changes.
Training on augumented user 52782 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 52782 AUC after training: 0.5
User 52782 does not improve AUC. Reverting changes.
Training on augumented user 68110 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68110 AUC after training: 0.5
User 68110 does not improve AUC. Reverting changes.
Training on augumented user 137108 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137108 AUC after training: 0.5
User 137108 does not improve AUC. Reverting changes.
Training on augumented user 64273 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64273 AUC after training: 0.5
User 64273 does not improve AUC. Reverting changes.
Training on augumented user 109877 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109877 AUC after training: 0.5
User 109877 does not improve AUC. Reverting changes.
Training on augumented user 75999 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75999 AUC after training: 0.5
User 75999 does not improve AUC. Reverting changes.
Training on augumented user 42142 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42142 AUC after training: 0.5
User 42142 does not improve AUC. Reverting changes.
Training on augumented user 33902 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33902 AUC after training: 0.5
User 33902 does not improve AUC. Reverting changes.
Training on augumented user 34078 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 34078 AUC after training: 0.5
User 34078 does not improve AUC. Reverting changes.
Training on augumented user 38262 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38262 AUC after training: 0.5
User 38262 does not improve AUC. Reverting changes.
Training on augumented user 133877 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133877 AUC after training: 0.5
User 133877 does not improve AUC. Reverting changes.
Training on augumented user 16970 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16970 AUC after training: 0.5
User 16970 does not improve AUC. Reverting changes.
Training on augumented user 56214 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56214 AUC after training: 0.5
User 56214 does not improve AUC. Reverting changes.
Training on augumented user 129446 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129446 AUC after training: 0.5
User 129446 does not improve AUC. Reverting changes.
Training on augumented user 35654 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35654 AUC after training: 0.5
User 35654 does not improve AUC. Reverting changes.
Training on augumented user 131674 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131674 AUC after training: 0.5
User 131674 does not improve AUC. Reverting changes.
Training on augumented user 117838 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117838 AUC after training: 0.5
User 117838 does not improve AUC. Reverting changes.
Training on augumented user 88693 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88693 AUC after training: 0.5
User 88693 does not improve AUC. Reverting changes.
Training on augumented user 31863 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 31863 AUC after training: 0.5
User 31863 does not improve AUC. Reverting changes.
Training on augumented user 96546 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96546 AUC after training: 0.5
User 96546 does not improve AUC. Reverting changes.
Training on augumented user 105674 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105674 AUC after training: 0.5
User 105674 does not improve AUC. Reverting changes.
Training on augumented user 119924 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 119924 AUC after training: 0.5
User 119924 does not improve AUC. Reverting changes.
Training on augumented user 119115 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 119115 AUC after training: 0.5
User 119115 does not improve AUC. Reverting changes.
Training on augumented user 90198 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90198 AUC after training: 0.5
User 90198 does not improve AUC. Reverting changes.
Training on augumented user 9096 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9096 AUC after training: 0.5
User 9096 does not improve AUC. Reverting changes.
Training on augumented user 105045 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105045 AUC after training: 0.5
User 105045 does not improve AUC. Reverting changes.
Training on augumented user 101012 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101012 AUC after training: 0.5
User 101012 does not improve AUC. Reverting changes.
Training on augumented user 62668 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62668 AUC after training: 0.5
User 62668 does not improve AUC. Reverting changes.
Training on augumented user 49857 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49857 AUC after training: 0.5
User 49857 does not improve AUC. Reverting changes.
Training on augumented user 49938 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49938 AUC after training: 0.5
User 49938 does not improve AUC. Reverting changes.
Training on augumented user 113463 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113463 AUC after training: 0.5
User 113463 does not improve AUC. Reverting changes.
Training on augumented user 66434 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66434 AUC after training: 0.5
User 66434 does not improve AUC. Reverting changes.
Training on augumented user 25143 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25143 AUC after training: 0.5
User 25143 does not improve AUC. Reverting changes.
Training on augumented user 126350 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126350 AUC after training: 0.5
User 126350 does not improve AUC. Reverting changes.
Training on augumented user 35706 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35706 AUC after training: 0.5
User 35706 does not improve AUC. Reverting changes.
Training on augumented user 134863 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134863 AUC after training: 0.5
User 134863 does not improve AUC. Reverting changes.
Training on augumented user 56386 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56386 AUC after training: 0.5
User 56386 does not improve AUC. Reverting changes.
Training on augumented user 99903 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99903 AUC after training: 0.5
User 99903 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:11:55.042958] start test user 99985 167/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:11:55.449764] start test user 99985 167/567 recall augumented users by random, augumented_users = [29685, 12313, 78300, 72060, 53633, 52661, 110679, 42657, 56375, 104422, 19861, 111479, 95334, 31071, 93538, 102710, 65627, 45099, 3044, 34138, 84053, 95797, 104052, 1017, 102584, 13465, 23686, 16706, 44539, 31623, 63489, 92166, 126940, 83100, 134514, 82086, 41371, 28859, 36865, 37162, 35178, 41933, 41049, 24194, 44103, 51266, 30950, 73997, 23251, 72544]
[2024-12-02 19:11:55.465399] user = 99985 Cloud 167/567
[2024-12-02 19:11:55.490514] user = 99985 Local 167/567
[2024-12-02 19:11:55.569431] user = 99985 Local+ 167/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:11:57.869780] user = 99985 MPDA- 167/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7611111111111111
Training on augumented user 29685 0/50 current_auc = 0.7611111111111111
User 29685 AUC after training: 0.7610294117647058
User 29685 does not improve AUC. Reverting changes.
Training on augumented user 12313 1/50 current_auc = 0.7611111111111111
User 12313 AUC after training: 0.7611111111111112
User 12313 improves AUC. Keeping the model.
Training on augumented user 78300 2/50 current_auc = 0.7611111111111112
User 78300 AUC after training: 0.7612745098039216
User 78300 improves AUC. Keeping the model.
Training on augumented user 72060 3/50 current_auc = 0.7612745098039216
User 72060 AUC after training: 0.7609477124183006
User 72060 does not improve AUC. Reverting changes.
Training on augumented user 53633 4/50 current_auc = 0.7612745098039216
User 53633 AUC after training: 0.761029411764706
User 53633 does not improve AUC. Reverting changes.
Training on augumented user 52661 5/50 current_auc = 0.7612745098039216
User 52661 AUC after training: 0.759967320261438
User 52661 does not improve AUC. Reverting changes.
Training on augumented user 110679 6/50 current_auc = 0.7612745098039216
User 110679 AUC after training: 0.7609477124183007
User 110679 does not improve AUC. Reverting changes.
Training on augumented user 42657 7/50 current_auc = 0.7612745098039216
User 42657 AUC after training: 0.7615196078431372
User 42657 improves AUC. Keeping the model.
Training on augumented user 56375 8/50 current_auc = 0.7615196078431372
User 56375 AUC after training: 0.7609477124183006
User 56375 does not improve AUC. Reverting changes.
Training on augumented user 104422 9/50 current_auc = 0.7615196078431372
User 104422 AUC after training: 0.7616013071895426
User 104422 improves AUC. Keeping the model.
Training on augumented user 19861 10/50 current_auc = 0.7616013071895426
User 19861 AUC after training: 0.761029411764706
User 19861 does not improve AUC. Reverting changes.
Training on augumented user 111479 11/50 current_auc = 0.7616013071895426
User 111479 AUC after training: 0.7613562091503268
User 111479 does not improve AUC. Reverting changes.
Training on augumented user 95334 12/50 current_auc = 0.7616013071895426
User 95334 AUC after training: 0.7613562091503268
User 95334 does not improve AUC. Reverting changes.
Training on augumented user 31071 13/50 current_auc = 0.7616013071895426
User 31071 AUC after training: 0.7606209150326798
User 31071 does not improve AUC. Reverting changes.
Training on augumented user 93538 14/50 current_auc = 0.7616013071895426
User 93538 AUC after training: 0.7608660130718955
User 93538 does not improve AUC. Reverting changes.
Training on augumented user 102710 15/50 current_auc = 0.7616013071895426
User 102710 AUC after training: 0.7617647058823529
User 102710 improves AUC. Keeping the model.
Training on augumented user 65627 16/50 current_auc = 0.7617647058823529
User 65627 AUC after training: 0.761764705882353
User 65627 improves AUC. Keeping the model.
Training on augumented user 45099 17/50 current_auc = 0.761764705882353
User 45099 AUC after training: 0.7610294117647058
User 45099 does not improve AUC. Reverting changes.
Training on augumented user 3044 18/50 current_auc = 0.761764705882353
User 3044 AUC after training: 0.7616830065359478
User 3044 does not improve AUC. Reverting changes.
Training on augumented user 34138 19/50 current_auc = 0.761764705882353
User 34138 AUC after training: 0.761764705882353
User 34138 does not improve AUC. Reverting changes.
Training on augumented user 84053 20/50 current_auc = 0.761764705882353
User 84053 AUC after training: 0.7613562091503269
User 84053 does not improve AUC. Reverting changes.
Training on augumented user 95797 21/50 current_auc = 0.761764705882353
User 95797 AUC after training: 0.7620915032679739
User 95797 improves AUC. Keeping the model.
Training on augumented user 104052 22/50 current_auc = 0.7620915032679739
User 104052 AUC after training: 0.7618464052287581
User 104052 does not improve AUC. Reverting changes.
Training on augumented user 1017 23/50 current_auc = 0.7620915032679739
User 1017 AUC after training: 0.761764705882353
User 1017 does not improve AUC. Reverting changes.
Training on augumented user 102584 24/50 current_auc = 0.7620915032679739
User 102584 AUC after training: 0.7615196078431373
User 102584 does not improve AUC. Reverting changes.
Training on augumented user 13465 25/50 current_auc = 0.7620915032679739
User 13465 AUC after training: 0.7617647058823529
User 13465 does not improve AUC. Reverting changes.
Training on augumented user 23686 26/50 current_auc = 0.7620915032679739
User 23686 AUC after training: 0.7616830065359478
User 23686 does not improve AUC. Reverting changes.
Training on augumented user 16706 27/50 current_auc = 0.7620915032679739
User 16706 AUC after training: 0.7616830065359478
User 16706 does not improve AUC. Reverting changes.
Training on augumented user 44539 28/50 current_auc = 0.7620915032679739
User 44539 AUC after training: 0.7616013071895426
User 44539 does not improve AUC. Reverting changes.
Training on augumented user 31623 29/50 current_auc = 0.7620915032679739
User 31623 AUC after training: 0.7613562091503269
User 31623 does not improve AUC. Reverting changes.
Training on augumented user 63489 30/50 current_auc = 0.7620915032679739
User 63489 AUC after training: 0.7620098039215687
User 63489 does not improve AUC. Reverting changes.
Training on augumented user 92166 31/50 current_auc = 0.7620915032679739
User 92166 AUC after training: 0.7615196078431372
User 92166 does not improve AUC. Reverting changes.
Training on augumented user 126940 32/50 current_auc = 0.7620915032679739
User 126940 AUC after training: 0.761764705882353
User 126940 does not improve AUC. Reverting changes.
Training on augumented user 83100 33/50 current_auc = 0.7620915032679739
User 83100 AUC after training: 0.7615196078431373
User 83100 does not improve AUC. Reverting changes.
Training on augumented user 134514 34/50 current_auc = 0.7620915032679739
User 134514 AUC after training: 0.7618464052287582
User 134514 does not improve AUC. Reverting changes.
Training on augumented user 82086 35/50 current_auc = 0.7620915032679739
User 82086 AUC after training: 0.7618464052287582
User 82086 does not improve AUC. Reverting changes.
Training on augumented user 41371 36/50 current_auc = 0.7620915032679739
User 41371 AUC after training: 0.7622549019607844
User 41371 improves AUC. Keeping the model.
Training on augumented user 28859 37/50 current_auc = 0.7622549019607844
User 28859 AUC after training: 0.762173202614379
User 28859 does not improve AUC. Reverting changes.
Training on augumented user 36865 38/50 current_auc = 0.7622549019607844
User 36865 AUC after training: 0.7620098039215687
User 36865 does not improve AUC. Reverting changes.
Training on augumented user 37162 39/50 current_auc = 0.7622549019607844
User 37162 AUC after training: 0.7619281045751635
User 37162 does not improve AUC. Reverting changes.
Training on augumented user 35178 40/50 current_auc = 0.7622549019607844
User 35178 AUC after training: 0.762173202614379
User 35178 does not improve AUC. Reverting changes.
Training on augumented user 41933 41/50 current_auc = 0.7622549019607844
User 41933 AUC after training: 0.7620915032679739
User 41933 does not improve AUC. Reverting changes.
Training on augumented user 41049 42/50 current_auc = 0.7622549019607844
User 41049 AUC after training: 0.7617647058823529
User 41049 does not improve AUC. Reverting changes.
Training on augumented user 24194 43/50 current_auc = 0.7622549019607844
User 24194 AUC after training: 0.7623366013071895
User 24194 improves AUC. Keeping the model.
Training on augumented user 44103 44/50 current_auc = 0.7623366013071895
User 44103 AUC after training: 0.7621732026143792
User 44103 does not improve AUC. Reverting changes.
Training on augumented user 51266 45/50 current_auc = 0.7623366013071895
User 51266 AUC after training: 0.7633169934640524
User 51266 improves AUC. Keeping the model.
Training on augumented user 30950 46/50 current_auc = 0.7633169934640524
User 30950 AUC after training: 0.7631535947712419
User 30950 does not improve AUC. Reverting changes.
Training on augumented user 73997 47/50 current_auc = 0.7633169934640524
User 73997 AUC after training: 0.7619281045751635
User 73997 does not improve AUC. Reverting changes.
Training on augumented user 23251 48/50 current_auc = 0.7633169934640524
User 23251 AUC after training: 0.7625816993464053
User 23251 does not improve AUC. Reverting changes.
Training on augumented user 72544 49/50 current_auc = 0.7633169934640524
User 72544 AUC after training: 0.7630718954248367
User 72544 does not improve AUC. Reverting changes.
[2024-12-02 19:12:28.045191] start test user 99999 168/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:12:28.472043] start test user 99999 168/567 recall augumented users by random, augumented_users = [38688, 39048, 67469, 138192, 126435, 15004, 64822, 93467, 34246, 96024, 110768, 29204, 18460, 136279, 30332, 14631, 15823, 83504, 40958, 35109, 133119, 39879, 98024, 83876, 90123, 77936, 121726, 112970, 26909, 132706, 108987, 78417, 63508, 96439, 132453, 105319, 111191, 55267, 89007, 2522, 93451, 54676, 55278, 23324, 1977, 24666, 13499, 84766, 126571, 115439]
[2024-12-02 19:12:28.494992] user = 99999 Cloud 168/567
[2024-12-02 19:12:28.516352] user = 99999 Local 168/567
[2024-12-02 19:12:28.554137] user = 99999 Local+ 168/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:12:30.873455] user = 99999 MPDA- 168/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7355447352404139
Training on augumented user 38688 0/50 current_auc = 0.7355447352404139
User 38688 AUC after training: 0.7355447352404139
User 38688 does not improve AUC. Reverting changes.
Training on augumented user 39048 1/50 current_auc = 0.7355447352404139
User 39048 AUC after training: 0.7352404138770541
User 39048 does not improve AUC. Reverting changes.
Training on augumented user 67469 2/50 current_auc = 0.7355447352404139
User 67469 AUC after training: 0.7355447352404139
User 67469 does not improve AUC. Reverting changes.
Training on augumented user 138192 3/50 current_auc = 0.7355447352404139
User 138192 AUC after training: 0.7361533779671333
User 138192 improves AUC. Keeping the model.
Training on augumented user 126435 4/50 current_auc = 0.7361533779671333
User 126435 AUC after training: 0.7373706634205721
User 126435 improves AUC. Keeping the model.
Training on augumented user 15004 5/50 current_auc = 0.7373706634205721
User 15004 AUC after training: 0.7367620206938527
User 15004 does not improve AUC. Reverting changes.
Training on augumented user 64822 6/50 current_auc = 0.7373706634205721
User 64822 AUC after training: 0.7370663420572124
User 64822 does not improve AUC. Reverting changes.
Training on augumented user 93467 7/50 current_auc = 0.7373706634205721
User 93467 AUC after training: 0.7367620206938527
User 93467 does not improve AUC. Reverting changes.
Training on augumented user 34246 8/50 current_auc = 0.7373706634205721
User 34246 AUC after training: 0.7370663420572124
User 34246 does not improve AUC. Reverting changes.
Training on augumented user 96024 9/50 current_auc = 0.7373706634205721
User 96024 AUC after training: 0.7370663420572124
User 96024 does not improve AUC. Reverting changes.
Training on augumented user 110768 10/50 current_auc = 0.7373706634205721
User 110768 AUC after training: 0.7370663420572123
User 110768 does not improve AUC. Reverting changes.
Training on augumented user 29204 11/50 current_auc = 0.7373706634205721
User 29204 AUC after training: 0.7358490566037735
User 29204 does not improve AUC. Reverting changes.
Training on augumented user 18460 12/50 current_auc = 0.7373706634205721
User 18460 AUC after training: 0.7373706634205721
User 18460 does not improve AUC. Reverting changes.
Training on augumented user 136279 13/50 current_auc = 0.7373706634205721
User 136279 AUC after training: 0.7370663420572124
User 136279 does not improve AUC. Reverting changes.
Training on augumented user 30332 14/50 current_auc = 0.7373706634205721
User 30332 AUC after training: 0.7370663420572124
User 30332 does not improve AUC. Reverting changes.
Training on augumented user 14631 15/50 current_auc = 0.7373706634205721
User 14631 AUC after training: 0.736457699330493
User 14631 does not improve AUC. Reverting changes.
Training on augumented user 15823 16/50 current_auc = 0.7373706634205721
User 15823 AUC after training: 0.7367620206938527
User 15823 does not improve AUC. Reverting changes.
Training on augumented user 83504 17/50 current_auc = 0.7373706634205721
User 83504 AUC after training: 0.7367620206938528
User 83504 does not improve AUC. Reverting changes.
Training on augumented user 40958 18/50 current_auc = 0.7373706634205721
User 40958 AUC after training: 0.7376749847839318
User 40958 improves AUC. Keeping the model.
Training on augumented user 35109 19/50 current_auc = 0.7376749847839318
User 35109 AUC after training: 0.7370663420572124
User 35109 does not improve AUC. Reverting changes.
Training on augumented user 133119 20/50 current_auc = 0.7376749847839318
User 133119 AUC after training: 0.7373706634205721
User 133119 does not improve AUC. Reverting changes.
Training on augumented user 39879 21/50 current_auc = 0.7376749847839318
User 39879 AUC after training: 0.7373706634205721
User 39879 does not improve AUC. Reverting changes.
Training on augumented user 98024 22/50 current_auc = 0.7376749847839318
User 98024 AUC after training: 0.7376749847839319
User 98024 improves AUC. Keeping the model.
Training on augumented user 83876 23/50 current_auc = 0.7376749847839319
User 83876 AUC after training: 0.7370663420572124
User 83876 does not improve AUC. Reverting changes.
Training on augumented user 90123 24/50 current_auc = 0.7376749847839319
User 90123 AUC after training: 0.7379793061472915
User 90123 improves AUC. Keeping the model.
Training on augumented user 77936 25/50 current_auc = 0.7379793061472915
User 77936 AUC after training: 0.7376749847839318
User 77936 does not improve AUC. Reverting changes.
Training on augumented user 121726 26/50 current_auc = 0.7379793061472915
User 121726 AUC after training: 0.7367620206938527
User 121726 does not improve AUC. Reverting changes.
Training on augumented user 112970 27/50 current_auc = 0.7379793061472915
User 112970 AUC after training: 0.7382836275106512
User 112970 improves AUC. Keeping the model.
Training on augumented user 26909 28/50 current_auc = 0.7382836275106512
User 26909 AUC after training: 0.7376749847839319
User 26909 does not improve AUC. Reverting changes.
Training on augumented user 132706 29/50 current_auc = 0.7382836275106512
User 132706 AUC after training: 0.7379793061472916
User 132706 does not improve AUC. Reverting changes.
Training on augumented user 108987 30/50 current_auc = 0.7382836275106512
User 108987 AUC after training: 0.7367620206938527
User 108987 does not improve AUC. Reverting changes.
Training on augumented user 78417 31/50 current_auc = 0.7382836275106512
User 78417 AUC after training: 0.7379793061472915
User 78417 does not improve AUC. Reverting changes.
Training on augumented user 63508 32/50 current_auc = 0.7382836275106512
User 63508 AUC after training: 0.7376749847839318
User 63508 does not improve AUC. Reverting changes.
Training on augumented user 96439 33/50 current_auc = 0.7382836275106512
User 96439 AUC after training: 0.7376749847839319
User 96439 does not improve AUC. Reverting changes.
Training on augumented user 132453 34/50 current_auc = 0.7382836275106512
User 132453 AUC after training: 0.7379793061472916
User 132453 does not improve AUC. Reverting changes.
Training on augumented user 105319 35/50 current_auc = 0.7382836275106512
User 105319 AUC after training: 0.7367620206938528
User 105319 does not improve AUC. Reverting changes.
Training on augumented user 111191 36/50 current_auc = 0.7382836275106512
User 111191 AUC after training: 0.7382836275106512
User 111191 does not improve AUC. Reverting changes.
Training on augumented user 55267 37/50 current_auc = 0.7382836275106512
User 55267 AUC after training: 0.7376749847839318
User 55267 does not improve AUC. Reverting changes.
Training on augumented user 89007 38/50 current_auc = 0.7382836275106512
User 89007 AUC after training: 0.7373706634205722
User 89007 does not improve AUC. Reverting changes.
Training on augumented user 2522 39/50 current_auc = 0.7382836275106512
User 2522 AUC after training: 0.7379793061472916
User 2522 does not improve AUC. Reverting changes.
Training on augumented user 93451 40/50 current_auc = 0.7382836275106512
User 93451 AUC after training: 0.7379793061472916
User 93451 does not improve AUC. Reverting changes.
Training on augumented user 54676 41/50 current_auc = 0.7382836275106512
User 54676 AUC after training: 0.7376749847839318
User 54676 does not improve AUC. Reverting changes.
Training on augumented user 55278 42/50 current_auc = 0.7382836275106512
User 55278 AUC after training: 0.7367620206938527
User 55278 does not improve AUC. Reverting changes.
Training on augumented user 23324 43/50 current_auc = 0.7382836275106512
User 23324 AUC after training: 0.7376749847839318
User 23324 does not improve AUC. Reverting changes.
Training on augumented user 1977 44/50 current_auc = 0.7382836275106512
User 1977 AUC after training: 0.7376749847839319
User 1977 does not improve AUC. Reverting changes.
Training on augumented user 24666 45/50 current_auc = 0.7382836275106512
User 24666 AUC after training: 0.7379793061472916
User 24666 does not improve AUC. Reverting changes.
Training on augumented user 13499 46/50 current_auc = 0.7382836275106512
User 13499 AUC after training: 0.7358490566037735
User 13499 does not improve AUC. Reverting changes.
Training on augumented user 84766 47/50 current_auc = 0.7382836275106512
User 84766 AUC after training: 0.7376749847839318
User 84766 does not improve AUC. Reverting changes.
Training on augumented user 126571 48/50 current_auc = 0.7382836275106512
User 126571 AUC after training: 0.7382836275106512
User 126571 does not improve AUC. Reverting changes.
Training on augumented user 115439 49/50 current_auc = 0.7382836275106512
User 115439 AUC after training: 0.7379793061472916
User 115439 does not improve AUC. Reverting changes.
[2024-12-02 19:12:59.178985] start test user 100019 169/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:12:59.871983] start test user 100019 169/567 recall augumented users by random, augumented_users = [76131, 124635, 88722, 37821, 40050, 109133, 92293, 12152, 99905, 51066, 95968, 138253, 95990, 94503, 103392, 73307, 136495, 85278, 53788, 74865, 90905, 31215, 92254, 43666, 93014, 121368, 76235, 98707, 102537, 44305, 16551, 72438, 90554, 98546, 2435, 102340, 64345, 95426, 97933, 113057, 67596, 71819, 6857, 75824, 61835, 114544, 32709, 25621, 66878, 59983]
[2024-12-02 19:12:59.893413] user = 100019 Cloud 169/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:12:59.899366] user = 100019 Local 169/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:12:59.924278] user = 100019 Local+ 169/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:13:03.284692] user = 100019 MPDA- 169/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 76131 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76131 AUC after training: 0.5
User 76131 does not improve AUC. Reverting changes.
Training on augumented user 124635 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124635 AUC after training: 0.5
User 124635 does not improve AUC. Reverting changes.
Training on augumented user 88722 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88722 AUC after training: 0.5
User 88722 does not improve AUC. Reverting changes.
Training on augumented user 37821 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37821 AUC after training: 0.5
User 37821 does not improve AUC. Reverting changes.
Training on augumented user 40050 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40050 AUC after training: 0.5
User 40050 does not improve AUC. Reverting changes.
Training on augumented user 109133 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109133 AUC after training: 0.5
User 109133 does not improve AUC. Reverting changes.
Training on augumented user 92293 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92293 AUC after training: 0.5
User 92293 does not improve AUC. Reverting changes.
Training on augumented user 12152 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12152 AUC after training: 0.5
User 12152 does not improve AUC. Reverting changes.
Training on augumented user 99905 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99905 AUC after training: 0.5
User 99905 does not improve AUC. Reverting changes.
Training on augumented user 51066 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51066 AUC after training: 0.5
User 51066 does not improve AUC. Reverting changes.
Training on augumented user 95968 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95968 AUC after training: 0.5
User 95968 does not improve AUC. Reverting changes.
Training on augumented user 138253 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 138253 AUC after training: 0.5
User 138253 does not improve AUC. Reverting changes.
Training on augumented user 95990 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95990 AUC after training: 0.5
User 95990 does not improve AUC. Reverting changes.
Training on augumented user 94503 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94503 AUC after training: 0.5
User 94503 does not improve AUC. Reverting changes.
Training on augumented user 103392 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103392 AUC after training: 0.5
User 103392 does not improve AUC. Reverting changes.
Training on augumented user 73307 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73307 AUC after training: 0.5
User 73307 does not improve AUC. Reverting changes.
Training on augumented user 136495 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136495 AUC after training: 0.5
User 136495 does not improve AUC. Reverting changes.
Training on augumented user 85278 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85278 AUC after training: 0.5
User 85278 does not improve AUC. Reverting changes.
Training on augumented user 53788 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53788 AUC after training: 0.5
User 53788 does not improve AUC. Reverting changes.
Training on augumented user 74865 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74865 AUC after training: 0.5
User 74865 does not improve AUC. Reverting changes.
Training on augumented user 90905 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90905 AUC after training: 0.5
User 90905 does not improve AUC. Reverting changes.
Training on augumented user 31215 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 31215 AUC after training: 0.5
User 31215 does not improve AUC. Reverting changes.
Training on augumented user 92254 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92254 AUC after training: 0.5
User 92254 does not improve AUC. Reverting changes.
Training on augumented user 43666 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43666 AUC after training: 0.5
User 43666 does not improve AUC. Reverting changes.
Training on augumented user 93014 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93014 AUC after training: 0.5
User 93014 does not improve AUC. Reverting changes.
Training on augumented user 121368 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121368 AUC after training: 0.5
User 121368 does not improve AUC. Reverting changes.
Training on augumented user 76235 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76235 AUC after training: 0.5
User 76235 does not improve AUC. Reverting changes.
Training on augumented user 98707 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98707 AUC after training: 0.5
User 98707 does not improve AUC. Reverting changes.
Training on augumented user 102537 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102537 AUC after training: 0.5
User 102537 does not improve AUC. Reverting changes.
Training on augumented user 44305 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44305 AUC after training: 0.5
User 44305 does not improve AUC. Reverting changes.
Training on augumented user 16551 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16551 AUC after training: 0.5
User 16551 does not improve AUC. Reverting changes.
Training on augumented user 72438 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72438 AUC after training: 0.5
User 72438 does not improve AUC. Reverting changes.
Training on augumented user 90554 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90554 AUC after training: 0.5
User 90554 does not improve AUC. Reverting changes.
Training on augumented user 98546 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98546 AUC after training: 0.5
User 98546 does not improve AUC. Reverting changes.
Training on augumented user 2435 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2435 AUC after training: 0.5
User 2435 does not improve AUC. Reverting changes.
Training on augumented user 102340 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102340 AUC after training: 0.5
User 102340 does not improve AUC. Reverting changes.
Training on augumented user 64345 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64345 AUC after training: 0.5
User 64345 does not improve AUC. Reverting changes.
Training on augumented user 95426 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95426 AUC after training: 0.5
User 95426 does not improve AUC. Reverting changes.
Training on augumented user 97933 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97933 AUC after training: 0.5
User 97933 does not improve AUC. Reverting changes.
Training on augumented user 113057 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113057 AUC after training: 0.5
User 113057 does not improve AUC. Reverting changes.
Training on augumented user 67596 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67596 AUC after training: 0.5
User 67596 does not improve AUC. Reverting changes.
Training on augumented user 71819 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71819 AUC after training: 0.5
User 71819 does not improve AUC. Reverting changes.
Training on augumented user 6857 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6857 AUC after training: 0.5
User 6857 does not improve AUC. Reverting changes.
Training on augumented user 75824 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75824 AUC after training: 0.5
User 75824 does not improve AUC. Reverting changes.
Training on augumented user 61835 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61835 AUC after training: 0.5
User 61835 does not improve AUC. Reverting changes.
Training on augumented user 114544 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114544 AUC after training: 0.5
User 114544 does not improve AUC. Reverting changes.
Training on augumented user 32709 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32709 AUC after training: 0.5
User 32709 does not improve AUC. Reverting changes.
Training on augumented user 25621 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25621 AUC after training: 0.5
User 25621 does not improve AUC. Reverting changes.
Training on augumented user 66878 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66878 AUC after training: 0.5
User 66878 does not improve AUC. Reverting changes.
Training on augumented user 59983 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59983 AUC after training: 0.5
User 59983 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:13:34.376840] start test user 100031 170/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:13:34.894094] start test user 100031 170/567 recall augumented users by random, augumented_users = [7439, 94234, 59728, 110697, 36497, 91727, 124423, 137557, 112499, 4467, 23747, 111771, 31236, 83736, 72230, 119662, 97537, 134802, 101599, 72580, 43917, 19187, 113763, 127932, 117881, 288, 115201, 38643, 68445, 101823, 111814, 37340, 88272, 104374, 116813, 11497, 100697, 108382, 88432, 115814, 93817, 121850, 111132, 78003, 49523, 124211, 27228, 117005, 6153, 50020]
[2024-12-02 19:13:34.910219] user = 100031 Cloud 170/567
[2024-12-02 19:13:34.919199] user = 100031 Local 170/567
[2024-12-02 19:13:34.938724] user = 100031 Local+ 170/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:13:37.038004] user = 100031 MPDA- 170/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.0
Training on augumented user 7439 0/50 current_auc = 0.0
User 7439 AUC after training: 0.0
User 7439 does not improve AUC. Reverting changes.
Training on augumented user 94234 1/50 current_auc = 0.0
User 94234 AUC after training: 0.0
User 94234 does not improve AUC. Reverting changes.
Training on augumented user 59728 2/50 current_auc = 0.0
User 59728 AUC after training: 0.0
User 59728 does not improve AUC. Reverting changes.
Training on augumented user 110697 3/50 current_auc = 0.0
User 110697 AUC after training: 0.0
User 110697 does not improve AUC. Reverting changes.
Training on augumented user 36497 4/50 current_auc = 0.0
User 36497 AUC after training: 0.0
User 36497 does not improve AUC. Reverting changes.
Training on augumented user 91727 5/50 current_auc = 0.0
User 91727 AUC after training: 0.0
User 91727 does not improve AUC. Reverting changes.
Training on augumented user 124423 6/50 current_auc = 0.0
User 124423 AUC after training: 0.0
User 124423 does not improve AUC. Reverting changes.
Training on augumented user 137557 7/50 current_auc = 0.0
User 137557 AUC after training: 0.0
User 137557 does not improve AUC. Reverting changes.
Training on augumented user 112499 8/50 current_auc = 0.0
User 112499 AUC after training: 0.0
User 112499 does not improve AUC. Reverting changes.
Training on augumented user 4467 9/50 current_auc = 0.0
User 4467 AUC after training: 0.0
User 4467 does not improve AUC. Reverting changes.
Training on augumented user 23747 10/50 current_auc = 0.0
User 23747 AUC after training: 0.0
User 23747 does not improve AUC. Reverting changes.
Training on augumented user 111771 11/50 current_auc = 0.0
User 111771 AUC after training: 0.0
User 111771 does not improve AUC. Reverting changes.
Training on augumented user 31236 12/50 current_auc = 0.0
User 31236 AUC after training: 0.0
User 31236 does not improve AUC. Reverting changes.
Training on augumented user 83736 13/50 current_auc = 0.0
User 83736 AUC after training: 0.0
User 83736 does not improve AUC. Reverting changes.
Training on augumented user 72230 14/50 current_auc = 0.0
User 72230 AUC after training: 0.0
User 72230 does not improve AUC. Reverting changes.
Training on augumented user 119662 15/50 current_auc = 0.0
User 119662 AUC after training: 0.0
User 119662 does not improve AUC. Reverting changes.
Training on augumented user 97537 16/50 current_auc = 0.0
User 97537 AUC after training: 0.0
User 97537 does not improve AUC. Reverting changes.
Training on augumented user 134802 17/50 current_auc = 0.0
User 134802 AUC after training: 0.0
User 134802 does not improve AUC. Reverting changes.
Training on augumented user 101599 18/50 current_auc = 0.0
User 101599 AUC after training: 0.0
User 101599 does not improve AUC. Reverting changes.
Training on augumented user 72580 19/50 current_auc = 0.0
User 72580 AUC after training: 0.0
User 72580 does not improve AUC. Reverting changes.
Training on augumented user 43917 20/50 current_auc = 0.0
User 43917 AUC after training: 0.0
User 43917 does not improve AUC. Reverting changes.
Training on augumented user 19187 21/50 current_auc = 0.0
User 19187 AUC after training: 0.0
User 19187 does not improve AUC. Reverting changes.
Training on augumented user 113763 22/50 current_auc = 0.0
User 113763 AUC after training: 0.0
User 113763 does not improve AUC. Reverting changes.
Training on augumented user 127932 23/50 current_auc = 0.0
User 127932 AUC after training: 0.0
User 127932 does not improve AUC. Reverting changes.
Training on augumented user 117881 24/50 current_auc = 0.0
User 117881 AUC after training: 0.0
User 117881 does not improve AUC. Reverting changes.
Training on augumented user 288 25/50 current_auc = 0.0
User 288 AUC after training: 0.0
User 288 does not improve AUC. Reverting changes.
Training on augumented user 115201 26/50 current_auc = 0.0
User 115201 AUC after training: 0.0
User 115201 does not improve AUC. Reverting changes.
Training on augumented user 38643 27/50 current_auc = 0.0
User 38643 AUC after training: 0.0
User 38643 does not improve AUC. Reverting changes.
Training on augumented user 68445 28/50 current_auc = 0.0
User 68445 AUC after training: 0.0
User 68445 does not improve AUC. Reverting changes.
Training on augumented user 101823 29/50 current_auc = 0.0
User 101823 AUC after training: 0.0
User 101823 does not improve AUC. Reverting changes.
Training on augumented user 111814 30/50 current_auc = 0.0
User 111814 AUC after training: 0.0
User 111814 does not improve AUC. Reverting changes.
Training on augumented user 37340 31/50 current_auc = 0.0
User 37340 AUC after training: 0.0
User 37340 does not improve AUC. Reverting changes.
Training on augumented user 88272 32/50 current_auc = 0.0
User 88272 AUC after training: 0.0
User 88272 does not improve AUC. Reverting changes.
Training on augumented user 104374 33/50 current_auc = 0.0
User 104374 AUC after training: 0.0
User 104374 does not improve AUC. Reverting changes.
Training on augumented user 116813 34/50 current_auc = 0.0
User 116813 AUC after training: 0.0
User 116813 does not improve AUC. Reverting changes.
Training on augumented user 11497 35/50 current_auc = 0.0
User 11497 AUC after training: 0.0
User 11497 does not improve AUC. Reverting changes.
Training on augumented user 100697 36/50 current_auc = 0.0
User 100697 AUC after training: 0.0
User 100697 does not improve AUC. Reverting changes.
Training on augumented user 108382 37/50 current_auc = 0.0
User 108382 AUC after training: 0.0
User 108382 does not improve AUC. Reverting changes.
Training on augumented user 88432 38/50 current_auc = 0.0
User 88432 AUC after training: 0.0
User 88432 does not improve AUC. Reverting changes.
Training on augumented user 115814 39/50 current_auc = 0.0
User 115814 AUC after training: 0.0
User 115814 does not improve AUC. Reverting changes.
Training on augumented user 93817 40/50 current_auc = 0.0
User 93817 AUC after training: 0.0
User 93817 does not improve AUC. Reverting changes.
Training on augumented user 121850 41/50 current_auc = 0.0
User 121850 AUC after training: 0.0
User 121850 does not improve AUC. Reverting changes.
Training on augumented user 111132 42/50 current_auc = 0.0
User 111132 AUC after training: 0.0
User 111132 does not improve AUC. Reverting changes.
Training on augumented user 78003 43/50 current_auc = 0.0
User 78003 AUC after training: 0.0
User 78003 does not improve AUC. Reverting changes.
Training on augumented user 49523 44/50 current_auc = 0.0
User 49523 AUC after training: 0.0
User 49523 does not improve AUC. Reverting changes.
Training on augumented user 124211 45/50 current_auc = 0.0
User 124211 AUC after training: 0.0
User 124211 does not improve AUC. Reverting changes.
Training on augumented user 27228 46/50 current_auc = 0.0
User 27228 AUC after training: 0.0
User 27228 does not improve AUC. Reverting changes.
Training on augumented user 117005 47/50 current_auc = 0.0
User 117005 AUC after training: 0.0
User 117005 does not improve AUC. Reverting changes.
Training on augumented user 6153 48/50 current_auc = 0.0
User 6153 AUC after training: 0.0
User 6153 does not improve AUC. Reverting changes.
Training on augumented user 50020 49/50 current_auc = 0.0
User 50020 AUC after training: 0.0
User 50020 does not improve AUC. Reverting changes.
[2024-12-02 19:14:09.214951] start test user 100081 171/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:14:09.699976] start test user 100081 171/567 recall augumented users by random, augumented_users = [56460, 84794, 124398, 132213, 25942, 15655, 47734, 116788, 1007, 53291, 130571, 131032, 134336, 11896, 54244, 58036, 54764, 130028, 11645, 77998, 103236, 19098, 33519, 90350, 65868, 117230, 129371, 13286, 96948, 99863, 72383, 35181, 86225, 57048, 39416, 93051, 133627, 47815, 20357, 124066, 5227, 8279, 88348, 84511, 60479, 9568, 78730, 87457, 428, 55735]
[2024-12-02 19:14:09.715036] user = 100081 Cloud 171/567
[2024-12-02 19:14:09.726217] user = 100081 Local 171/567
[2024-12-02 19:14:09.805189] user = 100081 Local+ 171/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:14:12.607755] user = 100081 MPDA- 171/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6355555555555555
Training on augumented user 56460 0/50 current_auc = 0.6355555555555555
User 56460 AUC after training: 0.6377777777777778
User 56460 improves AUC. Keeping the model.
Training on augumented user 84794 1/50 current_auc = 0.6377777777777778
User 84794 AUC after training: 0.6377777777777778
User 84794 does not improve AUC. Reverting changes.
Training on augumented user 124398 2/50 current_auc = 0.6377777777777778
User 124398 AUC after training: 0.6377777777777778
User 124398 does not improve AUC. Reverting changes.
Training on augumented user 132213 3/50 current_auc = 0.6377777777777778
User 132213 AUC after training: 0.6377777777777778
User 132213 does not improve AUC. Reverting changes.
Training on augumented user 25942 4/50 current_auc = 0.6377777777777778
User 25942 AUC after training: 0.6422222222222222
User 25942 improves AUC. Keeping the model.
Training on augumented user 15655 5/50 current_auc = 0.6422222222222222
User 15655 AUC after training: 0.6288888888888888
User 15655 does not improve AUC. Reverting changes.
Training on augumented user 47734 6/50 current_auc = 0.6422222222222222
User 47734 AUC after training: 0.6422222222222222
User 47734 does not improve AUC. Reverting changes.
Training on augumented user 116788 7/50 current_auc = 0.6422222222222222
User 116788 AUC after training: 0.64
User 116788 does not improve AUC. Reverting changes.
Training on augumented user 1007 8/50 current_auc = 0.6422222222222222
User 1007 AUC after training: 0.64
User 1007 does not improve AUC. Reverting changes.
Training on augumented user 53291 9/50 current_auc = 0.6422222222222222
User 53291 AUC after training: 0.6422222222222222
User 53291 does not improve AUC. Reverting changes.
Training on augumented user 130571 10/50 current_auc = 0.6422222222222222
User 130571 AUC after training: 0.6422222222222222
User 130571 does not improve AUC. Reverting changes.
Training on augumented user 131032 11/50 current_auc = 0.6422222222222222
User 131032 AUC after training: 0.6466666666666667
User 131032 improves AUC. Keeping the model.
Training on augumented user 134336 12/50 current_auc = 0.6466666666666667
User 134336 AUC after training: 0.6466666666666667
User 134336 does not improve AUC. Reverting changes.
Training on augumented user 11896 13/50 current_auc = 0.6466666666666667
User 11896 AUC after training: 0.6488888888888888
User 11896 improves AUC. Keeping the model.
Training on augumented user 54244 14/50 current_auc = 0.6488888888888888
User 54244 AUC after training: 0.6488888888888888
User 54244 does not improve AUC. Reverting changes.
Training on augumented user 58036 15/50 current_auc = 0.6488888888888888
User 58036 AUC after training: 0.6466666666666667
User 58036 does not improve AUC. Reverting changes.
Training on augumented user 54764 16/50 current_auc = 0.6488888888888888
User 54764 AUC after training: 0.6511111111111111
User 54764 improves AUC. Keeping the model.
Training on augumented user 130028 17/50 current_auc = 0.6511111111111111
User 130028 AUC after training: 0.6444444444444445
User 130028 does not improve AUC. Reverting changes.
Training on augumented user 11645 18/50 current_auc = 0.6511111111111111
User 11645 AUC after training: 0.6488888888888888
User 11645 does not improve AUC. Reverting changes.
Training on augumented user 77998 19/50 current_auc = 0.6511111111111111
User 77998 AUC after training: 0.6466666666666667
User 77998 does not improve AUC. Reverting changes.
Training on augumented user 103236 20/50 current_auc = 0.6511111111111111
User 103236 AUC after training: 0.6511111111111111
User 103236 does not improve AUC. Reverting changes.
Training on augumented user 19098 21/50 current_auc = 0.6511111111111111
User 19098 AUC after training: 0.6511111111111111
User 19098 does not improve AUC. Reverting changes.
Training on augumented user 33519 22/50 current_auc = 0.6511111111111111
User 33519 AUC after training: 0.6466666666666667
User 33519 does not improve AUC. Reverting changes.
Training on augumented user 90350 23/50 current_auc = 0.6511111111111111
User 90350 AUC after training: 0.6511111111111111
User 90350 does not improve AUC. Reverting changes.
Training on augumented user 65868 24/50 current_auc = 0.6511111111111111
User 65868 AUC after training: 0.6466666666666667
User 65868 does not improve AUC. Reverting changes.
Training on augumented user 117230 25/50 current_auc = 0.6511111111111111
User 117230 AUC after training: 0.6488888888888888
User 117230 does not improve AUC. Reverting changes.
Training on augumented user 129371 26/50 current_auc = 0.6511111111111111
User 129371 AUC after training: 0.6488888888888888
User 129371 does not improve AUC. Reverting changes.
Training on augumented user 13286 27/50 current_auc = 0.6511111111111111
User 13286 AUC after training: 0.6511111111111111
User 13286 does not improve AUC. Reverting changes.
Training on augumented user 96948 28/50 current_auc = 0.6511111111111111
User 96948 AUC after training: 0.6511111111111111
User 96948 does not improve AUC. Reverting changes.
Training on augumented user 99863 29/50 current_auc = 0.6511111111111111
User 99863 AUC after training: 0.6355555555555555
User 99863 does not improve AUC. Reverting changes.
Training on augumented user 72383 30/50 current_auc = 0.6511111111111111
User 72383 AUC after training: 0.6488888888888888
User 72383 does not improve AUC. Reverting changes.
Training on augumented user 35181 31/50 current_auc = 0.6511111111111111
User 35181 AUC after training: 0.6511111111111111
User 35181 does not improve AUC. Reverting changes.
Training on augumented user 86225 32/50 current_auc = 0.6511111111111111
User 86225 AUC after training: 0.6511111111111111
User 86225 does not improve AUC. Reverting changes.
Training on augumented user 57048 33/50 current_auc = 0.6511111111111111
User 57048 AUC after training: 0.6511111111111111
User 57048 does not improve AUC. Reverting changes.
Training on augumented user 39416 34/50 current_auc = 0.6511111111111111
User 39416 AUC after training: 0.6488888888888888
User 39416 does not improve AUC. Reverting changes.
Training on augumented user 93051 35/50 current_auc = 0.6511111111111111
User 93051 AUC after training: 0.6488888888888888
User 93051 does not improve AUC. Reverting changes.
Training on augumented user 133627 36/50 current_auc = 0.6511111111111111
User 133627 AUC after training: 0.6511111111111111
User 133627 does not improve AUC. Reverting changes.
Training on augumented user 47815 37/50 current_auc = 0.6511111111111111
User 47815 AUC after training: 0.6511111111111111
User 47815 does not improve AUC. Reverting changes.
Training on augumented user 20357 38/50 current_auc = 0.6511111111111111
User 20357 AUC after training: 0.6511111111111111
User 20357 does not improve AUC. Reverting changes.
Training on augumented user 124066 39/50 current_auc = 0.6511111111111111
User 124066 AUC after training: 0.6466666666666666
User 124066 does not improve AUC. Reverting changes.
Training on augumented user 5227 40/50 current_auc = 0.6511111111111111
User 5227 AUC after training: 0.6511111111111111
User 5227 does not improve AUC. Reverting changes.
Training on augumented user 8279 41/50 current_auc = 0.6511111111111111
User 8279 AUC after training: 0.6444444444444445
User 8279 does not improve AUC. Reverting changes.
Training on augumented user 88348 42/50 current_auc = 0.6511111111111111
User 88348 AUC after training: 0.6488888888888888
User 88348 does not improve AUC. Reverting changes.
Training on augumented user 84511 43/50 current_auc = 0.6511111111111111
User 84511 AUC after training: 0.6488888888888888
User 84511 does not improve AUC. Reverting changes.
Training on augumented user 60479 44/50 current_auc = 0.6511111111111111
User 60479 AUC after training: 0.6488888888888888
User 60479 does not improve AUC. Reverting changes.
Training on augumented user 9568 45/50 current_auc = 0.6511111111111111
User 9568 AUC after training: 0.6511111111111111
User 9568 does not improve AUC. Reverting changes.
Training on augumented user 78730 46/50 current_auc = 0.6511111111111111
User 78730 AUC after training: 0.648888888888889
User 78730 does not improve AUC. Reverting changes.
Training on augumented user 87457 47/50 current_auc = 0.6511111111111111
User 87457 AUC after training: 0.6444444444444445
User 87457 does not improve AUC. Reverting changes.
Training on augumented user 428 48/50 current_auc = 0.6511111111111111
User 428 AUC after training: 0.6555555555555556
User 428 improves AUC. Keeping the model.
Training on augumented user 55735 49/50 current_auc = 0.6555555555555556
User 55735 AUC after training: 0.6533333333333333
User 55735 does not improve AUC. Reverting changes.
[2024-12-02 19:14:38.700303] start test user 100107 172/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:14:39.370124] start test user 100107 172/567 recall augumented users by random, augumented_users = [126540, 132835, 94749, 101149, 120562, 137703, 113634, 86858, 74420, 39687, 117193, 70456, 9823, 59367, 118490, 16352, 136384, 6802, 16763, 3774, 72552, 110144, 119055, 28218, 91689, 98145, 111242, 76760, 99328, 56609, 133887, 58837, 110986, 76204, 33008, 125340, 38610, 130667, 36733, 120927, 64383, 94103, 118576, 124835, 14460, 103532, 115876, 415, 136777, 134885]
[2024-12-02 19:14:39.385806] user = 100107 Cloud 172/567
[2024-12-02 19:14:39.413443] user = 100107 Local 172/567
[2024-12-02 19:14:39.511256] user = 100107 Local+ 172/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:14:42.627549] user = 100107 MPDA- 172/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6079734219269104
Training on augumented user 126540 0/50 current_auc = 0.6079734219269104
User 126540 AUC after training: 0.6064633041377228
User 126540 does not improve AUC. Reverting changes.
Training on augumented user 132835 1/50 current_auc = 0.6079734219269104
User 132835 AUC after training: 0.6076713983690728
User 132835 does not improve AUC. Reverting changes.
Training on augumented user 94749 2/50 current_auc = 0.6079734219269104
User 94749 AUC after training: 0.6082754454847479
User 94749 improves AUC. Keeping the model.
Training on augumented user 101149 3/50 current_auc = 0.6082754454847479
User 101149 AUC after training: 0.6082754454847479
User 101149 does not improve AUC. Reverting changes.
Training on augumented user 120562 4/50 current_auc = 0.6082754454847479
User 120562 AUC after training: 0.6082754454847479
User 120562 does not improve AUC. Reverting changes.
Training on augumented user 137703 5/50 current_auc = 0.6082754454847479
User 137703 AUC after training: 0.6082754454847479
User 137703 does not improve AUC. Reverting changes.
Training on augumented user 113634 6/50 current_auc = 0.6082754454847479
User 113634 AUC after training: 0.6079734219269104
User 113634 does not improve AUC. Reverting changes.
Training on augumented user 86858 7/50 current_auc = 0.6082754454847479
User 86858 AUC after training: 0.6079734219269104
User 86858 does not improve AUC. Reverting changes.
Training on augumented user 74420 8/50 current_auc = 0.6082754454847479
User 74420 AUC after training: 0.6094835397160978
User 74420 improves AUC. Keeping the model.
Training on augumented user 39687 9/50 current_auc = 0.6094835397160978
User 39687 AUC after training: 0.6073693748112354
User 39687 does not improve AUC. Reverting changes.
Training on augumented user 117193 10/50 current_auc = 0.6094835397160978
User 117193 AUC after training: 0.610087586831773
User 117193 improves AUC. Keeping the model.
Training on augumented user 70456 11/50 current_auc = 0.610087586831773
User 70456 AUC after training: 0.6100875868317729
User 70456 does not improve AUC. Reverting changes.
Training on augumented user 9823 12/50 current_auc = 0.610087586831773
User 9823 AUC after training: 0.610691633947448
User 9823 improves AUC. Keeping the model.
Training on augumented user 59367 13/50 current_auc = 0.610691633947448
User 59367 AUC after training: 0.6100875868317729
User 59367 does not improve AUC. Reverting changes.
Training on augumented user 118490 14/50 current_auc = 0.610691633947448
User 118490 AUC after training: 0.610691633947448
User 118490 does not improve AUC. Reverting changes.
Training on augumented user 16352 15/50 current_auc = 0.610691633947448
User 16352 AUC after training: 0.6112956810631229
User 16352 improves AUC. Keeping the model.
Training on augumented user 136384 16/50 current_auc = 0.6112956810631229
User 136384 AUC after training: 0.6125037752944731
User 136384 improves AUC. Keeping the model.
Training on augumented user 6802 17/50 current_auc = 0.6125037752944731
User 6802 AUC after training: 0.613711869525823
User 6802 improves AUC. Keeping the model.
Training on augumented user 16763 18/50 current_auc = 0.613711869525823
User 16763 AUC after training: 0.613711869525823
User 16763 does not improve AUC. Reverting changes.
Training on augumented user 3774 19/50 current_auc = 0.613711869525823
User 3774 AUC after training: 0.6134098459679855
User 3774 does not improve AUC. Reverting changes.
Training on augumented user 72552 20/50 current_auc = 0.613711869525823
User 72552 AUC after training: 0.6138628813047418
User 72552 improves AUC. Keeping the model.
Training on augumented user 110144 21/50 current_auc = 0.6138628813047418
User 110144 AUC after training: 0.6126547870733917
User 110144 does not improve AUC. Reverting changes.
Training on augumented user 119055 22/50 current_auc = 0.6138628813047418
User 119055 AUC after training: 0.6134098459679855
User 119055 does not improve AUC. Reverting changes.
Training on augumented user 28218 23/50 current_auc = 0.6138628813047418
User 28218 AUC after training: 0.6135608577469043
User 28218 does not improve AUC. Reverting changes.
Training on augumented user 91689 24/50 current_auc = 0.6138628813047418
User 91689 AUC after training: 0.6128057988523106
User 91689 does not improve AUC. Reverting changes.
Training on augumented user 98145 25/50 current_auc = 0.6138628813047418
User 98145 AUC after training: 0.6132588341890668
User 98145 does not improve AUC. Reverting changes.
Training on augumented user 111242 26/50 current_auc = 0.6138628813047418
User 111242 AUC after training: 0.6134098459679855
User 111242 does not improve AUC. Reverting changes.
Training on augumented user 76760 27/50 current_auc = 0.6138628813047418
User 76760 AUC after training: 0.613107822410148
User 76760 does not improve AUC. Reverting changes.
Training on augumented user 99328 28/50 current_auc = 0.6138628813047418
User 99328 AUC after training: 0.613711869525823
User 99328 does not improve AUC. Reverting changes.
Training on augumented user 56609 29/50 current_auc = 0.6138628813047418
User 56609 AUC after training: 0.6134098459679855
User 56609 does not improve AUC. Reverting changes.
Training on augumented user 133887 30/50 current_auc = 0.6138628813047418
User 133887 AUC after training: 0.6135608577469043
User 133887 does not improve AUC. Reverting changes.
Training on augumented user 58837 31/50 current_auc = 0.6138628813047418
User 58837 AUC after training: 0.6140138930836605
User 58837 improves AUC. Keeping the model.
Training on augumented user 110986 32/50 current_auc = 0.6140138930836605
User 110986 AUC after training: 0.6132588341890668
User 110986 does not improve AUC. Reverting changes.
Training on augumented user 76204 33/50 current_auc = 0.6140138930836605
User 76204 AUC after training: 0.6135608577469043
User 76204 does not improve AUC. Reverting changes.
Training on augumented user 33008 34/50 current_auc = 0.6140138930836605
User 33008 AUC after training: 0.6134098459679855
User 33008 does not improve AUC. Reverting changes.
Training on augumented user 125340 35/50 current_auc = 0.6140138930836605
User 125340 AUC after training: 0.6131078224101479
User 125340 does not improve AUC. Reverting changes.
Training on augumented user 38610 36/50 current_auc = 0.6140138930836605
User 38610 AUC after training: 0.6125037752944731
User 38610 does not improve AUC. Reverting changes.
Training on augumented user 130667 37/50 current_auc = 0.6140138930836605
User 130667 AUC after training: 0.613711869525823
User 130667 does not improve AUC. Reverting changes.
Training on augumented user 36733 38/50 current_auc = 0.6140138930836605
User 36733 AUC after training: 0.613107822410148
User 36733 does not improve AUC. Reverting changes.
Training on augumented user 120927 39/50 current_auc = 0.6140138930836605
User 120927 AUC after training: 0.6140138930836605
User 120927 does not improve AUC. Reverting changes.
Training on augumented user 64383 40/50 current_auc = 0.6140138930836605
User 64383 AUC after training: 0.6146179401993355
User 64383 improves AUC. Keeping the model.
Training on augumented user 94103 41/50 current_auc = 0.6146179401993355
User 94103 AUC after training: 0.6143159166414981
User 94103 does not improve AUC. Reverting changes.
Training on augumented user 118576 42/50 current_auc = 0.6146179401993355
User 118576 AUC after training: 0.6152219873150107
User 118576 improves AUC. Keeping the model.
Training on augumented user 124835 43/50 current_auc = 0.6152219873150107
User 124835 AUC after training: 0.6152219873150105
User 124835 does not improve AUC. Reverting changes.
Training on augumented user 14460 44/50 current_auc = 0.6152219873150107
User 14460 AUC after training: 0.6152219873150107
User 14460 does not improve AUC. Reverting changes.
Training on augumented user 103532 45/50 current_auc = 0.6152219873150107
User 103532 AUC after training: 0.6143159166414982
User 103532 does not improve AUC. Reverting changes.
Training on augumented user 115876 46/50 current_auc = 0.6152219873150107
User 115876 AUC after training: 0.6146179401993355
User 115876 does not improve AUC. Reverting changes.
Training on augumented user 415 47/50 current_auc = 0.6152219873150107
User 415 AUC after training: 0.6128057988523106
User 415 does not improve AUC. Reverting changes.
Training on augumented user 136777 48/50 current_auc = 0.6152219873150107
User 136777 AUC after training: 0.6161280579885231
User 136777 improves AUC. Keeping the model.
Training on augumented user 134885 49/50 current_auc = 0.6161280579885231
User 134885 AUC after training: 0.6158260344306856
User 134885 does not improve AUC. Reverting changes.
[2024-12-02 19:15:14.745270] start test user 100113 173/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:15:15.434843] start test user 100113 173/567 recall augumented users by random, augumented_users = [15682, 60735, 110152, 123071, 105950, 121853, 27255, 111587, 13370, 316, 84241, 1247, 106844, 59329, 18086, 50875, 106109, 48809, 62114, 69148, 1418, 62742, 94485, 3704, 55447, 103161, 92118, 110789, 123904, 113458, 24605, 109599, 131355, 2442, 123796, 95403, 22941, 13465, 23882, 107069, 33969, 115413, 109440, 98189, 77324, 45781, 30647, 10229, 36185, 30469]
[2024-12-02 19:15:15.450330] user = 100113 Cloud 173/567
[2024-12-02 19:15:15.486369] user = 100113 Local 173/567
[2024-12-02 19:15:15.574967] user = 100113 Local+ 173/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:15:18.822439] user = 100113 MPDA- 173/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5217940149996287
Training on augumented user 15682 0/50 current_auc = 0.5217940149996287
User 15682 AUC after training: 0.5255067943862777
User 15682 improves AUC. Keeping the model.
Training on augumented user 60735 1/50 current_auc = 0.5255067943862777
User 60735 AUC after training: 0.5259523279126754
User 60735 improves AUC. Keeping the model.
Training on augumented user 110152 2/50 current_auc = 0.5259523279126754
User 110152 AUC after training: 0.5256553055617434
User 110152 does not improve AUC. Reverting changes.
Training on augumented user 123071 3/50 current_auc = 0.5259523279126754
User 123071 AUC after training: 0.5251355164476126
User 123071 does not improve AUC. Reverting changes.
Training on augumented user 105950 4/50 current_auc = 0.5259523279126754
User 105950 AUC after training: 0.5248384940966807
User 105950 does not improve AUC. Reverting changes.
Training on augumented user 121853 5/50 current_auc = 0.5259523279126754
User 121853 AUC after training: 0.5249127496844137
User 121853 does not improve AUC. Reverting changes.
Training on augumented user 27255 6/50 current_auc = 0.5259523279126754
User 27255 AUC after training: 0.5250612608598797
User 27255 does not improve AUC. Reverting changes.
Training on augumented user 111587 7/50 current_auc = 0.5259523279126754
User 111587 AUC after training: 0.5246157273334818
User 111587 does not improve AUC. Reverting changes.
Training on augumented user 13370 8/50 current_auc = 0.5259523279126754
User 13370 AUC after training: 0.5255810499740105
User 13370 does not improve AUC. Reverting changes.
Training on augumented user 316 9/50 current_auc = 0.5259523279126754
User 316 AUC after training: 0.5256553055617434
User 316 does not improve AUC. Reverting changes.
Training on augumented user 84241 10/50 current_auc = 0.5259523279126754
User 84241 AUC after training: 0.5238731714561521
User 84241 does not improve AUC. Reverting changes.
Training on augumented user 1247 11/50 current_auc = 0.5259523279126754
User 1247 AUC after training: 0.5252097720353457
User 1247 does not improve AUC. Reverting changes.
Training on augumented user 106844 12/50 current_auc = 0.5259523279126754
User 106844 AUC after training: 0.5253582832108116
User 106844 does not improve AUC. Reverting changes.
Training on augumented user 59329 13/50 current_auc = 0.5259523279126754
User 59329 AUC after training: 0.5257295611494766
User 59329 does not improve AUC. Reverting changes.
Training on augumented user 18086 14/50 current_auc = 0.5259523279126754
User 18086 AUC after training: 0.5259894557065418
User 18086 improves AUC. Keeping the model.
Training on augumented user 50875 15/50 current_auc = 0.5259894557065418
User 50875 AUC after training: 0.5251355164476127
User 50875 does not improve AUC. Reverting changes.
Training on augumented user 106109 16/50 current_auc = 0.5259894557065418
User 106109 AUC after training: 0.5249127496844137
User 106109 does not improve AUC. Reverting changes.
Training on augumented user 48809 17/50 current_auc = 0.5259894557065418
User 48809 AUC after training: 0.5258780723249424
User 48809 does not improve AUC. Reverting changes.
Training on augumented user 62114 18/50 current_auc = 0.5259894557065418
User 62114 AUC after training: 0.5250612608598797
User 62114 does not improve AUC. Reverting changes.
Training on augumented user 69148 19/50 current_auc = 0.5259894557065418
User 69148 AUC after training: 0.5262493502636073
User 69148 improves AUC. Keeping the model.
Training on augumented user 1418 20/50 current_auc = 0.5262493502636073
User 1418 AUC after training: 0.5256553055617436
User 1418 does not improve AUC. Reverting changes.
Training on augumented user 62742 21/50 current_auc = 0.5262493502636073
User 62742 AUC after training: 0.527140417316403
User 62742 improves AUC. Keeping the model.
Training on augumented user 94485 22/50 current_auc = 0.527140417316403
User 94485 AUC after training: 0.5258038167372094
User 94485 does not improve AUC. Reverting changes.
Training on augumented user 3704 23/50 current_auc = 0.527140417316403
User 3704 AUC after training: 0.5261750946758743
User 3704 does not improve AUC. Reverting changes.
Training on augumented user 55447 24/50 current_auc = 0.527140417316403
User 55447 AUC after training: 0.5272889284918689
User 55447 improves AUC. Keeping the model.
Training on augumented user 103161 25/50 current_auc = 0.5272889284918689
User 103161 AUC after training: 0.5280314843691989
User 103161 improves AUC. Keeping the model.
Training on augumented user 92118 26/50 current_auc = 0.5280314843691989
User 92118 AUC after training: 0.5263236058513403
User 92118 does not improve AUC. Reverting changes.
Training on augumented user 110789 27/50 current_auc = 0.5280314843691989
User 110789 AUC after training: 0.5265092448206727
User 110789 does not improve AUC. Reverting changes.
Training on augumented user 123904 28/50 current_auc = 0.5280314843691989
User 123904 AUC after training: 0.5282542511323977
User 123904 improves AUC. Keeping the model.
Training on augumented user 113458 29/50 current_auc = 0.5282542511323977
User 113458 AUC after training: 0.5272518006980025
User 113458 does not improve AUC. Reverting changes.
Training on augumented user 24605 30/50 current_auc = 0.5282542511323977
User 24605 AUC after training: 0.5279572287814658
User 24605 does not improve AUC. Reverting changes.
Training on augumented user 109599 31/50 current_auc = 0.5282542511323977
User 109599 AUC after training: 0.5277715898121333
User 109599 does not improve AUC. Reverting changes.
Training on augumented user 131355 32/50 current_auc = 0.5282542511323977
User 131355 AUC after training: 0.5275116952550679
User 131355 does not improve AUC. Reverting changes.
Training on augumented user 2442 33/50 current_auc = 0.5282542511323977
User 2442 AUC after training: 0.5284770178955965
User 2442 improves AUC. Keeping the model.
Training on augumented user 123796 34/50 current_auc = 0.5284770178955965
User 123796 AUC after training: 0.5280314843691987
User 123796 does not improve AUC. Reverting changes.
Training on augumented user 95403 35/50 current_auc = 0.5284770178955965
User 95403 AUC after training: 0.5283285067201307
User 95403 does not improve AUC. Reverting changes.
Training on augumented user 22941 36/50 current_auc = 0.5284770178955965
User 22941 AUC after training: 0.5280314843691988
User 22941 does not improve AUC. Reverting changes.
Training on augumented user 13465 37/50 current_auc = 0.5284770178955965
User 13465 AUC after training: 0.5279943565753322
User 13465 does not improve AUC. Reverting changes.
Training on augumented user 23882 38/50 current_auc = 0.5284770178955965
User 23882 AUC after training: 0.5292195737729264
User 23882 improves AUC. Keeping the model.
Training on augumented user 107069 39/50 current_auc = 0.5292195737729264
User 107069 AUC after training: 0.5276602064305339
User 107069 does not improve AUC. Reverting changes.
Training on augumented user 33969 40/50 current_auc = 0.5292195737729264
User 33969 AUC after training: 0.5261750946758743
User 33969 does not improve AUC. Reverting changes.
Training on augumented user 115413 41/50 current_auc = 0.5292195737729264
User 115413 AUC after training: 0.5284027623078636
User 115413 does not improve AUC. Reverting changes.
Training on augumented user 109440 42/50 current_auc = 0.5292195737729264
User 109440 AUC after training: 0.5285512734833295
User 109440 does not improve AUC. Reverting changes.
Training on augumented user 98189 43/50 current_auc = 0.5292195737729264
User 98189 AUC after training: 0.527214672904136
User 98189 does not improve AUC. Reverting changes.
Training on augumented user 77324 44/50 current_auc = 0.5292195737729264
User 77324 AUC after training: 0.5286255290710625
User 77324 does not improve AUC. Reverting changes.
Training on augumented user 45781 45/50 current_auc = 0.5292195737729264
User 45781 AUC after training: 0.5284770178955966
User 45781 does not improve AUC. Reverting changes.
Training on augumented user 30647 46/50 current_auc = 0.5292195737729264
User 30647 AUC after training: 0.5287740402465285
User 30647 does not improve AUC. Reverting changes.
Training on augumented user 10229 47/50 current_auc = 0.5292195737729264
User 10229 AUC after training: 0.5292938293606594
User 10229 improves AUC. Keeping the model.
Training on augumented user 36185 48/50 current_auc = 0.5292938293606594
User 36185 AUC after training: 0.5293680849483923
User 36185 improves AUC. Keeping the model.
Training on augumented user 30469 49/50 current_auc = 0.5293680849483923
User 30469 AUC after training: 0.5294052127422588
User 30469 improves AUC. Keeping the model.
[2024-12-02 19:15:49.986584] start test user 100118 174/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:15:50.578839] start test user 100118 174/567 recall augumented users by random, augumented_users = [11953, 126087, 109535, 25007, 31495, 27385, 12803, 29586, 66368, 74718, 65102, 3540, 89174, 97508, 5102, 20349, 101804, 96331, 136763, 41421, 112176, 82291, 113633, 103555, 7594, 2442, 29000, 124161, 21357, 124232, 133490, 123140, 40368, 133129, 49144, 57750, 7655, 60155, 15382, 86533, 91337, 61672, 93314, 681, 48158, 117358, 126503, 27360, 59880, 137459]
[2024-12-02 19:15:50.600375] user = 100118 Cloud 174/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:15:50.620594] user = 100118 Local 174/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:15:50.698107] user = 100118 Local+ 174/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:15:53.244486] user = 100118 MPDA- 174/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 11953 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11953 AUC after training: 0.5
User 11953 does not improve AUC. Reverting changes.
Training on augumented user 126087 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126087 AUC after training: 0.5
User 126087 does not improve AUC. Reverting changes.
Training on augumented user 109535 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109535 AUC after training: 0.5
User 109535 does not improve AUC. Reverting changes.
Training on augumented user 25007 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25007 AUC after training: 0.5
User 25007 does not improve AUC. Reverting changes.
Training on augumented user 31495 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 31495 AUC after training: 0.5
User 31495 does not improve AUC. Reverting changes.
Training on augumented user 27385 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27385 AUC after training: 0.5
User 27385 does not improve AUC. Reverting changes.
Training on augumented user 12803 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12803 AUC after training: 0.5
User 12803 does not improve AUC. Reverting changes.
Training on augumented user 29586 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29586 AUC after training: 0.5
User 29586 does not improve AUC. Reverting changes.
Training on augumented user 66368 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66368 AUC after training: 0.5
User 66368 does not improve AUC. Reverting changes.
Training on augumented user 74718 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74718 AUC after training: 0.5
User 74718 does not improve AUC. Reverting changes.
Training on augumented user 65102 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 65102 AUC after training: 0.5
User 65102 does not improve AUC. Reverting changes.
Training on augumented user 3540 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3540 AUC after training: 0.5
User 3540 does not improve AUC. Reverting changes.
Training on augumented user 89174 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89174 AUC after training: 0.5
User 89174 does not improve AUC. Reverting changes.
Training on augumented user 97508 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97508 AUC after training: 0.5
User 97508 does not improve AUC. Reverting changes.
Training on augumented user 5102 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5102 AUC after training: 0.5
User 5102 does not improve AUC. Reverting changes.
Training on augumented user 20349 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20349 AUC after training: 0.5
User 20349 does not improve AUC. Reverting changes.
Training on augumented user 101804 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101804 AUC after training: 0.5
User 101804 does not improve AUC. Reverting changes.
Training on augumented user 96331 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96331 AUC after training: 0.5
User 96331 does not improve AUC. Reverting changes.
Training on augumented user 136763 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136763 AUC after training: 0.5
User 136763 does not improve AUC. Reverting changes.
Training on augumented user 41421 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41421 AUC after training: 0.5
User 41421 does not improve AUC. Reverting changes.
Training on augumented user 112176 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112176 AUC after training: 0.5
User 112176 does not improve AUC. Reverting changes.
Training on augumented user 82291 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82291 AUC after training: 0.5
User 82291 does not improve AUC. Reverting changes.
Training on augumented user 113633 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113633 AUC after training: 0.5
User 113633 does not improve AUC. Reverting changes.
Training on augumented user 103555 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103555 AUC after training: 0.5
User 103555 does not improve AUC. Reverting changes.
Training on augumented user 7594 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7594 AUC after training: 0.5
User 7594 does not improve AUC. Reverting changes.
Training on augumented user 2442 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2442 AUC after training: 0.5
User 2442 does not improve AUC. Reverting changes.
Training on augumented user 29000 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29000 AUC after training: 0.5
User 29000 does not improve AUC. Reverting changes.
Training on augumented user 124161 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124161 AUC after training: 0.5
User 124161 does not improve AUC. Reverting changes.
Training on augumented user 21357 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21357 AUC after training: 0.5
User 21357 does not improve AUC. Reverting changes.
Training on augumented user 124232 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124232 AUC after training: 0.5
User 124232 does not improve AUC. Reverting changes.
Training on augumented user 133490 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133490 AUC after training: 0.5
User 133490 does not improve AUC. Reverting changes.
Training on augumented user 123140 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123140 AUC after training: 0.5
User 123140 does not improve AUC. Reverting changes.
Training on augumented user 40368 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40368 AUC after training: 0.5
User 40368 does not improve AUC. Reverting changes.
Training on augumented user 133129 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133129 AUC after training: 0.5
User 133129 does not improve AUC. Reverting changes.
Training on augumented user 49144 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49144 AUC after training: 0.5
User 49144 does not improve AUC. Reverting changes.
Training on augumented user 57750 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57750 AUC after training: 0.5
User 57750 does not improve AUC. Reverting changes.
Training on augumented user 7655 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7655 AUC after training: 0.5
User 7655 does not improve AUC. Reverting changes.
Training on augumented user 60155 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60155 AUC after training: 0.5
User 60155 does not improve AUC. Reverting changes.
Training on augumented user 15382 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15382 AUC after training: 0.5
User 15382 does not improve AUC. Reverting changes.
Training on augumented user 86533 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86533 AUC after training: 0.5
User 86533 does not improve AUC. Reverting changes.
Training on augumented user 91337 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91337 AUC after training: 0.5
User 91337 does not improve AUC. Reverting changes.
Training on augumented user 61672 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61672 AUC after training: 0.5
User 61672 does not improve AUC. Reverting changes.
Training on augumented user 93314 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93314 AUC after training: 0.5
User 93314 does not improve AUC. Reverting changes.
Training on augumented user 681 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 681 AUC after training: 0.5
User 681 does not improve AUC. Reverting changes.
Training on augumented user 48158 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48158 AUC after training: 0.5
User 48158 does not improve AUC. Reverting changes.
Training on augumented user 117358 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117358 AUC after training: 0.5
User 117358 does not improve AUC. Reverting changes.
Training on augumented user 126503 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126503 AUC after training: 0.5
User 126503 does not improve AUC. Reverting changes.
Training on augumented user 27360 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27360 AUC after training: 0.5
User 27360 does not improve AUC. Reverting changes.
Training on augumented user 59880 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59880 AUC after training: 0.5
User 59880 does not improve AUC. Reverting changes.
Training on augumented user 137459 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137459 AUC after training: 0.5
User 137459 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:16:24.282336] start test user 100119 175/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:16:25.095200] start test user 100119 175/567 recall augumented users by random, augumented_users = [95441, 13569, 14462, 25221, 91739, 4660, 41969, 48945, 70774, 96651, 27409, 43048, 30667, 12497, 87745, 58034, 105535, 45113, 135129, 6862, 14603, 78851, 32967, 111064, 102216, 134457, 105020, 68087, 80696, 104111, 113413, 101159, 30017, 98492, 113519, 99616, 33265, 38707, 70553, 43776, 137056, 81842, 124195, 126218, 32188, 108162, 134267, 107237, 44222, 92518]
[2024-12-02 19:16:25.110780] user = 100119 Cloud 175/567
[2024-12-02 19:16:25.125262] user = 100119 Local 175/567
[2024-12-02 19:16:25.196925] user = 100119 Local+ 175/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:16:27.446234] user = 100119 MPDA- 175/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.633076181292189
Training on augumented user 95441 0/50 current_auc = 0.633076181292189
User 95441 AUC after training: 0.6345226615236258
User 95441 improves AUC. Keeping the model.
Training on augumented user 13569 1/50 current_auc = 0.6345226615236258
User 13569 AUC after training: 0.6313886210221793
User 13569 does not improve AUC. Reverting changes.
Training on augumented user 14462 2/50 current_auc = 0.6345226615236258
User 14462 AUC after training: 0.6340405014464803
User 14462 does not improve AUC. Reverting changes.
Training on augumented user 25221 3/50 current_auc = 0.6345226615236258
User 25221 AUC after training: 0.6318707810993249
User 25221 does not improve AUC. Reverting changes.
Training on augumented user 91739 4/50 current_auc = 0.6345226615236258
User 91739 AUC after training: 0.6321118611378977
User 91739 does not improve AUC. Reverting changes.
Training on augumented user 4660 5/50 current_auc = 0.6345226615236258
User 4660 AUC after training: 0.6345226615236259
User 4660 improves AUC. Keeping the model.
Training on augumented user 41969 6/50 current_auc = 0.6345226615236259
User 41969 AUC after training: 0.634281581485053
User 41969 does not improve AUC. Reverting changes.
Training on augumented user 48945 7/50 current_auc = 0.6345226615236259
User 48945 AUC after training: 0.6335583413693346
User 48945 does not improve AUC. Reverting changes.
Training on augumented user 70774 8/50 current_auc = 0.6345226615236259
User 70774 AUC after training: 0.6335583413693346
User 70774 does not improve AUC. Reverting changes.
Training on augumented user 96651 9/50 current_auc = 0.6345226615236259
User 96651 AUC after training: 0.6345226615236259
User 96651 does not improve AUC. Reverting changes.
Training on augumented user 27409 10/50 current_auc = 0.6345226615236259
User 27409 AUC after training: 0.6335583413693346
User 27409 does not improve AUC. Reverting changes.
Training on augumented user 43048 11/50 current_auc = 0.6345226615236259
User 43048 AUC after training: 0.6335583413693346
User 43048 does not improve AUC. Reverting changes.
Training on augumented user 30667 12/50 current_auc = 0.6345226615236259
User 30667 AUC after training: 0.6340405014464803
User 30667 does not improve AUC. Reverting changes.
Training on augumented user 12497 13/50 current_auc = 0.6345226615236259
User 12497 AUC after training: 0.6335583413693346
User 12497 does not improve AUC. Reverting changes.
Training on augumented user 87745 14/50 current_auc = 0.6345226615236259
User 87745 AUC after training: 0.6345226615236259
User 87745 does not improve AUC. Reverting changes.
Training on augumented user 58034 15/50 current_auc = 0.6345226615236259
User 58034 AUC after training: 0.6342815814850531
User 58034 does not improve AUC. Reverting changes.
Training on augumented user 105535 16/50 current_auc = 0.6345226615236259
User 105535 AUC after training: 0.6333172613307618
User 105535 does not improve AUC. Reverting changes.
Training on augumented user 45113 17/50 current_auc = 0.6345226615236259
User 45113 AUC after training: 0.6340405014464803
User 45113 does not improve AUC. Reverting changes.
Training on augumented user 135129 18/50 current_auc = 0.6345226615236259
User 135129 AUC after training: 0.6335583413693346
User 135129 does not improve AUC. Reverting changes.
Training on augumented user 6862 19/50 current_auc = 0.6345226615236259
User 6862 AUC after training: 0.633076181292189
User 6862 does not improve AUC. Reverting changes.
Training on augumented user 14603 20/50 current_auc = 0.6345226615236259
User 14603 AUC after training: 0.6333172613307618
User 14603 does not improve AUC. Reverting changes.
Training on augumented user 78851 21/50 current_auc = 0.6345226615236259
User 78851 AUC after training: 0.6335583413693346
User 78851 does not improve AUC. Reverting changes.
Training on augumented user 32967 22/50 current_auc = 0.6345226615236259
User 32967 AUC after training: 0.6345226615236259
User 32967 does not improve AUC. Reverting changes.
Training on augumented user 111064 23/50 current_auc = 0.6345226615236259
User 111064 AUC after training: 0.6340405014464803
User 111064 does not improve AUC. Reverting changes.
Training on augumented user 102216 24/50 current_auc = 0.6345226615236259
User 102216 AUC after training: 0.633076181292189
User 102216 does not improve AUC. Reverting changes.
Training on augumented user 134457 25/50 current_auc = 0.6345226615236259
User 134457 AUC after training: 0.633076181292189
User 134457 does not improve AUC. Reverting changes.
Training on augumented user 105020 26/50 current_auc = 0.6345226615236259
User 105020 AUC after training: 0.6350048216007715
User 105020 improves AUC. Keeping the model.
Training on augumented user 68087 27/50 current_auc = 0.6350048216007715
User 68087 AUC after training: 0.6340405014464803
User 68087 does not improve AUC. Reverting changes.
Training on augumented user 80696 28/50 current_auc = 0.6350048216007715
User 80696 AUC after training: 0.6350048216007715
User 80696 does not improve AUC. Reverting changes.
Training on augumented user 104111 29/50 current_auc = 0.6350048216007715
User 104111 AUC after training: 0.6364513018322083
User 104111 improves AUC. Keeping the model.
Training on augumented user 113413 30/50 current_auc = 0.6364513018322083
User 113413 AUC after training: 0.6304243008678881
User 113413 does not improve AUC. Reverting changes.
Training on augumented user 101159 31/50 current_auc = 0.6364513018322083
User 101159 AUC after training: 0.6369334619093538
User 101159 improves AUC. Keeping the model.
Training on augumented user 30017 32/50 current_auc = 0.6369334619093538
User 30017 AUC after training: 0.6369334619093538
User 30017 does not improve AUC. Reverting changes.
Training on augumented user 98492 33/50 current_auc = 0.6369334619093538
User 98492 AUC after training: 0.6369334619093538
User 98492 does not improve AUC. Reverting changes.
Training on augumented user 113519 34/50 current_auc = 0.6369334619093538
User 113519 AUC after training: 0.6369334619093538
User 113519 does not improve AUC. Reverting changes.
Training on augumented user 99616 35/50 current_auc = 0.6369334619093538
User 99616 AUC after training: 0.6359691417550627
User 99616 does not improve AUC. Reverting changes.
Training on augumented user 33265 36/50 current_auc = 0.6369334619093538
User 33265 AUC after training: 0.6374156219864995
User 33265 improves AUC. Keeping the model.
Training on augumented user 38707 37/50 current_auc = 0.6374156219864995
User 38707 AUC after training: 0.636933461909354
User 38707 does not improve AUC. Reverting changes.
Training on augumented user 70553 38/50 current_auc = 0.6374156219864995
User 70553 AUC after training: 0.6374156219864995
User 70553 does not improve AUC. Reverting changes.
Training on augumented user 43776 39/50 current_auc = 0.6374156219864995
User 43776 AUC after training: 0.6369334619093538
User 43776 does not improve AUC. Reverting changes.
Training on augumented user 137056 40/50 current_auc = 0.6374156219864995
User 137056 AUC after training: 0.6374156219864995
User 137056 does not improve AUC. Reverting changes.
Training on augumented user 81842 41/50 current_auc = 0.6374156219864995
User 81842 AUC after training: 0.6347637415621987
User 81842 does not improve AUC. Reverting changes.
Training on augumented user 124195 42/50 current_auc = 0.6374156219864995
User 124195 AUC after training: 0.6359691417550627
User 124195 does not improve AUC. Reverting changes.
Training on augumented user 126218 43/50 current_auc = 0.6374156219864995
User 126218 AUC after training: 0.6350048216007714
User 126218 does not improve AUC. Reverting changes.
Training on augumented user 32188 44/50 current_auc = 0.6374156219864995
User 32188 AUC after training: 0.6374156219864995
User 32188 does not improve AUC. Reverting changes.
Training on augumented user 108162 45/50 current_auc = 0.6374156219864995
User 108162 AUC after training: 0.6350048216007714
User 108162 does not improve AUC. Reverting changes.
Training on augumented user 134267 46/50 current_auc = 0.6374156219864995
User 134267 AUC after training: 0.6359691417550627
User 134267 does not improve AUC. Reverting changes.
Training on augumented user 107237 47/50 current_auc = 0.6374156219864995
User 107237 AUC after training: 0.636933461909354
User 107237 does not improve AUC. Reverting changes.
Training on augumented user 44222 48/50 current_auc = 0.6374156219864995
User 44222 AUC after training: 0.6364513018322083
User 44222 does not improve AUC. Reverting changes.
Training on augumented user 92518 49/50 current_auc = 0.6374156219864995
User 92518 AUC after training: 0.6388621022179364
User 92518 improves AUC. Keeping the model.
[2024-12-02 19:16:59.683952] start test user 100201 176/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:17:00.393126] start test user 100201 176/567 recall augumented users by random, augumented_users = [89062, 121281, 35180, 98732, 110679, 34270, 136436, 7407, 136093, 86460, 10943, 104453, 62227, 126400, 113897, 16785, 70549, 78174, 86086, 98479, 93591, 132652, 86628, 79919, 136341, 105693, 18256, 33338, 84877, 137660, 13484, 96388, 37428, 134734, 38840, 93467, 73659, 99200, 34169, 25806, 23214, 47379, 3214, 69645, 30817, 27419, 132174, 99636, 93479, 97611]
[2024-12-02 19:17:00.409055] user = 100201 Cloud 176/567
[2024-12-02 19:17:00.423842] user = 100201 Local 176/567
[2024-12-02 19:17:00.629664] user = 100201 Local+ 176/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:17:03.220536] user = 100201 MPDA- 176/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7458461538461538
Training on augumented user 89062 0/50 current_auc = 0.7458461538461538
User 89062 AUC after training: 0.740923076923077
User 89062 does not improve AUC. Reverting changes.
Training on augumented user 121281 1/50 current_auc = 0.7458461538461538
User 121281 AUC after training: 0.744
User 121281 does not improve AUC. Reverting changes.
Training on augumented user 35180 2/50 current_auc = 0.7458461538461538
User 35180 AUC after training: 0.7452307692307691
User 35180 does not improve AUC. Reverting changes.
Training on augumented user 98732 3/50 current_auc = 0.7458461538461538
User 98732 AUC after training: 0.7458461538461538
User 98732 does not improve AUC. Reverting changes.
Training on augumented user 110679 4/50 current_auc = 0.7458461538461538
User 110679 AUC after training: 0.7458461538461538
User 110679 does not improve AUC. Reverting changes.
Training on augumented user 34270 5/50 current_auc = 0.7458461538461538
User 34270 AUC after training: 0.744
User 34270 does not improve AUC. Reverting changes.
Training on augumented user 136436 6/50 current_auc = 0.7458461538461538
User 136436 AUC after training: 0.7458461538461538
User 136436 does not improve AUC. Reverting changes.
Training on augumented user 7407 7/50 current_auc = 0.7458461538461538
User 7407 AUC after training: 0.7458461538461538
User 7407 does not improve AUC. Reverting changes.
Training on augumented user 136093 8/50 current_auc = 0.7458461538461538
User 136093 AUC after training: 0.7458461538461538
User 136093 does not improve AUC. Reverting changes.
Training on augumented user 86460 9/50 current_auc = 0.7458461538461538
User 86460 AUC after training: 0.7452307692307693
User 86460 does not improve AUC. Reverting changes.
Training on augumented user 10943 10/50 current_auc = 0.7458461538461538
User 10943 AUC after training: 0.7433846153846153
User 10943 does not improve AUC. Reverting changes.
Training on augumented user 104453 11/50 current_auc = 0.7458461538461538
User 104453 AUC after training: 0.7464615384615384
User 104453 improves AUC. Keeping the model.
Training on augumented user 62227 12/50 current_auc = 0.7464615384615384
User 62227 AUC after training: 0.7452307692307691
User 62227 does not improve AUC. Reverting changes.
Training on augumented user 126400 13/50 current_auc = 0.7464615384615384
User 126400 AUC after training: 0.7452307692307691
User 126400 does not improve AUC. Reverting changes.
Training on augumented user 113897 14/50 current_auc = 0.7464615384615384
User 113897 AUC after training: 0.7458461538461538
User 113897 does not improve AUC. Reverting changes.
Training on augumented user 16785 15/50 current_auc = 0.7464615384615384
User 16785 AUC after training: 0.7452307692307691
User 16785 does not improve AUC. Reverting changes.
Training on augumented user 70549 16/50 current_auc = 0.7464615384615384
User 70549 AUC after training: 0.7464615384615384
User 70549 does not improve AUC. Reverting changes.
Training on augumented user 78174 17/50 current_auc = 0.7464615384615384
User 78174 AUC after training: 0.7464615384615384
User 78174 does not improve AUC. Reverting changes.
Training on augumented user 86086 18/50 current_auc = 0.7464615384615384
User 86086 AUC after training: 0.7464615384615385
User 86086 improves AUC. Keeping the model.
Training on augumented user 98479 19/50 current_auc = 0.7464615384615385
User 98479 AUC after training: 0.7446153846153847
User 98479 does not improve AUC. Reverting changes.
Training on augumented user 93591 20/50 current_auc = 0.7464615384615385
User 93591 AUC after training: 0.7452307692307691
User 93591 does not improve AUC. Reverting changes.
Training on augumented user 132652 21/50 current_auc = 0.7464615384615385
User 132652 AUC after training: 0.7458461538461538
User 132652 does not improve AUC. Reverting changes.
Training on augumented user 86628 22/50 current_auc = 0.7464615384615385
User 86628 AUC after training: 0.747076923076923
User 86628 improves AUC. Keeping the model.
Training on augumented user 79919 23/50 current_auc = 0.747076923076923
User 79919 AUC after training: 0.7464615384615384
User 79919 does not improve AUC. Reverting changes.
Training on augumented user 136341 24/50 current_auc = 0.747076923076923
User 136341 AUC after training: 0.747076923076923
User 136341 does not improve AUC. Reverting changes.
Training on augumented user 105693 25/50 current_auc = 0.747076923076923
User 105693 AUC after training: 0.7409230769230769
User 105693 does not improve AUC. Reverting changes.
Training on augumented user 18256 26/50 current_auc = 0.747076923076923
User 18256 AUC after training: 0.747076923076923
User 18256 does not improve AUC. Reverting changes.
Training on augumented user 33338 27/50 current_auc = 0.747076923076923
User 33338 AUC after training: 0.7452307692307691
User 33338 does not improve AUC. Reverting changes.
Training on augumented user 84877 28/50 current_auc = 0.747076923076923
User 84877 AUC after training: 0.7458461538461538
User 84877 does not improve AUC. Reverting changes.
Training on augumented user 137660 29/50 current_auc = 0.747076923076923
User 137660 AUC after training: 0.747076923076923
User 137660 does not improve AUC. Reverting changes.
Training on augumented user 13484 30/50 current_auc = 0.747076923076923
User 13484 AUC after training: 0.7464615384615385
User 13484 does not improve AUC. Reverting changes.
Training on augumented user 96388 31/50 current_auc = 0.747076923076923
User 96388 AUC after training: 0.7458461538461538
User 96388 does not improve AUC. Reverting changes.
Training on augumented user 37428 32/50 current_auc = 0.747076923076923
User 37428 AUC after training: 0.7458461538461538
User 37428 does not improve AUC. Reverting changes.
Training on augumented user 134734 33/50 current_auc = 0.747076923076923
User 134734 AUC after training: 0.7458461538461538
User 134734 does not improve AUC. Reverting changes.
Training on augumented user 38840 34/50 current_auc = 0.747076923076923
User 38840 AUC after training: 0.7464615384615385
User 38840 does not improve AUC. Reverting changes.
Training on augumented user 93467 35/50 current_auc = 0.747076923076923
User 93467 AUC after training: 0.7464615384615385
User 93467 does not improve AUC. Reverting changes.
Training on augumented user 73659 36/50 current_auc = 0.747076923076923
User 73659 AUC after training: 0.7464615384615385
User 73659 does not improve AUC. Reverting changes.
Training on augumented user 99200 37/50 current_auc = 0.747076923076923
User 99200 AUC after training: 0.7452307692307691
User 99200 does not improve AUC. Reverting changes.
Training on augumented user 34169 38/50 current_auc = 0.747076923076923
User 34169 AUC after training: 0.747076923076923
User 34169 does not improve AUC. Reverting changes.
Training on augumented user 25806 39/50 current_auc = 0.747076923076923
User 25806 AUC after training: 0.7458461538461538
User 25806 does not improve AUC. Reverting changes.
Training on augumented user 23214 40/50 current_auc = 0.747076923076923
User 23214 AUC after training: 0.747076923076923
User 23214 does not improve AUC. Reverting changes.
Training on augumented user 47379 41/50 current_auc = 0.747076923076923
User 47379 AUC after training: 0.7458461538461538
User 47379 does not improve AUC. Reverting changes.
Training on augumented user 3214 42/50 current_auc = 0.747076923076923
User 3214 AUC after training: 0.7464615384615385
User 3214 does not improve AUC. Reverting changes.
Training on augumented user 69645 43/50 current_auc = 0.747076923076923
User 69645 AUC after training: 0.7464615384615385
User 69645 does not improve AUC. Reverting changes.
Training on augumented user 30817 44/50 current_auc = 0.747076923076923
User 30817 AUC after training: 0.7458461538461538
User 30817 does not improve AUC. Reverting changes.
Training on augumented user 27419 45/50 current_auc = 0.747076923076923
User 27419 AUC after training: 0.747076923076923
User 27419 does not improve AUC. Reverting changes.
Training on augumented user 132174 46/50 current_auc = 0.747076923076923
User 132174 AUC after training: 0.7464615384615385
User 132174 does not improve AUC. Reverting changes.
Training on augumented user 99636 47/50 current_auc = 0.747076923076923
User 99636 AUC after training: 0.7464615384615385
User 99636 does not improve AUC. Reverting changes.
Training on augumented user 93479 48/50 current_auc = 0.747076923076923
User 93479 AUC after training: 0.744
User 93479 does not improve AUC. Reverting changes.
Training on augumented user 97611 49/50 current_auc = 0.747076923076923
User 97611 AUC after training: 0.7458461538461538
User 97611 does not improve AUC. Reverting changes.
[2024-12-02 19:17:29.493623] start test user 100202 177/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:17:29.895740] start test user 100202 177/567 recall augumented users by random, augumented_users = [122746, 49812, 33102, 95877, 110412, 40893, 43560, 106819, 52558, 15004, 87691, 101537, 13657, 99861, 134229, 55646, 9145, 67275, 8281, 81492, 3589, 29112, 122353, 45981, 57353, 32917, 90356, 55791, 108332, 123973, 36915, 11139, 134960, 100709, 106924, 136907, 37517, 27846, 43261, 6024, 56207, 128780, 48759, 136902, 17992, 25777, 11596, 116339, 53560, 80321]
[2024-12-02 19:17:29.910399] user = 100202 Cloud 177/567
[2024-12-02 19:17:29.920334] user = 100202 Local 177/567
[2024-12-02 19:17:29.939702] user = 100202 Local+ 177/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:17:32.357057] user = 100202 MPDA- 177/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.46899841017488075
Training on augumented user 122746 0/50 current_auc = 0.46899841017488075
User 122746 AUC after training: 0.4626391096979332
User 122746 does not improve AUC. Reverting changes.
Training on augumented user 49812 1/50 current_auc = 0.46899841017488075
User 49812 AUC after training: 0.4626391096979332
User 49812 does not improve AUC. Reverting changes.
Training on augumented user 33102 2/50 current_auc = 0.46899841017488075
User 33102 AUC after training: 0.4610492845786963
User 33102 does not improve AUC. Reverting changes.
Training on augumented user 95877 3/50 current_auc = 0.46899841017488075
User 95877 AUC after training: 0.4642289348171701
User 95877 does not improve AUC. Reverting changes.
Training on augumented user 110412 4/50 current_auc = 0.46899841017488075
User 110412 AUC after training: 0.4626391096979332
User 110412 does not improve AUC. Reverting changes.
Training on augumented user 40893 5/50 current_auc = 0.46899841017488075
User 40893 AUC after training: 0.4626391096979332
User 40893 does not improve AUC. Reverting changes.
Training on augumented user 43560 6/50 current_auc = 0.46899841017488075
User 43560 AUC after training: 0.45945945945945943
User 43560 does not improve AUC. Reverting changes.
Training on augumented user 106819 7/50 current_auc = 0.46899841017488075
User 106819 AUC after training: 0.465818759936407
User 106819 does not improve AUC. Reverting changes.
Training on augumented user 52558 8/50 current_auc = 0.46899841017488075
User 52558 AUC after training: 0.4642289348171701
User 52558 does not improve AUC. Reverting changes.
Training on augumented user 15004 9/50 current_auc = 0.46899841017488075
User 15004 AUC after training: 0.4626391096979332
User 15004 does not improve AUC. Reverting changes.
Training on augumented user 87691 10/50 current_auc = 0.46899841017488075
User 87691 AUC after training: 0.4626391096979332
User 87691 does not improve AUC. Reverting changes.
Training on augumented user 101537 11/50 current_auc = 0.46899841017488075
User 101537 AUC after training: 0.4626391096979332
User 101537 does not improve AUC. Reverting changes.
Training on augumented user 13657 12/50 current_auc = 0.46899841017488075
User 13657 AUC after training: 0.46899841017488075
User 13657 does not improve AUC. Reverting changes.
Training on augumented user 99861 13/50 current_auc = 0.46899841017488075
User 99861 AUC after training: 0.4642289348171701
User 99861 does not improve AUC. Reverting changes.
Training on augumented user 134229 14/50 current_auc = 0.46899841017488075
User 134229 AUC after training: 0.45468998410174877
User 134229 does not improve AUC. Reverting changes.
Training on augumented user 55646 15/50 current_auc = 0.46899841017488075
User 55646 AUC after training: 0.4642289348171701
User 55646 does not improve AUC. Reverting changes.
Training on augumented user 9145 16/50 current_auc = 0.46899841017488075
User 9145 AUC after training: 0.465818759936407
User 9145 does not improve AUC. Reverting changes.
Training on augumented user 67275 17/50 current_auc = 0.46899841017488075
User 67275 AUC after training: 0.4642289348171701
User 67275 does not improve AUC. Reverting changes.
Training on augumented user 8281 18/50 current_auc = 0.46899841017488075
User 8281 AUC after training: 0.465818759936407
User 8281 does not improve AUC. Reverting changes.
Training on augumented user 81492 19/50 current_auc = 0.46899841017488075
User 81492 AUC after training: 0.4610492845786963
User 81492 does not improve AUC. Reverting changes.
Training on augumented user 3589 20/50 current_auc = 0.46899841017488075
User 3589 AUC after training: 0.4626391096979332
User 3589 does not improve AUC. Reverting changes.
Training on augumented user 29112 21/50 current_auc = 0.46899841017488075
User 29112 AUC after training: 0.4626391096979332
User 29112 does not improve AUC. Reverting changes.
Training on augumented user 122353 22/50 current_auc = 0.46899841017488075
User 122353 AUC after training: 0.46740858505564387
User 122353 does not improve AUC. Reverting changes.
Training on augumented user 45981 23/50 current_auc = 0.46899841017488075
User 45981 AUC after training: 0.4626391096979332
User 45981 does not improve AUC. Reverting changes.
Training on augumented user 57353 24/50 current_auc = 0.46899841017488075
User 57353 AUC after training: 0.465818759936407
User 57353 does not improve AUC. Reverting changes.
Training on augumented user 32917 25/50 current_auc = 0.46899841017488075
User 32917 AUC after training: 0.4626391096979332
User 32917 does not improve AUC. Reverting changes.
Training on augumented user 90356 26/50 current_auc = 0.46899841017488075
User 90356 AUC after training: 0.46740858505564387
User 90356 does not improve AUC. Reverting changes.
Training on augumented user 55791 27/50 current_auc = 0.46899841017488075
User 55791 AUC after training: 0.4594594594594594
User 55791 does not improve AUC. Reverting changes.
Training on augumented user 108332 28/50 current_auc = 0.46899841017488075
User 108332 AUC after training: 0.4642289348171701
User 108332 does not improve AUC. Reverting changes.
Training on augumented user 123973 29/50 current_auc = 0.46899841017488075
User 123973 AUC after training: 0.4610492845786963
User 123973 does not improve AUC. Reverting changes.
Training on augumented user 36915 30/50 current_auc = 0.46899841017488075
User 36915 AUC after training: 0.4610492845786963
User 36915 does not improve AUC. Reverting changes.
Training on augumented user 11139 31/50 current_auc = 0.46899841017488075
User 11139 AUC after training: 0.4642289348171701
User 11139 does not improve AUC. Reverting changes.
Training on augumented user 134960 32/50 current_auc = 0.46899841017488075
User 134960 AUC after training: 0.45786963434022254
User 134960 does not improve AUC. Reverting changes.
Training on augumented user 100709 33/50 current_auc = 0.46899841017488075
User 100709 AUC after training: 0.4626391096979332
User 100709 does not improve AUC. Reverting changes.
Training on augumented user 106924 34/50 current_auc = 0.46899841017488075
User 106924 AUC after training: 0.4642289348171701
User 106924 does not improve AUC. Reverting changes.
Training on augumented user 136907 35/50 current_auc = 0.46899841017488075
User 136907 AUC after training: 0.465818759936407
User 136907 does not improve AUC. Reverting changes.
Training on augumented user 37517 36/50 current_auc = 0.46899841017488075
User 37517 AUC after training: 0.4642289348171701
User 37517 does not improve AUC. Reverting changes.
Training on augumented user 27846 37/50 current_auc = 0.46899841017488075
User 27846 AUC after training: 0.465818759936407
User 27846 does not improve AUC. Reverting changes.
Training on augumented user 43261 38/50 current_auc = 0.46899841017488075
User 43261 AUC after training: 0.46740858505564387
User 43261 does not improve AUC. Reverting changes.
Training on augumented user 6024 39/50 current_auc = 0.46899841017488075
User 6024 AUC after training: 0.45945945945945943
User 6024 does not improve AUC. Reverting changes.
Training on augumented user 56207 40/50 current_auc = 0.46899841017488075
User 56207 AUC after training: 0.4610492845786963
User 56207 does not improve AUC. Reverting changes.
Training on augumented user 128780 41/50 current_auc = 0.46899841017488075
User 128780 AUC after training: 0.465818759936407
User 128780 does not improve AUC. Reverting changes.
Training on augumented user 48759 42/50 current_auc = 0.46899841017488075
User 48759 AUC after training: 0.465818759936407
User 48759 does not improve AUC. Reverting changes.
Training on augumented user 136902 43/50 current_auc = 0.46899841017488075
User 136902 AUC after training: 0.4610492845786963
User 136902 does not improve AUC. Reverting changes.
Training on augumented user 17992 44/50 current_auc = 0.46899841017488075
User 17992 AUC after training: 0.46899841017488075
User 17992 does not improve AUC. Reverting changes.
Training on augumented user 25777 45/50 current_auc = 0.46899841017488075
User 25777 AUC after training: 0.45945945945945943
User 25777 does not improve AUC. Reverting changes.
Training on augumented user 11596 46/50 current_auc = 0.46899841017488075
User 11596 AUC after training: 0.46581875993640703
User 11596 does not improve AUC. Reverting changes.
Training on augumented user 116339 47/50 current_auc = 0.46899841017488075
User 116339 AUC after training: 0.46581875993640703
User 116339 does not improve AUC. Reverting changes.
Training on augumented user 53560 48/50 current_auc = 0.46899841017488075
User 53560 AUC after training: 0.4642289348171701
User 53560 does not improve AUC. Reverting changes.
Training on augumented user 80321 49/50 current_auc = 0.46899841017488075
User 80321 AUC after training: 0.4610492845786963
User 80321 does not improve AUC. Reverting changes.
[2024-12-02 19:18:02.302928] start test user 100214 178/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:18:02.980380] start test user 100214 178/567 recall augumented users by random, augumented_users = [75973, 12989, 130277, 86330, 37003, 52988, 47905, 124571, 7242, 88486, 102125, 122217, 28719, 128547, 50015, 124703, 31112, 20328, 92941, 40909, 97460, 125185, 65648, 138030, 124730, 123116, 29798, 123672, 127213, 92429, 17174, 88200, 55907, 122359, 77808, 135865, 35802, 84378, 52317, 41965, 91561, 13650, 66359, 79329, 79855, 6812, 59253, 124075, 92488, 102121]
[2024-12-02 19:18:03.002293] user = 100214 Cloud 178/567
[2024-12-02 19:18:03.035838] user = 100214 Local 178/567
[2024-12-02 19:18:03.180508] user = 100214 Local+ 178/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:18:05.965248] user = 100214 MPDA- 178/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5775129778197263
Training on augumented user 75973 0/50 current_auc = 0.5775129778197263
User 75973 AUC after training: 0.5760972156677678
User 75973 does not improve AUC. Reverting changes.
Training on augumented user 12989 1/50 current_auc = 0.5775129778197263
User 12989 AUC after training: 0.576097215667768
User 12989 does not improve AUC. Reverting changes.
Training on augumented user 130277 2/50 current_auc = 0.5775129778197263
User 130277 AUC after training: 0.5776309579990562
User 130277 improves AUC. Keeping the model.
Training on augumented user 86330 3/50 current_auc = 0.5776309579990562
User 86330 AUC after training: 0.5756252949504483
User 86330 does not improve AUC. Reverting changes.
Training on augumented user 37003 4/50 current_auc = 0.5776309579990562
User 37003 AUC after training: 0.5773949976403964
User 37003 does not improve AUC. Reverting changes.
Training on augumented user 52988 5/50 current_auc = 0.5776309579990562
User 52988 AUC after training: 0.5794006606890043
User 52988 improves AUC. Keeping the model.
Training on augumented user 47905 6/50 current_auc = 0.5794006606890043
User 47905 AUC after training: 0.578810759792355
User 47905 does not improve AUC. Reverting changes.
Training on augumented user 124571 7/50 current_auc = 0.5794006606890043
User 124571 AUC after training: 0.5775129778197262
User 124571 does not improve AUC. Reverting changes.
Training on augumented user 7242 8/50 current_auc = 0.5794006606890043
User 7242 AUC after training: 0.577748938178386
User 7242 does not improve AUC. Reverting changes.
Training on augumented user 88486 9/50 current_auc = 0.5794006606890043
User 88486 AUC after training: 0.5771590372817367
User 88486 does not improve AUC. Reverting changes.
Training on augumented user 102125 10/50 current_auc = 0.5794006606890043
User 102125 AUC after training: 0.5783388390750354
User 102125 does not improve AUC. Reverting changes.
Training on augumented user 122217 11/50 current_auc = 0.5794006606890043
User 122217 AUC after training: 0.5779848985370457
User 122217 does not improve AUC. Reverting changes.
Training on augumented user 28719 12/50 current_auc = 0.5794006606890043
User 28719 AUC after training: 0.5784568192543653
User 28719 does not improve AUC. Reverting changes.
Training on augumented user 128547 13/50 current_auc = 0.5794006606890043
User 128547 AUC after training: 0.5779848985370457
User 128547 does not improve AUC. Reverting changes.
Training on augumented user 50015 14/50 current_auc = 0.5794006606890043
User 50015 AUC after training: 0.5771590372817367
User 50015 does not improve AUC. Reverting changes.
Training on augumented user 124703 15/50 current_auc = 0.5794006606890043
User 124703 AUC after training: 0.5794006606890043
User 124703 does not improve AUC. Reverting changes.
Training on augumented user 31112 16/50 current_auc = 0.5794006606890043
User 31112 AUC after training: 0.5779848985370457
User 31112 does not improve AUC. Reverting changes.
Training on augumented user 20328 17/50 current_auc = 0.5794006606890043
User 20328 AUC after training: 0.5797546012269938
User 20328 improves AUC. Keeping the model.
Training on augumented user 92941 18/50 current_auc = 0.5797546012269938
User 92941 AUC after training: 0.5798725814063238
User 92941 improves AUC. Keeping the model.
Training on augumented user 40909 19/50 current_auc = 0.5798725814063238
User 40909 AUC after training: 0.579636621047664
User 40909 does not improve AUC. Reverting changes.
Training on augumented user 97460 20/50 current_auc = 0.5798725814063238
User 97460 AUC after training: 0.5791647003303445
User 97460 does not improve AUC. Reverting changes.
Training on augumented user 125185 21/50 current_auc = 0.5798725814063238
User 125185 AUC after training: 0.5791647003303445
User 125185 does not improve AUC. Reverting changes.
Training on augumented user 65648 22/50 current_auc = 0.5798725814063238
User 65648 AUC after training: 0.5798725814063238
User 65648 does not improve AUC. Reverting changes.
Training on augumented user 138030 23/50 current_auc = 0.5798725814063238
User 138030 AUC after training: 0.5790467201510145
User 138030 does not improve AUC. Reverting changes.
Training on augumented user 124730 24/50 current_auc = 0.5798725814063238
User 124730 AUC after training: 0.582468145351581
User 124730 improves AUC. Keeping the model.
Training on augumented user 123116 25/50 current_auc = 0.582468145351581
User 123116 AUC after training: 0.5804624823029731
User 123116 does not improve AUC. Reverting changes.
Training on augumented user 29798 26/50 current_auc = 0.582468145351581
User 29798 AUC after training: 0.5812883435582823
User 29798 does not improve AUC. Reverting changes.
Training on augumented user 123672 27/50 current_auc = 0.582468145351581
User 123672 AUC after training: 0.5817602642756018
User 123672 does not improve AUC. Reverting changes.
Training on augumented user 127213 28/50 current_auc = 0.582468145351581
User 127213 AUC after training: 0.5817602642756017
User 127213 does not improve AUC. Reverting changes.
Training on augumented user 92429 29/50 current_auc = 0.582468145351581
User 92429 AUC after training: 0.582468145351581
User 92429 does not improve AUC. Reverting changes.
Training on augumented user 17174 30/50 current_auc = 0.582468145351581
User 17174 AUC after training: 0.5789287399716847
User 17174 does not improve AUC. Reverting changes.
Training on augumented user 88200 31/50 current_auc = 0.582468145351581
User 88200 AUC after training: 0.581524303916942
User 88200 does not improve AUC. Reverting changes.
Training on augumented user 55907 32/50 current_auc = 0.582468145351581
User 55907 AUC after training: 0.581524303916942
User 55907 does not improve AUC. Reverting changes.
Training on augumented user 122359 33/50 current_auc = 0.582468145351581
User 122359 AUC after training: 0.582350165172251
User 122359 does not improve AUC. Reverting changes.
Training on augumented user 77808 34/50 current_auc = 0.582468145351581
User 77808 AUC after training: 0.5814063237376121
User 77808 does not improve AUC. Reverting changes.
Training on augumented user 135865 35/50 current_auc = 0.582468145351581
User 135865 AUC after training: 0.581524303916942
User 135865 does not improve AUC. Reverting changes.
Training on augumented user 35802 36/50 current_auc = 0.582468145351581
User 35802 AUC after training: 0.5819962246342615
User 35802 does not improve AUC. Reverting changes.
Training on augumented user 84378 37/50 current_auc = 0.582468145351581
User 84378 AUC after training: 0.5819962246342615
User 84378 does not improve AUC. Reverting changes.
Training on augumented user 52317 38/50 current_auc = 0.582468145351581
User 52317 AUC after training: 0.5809344030202925
User 52317 does not improve AUC. Reverting changes.
Training on augumented user 41965 39/50 current_auc = 0.582468145351581
User 41965 AUC after training: 0.5809344030202925
User 41965 does not improve AUC. Reverting changes.
Training on augumented user 91561 40/50 current_auc = 0.582468145351581
User 91561 AUC after training: 0.582468145351581
User 91561 does not improve AUC. Reverting changes.
Training on augumented user 13650 41/50 current_auc = 0.582468145351581
User 13650 AUC after training: 0.5817602642756017
User 13650 does not improve AUC. Reverting changes.
Training on augumented user 66359 42/50 current_auc = 0.582468145351581
User 66359 AUC after training: 0.5819962246342615
User 66359 does not improve AUC. Reverting changes.
Training on augumented user 79329 43/50 current_auc = 0.582468145351581
User 79329 AUC after training: 0.5827041057102407
User 79329 improves AUC. Keeping the model.
Training on augumented user 79855 44/50 current_auc = 0.5827041057102407
User 79855 AUC after training: 0.5804624823029731
User 79855 does not improve AUC. Reverting changes.
Training on augumented user 6812 45/50 current_auc = 0.5827041057102407
User 6812 AUC after training: 0.5831760264275602
User 6812 improves AUC. Keeping the model.
Training on augumented user 59253 46/50 current_auc = 0.5831760264275602
User 59253 AUC after training: 0.5818782444549315
User 59253 does not improve AUC. Reverting changes.
Training on augumented user 124075 47/50 current_auc = 0.5831760264275602
User 124075 AUC after training: 0.5831760264275602
User 124075 does not improve AUC. Reverting changes.
Training on augumented user 92488 48/50 current_auc = 0.5831760264275602
User 92488 AUC after training: 0.5822321849929213
User 92488 does not improve AUC. Reverting changes.
Training on augumented user 102121 49/50 current_auc = 0.5831760264275602
User 102121 AUC after training: 0.5829400660689004
User 102121 does not improve AUC. Reverting changes.
[2024-12-02 19:18:38.374758] start test user 100216 179/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:18:39.062372] start test user 100216 179/567 recall augumented users by random, augumented_users = [26139, 48521, 22131, 123745, 59206, 27524, 42831, 26100, 127436, 84765, 24498, 19926, 103082, 109061, 51113, 39099, 72390, 131399, 53130, 68265, 37639, 54, 20747, 114469, 90574, 122216, 129957, 95263, 68950, 45650, 73704, 97297, 75350, 56853, 94084, 90791, 87819, 2090, 5724, 38265, 8771, 52823, 44013, 79806, 48966, 75749, 86496, 63887, 51564, 131291]
[2024-12-02 19:18:39.092365] user = 100216 Cloud 179/567
[2024-12-02 19:18:39.150472] user = 100216 Local 179/567
[2024-12-02 19:18:39.233500] user = 100216 Local+ 179/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:18:42.571241] user = 100216 MPDA- 179/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.49759229534510435
Training on augumented user 26139 0/50 current_auc = 0.49759229534510435
User 26139 AUC after training: 0.4967897271268058
User 26139 does not improve AUC. Reverting changes.
Training on augumented user 48521 1/50 current_auc = 0.49759229534510435
User 48521 AUC after training: 0.4983948635634029
User 48521 improves AUC. Keeping the model.
Training on augumented user 22131 2/50 current_auc = 0.4983948635634029
User 22131 AUC after training: 0.5
User 22131 improves AUC. Keeping the model.
Training on augumented user 123745 3/50 current_auc = 0.5
User 123745 AUC after training: 0.5016051364365971
User 123745 improves AUC. Keeping the model.
Training on augumented user 59206 4/50 current_auc = 0.5016051364365971
User 59206 AUC after training: 0.5032102728731943
User 59206 improves AUC. Keeping the model.
Training on augumented user 27524 5/50 current_auc = 0.5032102728731943
User 27524 AUC after training: 0.5024077046548957
User 27524 does not improve AUC. Reverting changes.
Training on augumented user 42831 6/50 current_auc = 0.5032102728731943
User 42831 AUC after training: 0.5024077046548957
User 42831 does not improve AUC. Reverting changes.
Training on augumented user 26100 7/50 current_auc = 0.5032102728731943
User 26100 AUC after training: 0.5032102728731943
User 26100 does not improve AUC. Reverting changes.
Training on augumented user 127436 8/50 current_auc = 0.5032102728731943
User 127436 AUC after training: 0.4991974317817015
User 127436 does not improve AUC. Reverting changes.
Training on augumented user 84765 9/50 current_auc = 0.5032102728731943
User 84765 AUC after training: 0.5032102728731943
User 84765 does not improve AUC. Reverting changes.
Training on augumented user 24498 10/50 current_auc = 0.5032102728731943
User 24498 AUC after training: 0.5032102728731943
User 24498 does not improve AUC. Reverting changes.
Training on augumented user 19926 11/50 current_auc = 0.5032102728731943
User 19926 AUC after training: 0.5
User 19926 does not improve AUC. Reverting changes.
Training on augumented user 103082 12/50 current_auc = 0.5032102728731943
User 103082 AUC after training: 0.4983948635634029
User 103082 does not improve AUC. Reverting changes.
Training on augumented user 109061 13/50 current_auc = 0.5032102728731943
User 109061 AUC after training: 0.5
User 109061 does not improve AUC. Reverting changes.
Training on augumented user 51113 14/50 current_auc = 0.5032102728731943
User 51113 AUC after training: 0.5048154093097914
User 51113 improves AUC. Keeping the model.
Training on augumented user 39099 15/50 current_auc = 0.5048154093097914
User 39099 AUC after training: 0.4991974317817015
User 39099 does not improve AUC. Reverting changes.
Training on augumented user 72390 16/50 current_auc = 0.5048154093097914
User 72390 AUC after training: 0.5040128410914928
User 72390 does not improve AUC. Reverting changes.
Training on augumented user 131399 17/50 current_auc = 0.5048154093097914
User 131399 AUC after training: 0.5032102728731943
User 131399 does not improve AUC. Reverting changes.
Training on augumented user 53130 18/50 current_auc = 0.5048154093097914
User 53130 AUC after training: 0.5040128410914928
User 53130 does not improve AUC. Reverting changes.
Training on augumented user 68265 19/50 current_auc = 0.5048154093097914
User 68265 AUC after training: 0.5032102728731943
User 68265 does not improve AUC. Reverting changes.
Training on augumented user 37639 20/50 current_auc = 0.5048154093097914
User 37639 AUC after training: 0.5016051364365971
User 37639 does not improve AUC. Reverting changes.
Training on augumented user 54 21/50 current_auc = 0.5048154093097914
User 54 AUC after training: 0.5032102728731942
User 54 does not improve AUC. Reverting changes.
Training on augumented user 20747 22/50 current_auc = 0.5048154093097914
User 20747 AUC after training: 0.5016051364365971
User 20747 does not improve AUC. Reverting changes.
Training on augumented user 114469 23/50 current_auc = 0.5048154093097914
User 114469 AUC after training: 0.5024077046548957
User 114469 does not improve AUC. Reverting changes.
Training on augumented user 90574 24/50 current_auc = 0.5048154093097914
User 90574 AUC after training: 0.5024077046548957
User 90574 does not improve AUC. Reverting changes.
Training on augumented user 122216 25/50 current_auc = 0.5048154093097914
User 122216 AUC after training: 0.5032102728731942
User 122216 does not improve AUC. Reverting changes.
Training on augumented user 129957 26/50 current_auc = 0.5048154093097914
User 129957 AUC after training: 0.5032102728731943
User 129957 does not improve AUC. Reverting changes.
Training on augumented user 95263 27/50 current_auc = 0.5048154093097914
User 95263 AUC after training: 0.5032102728731943
User 95263 does not improve AUC. Reverting changes.
Training on augumented user 68950 28/50 current_auc = 0.5048154093097914
User 68950 AUC after training: 0.5016051364365972
User 68950 does not improve AUC. Reverting changes.
Training on augumented user 45650 29/50 current_auc = 0.5048154093097914
User 45650 AUC after training: 0.5032102728731942
User 45650 does not improve AUC. Reverting changes.
Training on augumented user 73704 30/50 current_auc = 0.5048154093097914
User 73704 AUC after training: 0.5008025682182986
User 73704 does not improve AUC. Reverting changes.
Training on augumented user 97297 31/50 current_auc = 0.5048154093097914
User 97297 AUC after training: 0.5016051364365971
User 97297 does not improve AUC. Reverting changes.
Training on augumented user 75350 32/50 current_auc = 0.5048154093097914
User 75350 AUC after training: 0.5016051364365972
User 75350 does not improve AUC. Reverting changes.
Training on augumented user 56853 33/50 current_auc = 0.5048154093097914
User 56853 AUC after training: 0.5016051364365971
User 56853 does not improve AUC. Reverting changes.
Training on augumented user 94084 34/50 current_auc = 0.5048154093097914
User 94084 AUC after training: 0.5
User 94084 does not improve AUC. Reverting changes.
Training on augumented user 90791 35/50 current_auc = 0.5048154093097914
User 90791 AUC after training: 0.5040128410914928
User 90791 does not improve AUC. Reverting changes.
Training on augumented user 87819 36/50 current_auc = 0.5048154093097914
User 87819 AUC after training: 0.5032102728731943
User 87819 does not improve AUC. Reverting changes.
Training on augumented user 2090 37/50 current_auc = 0.5048154093097914
User 2090 AUC after training: 0.5040128410914928
User 2090 does not improve AUC. Reverting changes.
Training on augumented user 5724 38/50 current_auc = 0.5048154093097914
User 5724 AUC after training: 0.5032102728731943
User 5724 does not improve AUC. Reverting changes.
Training on augumented user 38265 39/50 current_auc = 0.5048154093097914
User 38265 AUC after training: 0.5024077046548957
User 38265 does not improve AUC. Reverting changes.
Training on augumented user 8771 40/50 current_auc = 0.5048154093097914
User 8771 AUC after training: 0.5016051364365971
User 8771 does not improve AUC. Reverting changes.
Training on augumented user 52823 41/50 current_auc = 0.5048154093097914
User 52823 AUC after training: 0.5024077046548957
User 52823 does not improve AUC. Reverting changes.
Training on augumented user 44013 42/50 current_auc = 0.5048154093097914
User 44013 AUC after training: 0.5
User 44013 does not improve AUC. Reverting changes.
Training on augumented user 79806 43/50 current_auc = 0.5048154093097914
User 79806 AUC after training: 0.5024077046548957
User 79806 does not improve AUC. Reverting changes.
Training on augumented user 48966 44/50 current_auc = 0.5048154093097914
User 48966 AUC after training: 0.5048154093097914
User 48966 does not improve AUC. Reverting changes.
Training on augumented user 75749 45/50 current_auc = 0.5048154093097914
User 75749 AUC after training: 0.4991974317817015
User 75749 does not improve AUC. Reverting changes.
Training on augumented user 86496 46/50 current_auc = 0.5048154093097914
User 86496 AUC after training: 0.4967897271268058
User 86496 does not improve AUC. Reverting changes.
Training on augumented user 63887 47/50 current_auc = 0.5048154093097914
User 63887 AUC after training: 0.5
User 63887 does not improve AUC. Reverting changes.
Training on augumented user 51564 48/50 current_auc = 0.5048154093097914
User 51564 AUC after training: 0.5024077046548957
User 51564 does not improve AUC. Reverting changes.
Training on augumented user 131291 49/50 current_auc = 0.5048154093097914
User 131291 AUC after training: 0.5016051364365971
User 131291 does not improve AUC. Reverting changes.
[2024-12-02 19:19:15.883917] start test user 100249 180/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:19:16.640471] start test user 100249 180/567 recall augumented users by random, augumented_users = [78147, 131325, 82200, 22636, 81629, 96612, 67175, 59648, 129203, 47726, 71615, 66285, 70158, 52838, 64779, 54988, 115703, 46270, 4513, 13795, 116281, 40365, 75665, 130741, 9637, 111011, 60553, 101143, 131180, 42097, 4255, 101735, 19525, 56280, 77377, 17652, 67155, 120985, 125727, 67104, 96630, 51859, 46546, 66601, 126477, 136702, 127135, 60766, 116404, 70703]
[2024-12-02 19:19:16.655526] user = 100249 Cloud 180/567
[2024-12-02 19:19:16.683965] user = 100249 Local 180/567
[2024-12-02 19:19:16.739065] user = 100249 Local+ 180/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:19:19.486875] user = 100249 MPDA- 180/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6031884057971014
Training on augumented user 78147 0/50 current_auc = 0.6031884057971014
User 78147 AUC after training: 0.6034782608695652
User 78147 improves AUC. Keeping the model.
Training on augumented user 131325 1/50 current_auc = 0.6034782608695652
User 131325 AUC after training: 0.6034782608695652
User 131325 does not improve AUC. Reverting changes.
Training on augumented user 82200 2/50 current_auc = 0.6034782608695652
User 82200 AUC after training: 0.6042028985507246
User 82200 improves AUC. Keeping the model.
Training on augumented user 22636 3/50 current_auc = 0.6042028985507246
User 22636 AUC after training: 0.603768115942029
User 22636 does not improve AUC. Reverting changes.
Training on augumented user 81629 4/50 current_auc = 0.6042028985507246
User 81629 AUC after training: 0.603768115942029
User 81629 does not improve AUC. Reverting changes.
Training on augumented user 96612 5/50 current_auc = 0.6042028985507246
User 96612 AUC after training: 0.6031884057971015
User 96612 does not improve AUC. Reverting changes.
Training on augumented user 67175 6/50 current_auc = 0.6042028985507246
User 67175 AUC after training: 0.6028985507246376
User 67175 does not improve AUC. Reverting changes.
Training on augumented user 59648 7/50 current_auc = 0.6042028985507246
User 59648 AUC after training: 0.6044927536231883
User 59648 improves AUC. Keeping the model.
Training on augumented user 129203 8/50 current_auc = 0.6044927536231883
User 129203 AUC after training: 0.6034782608695652
User 129203 does not improve AUC. Reverting changes.
Training on augumented user 47726 9/50 current_auc = 0.6044927536231883
User 47726 AUC after training: 0.6046376811594203
User 47726 improves AUC. Keeping the model.
Training on augumented user 71615 10/50 current_auc = 0.6046376811594203
User 71615 AUC after training: 0.6040579710144928
User 71615 does not improve AUC. Reverting changes.
Training on augumented user 66285 11/50 current_auc = 0.6046376811594203
User 66285 AUC after training: 0.6044927536231883
User 66285 does not improve AUC. Reverting changes.
Training on augumented user 70158 12/50 current_auc = 0.6046376811594203
User 70158 AUC after training: 0.6043478260869566
User 70158 does not improve AUC. Reverting changes.
Training on augumented user 52838 13/50 current_auc = 0.6046376811594203
User 52838 AUC after training: 0.6068115942028985
User 52838 improves AUC. Keeping the model.
Training on augumented user 64779 14/50 current_auc = 0.6068115942028985
User 64779 AUC after training: 0.6053623188405797
User 64779 does not improve AUC. Reverting changes.
Training on augumented user 54988 15/50 current_auc = 0.6068115942028985
User 54988 AUC after training: 0.6053623188405797
User 54988 does not improve AUC. Reverting changes.
Training on augumented user 115703 16/50 current_auc = 0.6068115942028985
User 115703 AUC after training: 0.6052173913043478
User 115703 does not improve AUC. Reverting changes.
Training on augumented user 46270 17/50 current_auc = 0.6068115942028985
User 46270 AUC after training: 0.6073913043478261
User 46270 improves AUC. Keeping the model.
Training on augumented user 4513 18/50 current_auc = 0.6073913043478261
User 4513 AUC after training: 0.606086956521739
User 4513 does not improve AUC. Reverting changes.
Training on augumented user 13795 19/50 current_auc = 0.6073913043478261
User 13795 AUC after training: 0.6057971014492753
User 13795 does not improve AUC. Reverting changes.
Training on augumented user 116281 20/50 current_auc = 0.6073913043478261
User 116281 AUC after training: 0.6068115942028985
User 116281 does not improve AUC. Reverting changes.
Training on augumented user 40365 21/50 current_auc = 0.6073913043478261
User 40365 AUC after training: 0.606376811594203
User 40365 does not improve AUC. Reverting changes.
Training on augumented user 75665 22/50 current_auc = 0.6073913043478261
User 75665 AUC after training: 0.6063768115942029
User 75665 does not improve AUC. Reverting changes.
Training on augumented user 130741 23/50 current_auc = 0.6073913043478261
User 130741 AUC after training: 0.606086956521739
User 130741 does not improve AUC. Reverting changes.
Training on augumented user 9637 24/50 current_auc = 0.6073913043478261
User 9637 AUC after training: 0.6060869565217392
User 9637 does not improve AUC. Reverting changes.
Training on augumented user 111011 25/50 current_auc = 0.6073913043478261
User 111011 AUC after training: 0.606376811594203
User 111011 does not improve AUC. Reverting changes.
Training on augumented user 60553 26/50 current_auc = 0.6073913043478261
User 60553 AUC after training: 0.6065217391304347
User 60553 does not improve AUC. Reverting changes.
Training on augumented user 101143 27/50 current_auc = 0.6073913043478261
User 101143 AUC after training: 0.6063768115942029
User 101143 does not improve AUC. Reverting changes.
Training on augumented user 131180 28/50 current_auc = 0.6073913043478261
User 131180 AUC after training: 0.6047826086956521
User 131180 does not improve AUC. Reverting changes.
Training on augumented user 42097 29/50 current_auc = 0.6073913043478261
User 42097 AUC after training: 0.6057971014492753
User 42097 does not improve AUC. Reverting changes.
Training on augumented user 4255 30/50 current_auc = 0.6073913043478261
User 4255 AUC after training: 0.6057971014492753
User 4255 does not improve AUC. Reverting changes.
Training on augumented user 101735 31/50 current_auc = 0.6073913043478261
User 101735 AUC after training: 0.6055072463768116
User 101735 does not improve AUC. Reverting changes.
Training on augumented user 19525 32/50 current_auc = 0.6073913043478261
User 19525 AUC after training: 0.6057971014492753
User 19525 does not improve AUC. Reverting changes.
Training on augumented user 56280 33/50 current_auc = 0.6073913043478261
User 56280 AUC after training: 0.6068115942028985
User 56280 does not improve AUC. Reverting changes.
Training on augumented user 77377 34/50 current_auc = 0.6073913043478261
User 77377 AUC after training: 0.6066666666666667
User 77377 does not improve AUC. Reverting changes.
Training on augumented user 17652 35/50 current_auc = 0.6073913043478261
User 17652 AUC after training: 0.6068115942028985
User 17652 does not improve AUC. Reverting changes.
Training on augumented user 67155 36/50 current_auc = 0.6073913043478261
User 67155 AUC after training: 0.6065217391304347
User 67155 does not improve AUC. Reverting changes.
Training on augumented user 120985 37/50 current_auc = 0.6073913043478261
User 120985 AUC after training: 0.6057971014492753
User 120985 does not improve AUC. Reverting changes.
Training on augumented user 125727 38/50 current_auc = 0.6073913043478261
User 125727 AUC after training: 0.6063768115942029
User 125727 does not improve AUC. Reverting changes.
Training on augumented user 67104 39/50 current_auc = 0.6073913043478261
User 67104 AUC after training: 0.6057971014492753
User 67104 does not improve AUC. Reverting changes.
Training on augumented user 96630 40/50 current_auc = 0.6073913043478261
User 96630 AUC after training: 0.603768115942029
User 96630 does not improve AUC. Reverting changes.
Training on augumented user 51859 41/50 current_auc = 0.6073913043478261
User 51859 AUC after training: 0.6043478260869565
User 51859 does not improve AUC. Reverting changes.
Training on augumented user 46546 42/50 current_auc = 0.6073913043478261
User 46546 AUC after training: 0.6052173913043478
User 46546 does not improve AUC. Reverting changes.
Training on augumented user 66601 43/50 current_auc = 0.6073913043478261
User 66601 AUC after training: 0.6057971014492753
User 66601 does not improve AUC. Reverting changes.
Training on augumented user 126477 44/50 current_auc = 0.6073913043478261
User 126477 AUC after training: 0.6046376811594203
User 126477 does not improve AUC. Reverting changes.
Training on augumented user 136702 45/50 current_auc = 0.6073913043478261
User 136702 AUC after training: 0.6043478260869566
User 136702 does not improve AUC. Reverting changes.
Training on augumented user 127135 46/50 current_auc = 0.6073913043478261
User 127135 AUC after training: 0.6055072463768115
User 127135 does not improve AUC. Reverting changes.
Training on augumented user 60766 47/50 current_auc = 0.6073913043478261
User 60766 AUC after training: 0.606086956521739
User 60766 does not improve AUC. Reverting changes.
Training on augumented user 116404 48/50 current_auc = 0.6073913043478261
User 116404 AUC after training: 0.6052173913043478
User 116404 does not improve AUC. Reverting changes.
Training on augumented user 70703 49/50 current_auc = 0.6073913043478261
User 70703 AUC after training: 0.6065217391304347
User 70703 does not improve AUC. Reverting changes.
[2024-12-02 19:19:50.536872] start test user 100254 181/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:19:51.041611] start test user 100254 181/567 recall augumented users by random, augumented_users = [42119, 118516, 123126, 47517, 32674, 135234, 54404, 76552, 122141, 8913, 71304, 136574, 38990, 96956, 129017, 27338, 38619, 123167, 97801, 107219, 73959, 62416, 122429, 43386, 1897, 180, 109398, 77082, 133505, 19180, 55280, 45712, 117568, 118656, 129595, 109222, 94881, 18885, 63380, 113159, 99136, 71062, 98719, 132470, 55191, 91458, 10529, 5975, 88824, 72363]
[2024-12-02 19:19:51.058162] user = 100254 Cloud 181/567
[2024-12-02 19:19:51.095301] user = 100254 Local 181/567
[2024-12-02 19:19:51.284016] user = 100254 Local+ 181/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:19:53.538751] user = 100254 MPDA- 181/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8103183490641497
Training on augumented user 42119 0/50 current_auc = 0.8103183490641497
User 42119 AUC after training: 0.8102703567429211
User 42119 does not improve AUC. Reverting changes.
Training on augumented user 118516 1/50 current_auc = 0.8103183490641497
User 118516 AUC after training: 0.8103823388257878
User 118516 improves AUC. Keeping the model.
Training on augumented user 123126 2/50 current_auc = 0.8103823388257878
User 123126 AUC after training: 0.8105423132298832
User 123126 improves AUC. Keeping the model.
Training on augumented user 47517 3/50 current_auc = 0.8105423132298832
User 47517 AUC after training: 0.810446328587426
User 47517 does not improve AUC. Reverting changes.
Training on augumented user 32674 4/50 current_auc = 0.8105423132298832
User 32674 AUC after training: 0.8103503439449687
User 32674 does not improve AUC. Reverting changes.
Training on augumented user 135234 5/50 current_auc = 0.8105423132298832
User 135234 AUC after training: 0.8098864181730923
User 135234 does not improve AUC. Reverting changes.
Training on augumented user 54404 6/50 current_auc = 0.8105423132298832
User 54404 AUC after training: 0.8102223644216925
User 54404 does not improve AUC. Reverting changes.
Training on augumented user 76552 7/50 current_auc = 0.8105423132298832
User 76552 AUC after training: 0.8103663413853783
User 76552 does not improve AUC. Reverting changes.
Training on augumented user 122141 8/50 current_auc = 0.8105423132298832
User 122141 AUC after training: 0.810414333706607
User 122141 does not improve AUC. Reverting changes.
Training on augumented user 8913 9/50 current_auc = 0.8105423132298832
User 8913 AUC after training: 0.8096624540073588
User 8913 does not improve AUC. Reverting changes.
Training on augumented user 71304 10/50 current_auc = 0.8105423132298832
User 71304 AUC after training: 0.810270356742921
User 71304 does not improve AUC. Reverting changes.
Training on augumented user 136574 11/50 current_auc = 0.8105423132298832
User 136574 AUC after training: 0.8101423772196448
User 136574 does not improve AUC. Reverting changes.
Training on augumented user 38990 12/50 current_auc = 0.8105423132298832
User 38990 AUC after training: 0.8103823388257878
User 38990 does not improve AUC. Reverting changes.
Training on augumented user 96956 13/50 current_auc = 0.8105423132298832
User 96956 AUC after training: 0.809998400255959
User 96956 does not improve AUC. Reverting changes.
Training on augumented user 129017 14/50 current_auc = 0.8105423132298832
User 129017 AUC after training: 0.8102223644216925
User 129017 does not improve AUC. Reverting changes.
Training on augumented user 27338 15/50 current_auc = 0.8105423132298832
User 27338 AUC after training: 0.8105263157894737
User 27338 does not improve AUC. Reverting changes.
Training on augumented user 38619 16/50 current_auc = 0.8105423132298832
User 38619 AUC after training: 0.810206366981283
User 38619 does not improve AUC. Reverting changes.
Training on augumented user 123167 17/50 current_auc = 0.8105423132298832
User 123167 AUC after training: 0.8103663413853783
User 123167 does not improve AUC. Reverting changes.
Training on augumented user 97801 18/50 current_auc = 0.8105423132298832
User 97801 AUC after training: 0.8105103183490642
User 97801 does not improve AUC. Reverting changes.
Training on augumented user 107219 19/50 current_auc = 0.8105423132298832
User 107219 AUC after training: 0.8106862901935691
User 107219 improves AUC. Keeping the model.
Training on augumented user 73959 20/50 current_auc = 0.8106862901935691
User 73959 AUC after training: 0.8109102543593025
User 73959 improves AUC. Keeping the model.
Training on augumented user 62416 21/50 current_auc = 0.8109102543593025
User 62416 AUC after training: 0.8109102543593025
User 62416 does not improve AUC. Reverting changes.
Training on augumented user 122429 22/50 current_auc = 0.8109102543593025
User 122429 AUC after training: 0.8105583106702928
User 122429 does not improve AUC. Reverting changes.
Training on augumented user 43386 23/50 current_auc = 0.8109102543593025
User 43386 AUC after training: 0.8107502799552071
User 43386 does not improve AUC. Reverting changes.
Training on augumented user 1897 24/50 current_auc = 0.8109102543593025
User 1897 AUC after training: 0.8108782594784835
User 1897 does not improve AUC. Reverting changes.
Training on augumented user 180 25/50 current_auc = 0.8109102543593025
User 180 AUC after training: 0.8109422492401215
User 180 improves AUC. Keeping the model.
Training on augumented user 109398 26/50 current_auc = 0.8109422492401215
User 109398 AUC after training: 0.8109422492401216
User 109398 improves AUC. Keeping the model.
Training on augumented user 77082 27/50 current_auc = 0.8109422492401216
User 77082 AUC after training: 0.8109102543593025
User 77082 does not improve AUC. Reverting changes.
Training on augumented user 133505 28/50 current_auc = 0.8109422492401216
User 133505 AUC after training: 0.810686290193569
User 133505 does not improve AUC. Reverting changes.
Training on augumented user 19180 29/50 current_auc = 0.8109422492401216
User 19180 AUC after training: 0.8111022236442169
User 19180 improves AUC. Keeping the model.
Training on augumented user 55280 30/50 current_auc = 0.8111022236442169
User 55280 AUC after training: 0.810718285074388
User 55280 does not improve AUC. Reverting changes.
Training on augumented user 45712 31/50 current_auc = 0.8111022236442169
User 45712 AUC after training: 0.8110062390017597
User 45712 does not improve AUC. Reverting changes.
Training on augumented user 117568 32/50 current_auc = 0.8111022236442169
User 117568 AUC after training: 0.810718285074388
User 117568 does not improve AUC. Reverting changes.
Training on augumented user 118656 33/50 current_auc = 0.8111022236442169
User 118656 AUC after training: 0.8110382338825788
User 118656 does not improve AUC. Reverting changes.
Training on augumented user 129595 34/50 current_auc = 0.8111022236442169
User 129595 AUC after training: 0.8107182850743881
User 129595 does not improve AUC. Reverting changes.
Training on augumented user 109222 35/50 current_auc = 0.8111022236442169
User 109222 AUC after training: 0.8109102543593024
User 109222 does not improve AUC. Reverting changes.
Training on augumented user 94881 36/50 current_auc = 0.8111022236442169
User 94881 AUC after training: 0.8105903055511118
User 94881 does not improve AUC. Reverting changes.
Training on augumented user 18885 37/50 current_auc = 0.8111022236442169
User 18885 AUC after training: 0.81065429531275
User 18885 does not improve AUC. Reverting changes.
Training on augumented user 63380 38/50 current_auc = 0.8111022236442169
User 63380 AUC after training: 0.8107182850743881
User 63380 does not improve AUC. Reverting changes.
Training on augumented user 113159 39/50 current_auc = 0.8111022236442169
User 113159 AUC after training: 0.8112142057270836
User 113159 improves AUC. Keeping the model.
Training on augumented user 99136 40/50 current_auc = 0.8112142057270836
User 99136 AUC after training: 0.8108942569188929
User 99136 does not improve AUC. Reverting changes.
Training on augumented user 71062 41/50 current_auc = 0.8112142057270836
User 71062 AUC after training: 0.8111502159654455
User 71062 does not improve AUC. Reverting changes.
Training on augumented user 98719 42/50 current_auc = 0.8112142057270836
User 98719 AUC after training: 0.8107022876339786
User 98719 does not improve AUC. Reverting changes.
Training on augumented user 132470 43/50 current_auc = 0.8112142057270836
User 132470 AUC after training: 0.8113101903695409
User 132470 improves AUC. Keeping the model.
Training on augumented user 55191 44/50 current_auc = 0.8113101903695409
User 55191 AUC after training: 0.810718285074388
User 55191 does not improve AUC. Reverting changes.
Training on augumented user 91458 45/50 current_auc = 0.8113101903695409
User 91458 AUC after training: 0.8111502159654455
User 91458 does not improve AUC. Reverting changes.
Training on augumented user 10529 46/50 current_auc = 0.8113101903695409
User 10529 AUC after training: 0.8109902415613501
User 10529 does not improve AUC. Reverting changes.
Training on augumented user 5975 47/50 current_auc = 0.8113101903695409
User 5975 AUC after training: 0.810926251799712
User 5975 does not improve AUC. Reverting changes.
Training on augumented user 88824 48/50 current_auc = 0.8113101903695409
User 88824 AUC after training: 0.8112781954887217
User 88824 does not improve AUC. Reverting changes.
Training on augumented user 72363 49/50 current_auc = 0.8113101903695409
User 72363 AUC after training: 0.8113741801311789
User 72363 improves AUC. Keeping the model.
[2024-12-02 19:20:25.309462] start test user 100273 182/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:20:25.708994] start test user 100273 182/567 recall augumented users by random, augumented_users = [14636, 85659, 42854, 32014, 133028, 123870, 81319, 33190, 16936, 134193, 94642, 3264, 34242, 42505, 85678, 40021, 17619, 81136, 79123, 97649, 129837, 128093, 60502, 58679, 41085, 100345, 18537, 39508, 74031, 107627, 114302, 133532, 111796, 128069, 134093, 98036, 134586, 88825, 98845, 50426, 28177, 41369, 51929, 22099, 64789, 25827, 101973, 136368, 116811, 853]
[2024-12-02 19:20:25.725430] user = 100273 Cloud 182/567
[2024-12-02 19:20:25.734988] user = 100273 Local 182/567
[2024-12-02 19:20:26.101619] user = 100273 Local+ 182/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:20:28.932382] user = 100273 MPDA- 182/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 1.0
Training on augumented user 14636 0/50 current_auc = 1.0
User 14636 AUC after training: 1.0
User 14636 does not improve AUC. Reverting changes.
Training on augumented user 85659 1/50 current_auc = 1.0
User 85659 AUC after training: 1.0
User 85659 does not improve AUC. Reverting changes.
Training on augumented user 42854 2/50 current_auc = 1.0
User 42854 AUC after training: 1.0
User 42854 does not improve AUC. Reverting changes.
Training on augumented user 32014 3/50 current_auc = 1.0
User 32014 AUC after training: 1.0
User 32014 does not improve AUC. Reverting changes.
Training on augumented user 133028 4/50 current_auc = 1.0
User 133028 AUC after training: 1.0
User 133028 does not improve AUC. Reverting changes.
Training on augumented user 123870 5/50 current_auc = 1.0
User 123870 AUC after training: 1.0
User 123870 does not improve AUC. Reverting changes.
Training on augumented user 81319 6/50 current_auc = 1.0
User 81319 AUC after training: 1.0
User 81319 does not improve AUC. Reverting changes.
Training on augumented user 33190 7/50 current_auc = 1.0
User 33190 AUC after training: 1.0
User 33190 does not improve AUC. Reverting changes.
Training on augumented user 16936 8/50 current_auc = 1.0
User 16936 AUC after training: 1.0
User 16936 does not improve AUC. Reverting changes.
Training on augumented user 134193 9/50 current_auc = 1.0
User 134193 AUC after training: 1.0
User 134193 does not improve AUC. Reverting changes.
Training on augumented user 94642 10/50 current_auc = 1.0
User 94642 AUC after training: 1.0
User 94642 does not improve AUC. Reverting changes.
Training on augumented user 3264 11/50 current_auc = 1.0
User 3264 AUC after training: 1.0
User 3264 does not improve AUC. Reverting changes.
Training on augumented user 34242 12/50 current_auc = 1.0
User 34242 AUC after training: 1.0
User 34242 does not improve AUC. Reverting changes.
Training on augumented user 42505 13/50 current_auc = 1.0
User 42505 AUC after training: 1.0
User 42505 does not improve AUC. Reverting changes.
Training on augumented user 85678 14/50 current_auc = 1.0
User 85678 AUC after training: 1.0
User 85678 does not improve AUC. Reverting changes.
Training on augumented user 40021 15/50 current_auc = 1.0
User 40021 AUC after training: 1.0
User 40021 does not improve AUC. Reverting changes.
Training on augumented user 17619 16/50 current_auc = 1.0
User 17619 AUC after training: 1.0
User 17619 does not improve AUC. Reverting changes.
Training on augumented user 81136 17/50 current_auc = 1.0
User 81136 AUC after training: 1.0
User 81136 does not improve AUC. Reverting changes.
Training on augumented user 79123 18/50 current_auc = 1.0
User 79123 AUC after training: 1.0
User 79123 does not improve AUC. Reverting changes.
Training on augumented user 97649 19/50 current_auc = 1.0
User 97649 AUC after training: 1.0
User 97649 does not improve AUC. Reverting changes.
Training on augumented user 129837 20/50 current_auc = 1.0
User 129837 AUC after training: 1.0
User 129837 does not improve AUC. Reverting changes.
Training on augumented user 128093 21/50 current_auc = 1.0
User 128093 AUC after training: 1.0
User 128093 does not improve AUC. Reverting changes.
Training on augumented user 60502 22/50 current_auc = 1.0
User 60502 AUC after training: 1.0
User 60502 does not improve AUC. Reverting changes.
Training on augumented user 58679 23/50 current_auc = 1.0
User 58679 AUC after training: 1.0
User 58679 does not improve AUC. Reverting changes.
Training on augumented user 41085 24/50 current_auc = 1.0
User 41085 AUC after training: 1.0
User 41085 does not improve AUC. Reverting changes.
Training on augumented user 100345 25/50 current_auc = 1.0
User 100345 AUC after training: 1.0
User 100345 does not improve AUC. Reverting changes.
Training on augumented user 18537 26/50 current_auc = 1.0
User 18537 AUC after training: 1.0
User 18537 does not improve AUC. Reverting changes.
Training on augumented user 39508 27/50 current_auc = 1.0
User 39508 AUC after training: 1.0
User 39508 does not improve AUC. Reverting changes.
Training on augumented user 74031 28/50 current_auc = 1.0
User 74031 AUC after training: 1.0
User 74031 does not improve AUC. Reverting changes.
Training on augumented user 107627 29/50 current_auc = 1.0
User 107627 AUC after training: 1.0
User 107627 does not improve AUC. Reverting changes.
Training on augumented user 114302 30/50 current_auc = 1.0
User 114302 AUC after training: 1.0
User 114302 does not improve AUC. Reverting changes.
Training on augumented user 133532 31/50 current_auc = 1.0
User 133532 AUC after training: 1.0
User 133532 does not improve AUC. Reverting changes.
Training on augumented user 111796 32/50 current_auc = 1.0
User 111796 AUC after training: 1.0
User 111796 does not improve AUC. Reverting changes.
Training on augumented user 128069 33/50 current_auc = 1.0
User 128069 AUC after training: 1.0
User 128069 does not improve AUC. Reverting changes.
Training on augumented user 134093 34/50 current_auc = 1.0
User 134093 AUC after training: 1.0
User 134093 does not improve AUC. Reverting changes.
Training on augumented user 98036 35/50 current_auc = 1.0
User 98036 AUC after training: 1.0
User 98036 does not improve AUC. Reverting changes.
Training on augumented user 134586 36/50 current_auc = 1.0
User 134586 AUC after training: 1.0
User 134586 does not improve AUC. Reverting changes.
Training on augumented user 88825 37/50 current_auc = 1.0
User 88825 AUC after training: 1.0
User 88825 does not improve AUC. Reverting changes.
Training on augumented user 98845 38/50 current_auc = 1.0
User 98845 AUC after training: 1.0
User 98845 does not improve AUC. Reverting changes.
Training on augumented user 50426 39/50 current_auc = 1.0
User 50426 AUC after training: 1.0
User 50426 does not improve AUC. Reverting changes.
Training on augumented user 28177 40/50 current_auc = 1.0
User 28177 AUC after training: 1.0
User 28177 does not improve AUC. Reverting changes.
Training on augumented user 41369 41/50 current_auc = 1.0
User 41369 AUC after training: 1.0
User 41369 does not improve AUC. Reverting changes.
Training on augumented user 51929 42/50 current_auc = 1.0
User 51929 AUC after training: 1.0
User 51929 does not improve AUC. Reverting changes.
Training on augumented user 22099 43/50 current_auc = 1.0
User 22099 AUC after training: 1.0
User 22099 does not improve AUC. Reverting changes.
Training on augumented user 64789 44/50 current_auc = 1.0
User 64789 AUC after training: 1.0
User 64789 does not improve AUC. Reverting changes.
Training on augumented user 25827 45/50 current_auc = 1.0
User 25827 AUC after training: 1.0
User 25827 does not improve AUC. Reverting changes.
Training on augumented user 101973 46/50 current_auc = 1.0
User 101973 AUC after training: 1.0
User 101973 does not improve AUC. Reverting changes.
Training on augumented user 136368 47/50 current_auc = 1.0
User 136368 AUC after training: 1.0
User 136368 does not improve AUC. Reverting changes.
Training on augumented user 116811 48/50 current_auc = 1.0
User 116811 AUC after training: 1.0
User 116811 does not improve AUC. Reverting changes.
Training on augumented user 853 49/50 current_auc = 1.0
User 853 AUC after training: 1.0
User 853 does not improve AUC. Reverting changes.
[2024-12-02 19:20:59.219713] start test user 100277 183/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:20:59.873929] start test user 100277 183/567 recall augumented users by random, augumented_users = [26254, 63340, 128646, 61223, 97969, 38377, 94150, 47572, 71506, 58944, 43873, 50105, 40634, 1009, 49227, 47759, 60029, 90991, 40560, 71747, 91512, 130984, 100204, 121296, 55907, 102030, 108025, 45717, 34236, 92816, 127847, 124165, 38715, 78466, 31279, 28974, 126656, 70014, 54873, 24633, 72064, 3037, 100860, 119987, 23561, 27571, 71539, 127468, 73270, 106994]
[2024-12-02 19:20:59.917613] user = 100277 Cloud 183/567
[2024-12-02 19:20:59.987634] user = 100277 Local 183/567
[2024-12-02 19:21:00.091121] user = 100277 Local+ 183/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:21:02.920460] user = 100277 MPDA- 183/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6009098428453267
Training on augumented user 26254 0/50 current_auc = 0.6009098428453267
User 26254 AUC after training: 0.6017369727047146
User 26254 improves AUC. Keeping the model.
Training on augumented user 63340 1/50 current_auc = 0.6017369727047146
User 63340 AUC after training: 0.6013234077750207
User 63340 does not improve AUC. Reverting changes.
Training on augumented user 128646 2/50 current_auc = 0.6017369727047146
User 128646 AUC after training: 0.6021505376344086
User 128646 improves AUC. Keeping the model.
Training on augumented user 61223 3/50 current_auc = 0.6021505376344086
User 61223 AUC after training: 0.6021505376344086
User 61223 does not improve AUC. Reverting changes.
Training on augumented user 97969 4/50 current_auc = 0.6021505376344086
User 97969 AUC after training: 0.6038047973531845
User 97969 improves AUC. Keeping the model.
Training on augumented user 38377 5/50 current_auc = 0.6038047973531845
User 38377 AUC after training: 0.6033912324234905
User 38377 does not improve AUC. Reverting changes.
Training on augumented user 94150 6/50 current_auc = 0.6038047973531845
User 94150 AUC after training: 0.6000827129859387
User 94150 does not improve AUC. Reverting changes.
Training on augumented user 47572 7/50 current_auc = 0.6038047973531845
User 47572 AUC after training: 0.6054590570719603
User 47572 improves AUC. Keeping the model.
Training on augumented user 71506 8/50 current_auc = 0.6054590570719603
User 71506 AUC after training: 0.6050454921422663
User 71506 does not improve AUC. Reverting changes.
Training on augumented user 58944 9/50 current_auc = 0.6054590570719603
User 58944 AUC after training: 0.6042183622828785
User 58944 does not improve AUC. Reverting changes.
Training on augumented user 43873 10/50 current_auc = 0.6054590570719603
User 43873 AUC after training: 0.6050454921422663
User 43873 does not improve AUC. Reverting changes.
Training on augumented user 50105 11/50 current_auc = 0.6054590570719603
User 50105 AUC after training: 0.6038047973531845
User 50105 does not improve AUC. Reverting changes.
Training on augumented user 40634 12/50 current_auc = 0.6054590570719603
User 40634 AUC after training: 0.6050454921422663
User 40634 does not improve AUC. Reverting changes.
Training on augumented user 1009 13/50 current_auc = 0.6054590570719603
User 1009 AUC after training: 0.6054590570719603
User 1009 does not improve AUC. Reverting changes.
Training on augumented user 49227 14/50 current_auc = 0.6054590570719603
User 49227 AUC after training: 0.6025641025641025
User 49227 does not improve AUC. Reverting changes.
Training on augumented user 47759 15/50 current_auc = 0.6054590570719603
User 47759 AUC after training: 0.6046319272125724
User 47759 does not improve AUC. Reverting changes.
Training on augumented user 60029 16/50 current_auc = 0.6054590570719603
User 60029 AUC after training: 0.6054590570719603
User 60029 does not improve AUC. Reverting changes.
Training on augumented user 90991 17/50 current_auc = 0.6054590570719603
User 90991 AUC after training: 0.6058726220016543
User 90991 improves AUC. Keeping the model.
Training on augumented user 40560 18/50 current_auc = 0.6058726220016543
User 40560 AUC after training: 0.6054590570719602
User 40560 does not improve AUC. Reverting changes.
Training on augumented user 71747 19/50 current_auc = 0.6058726220016543
User 71747 AUC after training: 0.6058726220016543
User 71747 does not improve AUC. Reverting changes.
Training on augumented user 91512 20/50 current_auc = 0.6058726220016543
User 91512 AUC after training: 0.6062861869313482
User 91512 improves AUC. Keeping the model.
Training on augumented user 130984 21/50 current_auc = 0.6062861869313482
User 130984 AUC after training: 0.6066997518610422
User 130984 improves AUC. Keeping the model.
Training on augumented user 100204 22/50 current_auc = 0.6066997518610422
User 100204 AUC after training: 0.6062861869313483
User 100204 does not improve AUC. Reverting changes.
Training on augumented user 121296 23/50 current_auc = 0.6066997518610422
User 121296 AUC after training: 0.6062861869313483
User 121296 does not improve AUC. Reverting changes.
Training on augumented user 55907 24/50 current_auc = 0.6066997518610422
User 55907 AUC after training: 0.6071133167907362
User 55907 improves AUC. Keeping the model.
Training on augumented user 102030 25/50 current_auc = 0.6071133167907362
User 102030 AUC after training: 0.6075268817204302
User 102030 improves AUC. Keeping the model.
Training on augumented user 108025 26/50 current_auc = 0.6075268817204302
User 108025 AUC after training: 0.608767576509512
User 108025 improves AUC. Keeping the model.
Training on augumented user 45717 27/50 current_auc = 0.608767576509512
User 45717 AUC after training: 0.6071133167907361
User 45717 does not improve AUC. Reverting changes.
Training on augumented user 34236 28/50 current_auc = 0.608767576509512
User 34236 AUC after training: 0.607940446650124
User 34236 does not improve AUC. Reverting changes.
Training on augumented user 92816 29/50 current_auc = 0.608767576509512
User 92816 AUC after training: 0.608354011579818
User 92816 does not improve AUC. Reverting changes.
Training on augumented user 127847 30/50 current_auc = 0.608767576509512
User 127847 AUC after training: 0.6071133167907361
User 127847 does not improve AUC. Reverting changes.
Training on augumented user 124165 31/50 current_auc = 0.608767576509512
User 124165 AUC after training: 0.607940446650124
User 124165 does not improve AUC. Reverting changes.
Training on augumented user 38715 32/50 current_auc = 0.608767576509512
User 38715 AUC after training: 0.607940446650124
User 38715 does not improve AUC. Reverting changes.
Training on augumented user 78466 33/50 current_auc = 0.608767576509512
User 78466 AUC after training: 0.607940446650124
User 78466 does not improve AUC. Reverting changes.
Training on augumented user 31279 34/50 current_auc = 0.608767576509512
User 31279 AUC after training: 0.607940446650124
User 31279 does not improve AUC. Reverting changes.
Training on augumented user 28974 35/50 current_auc = 0.608767576509512
User 28974 AUC after training: 0.608767576509512
User 28974 does not improve AUC. Reverting changes.
Training on augumented user 126656 36/50 current_auc = 0.608767576509512
User 126656 AUC after training: 0.608354011579818
User 126656 does not improve AUC. Reverting changes.
Training on augumented user 70014 37/50 current_auc = 0.608767576509512
User 70014 AUC after training: 0.607940446650124
User 70014 does not improve AUC. Reverting changes.
Training on augumented user 54873 38/50 current_auc = 0.608767576509512
User 54873 AUC after training: 0.607940446650124
User 54873 does not improve AUC. Reverting changes.
Training on augumented user 24633 39/50 current_auc = 0.608767576509512
User 24633 AUC after training: 0.607940446650124
User 24633 does not improve AUC. Reverting changes.
Training on augumented user 72064 40/50 current_auc = 0.608767576509512
User 72064 AUC after training: 0.608767576509512
User 72064 does not improve AUC. Reverting changes.
Training on augumented user 3037 41/50 current_auc = 0.608767576509512
User 3037 AUC after training: 0.607940446650124
User 3037 does not improve AUC. Reverting changes.
Training on augumented user 100860 42/50 current_auc = 0.608767576509512
User 100860 AUC after training: 0.607940446650124
User 100860 does not improve AUC. Reverting changes.
Training on augumented user 119987 43/50 current_auc = 0.608767576509512
User 119987 AUC after training: 0.6071133167907362
User 119987 does not improve AUC. Reverting changes.
Training on augumented user 23561 44/50 current_auc = 0.608767576509512
User 23561 AUC after training: 0.6075268817204301
User 23561 does not improve AUC. Reverting changes.
Training on augumented user 27571 45/50 current_auc = 0.608767576509512
User 27571 AUC after training: 0.6066997518610422
User 27571 does not improve AUC. Reverting changes.
Training on augumented user 71539 46/50 current_auc = 0.608767576509512
User 71539 AUC after training: 0.608354011579818
User 71539 does not improve AUC. Reverting changes.
Training on augumented user 127468 47/50 current_auc = 0.608767576509512
User 127468 AUC after training: 0.608767576509512
User 127468 does not improve AUC. Reverting changes.
Training on augumented user 73270 48/50 current_auc = 0.608767576509512
User 73270 AUC after training: 0.60752688172043
User 73270 does not improve AUC. Reverting changes.
Training on augumented user 106994 49/50 current_auc = 0.608767576509512
User 106994 AUC after training: 0.6071133167907362
User 106994 does not improve AUC. Reverting changes.
[2024-12-02 19:21:33.110837] start test user 100282 184/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:21:33.802659] start test user 100282 184/567 recall augumented users by random, augumented_users = [123160, 32205, 67999, 66043, 75725, 120395, 46938, 91822, 84690, 106462, 114238, 69760, 70322, 110369, 72666, 35687, 47551, 105131, 17947, 43810, 75636, 3559, 65219, 112048, 73628, 23135, 44805, 4434, 99887, 102434, 133831, 124629, 35001, 9513, 57744, 34351, 35156, 108919, 57617, 80117, 134539, 66787, 4090, 22675, 87974, 122959, 99371, 31161, 25762, 93952]
[2024-12-02 19:21:33.823837] user = 100282 Cloud 184/567
[2024-12-02 19:21:33.845599] user = 100282 Local 184/567
[2024-12-02 19:21:33.900617] user = 100282 Local+ 184/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:21:36.434430] user = 100282 MPDA- 184/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5488297013720742
Training on augumented user 123160 0/50 current_auc = 0.5488297013720742
User 123160 AUC after training: 0.549636803874092
User 123160 improves AUC. Keeping the model.
Training on augumented user 32205 1/50 current_auc = 0.549636803874092
User 32205 AUC after training: 0.5488297013720742
User 32205 does not improve AUC. Reverting changes.
Training on augumented user 67999 2/50 current_auc = 0.549636803874092
User 67999 AUC after training: 0.5480225988700566
User 67999 does not improve AUC. Reverting changes.
Training on augumented user 66043 3/50 current_auc = 0.549636803874092
User 66043 AUC after training: 0.5496368038740921
User 66043 improves AUC. Keeping the model.
Training on augumented user 75725 4/50 current_auc = 0.5496368038740921
User 75725 AUC after training: 0.5496368038740921
User 75725 does not improve AUC. Reverting changes.
Training on augumented user 120395 5/50 current_auc = 0.5496368038740921
User 120395 AUC after training: 0.5488297013720742
User 120395 does not improve AUC. Reverting changes.
Training on augumented user 46938 6/50 current_auc = 0.5496368038740921
User 46938 AUC after training: 0.5496368038740921
User 46938 does not improve AUC. Reverting changes.
Training on augumented user 91822 7/50 current_auc = 0.5496368038740921
User 91822 AUC after training: 0.5496368038740921
User 91822 does not improve AUC. Reverting changes.
Training on augumented user 84690 8/50 current_auc = 0.5496368038740921
User 84690 AUC after training: 0.5496368038740921
User 84690 does not improve AUC. Reverting changes.
Training on augumented user 106462 9/50 current_auc = 0.5496368038740921
User 106462 AUC after training: 0.5488297013720742
User 106462 does not improve AUC. Reverting changes.
Training on augumented user 114238 10/50 current_auc = 0.5496368038740921
User 114238 AUC after training: 0.5488297013720742
User 114238 does not improve AUC. Reverting changes.
Training on augumented user 69760 11/50 current_auc = 0.5496368038740921
User 69760 AUC after training: 0.5496368038740921
User 69760 does not improve AUC. Reverting changes.
Training on augumented user 70322 12/50 current_auc = 0.5496368038740921
User 70322 AUC after training: 0.5496368038740921
User 70322 does not improve AUC. Reverting changes.
Training on augumented user 110369 13/50 current_auc = 0.5496368038740921
User 110369 AUC after training: 0.5496368038740921
User 110369 does not improve AUC. Reverting changes.
Training on augumented user 72666 14/50 current_auc = 0.5496368038740921
User 72666 AUC after training: 0.5496368038740921
User 72666 does not improve AUC. Reverting changes.
Training on augumented user 35687 15/50 current_auc = 0.5496368038740921
User 35687 AUC after training: 0.549636803874092
User 35687 does not improve AUC. Reverting changes.
Training on augumented user 47551 16/50 current_auc = 0.5496368038740921
User 47551 AUC after training: 0.5496368038740921
User 47551 does not improve AUC. Reverting changes.
Training on augumented user 105131 17/50 current_auc = 0.5496368038740921
User 105131 AUC after training: 0.5488297013720742
User 105131 does not improve AUC. Reverting changes.
Training on augumented user 17947 18/50 current_auc = 0.5496368038740921
User 17947 AUC after training: 0.5496368038740921
User 17947 does not improve AUC. Reverting changes.
Training on augumented user 43810 19/50 current_auc = 0.5496368038740921
User 43810 AUC after training: 0.5496368038740921
User 43810 does not improve AUC. Reverting changes.
Training on augumented user 75636 20/50 current_auc = 0.5496368038740921
User 75636 AUC after training: 0.5496368038740921
User 75636 does not improve AUC. Reverting changes.
Training on augumented user 3559 21/50 current_auc = 0.5496368038740921
User 3559 AUC after training: 0.5488297013720742
User 3559 does not improve AUC. Reverting changes.
Training on augumented user 65219 22/50 current_auc = 0.5496368038740921
User 65219 AUC after training: 0.5512510088781275
User 65219 improves AUC. Keeping the model.
Training on augumented user 112048 23/50 current_auc = 0.5512510088781275
User 112048 AUC after training: 0.5488297013720742
User 112048 does not improve AUC. Reverting changes.
Training on augumented user 73628 24/50 current_auc = 0.5512510088781275
User 73628 AUC after training: 0.549636803874092
User 73628 does not improve AUC. Reverting changes.
Training on augumented user 23135 25/50 current_auc = 0.5512510088781275
User 23135 AUC after training: 0.5512510088781275
User 23135 does not improve AUC. Reverting changes.
Training on augumented user 44805 26/50 current_auc = 0.5512510088781275
User 44805 AUC after training: 0.5520581113801453
User 44805 improves AUC. Keeping the model.
Training on augumented user 4434 27/50 current_auc = 0.5520581113801453
User 4434 AUC after training: 0.552865213882163
User 4434 improves AUC. Keeping the model.
Training on augumented user 99887 28/50 current_auc = 0.552865213882163
User 99887 AUC after training: 0.552865213882163
User 99887 does not improve AUC. Reverting changes.
Training on augumented user 102434 29/50 current_auc = 0.552865213882163
User 102434 AUC after training: 0.5512510088781275
User 102434 does not improve AUC. Reverting changes.
Training on augumented user 133831 30/50 current_auc = 0.552865213882163
User 133831 AUC after training: 0.5512510088781275
User 133831 does not improve AUC. Reverting changes.
Training on augumented user 124629 31/50 current_auc = 0.552865213882163
User 124629 AUC after training: 0.5544794188861986
User 124629 improves AUC. Keeping the model.
Training on augumented user 35001 32/50 current_auc = 0.5544794188861986
User 35001 AUC after training: 0.5536723163841808
User 35001 does not improve AUC. Reverting changes.
Training on augumented user 9513 33/50 current_auc = 0.5544794188861986
User 9513 AUC after training: 0.5544794188861986
User 9513 does not improve AUC. Reverting changes.
Training on augumented user 57744 34/50 current_auc = 0.5544794188861986
User 57744 AUC after training: 0.5560936238902341
User 57744 improves AUC. Keeping the model.
Training on augumented user 34351 35/50 current_auc = 0.5560936238902341
User 34351 AUC after training: 0.5560936238902341
User 34351 does not improve AUC. Reverting changes.
Training on augumented user 35156 36/50 current_auc = 0.5560936238902341
User 35156 AUC after training: 0.5560936238902341
User 35156 does not improve AUC. Reverting changes.
Training on augumented user 108919 37/50 current_auc = 0.5560936238902341
User 108919 AUC after training: 0.5552865213882163
User 108919 does not improve AUC. Reverting changes.
Training on augumented user 57617 38/50 current_auc = 0.5560936238902341
User 57617 AUC after training: 0.5544794188861986
User 57617 does not improve AUC. Reverting changes.
Training on augumented user 80117 39/50 current_auc = 0.5560936238902341
User 80117 AUC after training: 0.5512510088781275
User 80117 does not improve AUC. Reverting changes.
Training on augumented user 134539 40/50 current_auc = 0.5560936238902341
User 134539 AUC after training: 0.5544794188861986
User 134539 does not improve AUC. Reverting changes.
Training on augumented user 66787 41/50 current_auc = 0.5560936238902341
User 66787 AUC after training: 0.5560936238902341
User 66787 does not improve AUC. Reverting changes.
Training on augumented user 4090 42/50 current_auc = 0.5560936238902341
User 4090 AUC after training: 0.552865213882163
User 4090 does not improve AUC. Reverting changes.
Training on augumented user 22675 43/50 current_auc = 0.5560936238902341
User 22675 AUC after training: 0.5560936238902341
User 22675 does not improve AUC. Reverting changes.
Training on augumented user 87974 44/50 current_auc = 0.5560936238902341
User 87974 AUC after training: 0.5552865213882163
User 87974 does not improve AUC. Reverting changes.
Training on augumented user 122959 45/50 current_auc = 0.5560936238902341
User 122959 AUC after training: 0.5560936238902341
User 122959 does not improve AUC. Reverting changes.
Training on augumented user 99371 46/50 current_auc = 0.5560936238902341
User 99371 AUC after training: 0.552865213882163
User 99371 does not improve AUC. Reverting changes.
Training on augumented user 31161 47/50 current_auc = 0.5560936238902341
User 31161 AUC after training: 0.5536723163841808
User 31161 does not improve AUC. Reverting changes.
Training on augumented user 25762 48/50 current_auc = 0.5560936238902341
User 25762 AUC after training: 0.5544794188861986
User 25762 does not improve AUC. Reverting changes.
Training on augumented user 93952 49/50 current_auc = 0.5560936238902341
User 93952 AUC after training: 0.5544794188861986
User 93952 does not improve AUC. Reverting changes.
[2024-12-02 19:22:05.628810] start test user 100366 185/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:22:06.253997] start test user 100366 185/567 recall augumented users by random, augumented_users = [3039, 111422, 105495, 56376, 97734, 133302, 44487, 98233, 40213, 100450, 111062, 82077, 76718, 49162, 97908, 107966, 2407, 58768, 75993, 46062, 69151, 55389, 54984, 16602, 45589, 81252, 128701, 124239, 44118, 83877, 106607, 49371, 48267, 87367, 26352, 52239, 126003, 29629, 7818, 42781, 80021, 36956, 127457, 40164, 79881, 102348, 35584, 110048, 111762, 94954]
[2024-12-02 19:22:06.272548] user = 100366 Cloud 185/567
[2024-12-02 19:22:06.379253] user = 100366 Local 185/567
[2024-12-02 19:22:06.843297] user = 100366 Local+ 185/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:22:10.238370] user = 100366 MPDA- 185/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6380412162789555
Training on augumented user 3039 0/50 current_auc = 0.6380412162789555
User 3039 AUC after training: 0.6378172741324972
User 3039 does not improve AUC. Reverting changes.
Training on augumented user 111422 1/50 current_auc = 0.6380412162789555
User 111422 AUC after training: 0.6379647482289454
User 111422 does not improve AUC. Reverting changes.
Training on augumented user 105495 2/50 current_auc = 0.6380412162789555
User 105495 AUC after training: 0.6376725310378353
User 105495 does not improve AUC. Reverting changes.
Training on augumented user 56376 3/50 current_auc = 0.6380412162789555
User 56376 AUC after training: 0.6380275612700251
User 56376 does not improve AUC. Reverting changes.
Training on augumented user 97734 4/50 current_auc = 0.6380412162789555
User 97734 AUC after training: 0.6378063501253529
User 97734 does not improve AUC. Reverting changes.
Training on augumented user 133302 5/50 current_auc = 0.6380412162789555
User 133302 AUC after training: 0.6380576022896719
User 133302 improves AUC. Keeping the model.
Training on augumented user 44487 6/50 current_auc = 0.6380576022896719
User 44487 AUC after training: 0.6382323864039807
User 44487 improves AUC. Keeping the model.
Training on augumented user 98233 7/50 current_auc = 0.6382323864039807
User 98233 AUC after training: 0.6385368931031281
User 98233 improves AUC. Keeping the model.
Training on augumented user 40213 8/50 current_auc = 0.6385368931031281
User 40213 AUC after training: 0.6383962465111452
User 40213 does not improve AUC. Reverting changes.
Training on augumented user 100450 9/50 current_auc = 0.6385368931031281
User 100450 AUC after training: 0.6383607434879263
User 100450 does not improve AUC. Reverting changes.
Training on augumented user 111062 10/50 current_auc = 0.6385368931031281
User 111062 AUC after training: 0.6383921500084662
User 111062 does not improve AUC. Reverting changes.
Training on augumented user 82077 11/50 current_auc = 0.6385368931031281
User 82077 AUC after training: 0.6385491826111654
User 82077 improves AUC. Keeping the model.
Training on augumented user 76718 12/50 current_auc = 0.6385491826111654
User 76718 AUC after training: 0.6383689364932844
User 76718 does not improve AUC. Reverting changes.
Training on augumented user 49162 13/50 current_auc = 0.6385491826111654
User 49162 AUC after training: 0.638423556529006
User 49162 does not improve AUC. Reverting changes.
Training on augumented user 97908 14/50 current_auc = 0.6385491826111654
User 97908 AUC after training: 0.6383716674950706
User 97908 does not improve AUC. Reverting changes.
Training on augumented user 107966 15/50 current_auc = 0.6385491826111654
User 107966 AUC after training: 0.6383689364932845
User 107966 does not improve AUC. Reverting changes.
Training on augumented user 2407 16/50 current_auc = 0.6385491826111654
User 2407 AUC after training: 0.6385382586040211
User 2407 does not improve AUC. Reverting changes.
Training on augumented user 58768 17/50 current_auc = 0.6385491826111654
User 58768 AUC after training: 0.6385792236308122
User 58768 improves AUC. Keeping the model.
Training on augumented user 75993 18/50 current_auc = 0.6385792236308122
User 75993 AUC after training: 0.6378309291414277
User 75993 does not improve AUC. Reverting changes.
Training on augumented user 46062 19/50 current_auc = 0.6385792236308122
User 46062 AUC after training: 0.6384945625754439
User 46062 does not improve AUC. Reverting changes.
Training on augumented user 69151 20/50 current_auc = 0.6385792236308122
User 69151 AUC after training: 0.6381996143825478
User 69151 does not improve AUC. Reverting changes.
Training on augumented user 55389 21/50 current_auc = 0.6385792236308122
User 55389 AUC after training: 0.6386638846861805
User 55389 improves AUC. Keeping the model.
Training on augumented user 54984 22/50 current_auc = 0.6386638846861805
User 54984 AUC after training: 0.638606533648673
User 54984 does not improve AUC. Reverting changes.
Training on augumented user 16602 23/50 current_auc = 0.6386638846861805
User 16602 AUC after training: 0.6386611536843945
User 16602 does not improve AUC. Reverting changes.
Training on augumented user 45589 24/50 current_auc = 0.6386638846861805
User 45589 AUC after training: 0.6394340271898538
User 45589 improves AUC. Keeping the model.
Training on augumented user 81252 25/50 current_auc = 0.6394340271898538
User 81252 AUC after training: 0.6393821381559184
User 81252 does not improve AUC. Reverting changes.
Training on augumented user 128701 26/50 current_auc = 0.6394340271898538
User 128701 AUC after training: 0.6385792236308123
User 128701 does not improve AUC. Reverting changes.
Training on augumented user 124239 27/50 current_auc = 0.6394340271898538
User 124239 AUC after training: 0.6399256075113472
User 124239 improves AUC. Keeping the model.
Training on augumented user 44118 28/50 current_auc = 0.6399256075113472
User 44118 AUC after training: 0.6396306593184512
User 44118 does not improve AUC. Reverting changes.
Training on augumented user 83877 29/50 current_auc = 0.6399256075113472
User 83877 AUC after training: 0.639843677457765
User 83877 does not improve AUC. Reverting changes.
Training on augumented user 106607 30/50 current_auc = 0.6399256075113472
User 106607 AUC after training: 0.6397344373863221
User 106607 does not improve AUC. Reverting changes.
Training on augumented user 49371 31/50 current_auc = 0.6399256075113472
User 49371 AUC after training: 0.6399419935220637
User 49371 improves AUC. Keeping the model.
Training on augumented user 48267 32/50 current_auc = 0.6399419935220637
User 48267 AUC after training: 0.6395268812505803
User 48267 does not improve AUC. Reverting changes.
Training on augumented user 87367 33/50 current_auc = 0.6399419935220637
User 87367 AUC after training: 0.6395104952398639
User 87367 does not improve AUC. Reverting changes.
Training on augumented user 26352 34/50 current_auc = 0.6399419935220637
User 26352 AUC after training: 0.639521419247008
User 26352 does not improve AUC. Reverting changes.
Training on augumented user 52239 35/50 current_auc = 0.6399419935220637
User 52239 AUC after training: 0.6397972504274018
User 52239 does not improve AUC. Reverting changes.
Training on augumented user 126003 36/50 current_auc = 0.6399419935220637
User 126003 AUC after training: 0.6395787702845157
User 126003 does not improve AUC. Reverting changes.
Training on augumented user 29629 37/50 current_auc = 0.6399419935220637
User 29629 AUC after training: 0.6398737184774118
User 29629 does not improve AUC. Reverting changes.
Training on augumented user 7818 38/50 current_auc = 0.6399419935220637
User 7818 AUC after training: 0.6397453613934664
User 7818 does not improve AUC. Reverting changes.
Training on augumented user 42781 39/50 current_auc = 0.6399419935220637
User 42781 AUC after training: 0.6397986159282948
User 42781 does not improve AUC. Reverting changes.
Training on augumented user 80021 40/50 current_auc = 0.6399419935220637
User 80021 AUC after training: 0.6402628862319275
User 80021 improves AUC. Keeping the model.
Training on augumented user 36956 41/50 current_auc = 0.6402628862319275
User 36956 AUC after training: 0.6400785436113675
User 36956 does not improve AUC. Reverting changes.
Training on augumented user 127457 42/50 current_auc = 0.6402628862319275
User 127457 AUC after training: 0.6400758126095814
User 127457 does not improve AUC. Reverting changes.
Training on augumented user 40164 43/50 current_auc = 0.6402628862319275
User 40164 AUC after training: 0.6403106787631838
User 40164 improves AUC. Keeping the model.
Training on augumented user 79881 44/50 current_auc = 0.6403106787631838
User 79881 AUC after training: 0.6397644784059688
User 79881 does not improve AUC. Reverting changes.
Training on augumented user 102348 45/50 current_auc = 0.6403106787631838
User 102348 AUC after training: 0.6402123626988852
User 102348 does not improve AUC. Reverting changes.
Training on augumented user 35584 46/50 current_auc = 0.6403106787631838
User 35584 AUC after training: 0.6394695302130728
User 35584 does not improve AUC. Reverting changes.
Training on augumented user 110048 47/50 current_auc = 0.6403106787631838
User 110048 AUC after training: 0.6402997547560395
User 110048 does not improve AUC. Reverting changes.
Training on augumented user 111762 48/50 current_auc = 0.6403106787631838
User 111762 AUC after training: 0.6400662541033302
User 111762 does not improve AUC. Reverting changes.
Training on augumented user 94954 49/50 current_auc = 0.6403106787631838
User 94954 AUC after training: 0.6401563771622707
User 94954 does not improve AUC. Reverting changes.
[2024-12-02 19:22:47.262980] start test user 100371 186/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:22:47.884330] start test user 100371 186/567 recall augumented users by random, augumented_users = [23670, 85143, 37185, 19706, 24063, 76748, 136549, 128710, 16469, 114554, 24076, 67251, 13340, 88020, 4244, 64778, 91044, 20576, 114574, 65357, 101345, 54491, 10001, 31824, 63336, 122554, 96907, 930, 55334, 97682, 125224, 26410, 1157, 76400, 32249, 68111, 65555, 113897, 31206, 86367, 2176, 83474, 104225, 111778, 56285, 64208, 84447, 131446, 42936, 126571]
[2024-12-02 19:22:47.903814] user = 100371 Cloud 186/567
[2024-12-02 19:22:47.946064] user = 100371 Local 186/567
[2024-12-02 19:22:48.136943] user = 100371 Local+ 186/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:22:51.443273] user = 100371 MPDA- 186/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5705993170846579
Training on augumented user 23670 0/50 current_auc = 0.5705993170846579
User 23670 AUC after training: 0.5702460850111857
User 23670 does not improve AUC. Reverting changes.
Training on augumented user 85143 1/50 current_auc = 0.5705993170846579
User 85143 AUC after training: 0.5704344754503708
User 85143 does not improve AUC. Reverting changes.
Training on augumented user 37185 2/50 current_auc = 0.5705993170846579
User 37185 AUC after training: 0.5709054515483339
User 37185 improves AUC. Keeping the model.
Training on augumented user 19706 3/50 current_auc = 0.5709054515483339
User 19706 AUC after training: 0.5714588484634404
User 19706 improves AUC. Keeping the model.
Training on augumented user 24063 4/50 current_auc = 0.5714588484634404
User 24063 AUC after training: 0.5714235252560933
User 24063 does not improve AUC. Reverting changes.
Training on augumented user 76748 5/50 current_auc = 0.5714588484634404
User 76748 AUC after training: 0.5704344754503708
User 76748 does not improve AUC. Reverting changes.
Training on augumented user 136549 6/50 current_auc = 0.5714588484634404
User 136549 AUC after training: 0.5711056163899683
User 136549 does not improve AUC. Reverting changes.
Training on augumented user 128710 7/50 current_auc = 0.5714588484634404
User 128710 AUC after training: 0.5709878723654774
User 128710 does not improve AUC. Reverting changes.
Training on augumented user 16469 8/50 current_auc = 0.5714588484634404
User 16469 AUC after training: 0.5715059460732368
User 16469 improves AUC. Keeping the model.
Training on augumented user 114554 9/50 current_auc = 0.5715059460732368
User 114554 AUC after training: 0.5717885317320146
User 114554 improves AUC. Keeping the model.
Training on augumented user 24076 10/50 current_auc = 0.5717885317320146
User 24076 AUC after training: 0.5723772518544684
User 24076 improves AUC. Keeping the model.
Training on augumented user 67251 11/50 current_auc = 0.5723772518544684
User 67251 AUC after training: 0.5714823972683387
User 67251 does not improve AUC. Reverting changes.
Training on augumented user 13340 12/50 current_auc = 0.5723772518544684
User 13340 AUC after training: 0.5720240197809962
User 13340 does not improve AUC. Reverting changes.
Training on augumented user 88020 13/50 current_auc = 0.5723772518544684
User 88020 AUC after training: 0.5723772518544684
User 88020 does not improve AUC. Reverting changes.
Training on augumented user 4244 14/50 current_auc = 0.5723772518544684
User 4244 AUC after training: 0.5713293300365007
User 4244 does not improve AUC. Reverting changes.
Training on augumented user 64778 15/50 current_auc = 0.5723772518544684
User 64778 AUC after training: 0.5724361238667138
User 64778 improves AUC. Keeping the model.
Training on augumented user 91044 16/50 current_auc = 0.5724361238667138
User 91044 AUC after training: 0.5726951607205935
User 91044 improves AUC. Keeping the model.
Training on augumented user 20576 17/50 current_auc = 0.5726951607205935
User 20576 AUC after training: 0.5728364535499824
User 20576 improves AUC. Keeping the model.
Training on augumented user 114574 18/50 current_auc = 0.5728364535499824
User 114574 AUC after training: 0.5731425880136582
User 114574 improves AUC. Keeping the model.
Training on augumented user 65357 19/50 current_auc = 0.5731425880136582
User 65357 AUC after training: 0.5730248439891675
User 65357 does not improve AUC. Reverting changes.
Training on augumented user 101345 20/50 current_auc = 0.5731425880136582
User 101345 AUC after training: 0.5724949958789591
User 101345 does not improve AUC. Reverting changes.
Training on augumented user 54491 21/50 current_auc = 0.5731425880136582
User 54491 AUC after training: 0.5736959849287648
User 54491 improves AUC. Keeping the model.
Training on augumented user 10001 22/50 current_auc = 0.5736959849287648
User 10001 AUC after training: 0.570917225950783
User 10001 does not improve AUC. Reverting changes.
Training on augumented user 31824 23/50 current_auc = 0.5736959849287648
User 31824 AUC after training: 0.5738372777581537
User 31824 improves AUC. Keeping the model.
Training on augumented user 63336 24/50 current_auc = 0.5738372777581537
User 63336 AUC after training: 0.5732132344283528
User 63336 does not improve AUC. Reverting changes.
Training on augumented user 122554 25/50 current_auc = 0.5738372777581537
User 122554 AUC after training: 0.5733427528552927
User 122554 does not improve AUC. Reverting changes.
Training on augumented user 96907 26/50 current_auc = 0.5738372777581537
User 96907 AUC after training: 0.5731896856234546
User 96907 does not improve AUC. Reverting changes.
Training on augumented user 930 27/50 current_auc = 0.5738372777581537
User 930 AUC after training: 0.5723772518544683
User 930 does not improve AUC. Reverting changes.
Training on augumented user 55334 28/50 current_auc = 0.5738372777581537
User 55334 AUC after training: 0.574025668197339
User 55334 improves AUC. Keeping the model.
Training on augumented user 97682 29/50 current_auc = 0.574025668197339
User 97682 AUC after training: 0.5736488873189686
User 97682 does not improve AUC. Reverting changes.
Training on augumented user 125224 30/50 current_auc = 0.574025668197339
User 125224 AUC after training: 0.5726951607205933
User 125224 does not improve AUC. Reverting changes.
Training on augumented user 26410 31/50 current_auc = 0.574025668197339
User 26410 AUC after training: 0.5740492170022371
User 26410 improves AUC. Keeping the model.
Training on augumented user 1157 32/50 current_auc = 0.5740492170022371
User 1157 AUC after training: 0.5741551866242788
User 1157 improves AUC. Keeping the model.
Training on augumented user 76400 33/50 current_auc = 0.5741551866242788
User 76400 AUC after training: 0.574178735429177
User 76400 improves AUC. Keeping the model.
Training on augumented user 32249 34/50 current_auc = 0.574178735429177
User 32249 AUC after training: 0.5736842105263158
User 32249 does not improve AUC. Reverting changes.
Training on augumented user 68111 35/50 current_auc = 0.574178735429177
User 68111 AUC after training: 0.573860826563052
User 68111 does not improve AUC. Reverting changes.
Training on augumented user 65555 36/50 current_auc = 0.574178735429177
User 65555 AUC after training: 0.573401624867538
User 65555 does not improve AUC. Reverting changes.
Training on augumented user 113897 37/50 current_auc = 0.574178735429177
User 113897 AUC after training: 0.5746732603320381
User 113897 improves AUC. Keeping the model.
Training on augumented user 31206 38/50 current_auc = 0.5746732603320381
User 31206 AUC after training: 0.5746497115271401
User 31206 does not improve AUC. Reverting changes.
Training on augumented user 86367 39/50 current_auc = 0.5746732603320381
User 86367 AUC after training: 0.5739550217826446
User 86367 does not improve AUC. Reverting changes.
Training on augumented user 2176 40/50 current_auc = 0.5746732603320381
User 2176 AUC after training: 0.574955845990816
User 2176 improves AUC. Keeping the model.
Training on augumented user 83474 41/50 current_auc = 0.574955845990816
User 83474 AUC after training: 0.574814553161427
User 83474 does not improve AUC. Reverting changes.
Training on augumented user 104225 42/50 current_auc = 0.574955845990816
User 104225 AUC after training: 0.5745908395148946
User 104225 does not improve AUC. Reverting changes.
Training on augumented user 111778 43/50 current_auc = 0.574955845990816
User 111778 AUC after training: 0.5747910043565289
User 111778 does not improve AUC. Reverting changes.
Training on augumented user 56285 44/50 current_auc = 0.574955845990816
User 56285 AUC after training: 0.574814553161427
User 56285 does not improve AUC. Reverting changes.
Training on augumented user 64208 45/50 current_auc = 0.574955845990816
User 64208 AUC after training: 0.574955845990816
User 64208 does not improve AUC. Reverting changes.
Training on augumented user 84447 46/50 current_auc = 0.574955845990816
User 84447 AUC after training: 0.5747674555516308
User 84447 does not improve AUC. Reverting changes.
Training on augumented user 131446 47/50 current_auc = 0.574955845990816
User 131446 AUC after training: 0.575120687625103
User 131446 improves AUC. Keeping the model.
Training on augumented user 42936 48/50 current_auc = 0.575120687625103
User 42936 AUC after training: 0.5741080890144825
User 42936 does not improve AUC. Reverting changes.
Training on augumented user 126571 49/50 current_auc = 0.575120687625103
User 126571 AUC after training: 0.5755916637230661
User 126571 improves AUC. Keeping the model.
[2024-12-02 19:23:27.993080] start test user 100418 187/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:23:28.788836] start test user 100418 187/567 recall augumented users by random, augumented_users = [120164, 53258, 82779, 96130, 99014, 19044, 754, 45336, 131857, 51767, 69828, 86075, 125212, 113267, 30922, 57717, 44987, 135982, 73890, 43280, 82382, 84305, 28699, 36894, 117434, 81025, 60343, 71297, 1840, 83569, 36612, 91904, 88450, 57894, 3307, 77436, 137782, 52454, 52288, 107883, 135684, 106572, 47857, 100972, 48935, 63448, 128464, 39934, 8021, 32207]
[2024-12-02 19:23:28.805683] user = 100418 Cloud 187/567
[2024-12-02 19:23:28.826050] user = 100418 Local 187/567
[2024-12-02 19:23:29.053057] user = 100418 Local+ 187/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:23:31.703398] user = 100418 MPDA- 187/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.577175697865353
Training on augumented user 120164 0/50 current_auc = 0.577175697865353
User 120164 AUC after training: 0.577175697865353
User 120164 does not improve AUC. Reverting changes.
Training on augumented user 53258 1/50 current_auc = 0.577175697865353
User 53258 AUC after training: 0.5815544608648058
User 53258 improves AUC. Keeping the model.
Training on augumented user 82779 2/50 current_auc = 0.5815544608648058
User 82779 AUC after training: 0.5816912972085386
User 82779 improves AUC. Keeping the model.
Training on augumented user 96130 3/50 current_auc = 0.5816912972085386
User 96130 AUC after training: 0.5790914066776136
User 96130 does not improve AUC. Reverting changes.
Training on augumented user 99014 4/50 current_auc = 0.5816912972085386
User 99014 AUC after training: 0.5819649698960043
User 99014 improves AUC. Keeping the model.
Training on augumented user 19044 5/50 current_auc = 0.5819649698960043
User 19044 AUC after training: 0.5819649698960043
User 19044 does not improve AUC. Reverting changes.
Training on augumented user 754 6/50 current_auc = 0.5819649698960043
User 754 AUC after training: 0.5790914066776136
User 754 does not improve AUC. Reverting changes.
Training on augumented user 45336 7/50 current_auc = 0.5819649698960043
User 45336 AUC after training: 0.5804597701149425
User 45336 does not improve AUC. Reverting changes.
Training on augumented user 131857 8/50 current_auc = 0.5819649698960043
User 131857 AUC after training: 0.5803229337712096
User 131857 does not improve AUC. Reverting changes.
Training on augumented user 51767 9/50 current_auc = 0.5819649698960043
User 51767 AUC after training: 0.5819649698960043
User 51767 does not improve AUC. Reverting changes.
Training on augumented user 69828 10/50 current_auc = 0.5819649698960043
User 69828 AUC after training: 0.5814176245210728
User 69828 does not improve AUC. Reverting changes.
Training on augumented user 86075 11/50 current_auc = 0.5819649698960043
User 86075 AUC after training: 0.5808702791461412
User 86075 does not improve AUC. Reverting changes.
Training on augumented user 125212 12/50 current_auc = 0.5819649698960043
User 125212 AUC after training: 0.5816912972085386
User 125212 does not improve AUC. Reverting changes.
Training on augumented user 113267 13/50 current_auc = 0.5819649698960043
User 113267 AUC after training: 0.578544061302682
User 113267 does not improve AUC. Reverting changes.
Training on augumented user 30922 14/50 current_auc = 0.5819649698960043
User 30922 AUC after training: 0.5815544608648057
User 30922 does not improve AUC. Reverting changes.
Training on augumented user 57717 15/50 current_auc = 0.5819649698960043
User 57717 AUC after training: 0.5819649698960043
User 57717 does not improve AUC. Reverting changes.
Training on augumented user 44987 16/50 current_auc = 0.5819649698960043
User 44987 AUC after training: 0.5819649698960043
User 44987 does not improve AUC. Reverting changes.
Training on augumented user 135982 17/50 current_auc = 0.5819649698960043
User 135982 AUC after training: 0.5788177339901478
User 135982 does not improve AUC. Reverting changes.
Training on augumented user 73890 18/50 current_auc = 0.5819649698960043
User 73890 AUC after training: 0.5814176245210728
User 73890 does not improve AUC. Reverting changes.
Training on augumented user 43280 19/50 current_auc = 0.5819649698960043
User 43280 AUC after training: 0.5816912972085386
User 43280 does not improve AUC. Reverting changes.
Training on augumented user 82382 20/50 current_auc = 0.5819649698960043
User 82382 AUC after training: 0.5807334428024084
User 82382 does not improve AUC. Reverting changes.
Training on augumented user 84305 21/50 current_auc = 0.5819649698960043
User 84305 AUC after training: 0.5807334428024082
User 84305 does not improve AUC. Reverting changes.
Training on augumented user 28699 22/50 current_auc = 0.5819649698960043
User 28699 AUC after training: 0.5801860974274768
User 28699 does not improve AUC. Reverting changes.
Training on augumented user 36894 23/50 current_auc = 0.5819649698960043
User 36894 AUC after training: 0.5800492610837439
User 36894 does not improve AUC. Reverting changes.
Training on augumented user 117434 24/50 current_auc = 0.5819649698960043
User 117434 AUC after training: 0.5822386425834701
User 117434 improves AUC. Keeping the model.
Training on augumented user 81025 25/50 current_auc = 0.5822386425834701
User 81025 AUC after training: 0.5803229337712097
User 81025 does not improve AUC. Reverting changes.
Training on augumented user 60343 26/50 current_auc = 0.5822386425834701
User 60343 AUC after training: 0.5816912972085386
User 60343 does not improve AUC. Reverting changes.
Training on augumented user 71297 27/50 current_auc = 0.5822386425834701
User 71297 AUC after training: 0.5799124247400109
User 71297 does not improve AUC. Reverting changes.
Training on augumented user 1840 28/50 current_auc = 0.5822386425834701
User 1840 AUC after training: 0.5803229337712097
User 1840 does not improve AUC. Reverting changes.
Training on augumented user 83569 29/50 current_auc = 0.5822386425834701
User 83569 AUC after training: 0.5819649698960043
User 83569 does not improve AUC. Reverting changes.
Training on augumented user 36612 30/50 current_auc = 0.5822386425834701
User 36612 AUC after training: 0.5801860974274767
User 36612 does not improve AUC. Reverting changes.
Training on augumented user 91904 31/50 current_auc = 0.5822386425834701
User 91904 AUC after training: 0.5829228243021347
User 91904 improves AUC. Keeping the model.
Training on augumented user 88450 32/50 current_auc = 0.5829228243021347
User 88450 AUC after training: 0.5826491516146689
User 88450 does not improve AUC. Reverting changes.
Training on augumented user 57894 33/50 current_auc = 0.5829228243021347
User 57894 AUC after training: 0.5826491516146688
User 57894 does not improve AUC. Reverting changes.
Training on augumented user 3307 34/50 current_auc = 0.5829228243021347
User 3307 AUC after training: 0.5831964969896004
User 3307 improves AUC. Keeping the model.
Training on augumented user 77436 35/50 current_auc = 0.5831964969896004
User 77436 AUC after training: 0.5793650793650793
User 77436 does not improve AUC. Reverting changes.
Training on augumented user 137782 36/50 current_auc = 0.5831964969896004
User 137782 AUC after training: 0.5831964969896004
User 137782 does not improve AUC. Reverting changes.
Training on augumented user 52454 37/50 current_auc = 0.5831964969896004
User 52454 AUC after training: 0.5834701696770662
User 52454 improves AUC. Keeping the model.
Training on augumented user 52288 38/50 current_auc = 0.5834701696770662
User 52288 AUC after training: 0.5812807881773399
User 52288 does not improve AUC. Reverting changes.
Training on augumented user 107883 39/50 current_auc = 0.5834701696770662
User 107883 AUC after training: 0.5823754789272031
User 107883 does not improve AUC. Reverting changes.
Training on augumented user 135684 40/50 current_auc = 0.5834701696770662
User 135684 AUC after training: 0.5821018062397372
User 135684 does not improve AUC. Reverting changes.
Training on augumented user 106572 41/50 current_auc = 0.5834701696770662
User 106572 AUC after training: 0.5823754789272031
User 106572 does not improve AUC. Reverting changes.
Training on augumented user 47857 42/50 current_auc = 0.5834701696770662
User 47857 AUC after training: 0.583743842364532
User 47857 improves AUC. Keeping the model.
Training on augumented user 100972 43/50 current_auc = 0.583743842364532
User 100972 AUC after training: 0.5829228243021347
User 100972 does not improve AUC. Reverting changes.
Training on augumented user 48935 44/50 current_auc = 0.583743842364532
User 48935 AUC after training: 0.5774493705528189
User 48935 does not improve AUC. Reverting changes.
Training on augumented user 63448 45/50 current_auc = 0.583743842364532
User 63448 AUC after training: 0.5840175150519977
User 63448 improves AUC. Keeping the model.
Training on augumented user 128464 46/50 current_auc = 0.5840175150519977
User 128464 AUC after training: 0.5826491516146688
User 128464 does not improve AUC. Reverting changes.
Training on augumented user 39934 47/50 current_auc = 0.5840175150519977
User 39934 AUC after training: 0.5842911877394636
User 39934 improves AUC. Keeping the model.
Training on augumented user 8021 48/50 current_auc = 0.5842911877394636
User 8021 AUC after training: 0.583743842364532
User 8021 does not improve AUC. Reverting changes.
Training on augumented user 32207 49/50 current_auc = 0.5842911877394636
User 32207 AUC after training: 0.5840175150519977
User 32207 does not improve AUC. Reverting changes.
[2024-12-02 19:24:01.490032] start test user 100438 188/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:24:02.252579] start test user 100438 188/567 recall augumented users by random, augumented_users = [57974, 70581, 71953, 100769, 23457, 120652, 49873, 114096, 21186, 127496, 87650, 116521, 64202, 78809, 76253, 3036, 46705, 65305, 61954, 90206, 93064, 38835, 45828, 44222, 94631, 55396, 68613, 115585, 48061, 118563, 84212, 55105, 12138, 60175, 31796, 132028, 82945, 74057, 52618, 68020, 69184, 8411, 81479, 24104, 96861, 111080, 85674, 82516, 49860, 1689]
[2024-12-02 19:24:02.289376] user = 100438 Cloud 188/567
[2024-12-02 19:24:02.372807] user = 100438 Local 188/567
[2024-12-02 19:24:02.590225] user = 100438 Local+ 188/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:24:05.982649] user = 100438 MPDA- 188/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6606242840778924
Training on augumented user 57974 0/50 current_auc = 0.6606242840778924
User 57974 AUC after training: 0.6601756395570829
User 57974 does not improve AUC. Reverting changes.
Training on augumented user 70581 1/50 current_auc = 0.6606242840778924
User 70581 AUC after training: 0.6595265368461245
User 70581 does not improve AUC. Reverting changes.
Training on augumented user 71953 2/50 current_auc = 0.6606242840778924
User 71953 AUC after training: 0.6608533791523482
User 71953 improves AUC. Keeping the model.
Training on augumented user 100769 3/50 current_auc = 0.6608533791523482
User 100769 AUC after training: 0.6611588392516228
User 100769 improves AUC. Keeping the model.
Training on augumented user 23457 4/50 current_auc = 0.6611588392516228
User 23457 AUC after training: 0.6611779305078274
User 23457 improves AUC. Keeping the model.
Training on augumented user 120652 5/50 current_auc = 0.6611779305078274
User 120652 AUC after training: 0.6608915616647576
User 120652 does not improve AUC. Reverting changes.
Training on augumented user 49873 6/50 current_auc = 0.6611779305078274
User 49873 AUC after training: 0.6608820160366552
User 49873 does not improve AUC. Reverting changes.
Training on augumented user 114096 7/50 current_auc = 0.6611779305078274
User 114096 AUC after training: 0.66032836960672
User 114096 does not improve AUC. Reverting changes.
Training on augumented user 21186 8/50 current_auc = 0.6611779305078274
User 21186 AUC after training: 0.6604429171439481
User 21186 does not improve AUC. Reverting changes.
Training on augumented user 127496 9/50 current_auc = 0.6611779305078274
User 127496 AUC after training: 0.6611779305078274
User 127496 does not improve AUC. Reverting changes.
Training on augumented user 87650 10/50 current_auc = 0.6611779305078274
User 87650 AUC after training: 0.6606911034746087
User 87650 does not improve AUC. Reverting changes.
Training on augumented user 116521 11/50 current_auc = 0.6611779305078274
User 116521 AUC after training: 0.6610538373424971
User 116521 does not improve AUC. Reverting changes.
Training on augumented user 64202 12/50 current_auc = 0.6611779305078274
User 64202 AUC after training: 0.6611206567392134
User 64202 does not improve AUC. Reverting changes.
Training on augumented user 78809 13/50 current_auc = 0.6611779305078274
User 78809 AUC after training: 0.6605956471935852
User 78809 does not improve AUC. Reverting changes.
Training on augumented user 76253 14/50 current_auc = 0.6611779305078274
User 76253 AUC after training: 0.6609965635738833
User 76253 does not improve AUC. Reverting changes.
Training on augumented user 3036 15/50 current_auc = 0.6611779305078274
User 3036 AUC after training: 0.6613879343260787
User 3036 improves AUC. Keeping the model.
Training on augumented user 46705 16/50 current_auc = 0.6613879343260787
User 46705 AUC after training: 0.6605001909125621
User 46705 does not improve AUC. Reverting changes.
Training on augumented user 65305 17/50 current_auc = 0.6613879343260787
User 65305 AUC after training: 0.6613688430698741
User 65305 does not improve AUC. Reverting changes.
Training on augumented user 61954 18/50 current_auc = 0.6613879343260787
User 61954 AUC after training: 0.6616361206567393
User 61954 improves AUC. Keeping the model.
Training on augumented user 90206 19/50 current_auc = 0.6616361206567393
User 90206 AUC after training: 0.6614070255822833
User 90206 does not improve AUC. Reverting changes.
Training on augumented user 93064 20/50 current_auc = 0.6616361206567393
User 93064 AUC after training: 0.6613974799541811
User 93064 does not improve AUC. Reverting changes.
Training on augumented user 38835 21/50 current_auc = 0.6616361206567393
User 38835 AUC after training: 0.6604715540282551
User 38835 does not improve AUC. Reverting changes.
Training on augumented user 45828 22/50 current_auc = 0.6616361206567393
User 45828 AUC after training: 0.662094310805651
User 45828 improves AUC. Keeping the model.
Training on augumented user 44222 23/50 current_auc = 0.662094310805651
User 44222 AUC after training: 0.6613211149293624
User 44222 does not improve AUC. Reverting changes.
Training on augumented user 94631 24/50 current_auc = 0.662094310805651
User 94631 AUC after training: 0.6612065673921345
User 94631 does not improve AUC. Reverting changes.
Training on augumented user 55396 25/50 current_auc = 0.662094310805651
User 55396 AUC after training: 0.661922489499809
User 55396 does not improve AUC. Reverting changes.
Training on augumented user 68613 26/50 current_auc = 0.662094310805651
User 68613 AUC after training: 0.6617983963344789
User 68613 does not improve AUC. Reverting changes.
Training on augumented user 115585 27/50 current_auc = 0.662094310805651
User 115585 AUC after training: 0.6615597556319206
User 115585 does not improve AUC. Reverting changes.
Training on augumented user 48061 28/50 current_auc = 0.662094310805651
User 48061 AUC after training: 0.6617315769377624
User 48061 does not improve AUC. Reverting changes.
Training on augumented user 118563 29/50 current_auc = 0.662094310805651
User 118563 AUC after training: 0.6619224894998091
User 118563 does not improve AUC. Reverting changes.
Training on augumented user 84212 30/50 current_auc = 0.662094310805651
User 84212 AUC after training: 0.6610061092019854
User 84212 does not improve AUC. Reverting changes.
Training on augumented user 55105 31/50 current_auc = 0.662094310805651
User 55105 AUC after training: 0.6617315769377625
User 55105 does not improve AUC. Reverting changes.
Training on augumented user 12138 32/50 current_auc = 0.662094310805651
User 12138 AUC after training: 0.6619606720122184
User 12138 does not improve AUC. Reverting changes.
Training on augumented user 60175 33/50 current_auc = 0.662094310805651
User 60175 AUC after training: 0.6619033982436044
User 60175 does not improve AUC. Reverting changes.
Training on augumented user 31796 34/50 current_auc = 0.662094310805651
User 31796 AUC after training: 0.66159793814433
User 31796 does not improve AUC. Reverting changes.
Training on augumented user 132028 35/50 current_auc = 0.662094310805651
User 132028 AUC after training: 0.6616743031691484
User 132028 does not improve AUC. Reverting changes.
Training on augumented user 82945 36/50 current_auc = 0.662094310805651
User 82945 AUC after training: 0.6615788468881253
User 82945 does not improve AUC. Reverting changes.
Training on augumented user 74057 37/50 current_auc = 0.662094310805651
User 74057 AUC after training: 0.661979763268423
User 74057 does not improve AUC. Reverting changes.
Training on augumented user 52618 38/50 current_auc = 0.662094310805651
User 52618 AUC after training: 0.6617315769377624
User 52618 does not improve AUC. Reverting changes.
Training on augumented user 68020 39/50 current_auc = 0.662094310805651
User 68020 AUC after training: 0.6614452080946926
User 68020 does not improve AUC. Reverting changes.
Training on augumented user 69184 40/50 current_auc = 0.662094310805651
User 69184 AUC after training: 0.6619797632684231
User 69184 does not improve AUC. Reverting changes.
Training on augumented user 8411 41/50 current_auc = 0.662094310805651
User 8411 AUC after training: 0.6617888507063764
User 8411 does not improve AUC. Reverting changes.
Training on augumented user 81479 42/50 current_auc = 0.662094310805651
User 81479 AUC after training: 0.6621515845742649
User 81479 improves AUC. Keeping the model.
Training on augumented user 24104 43/50 current_auc = 0.6621515845742649
User 24104 AUC after training: 0.661922489499809
User 24104 does not improve AUC. Reverting changes.
Training on augumented user 96861 44/50 current_auc = 0.6621515845742649
User 96861 AUC after training: 0.6620465826651394
User 96861 does not improve AUC. Reverting changes.
Training on augumented user 111080 45/50 current_auc = 0.6621515845742649
User 111080 AUC after training: 0.6610729285987018
User 111080 does not improve AUC. Reverting changes.
Training on augumented user 85674 46/50 current_auc = 0.6621515845742649
User 85674 AUC after training: 0.6621515845742649
User 85674 does not improve AUC. Reverting changes.
Training on augumented user 82516 47/50 current_auc = 0.6621515845742649
User 82516 AUC after training: 0.6621134020618556
User 82516 does not improve AUC. Reverting changes.
Training on augumented user 49860 48/50 current_auc = 0.6621515845742649
User 49860 AUC after training: 0.6617220313096601
User 49860 does not improve AUC. Reverting changes.
Training on augumented user 1689 49/50 current_auc = 0.6621515845742649
User 1689 AUC after training: 0.6613497518136693
User 1689 does not improve AUC. Reverting changes.
[2024-12-02 19:24:37.044123] start test user 100464 189/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:24:37.460071] start test user 100464 189/567 recall augumented users by random, augumented_users = [59800, 34240, 39674, 19688, 19171, 116203, 5702, 63283, 16925, 109019, 82938, 130985, 47267, 81261, 46883, 3783, 131949, 17408, 18784, 102946, 82919, 68442, 59578, 59535, 56816, 67990, 81006, 125705, 61988, 4700, 1562, 88388, 9801, 23045, 127916, 74723, 60708, 131605, 23218, 87927, 64177, 63769, 124854, 113365, 95006, 45842, 11687, 24501, 94328, 274]
[2024-12-02 19:24:37.475070] user = 100464 Cloud 189/567
[2024-12-02 19:24:37.497686] user = 100464 Local 189/567
[2024-12-02 19:24:37.574239] user = 100464 Local+ 189/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:24:40.054492] user = 100464 MPDA- 189/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.552076124567474
Training on augumented user 59800 0/50 current_auc = 0.552076124567474
User 59800 AUC after training: 0.5521337946943483
User 59800 improves AUC. Keeping the model.
Training on augumented user 34240 1/50 current_auc = 0.5521337946943483
User 34240 AUC after training: 0.5518454440599769
User 34240 does not improve AUC. Reverting changes.
Training on augumented user 39674 2/50 current_auc = 0.5521337946943483
User 39674 AUC after training: 0.5523644752018455
User 39674 improves AUC. Keeping the model.
Training on augumented user 19688 3/50 current_auc = 0.5523644752018455
User 19688 AUC after training: 0.5538062283737024
User 19688 improves AUC. Keeping the model.
Training on augumented user 19171 4/50 current_auc = 0.5538062283737024
User 19171 AUC after training: 0.5524221453287197
User 19171 does not improve AUC. Reverting changes.
Training on augumented user 116203 5/50 current_auc = 0.5538062283737024
User 116203 AUC after training: 0.5532295271049597
User 116203 does not improve AUC. Reverting changes.
Training on augumented user 5702 6/50 current_auc = 0.5538062283737024
User 5702 AUC after training: 0.5536332179930796
User 5702 does not improve AUC. Reverting changes.
Training on augumented user 63283 7/50 current_auc = 0.5538062283737024
User 63283 AUC after training: 0.5536332179930796
User 63283 does not improve AUC. Reverting changes.
Training on augumented user 16925 8/50 current_auc = 0.5538062283737024
User 16925 AUC after training: 0.5528258362168398
User 16925 does not improve AUC. Reverting changes.
Training on augumented user 109019 9/50 current_auc = 0.5538062283737024
User 109019 AUC after training: 0.5534025374855824
User 109019 does not improve AUC. Reverting changes.
Training on augumented user 82938 10/50 current_auc = 0.5538062283737024
User 82938 AUC after training: 0.553517877739331
User 82938 does not improve AUC. Reverting changes.
Training on augumented user 130985 11/50 current_auc = 0.5538062283737024
User 130985 AUC after training: 0.5529411764705883
User 130985 does not improve AUC. Reverting changes.
Training on augumented user 47267 12/50 current_auc = 0.5538062283737024
User 47267 AUC after training: 0.5540369088811995
User 47267 improves AUC. Keeping the model.
Training on augumented user 81261 13/50 current_auc = 0.5540369088811995
User 81261 AUC after training: 0.5540369088811996
User 81261 improves AUC. Keeping the model.
Training on augumented user 46883 14/50 current_auc = 0.5540369088811996
User 46883 AUC after training: 0.5537485582468281
User 46883 does not improve AUC. Reverting changes.
Training on augumented user 3783 15/50 current_auc = 0.5540369088811996
User 3783 AUC after training: 0.553921568627451
User 3783 does not improve AUC. Reverting changes.
Training on augumented user 131949 16/50 current_auc = 0.5540369088811996
User 131949 AUC after training: 0.5527681660899655
User 131949 does not improve AUC. Reverting changes.
Training on augumented user 17408 17/50 current_auc = 0.5540369088811996
User 17408 AUC after training: 0.5536043829296424
User 17408 does not improve AUC. Reverting changes.
Training on augumented user 18784 18/50 current_auc = 0.5540369088811996
User 18784 AUC after training: 0.5532006920415226
User 18784 does not improve AUC. Reverting changes.
Training on augumented user 102946 19/50 current_auc = 0.5540369088811996
User 102946 AUC after training: 0.5534025374855825
User 102946 does not improve AUC. Reverting changes.
Training on augumented user 82919 20/50 current_auc = 0.5540369088811996
User 82919 AUC after training: 0.5538638985005767
User 82919 does not improve AUC. Reverting changes.
Training on augumented user 68442 21/50 current_auc = 0.5540369088811996
User 68442 AUC after training: 0.552479815455594
User 68442 does not improve AUC. Reverting changes.
Training on augumented user 59578 22/50 current_auc = 0.5540369088811996
User 59578 AUC after training: 0.5543252595155709
User 59578 improves AUC. Keeping the model.
Training on augumented user 59535 23/50 current_auc = 0.5543252595155709
User 59535 AUC after training: 0.5548442906574395
User 59535 improves AUC. Keeping the model.
Training on augumented user 56816 24/50 current_auc = 0.5548442906574395
User 56816 AUC after training: 0.5547866205305653
User 56816 does not improve AUC. Reverting changes.
Training on augumented user 67990 25/50 current_auc = 0.5548442906574395
User 67990 AUC after training: 0.5544117647058824
User 67990 does not improve AUC. Reverting changes.
Training on augumented user 81006 26/50 current_auc = 0.5548442906574395
User 81006 AUC after training: 0.5544405997693195
User 81006 does not improve AUC. Reverting changes.
Training on augumented user 125705 27/50 current_auc = 0.5548442906574395
User 125705 AUC after training: 0.5539215686274511
User 125705 does not improve AUC. Reverting changes.
Training on augumented user 61988 28/50 current_auc = 0.5548442906574395
User 61988 AUC after training: 0.5542675893886967
User 61988 does not improve AUC. Reverting changes.
Training on augumented user 4700 29/50 current_auc = 0.5548442906574395
User 4700 AUC after training: 0.5540080738177624
User 4700 does not improve AUC. Reverting changes.
Training on augumented user 1562 30/50 current_auc = 0.5548442906574395
User 1562 AUC after training: 0.5535755478662053
User 1562 does not improve AUC. Reverting changes.
Training on augumented user 88388 31/50 current_auc = 0.5548442906574395
User 88388 AUC after training: 0.5549019607843139
User 88388 improves AUC. Keeping the model.
Training on augumented user 9801 32/50 current_auc = 0.5549019607843139
User 9801 AUC after training: 0.5555940023068051
User 9801 improves AUC. Keeping the model.
Training on augumented user 23045 33/50 current_auc = 0.5555940023068051
User 23045 AUC after training: 0.5560553633217993
User 23045 improves AUC. Keeping the model.
Training on augumented user 127916 34/50 current_auc = 0.5560553633217993
User 127916 AUC after training: 0.5562283737024222
User 127916 improves AUC. Keeping the model.
Training on augumented user 74723 35/50 current_auc = 0.5562283737024222
User 74723 AUC after training: 0.5554209919261822
User 74723 does not improve AUC. Reverting changes.
Training on augumented user 60708 36/50 current_auc = 0.5562283737024222
User 60708 AUC after training: 0.5555363321799308
User 60708 does not improve AUC. Reverting changes.
Training on augumented user 131605 37/50 current_auc = 0.5562283737024222
User 131605 AUC after training: 0.5553633217993079
User 131605 does not improve AUC. Reverting changes.
Training on augumented user 23218 38/50 current_auc = 0.5562283737024222
User 23218 AUC after training: 0.5551903114186852
User 23218 does not improve AUC. Reverting changes.
Training on augumented user 87927 39/50 current_auc = 0.5562283737024222
User 87927 AUC after training: 0.5562283737024221
User 87927 does not improve AUC. Reverting changes.
Training on augumented user 64177 40/50 current_auc = 0.5562283737024222
User 64177 AUC after training: 0.5562283737024221
User 64177 does not improve AUC. Reverting changes.
Training on augumented user 63769 41/50 current_auc = 0.5562283737024222
User 63769 AUC after training: 0.5546712802768166
User 63769 does not improve AUC. Reverting changes.
Training on augumented user 124854 42/50 current_auc = 0.5562283737024222
User 124854 AUC after training: 0.5556516724336794
User 124854 does not improve AUC. Reverting changes.
Training on augumented user 113365 43/50 current_auc = 0.5562283737024222
User 113365 AUC after training: 0.5564590542099193
User 113365 improves AUC. Keeping the model.
Training on augumented user 95006 44/50 current_auc = 0.5564590542099193
User 95006 AUC after training: 0.5545559400230681
User 95006 does not improve AUC. Reverting changes.
Training on augumented user 45842 45/50 current_auc = 0.5564590542099193
User 45842 AUC after training: 0.5555940023068051
User 45842 does not improve AUC. Reverting changes.
Training on augumented user 11687 46/50 current_auc = 0.5564590542099193
User 11687 AUC after training: 0.5559400230680508
User 11687 does not improve AUC. Reverting changes.
Training on augumented user 24501 47/50 current_auc = 0.5564590542099193
User 24501 AUC after training: 0.5557381776239907
User 24501 does not improve AUC. Reverting changes.
Training on augumented user 94328 48/50 current_auc = 0.5564590542099193
User 94328 AUC after training: 0.5562860438292965
User 94328 does not improve AUC. Reverting changes.
Training on augumented user 274 49/50 current_auc = 0.5564590542099193
User 274 AUC after training: 0.5553056516724337
User 274 does not improve AUC. Reverting changes.
[2024-12-02 19:25:12.165423] start test user 100471 190/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:25:12.905767] start test user 100471 190/567 recall augumented users by random, augumented_users = [31408, 18653, 41295, 24210, 95544, 25234, 52674, 104873, 24344, 79035, 72687, 78812, 44615, 80255, 80079, 82664, 65260, 30554, 112422, 48992, 100372, 86792, 85884, 46630, 4695, 100413, 11016, 73029, 125856, 7839, 113033, 74772, 76808, 78295, 62023, 86951, 115256, 120769, 35371, 46375, 80659, 86834, 57755, 61985, 60432, 88511, 21270, 26880, 10301, 101850]
[2024-12-02 19:25:12.954747] user = 100471 Cloud 190/567
[2024-12-02 19:25:12.987890] user = 100471 Local 190/567
[2024-12-02 19:25:13.116293] user = 100471 Local+ 190/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:25:15.552805] user = 100471 MPDA- 190/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6270661157024794
Training on augumented user 31408 0/50 current_auc = 0.6270661157024794
User 31408 AUC after training: 0.6263774104683196
User 31408 does not improve AUC. Reverting changes.
Training on augumented user 18653 1/50 current_auc = 0.6270661157024794
User 18653 AUC after training: 0.6275826446280992
User 18653 improves AUC. Keeping the model.
Training on augumented user 41295 2/50 current_auc = 0.6275826446280992
User 41295 AUC after training: 0.6286157024793388
User 41295 improves AUC. Keeping the model.
Training on augumented user 24210 3/50 current_auc = 0.6286157024793388
User 24210 AUC after training: 0.6274104683195593
User 24210 does not improve AUC. Reverting changes.
Training on augumented user 95544 4/50 current_auc = 0.6286157024793388
User 95544 AUC after training: 0.628271349862259
User 95544 does not improve AUC. Reverting changes.
Training on augumented user 25234 5/50 current_auc = 0.6286157024793388
User 25234 AUC after training: 0.6286157024793388
User 25234 does not improve AUC. Reverting changes.
Training on augumented user 52674 6/50 current_auc = 0.6286157024793388
User 52674 AUC after training: 0.6260330578512397
User 52674 does not improve AUC. Reverting changes.
Training on augumented user 104873 7/50 current_auc = 0.6286157024793388
User 104873 AUC after training: 0.6289600550964187
User 104873 improves AUC. Keeping the model.
Training on augumented user 24344 8/50 current_auc = 0.6289600550964187
User 24344 AUC after training: 0.6301652892561984
User 24344 improves AUC. Keeping the model.
Training on augumented user 79035 9/50 current_auc = 0.6301652892561984
User 79035 AUC after training: 0.6310261707988981
User 79035 improves AUC. Keeping the model.
Training on augumented user 72687 10/50 current_auc = 0.6310261707988981
User 72687 AUC after training: 0.6287878787878788
User 72687 does not improve AUC. Reverting changes.
Training on augumented user 78812 11/50 current_auc = 0.6310261707988981
User 78812 AUC after training: 0.631198347107438
User 78812 improves AUC. Keeping the model.
Training on augumented user 44615 12/50 current_auc = 0.631198347107438
User 44615 AUC after training: 0.6317148760330579
User 44615 improves AUC. Keeping the model.
Training on augumented user 80255 13/50 current_auc = 0.6317148760330579
User 80255 AUC after training: 0.6329201101928376
User 80255 improves AUC. Keeping the model.
Training on augumented user 80079 14/50 current_auc = 0.6329201101928376
User 80079 AUC after training: 0.6332644628099174
User 80079 improves AUC. Keeping the model.
Training on augumented user 82664 15/50 current_auc = 0.6332644628099174
User 82664 AUC after training: 0.6334366391184574
User 82664 improves AUC. Keeping the model.
Training on augumented user 65260 16/50 current_auc = 0.6334366391184574
User 65260 AUC after training: 0.6341253443526172
User 65260 improves AUC. Keeping the model.
Training on augumented user 30554 17/50 current_auc = 0.6341253443526172
User 30554 AUC after training: 0.6334366391184573
User 30554 does not improve AUC. Reverting changes.
Training on augumented user 112422 18/50 current_auc = 0.6341253443526172
User 112422 AUC after training: 0.6346418732782371
User 112422 improves AUC. Keeping the model.
Training on augumented user 48992 19/50 current_auc = 0.6346418732782371
User 48992 AUC after training: 0.6337809917355373
User 48992 does not improve AUC. Reverting changes.
Training on augumented user 100372 20/50 current_auc = 0.6346418732782371
User 100372 AUC after training: 0.6344696969696971
User 100372 does not improve AUC. Reverting changes.
Training on augumented user 86792 21/50 current_auc = 0.6346418732782371
User 86792 AUC after training: 0.6351584022038568
User 86792 improves AUC. Keeping the model.
Training on augumented user 85884 22/50 current_auc = 0.6351584022038568
User 85884 AUC after training: 0.6324035812672176
User 85884 does not improve AUC. Reverting changes.
Training on augumented user 46630 23/50 current_auc = 0.6351584022038568
User 46630 AUC after training: 0.6341253443526171
User 46630 does not improve AUC. Reverting changes.
Training on augumented user 4695 24/50 current_auc = 0.6351584022038568
User 4695 AUC after training: 0.6351584022038567
User 4695 does not improve AUC. Reverting changes.
Training on augumented user 100413 25/50 current_auc = 0.6351584022038568
User 100413 AUC after training: 0.634125344352617
User 100413 does not improve AUC. Reverting changes.
Training on augumented user 11016 26/50 current_auc = 0.6351584022038568
User 11016 AUC after training: 0.6329201101928376
User 11016 does not improve AUC. Reverting changes.
Training on augumented user 73029 27/50 current_auc = 0.6351584022038568
User 73029 AUC after training: 0.6349862258953168
User 73029 does not improve AUC. Reverting changes.
Training on augumented user 125856 28/50 current_auc = 0.6351584022038568
User 125856 AUC after training: 0.6348140495867769
User 125856 does not improve AUC. Reverting changes.
Training on augumented user 7839 29/50 current_auc = 0.6351584022038568
User 7839 AUC after training: 0.6337809917355373
User 7839 does not improve AUC. Reverting changes.
Training on augumented user 113033 30/50 current_auc = 0.6351584022038568
User 113033 AUC after training: 0.6342975206611571
User 113033 does not improve AUC. Reverting changes.
Training on augumented user 74772 31/50 current_auc = 0.6351584022038568
User 74772 AUC after training: 0.6344696969696969
User 74772 does not improve AUC. Reverting changes.
Training on augumented user 76808 32/50 current_auc = 0.6351584022038568
User 76808 AUC after training: 0.6346418732782371
User 76808 does not improve AUC. Reverting changes.
Training on augumented user 78295 33/50 current_auc = 0.6351584022038568
User 78295 AUC after training: 0.6337809917355371
User 78295 does not improve AUC. Reverting changes.
Training on augumented user 62023 34/50 current_auc = 0.6351584022038568
User 62023 AUC after training: 0.6355027548209367
User 62023 improves AUC. Keeping the model.
Training on augumented user 86951 35/50 current_auc = 0.6355027548209367
User 86951 AUC after training: 0.634641873278237
User 86951 does not improve AUC. Reverting changes.
Training on augumented user 115256 36/50 current_auc = 0.6355027548209367
User 115256 AUC after training: 0.634125344352617
User 115256 does not improve AUC. Reverting changes.
Training on augumented user 120769 37/50 current_auc = 0.6355027548209367
User 120769 AUC after training: 0.6348140495867769
User 120769 does not improve AUC. Reverting changes.
Training on augumented user 35371 38/50 current_auc = 0.6355027548209367
User 35371 AUC after training: 0.6353305785123967
User 35371 does not improve AUC. Reverting changes.
Training on augumented user 46375 39/50 current_auc = 0.6355027548209367
User 46375 AUC after training: 0.6341253443526171
User 46375 does not improve AUC. Reverting changes.
Training on augumented user 80659 40/50 current_auc = 0.6355027548209367
User 80659 AUC after training: 0.6342975206611571
User 80659 does not improve AUC. Reverting changes.
Training on augumented user 86834 41/50 current_auc = 0.6355027548209367
User 86834 AUC after training: 0.6342975206611571
User 86834 does not improve AUC. Reverting changes.
Training on augumented user 57755 42/50 current_auc = 0.6355027548209367
User 57755 AUC after training: 0.6353305785123967
User 57755 does not improve AUC. Reverting changes.
Training on augumented user 61985 43/50 current_auc = 0.6355027548209367
User 61985 AUC after training: 0.6336088154269973
User 61985 does not improve AUC. Reverting changes.
Training on augumented user 60432 44/50 current_auc = 0.6355027548209367
User 60432 AUC after training: 0.6356749311294767
User 60432 improves AUC. Keeping the model.
Training on augumented user 88511 45/50 current_auc = 0.6356749311294767
User 88511 AUC after training: 0.6356749311294766
User 88511 does not improve AUC. Reverting changes.
Training on augumented user 21270 46/50 current_auc = 0.6356749311294767
User 21270 AUC after training: 0.6344696969696969
User 21270 does not improve AUC. Reverting changes.
Training on augumented user 26880 47/50 current_auc = 0.6356749311294767
User 26880 AUC after training: 0.6336088154269973
User 26880 does not improve AUC. Reverting changes.
Training on augumented user 10301 48/50 current_auc = 0.6356749311294767
User 10301 AUC after training: 0.6348140495867769
User 10301 does not improve AUC. Reverting changes.
Training on augumented user 101850 49/50 current_auc = 0.6356749311294767
User 101850 AUC after training: 0.6360192837465565
User 101850 improves AUC. Keeping the model.
[2024-12-02 19:25:47.003089] start test user 100476 191/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:25:47.519326] start test user 100476 191/567 recall augumented users by random, augumented_users = [29735, 18419, 55719, 124153, 52080, 18273, 137756, 4114, 17360, 47693, 27329, 134811, 95725, 76346, 78728, 64762, 70975, 67420, 2373, 55897, 65738, 106978, 107490, 7313, 68967, 35397, 104694, 98259, 15929, 111314, 115376, 36112, 428, 80161, 135615, 51557, 108709, 52460, 71027, 994, 69527, 123282, 4794, 56667, 108320, 71376, 54720, 88400, 71452, 64343]
[2024-12-02 19:25:47.537111] user = 100476 Cloud 191/567
[2024-12-02 19:25:47.554926] user = 100476 Local 191/567
[2024-12-02 19:25:47.617161] user = 100476 Local+ 191/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:25:49.591678] user = 100476 MPDA- 191/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.46683673469387754
Training on augumented user 29735 0/50 current_auc = 0.46683673469387754
User 29735 AUC after training: 0.46683673469387754
User 29735 does not improve AUC. Reverting changes.
Training on augumented user 18419 1/50 current_auc = 0.46683673469387754
User 18419 AUC after training: 0.46683673469387754
User 18419 does not improve AUC. Reverting changes.
Training on augumented user 55719 2/50 current_auc = 0.46683673469387754
User 55719 AUC after training: 0.46853741496598633
User 55719 improves AUC. Keeping the model.
Training on augumented user 124153 3/50 current_auc = 0.46853741496598633
User 124153 AUC after training: 0.467687074829932
User 124153 does not improve AUC. Reverting changes.
Training on augumented user 52080 4/50 current_auc = 0.46853741496598633
User 52080 AUC after training: 0.46683673469387754
User 52080 does not improve AUC. Reverting changes.
Training on augumented user 18273 5/50 current_auc = 0.46853741496598633
User 18273 AUC after training: 0.46683673469387754
User 18273 does not improve AUC. Reverting changes.
Training on augumented user 137756 6/50 current_auc = 0.46853741496598633
User 137756 AUC after training: 0.46853741496598644
User 137756 improves AUC. Keeping the model.
Training on augumented user 4114 7/50 current_auc = 0.46853741496598644
User 4114 AUC after training: 0.4693877551020408
User 4114 improves AUC. Keeping the model.
Training on augumented user 17360 8/50 current_auc = 0.4693877551020408
User 17360 AUC after training: 0.4710884353741497
User 17360 improves AUC. Keeping the model.
Training on augumented user 47693 9/50 current_auc = 0.4710884353741497
User 47693 AUC after training: 0.46853741496598633
User 47693 does not improve AUC. Reverting changes.
Training on augumented user 27329 10/50 current_auc = 0.4710884353741497
User 27329 AUC after training: 0.4736394557823129
User 27329 improves AUC. Keeping the model.
Training on augumented user 134811 11/50 current_auc = 0.4736394557823129
User 134811 AUC after training: 0.467687074829932
User 134811 does not improve AUC. Reverting changes.
Training on augumented user 95725 12/50 current_auc = 0.4736394557823129
User 95725 AUC after training: 0.4727891156462585
User 95725 does not improve AUC. Reverting changes.
Training on augumented user 76346 13/50 current_auc = 0.4736394557823129
User 76346 AUC after training: 0.47023809523809523
User 76346 does not improve AUC. Reverting changes.
Training on augumented user 78728 14/50 current_auc = 0.4736394557823129
User 78728 AUC after training: 0.47023809523809523
User 78728 does not improve AUC. Reverting changes.
Training on augumented user 64762 15/50 current_auc = 0.4736394557823129
User 64762 AUC after training: 0.47023809523809523
User 64762 does not improve AUC. Reverting changes.
Training on augumented user 70975 16/50 current_auc = 0.4736394557823129
User 70975 AUC after training: 0.47023809523809523
User 70975 does not improve AUC. Reverting changes.
Training on augumented user 67420 17/50 current_auc = 0.4736394557823129
User 67420 AUC after training: 0.46853741496598633
User 67420 does not improve AUC. Reverting changes.
Training on augumented user 2373 18/50 current_auc = 0.4736394557823129
User 2373 AUC after training: 0.47023809523809523
User 2373 does not improve AUC. Reverting changes.
Training on augumented user 55897 19/50 current_auc = 0.4736394557823129
User 55897 AUC after training: 0.4727891156462585
User 55897 does not improve AUC. Reverting changes.
Training on augumented user 65738 20/50 current_auc = 0.4736394557823129
User 65738 AUC after training: 0.4710884353741497
User 65738 does not improve AUC. Reverting changes.
Training on augumented user 106978 21/50 current_auc = 0.4736394557823129
User 106978 AUC after training: 0.4693877551020408
User 106978 does not improve AUC. Reverting changes.
Training on augumented user 107490 22/50 current_auc = 0.4736394557823129
User 107490 AUC after training: 0.47023809523809523
User 107490 does not improve AUC. Reverting changes.
Training on augumented user 7313 23/50 current_auc = 0.4736394557823129
User 7313 AUC after training: 0.4710884353741497
User 7313 does not improve AUC. Reverting changes.
Training on augumented user 68967 24/50 current_auc = 0.4736394557823129
User 68967 AUC after training: 0.471938775510204
User 68967 does not improve AUC. Reverting changes.
Training on augumented user 35397 25/50 current_auc = 0.4736394557823129
User 35397 AUC after training: 0.4736394557823128
User 35397 does not improve AUC. Reverting changes.
Training on augumented user 104694 26/50 current_auc = 0.4736394557823129
User 104694 AUC after training: 0.4710884353741497
User 104694 does not improve AUC. Reverting changes.
Training on augumented user 98259 27/50 current_auc = 0.4736394557823129
User 98259 AUC after training: 0.4710884353741497
User 98259 does not improve AUC. Reverting changes.
Training on augumented user 15929 28/50 current_auc = 0.4736394557823129
User 15929 AUC after training: 0.4736394557823129
User 15929 does not improve AUC. Reverting changes.
Training on augumented user 111314 29/50 current_auc = 0.4736394557823129
User 111314 AUC after training: 0.4693877551020408
User 111314 does not improve AUC. Reverting changes.
Training on augumented user 115376 30/50 current_auc = 0.4736394557823129
User 115376 AUC after training: 0.4770408163265306
User 115376 improves AUC. Keeping the model.
Training on augumented user 36112 31/50 current_auc = 0.4770408163265306
User 36112 AUC after training: 0.4710884353741497
User 36112 does not improve AUC. Reverting changes.
Training on augumented user 428 32/50 current_auc = 0.4770408163265306
User 428 AUC after training: 0.4770408163265306
User 428 does not improve AUC. Reverting changes.
Training on augumented user 80161 33/50 current_auc = 0.4770408163265306
User 80161 AUC after training: 0.4770408163265306
User 80161 does not improve AUC. Reverting changes.
Training on augumented user 135615 34/50 current_auc = 0.4770408163265306
User 135615 AUC after training: 0.47789115646258506
User 135615 improves AUC. Keeping the model.
Training on augumented user 51557 35/50 current_auc = 0.47789115646258506
User 51557 AUC after training: 0.47789115646258506
User 51557 does not improve AUC. Reverting changes.
Training on augumented user 108709 36/50 current_auc = 0.47789115646258506
User 108709 AUC after training: 0.48129251700680276
User 108709 improves AUC. Keeping the model.
Training on augumented user 52460 37/50 current_auc = 0.48129251700680276
User 52460 AUC after training: 0.4736394557823129
User 52460 does not improve AUC. Reverting changes.
Training on augumented user 71027 38/50 current_auc = 0.48129251700680276
User 71027 AUC after training: 0.48129251700680276
User 71027 does not improve AUC. Reverting changes.
Training on augumented user 994 39/50 current_auc = 0.48129251700680276
User 994 AUC after training: 0.4770408163265306
User 994 does not improve AUC. Reverting changes.
Training on augumented user 69527 40/50 current_auc = 0.48129251700680276
User 69527 AUC after training: 0.4787414965986395
User 69527 does not improve AUC. Reverting changes.
Training on augumented user 123282 41/50 current_auc = 0.48129251700680276
User 123282 AUC after training: 0.48044217687074836
User 123282 does not improve AUC. Reverting changes.
Training on augumented user 4794 42/50 current_auc = 0.48129251700680276
User 4794 AUC after training: 0.47874149659863946
User 4794 does not improve AUC. Reverting changes.
Training on augumented user 56667 43/50 current_auc = 0.48129251700680276
User 56667 AUC after training: 0.4787414965986394
User 56667 does not improve AUC. Reverting changes.
Training on augumented user 108320 44/50 current_auc = 0.48129251700680276
User 108320 AUC after training: 0.4804421768707483
User 108320 does not improve AUC. Reverting changes.
Training on augumented user 71376 45/50 current_auc = 0.48129251700680276
User 71376 AUC after training: 0.4804421768707483
User 71376 does not improve AUC. Reverting changes.
Training on augumented user 54720 46/50 current_auc = 0.48129251700680276
User 54720 AUC after training: 0.48299319727891155
User 54720 improves AUC. Keeping the model.
Training on augumented user 88400 47/50 current_auc = 0.48299319727891155
User 88400 AUC after training: 0.47619047619047616
User 88400 does not improve AUC. Reverting changes.
Training on augumented user 71452 48/50 current_auc = 0.48299319727891155
User 71452 AUC after training: 0.48129251700680276
User 71452 does not improve AUC. Reverting changes.
Training on augumented user 64343 49/50 current_auc = 0.48299319727891155
User 64343 AUC after training: 0.48214285714285715
User 64343 does not improve AUC. Reverting changes.
[2024-12-02 19:26:17.279531] start test user 100482 192/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:26:17.759527] start test user 100482 192/567 recall augumented users by random, augumented_users = [41016, 9224, 45912, 80480, 4431, 84493, 32014, 28487, 11670, 52386, 11203, 129341, 89216, 114055, 87399, 114284, 98245, 6917, 99511, 14896, 82218, 70505, 60305, 5087, 39523, 47219, 99042, 134010, 53622, 118540, 8279, 63640, 44039, 16054, 72145, 117959, 111182, 112258, 7146, 23240, 62388, 5713, 12698, 65768, 4065, 31684, 42832, 59778, 64775, 116901]
[2024-12-02 19:26:17.775879] user = 100482 Cloud 192/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:26:17.782860] user = 100482 Local 192/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:26:17.829861] user = 100482 Local+ 192/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:26:20.385649] user = 100482 MPDA- 192/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 41016 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41016 AUC after training: 0.5
User 41016 does not improve AUC. Reverting changes.
Training on augumented user 9224 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9224 AUC after training: 0.5
User 9224 does not improve AUC. Reverting changes.
Training on augumented user 45912 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45912 AUC after training: 0.5
User 45912 does not improve AUC. Reverting changes.
Training on augumented user 80480 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80480 AUC after training: 0.5
User 80480 does not improve AUC. Reverting changes.
Training on augumented user 4431 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4431 AUC after training: 0.5
User 4431 does not improve AUC. Reverting changes.
Training on augumented user 84493 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84493 AUC after training: 0.5
User 84493 does not improve AUC. Reverting changes.
Training on augumented user 32014 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32014 AUC after training: 0.5
User 32014 does not improve AUC. Reverting changes.
Training on augumented user 28487 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 28487 AUC after training: 0.5
User 28487 does not improve AUC. Reverting changes.
Training on augumented user 11670 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11670 AUC after training: 0.5
User 11670 does not improve AUC. Reverting changes.
Training on augumented user 52386 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 52386 AUC after training: 0.5
User 52386 does not improve AUC. Reverting changes.
Training on augumented user 11203 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11203 AUC after training: 0.5
User 11203 does not improve AUC. Reverting changes.
Training on augumented user 129341 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129341 AUC after training: 0.5
User 129341 does not improve AUC. Reverting changes.
Training on augumented user 89216 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89216 AUC after training: 0.5
User 89216 does not improve AUC. Reverting changes.
Training on augumented user 114055 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114055 AUC after training: 0.5
User 114055 does not improve AUC. Reverting changes.
Training on augumented user 87399 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87399 AUC after training: 0.5
User 87399 does not improve AUC. Reverting changes.
Training on augumented user 114284 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114284 AUC after training: 0.5
User 114284 does not improve AUC. Reverting changes.
Training on augumented user 98245 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98245 AUC after training: 0.5
User 98245 does not improve AUC. Reverting changes.
Training on augumented user 6917 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6917 AUC after training: 0.5
User 6917 does not improve AUC. Reverting changes.
Training on augumented user 99511 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99511 AUC after training: 0.5
User 99511 does not improve AUC. Reverting changes.
Training on augumented user 14896 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14896 AUC after training: 0.5
User 14896 does not improve AUC. Reverting changes.
Training on augumented user 82218 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82218 AUC after training: 0.5
User 82218 does not improve AUC. Reverting changes.
Training on augumented user 70505 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70505 AUC after training: 0.5
User 70505 does not improve AUC. Reverting changes.
Training on augumented user 60305 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60305 AUC after training: 0.5
User 60305 does not improve AUC. Reverting changes.
Training on augumented user 5087 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5087 AUC after training: 0.5
User 5087 does not improve AUC. Reverting changes.
Training on augumented user 39523 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 39523 AUC after training: 0.5
User 39523 does not improve AUC. Reverting changes.
Training on augumented user 47219 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47219 AUC after training: 0.5
User 47219 does not improve AUC. Reverting changes.
Training on augumented user 99042 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99042 AUC after training: 0.5
User 99042 does not improve AUC. Reverting changes.
Training on augumented user 134010 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134010 AUC after training: 0.5
User 134010 does not improve AUC. Reverting changes.
Training on augumented user 53622 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53622 AUC after training: 0.5
User 53622 does not improve AUC. Reverting changes.
Training on augumented user 118540 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118540 AUC after training: 0.5
User 118540 does not improve AUC. Reverting changes.
Training on augumented user 8279 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8279 AUC after training: 0.5
User 8279 does not improve AUC. Reverting changes.
Training on augumented user 63640 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63640 AUC after training: 0.5
User 63640 does not improve AUC. Reverting changes.
Training on augumented user 44039 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44039 AUC after training: 0.5
User 44039 does not improve AUC. Reverting changes.
Training on augumented user 16054 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16054 AUC after training: 0.5
User 16054 does not improve AUC. Reverting changes.
Training on augumented user 72145 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72145 AUC after training: 0.5
User 72145 does not improve AUC. Reverting changes.
Training on augumented user 117959 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117959 AUC after training: 0.5
User 117959 does not improve AUC. Reverting changes.
Training on augumented user 111182 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111182 AUC after training: 0.5
User 111182 does not improve AUC. Reverting changes.
Training on augumented user 112258 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112258 AUC after training: 0.5
User 112258 does not improve AUC. Reverting changes.
Training on augumented user 7146 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7146 AUC after training: 0.5
User 7146 does not improve AUC. Reverting changes.
Training on augumented user 23240 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23240 AUC after training: 0.5
User 23240 does not improve AUC. Reverting changes.
Training on augumented user 62388 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62388 AUC after training: 0.5
User 62388 does not improve AUC. Reverting changes.
Training on augumented user 5713 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5713 AUC after training: 0.5
User 5713 does not improve AUC. Reverting changes.
Training on augumented user 12698 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12698 AUC after training: 0.5
User 12698 does not improve AUC. Reverting changes.
Training on augumented user 65768 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 65768 AUC after training: 0.5
User 65768 does not improve AUC. Reverting changes.
Training on augumented user 4065 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4065 AUC after training: 0.5
User 4065 does not improve AUC. Reverting changes.
Training on augumented user 31684 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 31684 AUC after training: 0.5
User 31684 does not improve AUC. Reverting changes.
Training on augumented user 42832 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42832 AUC after training: 0.5
User 42832 does not improve AUC. Reverting changes.
Training on augumented user 59778 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59778 AUC after training: 0.5
User 59778 does not improve AUC. Reverting changes.
Training on augumented user 64775 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64775 AUC after training: 0.5
User 64775 does not improve AUC. Reverting changes.
Training on augumented user 116901 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116901 AUC after training: 0.5
User 116901 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:26:55.848261] start test user 100522 193/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:26:56.680912] start test user 100522 193/567 recall augumented users by random, augumented_users = [63350, 18889, 110777, 65049, 76071, 101083, 95683, 119179, 80331, 44792, 24244, 21136, 34466, 18536, 122931, 11969, 120117, 8623, 19444, 6657, 134353, 92351, 118703, 8831, 20442, 108036, 40099, 89026, 81482, 9279, 39745, 2676, 34911, 110006, 1143, 112668, 84914, 52710, 12006, 81440, 108265, 41472, 54377, 78734, 66751, 90672, 70629, 129647, 30031, 79742]
[2024-12-02 19:26:56.696603] user = 100522 Cloud 193/567
[2024-12-02 19:26:56.712975] user = 100522 Local 193/567
[2024-12-02 19:26:56.805407] user = 100522 Local+ 193/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:26:59.376946] user = 100522 MPDA- 193/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4857954545454546
Training on augumented user 63350 0/50 current_auc = 0.4857954545454546
User 63350 AUC after training: 0.4867424242424242
User 63350 improves AUC. Keeping the model.
Training on augumented user 18889 1/50 current_auc = 0.4867424242424242
User 18889 AUC after training: 0.48674242424242425
User 18889 improves AUC. Keeping the model.
Training on augumented user 110777 2/50 current_auc = 0.48674242424242425
User 110777 AUC after training: 0.48863636363636365
User 110777 improves AUC. Keeping the model.
Training on augumented user 65049 3/50 current_auc = 0.48863636363636365
User 65049 AUC after training: 0.4829545454545454
User 65049 does not improve AUC. Reverting changes.
Training on augumented user 76071 4/50 current_auc = 0.48863636363636365
User 76071 AUC after training: 0.4905303030303031
User 76071 improves AUC. Keeping the model.
Training on augumented user 101083 5/50 current_auc = 0.4905303030303031
User 101083 AUC after training: 0.4914772727272727
User 101083 improves AUC. Keeping the model.
Training on augumented user 95683 6/50 current_auc = 0.4914772727272727
User 95683 AUC after training: 0.49337121212121204
User 95683 improves AUC. Keeping the model.
Training on augumented user 119179 7/50 current_auc = 0.49337121212121204
User 119179 AUC after training: 0.49053030303030304
User 119179 does not improve AUC. Reverting changes.
Training on augumented user 80331 8/50 current_auc = 0.49337121212121204
User 80331 AUC after training: 0.48958333333333337
User 80331 does not improve AUC. Reverting changes.
Training on augumented user 44792 9/50 current_auc = 0.49337121212121204
User 44792 AUC after training: 0.49242424242424243
User 44792 does not improve AUC. Reverting changes.
Training on augumented user 24244 10/50 current_auc = 0.49337121212121204
User 24244 AUC after training: 0.4867424242424243
User 24244 does not improve AUC. Reverting changes.
Training on augumented user 21136 11/50 current_auc = 0.49337121212121204
User 21136 AUC after training: 0.4943181818181819
User 21136 improves AUC. Keeping the model.
Training on augumented user 34466 12/50 current_auc = 0.4943181818181819
User 34466 AUC after training: 0.4943181818181819
User 34466 does not improve AUC. Reverting changes.
Training on augumented user 18536 13/50 current_auc = 0.4943181818181819
User 18536 AUC after training: 0.4952651515151515
User 18536 improves AUC. Keeping the model.
Training on augumented user 122931 14/50 current_auc = 0.4952651515151515
User 122931 AUC after training: 0.4943181818181819
User 122931 does not improve AUC. Reverting changes.
Training on augumented user 11969 15/50 current_auc = 0.4952651515151515
User 11969 AUC after training: 0.4952651515151515
User 11969 does not improve AUC. Reverting changes.
Training on augumented user 120117 16/50 current_auc = 0.4952651515151515
User 120117 AUC after training: 0.4943181818181819
User 120117 does not improve AUC. Reverting changes.
Training on augumented user 8623 17/50 current_auc = 0.4952651515151515
User 8623 AUC after training: 0.49715909090909094
User 8623 improves AUC. Keeping the model.
Training on augumented user 19444 18/50 current_auc = 0.49715909090909094
User 19444 AUC after training: 0.4952651515151515
User 19444 does not improve AUC. Reverting changes.
Training on augumented user 6657 19/50 current_auc = 0.49715909090909094
User 6657 AUC after training: 0.4962121212121212
User 6657 does not improve AUC. Reverting changes.
Training on augumented user 134353 20/50 current_auc = 0.49715909090909094
User 134353 AUC after training: 0.4952651515151515
User 134353 does not improve AUC. Reverting changes.
Training on augumented user 92351 21/50 current_auc = 0.49715909090909094
User 92351 AUC after training: 0.49715909090909094
User 92351 does not improve AUC. Reverting changes.
Training on augumented user 118703 22/50 current_auc = 0.49715909090909094
User 118703 AUC after training: 0.49573863636363635
User 118703 does not improve AUC. Reverting changes.
Training on augumented user 8831 23/50 current_auc = 0.49715909090909094
User 8831 AUC after training: 0.49715909090909094
User 8831 does not improve AUC. Reverting changes.
Training on augumented user 20442 24/50 current_auc = 0.49715909090909094
User 20442 AUC after training: 0.4952651515151515
User 20442 does not improve AUC. Reverting changes.
Training on augumented user 108036 25/50 current_auc = 0.49715909090909094
User 108036 AUC after training: 0.49715909090909094
User 108036 does not improve AUC. Reverting changes.
Training on augumented user 40099 26/50 current_auc = 0.49715909090909094
User 40099 AUC after training: 0.4952651515151515
User 40099 does not improve AUC. Reverting changes.
Training on augumented user 89026 27/50 current_auc = 0.49715909090909094
User 89026 AUC after training: 0.49526515151515155
User 89026 does not improve AUC. Reverting changes.
Training on augumented user 81482 28/50 current_auc = 0.49715909090909094
User 81482 AUC after training: 0.4962121212121212
User 81482 does not improve AUC. Reverting changes.
Training on augumented user 9279 29/50 current_auc = 0.49715909090909094
User 9279 AUC after training: 0.49715909090909094
User 9279 does not improve AUC. Reverting changes.
Training on augumented user 39745 30/50 current_auc = 0.49715909090909094
User 39745 AUC after training: 0.4952651515151515
User 39745 does not improve AUC. Reverting changes.
Training on augumented user 2676 31/50 current_auc = 0.49715909090909094
User 2676 AUC after training: 0.49715909090909094
User 2676 does not improve AUC. Reverting changes.
Training on augumented user 34911 32/50 current_auc = 0.49715909090909094
User 34911 AUC after training: 0.4962121212121212
User 34911 does not improve AUC. Reverting changes.
Training on augumented user 110006 33/50 current_auc = 0.49715909090909094
User 110006 AUC after training: 0.49715909090909094
User 110006 does not improve AUC. Reverting changes.
Training on augumented user 1143 34/50 current_auc = 0.49715909090909094
User 1143 AUC after training: 0.4962121212121212
User 1143 does not improve AUC. Reverting changes.
Training on augumented user 112668 35/50 current_auc = 0.49715909090909094
User 112668 AUC after training: 0.48863636363636365
User 112668 does not improve AUC. Reverting changes.
Training on augumented user 84914 36/50 current_auc = 0.49715909090909094
User 84914 AUC after training: 0.4962121212121212
User 84914 does not improve AUC. Reverting changes.
Training on augumented user 52710 37/50 current_auc = 0.49715909090909094
User 52710 AUC after training: 0.49715909090909094
User 52710 does not improve AUC. Reverting changes.
Training on augumented user 12006 38/50 current_auc = 0.49715909090909094
User 12006 AUC after training: 0.49337121212121215
User 12006 does not improve AUC. Reverting changes.
Training on augumented user 81440 39/50 current_auc = 0.49715909090909094
User 81440 AUC after training: 0.49337121212121215
User 81440 does not improve AUC. Reverting changes.
Training on augumented user 108265 40/50 current_auc = 0.49715909090909094
User 108265 AUC after training: 0.4943181818181819
User 108265 does not improve AUC. Reverting changes.
Training on augumented user 41472 41/50 current_auc = 0.49715909090909094
User 41472 AUC after training: 0.49715909090909094
User 41472 does not improve AUC. Reverting changes.
Training on augumented user 54377 42/50 current_auc = 0.49715909090909094
User 54377 AUC after training: 0.4952651515151515
User 54377 does not improve AUC. Reverting changes.
Training on augumented user 78734 43/50 current_auc = 0.49715909090909094
User 78734 AUC after training: 0.49715909090909094
User 78734 does not improve AUC. Reverting changes.
Training on augumented user 66751 44/50 current_auc = 0.49715909090909094
User 66751 AUC after training: 0.49715909090909094
User 66751 does not improve AUC. Reverting changes.
Training on augumented user 90672 45/50 current_auc = 0.49715909090909094
User 90672 AUC after training: 0.49810606060606066
User 90672 improves AUC. Keeping the model.
Training on augumented user 70629 46/50 current_auc = 0.49810606060606066
User 70629 AUC after training: 0.49810606060606066
User 70629 does not improve AUC. Reverting changes.
Training on augumented user 129647 47/50 current_auc = 0.49810606060606066
User 129647 AUC after training: 0.49810606060606066
User 129647 does not improve AUC. Reverting changes.
Training on augumented user 30031 48/50 current_auc = 0.49810606060606066
User 30031 AUC after training: 0.4962121212121212
User 30031 does not improve AUC. Reverting changes.
Training on augumented user 79742 49/50 current_auc = 0.49810606060606066
User 79742 AUC after training: 0.49810606060606066
User 79742 does not improve AUC. Reverting changes.
[2024-12-02 19:27:28.923434] start test user 100528 194/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:27:29.744112] start test user 100528 194/567 recall augumented users by random, augumented_users = [59451, 84661, 96220, 114983, 10610, 77614, 60569, 33813, 51450, 62727, 44537, 44266, 110010, 88017, 54820, 104775, 120829, 99215, 24169, 136451, 31317, 121922, 1394, 18691, 53468, 12242, 111537, 38922, 18507, 85928, 79863, 86323, 98618, 31596, 97851, 5522, 57484, 118049, 77698, 87947, 55176, 8, 85091, 8116, 96190, 93202, 83663, 102053, 47026, 119867]
[2024-12-02 19:27:29.761419] user = 100528 Cloud 194/567
[2024-12-02 19:27:29.774205] user = 100528 Local 194/567
[2024-12-02 19:27:29.864548] user = 100528 Local+ 194/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:27:32.313862] user = 100528 MPDA- 194/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6790123456790123
Training on augumented user 59451 0/50 current_auc = 0.6790123456790123
User 59451 AUC after training: 0.6790123456790123
User 59451 does not improve AUC. Reverting changes.
Training on augumented user 84661 1/50 current_auc = 0.6790123456790123
User 84661 AUC after training: 0.6802469135802469
User 84661 improves AUC. Keeping the model.
Training on augumented user 96220 2/50 current_auc = 0.6802469135802469
User 96220 AUC after training: 0.6802469135802469
User 96220 does not improve AUC. Reverting changes.
Training on augumented user 114983 3/50 current_auc = 0.6802469135802469
User 114983 AUC after training: 0.6802469135802469
User 114983 does not improve AUC. Reverting changes.
Training on augumented user 10610 4/50 current_auc = 0.6802469135802469
User 10610 AUC after training: 0.6802469135802469
User 10610 does not improve AUC. Reverting changes.
Training on augumented user 77614 5/50 current_auc = 0.6802469135802469
User 77614 AUC after training: 0.6802469135802469
User 77614 does not improve AUC. Reverting changes.
Training on augumented user 60569 6/50 current_auc = 0.6802469135802469
User 60569 AUC after training: 0.6802469135802469
User 60569 does not improve AUC. Reverting changes.
Training on augumented user 33813 7/50 current_auc = 0.6802469135802469
User 33813 AUC after training: 0.6790123456790123
User 33813 does not improve AUC. Reverting changes.
Training on augumented user 51450 8/50 current_auc = 0.6802469135802469
User 51450 AUC after training: 0.6802469135802469
User 51450 does not improve AUC. Reverting changes.
Training on augumented user 62727 9/50 current_auc = 0.6802469135802469
User 62727 AUC after training: 0.6790123456790123
User 62727 does not improve AUC. Reverting changes.
Training on augumented user 44537 10/50 current_auc = 0.6802469135802469
User 44537 AUC after training: 0.6790123456790123
User 44537 does not improve AUC. Reverting changes.
Training on augumented user 44266 11/50 current_auc = 0.6802469135802469
User 44266 AUC after training: 0.6802469135802469
User 44266 does not improve AUC. Reverting changes.
Training on augumented user 110010 12/50 current_auc = 0.6802469135802469
User 110010 AUC after training: 0.6839506172839506
User 110010 improves AUC. Keeping the model.
Training on augumented user 88017 13/50 current_auc = 0.6839506172839506
User 88017 AUC after training: 0.6839506172839506
User 88017 does not improve AUC. Reverting changes.
Training on augumented user 54820 14/50 current_auc = 0.6839506172839506
User 54820 AUC after training: 0.6839506172839507
User 54820 improves AUC. Keeping the model.
Training on augumented user 104775 15/50 current_auc = 0.6839506172839507
User 104775 AUC after training: 0.6851851851851851
User 104775 improves AUC. Keeping the model.
Training on augumented user 120829 16/50 current_auc = 0.6851851851851851
User 120829 AUC after training: 0.6839506172839507
User 120829 does not improve AUC. Reverting changes.
Training on augumented user 99215 17/50 current_auc = 0.6851851851851851
User 99215 AUC after training: 0.682716049382716
User 99215 does not improve AUC. Reverting changes.
Training on augumented user 24169 18/50 current_auc = 0.6851851851851851
User 24169 AUC after training: 0.682716049382716
User 24169 does not improve AUC. Reverting changes.
Training on augumented user 136451 19/50 current_auc = 0.6851851851851851
User 136451 AUC after training: 0.6802469135802469
User 136451 does not improve AUC. Reverting changes.
Training on augumented user 31317 20/50 current_auc = 0.6851851851851851
User 31317 AUC after training: 0.6851851851851851
User 31317 does not improve AUC. Reverting changes.
Training on augumented user 121922 21/50 current_auc = 0.6851851851851851
User 121922 AUC after training: 0.6851851851851851
User 121922 does not improve AUC. Reverting changes.
Training on augumented user 1394 22/50 current_auc = 0.6851851851851851
User 1394 AUC after training: 0.6839506172839507
User 1394 does not improve AUC. Reverting changes.
Training on augumented user 18691 23/50 current_auc = 0.6851851851851851
User 18691 AUC after training: 0.6802469135802469
User 18691 does not improve AUC. Reverting changes.
Training on augumented user 53468 24/50 current_auc = 0.6851851851851851
User 53468 AUC after training: 0.6851851851851851
User 53468 does not improve AUC. Reverting changes.
Training on augumented user 12242 25/50 current_auc = 0.6851851851851851
User 12242 AUC after training: 0.6839506172839506
User 12242 does not improve AUC. Reverting changes.
Training on augumented user 111537 26/50 current_auc = 0.6851851851851851
User 111537 AUC after training: 0.682716049382716
User 111537 does not improve AUC. Reverting changes.
Training on augumented user 38922 27/50 current_auc = 0.6851851851851851
User 38922 AUC after training: 0.6839506172839506
User 38922 does not improve AUC. Reverting changes.
Training on augumented user 18507 28/50 current_auc = 0.6851851851851851
User 18507 AUC after training: 0.6839506172839506
User 18507 does not improve AUC. Reverting changes.
Training on augumented user 85928 29/50 current_auc = 0.6851851851851851
User 85928 AUC after training: 0.6814814814814816
User 85928 does not improve AUC. Reverting changes.
Training on augumented user 79863 30/50 current_auc = 0.6851851851851851
User 79863 AUC after training: 0.6814814814814816
User 79863 does not improve AUC. Reverting changes.
Training on augumented user 86323 31/50 current_auc = 0.6851851851851851
User 86323 AUC after training: 0.6802469135802469
User 86323 does not improve AUC. Reverting changes.
Training on augumented user 98618 32/50 current_auc = 0.6851851851851851
User 98618 AUC after training: 0.6839506172839506
User 98618 does not improve AUC. Reverting changes.
Training on augumented user 31596 33/50 current_auc = 0.6851851851851851
User 31596 AUC after training: 0.6790123456790124
User 31596 does not improve AUC. Reverting changes.
Training on augumented user 97851 34/50 current_auc = 0.6851851851851851
User 97851 AUC after training: 0.6851851851851851
User 97851 does not improve AUC. Reverting changes.
Training on augumented user 5522 35/50 current_auc = 0.6851851851851851
User 5522 AUC after training: 0.6839506172839507
User 5522 does not improve AUC. Reverting changes.
Training on augumented user 57484 36/50 current_auc = 0.6851851851851851
User 57484 AUC after training: 0.6839506172839507
User 57484 does not improve AUC. Reverting changes.
Training on augumented user 118049 37/50 current_auc = 0.6851851851851851
User 118049 AUC after training: 0.682716049382716
User 118049 does not improve AUC. Reverting changes.
Training on augumented user 77698 38/50 current_auc = 0.6851851851851851
User 77698 AUC after training: 0.6839506172839506
User 77698 does not improve AUC. Reverting changes.
Training on augumented user 87947 39/50 current_auc = 0.6851851851851851
User 87947 AUC after training: 0.682716049382716
User 87947 does not improve AUC. Reverting changes.
Training on augumented user 55176 40/50 current_auc = 0.6851851851851851
User 55176 AUC after training: 0.6839506172839506
User 55176 does not improve AUC. Reverting changes.
Training on augumented user 8 41/50 current_auc = 0.6851851851851851
User 8 AUC after training: 0.6851851851851851
User 8 does not improve AUC. Reverting changes.
Training on augumented user 85091 42/50 current_auc = 0.6851851851851851
User 85091 AUC after training: 0.6839506172839507
User 85091 does not improve AUC. Reverting changes.
Training on augumented user 8116 43/50 current_auc = 0.6851851851851851
User 8116 AUC after training: 0.6839506172839507
User 8116 does not improve AUC. Reverting changes.
Training on augumented user 96190 44/50 current_auc = 0.6851851851851851
User 96190 AUC after training: 0.6814814814814814
User 96190 does not improve AUC. Reverting changes.
Training on augumented user 93202 45/50 current_auc = 0.6851851851851851
User 93202 AUC after training: 0.682716049382716
User 93202 does not improve AUC. Reverting changes.
Training on augumented user 83663 46/50 current_auc = 0.6851851851851851
User 83663 AUC after training: 0.6851851851851851
User 83663 does not improve AUC. Reverting changes.
Training on augumented user 102053 47/50 current_auc = 0.6851851851851851
User 102053 AUC after training: 0.6839506172839507
User 102053 does not improve AUC. Reverting changes.
Training on augumented user 47026 48/50 current_auc = 0.6851851851851851
User 47026 AUC after training: 0.6864197530864198
User 47026 improves AUC. Keeping the model.
Training on augumented user 119867 49/50 current_auc = 0.6864197530864198
User 119867 AUC after training: 0.6851851851851851
User 119867 does not improve AUC. Reverting changes.
[2024-12-02 19:28:00.778142] start test user 100556 195/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:28:01.588349] start test user 100556 195/567 recall augumented users by random, augumented_users = [10461, 129008, 13154, 62825, 77789, 89006, 107847, 20507, 106042, 110372, 5983, 98014, 19306, 79244, 53366, 121590, 7471, 135554, 85308, 106339, 101126, 28019, 45420, 36711, 83032, 20107, 118225, 113589, 97581, 71192, 117281, 133044, 9925, 55484, 57549, 69319, 99876, 133490, 18170, 53560, 43836, 28531, 85925, 74202, 82563, 87272, 79655, 5581, 58567, 5702]
[2024-12-02 19:28:01.605586] user = 100556 Cloud 195/567
[2024-12-02 19:28:01.630313] user = 100556 Local 195/567
[2024-12-02 19:28:02.077361] user = 100556 Local+ 195/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:28:04.656788] user = 100556 MPDA- 195/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7581845238095238
Training on augumented user 10461 0/50 current_auc = 0.7581845238095238
User 10461 AUC after training: 0.7589285714285715
User 10461 improves AUC. Keeping the model.
Training on augumented user 129008 1/50 current_auc = 0.7589285714285715
User 129008 AUC after training: 0.7574404761904762
User 129008 does not improve AUC. Reverting changes.
Training on augumented user 13154 2/50 current_auc = 0.7589285714285715
User 13154 AUC after training: 0.7574404761904762
User 13154 does not improve AUC. Reverting changes.
Training on augumented user 62825 3/50 current_auc = 0.7589285714285715
User 62825 AUC after training: 0.7604166666666666
User 62825 improves AUC. Keeping the model.
Training on augumented user 77789 4/50 current_auc = 0.7604166666666666
User 77789 AUC after training: 0.7589285714285715
User 77789 does not improve AUC. Reverting changes.
Training on augumented user 89006 5/50 current_auc = 0.7604166666666666
User 89006 AUC after training: 0.7581845238095238
User 89006 does not improve AUC. Reverting changes.
Training on augumented user 107847 6/50 current_auc = 0.7604166666666666
User 107847 AUC after training: 0.761904761904762
User 107847 improves AUC. Keeping the model.
Training on augumented user 20507 7/50 current_auc = 0.761904761904762
User 20507 AUC after training: 0.761904761904762
User 20507 does not improve AUC. Reverting changes.
Training on augumented user 106042 8/50 current_auc = 0.761904761904762
User 106042 AUC after training: 0.7589285714285714
User 106042 does not improve AUC. Reverting changes.
Training on augumented user 110372 9/50 current_auc = 0.761904761904762
User 110372 AUC after training: 0.7589285714285715
User 110372 does not improve AUC. Reverting changes.
Training on augumented user 5983 10/50 current_auc = 0.761904761904762
User 5983 AUC after training: 0.7604166666666666
User 5983 does not improve AUC. Reverting changes.
Training on augumented user 98014 11/50 current_auc = 0.761904761904762
User 98014 AUC after training: 0.761904761904762
User 98014 does not improve AUC. Reverting changes.
Training on augumented user 19306 12/50 current_auc = 0.761904761904762
User 19306 AUC after training: 0.761904761904762
User 19306 does not improve AUC. Reverting changes.
Training on augumented user 79244 13/50 current_auc = 0.761904761904762
User 79244 AUC after training: 0.7574404761904762
User 79244 does not improve AUC. Reverting changes.
Training on augumented user 53366 14/50 current_auc = 0.761904761904762
User 53366 AUC after training: 0.761904761904762
User 53366 does not improve AUC. Reverting changes.
Training on augumented user 121590 15/50 current_auc = 0.761904761904762
User 121590 AUC after training: 0.761904761904762
User 121590 does not improve AUC. Reverting changes.
Training on augumented user 7471 16/50 current_auc = 0.761904761904762
User 7471 AUC after training: 0.7604166666666666
User 7471 does not improve AUC. Reverting changes.
Training on augumented user 135554 17/50 current_auc = 0.761904761904762
User 135554 AUC after training: 0.7604166666666666
User 135554 does not improve AUC. Reverting changes.
Training on augumented user 85308 18/50 current_auc = 0.761904761904762
User 85308 AUC after training: 0.761904761904762
User 85308 does not improve AUC. Reverting changes.
Training on augumented user 106339 19/50 current_auc = 0.761904761904762
User 106339 AUC after training: 0.761904761904762
User 106339 does not improve AUC. Reverting changes.
Training on augumented user 101126 20/50 current_auc = 0.761904761904762
User 101126 AUC after training: 0.761904761904762
User 101126 does not improve AUC. Reverting changes.
Training on augumented user 28019 21/50 current_auc = 0.761904761904762
User 28019 AUC after training: 0.7611607142857143
User 28019 does not improve AUC. Reverting changes.
Training on augumented user 45420 22/50 current_auc = 0.761904761904762
User 45420 AUC after training: 0.7574404761904762
User 45420 does not improve AUC. Reverting changes.
Training on augumented user 36711 23/50 current_auc = 0.761904761904762
User 36711 AUC after training: 0.761904761904762
User 36711 does not improve AUC. Reverting changes.
Training on augumented user 83032 24/50 current_auc = 0.761904761904762
User 83032 AUC after training: 0.761904761904762
User 83032 does not improve AUC. Reverting changes.
Training on augumented user 20107 25/50 current_auc = 0.761904761904762
User 20107 AUC after training: 0.761904761904762
User 20107 does not improve AUC. Reverting changes.
Training on augumented user 118225 26/50 current_auc = 0.761904761904762
User 118225 AUC after training: 0.761904761904762
User 118225 does not improve AUC. Reverting changes.
Training on augumented user 113589 27/50 current_auc = 0.761904761904762
User 113589 AUC after training: 0.7604166666666666
User 113589 does not improve AUC. Reverting changes.
Training on augumented user 97581 28/50 current_auc = 0.761904761904762
User 97581 AUC after training: 0.761904761904762
User 97581 does not improve AUC. Reverting changes.
Training on augumented user 71192 29/50 current_auc = 0.761904761904762
User 71192 AUC after training: 0.7604166666666666
User 71192 does not improve AUC. Reverting changes.
Training on augumented user 117281 30/50 current_auc = 0.761904761904762
User 117281 AUC after training: 0.761904761904762
User 117281 does not improve AUC. Reverting changes.
Training on augumented user 133044 31/50 current_auc = 0.761904761904762
User 133044 AUC after training: 0.7589285714285715
User 133044 does not improve AUC. Reverting changes.
Training on augumented user 9925 32/50 current_auc = 0.761904761904762
User 9925 AUC after training: 0.761904761904762
User 9925 does not improve AUC. Reverting changes.
Training on augumented user 55484 33/50 current_auc = 0.761904761904762
User 55484 AUC after training: 0.7604166666666666
User 55484 does not improve AUC. Reverting changes.
Training on augumented user 57549 34/50 current_auc = 0.761904761904762
User 57549 AUC after training: 0.761904761904762
User 57549 does not improve AUC. Reverting changes.
Training on augumented user 69319 35/50 current_auc = 0.761904761904762
User 69319 AUC after training: 0.7604166666666666
User 69319 does not improve AUC. Reverting changes.
Training on augumented user 99876 36/50 current_auc = 0.761904761904762
User 99876 AUC after training: 0.761904761904762
User 99876 does not improve AUC. Reverting changes.
Training on augumented user 133490 37/50 current_auc = 0.761904761904762
User 133490 AUC after training: 0.7604166666666666
User 133490 does not improve AUC. Reverting changes.
Training on augumented user 18170 38/50 current_auc = 0.761904761904762
User 18170 AUC after training: 0.7604166666666666
User 18170 does not improve AUC. Reverting changes.
Training on augumented user 53560 39/50 current_auc = 0.761904761904762
User 53560 AUC after training: 0.761904761904762
User 53560 does not improve AUC. Reverting changes.
Training on augumented user 43836 40/50 current_auc = 0.761904761904762
User 43836 AUC after training: 0.761904761904762
User 43836 does not improve AUC. Reverting changes.
Training on augumented user 28531 41/50 current_auc = 0.761904761904762
User 28531 AUC after training: 0.761904761904762
User 28531 does not improve AUC. Reverting changes.
Training on augumented user 85925 42/50 current_auc = 0.761904761904762
User 85925 AUC after training: 0.761904761904762
User 85925 does not improve AUC. Reverting changes.
Training on augumented user 74202 43/50 current_auc = 0.761904761904762
User 74202 AUC after training: 0.7604166666666666
User 74202 does not improve AUC. Reverting changes.
Training on augumented user 82563 44/50 current_auc = 0.761904761904762
User 82563 AUC after training: 0.7604166666666666
User 82563 does not improve AUC. Reverting changes.
Training on augumented user 87272 45/50 current_auc = 0.761904761904762
User 87272 AUC after training: 0.761904761904762
User 87272 does not improve AUC. Reverting changes.
Training on augumented user 79655 46/50 current_auc = 0.761904761904762
User 79655 AUC after training: 0.761904761904762
User 79655 does not improve AUC. Reverting changes.
Training on augumented user 5581 47/50 current_auc = 0.761904761904762
User 5581 AUC after training: 0.761904761904762
User 5581 does not improve AUC. Reverting changes.
Training on augumented user 58567 48/50 current_auc = 0.761904761904762
User 58567 AUC after training: 0.761904761904762
User 58567 does not improve AUC. Reverting changes.
Training on augumented user 5702 49/50 current_auc = 0.761904761904762
User 5702 AUC after training: 0.761904761904762
User 5702 does not improve AUC. Reverting changes.
[2024-12-02 19:28:38.468348] start test user 100573 196/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:28:39.399090] start test user 100573 196/567 recall augumented users by random, augumented_users = [110306, 5363, 19633, 61709, 61208, 104056, 58149, 21016, 91524, 67132, 10830, 33519, 60428, 138001, 64529, 97139, 90210, 51046, 51948, 19508, 29027, 31629, 110732, 109623, 100010, 92689, 90888, 116706, 37999, 71483, 84377, 124928, 125787, 7836, 81301, 124728, 62163, 46986, 94404, 135102, 68688, 43346, 34006, 93285, 106473, 135193, 66911, 47466, 89439, 52877]
[2024-12-02 19:28:39.462626] user = 100573 Cloud 196/567
[2024-12-02 19:28:39.475360] user = 100573 Local 196/567
[2024-12-02 19:28:39.569478] user = 100573 Local+ 196/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:28:42.389674] user = 100573 MPDA- 196/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6836444805194806
Training on augumented user 110306 0/50 current_auc = 0.6836444805194806
User 110306 AUC after training: 0.6840503246753247
User 110306 improves AUC. Keeping the model.
Training on augumented user 5363 1/50 current_auc = 0.6840503246753247
User 5363 AUC after training: 0.6836444805194806
User 5363 does not improve AUC. Reverting changes.
Training on augumented user 19633 2/50 current_auc = 0.6840503246753247
User 19633 AUC after training: 0.6840503246753247
User 19633 does not improve AUC. Reverting changes.
Training on augumented user 61709 3/50 current_auc = 0.6840503246753247
User 61709 AUC after training: 0.6828327922077921
User 61709 does not improve AUC. Reverting changes.
Training on augumented user 61208 4/50 current_auc = 0.6840503246753247
User 61208 AUC after training: 0.6820211038961039
User 61208 does not improve AUC. Reverting changes.
Training on augumented user 104056 5/50 current_auc = 0.6840503246753247
User 104056 AUC after training: 0.6836444805194806
User 104056 does not improve AUC. Reverting changes.
Training on augumented user 58149 6/50 current_auc = 0.6840503246753247
User 58149 AUC after training: 0.6832386363636362
User 58149 does not improve AUC. Reverting changes.
Training on augumented user 21016 7/50 current_auc = 0.6840503246753247
User 21016 AUC after training: 0.6816152597402597
User 21016 does not improve AUC. Reverting changes.
Training on augumented user 91524 8/50 current_auc = 0.6840503246753247
User 91524 AUC after training: 0.6836444805194805
User 91524 does not improve AUC. Reverting changes.
Training on augumented user 67132 9/50 current_auc = 0.6840503246753247
User 67132 AUC after training: 0.6840503246753247
User 67132 does not improve AUC. Reverting changes.
Training on augumented user 10830 10/50 current_auc = 0.6840503246753247
User 10830 AUC after training: 0.6836444805194806
User 10830 does not improve AUC. Reverting changes.
Training on augumented user 33519 11/50 current_auc = 0.6840503246753247
User 33519 AUC after training: 0.6836444805194806
User 33519 does not improve AUC. Reverting changes.
Training on augumented user 60428 12/50 current_auc = 0.6840503246753247
User 60428 AUC after training: 0.6828327922077921
User 60428 does not improve AUC. Reverting changes.
Training on augumented user 138001 13/50 current_auc = 0.6840503246753247
User 138001 AUC after training: 0.6836444805194806
User 138001 does not improve AUC. Reverting changes.
Training on augumented user 64529 14/50 current_auc = 0.6840503246753247
User 64529 AUC after training: 0.6840503246753247
User 64529 does not improve AUC. Reverting changes.
Training on augumented user 97139 15/50 current_auc = 0.6840503246753247
User 97139 AUC after training: 0.6828327922077922
User 97139 does not improve AUC. Reverting changes.
Training on augumented user 90210 16/50 current_auc = 0.6840503246753247
User 90210 AUC after training: 0.6832386363636365
User 90210 does not improve AUC. Reverting changes.
Training on augumented user 51046 17/50 current_auc = 0.6840503246753247
User 51046 AUC after training: 0.682426948051948
User 51046 does not improve AUC. Reverting changes.
Training on augumented user 51948 18/50 current_auc = 0.6840503246753247
User 51948 AUC after training: 0.6840503246753247
User 51948 does not improve AUC. Reverting changes.
Training on augumented user 19508 19/50 current_auc = 0.6840503246753247
User 19508 AUC after training: 0.6840503246753247
User 19508 does not improve AUC. Reverting changes.
Training on augumented user 29027 20/50 current_auc = 0.6840503246753247
User 29027 AUC after training: 0.6840503246753247
User 29027 does not improve AUC. Reverting changes.
Training on augumented user 31629 21/50 current_auc = 0.6840503246753247
User 31629 AUC after training: 0.6836444805194806
User 31629 does not improve AUC. Reverting changes.
Training on augumented user 110732 22/50 current_auc = 0.6840503246753247
User 110732 AUC after training: 0.6836444805194806
User 110732 does not improve AUC. Reverting changes.
Training on augumented user 109623 23/50 current_auc = 0.6840503246753247
User 109623 AUC after training: 0.6844561688311688
User 109623 improves AUC. Keeping the model.
Training on augumented user 100010 24/50 current_auc = 0.6844561688311688
User 100010 AUC after training: 0.6836444805194806
User 100010 does not improve AUC. Reverting changes.
Training on augumented user 92689 25/50 current_auc = 0.6844561688311688
User 92689 AUC after training: 0.6856737012987014
User 92689 improves AUC. Keeping the model.
Training on augumented user 90888 26/50 current_auc = 0.6856737012987014
User 90888 AUC after training: 0.6864853896103896
User 90888 improves AUC. Keeping the model.
Training on augumented user 116706 27/50 current_auc = 0.6864853896103896
User 116706 AUC after training: 0.684862012987013
User 116706 does not improve AUC. Reverting changes.
Training on augumented user 37999 28/50 current_auc = 0.6864853896103896
User 37999 AUC after training: 0.6820211038961038
User 37999 does not improve AUC. Reverting changes.
Training on augumented user 71483 29/50 current_auc = 0.6864853896103896
User 71483 AUC after training: 0.6858766233766234
User 71483 does not improve AUC. Reverting changes.
Training on augumented user 84377 30/50 current_auc = 0.6864853896103896
User 84377 AUC after training: 0.6836444805194806
User 84377 does not improve AUC. Reverting changes.
Training on augumented user 124928 31/50 current_auc = 0.6864853896103896
User 124928 AUC after training: 0.6856737012987013
User 124928 does not improve AUC. Reverting changes.
Training on augumented user 125787 32/50 current_auc = 0.6864853896103896
User 125787 AUC after training: 0.685064935064935
User 125787 does not improve AUC. Reverting changes.
Training on augumented user 7836 33/50 current_auc = 0.6864853896103896
User 7836 AUC after training: 0.6806006493506493
User 7836 does not improve AUC. Reverting changes.
Training on augumented user 81301 34/50 current_auc = 0.6864853896103896
User 81301 AUC after training: 0.6856737012987013
User 81301 does not improve AUC. Reverting changes.
Training on augumented user 124728 35/50 current_auc = 0.6864853896103896
User 124728 AUC after training: 0.6854707792207793
User 124728 does not improve AUC. Reverting changes.
Training on augumented user 62163 36/50 current_auc = 0.6864853896103896
User 62163 AUC after training: 0.6864853896103896
User 62163 does not improve AUC. Reverting changes.
Training on augumented user 46986 37/50 current_auc = 0.6864853896103896
User 46986 AUC after training: 0.6858766233766234
User 46986 does not improve AUC. Reverting changes.
Training on augumented user 94404 38/50 current_auc = 0.6864853896103896
User 94404 AUC after training: 0.6856737012987013
User 94404 does not improve AUC. Reverting changes.
Training on augumented user 135102 39/50 current_auc = 0.6864853896103896
User 135102 AUC after training: 0.6810064935064934
User 135102 does not improve AUC. Reverting changes.
Training on augumented user 68688 40/50 current_auc = 0.6864853896103896
User 68688 AUC after training: 0.6860795454545454
User 68688 does not improve AUC. Reverting changes.
Training on augumented user 43346 41/50 current_auc = 0.6864853896103896
User 43346 AUC after training: 0.6856737012987013
User 43346 does not improve AUC. Reverting changes.
Training on augumented user 34006 42/50 current_auc = 0.6864853896103896
User 34006 AUC after training: 0.684862012987013
User 34006 does not improve AUC. Reverting changes.
Training on augumented user 93285 43/50 current_auc = 0.6864853896103896
User 93285 AUC after training: 0.6844561688311688
User 93285 does not improve AUC. Reverting changes.
Training on augumented user 106473 44/50 current_auc = 0.6864853896103896
User 106473 AUC after training: 0.6854707792207791
User 106473 does not improve AUC. Reverting changes.
Training on augumented user 135193 45/50 current_auc = 0.6864853896103896
User 135193 AUC after training: 0.6858766233766234
User 135193 does not improve AUC. Reverting changes.
Training on augumented user 66911 46/50 current_auc = 0.6864853896103896
User 66911 AUC after training: 0.684862012987013
User 66911 does not improve AUC. Reverting changes.
Training on augumented user 47466 47/50 current_auc = 0.6864853896103896
User 47466 AUC after training: 0.684862012987013
User 47466 does not improve AUC. Reverting changes.
Training on augumented user 89439 48/50 current_auc = 0.6864853896103896
User 89439 AUC after training: 0.687297077922078
User 89439 improves AUC. Keeping the model.
Training on augumented user 52877 49/50 current_auc = 0.687297077922078
User 52877 AUC after training: 0.6879058441558441
User 52877 improves AUC. Keeping the model.
[2024-12-02 19:29:10.877381] start test user 100575 197/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:29:11.374433] start test user 100575 197/567 recall augumented users by random, augumented_users = [34730, 41382, 58245, 94019, 130077, 129952, 12399, 102701, 120943, 64929, 118356, 68104, 14006, 13201, 11919, 52465, 124144, 110012, 53471, 127742, 34171, 3103, 74802, 94846, 134303, 17082, 74984, 74276, 124764, 91574, 104731, 40489, 70943, 72040, 24027, 111388, 54804, 38430, 48330, 115702, 13900, 114328, 88338, 6845, 4046, 23230, 50050, 134976, 67160, 79143]
[2024-12-02 19:29:11.390224] user = 100575 Cloud 197/567
[2024-12-02 19:29:11.401550] user = 100575 Local 197/567
[2024-12-02 19:29:11.484501] user = 100575 Local+ 197/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:29:14.471580] user = 100575 MPDA- 197/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5824175824175825
Training on augumented user 34730 0/50 current_auc = 0.5824175824175825
User 34730 AUC after training: 0.5824175824175825
User 34730 does not improve AUC. Reverting changes.
Training on augumented user 41382 1/50 current_auc = 0.5824175824175825
User 41382 AUC after training: 0.5824175824175825
User 41382 does not improve AUC. Reverting changes.
Training on augumented user 58245 2/50 current_auc = 0.5824175824175825
User 58245 AUC after training: 0.5810439560439561
User 58245 does not improve AUC. Reverting changes.
Training on augumented user 94019 3/50 current_auc = 0.5824175824175825
User 94019 AUC after training: 0.5824175824175825
User 94019 does not improve AUC. Reverting changes.
Training on augumented user 130077 4/50 current_auc = 0.5824175824175825
User 130077 AUC after training: 0.5824175824175825
User 130077 does not improve AUC. Reverting changes.
Training on augumented user 129952 5/50 current_auc = 0.5824175824175825
User 129952 AUC after training: 0.5851648351648352
User 129952 improves AUC. Keeping the model.
Training on augumented user 12399 6/50 current_auc = 0.5851648351648352
User 12399 AUC after training: 0.5851648351648352
User 12399 does not improve AUC. Reverting changes.
Training on augumented user 102701 7/50 current_auc = 0.5851648351648352
User 102701 AUC after training: 0.5810439560439561
User 102701 does not improve AUC. Reverting changes.
Training on augumented user 120943 8/50 current_auc = 0.5851648351648352
User 120943 AUC after training: 0.5851648351648352
User 120943 does not improve AUC. Reverting changes.
Training on augumented user 64929 9/50 current_auc = 0.5851648351648352
User 64929 AUC after training: 0.5837912087912088
User 64929 does not improve AUC. Reverting changes.
Training on augumented user 118356 10/50 current_auc = 0.5851648351648352
User 118356 AUC after training: 0.5837912087912088
User 118356 does not improve AUC. Reverting changes.
Training on augumented user 68104 11/50 current_auc = 0.5851648351648352
User 68104 AUC after training: 0.5824175824175823
User 68104 does not improve AUC. Reverting changes.
Training on augumented user 14006 12/50 current_auc = 0.5851648351648352
User 14006 AUC after training: 0.5837912087912087
User 14006 does not improve AUC. Reverting changes.
Training on augumented user 13201 13/50 current_auc = 0.5851648351648352
User 13201 AUC after training: 0.581043956043956
User 13201 does not improve AUC. Reverting changes.
Training on augumented user 11919 14/50 current_auc = 0.5851648351648352
User 11919 AUC after training: 0.5879120879120879
User 11919 improves AUC. Keeping the model.
Training on augumented user 52465 15/50 current_auc = 0.5879120879120879
User 52465 AUC after training: 0.5837912087912088
User 52465 does not improve AUC. Reverting changes.
Training on augumented user 124144 16/50 current_auc = 0.5879120879120879
User 124144 AUC after training: 0.5810439560439561
User 124144 does not improve AUC. Reverting changes.
Training on augumented user 110012 17/50 current_auc = 0.5879120879120879
User 110012 AUC after training: 0.581043956043956
User 110012 does not improve AUC. Reverting changes.
Training on augumented user 53471 18/50 current_auc = 0.5879120879120879
User 53471 AUC after training: 0.5837912087912088
User 53471 does not improve AUC. Reverting changes.
Training on augumented user 127742 19/50 current_auc = 0.5879120879120879
User 127742 AUC after training: 0.5837912087912088
User 127742 does not improve AUC. Reverting changes.
Training on augumented user 34171 20/50 current_auc = 0.5879120879120879
User 34171 AUC after training: 0.5810439560439561
User 34171 does not improve AUC. Reverting changes.
Training on augumented user 3103 21/50 current_auc = 0.5879120879120879
User 3103 AUC after training: 0.5824175824175825
User 3103 does not improve AUC. Reverting changes.
Training on augumented user 74802 22/50 current_auc = 0.5879120879120879
User 74802 AUC after training: 0.5851648351648352
User 74802 does not improve AUC. Reverting changes.
Training on augumented user 94846 23/50 current_auc = 0.5879120879120879
User 94846 AUC after training: 0.5865384615384616
User 94846 does not improve AUC. Reverting changes.
Training on augumented user 134303 24/50 current_auc = 0.5879120879120879
User 134303 AUC after training: 0.5879120879120879
User 134303 does not improve AUC. Reverting changes.
Training on augumented user 17082 25/50 current_auc = 0.5879120879120879
User 17082 AUC after training: 0.5879120879120879
User 17082 does not improve AUC. Reverting changes.
Training on augumented user 74984 26/50 current_auc = 0.5879120879120879
User 74984 AUC after training: 0.5879120879120879
User 74984 does not improve AUC. Reverting changes.
Training on augumented user 74276 27/50 current_auc = 0.5879120879120879
User 74276 AUC after training: 0.5865384615384616
User 74276 does not improve AUC. Reverting changes.
Training on augumented user 124764 28/50 current_auc = 0.5879120879120879
User 124764 AUC after training: 0.5824175824175825
User 124764 does not improve AUC. Reverting changes.
Training on augumented user 91574 29/50 current_auc = 0.5879120879120879
User 91574 AUC after training: 0.5837912087912088
User 91574 does not improve AUC. Reverting changes.
Training on augumented user 104731 30/50 current_auc = 0.5879120879120879
User 104731 AUC after training: 0.5851648351648352
User 104731 does not improve AUC. Reverting changes.
Training on augumented user 40489 31/50 current_auc = 0.5879120879120879
User 40489 AUC after training: 0.5837912087912088
User 40489 does not improve AUC. Reverting changes.
Training on augumented user 70943 32/50 current_auc = 0.5879120879120879
User 70943 AUC after training: 0.5824175824175825
User 70943 does not improve AUC. Reverting changes.
Training on augumented user 72040 33/50 current_auc = 0.5879120879120879
User 72040 AUC after training: 0.5851648351648352
User 72040 does not improve AUC. Reverting changes.
Training on augumented user 24027 34/50 current_auc = 0.5879120879120879
User 24027 AUC after training: 0.5892857142857143
User 24027 improves AUC. Keeping the model.
Training on augumented user 111388 35/50 current_auc = 0.5892857142857143
User 111388 AUC after training: 0.592032967032967
User 111388 improves AUC. Keeping the model.
Training on augumented user 54804 36/50 current_auc = 0.592032967032967
User 54804 AUC after training: 0.5906593406593407
User 54804 does not improve AUC. Reverting changes.
Training on augumented user 38430 37/50 current_auc = 0.592032967032967
User 38430 AUC after training: 0.5892857142857143
User 38430 does not improve AUC. Reverting changes.
Training on augumented user 48330 38/50 current_auc = 0.592032967032967
User 48330 AUC after training: 0.5892857142857143
User 48330 does not improve AUC. Reverting changes.
Training on augumented user 115702 39/50 current_auc = 0.592032967032967
User 115702 AUC after training: 0.5879120879120879
User 115702 does not improve AUC. Reverting changes.
Training on augumented user 13900 40/50 current_auc = 0.592032967032967
User 13900 AUC after training: 0.592032967032967
User 13900 does not improve AUC. Reverting changes.
Training on augumented user 114328 41/50 current_auc = 0.592032967032967
User 114328 AUC after training: 0.592032967032967
User 114328 does not improve AUC. Reverting changes.
Training on augumented user 88338 42/50 current_auc = 0.592032967032967
User 88338 AUC after training: 0.592032967032967
User 88338 does not improve AUC. Reverting changes.
Training on augumented user 6845 43/50 current_auc = 0.592032967032967
User 6845 AUC after training: 0.5865384615384616
User 6845 does not improve AUC. Reverting changes.
Training on augumented user 4046 44/50 current_auc = 0.592032967032967
User 4046 AUC after training: 0.5892857142857143
User 4046 does not improve AUC. Reverting changes.
Training on augumented user 23230 45/50 current_auc = 0.592032967032967
User 23230 AUC after training: 0.5934065934065934
User 23230 improves AUC. Keeping the model.
Training on augumented user 50050 46/50 current_auc = 0.5934065934065934
User 50050 AUC after training: 0.5892857142857143
User 50050 does not improve AUC. Reverting changes.
Training on augumented user 134976 47/50 current_auc = 0.5934065934065934
User 134976 AUC after training: 0.592032967032967
User 134976 does not improve AUC. Reverting changes.
Training on augumented user 67160 48/50 current_auc = 0.5934065934065934
User 67160 AUC after training: 0.5947802197802198
User 67160 improves AUC. Keeping the model.
Training on augumented user 79143 49/50 current_auc = 0.5947802197802198
User 79143 AUC after training: 0.592032967032967
User 79143 does not improve AUC. Reverting changes.
[2024-12-02 19:29:47.030267] start test user 100596 198/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:29:47.635771] start test user 100596 198/567 recall augumented users by random, augumented_users = [114833, 8145, 76400, 103340, 91637, 29755, 4889, 66373, 112920, 8049, 54438, 113544, 71711, 98465, 7956, 90451, 94059, 66370, 2787, 126957, 532, 47071, 302, 2042, 15013, 120022, 113002, 41371, 27056, 42467, 80652, 92051, 131302, 6394, 76649, 14208, 24566, 61721, 75988, 100083, 68574, 133476, 117370, 51059, 120426, 31721, 37960, 50387, 79921, 73707]
[2024-12-02 19:29:47.652392] user = 100596 Cloud 198/567
[2024-12-02 19:29:47.724696] user = 100596 Local 198/567
[2024-12-02 19:29:47.821745] user = 100596 Local+ 198/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:29:49.969307] user = 100596 MPDA- 198/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6836696928134456
Training on augumented user 114833 0/50 current_auc = 0.6836696928134456
User 114833 AUC after training: 0.6837567761739926
User 114833 improves AUC. Keeping the model.
Training on augumented user 8145 1/50 current_auc = 0.6837567761739926
User 8145 AUC after training: 0.683680578233514
User 8145 does not improve AUC. Reverting changes.
Training on augumented user 76400 2/50 current_auc = 0.6837567761739926
User 76400 AUC after training: 0.6842683909172056
User 76400 improves AUC. Keeping the model.
Training on augumented user 103340 3/50 current_auc = 0.6842683909172056
User 103340 AUC after training: 0.6833866718916684
User 103340 does not improve AUC. Reverting changes.
Training on augumented user 91637 4/50 current_auc = 0.6842683909172056
User 91637 AUC after training: 0.6842139638168637
User 91637 does not improve AUC. Reverting changes.
Training on augumented user 29755 5/50 current_auc = 0.6842683909172056
User 29755 AUC after training: 0.6841051096161801
User 29755 does not improve AUC. Reverting changes.
Training on augumented user 4889 6/50 current_auc = 0.6842683909172056
User 4889 AUC after training: 0.684192192976727
User 4889 does not improve AUC. Reverting changes.
Training on augumented user 66373 7/50 current_auc = 0.6842683909172056
User 66373 AUC after training: 0.6840615679359068
User 66373 does not improve AUC. Reverting changes.
Training on augumented user 112920 8/50 current_auc = 0.6842683909172056
User 112920 AUC after training: 0.6843337034376156
User 112920 improves AUC. Keeping the model.
Training on augumented user 8049 9/50 current_auc = 0.6843337034376156
User 8049 AUC after training: 0.683952713735223
User 8049 does not improve AUC. Reverting changes.
Training on augumented user 54438 10/50 current_auc = 0.6843337034376156
User 54438 AUC after training: 0.684224849236932
User 54438 does not improve AUC. Reverting changes.
Training on augumented user 113544 11/50 current_auc = 0.6843337034376156
User 113544 AUC after training: 0.6841704221365903
User 113544 does not improve AUC. Reverting changes.
Training on augumented user 71711 12/50 current_auc = 0.6843337034376156
User 71711 AUC after training: 0.6841051096161801
User 71711 does not improve AUC. Reverting changes.
Training on augumented user 98465 13/50 current_auc = 0.6843337034376156
User 98465 AUC after training: 0.6841268804563169
User 98465 does not improve AUC. Reverting changes.
Training on augumented user 7956 14/50 current_auc = 0.6843337034376156
User 7956 AUC after training: 0.6833431302113949
User 7956 does not improve AUC. Reverting changes.
Training on augumented user 90451 15/50 current_auc = 0.6843337034376156
User 90451 AUC after training: 0.6841704221365903
User 90451 does not improve AUC. Reverting changes.
Training on augumented user 94059 16/50 current_auc = 0.6843337034376156
User 94059 AUC after training: 0.6842575054971372
User 94059 does not improve AUC. Reverting changes.
Training on augumented user 66370 17/50 current_auc = 0.6843337034376156
User 66370 AUC after training: 0.6835390677726254
User 66370 does not improve AUC. Reverting changes.
Training on augumented user 2787 18/50 current_auc = 0.6843337034376156
User 2787 AUC after training: 0.6839962554154965
User 2787 does not improve AUC. Reverting changes.
Training on augumented user 126957 19/50 current_auc = 0.6843337034376156
User 126957 AUC after training: 0.6841595367165219
User 126957 does not improve AUC. Reverting changes.
Training on augumented user 532 20/50 current_auc = 0.6843337034376156
User 532 AUC after training: 0.6842139638168637
User 532 does not improve AUC. Reverting changes.
Training on augumented user 47071 21/50 current_auc = 0.6843337034376156
User 47071 AUC after training: 0.6838656303746762
User 47071 does not improve AUC. Reverting changes.
Training on augumented user 302 22/50 current_auc = 0.6843337034376156
User 302 AUC after training: 0.6838329741144711
User 302 does not improve AUC. Reverting changes.
Training on augumented user 2042 23/50 current_auc = 0.6843337034376156
User 2042 AUC after training: 0.6841704221365903
User 2042 does not improve AUC. Reverting changes.
Training on augumented user 15013 24/50 current_auc = 0.6843337034376156
User 15013 AUC after training: 0.6828315154681819
User 15013 does not improve AUC. Reverting changes.
Training on augumented user 120022 25/50 current_auc = 0.6843337034376156
User 120022 AUC after training: 0.684192192976727
User 120022 does not improve AUC. Reverting changes.
Training on augumented user 113002 26/50 current_auc = 0.6843337034376156
User 113002 AUC after training: 0.683408442731805
User 113002 does not improve AUC. Reverting changes.
Training on augumented user 41371 27/50 current_auc = 0.6843337034376156
User 41371 AUC after training: 0.6841486512964535
User 41371 does not improve AUC. Reverting changes.
Training on augumented user 27056 28/50 current_auc = 0.6843337034376156
User 27056 AUC after training: 0.6840397970957699
User 27056 does not improve AUC. Reverting changes.
Training on augumented user 42467 29/50 current_auc = 0.6843337034376156
User 42467 AUC after training: 0.6839744845753597
User 42467 does not improve AUC. Reverting changes.
Training on augumented user 80652 30/50 current_auc = 0.6843337034376156
User 80652 AUC after training: 0.6843010471774107
User 80652 does not improve AUC. Reverting changes.
Training on augumented user 92051 31/50 current_auc = 0.6843337034376156
User 92051 AUC after training: 0.6836043802930355
User 92051 does not improve AUC. Reverting changes.
Training on augumented user 131302 32/50 current_auc = 0.6843337034376156
User 131302 AUC after training: 0.6839962554154966
User 131302 does not improve AUC. Reverting changes.
Training on augumented user 6394 33/50 current_auc = 0.6843337034376156
User 6394 AUC after training: 0.6841704221365903
User 6394 does not improve AUC. Reverting changes.
Training on augumented user 76649 34/50 current_auc = 0.6843337034376156
User 76649 AUC after training: 0.6842357346570005
User 76649 does not improve AUC. Reverting changes.
Training on augumented user 14208 35/50 current_auc = 0.6843337034376156
User 14208 AUC after training: 0.6839962554154966
User 14208 does not improve AUC. Reverting changes.
Training on augumented user 24566 36/50 current_auc = 0.6843337034376156
User 24566 AUC after training: 0.6839309428950864
User 24566 does not improve AUC. Reverting changes.
Training on augumented user 61721 37/50 current_auc = 0.6843337034376156
User 61721 AUC after training: 0.6837567761739926
User 61721 does not improve AUC. Reverting changes.
Training on augumented user 75988 38/50 current_auc = 0.6843337034376156
User 75988 AUC after training: 0.6839962554154965
User 75988 does not improve AUC. Reverting changes.
Training on augumented user 100083 39/50 current_auc = 0.6843337034376156
User 100083 AUC after training: 0.6840397970957699
User 100083 does not improve AUC. Reverting changes.
Training on augumented user 68574 40/50 current_auc = 0.6843337034376156
User 68574 AUC after training: 0.6841813075566586
User 68574 does not improve AUC. Reverting changes.
Training on augumented user 133476 41/50 current_auc = 0.6843337034376156
User 133476 AUC after training: 0.6840833387760433
User 133476 does not improve AUC. Reverting changes.
Training on augumented user 117370 42/50 current_auc = 0.6843337034376156
User 117370 AUC after training: 0.6841486512964535
User 117370 does not improve AUC. Reverting changes.
Training on augumented user 51059 43/50 current_auc = 0.6843337034376156
User 51059 AUC after training: 0.6840615679359068
User 51059 does not improve AUC. Reverting changes.
Training on augumented user 120426 44/50 current_auc = 0.6843337034376156
User 120426 AUC after training: 0.6838874012148128
User 120426 does not improve AUC. Reverting changes.
Training on augumented user 31721 45/50 current_auc = 0.6843337034376156
User 31721 AUC after training: 0.6837567761739927
User 31721 does not improve AUC. Reverting changes.
Training on augumented user 37960 46/50 current_auc = 0.6843337034376156
User 37960 AUC after training: 0.6841486512964535
User 37960 does not improve AUC. Reverting changes.
Training on augumented user 50387 47/50 current_auc = 0.6843337034376156
User 50387 AUC after training: 0.6842357346570004
User 50387 does not improve AUC. Reverting changes.
Training on augumented user 79921 48/50 current_auc = 0.6843337034376156
User 79921 AUC after training: 0.6841595367165219
User 79921 does not improve AUC. Reverting changes.
Training on augumented user 73707 49/50 current_auc = 0.6843337034376156
User 73707 AUC after training: 0.6840397970957699
User 73707 does not improve AUC. Reverting changes.
[2024-12-02 19:30:19.087915] start test user 100635 199/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:30:19.971687] start test user 100635 199/567 recall augumented users by random, augumented_users = [59026, 59454, 131610, 58096, 72932, 118609, 73908, 35413, 111571, 38797, 3502, 106119, 130254, 39276, 43200, 121077, 96906, 8993, 116406, 127752, 5818, 107359, 62047, 80279, 9471, 134606, 108275, 128478, 26593, 33891, 34523, 66452, 24360, 71953, 87073, 57298, 16235, 117495, 44260, 76663, 90304, 112529, 61751, 75142, 70110, 40188, 126031, 110328, 128383, 132957]
[2024-12-02 19:30:19.987522] user = 100635 Cloud 199/567
[2024-12-02 19:30:20.011151] user = 100635 Local 199/567
[2024-12-02 19:30:20.138451] user = 100635 Local+ 199/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:30:22.761152] user = 100635 MPDA- 199/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.47009803921568627
Training on augumented user 59026 0/50 current_auc = 0.47009803921568627
User 59026 AUC after training: 0.47107843137254907
User 59026 improves AUC. Keeping the model.
Training on augumented user 59454 1/50 current_auc = 0.47107843137254907
User 59454 AUC after training: 0.46887254901960784
User 59454 does not improve AUC. Reverting changes.
Training on augumented user 131610 2/50 current_auc = 0.47107843137254907
User 131610 AUC after training: 0.4713235294117647
User 131610 improves AUC. Keeping the model.
Training on augumented user 58096 3/50 current_auc = 0.4713235294117647
User 58096 AUC after training: 0.47205882352941175
User 58096 improves AUC. Keeping the model.
Training on augumented user 72932 4/50 current_auc = 0.47205882352941175
User 72932 AUC after training: 0.4718137254901961
User 72932 does not improve AUC. Reverting changes.
Training on augumented user 118609 5/50 current_auc = 0.47205882352941175
User 118609 AUC after training: 0.47230392156862744
User 118609 improves AUC. Keeping the model.
Training on augumented user 73908 6/50 current_auc = 0.47230392156862744
User 73908 AUC after training: 0.47058823529411764
User 73908 does not improve AUC. Reverting changes.
Training on augumented user 35413 7/50 current_auc = 0.47230392156862744
User 35413 AUC after training: 0.4718137254901961
User 35413 does not improve AUC. Reverting changes.
Training on augumented user 111571 8/50 current_auc = 0.47230392156862744
User 111571 AUC after training: 0.4708333333333333
User 111571 does not improve AUC. Reverting changes.
Training on augumented user 38797 9/50 current_auc = 0.47230392156862744
User 38797 AUC after training: 0.4708333333333333
User 38797 does not improve AUC. Reverting changes.
Training on augumented user 3502 10/50 current_auc = 0.47230392156862744
User 3502 AUC after training: 0.4713235294117647
User 3502 does not improve AUC. Reverting changes.
Training on augumented user 106119 11/50 current_auc = 0.47230392156862744
User 106119 AUC after training: 0.4708333333333333
User 106119 does not improve AUC. Reverting changes.
Training on augumented user 130254 12/50 current_auc = 0.47230392156862744
User 130254 AUC after training: 0.4713235294117647
User 130254 does not improve AUC. Reverting changes.
Training on augumented user 39276 13/50 current_auc = 0.47230392156862744
User 39276 AUC after training: 0.4725490196078431
User 39276 improves AUC. Keeping the model.
Training on augumented user 43200 14/50 current_auc = 0.4725490196078431
User 43200 AUC after training: 0.4725490196078431
User 43200 does not improve AUC. Reverting changes.
Training on augumented user 121077 15/50 current_auc = 0.4725490196078431
User 121077 AUC after training: 0.47230392156862744
User 121077 does not improve AUC. Reverting changes.
Training on augumented user 96906 16/50 current_auc = 0.4725490196078431
User 96906 AUC after training: 0.47132352941176475
User 96906 does not improve AUC. Reverting changes.
Training on augumented user 8993 17/50 current_auc = 0.4725490196078431
User 8993 AUC after training: 0.4723039215686275
User 8993 does not improve AUC. Reverting changes.
Training on augumented user 116406 18/50 current_auc = 0.4725490196078431
User 116406 AUC after training: 0.471078431372549
User 116406 does not improve AUC. Reverting changes.
Training on augumented user 127752 19/50 current_auc = 0.4725490196078431
User 127752 AUC after training: 0.47058823529411764
User 127752 does not improve AUC. Reverting changes.
Training on augumented user 5818 20/50 current_auc = 0.4725490196078431
User 5818 AUC after training: 0.47230392156862744
User 5818 does not improve AUC. Reverting changes.
Training on augumented user 107359 21/50 current_auc = 0.4725490196078431
User 107359 AUC after training: 0.47181372549019607
User 107359 does not improve AUC. Reverting changes.
Training on augumented user 62047 22/50 current_auc = 0.4725490196078431
User 62047 AUC after training: 0.4715686274509804
User 62047 does not improve AUC. Reverting changes.
Training on augumented user 80279 23/50 current_auc = 0.4725490196078431
User 80279 AUC after training: 0.47205882352941175
User 80279 does not improve AUC. Reverting changes.
Training on augumented user 9471 24/50 current_auc = 0.4725490196078431
User 9471 AUC after training: 0.46911764705882353
User 9471 does not improve AUC. Reverting changes.
Training on augumented user 134606 25/50 current_auc = 0.4725490196078431
User 134606 AUC after training: 0.471078431372549
User 134606 does not improve AUC. Reverting changes.
Training on augumented user 108275 26/50 current_auc = 0.4725490196078431
User 108275 AUC after training: 0.47181372549019607
User 108275 does not improve AUC. Reverting changes.
Training on augumented user 128478 27/50 current_auc = 0.4725490196078431
User 128478 AUC after training: 0.4715686274509804
User 128478 does not improve AUC. Reverting changes.
Training on augumented user 26593 28/50 current_auc = 0.4725490196078431
User 26593 AUC after training: 0.47034313725490196
User 26593 does not improve AUC. Reverting changes.
Training on augumented user 33891 29/50 current_auc = 0.4725490196078431
User 33891 AUC after training: 0.47205882352941175
User 33891 does not improve AUC. Reverting changes.
Training on augumented user 34523 30/50 current_auc = 0.4725490196078431
User 34523 AUC after training: 0.4723039215686275
User 34523 does not improve AUC. Reverting changes.
Training on augumented user 66452 31/50 current_auc = 0.4725490196078431
User 66452 AUC after training: 0.47156862745098044
User 66452 does not improve AUC. Reverting changes.
Training on augumented user 24360 32/50 current_auc = 0.4725490196078431
User 24360 AUC after training: 0.47205882352941175
User 24360 does not improve AUC. Reverting changes.
Training on augumented user 71953 33/50 current_auc = 0.4725490196078431
User 71953 AUC after training: 0.4696078431372549
User 71953 does not improve AUC. Reverting changes.
Training on augumented user 87073 34/50 current_auc = 0.4725490196078431
User 87073 AUC after training: 0.47181372549019607
User 87073 does not improve AUC. Reverting changes.
Training on augumented user 57298 35/50 current_auc = 0.4725490196078431
User 57298 AUC after training: 0.4715686274509804
User 57298 does not improve AUC. Reverting changes.
Training on augumented user 16235 36/50 current_auc = 0.4725490196078431
User 16235 AUC after training: 0.4708333333333333
User 16235 does not improve AUC. Reverting changes.
Training on augumented user 117495 37/50 current_auc = 0.4725490196078431
User 117495 AUC after training: 0.46887254901960784
User 117495 does not improve AUC. Reverting changes.
Training on augumented user 44260 38/50 current_auc = 0.4725490196078431
User 44260 AUC after training: 0.4723039215686275
User 44260 does not improve AUC. Reverting changes.
Training on augumented user 76663 39/50 current_auc = 0.4725490196078431
User 76663 AUC after training: 0.4715686274509804
User 76663 does not improve AUC. Reverting changes.
Training on augumented user 90304 40/50 current_auc = 0.4725490196078431
User 90304 AUC after training: 0.47107843137254907
User 90304 does not improve AUC. Reverting changes.
Training on augumented user 112529 41/50 current_auc = 0.4725490196078431
User 112529 AUC after training: 0.47034313725490196
User 112529 does not improve AUC. Reverting changes.
Training on augumented user 61751 42/50 current_auc = 0.4725490196078431
User 61751 AUC after training: 0.47230392156862744
User 61751 does not improve AUC. Reverting changes.
Training on augumented user 75142 43/50 current_auc = 0.4725490196078431
User 75142 AUC after training: 0.4715686274509804
User 75142 does not improve AUC. Reverting changes.
Training on augumented user 70110 44/50 current_auc = 0.4725490196078431
User 70110 AUC after training: 0.4723039215686275
User 70110 does not improve AUC. Reverting changes.
Training on augumented user 40188 45/50 current_auc = 0.4725490196078431
User 40188 AUC after training: 0.4667892156862745
User 40188 does not improve AUC. Reverting changes.
Training on augumented user 126031 46/50 current_auc = 0.4725490196078431
User 126031 AUC after training: 0.4713235294117647
User 126031 does not improve AUC. Reverting changes.
Training on augumented user 110328 47/50 current_auc = 0.4725490196078431
User 110328 AUC after training: 0.471078431372549
User 110328 does not improve AUC. Reverting changes.
Training on augumented user 128383 48/50 current_auc = 0.4725490196078431
User 128383 AUC after training: 0.47156862745098044
User 128383 does not improve AUC. Reverting changes.
Training on augumented user 132957 49/50 current_auc = 0.4725490196078431
User 132957 AUC after training: 0.4713235294117647
User 132957 does not improve AUC. Reverting changes.
[2024-12-02 19:30:55.055308] start test user 100649 200/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:30:55.515767] start test user 100649 200/567 recall augumented users by random, augumented_users = [16191, 27594, 99049, 87757, 86141, 18221, 41989, 59029, 19706, 60023, 57042, 100814, 11604, 56735, 104349, 72114, 115823, 17505, 45093, 22284, 99545, 83272, 17774, 49384, 133771, 96361, 78734, 42709, 104410, 9063, 33780, 84105, 131954, 8343, 117265, 37219, 20289, 26018, 86286, 119841, 52453, 110100, 12326, 73016, 23542, 62101, 135076, 51133, 34767, 98103]
[2024-12-02 19:30:55.531224] user = 100649 Cloud 200/567
[2024-12-02 19:30:55.545155] user = 100649 Local 200/567
[2024-12-02 19:30:55.717837] user = 100649 Local+ 200/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:30:58.600715] user = 100649 MPDA- 200/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7231588287488909
Training on augumented user 16191 0/50 current_auc = 0.7231588287488909
User 16191 AUC after training: 0.722715173025732
User 16191 does not improve AUC. Reverting changes.
Training on augumented user 27594 1/50 current_auc = 0.7231588287488909
User 27594 AUC after training: 0.7244897959183674
User 27594 improves AUC. Keeping the model.
Training on augumented user 99049 2/50 current_auc = 0.7244897959183674
User 99049 AUC after training: 0.7249334516415261
User 99049 improves AUC. Keeping the model.
Training on augumented user 87757 3/50 current_auc = 0.7249334516415261
User 87757 AUC after training: 0.7244897959183674
User 87757 does not improve AUC. Reverting changes.
Training on augumented user 86141 4/50 current_auc = 0.7249334516415261
User 86141 AUC after training: 0.7244897959183674
User 86141 does not improve AUC. Reverting changes.
Training on augumented user 18221 5/50 current_auc = 0.7249334516415261
User 18221 AUC after training: 0.7244897959183674
User 18221 does not improve AUC. Reverting changes.
Training on augumented user 41989 6/50 current_auc = 0.7249334516415261
User 41989 AUC after training: 0.7244897959183674
User 41989 does not improve AUC. Reverting changes.
Training on augumented user 59029 7/50 current_auc = 0.7249334516415261
User 59029 AUC after training: 0.7258207630878438
User 59029 improves AUC. Keeping the model.
Training on augumented user 19706 8/50 current_auc = 0.7258207630878438
User 19706 AUC after training: 0.7262644188110027
User 19706 improves AUC. Keeping the model.
Training on augumented user 60023 9/50 current_auc = 0.7262644188110027
User 60023 AUC after training: 0.7249334516415262
User 60023 does not improve AUC. Reverting changes.
Training on augumented user 57042 10/50 current_auc = 0.7262644188110027
User 57042 AUC after training: 0.725377107364685
User 57042 does not improve AUC. Reverting changes.
Training on augumented user 100814 11/50 current_auc = 0.7262644188110027
User 100814 AUC after training: 0.7227151730257321
User 100814 does not improve AUC. Reverting changes.
Training on augumented user 11604 12/50 current_auc = 0.7262644188110027
User 11604 AUC after training: 0.7262644188110027
User 11604 does not improve AUC. Reverting changes.
Training on augumented user 56735 13/50 current_auc = 0.7262644188110027
User 56735 AUC after training: 0.7249334516415261
User 56735 does not improve AUC. Reverting changes.
Training on augumented user 104349 14/50 current_auc = 0.7262644188110027
User 104349 AUC after training: 0.7227151730257321
User 104349 does not improve AUC. Reverting changes.
Training on augumented user 72114 15/50 current_auc = 0.7262644188110027
User 72114 AUC after training: 0.725377107364685
User 72114 does not improve AUC. Reverting changes.
Training on augumented user 115823 16/50 current_auc = 0.7262644188110027
User 115823 AUC after training: 0.7244897959183674
User 115823 does not improve AUC. Reverting changes.
Training on augumented user 17505 17/50 current_auc = 0.7262644188110027
User 17505 AUC after training: 0.725377107364685
User 17505 does not improve AUC. Reverting changes.
Training on augumented user 45093 18/50 current_auc = 0.7262644188110027
User 45093 AUC after training: 0.7258207630878438
User 45093 does not improve AUC. Reverting changes.
Training on augumented user 22284 19/50 current_auc = 0.7262644188110027
User 22284 AUC after training: 0.7258207630878438
User 22284 does not improve AUC. Reverting changes.
Training on augumented user 99545 20/50 current_auc = 0.7262644188110027
User 99545 AUC after training: 0.7249334516415262
User 99545 does not improve AUC. Reverting changes.
Training on augumented user 83272 21/50 current_auc = 0.7262644188110027
User 83272 AUC after training: 0.7244897959183674
User 83272 does not improve AUC. Reverting changes.
Training on augumented user 17774 22/50 current_auc = 0.7262644188110027
User 17774 AUC after training: 0.7253771073646851
User 17774 does not improve AUC. Reverting changes.
Training on augumented user 49384 23/50 current_auc = 0.7262644188110027
User 49384 AUC after training: 0.7262644188110027
User 49384 does not improve AUC. Reverting changes.
Training on augumented user 133771 24/50 current_auc = 0.7262644188110027
User 133771 AUC after training: 0.7258207630878438
User 133771 does not improve AUC. Reverting changes.
Training on augumented user 96361 25/50 current_auc = 0.7262644188110027
User 96361 AUC after training: 0.7253771073646851
User 96361 does not improve AUC. Reverting changes.
Training on augumented user 78734 26/50 current_auc = 0.7262644188110027
User 78734 AUC after training: 0.7262644188110027
User 78734 does not improve AUC. Reverting changes.
Training on augumented user 42709 27/50 current_auc = 0.7262644188110027
User 42709 AUC after training: 0.7262644188110027
User 42709 does not improve AUC. Reverting changes.
Training on augumented user 104410 28/50 current_auc = 0.7262644188110027
User 104410 AUC after training: 0.7249334516415262
User 104410 does not improve AUC. Reverting changes.
Training on augumented user 9063 29/50 current_auc = 0.7262644188110027
User 9063 AUC after training: 0.7249334516415262
User 9063 does not improve AUC. Reverting changes.
Training on augumented user 33780 30/50 current_auc = 0.7262644188110027
User 33780 AUC after training: 0.7258207630878438
User 33780 does not improve AUC. Reverting changes.
Training on augumented user 84105 31/50 current_auc = 0.7262644188110027
User 84105 AUC after training: 0.7249334516415262
User 84105 does not improve AUC. Reverting changes.
Training on augumented user 131954 32/50 current_auc = 0.7262644188110027
User 131954 AUC after training: 0.7249334516415262
User 131954 does not improve AUC. Reverting changes.
Training on augumented user 8343 33/50 current_auc = 0.7262644188110027
User 8343 AUC after training: 0.7244897959183674
User 8343 does not improve AUC. Reverting changes.
Training on augumented user 117265 34/50 current_auc = 0.7262644188110027
User 117265 AUC after training: 0.7258207630878438
User 117265 does not improve AUC. Reverting changes.
Training on augumented user 37219 35/50 current_auc = 0.7262644188110027
User 37219 AUC after training: 0.725377107364685
User 37219 does not improve AUC. Reverting changes.
Training on augumented user 20289 36/50 current_auc = 0.7262644188110027
User 20289 AUC after training: 0.7240461401952085
User 20289 does not improve AUC. Reverting changes.
Training on augumented user 26018 37/50 current_auc = 0.7262644188110027
User 26018 AUC after training: 0.7262644188110027
User 26018 does not improve AUC. Reverting changes.
Training on augumented user 86286 38/50 current_auc = 0.7262644188110027
User 86286 AUC after training: 0.7244897959183674
User 86286 does not improve AUC. Reverting changes.
Training on augumented user 119841 39/50 current_auc = 0.7262644188110027
User 119841 AUC after training: 0.7262644188110027
User 119841 does not improve AUC. Reverting changes.
Training on augumented user 52453 40/50 current_auc = 0.7262644188110027
User 52453 AUC after training: 0.7253771073646851
User 52453 does not improve AUC. Reverting changes.
Training on augumented user 110100 41/50 current_auc = 0.7262644188110027
User 110100 AUC after training: 0.7258207630878438
User 110100 does not improve AUC. Reverting changes.
Training on augumented user 12326 42/50 current_auc = 0.7262644188110027
User 12326 AUC after training: 0.7244897959183674
User 12326 does not improve AUC. Reverting changes.
Training on augumented user 73016 43/50 current_auc = 0.7262644188110027
User 73016 AUC after training: 0.7244897959183674
User 73016 does not improve AUC. Reverting changes.
Training on augumented user 23542 44/50 current_auc = 0.7262644188110027
User 23542 AUC after training: 0.7262644188110027
User 23542 does not improve AUC. Reverting changes.
Training on augumented user 62101 45/50 current_auc = 0.7262644188110027
User 62101 AUC after training: 0.725377107364685
User 62101 does not improve AUC. Reverting changes.
Training on augumented user 135076 46/50 current_auc = 0.7262644188110027
User 135076 AUC after training: 0.7244897959183674
User 135076 does not improve AUC. Reverting changes.
Training on augumented user 51133 47/50 current_auc = 0.7262644188110027
User 51133 AUC after training: 0.725377107364685
User 51133 does not improve AUC. Reverting changes.
Training on augumented user 34767 48/50 current_auc = 0.7262644188110027
User 34767 AUC after training: 0.7244897959183674
User 34767 does not improve AUC. Reverting changes.
Training on augumented user 98103 49/50 current_auc = 0.7262644188110027
User 98103 AUC after training: 0.7222715173025732
User 98103 does not improve AUC. Reverting changes.
[2024-12-02 19:31:30.149797] start test user 100652 201/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:31:30.725229] start test user 100652 201/567 recall augumented users by random, augumented_users = [69342, 131981, 124250, 59224, 86385, 16859, 30776, 124242, 37669, 406, 50809, 55756, 107731, 32884, 109899, 69217, 16100, 90179, 41887, 59236, 125582, 131031, 136379, 113177, 94339, 29819, 50955, 54677, 85737, 41960, 49652, 113761, 38015, 55896, 105668, 16573, 136614, 25407, 48476, 84667, 124416, 114189, 8404, 52268, 99057, 129998, 125106, 75307, 126654, 128812]
[2024-12-02 19:31:30.741841] user = 100652 Cloud 201/567
[2024-12-02 19:31:30.751470] user = 100652 Local 201/567
[2024-12-02 19:31:30.911043] user = 100652 Local+ 201/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:31:33.508662] user = 100652 MPDA- 201/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8160919540229885
Training on augumented user 69342 0/50 current_auc = 0.8160919540229885
User 69342 AUC after training: 0.8122605363984674
User 69342 does not improve AUC. Reverting changes.
Training on augumented user 131981 1/50 current_auc = 0.8160919540229885
User 131981 AUC after training: 0.8122605363984674
User 131981 does not improve AUC. Reverting changes.
Training on augumented user 124250 2/50 current_auc = 0.8160919540229885
User 124250 AUC after training: 0.8160919540229885
User 124250 does not improve AUC. Reverting changes.
Training on augumented user 59224 3/50 current_auc = 0.8160919540229885
User 59224 AUC after training: 0.8122605363984674
User 59224 does not improve AUC. Reverting changes.
Training on augumented user 86385 4/50 current_auc = 0.8160919540229885
User 86385 AUC after training: 0.8160919540229885
User 86385 does not improve AUC. Reverting changes.
Training on augumented user 16859 5/50 current_auc = 0.8160919540229885
User 16859 AUC after training: 0.8160919540229885
User 16859 does not improve AUC. Reverting changes.
Training on augumented user 30776 6/50 current_auc = 0.8160919540229885
User 30776 AUC after training: 0.8122605363984674
User 30776 does not improve AUC. Reverting changes.
Training on augumented user 124242 7/50 current_auc = 0.8160919540229885
User 124242 AUC after training: 0.8160919540229885
User 124242 does not improve AUC. Reverting changes.
Training on augumented user 37669 8/50 current_auc = 0.8160919540229885
User 37669 AUC after training: 0.8199233716475096
User 37669 improves AUC. Keeping the model.
Training on augumented user 406 9/50 current_auc = 0.8199233716475096
User 406 AUC after training: 0.8160919540229885
User 406 does not improve AUC. Reverting changes.
Training on augumented user 50809 10/50 current_auc = 0.8199233716475096
User 50809 AUC after training: 0.8199233716475096
User 50809 does not improve AUC. Reverting changes.
Training on augumented user 55756 11/50 current_auc = 0.8199233716475096
User 55756 AUC after training: 0.8275862068965518
User 55756 improves AUC. Keeping the model.
Training on augumented user 107731 12/50 current_auc = 0.8275862068965518
User 107731 AUC after training: 0.8199233716475096
User 107731 does not improve AUC. Reverting changes.
Training on augumented user 32884 13/50 current_auc = 0.8275862068965518
User 32884 AUC after training: 0.8199233716475096
User 32884 does not improve AUC. Reverting changes.
Training on augumented user 109899 14/50 current_auc = 0.8275862068965518
User 109899 AUC after training: 0.8275862068965518
User 109899 does not improve AUC. Reverting changes.
Training on augumented user 69217 15/50 current_auc = 0.8275862068965518
User 69217 AUC after training: 0.8199233716475096
User 69217 does not improve AUC. Reverting changes.
Training on augumented user 16100 16/50 current_auc = 0.8275862068965518
User 16100 AUC after training: 0.8199233716475096
User 16100 does not improve AUC. Reverting changes.
Training on augumented user 90179 17/50 current_auc = 0.8275862068965518
User 90179 AUC after training: 0.8199233716475096
User 90179 does not improve AUC. Reverting changes.
Training on augumented user 41887 18/50 current_auc = 0.8275862068965518
User 41887 AUC after training: 0.8275862068965518
User 41887 does not improve AUC. Reverting changes.
Training on augumented user 59236 19/50 current_auc = 0.8275862068965518
User 59236 AUC after training: 0.8160919540229885
User 59236 does not improve AUC. Reverting changes.
Training on augumented user 125582 20/50 current_auc = 0.8275862068965518
User 125582 AUC after training: 0.8199233716475096
User 125582 does not improve AUC. Reverting changes.
Training on augumented user 131031 21/50 current_auc = 0.8275862068965518
User 131031 AUC after training: 0.8199233716475096
User 131031 does not improve AUC. Reverting changes.
Training on augumented user 136379 22/50 current_auc = 0.8275862068965518
User 136379 AUC after training: 0.8237547892720307
User 136379 does not improve AUC. Reverting changes.
Training on augumented user 113177 23/50 current_auc = 0.8275862068965518
User 113177 AUC after training: 0.8199233716475096
User 113177 does not improve AUC. Reverting changes.
Training on augumented user 94339 24/50 current_auc = 0.8275862068965518
User 94339 AUC after training: 0.8237547892720307
User 94339 does not improve AUC. Reverting changes.
Training on augumented user 29819 25/50 current_auc = 0.8275862068965518
User 29819 AUC after training: 0.8237547892720307
User 29819 does not improve AUC. Reverting changes.
Training on augumented user 50955 26/50 current_auc = 0.8275862068965518
User 50955 AUC after training: 0.8237547892720307
User 50955 does not improve AUC. Reverting changes.
Training on augumented user 54677 27/50 current_auc = 0.8275862068965518
User 54677 AUC after training: 0.8237547892720307
User 54677 does not improve AUC. Reverting changes.
Training on augumented user 85737 28/50 current_auc = 0.8275862068965518
User 85737 AUC after training: 0.8199233716475096
User 85737 does not improve AUC. Reverting changes.
Training on augumented user 41960 29/50 current_auc = 0.8275862068965518
User 41960 AUC after training: 0.8275862068965518
User 41960 does not improve AUC. Reverting changes.
Training on augumented user 49652 30/50 current_auc = 0.8275862068965518
User 49652 AUC after training: 0.8237547892720307
User 49652 does not improve AUC. Reverting changes.
Training on augumented user 113761 31/50 current_auc = 0.8275862068965518
User 113761 AUC after training: 0.8275862068965518
User 113761 does not improve AUC. Reverting changes.
Training on augumented user 38015 32/50 current_auc = 0.8275862068965518
User 38015 AUC after training: 0.8275862068965518
User 38015 does not improve AUC. Reverting changes.
Training on augumented user 55896 33/50 current_auc = 0.8275862068965518
User 55896 AUC after training: 0.8199233716475096
User 55896 does not improve AUC. Reverting changes.
Training on augumented user 105668 34/50 current_auc = 0.8275862068965518
User 105668 AUC after training: 0.8275862068965518
User 105668 does not improve AUC. Reverting changes.
Training on augumented user 16573 35/50 current_auc = 0.8275862068965518
User 16573 AUC after training: 0.8199233716475096
User 16573 does not improve AUC. Reverting changes.
Training on augumented user 136614 36/50 current_auc = 0.8275862068965518
User 136614 AUC after training: 0.8199233716475096
User 136614 does not improve AUC. Reverting changes.
Training on augumented user 25407 37/50 current_auc = 0.8275862068965518
User 25407 AUC after training: 0.8275862068965518
User 25407 does not improve AUC. Reverting changes.
Training on augumented user 48476 38/50 current_auc = 0.8275862068965518
User 48476 AUC after training: 0.8275862068965518
User 48476 does not improve AUC. Reverting changes.
Training on augumented user 84667 39/50 current_auc = 0.8275862068965518
User 84667 AUC after training: 0.8275862068965518
User 84667 does not improve AUC. Reverting changes.
Training on augumented user 124416 40/50 current_auc = 0.8275862068965518
User 124416 AUC after training: 0.8275862068965518
User 124416 does not improve AUC. Reverting changes.
Training on augumented user 114189 41/50 current_auc = 0.8275862068965518
User 114189 AUC after training: 0.8237547892720307
User 114189 does not improve AUC. Reverting changes.
Training on augumented user 8404 42/50 current_auc = 0.8275862068965518
User 8404 AUC after training: 0.8199233716475096
User 8404 does not improve AUC. Reverting changes.
Training on augumented user 52268 43/50 current_auc = 0.8275862068965518
User 52268 AUC after training: 0.8275862068965518
User 52268 does not improve AUC. Reverting changes.
Training on augumented user 99057 44/50 current_auc = 0.8275862068965518
User 99057 AUC after training: 0.8199233716475096
User 99057 does not improve AUC. Reverting changes.
Training on augumented user 129998 45/50 current_auc = 0.8275862068965518
User 129998 AUC after training: 0.8199233716475096
User 129998 does not improve AUC. Reverting changes.
Training on augumented user 125106 46/50 current_auc = 0.8275862068965518
User 125106 AUC after training: 0.8199233716475096
User 125106 does not improve AUC. Reverting changes.
Training on augumented user 75307 47/50 current_auc = 0.8275862068965518
User 75307 AUC after training: 0.8275862068965518
User 75307 does not improve AUC. Reverting changes.
Training on augumented user 126654 48/50 current_auc = 0.8275862068965518
User 126654 AUC after training: 0.8275862068965518
User 126654 does not improve AUC. Reverting changes.
Training on augumented user 128812 49/50 current_auc = 0.8275862068965518
User 128812 AUC after training: 0.8275862068965518
User 128812 does not improve AUC. Reverting changes.
[2024-12-02 19:32:03.374747] start test user 100658 202/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:32:03.785386] start test user 100658 202/567 recall augumented users by random, augumented_users = [118073, 29368, 68086, 45901, 66864, 79493, 87370, 38979, 29705, 47278, 81981, 57765, 85364, 131871, 106589, 122679, 136181, 123952, 84172, 130258, 69236, 122016, 22753, 11383, 62590, 36621, 75278, 55770, 74610, 57217, 31726, 19013, 41523, 133764, 124906, 288, 64773, 64663, 112647, 40989, 57582, 12662, 121328, 97176, 73585, 102413, 84725, 95915, 32413, 11959]
[2024-12-02 19:32:03.800196] user = 100658 Cloud 202/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:32:03.806662] user = 100658 Local 202/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:32:03.828715] user = 100658 Local+ 202/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:32:06.161389] user = 100658 MPDA- 202/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 118073 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118073 AUC after training: 0.5
User 118073 does not improve AUC. Reverting changes.
Training on augumented user 29368 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29368 AUC after training: 0.5
User 29368 does not improve AUC. Reverting changes.
Training on augumented user 68086 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68086 AUC after training: 0.5
User 68086 does not improve AUC. Reverting changes.
Training on augumented user 45901 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45901 AUC after training: 0.5
User 45901 does not improve AUC. Reverting changes.
Training on augumented user 66864 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66864 AUC after training: 0.5
User 66864 does not improve AUC. Reverting changes.
Training on augumented user 79493 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79493 AUC after training: 0.5
User 79493 does not improve AUC. Reverting changes.
Training on augumented user 87370 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87370 AUC after training: 0.5
User 87370 does not improve AUC. Reverting changes.
Training on augumented user 38979 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38979 AUC after training: 0.5
User 38979 does not improve AUC. Reverting changes.
Training on augumented user 29705 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29705 AUC after training: 0.5
User 29705 does not improve AUC. Reverting changes.
Training on augumented user 47278 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47278 AUC after training: 0.5
User 47278 does not improve AUC. Reverting changes.
Training on augumented user 81981 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81981 AUC after training: 0.5
User 81981 does not improve AUC. Reverting changes.
Training on augumented user 57765 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57765 AUC after training: 0.5
User 57765 does not improve AUC. Reverting changes.
Training on augumented user 85364 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85364 AUC after training: 0.5
User 85364 does not improve AUC. Reverting changes.
Training on augumented user 131871 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131871 AUC after training: 0.5
User 131871 does not improve AUC. Reverting changes.
Training on augumented user 106589 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106589 AUC after training: 0.5
User 106589 does not improve AUC. Reverting changes.
Training on augumented user 122679 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122679 AUC after training: 0.5
User 122679 does not improve AUC. Reverting changes.
Training on augumented user 136181 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136181 AUC after training: 0.5
User 136181 does not improve AUC. Reverting changes.
Training on augumented user 123952 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123952 AUC after training: 0.5
User 123952 does not improve AUC. Reverting changes.
Training on augumented user 84172 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84172 AUC after training: 0.5
User 84172 does not improve AUC. Reverting changes.
Training on augumented user 130258 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130258 AUC after training: 0.5
User 130258 does not improve AUC. Reverting changes.
Training on augumented user 69236 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 69236 AUC after training: 0.5
User 69236 does not improve AUC. Reverting changes.
Training on augumented user 122016 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122016 AUC after training: 0.5
User 122016 does not improve AUC. Reverting changes.
Training on augumented user 22753 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22753 AUC after training: 0.5
User 22753 does not improve AUC. Reverting changes.
Training on augumented user 11383 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11383 AUC after training: 0.5
User 11383 does not improve AUC. Reverting changes.
Training on augumented user 62590 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62590 AUC after training: 0.5
User 62590 does not improve AUC. Reverting changes.
Training on augumented user 36621 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36621 AUC after training: 0.5
User 36621 does not improve AUC. Reverting changes.
Training on augumented user 75278 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75278 AUC after training: 0.5
User 75278 does not improve AUC. Reverting changes.
Training on augumented user 55770 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55770 AUC after training: 0.5
User 55770 does not improve AUC. Reverting changes.
Training on augumented user 74610 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74610 AUC after training: 0.5
User 74610 does not improve AUC. Reverting changes.
Training on augumented user 57217 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57217 AUC after training: 0.5
User 57217 does not improve AUC. Reverting changes.
Training on augumented user 31726 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 31726 AUC after training: 0.5
User 31726 does not improve AUC. Reverting changes.
Training on augumented user 19013 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19013 AUC after training: 0.5
User 19013 does not improve AUC. Reverting changes.
Training on augumented user 41523 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41523 AUC after training: 0.5
User 41523 does not improve AUC. Reverting changes.
Training on augumented user 133764 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133764 AUC after training: 0.5
User 133764 does not improve AUC. Reverting changes.
Training on augumented user 124906 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124906 AUC after training: 0.5
User 124906 does not improve AUC. Reverting changes.
Training on augumented user 288 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 288 AUC after training: 0.5
User 288 does not improve AUC. Reverting changes.
Training on augumented user 64773 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64773 AUC after training: 0.5
User 64773 does not improve AUC. Reverting changes.
Training on augumented user 64663 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64663 AUC after training: 0.5
User 64663 does not improve AUC. Reverting changes.
Training on augumented user 112647 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112647 AUC after training: 0.5
User 112647 does not improve AUC. Reverting changes.
Training on augumented user 40989 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40989 AUC after training: 0.5
User 40989 does not improve AUC. Reverting changes.
Training on augumented user 57582 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57582 AUC after training: 0.5
User 57582 does not improve AUC. Reverting changes.
Training on augumented user 12662 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12662 AUC after training: 0.5
User 12662 does not improve AUC. Reverting changes.
Training on augumented user 121328 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121328 AUC after training: 0.5
User 121328 does not improve AUC. Reverting changes.
Training on augumented user 97176 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97176 AUC after training: 0.5
User 97176 does not improve AUC. Reverting changes.
Training on augumented user 73585 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73585 AUC after training: 0.5
User 73585 does not improve AUC. Reverting changes.
Training on augumented user 102413 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102413 AUC after training: 0.5
User 102413 does not improve AUC. Reverting changes.
Training on augumented user 84725 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84725 AUC after training: 0.5
User 84725 does not improve AUC. Reverting changes.
Training on augumented user 95915 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95915 AUC after training: 0.5
User 95915 does not improve AUC. Reverting changes.
Training on augumented user 32413 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32413 AUC after training: 0.5
User 32413 does not improve AUC. Reverting changes.
Training on augumented user 11959 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11959 AUC after training: 0.5
User 11959 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:32:38.602040] start test user 100661 203/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:32:39.142556] start test user 100661 203/567 recall augumented users by random, augumented_users = [18326, 126866, 29655, 65553, 61677, 32225, 27794, 122109, 47501, 6919, 37576, 100259, 49657, 119365, 33335, 112645, 26938, 21946, 49824, 17152, 115070, 29075, 58330, 102438, 132583, 70071, 9191, 73739, 32399, 138018, 131180, 84610, 138242, 36260, 18139, 30270, 123161, 94534, 111448, 73855, 64144, 120088, 20677, 26779, 128141, 98860, 77063, 75922, 105334, 1622]
[2024-12-02 19:32:39.157765] user = 100661 Cloud 203/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:32:39.163902] user = 100661 Local 203/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:32:39.215304] user = 100661 Local+ 203/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:32:41.606533] user = 100661 MPDA- 203/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 18326 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18326 AUC after training: 0.5
User 18326 does not improve AUC. Reverting changes.
Training on augumented user 126866 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126866 AUC after training: 0.5
User 126866 does not improve AUC. Reverting changes.
Training on augumented user 29655 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29655 AUC after training: 0.5
User 29655 does not improve AUC. Reverting changes.
Training on augumented user 65553 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 65553 AUC after training: 0.5
User 65553 does not improve AUC. Reverting changes.
Training on augumented user 61677 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61677 AUC after training: 0.5
User 61677 does not improve AUC. Reverting changes.
Training on augumented user 32225 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32225 AUC after training: 0.5
User 32225 does not improve AUC. Reverting changes.
Training on augumented user 27794 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27794 AUC after training: 0.5
User 27794 does not improve AUC. Reverting changes.
Training on augumented user 122109 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122109 AUC after training: 0.5
User 122109 does not improve AUC. Reverting changes.
Training on augumented user 47501 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47501 AUC after training: 0.5
User 47501 does not improve AUC. Reverting changes.
Training on augumented user 6919 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6919 AUC after training: 0.5
User 6919 does not improve AUC. Reverting changes.
Training on augumented user 37576 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37576 AUC after training: 0.5
User 37576 does not improve AUC. Reverting changes.
Training on augumented user 100259 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100259 AUC after training: 0.5
User 100259 does not improve AUC. Reverting changes.
Training on augumented user 49657 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49657 AUC after training: 0.5
User 49657 does not improve AUC. Reverting changes.
Training on augumented user 119365 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 119365 AUC after training: 0.5
User 119365 does not improve AUC. Reverting changes.
Training on augumented user 33335 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33335 AUC after training: 0.5
User 33335 does not improve AUC. Reverting changes.
Training on augumented user 112645 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112645 AUC after training: 0.5
User 112645 does not improve AUC. Reverting changes.
Training on augumented user 26938 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26938 AUC after training: 0.5
User 26938 does not improve AUC. Reverting changes.
Training on augumented user 21946 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21946 AUC after training: 0.5
User 21946 does not improve AUC. Reverting changes.
Training on augumented user 49824 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49824 AUC after training: 0.5
User 49824 does not improve AUC. Reverting changes.
Training on augumented user 17152 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 17152 AUC after training: 0.5
User 17152 does not improve AUC. Reverting changes.
Training on augumented user 115070 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115070 AUC after training: 0.5
User 115070 does not improve AUC. Reverting changes.
Training on augumented user 29075 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29075 AUC after training: 0.5
User 29075 does not improve AUC. Reverting changes.
Training on augumented user 58330 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58330 AUC after training: 0.5
User 58330 does not improve AUC. Reverting changes.
Training on augumented user 102438 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102438 AUC after training: 0.5
User 102438 does not improve AUC. Reverting changes.
Training on augumented user 132583 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132583 AUC after training: 0.5
User 132583 does not improve AUC. Reverting changes.
Training on augumented user 70071 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70071 AUC after training: 0.5
User 70071 does not improve AUC. Reverting changes.
Training on augumented user 9191 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9191 AUC after training: 0.5
User 9191 does not improve AUC. Reverting changes.
Training on augumented user 73739 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73739 AUC after training: 0.5
User 73739 does not improve AUC. Reverting changes.
Training on augumented user 32399 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32399 AUC after training: 0.5
User 32399 does not improve AUC. Reverting changes.
Training on augumented user 138018 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 138018 AUC after training: 0.5
User 138018 does not improve AUC. Reverting changes.
Training on augumented user 131180 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131180 AUC after training: 0.5
User 131180 does not improve AUC. Reverting changes.
Training on augumented user 84610 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84610 AUC after training: 0.5
User 84610 does not improve AUC. Reverting changes.
Training on augumented user 138242 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 138242 AUC after training: 0.5
User 138242 does not improve AUC. Reverting changes.
Training on augumented user 36260 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36260 AUC after training: 0.5
User 36260 does not improve AUC. Reverting changes.
Training on augumented user 18139 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18139 AUC after training: 0.5
User 18139 does not improve AUC. Reverting changes.
Training on augumented user 30270 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30270 AUC after training: 0.5
User 30270 does not improve AUC. Reverting changes.
Training on augumented user 123161 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123161 AUC after training: 0.5
User 123161 does not improve AUC. Reverting changes.
Training on augumented user 94534 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94534 AUC after training: 0.5
User 94534 does not improve AUC. Reverting changes.
Training on augumented user 111448 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111448 AUC after training: 0.5
User 111448 does not improve AUC. Reverting changes.
Training on augumented user 73855 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73855 AUC after training: 0.5
User 73855 does not improve AUC. Reverting changes.
Training on augumented user 64144 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64144 AUC after training: 0.5
User 64144 does not improve AUC. Reverting changes.
Training on augumented user 120088 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120088 AUC after training: 0.5
User 120088 does not improve AUC. Reverting changes.
Training on augumented user 20677 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20677 AUC after training: 0.5
User 20677 does not improve AUC. Reverting changes.
Training on augumented user 26779 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26779 AUC after training: 0.5
User 26779 does not improve AUC. Reverting changes.
Training on augumented user 128141 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128141 AUC after training: 0.5
User 128141 does not improve AUC. Reverting changes.
Training on augumented user 98860 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98860 AUC after training: 0.5
User 98860 does not improve AUC. Reverting changes.
Training on augumented user 77063 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77063 AUC after training: 0.5
User 77063 does not improve AUC. Reverting changes.
Training on augumented user 75922 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75922 AUC after training: 0.5
User 75922 does not improve AUC. Reverting changes.
Training on augumented user 105334 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 105334 AUC after training: 0.5
User 105334 does not improve AUC. Reverting changes.
Training on augumented user 1622 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1622 AUC after training: 0.5
User 1622 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:33:13.734227] start test user 100685 204/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:33:14.150188] start test user 100685 204/567 recall augumented users by random, augumented_users = [39410, 57504, 115932, 54597, 25905, 63074, 85113, 44687, 18737, 68313, 53267, 88237, 730, 42962, 38075, 27871, 67836, 4992, 77765, 135471, 20155, 65919, 58295, 37823, 25974, 87927, 34200, 85477, 9567, 78051, 60108, 75793, 25508, 12841, 58429, 107180, 51408, 50449, 42842, 78904, 4628, 5583, 106050, 117015, 73199, 57682, 70552, 129492, 17527, 30086]
[2024-12-02 19:33:14.165579] user = 100685 Cloud 204/567
[2024-12-02 19:33:14.181820] user = 100685 Local 204/567
[2024-12-02 19:33:14.259250] user = 100685 Local+ 204/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:33:16.737799] user = 100685 MPDA- 204/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.47916666666666663
Training on augumented user 39410 0/50 current_auc = 0.47916666666666663
User 39410 AUC after training: 0.480603448275862
User 39410 improves AUC. Keeping the model.
Training on augumented user 57504 1/50 current_auc = 0.480603448275862
User 57504 AUC after training: 0.4813218390804598
User 57504 improves AUC. Keeping the model.
Training on augumented user 115932 2/50 current_auc = 0.4813218390804598
User 115932 AUC after training: 0.48275862068965525
User 115932 improves AUC. Keeping the model.
Training on augumented user 54597 3/50 current_auc = 0.48275862068965525
User 54597 AUC after training: 0.47844827586206895
User 54597 does not improve AUC. Reverting changes.
Training on augumented user 25905 4/50 current_auc = 0.48275862068965525
User 25905 AUC after training: 0.4806034482758621
User 25905 does not improve AUC. Reverting changes.
Training on augumented user 63074 5/50 current_auc = 0.48275862068965525
User 63074 AUC after training: 0.47844827586206895
User 63074 does not improve AUC. Reverting changes.
Training on augumented user 85113 6/50 current_auc = 0.48275862068965525
User 85113 AUC after training: 0.4813218390804598
User 85113 does not improve AUC. Reverting changes.
Training on augumented user 44687 7/50 current_auc = 0.48275862068965525
User 44687 AUC after training: 0.48204022988505746
User 44687 does not improve AUC. Reverting changes.
Training on augumented user 18737 8/50 current_auc = 0.48275862068965525
User 18737 AUC after training: 0.4798850574712644
User 18737 does not improve AUC. Reverting changes.
Training on augumented user 68313 9/50 current_auc = 0.48275862068965525
User 68313 AUC after training: 0.4755747126436781
User 68313 does not improve AUC. Reverting changes.
Training on augumented user 53267 10/50 current_auc = 0.48275862068965525
User 53267 AUC after training: 0.4827586206896552
User 53267 does not improve AUC. Reverting changes.
Training on augumented user 88237 11/50 current_auc = 0.48275862068965525
User 88237 AUC after training: 0.4798850574712644
User 88237 does not improve AUC. Reverting changes.
Training on augumented user 730 12/50 current_auc = 0.48275862068965525
User 730 AUC after training: 0.4813218390804598
User 730 does not improve AUC. Reverting changes.
Training on augumented user 42962 13/50 current_auc = 0.48275862068965525
User 42962 AUC after training: 0.47916666666666663
User 42962 does not improve AUC. Reverting changes.
Training on augumented user 38075 14/50 current_auc = 0.48275862068965525
User 38075 AUC after training: 0.4827586206896552
User 38075 does not improve AUC. Reverting changes.
Training on augumented user 27871 15/50 current_auc = 0.48275862068965525
User 27871 AUC after training: 0.4798850574712644
User 27871 does not improve AUC. Reverting changes.
Training on augumented user 67836 16/50 current_auc = 0.48275862068965525
User 67836 AUC after training: 0.4813218390804598
User 67836 does not improve AUC. Reverting changes.
Training on augumented user 4992 17/50 current_auc = 0.48275862068965525
User 4992 AUC after training: 0.47988505747126436
User 4992 does not improve AUC. Reverting changes.
Training on augumented user 77765 18/50 current_auc = 0.48275862068965525
User 77765 AUC after training: 0.47916666666666663
User 77765 does not improve AUC. Reverting changes.
Training on augumented user 135471 19/50 current_auc = 0.48275862068965525
User 135471 AUC after training: 0.47485632183908044
User 135471 does not improve AUC. Reverting changes.
Training on augumented user 20155 20/50 current_auc = 0.48275862068965525
User 20155 AUC after training: 0.47988505747126436
User 20155 does not improve AUC. Reverting changes.
Training on augumented user 65919 21/50 current_auc = 0.48275862068965525
User 65919 AUC after training: 0.47772988505747127
User 65919 does not improve AUC. Reverting changes.
Training on augumented user 58295 22/50 current_auc = 0.48275862068965525
User 58295 AUC after training: 0.4820402298850575
User 58295 does not improve AUC. Reverting changes.
Training on augumented user 37823 23/50 current_auc = 0.48275862068965525
User 37823 AUC after training: 0.4841954022988506
User 37823 improves AUC. Keeping the model.
Training on augumented user 25974 24/50 current_auc = 0.4841954022988506
User 25974 AUC after training: 0.4827586206896552
User 25974 does not improve AUC. Reverting changes.
Training on augumented user 87927 25/50 current_auc = 0.4841954022988506
User 87927 AUC after training: 0.48347701149425293
User 87927 does not improve AUC. Reverting changes.
Training on augumented user 34200 26/50 current_auc = 0.4841954022988506
User 34200 AUC after training: 0.48275862068965514
User 34200 does not improve AUC. Reverting changes.
Training on augumented user 85477 27/50 current_auc = 0.4841954022988506
User 85477 AUC after training: 0.48204022988505746
User 85477 does not improve AUC. Reverting changes.
Training on augumented user 9567 28/50 current_auc = 0.4841954022988506
User 9567 AUC after training: 0.4841954022988506
User 9567 does not improve AUC. Reverting changes.
Training on augumented user 78051 29/50 current_auc = 0.4841954022988506
User 78051 AUC after training: 0.4813218390804598
User 78051 does not improve AUC. Reverting changes.
Training on augumented user 60108 30/50 current_auc = 0.4841954022988506
User 60108 AUC after training: 0.48204022988505746
User 60108 does not improve AUC. Reverting changes.
Training on augumented user 75793 31/50 current_auc = 0.4841954022988506
User 75793 AUC after training: 0.4841954022988506
User 75793 does not improve AUC. Reverting changes.
Training on augumented user 25508 32/50 current_auc = 0.4841954022988506
User 25508 AUC after training: 0.48635057471264365
User 25508 improves AUC. Keeping the model.
Training on augumented user 12841 33/50 current_auc = 0.48635057471264365
User 12841 AUC after training: 0.48635057471264365
User 12841 does not improve AUC. Reverting changes.
Training on augumented user 58429 34/50 current_auc = 0.48635057471264365
User 58429 AUC after training: 0.48563218390804597
User 58429 does not improve AUC. Reverting changes.
Training on augumented user 107180 35/50 current_auc = 0.48635057471264365
User 107180 AUC after training: 0.48563218390804597
User 107180 does not improve AUC. Reverting changes.
Training on augumented user 51408 36/50 current_auc = 0.48635057471264365
User 51408 AUC after training: 0.4877873563218391
User 51408 improves AUC. Keeping the model.
Training on augumented user 50449 37/50 current_auc = 0.4877873563218391
User 50449 AUC after training: 0.48635057471264365
User 50449 does not improve AUC. Reverting changes.
Training on augumented user 42842 38/50 current_auc = 0.4877873563218391
User 42842 AUC after training: 0.47844827586206895
User 42842 does not improve AUC. Reverting changes.
Training on augumented user 78904 39/50 current_auc = 0.4877873563218391
User 78904 AUC after training: 0.48563218390804597
User 78904 does not improve AUC. Reverting changes.
Training on augumented user 4628 40/50 current_auc = 0.4877873563218391
User 4628 AUC after training: 0.48275862068965514
User 4628 does not improve AUC. Reverting changes.
Training on augumented user 5583 41/50 current_auc = 0.4877873563218391
User 5583 AUC after training: 0.4841954022988506
User 5583 does not improve AUC. Reverting changes.
Training on augumented user 106050 42/50 current_auc = 0.4877873563218391
User 106050 AUC after training: 0.4874281609195402
User 106050 does not improve AUC. Reverting changes.
Training on augumented user 117015 43/50 current_auc = 0.4877873563218391
User 117015 AUC after training: 0.49353448275862066
User 117015 improves AUC. Keeping the model.
Training on augumented user 73199 44/50 current_auc = 0.49353448275862066
User 73199 AUC after training: 0.49712643678160917
User 73199 improves AUC. Keeping the model.
Training on augumented user 57682 45/50 current_auc = 0.49712643678160917
User 57682 AUC after training: 0.4992816091954022
User 57682 improves AUC. Keeping the model.
Training on augumented user 70552 46/50 current_auc = 0.4992816091954022
User 70552 AUC after training: 0.49784482758620685
User 70552 does not improve AUC. Reverting changes.
Training on augumented user 129492 47/50 current_auc = 0.4992816091954022
User 129492 AUC after training: 0.49784482758620696
User 129492 does not improve AUC. Reverting changes.
Training on augumented user 17527 48/50 current_auc = 0.4992816091954022
User 17527 AUC after training: 0.5014367816091954
User 17527 improves AUC. Keeping the model.
Training on augumented user 30086 49/50 current_auc = 0.5014367816091954
User 30086 AUC after training: 0.4992816091954023
User 30086 does not improve AUC. Reverting changes.
[2024-12-02 19:33:48.979687] start test user 100697 205/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:33:49.620762] start test user 100697 205/567 recall augumented users by random, augumented_users = [68678, 89536, 91059, 100556, 25425, 59808, 32144, 132185, 4009, 16541, 72937, 21815, 43829, 106399, 93561, 178, 83309, 52157, 22247, 133654, 3997, 15250, 103106, 122527, 88800, 55234, 88929, 32876, 74625, 82623, 131998, 79888, 39371, 9863, 100519, 137154, 70066, 22570, 98186, 73102, 83147, 124740, 86454, 36605, 13451, 63460, 104599, 92545, 36098, 127871]
[2024-12-02 19:33:49.637356] user = 100697 Cloud 205/567
[2024-12-02 19:33:49.652317] user = 100697 Local 205/567
[2024-12-02 19:33:49.833569] user = 100697 Local+ 205/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:33:52.965371] user = 100697 MPDA- 205/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5202020202020202
Training on augumented user 68678 0/50 current_auc = 0.5202020202020202
User 68678 AUC after training: 0.5202020202020202
User 68678 does not improve AUC. Reverting changes.
Training on augumented user 89536 1/50 current_auc = 0.5202020202020202
User 89536 AUC after training: 0.5189393939393939
User 89536 does not improve AUC. Reverting changes.
Training on augumented user 91059 2/50 current_auc = 0.5202020202020202
User 91059 AUC after training: 0.5202020202020202
User 91059 does not improve AUC. Reverting changes.
Training on augumented user 100556 3/50 current_auc = 0.5202020202020202
User 100556 AUC after training: 0.5138888888888888
User 100556 does not improve AUC. Reverting changes.
Training on augumented user 25425 4/50 current_auc = 0.5202020202020202
User 25425 AUC after training: 0.5202020202020202
User 25425 does not improve AUC. Reverting changes.
Training on augumented user 59808 5/50 current_auc = 0.5202020202020202
User 59808 AUC after training: 0.5189393939393939
User 59808 does not improve AUC. Reverting changes.
Training on augumented user 32144 6/50 current_auc = 0.5202020202020202
User 32144 AUC after training: 0.5202020202020202
User 32144 does not improve AUC. Reverting changes.
Training on augumented user 132185 7/50 current_auc = 0.5202020202020202
User 132185 AUC after training: 0.5202020202020201
User 132185 does not improve AUC. Reverting changes.
Training on augumented user 4009 8/50 current_auc = 0.5202020202020202
User 4009 AUC after training: 0.5202020202020202
User 4009 does not improve AUC. Reverting changes.
Training on augumented user 16541 9/50 current_auc = 0.5202020202020202
User 16541 AUC after training: 0.5202020202020202
User 16541 does not improve AUC. Reverting changes.
Training on augumented user 72937 10/50 current_auc = 0.5202020202020202
User 72937 AUC after training: 0.5202020202020202
User 72937 does not improve AUC. Reverting changes.
Training on augumented user 21815 11/50 current_auc = 0.5202020202020202
User 21815 AUC after training: 0.5189393939393939
User 21815 does not improve AUC. Reverting changes.
Training on augumented user 43829 12/50 current_auc = 0.5202020202020202
User 43829 AUC after training: 0.5202020202020202
User 43829 does not improve AUC. Reverting changes.
Training on augumented user 106399 13/50 current_auc = 0.5202020202020202
User 106399 AUC after training: 0.5202020202020202
User 106399 does not improve AUC. Reverting changes.
Training on augumented user 93561 14/50 current_auc = 0.5202020202020202
User 93561 AUC after training: 0.5202020202020202
User 93561 does not improve AUC. Reverting changes.
Training on augumented user 178 15/50 current_auc = 0.5202020202020202
User 178 AUC after training: 0.5202020202020202
User 178 does not improve AUC. Reverting changes.
Training on augumented user 83309 16/50 current_auc = 0.5202020202020202
User 83309 AUC after training: 0.5202020202020202
User 83309 does not improve AUC. Reverting changes.
Training on augumented user 52157 17/50 current_auc = 0.5202020202020202
User 52157 AUC after training: 0.5214646464646464
User 52157 improves AUC. Keeping the model.
Training on augumented user 22247 18/50 current_auc = 0.5214646464646464
User 22247 AUC after training: 0.5214646464646464
User 22247 does not improve AUC. Reverting changes.
Training on augumented user 133654 19/50 current_auc = 0.5214646464646464
User 133654 AUC after training: 0.5202020202020202
User 133654 does not improve AUC. Reverting changes.
Training on augumented user 3997 20/50 current_auc = 0.5214646464646464
User 3997 AUC after training: 0.5214646464646464
User 3997 does not improve AUC. Reverting changes.
Training on augumented user 15250 21/50 current_auc = 0.5214646464646464
User 15250 AUC after training: 0.5202020202020202
User 15250 does not improve AUC. Reverting changes.
Training on augumented user 103106 22/50 current_auc = 0.5214646464646464
User 103106 AUC after training: 0.5214646464646464
User 103106 does not improve AUC. Reverting changes.
Training on augumented user 122527 23/50 current_auc = 0.5214646464646464
User 122527 AUC after training: 0.5214646464646464
User 122527 does not improve AUC. Reverting changes.
Training on augumented user 88800 24/50 current_auc = 0.5214646464646464
User 88800 AUC after training: 0.5214646464646464
User 88800 does not improve AUC. Reverting changes.
Training on augumented user 55234 25/50 current_auc = 0.5214646464646464
User 55234 AUC after training: 0.5214646464646464
User 55234 does not improve AUC. Reverting changes.
Training on augumented user 88929 26/50 current_auc = 0.5214646464646464
User 88929 AUC after training: 0.5214646464646464
User 88929 does not improve AUC. Reverting changes.
Training on augumented user 32876 27/50 current_auc = 0.5214646464646464
User 32876 AUC after training: 0.5214646464646464
User 32876 does not improve AUC. Reverting changes.
Training on augumented user 74625 28/50 current_auc = 0.5214646464646464
User 74625 AUC after training: 0.5214646464646464
User 74625 does not improve AUC. Reverting changes.
Training on augumented user 82623 29/50 current_auc = 0.5214646464646464
User 82623 AUC after training: 0.5202020202020202
User 82623 does not improve AUC. Reverting changes.
Training on augumented user 131998 30/50 current_auc = 0.5214646464646464
User 131998 AUC after training: 0.5214646464646464
User 131998 does not improve AUC. Reverting changes.
Training on augumented user 79888 31/50 current_auc = 0.5214646464646464
User 79888 AUC after training: 0.5214646464646464
User 79888 does not improve AUC. Reverting changes.
Training on augumented user 39371 32/50 current_auc = 0.5214646464646464
User 39371 AUC after training: 0.5202020202020202
User 39371 does not improve AUC. Reverting changes.
Training on augumented user 9863 33/50 current_auc = 0.5214646464646464
User 9863 AUC after training: 0.5113636363636364
User 9863 does not improve AUC. Reverting changes.
Training on augumented user 100519 34/50 current_auc = 0.5214646464646464
User 100519 AUC after training: 0.5214646464646464
User 100519 does not improve AUC. Reverting changes.
Training on augumented user 137154 35/50 current_auc = 0.5214646464646464
User 137154 AUC after training: 0.5214646464646464
User 137154 does not improve AUC. Reverting changes.
Training on augumented user 70066 36/50 current_auc = 0.5214646464646464
User 70066 AUC after training: 0.5214646464646464
User 70066 does not improve AUC. Reverting changes.
Training on augumented user 22570 37/50 current_auc = 0.5214646464646464
User 22570 AUC after training: 0.5202020202020201
User 22570 does not improve AUC. Reverting changes.
Training on augumented user 98186 38/50 current_auc = 0.5214646464646464
User 98186 AUC after training: 0.5214646464646464
User 98186 does not improve AUC. Reverting changes.
Training on augumented user 73102 39/50 current_auc = 0.5214646464646464
User 73102 AUC after training: 0.5202020202020202
User 73102 does not improve AUC. Reverting changes.
Training on augumented user 83147 40/50 current_auc = 0.5214646464646464
User 83147 AUC after training: 0.5214646464646464
User 83147 does not improve AUC. Reverting changes.
Training on augumented user 124740 41/50 current_auc = 0.5214646464646464
User 124740 AUC after training: 0.5189393939393939
User 124740 does not improve AUC. Reverting changes.
Training on augumented user 86454 42/50 current_auc = 0.5214646464646464
User 86454 AUC after training: 0.5214646464646464
User 86454 does not improve AUC. Reverting changes.
Training on augumented user 36605 43/50 current_auc = 0.5214646464646464
User 36605 AUC after training: 0.5214646464646464
User 36605 does not improve AUC. Reverting changes.
Training on augumented user 13451 44/50 current_auc = 0.5214646464646464
User 13451 AUC after training: 0.5214646464646464
User 13451 does not improve AUC. Reverting changes.
Training on augumented user 63460 45/50 current_auc = 0.5214646464646464
User 63460 AUC after training: 0.5202020202020202
User 63460 does not improve AUC. Reverting changes.
Training on augumented user 104599 46/50 current_auc = 0.5214646464646464
User 104599 AUC after training: 0.5214646464646464
User 104599 does not improve AUC. Reverting changes.
Training on augumented user 92545 47/50 current_auc = 0.5214646464646464
User 92545 AUC after training: 0.5202020202020201
User 92545 does not improve AUC. Reverting changes.
Training on augumented user 36098 48/50 current_auc = 0.5214646464646464
User 36098 AUC after training: 0.5202020202020202
User 36098 does not improve AUC. Reverting changes.
Training on augumented user 127871 49/50 current_auc = 0.5214646464646464
User 127871 AUC after training: 0.5176767676767677
User 127871 does not improve AUC. Reverting changes.
[2024-12-02 19:34:22.061984] start test user 100738 206/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:34:22.592359] start test user 100738 206/567 recall augumented users by random, augumented_users = [38714, 57819, 124662, 91314, 98887, 106833, 18451, 63694, 34855, 32783, 20698, 100949, 66210, 52152, 40848, 2190, 121490, 80314, 129898, 126517, 32821, 11770, 29441, 108892, 1032, 135905, 70556, 34037, 79175, 35566, 43016, 20782, 29260, 119618, 35318, 76436, 71004, 10591, 9219, 127542, 56472, 54430, 138332, 18243, 87348, 23672, 135330, 122563, 2272, 10292]
[2024-12-02 19:34:22.608040] user = 100738 Cloud 206/567
[2024-12-02 19:34:22.625542] user = 100738 Local 206/567
[2024-12-02 19:34:22.773435] user = 100738 Local+ 206/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:34:25.785570] user = 100738 MPDA- 206/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8503448275862069
Training on augumented user 38714 0/50 current_auc = 0.8503448275862069
User 38714 AUC after training: 0.8510344827586207
User 38714 improves AUC. Keeping the model.
Training on augumented user 57819 1/50 current_auc = 0.8510344827586207
User 57819 AUC after training: 0.8517241379310345
User 57819 improves AUC. Keeping the model.
Training on augumented user 124662 2/50 current_auc = 0.8517241379310345
User 124662 AUC after training: 0.8510344827586207
User 124662 does not improve AUC. Reverting changes.
Training on augumented user 91314 3/50 current_auc = 0.8517241379310345
User 91314 AUC after training: 0.8517241379310345
User 91314 does not improve AUC. Reverting changes.
Training on augumented user 98887 4/50 current_auc = 0.8517241379310345
User 98887 AUC after training: 0.8503448275862069
User 98887 does not improve AUC. Reverting changes.
Training on augumented user 106833 5/50 current_auc = 0.8517241379310345
User 106833 AUC after training: 0.8496551724137932
User 106833 does not improve AUC. Reverting changes.
Training on augumented user 18451 6/50 current_auc = 0.8517241379310345
User 18451 AUC after training: 0.8517241379310345
User 18451 does not improve AUC. Reverting changes.
Training on augumented user 63694 7/50 current_auc = 0.8517241379310345
User 63694 AUC after training: 0.8524137931034483
User 63694 improves AUC. Keeping the model.
Training on augumented user 34855 8/50 current_auc = 0.8524137931034483
User 34855 AUC after training: 0.8524137931034483
User 34855 does not improve AUC. Reverting changes.
Training on augumented user 32783 9/50 current_auc = 0.8524137931034483
User 32783 AUC after training: 0.8510344827586207
User 32783 does not improve AUC. Reverting changes.
Training on augumented user 20698 10/50 current_auc = 0.8524137931034483
User 20698 AUC after training: 0.8524137931034483
User 20698 does not improve AUC. Reverting changes.
Training on augumented user 100949 11/50 current_auc = 0.8524137931034483
User 100949 AUC after training: 0.8517241379310345
User 100949 does not improve AUC. Reverting changes.
Training on augumented user 66210 12/50 current_auc = 0.8524137931034483
User 66210 AUC after training: 0.8510344827586207
User 66210 does not improve AUC. Reverting changes.
Training on augumented user 52152 13/50 current_auc = 0.8524137931034483
User 52152 AUC after training: 0.8510344827586207
User 52152 does not improve AUC. Reverting changes.
Training on augumented user 40848 14/50 current_auc = 0.8524137931034483
User 40848 AUC after training: 0.8489655172413794
User 40848 does not improve AUC. Reverting changes.
Training on augumented user 2190 15/50 current_auc = 0.8524137931034483
User 2190 AUC after training: 0.8510344827586207
User 2190 does not improve AUC. Reverting changes.
Training on augumented user 121490 16/50 current_auc = 0.8524137931034483
User 121490 AUC after training: 0.8517241379310345
User 121490 does not improve AUC. Reverting changes.
Training on augumented user 80314 17/50 current_auc = 0.8524137931034483
User 80314 AUC after training: 0.8496551724137932
User 80314 does not improve AUC. Reverting changes.
Training on augumented user 129898 18/50 current_auc = 0.8524137931034483
User 129898 AUC after training: 0.8517241379310345
User 129898 does not improve AUC. Reverting changes.
Training on augumented user 126517 19/50 current_auc = 0.8524137931034483
User 126517 AUC after training: 0.8517241379310345
User 126517 does not improve AUC. Reverting changes.
Training on augumented user 32821 20/50 current_auc = 0.8524137931034483
User 32821 AUC after training: 0.8496551724137931
User 32821 does not improve AUC. Reverting changes.
Training on augumented user 11770 21/50 current_auc = 0.8524137931034483
User 11770 AUC after training: 0.8510344827586207
User 11770 does not improve AUC. Reverting changes.
Training on augumented user 29441 22/50 current_auc = 0.8524137931034483
User 29441 AUC after training: 0.8517241379310344
User 29441 does not improve AUC. Reverting changes.
Training on augumented user 108892 23/50 current_auc = 0.8524137931034483
User 108892 AUC after training: 0.8524137931034483
User 108892 does not improve AUC. Reverting changes.
Training on augumented user 1032 24/50 current_auc = 0.8524137931034483
User 1032 AUC after training: 0.8517241379310345
User 1032 does not improve AUC. Reverting changes.
Training on augumented user 135905 25/50 current_auc = 0.8524137931034483
User 135905 AUC after training: 0.8489655172413793
User 135905 does not improve AUC. Reverting changes.
Training on augumented user 70556 26/50 current_auc = 0.8524137931034483
User 70556 AUC after training: 0.8517241379310344
User 70556 does not improve AUC. Reverting changes.
Training on augumented user 34037 27/50 current_auc = 0.8524137931034483
User 34037 AUC after training: 0.8524137931034483
User 34037 does not improve AUC. Reverting changes.
Training on augumented user 79175 28/50 current_auc = 0.8524137931034483
User 79175 AUC after training: 0.846896551724138
User 79175 does not improve AUC. Reverting changes.
Training on augumented user 35566 29/50 current_auc = 0.8524137931034483
User 35566 AUC after training: 0.8524137931034483
User 35566 does not improve AUC. Reverting changes.
Training on augumented user 43016 30/50 current_auc = 0.8524137931034483
User 43016 AUC after training: 0.8517241379310345
User 43016 does not improve AUC. Reverting changes.
Training on augumented user 20782 31/50 current_auc = 0.8524137931034483
User 20782 AUC after training: 0.8517241379310345
User 20782 does not improve AUC. Reverting changes.
Training on augumented user 29260 32/50 current_auc = 0.8524137931034483
User 29260 AUC after training: 0.8524137931034483
User 29260 does not improve AUC. Reverting changes.
Training on augumented user 119618 33/50 current_auc = 0.8524137931034483
User 119618 AUC after training: 0.8496551724137931
User 119618 does not improve AUC. Reverting changes.
Training on augumented user 35318 34/50 current_auc = 0.8524137931034483
User 35318 AUC after training: 0.8503448275862069
User 35318 does not improve AUC. Reverting changes.
Training on augumented user 76436 35/50 current_auc = 0.8524137931034483
User 76436 AUC after training: 0.8524137931034483
User 76436 does not improve AUC. Reverting changes.
Training on augumented user 71004 36/50 current_auc = 0.8524137931034483
User 71004 AUC after training: 0.8517241379310344
User 71004 does not improve AUC. Reverting changes.
Training on augumented user 10591 37/50 current_auc = 0.8524137931034483
User 10591 AUC after training: 0.850344827586207
User 10591 does not improve AUC. Reverting changes.
Training on augumented user 9219 38/50 current_auc = 0.8524137931034483
User 9219 AUC after training: 0.8524137931034483
User 9219 does not improve AUC. Reverting changes.
Training on augumented user 127542 39/50 current_auc = 0.8524137931034483
User 127542 AUC after training: 0.8503448275862069
User 127542 does not improve AUC. Reverting changes.
Training on augumented user 56472 40/50 current_auc = 0.8524137931034483
User 56472 AUC after training: 0.8496551724137931
User 56472 does not improve AUC. Reverting changes.
Training on augumented user 54430 41/50 current_auc = 0.8524137931034483
User 54430 AUC after training: 0.8510344827586207
User 54430 does not improve AUC. Reverting changes.
Training on augumented user 138332 42/50 current_auc = 0.8524137931034483
User 138332 AUC after training: 0.8510344827586207
User 138332 does not improve AUC. Reverting changes.
Training on augumented user 18243 43/50 current_auc = 0.8524137931034483
User 18243 AUC after training: 0.8517241379310344
User 18243 does not improve AUC. Reverting changes.
Training on augumented user 87348 44/50 current_auc = 0.8524137931034483
User 87348 AUC after training: 0.8503448275862069
User 87348 does not improve AUC. Reverting changes.
Training on augumented user 23672 45/50 current_auc = 0.8524137931034483
User 23672 AUC after training: 0.8496551724137931
User 23672 does not improve AUC. Reverting changes.
Training on augumented user 135330 46/50 current_auc = 0.8524137931034483
User 135330 AUC after training: 0.8524137931034483
User 135330 does not improve AUC. Reverting changes.
Training on augumented user 122563 47/50 current_auc = 0.8524137931034483
User 122563 AUC after training: 0.8517241379310345
User 122563 does not improve AUC. Reverting changes.
Training on augumented user 2272 48/50 current_auc = 0.8524137931034483
User 2272 AUC after training: 0.8517241379310344
User 2272 does not improve AUC. Reverting changes.
Training on augumented user 10292 49/50 current_auc = 0.8524137931034483
User 10292 AUC after training: 0.8482758620689655
User 10292 does not improve AUC. Reverting changes.
[2024-12-02 19:34:56.498199] start test user 100801 207/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:34:56.925669] start test user 100801 207/567 recall augumented users by random, augumented_users = [50464, 58429, 18771, 80214, 28339, 47002, 134628, 28862, 82871, 81876, 137758, 112544, 56027, 44921, 59247, 43176, 97559, 21531, 17876, 102057, 134331, 57108, 87743, 115466, 22664, 53311, 95043, 8328, 124436, 83723, 135392, 74423, 71410, 72249, 88158, 7644, 39293, 47183, 131728, 27808, 52217, 24869, 121649, 10201, 136327, 50407, 87098, 77262, 48101, 117557]
[2024-12-02 19:34:56.941958] user = 100801 Cloud 207/567
[2024-12-02 19:34:56.969206] user = 100801 Local 207/567
[2024-12-02 19:34:57.105545] user = 100801 Local+ 207/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:34:59.213776] user = 100801 MPDA- 207/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6160714285714286
Training on augumented user 50464 0/50 current_auc = 0.6160714285714286
User 50464 AUC after training: 0.6154761904761905
User 50464 does not improve AUC. Reverting changes.
Training on augumented user 58429 1/50 current_auc = 0.6160714285714286
User 58429 AUC after training: 0.6148809523809524
User 58429 does not improve AUC. Reverting changes.
Training on augumented user 18771 2/50 current_auc = 0.6160714285714286
User 18771 AUC after training: 0.6136904761904762
User 18771 does not improve AUC. Reverting changes.
Training on augumented user 80214 3/50 current_auc = 0.6160714285714286
User 80214 AUC after training: 0.6142857142857143
User 80214 does not improve AUC. Reverting changes.
Training on augumented user 28339 4/50 current_auc = 0.6160714285714286
User 28339 AUC after training: 0.6148809523809524
User 28339 does not improve AUC. Reverting changes.
Training on augumented user 47002 5/50 current_auc = 0.6160714285714286
User 47002 AUC after training: 0.6148809523809524
User 47002 does not improve AUC. Reverting changes.
Training on augumented user 134628 6/50 current_auc = 0.6160714285714286
User 134628 AUC after training: 0.6160714285714286
User 134628 does not improve AUC. Reverting changes.
Training on augumented user 28862 7/50 current_auc = 0.6160714285714286
User 28862 AUC after training: 0.6172619047619048
User 28862 improves AUC. Keeping the model.
Training on augumented user 82871 8/50 current_auc = 0.6172619047619048
User 82871 AUC after training: 0.6154761904761905
User 82871 does not improve AUC. Reverting changes.
Training on augumented user 81876 9/50 current_auc = 0.6172619047619048
User 81876 AUC after training: 0.6160714285714286
User 81876 does not improve AUC. Reverting changes.
Training on augumented user 137758 10/50 current_auc = 0.6172619047619048
User 137758 AUC after training: 0.6160714285714285
User 137758 does not improve AUC. Reverting changes.
Training on augumented user 112544 11/50 current_auc = 0.6172619047619048
User 112544 AUC after training: 0.6166666666666666
User 112544 does not improve AUC. Reverting changes.
Training on augumented user 56027 12/50 current_auc = 0.6172619047619048
User 56027 AUC after training: 0.6142857142857143
User 56027 does not improve AUC. Reverting changes.
Training on augumented user 44921 13/50 current_auc = 0.6172619047619048
User 44921 AUC after training: 0.6154761904761905
User 44921 does not improve AUC. Reverting changes.
Training on augumented user 59247 14/50 current_auc = 0.6172619047619048
User 59247 AUC after training: 0.6166666666666666
User 59247 does not improve AUC. Reverting changes.
Training on augumented user 43176 15/50 current_auc = 0.6172619047619048
User 43176 AUC after training: 0.6160714285714286
User 43176 does not improve AUC. Reverting changes.
Training on augumented user 97559 16/50 current_auc = 0.6172619047619048
User 97559 AUC after training: 0.6160714285714286
User 97559 does not improve AUC. Reverting changes.
Training on augumented user 21531 17/50 current_auc = 0.6172619047619048
User 21531 AUC after training: 0.6172619047619047
User 21531 does not improve AUC. Reverting changes.
Training on augumented user 17876 18/50 current_auc = 0.6172619047619048
User 17876 AUC after training: 0.6160714285714286
User 17876 does not improve AUC. Reverting changes.
Training on augumented user 102057 19/50 current_auc = 0.6172619047619048
User 102057 AUC after training: 0.6172619047619047
User 102057 does not improve AUC. Reverting changes.
Training on augumented user 134331 20/50 current_auc = 0.6172619047619048
User 134331 AUC after training: 0.6157738095238096
User 134331 does not improve AUC. Reverting changes.
Training on augumented user 57108 21/50 current_auc = 0.6172619047619048
User 57108 AUC after training: 0.6154761904761904
User 57108 does not improve AUC. Reverting changes.
Training on augumented user 87743 22/50 current_auc = 0.6172619047619048
User 87743 AUC after training: 0.6166666666666667
User 87743 does not improve AUC. Reverting changes.
Training on augumented user 115466 23/50 current_auc = 0.6172619047619048
User 115466 AUC after training: 0.6160714285714286
User 115466 does not improve AUC. Reverting changes.
Training on augumented user 22664 24/50 current_auc = 0.6172619047619048
User 22664 AUC after training: 0.6172619047619048
User 22664 does not improve AUC. Reverting changes.
Training on augumented user 53311 25/50 current_auc = 0.6172619047619048
User 53311 AUC after training: 0.6172619047619048
User 53311 does not improve AUC. Reverting changes.
Training on augumented user 95043 26/50 current_auc = 0.6172619047619048
User 95043 AUC after training: 0.6166666666666667
User 95043 does not improve AUC. Reverting changes.
Training on augumented user 8328 27/50 current_auc = 0.6172619047619048
User 8328 AUC after training: 0.6178571428571428
User 8328 improves AUC. Keeping the model.
Training on augumented user 124436 28/50 current_auc = 0.6178571428571428
User 124436 AUC after training: 0.6166666666666667
User 124436 does not improve AUC. Reverting changes.
Training on augumented user 83723 29/50 current_auc = 0.6178571428571428
User 83723 AUC after training: 0.6178571428571429
User 83723 improves AUC. Keeping the model.
Training on augumented user 135392 30/50 current_auc = 0.6178571428571429
User 135392 AUC after training: 0.6160714285714286
User 135392 does not improve AUC. Reverting changes.
Training on augumented user 74423 31/50 current_auc = 0.6178571428571429
User 74423 AUC after training: 0.6178571428571429
User 74423 does not improve AUC. Reverting changes.
Training on augumented user 71410 32/50 current_auc = 0.6178571428571429
User 71410 AUC after training: 0.6184523809523809
User 71410 improves AUC. Keeping the model.
Training on augumented user 72249 33/50 current_auc = 0.6184523809523809
User 72249 AUC after training: 0.6160714285714285
User 72249 does not improve AUC. Reverting changes.
Training on augumented user 88158 34/50 current_auc = 0.6184523809523809
User 88158 AUC after training: 0.6178571428571429
User 88158 does not improve AUC. Reverting changes.
Training on augumented user 7644 35/50 current_auc = 0.6184523809523809
User 7644 AUC after training: 0.618452380952381
User 7644 improves AUC. Keeping the model.
Training on augumented user 39293 36/50 current_auc = 0.618452380952381
User 39293 AUC after training: 0.618452380952381
User 39293 does not improve AUC. Reverting changes.
Training on augumented user 47183 37/50 current_auc = 0.618452380952381
User 47183 AUC after training: 0.618452380952381
User 47183 does not improve AUC. Reverting changes.
Training on augumented user 131728 38/50 current_auc = 0.618452380952381
User 131728 AUC after training: 0.6208333333333333
User 131728 improves AUC. Keeping the model.
Training on augumented user 27808 39/50 current_auc = 0.6208333333333333
User 27808 AUC after training: 0.6190476190476191
User 27808 does not improve AUC. Reverting changes.
Training on augumented user 52217 40/50 current_auc = 0.6208333333333333
User 52217 AUC after training: 0.618452380952381
User 52217 does not improve AUC. Reverting changes.
Training on augumented user 24869 41/50 current_auc = 0.6208333333333333
User 24869 AUC after training: 0.6220238095238095
User 24869 improves AUC. Keeping the model.
Training on augumented user 121649 42/50 current_auc = 0.6220238095238095
User 121649 AUC after training: 0.6202380952380953
User 121649 does not improve AUC. Reverting changes.
Training on augumented user 10201 43/50 current_auc = 0.6220238095238095
User 10201 AUC after training: 0.6226190476190476
User 10201 improves AUC. Keeping the model.
Training on augumented user 136327 44/50 current_auc = 0.6226190476190476
User 136327 AUC after training: 0.6208333333333333
User 136327 does not improve AUC. Reverting changes.
Training on augumented user 50407 45/50 current_auc = 0.6226190476190476
User 50407 AUC after training: 0.6238095238095238
User 50407 improves AUC. Keeping the model.
Training on augumented user 87098 46/50 current_auc = 0.6238095238095238
User 87098 AUC after training: 0.6232142857142857
User 87098 does not improve AUC. Reverting changes.
Training on augumented user 77262 47/50 current_auc = 0.6238095238095238
User 77262 AUC after training: 0.6220238095238095
User 77262 does not improve AUC. Reverting changes.
Training on augumented user 48101 48/50 current_auc = 0.6238095238095238
User 48101 AUC after training: 0.6238095238095238
User 48101 does not improve AUC. Reverting changes.
Training on augumented user 117557 49/50 current_auc = 0.6238095238095238
User 117557 AUC after training: 0.6220238095238095
User 117557 does not improve AUC. Reverting changes.
[2024-12-02 19:35:26.760318] start test user 100804 208/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:35:27.506473] start test user 100804 208/567 recall augumented users by random, augumented_users = [102226, 35733, 108435, 119212, 13947, 54046, 131246, 80330, 96577, 63290, 3349, 128291, 4391, 48717, 110987, 32902, 129904, 134323, 120635, 134715, 74795, 73130, 71126, 57113, 39843, 112174, 111149, 103541, 108762, 9984, 90955, 99681, 20832, 26243, 11449, 79593, 15520, 83540, 13447, 101552, 74347, 83441, 116811, 2909, 75239, 21254, 60623, 118550, 133887, 135706]
[2024-12-02 19:35:27.540757] user = 100804 Cloud 208/567
[2024-12-02 19:35:27.564574] user = 100804 Local 208/567
[2024-12-02 19:35:27.802638] user = 100804 Local+ 208/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:35:30.533483] user = 100804 MPDA- 208/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6777777777777778
Training on augumented user 102226 0/50 current_auc = 0.6777777777777778
User 102226 AUC after training: 0.6777777777777778
User 102226 does not improve AUC. Reverting changes.
Training on augumented user 35733 1/50 current_auc = 0.6777777777777778
User 35733 AUC after training: 0.6766666666666666
User 35733 does not improve AUC. Reverting changes.
Training on augumented user 108435 2/50 current_auc = 0.6777777777777778
User 108435 AUC after training: 0.6744444444444444
User 108435 does not improve AUC. Reverting changes.
Training on augumented user 119212 3/50 current_auc = 0.6777777777777778
User 119212 AUC after training: 0.6744444444444444
User 119212 does not improve AUC. Reverting changes.
Training on augumented user 13947 4/50 current_auc = 0.6777777777777778
User 13947 AUC after training: 0.6744444444444444
User 13947 does not improve AUC. Reverting changes.
Training on augumented user 54046 5/50 current_auc = 0.6777777777777778
User 54046 AUC after training: 0.6722222222222222
User 54046 does not improve AUC. Reverting changes.
Training on augumented user 131246 6/50 current_auc = 0.6777777777777778
User 131246 AUC after training: 0.6766666666666666
User 131246 does not improve AUC. Reverting changes.
Training on augumented user 80330 7/50 current_auc = 0.6777777777777778
User 80330 AUC after training: 0.6711111111111111
User 80330 does not improve AUC. Reverting changes.
Training on augumented user 96577 8/50 current_auc = 0.6777777777777778
User 96577 AUC after training: 0.6788888888888889
User 96577 improves AUC. Keeping the model.
Training on augumented user 63290 9/50 current_auc = 0.6788888888888889
User 63290 AUC after training: 0.6799999999999999
User 63290 improves AUC. Keeping the model.
Training on augumented user 3349 10/50 current_auc = 0.6799999999999999
User 3349 AUC after training: 0.68
User 3349 improves AUC. Keeping the model.
Training on augumented user 128291 11/50 current_auc = 0.68
User 128291 AUC after training: 0.6833333333333333
User 128291 improves AUC. Keeping the model.
Training on augumented user 4391 12/50 current_auc = 0.6833333333333333
User 4391 AUC after training: 0.6822222222222222
User 4391 does not improve AUC. Reverting changes.
Training on augumented user 48717 13/50 current_auc = 0.6833333333333333
User 48717 AUC after training: 0.6822222222222222
User 48717 does not improve AUC. Reverting changes.
Training on augumented user 110987 14/50 current_auc = 0.6833333333333333
User 110987 AUC after training: 0.6877777777777778
User 110987 improves AUC. Keeping the model.
Training on augumented user 32902 15/50 current_auc = 0.6877777777777778
User 32902 AUC after training: 0.6833333333333333
User 32902 does not improve AUC. Reverting changes.
Training on augumented user 129904 16/50 current_auc = 0.6877777777777778
User 129904 AUC after training: 0.6844444444444444
User 129904 does not improve AUC. Reverting changes.
Training on augumented user 134323 17/50 current_auc = 0.6877777777777778
User 134323 AUC after training: 0.6844444444444445
User 134323 does not improve AUC. Reverting changes.
Training on augumented user 120635 18/50 current_auc = 0.6877777777777778
User 120635 AUC after training: 0.6900000000000001
User 120635 improves AUC. Keeping the model.
Training on augumented user 134715 19/50 current_auc = 0.6900000000000001
User 134715 AUC after training: 0.69
User 134715 does not improve AUC. Reverting changes.
Training on augumented user 74795 20/50 current_auc = 0.6900000000000001
User 74795 AUC after training: 0.6900000000000001
User 74795 does not improve AUC. Reverting changes.
Training on augumented user 73130 21/50 current_auc = 0.6900000000000001
User 73130 AUC after training: 0.6855555555555556
User 73130 does not improve AUC. Reverting changes.
Training on augumented user 71126 22/50 current_auc = 0.6900000000000001
User 71126 AUC after training: 0.6900000000000001
User 71126 does not improve AUC. Reverting changes.
Training on augumented user 57113 23/50 current_auc = 0.6900000000000001
User 57113 AUC after training: 0.6866666666666666
User 57113 does not improve AUC. Reverting changes.
Training on augumented user 39843 24/50 current_auc = 0.6900000000000001
User 39843 AUC after training: 0.6922222222222223
User 39843 improves AUC. Keeping the model.
Training on augumented user 112174 25/50 current_auc = 0.6922222222222223
User 112174 AUC after training: 0.6799999999999999
User 112174 does not improve AUC. Reverting changes.
Training on augumented user 111149 26/50 current_auc = 0.6922222222222223
User 111149 AUC after training: 0.6833333333333333
User 111149 does not improve AUC. Reverting changes.
Training on augumented user 103541 27/50 current_auc = 0.6922222222222223
User 103541 AUC after training: 0.6911111111111111
User 103541 does not improve AUC. Reverting changes.
Training on augumented user 108762 28/50 current_auc = 0.6922222222222223
User 108762 AUC after training: 0.691111111111111
User 108762 does not improve AUC. Reverting changes.
Training on augumented user 9984 29/50 current_auc = 0.6922222222222223
User 9984 AUC after training: 0.6900000000000001
User 9984 does not improve AUC. Reverting changes.
Training on augumented user 90955 30/50 current_auc = 0.6922222222222223
User 90955 AUC after training: 0.6933333333333334
User 90955 improves AUC. Keeping the model.
Training on augumented user 99681 31/50 current_auc = 0.6933333333333334
User 99681 AUC after training: 0.6922222222222223
User 99681 does not improve AUC. Reverting changes.
Training on augumented user 20832 32/50 current_auc = 0.6933333333333334
User 20832 AUC after training: 0.6877777777777778
User 20832 does not improve AUC. Reverting changes.
Training on augumented user 26243 33/50 current_auc = 0.6933333333333334
User 26243 AUC after training: 0.6922222222222222
User 26243 does not improve AUC. Reverting changes.
Training on augumented user 11449 34/50 current_auc = 0.6933333333333334
User 11449 AUC after training: 0.69
User 11449 does not improve AUC. Reverting changes.
Training on augumented user 79593 35/50 current_auc = 0.6933333333333334
User 79593 AUC after training: 0.6922222222222222
User 79593 does not improve AUC. Reverting changes.
Training on augumented user 15520 36/50 current_auc = 0.6933333333333334
User 15520 AUC after training: 0.6900000000000001
User 15520 does not improve AUC. Reverting changes.
Training on augumented user 83540 37/50 current_auc = 0.6933333333333334
User 83540 AUC after training: 0.6922222222222222
User 83540 does not improve AUC. Reverting changes.
Training on augumented user 13447 38/50 current_auc = 0.6933333333333334
User 13447 AUC after training: 0.69
User 13447 does not improve AUC. Reverting changes.
Training on augumented user 101552 39/50 current_auc = 0.6933333333333334
User 101552 AUC after training: 0.6866666666666666
User 101552 does not improve AUC. Reverting changes.
Training on augumented user 74347 40/50 current_auc = 0.6933333333333334
User 74347 AUC after training: 0.6922222222222223
User 74347 does not improve AUC. Reverting changes.
Training on augumented user 83441 41/50 current_auc = 0.6933333333333334
User 83441 AUC after training: 0.6900000000000001
User 83441 does not improve AUC. Reverting changes.
Training on augumented user 116811 42/50 current_auc = 0.6933333333333334
User 116811 AUC after training: 0.6911111111111111
User 116811 does not improve AUC. Reverting changes.
Training on augumented user 2909 43/50 current_auc = 0.6933333333333334
User 2909 AUC after training: 0.6900000000000001
User 2909 does not improve AUC. Reverting changes.
Training on augumented user 75239 44/50 current_auc = 0.6933333333333334
User 75239 AUC after training: 0.6877777777777778
User 75239 does not improve AUC. Reverting changes.
Training on augumented user 21254 45/50 current_auc = 0.6933333333333334
User 21254 AUC after training: 0.6911111111111111
User 21254 does not improve AUC. Reverting changes.
Training on augumented user 60623 46/50 current_auc = 0.6933333333333334
User 60623 AUC after training: 0.6900000000000001
User 60623 does not improve AUC. Reverting changes.
Training on augumented user 118550 47/50 current_auc = 0.6933333333333334
User 118550 AUC after training: 0.6911111111111111
User 118550 does not improve AUC. Reverting changes.
Training on augumented user 133887 48/50 current_auc = 0.6933333333333334
User 133887 AUC after training: 0.6922222222222222
User 133887 does not improve AUC. Reverting changes.
Training on augumented user 135706 49/50 current_auc = 0.6933333333333334
User 135706 AUC after training: 0.6911111111111111
User 135706 does not improve AUC. Reverting changes.
[2024-12-02 19:35:59.825809] start test user 100872 209/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:36:00.310941] start test user 100872 209/567 recall augumented users by random, augumented_users = [111883, 121830, 72335, 64265, 109625, 121316, 5106, 28235, 6725, 18836, 72716, 132849, 79511, 101304, 63385, 87257, 10593, 81013, 18250, 49251, 119679, 27813, 41668, 97223, 118386, 5809, 53521, 65083, 41320, 124480, 80508, 121618, 25939, 8114, 53569, 58704, 13914, 5026, 74004, 3847, 129196, 6571, 59237, 67930, 116936, 87925, 59068, 92384, 8644, 91874]
[2024-12-02 19:36:00.325681] user = 100872 Cloud 209/567
[2024-12-02 19:36:00.339127] user = 100872 Local 209/567
[2024-12-02 19:36:00.387367] user = 100872 Local+ 209/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:36:03.138784] user = 100872 MPDA- 209/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5103058510638299
Training on augumented user 111883 0/50 current_auc = 0.5103058510638299
User 111883 AUC after training: 0.5113031914893618
User 111883 improves AUC. Keeping the model.
Training on augumented user 121830 1/50 current_auc = 0.5113031914893618
User 121830 AUC after training: 0.5136303191489362
User 121830 improves AUC. Keeping the model.
Training on augumented user 72335 2/50 current_auc = 0.5136303191489362
User 72335 AUC after training: 0.510970744680851
User 72335 does not improve AUC. Reverting changes.
Training on augumented user 64265 3/50 current_auc = 0.5136303191489362
User 64265 AUC after training: 0.5142952127659575
User 64265 improves AUC. Keeping the model.
Training on augumented user 109625 4/50 current_auc = 0.5142952127659575
User 109625 AUC after training: 0.5132978723404256
User 109625 does not improve AUC. Reverting changes.
Training on augumented user 121316 5/50 current_auc = 0.5142952127659575
User 121316 AUC after training: 0.5123005319148937
User 121316 does not improve AUC. Reverting changes.
Training on augumented user 5106 6/50 current_auc = 0.5142952127659575
User 5106 AUC after training: 0.5116356382978724
User 5106 does not improve AUC. Reverting changes.
Training on augumented user 28235 7/50 current_auc = 0.5142952127659575
User 28235 AUC after training: 0.511968085106383
User 28235 does not improve AUC. Reverting changes.
Training on augumented user 6725 8/50 current_auc = 0.5142952127659575
User 6725 AUC after training: 0.5126329787234043
User 6725 does not improve AUC. Reverting changes.
Training on augumented user 18836 9/50 current_auc = 0.5142952127659575
User 18836 AUC after training: 0.5136303191489362
User 18836 does not improve AUC. Reverting changes.
Training on augumented user 72716 10/50 current_auc = 0.5142952127659575
User 72716 AUC after training: 0.511968085106383
User 72716 does not improve AUC. Reverting changes.
Training on augumented user 132849 11/50 current_auc = 0.5142952127659575
User 132849 AUC after training: 0.5116356382978724
User 132849 does not improve AUC. Reverting changes.
Training on augumented user 79511 12/50 current_auc = 0.5142952127659575
User 79511 AUC after training: 0.5123005319148936
User 79511 does not improve AUC. Reverting changes.
Training on augumented user 101304 13/50 current_auc = 0.5142952127659575
User 101304 AUC after training: 0.511968085106383
User 101304 does not improve AUC. Reverting changes.
Training on augumented user 63385 14/50 current_auc = 0.5142952127659575
User 63385 AUC after training: 0.5129654255319149
User 63385 does not improve AUC. Reverting changes.
Training on augumented user 87257 15/50 current_auc = 0.5142952127659575
User 87257 AUC after training: 0.5129654255319149
User 87257 does not improve AUC. Reverting changes.
Training on augumented user 10593 16/50 current_auc = 0.5142952127659575
User 10593 AUC after training: 0.5132978723404256
User 10593 does not improve AUC. Reverting changes.
Training on augumented user 81013 17/50 current_auc = 0.5142952127659575
User 81013 AUC after training: 0.5126329787234043
User 81013 does not improve AUC. Reverting changes.
Training on augumented user 18250 18/50 current_auc = 0.5142952127659575
User 18250 AUC after training: 0.5139627659574468
User 18250 does not improve AUC. Reverting changes.
Training on augumented user 49251 19/50 current_auc = 0.5142952127659575
User 49251 AUC after training: 0.5123005319148937
User 49251 does not improve AUC. Reverting changes.
Training on augumented user 119679 20/50 current_auc = 0.5142952127659575
User 119679 AUC after training: 0.5123005319148937
User 119679 does not improve AUC. Reverting changes.
Training on augumented user 27813 21/50 current_auc = 0.5142952127659575
User 27813 AUC after training: 0.5103058510638299
User 27813 does not improve AUC. Reverting changes.
Training on augumented user 41668 22/50 current_auc = 0.5142952127659575
User 41668 AUC after training: 0.5086436170212766
User 41668 does not improve AUC. Reverting changes.
Training on augumented user 97223 23/50 current_auc = 0.5142952127659575
User 97223 AUC after training: 0.5113031914893618
User 97223 does not improve AUC. Reverting changes.
Training on augumented user 118386 24/50 current_auc = 0.5142952127659575
User 118386 AUC after training: 0.5139627659574468
User 118386 does not improve AUC. Reverting changes.
Training on augumented user 5809 25/50 current_auc = 0.5142952127659575
User 5809 AUC after training: 0.5136303191489362
User 5809 does not improve AUC. Reverting changes.
Training on augumented user 53521 26/50 current_auc = 0.5142952127659575
User 53521 AUC after training: 0.5139627659574468
User 53521 does not improve AUC. Reverting changes.
Training on augumented user 65083 27/50 current_auc = 0.5142952127659575
User 65083 AUC after training: 0.5109707446808511
User 65083 does not improve AUC. Reverting changes.
Training on augumented user 41320 28/50 current_auc = 0.5142952127659575
User 41320 AUC after training: 0.5096409574468086
User 41320 does not improve AUC. Reverting changes.
Training on augumented user 124480 29/50 current_auc = 0.5142952127659575
User 124480 AUC after training: 0.5129654255319149
User 124480 does not improve AUC. Reverting changes.
Training on augumented user 80508 30/50 current_auc = 0.5142952127659575
User 80508 AUC after training: 0.5126329787234043
User 80508 does not improve AUC. Reverting changes.
Training on augumented user 121618 31/50 current_auc = 0.5142952127659575
User 121618 AUC after training: 0.5123005319148937
User 121618 does not improve AUC. Reverting changes.
Training on augumented user 25939 32/50 current_auc = 0.5142952127659575
User 25939 AUC after training: 0.5132978723404256
User 25939 does not improve AUC. Reverting changes.
Training on augumented user 8114 33/50 current_auc = 0.5142952127659575
User 8114 AUC after training: 0.5123005319148937
User 8114 does not improve AUC. Reverting changes.
Training on augumented user 53569 34/50 current_auc = 0.5142952127659575
User 53569 AUC after training: 0.5116356382978723
User 53569 does not improve AUC. Reverting changes.
Training on augumented user 58704 35/50 current_auc = 0.5142952127659575
User 58704 AUC after training: 0.511968085106383
User 58704 does not improve AUC. Reverting changes.
Training on augumented user 13914 36/50 current_auc = 0.5142952127659575
User 13914 AUC after training: 0.5126329787234043
User 13914 does not improve AUC. Reverting changes.
Training on augumented user 5026 37/50 current_auc = 0.5142952127659575
User 5026 AUC after training: 0.5136303191489362
User 5026 does not improve AUC. Reverting changes.
Training on augumented user 74004 38/50 current_auc = 0.5142952127659575
User 74004 AUC after training: 0.5126329787234043
User 74004 does not improve AUC. Reverting changes.
Training on augumented user 3847 39/50 current_auc = 0.5142952127659575
User 3847 AUC after training: 0.5129654255319149
User 3847 does not improve AUC. Reverting changes.
Training on augumented user 129196 40/50 current_auc = 0.5142952127659575
User 129196 AUC after training: 0.5113031914893618
User 129196 does not improve AUC. Reverting changes.
Training on augumented user 6571 41/50 current_auc = 0.5142952127659575
User 6571 AUC after training: 0.511968085106383
User 6571 does not improve AUC. Reverting changes.
Training on augumented user 59237 42/50 current_auc = 0.5142952127659575
User 59237 AUC after training: 0.5126329787234043
User 59237 does not improve AUC. Reverting changes.
Training on augumented user 67930 43/50 current_auc = 0.5142952127659575
User 67930 AUC after training: 0.5113031914893618
User 67930 does not improve AUC. Reverting changes.
Training on augumented user 116936 44/50 current_auc = 0.5142952127659575
User 116936 AUC after training: 0.5129654255319149
User 116936 does not improve AUC. Reverting changes.
Training on augumented user 87925 45/50 current_auc = 0.5142952127659575
User 87925 AUC after training: 0.5106382978723404
User 87925 does not improve AUC. Reverting changes.
Training on augumented user 59068 46/50 current_auc = 0.5142952127659575
User 59068 AUC after training: 0.5126329787234043
User 59068 does not improve AUC. Reverting changes.
Training on augumented user 92384 47/50 current_auc = 0.5142952127659575
User 92384 AUC after training: 0.5106382978723405
User 92384 does not improve AUC. Reverting changes.
Training on augumented user 8644 48/50 current_auc = 0.5142952127659575
User 8644 AUC after training: 0.5103058510638298
User 8644 does not improve AUC. Reverting changes.
Training on augumented user 91874 49/50 current_auc = 0.5142952127659575
User 91874 AUC after training: 0.5126329787234043
User 91874 does not improve AUC. Reverting changes.
[2024-12-02 19:36:33.484625] start test user 100891 210/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:36:34.162631] start test user 100891 210/567 recall augumented users by random, augumented_users = [96458, 109824, 58592, 76756, 46357, 6290, 61454, 66649, 37946, 136417, 137625, 96226, 25770, 89505, 50728, 16317, 115063, 48827, 37589, 49749, 87809, 46115, 105429, 137188, 119292, 33969, 55357, 89292, 107247, 83256, 129671, 2117, 1838, 41054, 42848, 101293, 103834, 96276, 64359, 37644, 35477, 73450, 11582, 128885, 17695, 94918, 122828, 30181, 50574, 45696]
[2024-12-02 19:36:34.177459] user = 100891 Cloud 210/567
[2024-12-02 19:36:34.187422] user = 100891 Local 210/567
[2024-12-02 19:36:34.207422] user = 100891 Local+ 210/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:36:36.501959] user = 100891 MPDA- 210/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.2
Training on augumented user 96458 0/50 current_auc = 0.2
User 96458 AUC after training: 0.2
User 96458 does not improve AUC. Reverting changes.
Training on augumented user 109824 1/50 current_auc = 0.2
User 109824 AUC after training: 0.2
User 109824 does not improve AUC. Reverting changes.
Training on augumented user 58592 2/50 current_auc = 0.2
User 58592 AUC after training: 0.2
User 58592 does not improve AUC. Reverting changes.
Training on augumented user 76756 3/50 current_auc = 0.2
User 76756 AUC after training: 0.2
User 76756 does not improve AUC. Reverting changes.
Training on augumented user 46357 4/50 current_auc = 0.2
User 46357 AUC after training: 0.2
User 46357 does not improve AUC. Reverting changes.
Training on augumented user 6290 5/50 current_auc = 0.2
User 6290 AUC after training: 0.2
User 6290 does not improve AUC. Reverting changes.
Training on augumented user 61454 6/50 current_auc = 0.2
User 61454 AUC after training: 0.2
User 61454 does not improve AUC. Reverting changes.
Training on augumented user 66649 7/50 current_auc = 0.2
User 66649 AUC after training: 0.2
User 66649 does not improve AUC. Reverting changes.
Training on augumented user 37946 8/50 current_auc = 0.2
User 37946 AUC after training: 0.2
User 37946 does not improve AUC. Reverting changes.
Training on augumented user 136417 9/50 current_auc = 0.2
User 136417 AUC after training: 0.2
User 136417 does not improve AUC. Reverting changes.
Training on augumented user 137625 10/50 current_auc = 0.2
User 137625 AUC after training: 0.2
User 137625 does not improve AUC. Reverting changes.
Training on augumented user 96226 11/50 current_auc = 0.2
User 96226 AUC after training: 0.2
User 96226 does not improve AUC. Reverting changes.
Training on augumented user 25770 12/50 current_auc = 0.2
User 25770 AUC after training: 0.2
User 25770 does not improve AUC. Reverting changes.
Training on augumented user 89505 13/50 current_auc = 0.2
User 89505 AUC after training: 0.2
User 89505 does not improve AUC. Reverting changes.
Training on augumented user 50728 14/50 current_auc = 0.2
User 50728 AUC after training: 0.2
User 50728 does not improve AUC. Reverting changes.
Training on augumented user 16317 15/50 current_auc = 0.2
User 16317 AUC after training: 0.2
User 16317 does not improve AUC. Reverting changes.
Training on augumented user 115063 16/50 current_auc = 0.2
User 115063 AUC after training: 0.2
User 115063 does not improve AUC. Reverting changes.
Training on augumented user 48827 17/50 current_auc = 0.2
User 48827 AUC after training: 0.2
User 48827 does not improve AUC. Reverting changes.
Training on augumented user 37589 18/50 current_auc = 0.2
User 37589 AUC after training: 0.2
User 37589 does not improve AUC. Reverting changes.
Training on augumented user 49749 19/50 current_auc = 0.2
User 49749 AUC after training: 0.2
User 49749 does not improve AUC. Reverting changes.
Training on augumented user 87809 20/50 current_auc = 0.2
User 87809 AUC after training: 0.2
User 87809 does not improve AUC. Reverting changes.
Training on augumented user 46115 21/50 current_auc = 0.2
User 46115 AUC after training: 0.2
User 46115 does not improve AUC. Reverting changes.
Training on augumented user 105429 22/50 current_auc = 0.2
User 105429 AUC after training: 0.2
User 105429 does not improve AUC. Reverting changes.
Training on augumented user 137188 23/50 current_auc = 0.2
User 137188 AUC after training: 0.2
User 137188 does not improve AUC. Reverting changes.
Training on augumented user 119292 24/50 current_auc = 0.2
User 119292 AUC after training: 0.2
User 119292 does not improve AUC. Reverting changes.
Training on augumented user 33969 25/50 current_auc = 0.2
User 33969 AUC after training: 0.2
User 33969 does not improve AUC. Reverting changes.
Training on augumented user 55357 26/50 current_auc = 0.2
User 55357 AUC after training: 0.2
User 55357 does not improve AUC. Reverting changes.
Training on augumented user 89292 27/50 current_auc = 0.2
User 89292 AUC after training: 0.2
User 89292 does not improve AUC. Reverting changes.
Training on augumented user 107247 28/50 current_auc = 0.2
User 107247 AUC after training: 0.2
User 107247 does not improve AUC. Reverting changes.
Training on augumented user 83256 29/50 current_auc = 0.2
User 83256 AUC after training: 0.2
User 83256 does not improve AUC. Reverting changes.
Training on augumented user 129671 30/50 current_auc = 0.2
User 129671 AUC after training: 0.2
User 129671 does not improve AUC. Reverting changes.
Training on augumented user 2117 31/50 current_auc = 0.2
User 2117 AUC after training: 0.2
User 2117 does not improve AUC. Reverting changes.
Training on augumented user 1838 32/50 current_auc = 0.2
User 1838 AUC after training: 0.2
User 1838 does not improve AUC. Reverting changes.
Training on augumented user 41054 33/50 current_auc = 0.2
User 41054 AUC after training: 0.2
User 41054 does not improve AUC. Reverting changes.
Training on augumented user 42848 34/50 current_auc = 0.2
User 42848 AUC after training: 0.2
User 42848 does not improve AUC. Reverting changes.
Training on augumented user 101293 35/50 current_auc = 0.2
User 101293 AUC after training: 0.2
User 101293 does not improve AUC. Reverting changes.
Training on augumented user 103834 36/50 current_auc = 0.2
User 103834 AUC after training: 0.2
User 103834 does not improve AUC. Reverting changes.
Training on augumented user 96276 37/50 current_auc = 0.2
User 96276 AUC after training: 0.2
User 96276 does not improve AUC. Reverting changes.
Training on augumented user 64359 38/50 current_auc = 0.2
User 64359 AUC after training: 0.2
User 64359 does not improve AUC. Reverting changes.
Training on augumented user 37644 39/50 current_auc = 0.2
User 37644 AUC after training: 0.2
User 37644 does not improve AUC. Reverting changes.
Training on augumented user 35477 40/50 current_auc = 0.2
User 35477 AUC after training: 0.2
User 35477 does not improve AUC. Reverting changes.
Training on augumented user 73450 41/50 current_auc = 0.2
User 73450 AUC after training: 0.2
User 73450 does not improve AUC. Reverting changes.
Training on augumented user 11582 42/50 current_auc = 0.2
User 11582 AUC after training: 0.2
User 11582 does not improve AUC. Reverting changes.
Training on augumented user 128885 43/50 current_auc = 0.2
User 128885 AUC after training: 0.2
User 128885 does not improve AUC. Reverting changes.
Training on augumented user 17695 44/50 current_auc = 0.2
User 17695 AUC after training: 0.2
User 17695 does not improve AUC. Reverting changes.
Training on augumented user 94918 45/50 current_auc = 0.2
User 94918 AUC after training: 0.2
User 94918 does not improve AUC. Reverting changes.
Training on augumented user 122828 46/50 current_auc = 0.2
User 122828 AUC after training: 0.2
User 122828 does not improve AUC. Reverting changes.
Training on augumented user 30181 47/50 current_auc = 0.2
User 30181 AUC after training: 0.2
User 30181 does not improve AUC. Reverting changes.
Training on augumented user 50574 48/50 current_auc = 0.2
User 50574 AUC after training: 0.2
User 50574 does not improve AUC. Reverting changes.
Training on augumented user 45696 49/50 current_auc = 0.2
User 45696 AUC after training: 0.2
User 45696 does not improve AUC. Reverting changes.
[2024-12-02 19:37:09.014397] start test user 100895 211/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:37:09.848047] start test user 100895 211/567 recall augumented users by random, augumented_users = [83784, 8111, 113380, 122611, 2146, 4801, 38076, 56679, 93233, 90925, 57242, 124334, 79243, 16617, 22331, 108607, 74751, 58705, 63855, 87806, 37183, 136827, 91, 52724, 80073, 111632, 11229, 79379, 105342, 17806, 106860, 35981, 49563, 135985, 123408, 124543, 22390, 127635, 118180, 89927, 37585, 37367, 130215, 35952, 58604, 108601, 52651, 89208, 69146, 86874]
[2024-12-02 19:37:09.876171] user = 100895 Cloud 211/567
[2024-12-02 19:37:09.900935] user = 100895 Local 211/567
[2024-12-02 19:37:09.956038] user = 100895 Local+ 211/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:37:13.171331] user = 100895 MPDA- 211/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5489804353816479
Training on augumented user 83784 0/50 current_auc = 0.5489804353816479
User 83784 AUC after training: 0.549669330394048
User 83784 improves AUC. Keeping the model.
Training on augumented user 8111 1/50 current_auc = 0.549669330394048
User 8111 AUC after training: 0.550220446403968
User 8111 improves AUC. Keeping the model.
Training on augumented user 113380 2/50 current_auc = 0.550220446403968
User 113380 AUC after training: 0.5496004408928079
User 113380 does not improve AUC. Reverting changes.
Training on augumented user 122611 3/50 current_auc = 0.550220446403968
User 122611 AUC after training: 0.5507715624138881
User 122611 improves AUC. Keeping the model.
Training on augumented user 2146 4/50 current_auc = 0.5507715624138881
User 2146 AUC after training: 0.5513915679250482
User 2146 improves AUC. Keeping the model.
Training on augumented user 4801 5/50 current_auc = 0.5513915679250482
User 4801 AUC after training: 0.5522182419399284
User 4801 improves AUC. Keeping the model.
Training on augumented user 38076 6/50 current_auc = 0.5522182419399284
User 38076 AUC after training: 0.5520804629374483
User 38076 does not improve AUC. Reverting changes.
Training on augumented user 56679 7/50 current_auc = 0.5522182419399284
User 56679 AUC after training: 0.5521493524386883
User 56679 does not improve AUC. Reverting changes.
Training on augumented user 93233 8/50 current_auc = 0.5522182419399284
User 93233 AUC after training: 0.5509093414163682
User 93233 does not improve AUC. Reverting changes.
Training on augumented user 90925 9/50 current_auc = 0.5522182419399284
User 90925 AUC after training: 0.5526315789473684
User 90925 improves AUC. Keeping the model.
Training on augumented user 57242 10/50 current_auc = 0.5526315789473684
User 57242 AUC after training: 0.5519426839349684
User 57242 does not improve AUC. Reverting changes.
Training on augumented user 124334 11/50 current_auc = 0.5526315789473684
User 124334 AUC after training: 0.5524937999448883
User 124334 does not improve AUC. Reverting changes.
Training on augumented user 79243 12/50 current_auc = 0.5526315789473684
User 79243 AUC after training: 0.5526315789473685
User 79243 improves AUC. Keeping the model.
Training on augumented user 16617 13/50 current_auc = 0.5526315789473685
User 16617 AUC after training: 0.5515982364287683
User 16617 does not improve AUC. Reverting changes.
Training on augumented user 22331 14/50 current_auc = 0.5526315789473685
User 22331 AUC after training: 0.5532515844585286
User 22331 improves AUC. Keeping the model.
Training on augumented user 108607 15/50 current_auc = 0.5532515844585286
User 108607 AUC after training: 0.5520804629374484
User 108607 does not improve AUC. Reverting changes.
Training on augumented user 74751 16/50 current_auc = 0.5532515844585286
User 74751 AUC after training: 0.5531826949572886
User 74751 does not improve AUC. Reverting changes.
Training on augumented user 58705 17/50 current_auc = 0.5532515844585286
User 58705 AUC after training: 0.5514604574262882
User 58705 does not improve AUC. Reverting changes.
Training on augumented user 63855 18/50 current_auc = 0.5532515844585286
User 63855 AUC after training: 0.5521493524386883
User 63855 does not improve AUC. Reverting changes.
Training on augumented user 87806 19/50 current_auc = 0.5532515844585286
User 87806 AUC after training: 0.5531138054560485
User 87806 does not improve AUC. Reverting changes.
Training on augumented user 37183 20/50 current_auc = 0.5532515844585286
User 37183 AUC after training: 0.5531138054560485
User 37183 does not improve AUC. Reverting changes.
Training on augumented user 136827 21/50 current_auc = 0.5532515844585286
User 136827 AUC after training: 0.5534582529622485
User 136827 improves AUC. Keeping the model.
Training on augumented user 91 22/50 current_auc = 0.5534582529622485
User 91 AUC after training: 0.5507026729126481
User 91 does not improve AUC. Reverting changes.
Training on augumented user 52724 23/50 current_auc = 0.5534582529622485
User 52724 AUC after training: 0.5522182419399283
User 52724 does not improve AUC. Reverting changes.
Training on augumented user 80073 24/50 current_auc = 0.5534582529622485
User 80073 AUC after training: 0.5533204739597686
User 80073 does not improve AUC. Reverting changes.
Training on augumented user 111632 25/50 current_auc = 0.5534582529622485
User 111632 AUC after training: 0.5500137779002481
User 111632 does not improve AUC. Reverting changes.
Training on augumented user 11229 26/50 current_auc = 0.5534582529622485
User 11229 AUC after training: 0.5511160099200881
User 11229 does not improve AUC. Reverting changes.
Training on augumented user 79379 27/50 current_auc = 0.5534582529622485
User 79379 AUC after training: 0.5538027004684486
User 79379 improves AUC. Keeping the model.
Training on augumented user 105342 28/50 current_auc = 0.5538027004684486
User 105342 AUC after training: 0.5533204739597686
User 105342 does not improve AUC. Reverting changes.
Training on augumented user 17806 29/50 current_auc = 0.5538027004684486
User 17806 AUC after training: 0.5536649214659686
User 17806 does not improve AUC. Reverting changes.
Training on augumented user 106860 30/50 current_auc = 0.5538027004684486
User 106860 AUC after training: 0.5556627170019288
User 106860 improves AUC. Keeping the model.
Training on augumented user 35981 31/50 current_auc = 0.5556627170019288
User 35981 AUC after training: 0.5542160374758887
User 35981 does not improve AUC. Reverting changes.
Training on augumented user 49563 32/50 current_auc = 0.5556627170019288
User 49563 AUC after training: 0.556076054009369
User 49563 improves AUC. Keeping the model.
Training on augumented user 135985 33/50 current_auc = 0.556076054009369
User 135985 AUC after training: 0.5538027004684485
User 135985 does not improve AUC. Reverting changes.
Training on augumented user 123408 34/50 current_auc = 0.556076054009369
User 123408 AUC after training: 0.5541471479746487
User 123408 does not improve AUC. Reverting changes.
Training on augumented user 124543 35/50 current_auc = 0.556076054009369
User 124543 AUC after training: 0.5553871589969688
User 124543 does not improve AUC. Reverting changes.
Training on augumented user 22390 36/50 current_auc = 0.556076054009369
User 22390 AUC after training: 0.556351612014329
User 22390 improves AUC. Keeping the model.
Training on augumented user 127635 37/50 current_auc = 0.556351612014329
User 127635 AUC after training: 0.556144943510609
User 127635 does not improve AUC. Reverting changes.
Training on augumented user 118180 38/50 current_auc = 0.556351612014329
User 118180 AUC after training: 0.5553182694957288
User 118180 does not improve AUC. Reverting changes.
Training on augumented user 89927 39/50 current_auc = 0.556351612014329
User 89927 AUC after training: 0.5550427114907688
User 89927 does not improve AUC. Reverting changes.
Training on augumented user 37585 40/50 current_auc = 0.556351612014329
User 37585 AUC after training: 0.5515982364287682
User 37585 does not improve AUC. Reverting changes.
Training on augumented user 37367 41/50 current_auc = 0.556351612014329
User 37367 AUC after training: 0.5552493799944889
User 37367 does not improve AUC. Reverting changes.
Training on augumented user 130215 42/50 current_auc = 0.556351612014329
User 130215 AUC after training: 0.5556627170019289
User 130215 does not improve AUC. Reverting changes.
Training on augumented user 35952 43/50 current_auc = 0.556351612014329
User 35952 AUC after training: 0.5538027004684487
User 35952 does not improve AUC. Reverting changes.
Training on augumented user 58604 44/50 current_auc = 0.556351612014329
User 58604 AUC after training: 0.5525626894461284
User 58604 does not improve AUC. Reverting changes.
Training on augumented user 108601 45/50 current_auc = 0.556351612014329
User 108601 AUC after training: 0.5571093965279691
User 108601 improves AUC. Keeping the model.
Training on augumented user 52651 46/50 current_auc = 0.5571093965279691
User 52651 AUC after training: 0.5573849545329292
User 52651 improves AUC. Keeping the model.
Training on augumented user 89208 47/50 current_auc = 0.5573849545329292
User 89208 AUC after training: 0.5551116009920088
User 89208 does not improve AUC. Reverting changes.
Training on augumented user 69146 48/50 current_auc = 0.5573849545329292
User 69146 AUC after training: 0.5560760540093689
User 69146 does not improve AUC. Reverting changes.
Training on augumented user 86874 49/50 current_auc = 0.5573849545329292
User 86874 AUC after training: 0.556144943510609
User 86874 does not improve AUC. Reverting changes.
[2024-12-02 19:37:45.810267] start test user 100903 212/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:37:46.402577] start test user 100903 212/567 recall augumented users by random, augumented_users = [79947, 97004, 77193, 41516, 9528, 23114, 40595, 22047, 846, 76077, 54853, 13551, 137320, 101094, 36515, 117686, 75298, 74518, 129213, 122506, 93251, 103279, 97301, 34357, 104691, 90413, 54307, 88400, 85905, 12580, 38623, 104947, 96880, 21885, 65991, 4611, 75331, 17462, 58731, 38305, 104401, 100997, 130077, 102082, 26195, 137593, 29418, 47489, 135249, 138009]
[2024-12-02 19:37:46.433094] user = 100903 Cloud 212/567
[2024-12-02 19:37:46.455904] user = 100903 Local 212/567
[2024-12-02 19:37:46.547274] user = 100903 Local+ 212/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:37:49.092264] user = 100903 MPDA- 212/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7313381492948057
Training on augumented user 79947 0/50 current_auc = 0.7313381492948057
User 79947 AUC after training: 0.7306501547987616
User 79947 does not improve AUC. Reverting changes.
Training on augumented user 97004 1/50 current_auc = 0.7313381492948057
User 97004 AUC after training: 0.7320261437908496
User 97004 improves AUC. Keeping the model.
Training on augumented user 77193 2/50 current_auc = 0.7320261437908496
User 77193 AUC after training: 0.7306501547987616
User 77193 does not improve AUC. Reverting changes.
Training on augumented user 41516 3/50 current_auc = 0.7320261437908496
User 41516 AUC after training: 0.7306501547987616
User 41516 does not improve AUC. Reverting changes.
Training on augumented user 9528 4/50 current_auc = 0.7320261437908496
User 9528 AUC after training: 0.7309941520467836
User 9528 does not improve AUC. Reverting changes.
Training on augumented user 23114 5/50 current_auc = 0.7320261437908496
User 23114 AUC after training: 0.7306501547987616
User 23114 does not improve AUC. Reverting changes.
Training on augumented user 40595 6/50 current_auc = 0.7320261437908496
User 40595 AUC after training: 0.7299621603027175
User 40595 does not improve AUC. Reverting changes.
Training on augumented user 22047 7/50 current_auc = 0.7320261437908496
User 22047 AUC after training: 0.7309941520467836
User 22047 does not improve AUC. Reverting changes.
Training on augumented user 846 8/50 current_auc = 0.7320261437908496
User 846 AUC after training: 0.7306501547987616
User 846 does not improve AUC. Reverting changes.
Training on augumented user 76077 9/50 current_auc = 0.7320261437908496
User 76077 AUC after training: 0.7316821465428277
User 76077 does not improve AUC. Reverting changes.
Training on augumented user 54853 10/50 current_auc = 0.7320261437908496
User 54853 AUC after training: 0.7313381492948056
User 54853 does not improve AUC. Reverting changes.
Training on augumented user 13551 11/50 current_auc = 0.7320261437908496
User 13551 AUC after training: 0.7299621603027177
User 13551 does not improve AUC. Reverting changes.
Training on augumented user 137320 12/50 current_auc = 0.7320261437908496
User 137320 AUC after training: 0.7285861713106295
User 137320 does not improve AUC. Reverting changes.
Training on augumented user 101094 13/50 current_auc = 0.7320261437908496
User 101094 AUC after training: 0.7309941520467836
User 101094 does not improve AUC. Reverting changes.
Training on augumented user 36515 14/50 current_auc = 0.7320261437908496
User 36515 AUC after training: 0.7313381492948057
User 36515 does not improve AUC. Reverting changes.
Training on augumented user 117686 15/50 current_auc = 0.7320261437908496
User 117686 AUC after training: 0.7313381492948056
User 117686 does not improve AUC. Reverting changes.
Training on augumented user 75298 16/50 current_auc = 0.7320261437908496
User 75298 AUC after training: 0.7320261437908496
User 75298 does not improve AUC. Reverting changes.
Training on augumented user 74518 17/50 current_auc = 0.7320261437908496
User 74518 AUC after training: 0.7323701410388718
User 74518 improves AUC. Keeping the model.
Training on augumented user 129213 18/50 current_auc = 0.7323701410388718
User 129213 AUC after training: 0.7323701410388718
User 129213 does not improve AUC. Reverting changes.
Training on augumented user 122506 19/50 current_auc = 0.7323701410388718
User 122506 AUC after training: 0.7313381492948057
User 122506 does not improve AUC. Reverting changes.
Training on augumented user 93251 20/50 current_auc = 0.7323701410388718
User 93251 AUC after training: 0.7327141382868937
User 93251 improves AUC. Keeping the model.
Training on augumented user 103279 21/50 current_auc = 0.7327141382868937
User 103279 AUC after training: 0.7334021327829378
User 103279 improves AUC. Keeping the model.
Training on augumented user 97301 22/50 current_auc = 0.7334021327829378
User 97301 AUC after training: 0.7327141382868937
User 97301 does not improve AUC. Reverting changes.
Training on augumented user 34357 23/50 current_auc = 0.7334021327829378
User 34357 AUC after training: 0.7334021327829378
User 34357 does not improve AUC. Reverting changes.
Training on augumented user 104691 24/50 current_auc = 0.7334021327829378
User 104691 AUC after training: 0.7316821465428276
User 104691 does not improve AUC. Reverting changes.
Training on augumented user 90413 25/50 current_auc = 0.7334021327829378
User 90413 AUC after training: 0.7334021327829378
User 90413 does not improve AUC. Reverting changes.
Training on augumented user 54307 26/50 current_auc = 0.7334021327829378
User 54307 AUC after training: 0.7327141382868937
User 54307 does not improve AUC. Reverting changes.
Training on augumented user 88400 27/50 current_auc = 0.7334021327829378
User 88400 AUC after training: 0.7306501547987616
User 88400 does not improve AUC. Reverting changes.
Training on augumented user 85905 28/50 current_auc = 0.7334021327829378
User 85905 AUC after training: 0.7316821465428277
User 85905 does not improve AUC. Reverting changes.
Training on augumented user 12580 29/50 current_auc = 0.7334021327829378
User 12580 AUC after training: 0.7330581355349157
User 12580 does not improve AUC. Reverting changes.
Training on augumented user 38623 30/50 current_auc = 0.7334021327829378
User 38623 AUC after training: 0.7327141382868937
User 38623 does not improve AUC. Reverting changes.
Training on augumented user 104947 31/50 current_auc = 0.7334021327829378
User 104947 AUC after training: 0.7334021327829378
User 104947 does not improve AUC. Reverting changes.
Training on augumented user 96880 32/50 current_auc = 0.7334021327829378
User 96880 AUC after training: 0.7330581355349157
User 96880 does not improve AUC. Reverting changes.
Training on augumented user 21885 33/50 current_auc = 0.7334021327829378
User 21885 AUC after training: 0.7340901272789818
User 21885 improves AUC. Keeping the model.
Training on augumented user 65991 34/50 current_auc = 0.7340901272789818
User 65991 AUC after training: 0.7334021327829378
User 65991 does not improve AUC. Reverting changes.
Training on augumented user 4611 35/50 current_auc = 0.7340901272789818
User 4611 AUC after training: 0.7340901272789818
User 4611 does not improve AUC. Reverting changes.
Training on augumented user 75331 36/50 current_auc = 0.7340901272789818
User 75331 AUC after training: 0.7347781217750258
User 75331 improves AUC. Keeping the model.
Training on augumented user 17462 37/50 current_auc = 0.7347781217750258
User 17462 AUC after training: 0.7320261437908496
User 17462 does not improve AUC. Reverting changes.
Training on augumented user 58731 38/50 current_auc = 0.7347781217750258
User 58731 AUC after training: 0.7337461300309598
User 58731 does not improve AUC. Reverting changes.
Training on augumented user 38305 39/50 current_auc = 0.7347781217750258
User 38305 AUC after training: 0.7337461300309598
User 38305 does not improve AUC. Reverting changes.
Training on augumented user 104401 40/50 current_auc = 0.7347781217750258
User 104401 AUC after training: 0.7340901272789817
User 104401 does not improve AUC. Reverting changes.
Training on augumented user 100997 41/50 current_auc = 0.7347781217750258
User 100997 AUC after training: 0.7330581355349157
User 100997 does not improve AUC. Reverting changes.
Training on augumented user 130077 42/50 current_auc = 0.7347781217750258
User 130077 AUC after training: 0.7330581355349157
User 130077 does not improve AUC. Reverting changes.
Training on augumented user 102082 43/50 current_auc = 0.7347781217750258
User 102082 AUC after training: 0.7327141382868938
User 102082 does not improve AUC. Reverting changes.
Training on augumented user 26195 44/50 current_auc = 0.7347781217750258
User 26195 AUC after training: 0.7334021327829378
User 26195 does not improve AUC. Reverting changes.
Training on augumented user 137593 45/50 current_auc = 0.7347781217750258
User 137593 AUC after training: 0.7337461300309598
User 137593 does not improve AUC. Reverting changes.
Training on augumented user 29418 46/50 current_auc = 0.7347781217750258
User 29418 AUC after training: 0.7337461300309598
User 29418 does not improve AUC. Reverting changes.
Training on augumented user 47489 47/50 current_auc = 0.7347781217750258
User 47489 AUC after training: 0.7337461300309598
User 47489 does not improve AUC. Reverting changes.
Training on augumented user 135249 48/50 current_auc = 0.7347781217750258
User 135249 AUC after training: 0.7337461300309598
User 135249 does not improve AUC. Reverting changes.
Training on augumented user 138009 49/50 current_auc = 0.7347781217750258
User 138009 AUC after training: 0.7347781217750259
User 138009 improves AUC. Keeping the model.
[2024-12-02 19:38:19.987285] start test user 100906 213/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:38:20.498774] start test user 100906 213/567 recall augumented users by random, augumented_users = [105899, 110994, 34650, 102489, 31194, 92516, 102680, 99579, 117584, 75760, 117393, 47337, 83474, 138222, 82261, 116838, 78022, 102150, 53857, 134024, 81743, 90870, 137218, 31084, 76158, 92701, 105951, 40207, 103730, 40660, 121668, 68351, 97215, 135902, 33495, 22424, 61294, 42457, 105827, 100375, 40329, 42128, 65066, 41337, 47780, 49188, 16911, 122139, 88775, 108625]
[2024-12-02 19:38:20.514126] user = 100906 Cloud 213/567
[2024-12-02 19:38:20.530366] user = 100906 Local 213/567
[2024-12-02 19:38:20.642485] user = 100906 Local+ 213/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:38:22.961319] user = 100906 MPDA- 213/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4807692307692308
Training on augumented user 105899 0/50 current_auc = 0.4807692307692308
User 105899 AUC after training: 0.4823200992555831
User 105899 improves AUC. Keeping the model.
Training on augumented user 110994 1/50 current_auc = 0.4823200992555831
User 110994 AUC after training: 0.48169975186104214
User 110994 does not improve AUC. Reverting changes.
Training on augumented user 34650 2/50 current_auc = 0.4823200992555831
User 34650 AUC after training: 0.47999379652605456
User 34650 does not improve AUC. Reverting changes.
Training on augumented user 102489 3/50 current_auc = 0.4823200992555831
User 102489 AUC after training: 0.48138957816377165
User 102489 does not improve AUC. Reverting changes.
Training on augumented user 31194 4/50 current_auc = 0.4823200992555831
User 31194 AUC after training: 0.4820099255583126
User 31194 does not improve AUC. Reverting changes.
Training on augumented user 92516 5/50 current_auc = 0.4823200992555831
User 92516 AUC after training: 0.48014888337468986
User 92516 does not improve AUC. Reverting changes.
Training on augumented user 102680 6/50 current_auc = 0.4823200992555831
User 102680 AUC after training: 0.48014888337468986
User 102680 does not improve AUC. Reverting changes.
Training on augumented user 99579 7/50 current_auc = 0.4823200992555831
User 99579 AUC after training: 0.4829404466501241
User 99579 improves AUC. Keeping the model.
Training on augumented user 117584 8/50 current_auc = 0.4829404466501241
User 117584 AUC after training: 0.48294044665012403
User 117584 does not improve AUC. Reverting changes.
Training on augumented user 75760 9/50 current_auc = 0.4829404466501241
User 75760 AUC after training: 0.48107940446650116
User 75760 does not improve AUC. Reverting changes.
Training on augumented user 117393 10/50 current_auc = 0.4829404466501241
User 117393 AUC after training: 0.4832506203473946
User 117393 improves AUC. Keeping the model.
Training on augumented user 47337 11/50 current_auc = 0.4832506203473946
User 47337 AUC after training: 0.4829404466501241
User 47337 does not improve AUC. Reverting changes.
Training on augumented user 83474 12/50 current_auc = 0.4832506203473946
User 83474 AUC after training: 0.4832506203473945
User 83474 does not improve AUC. Reverting changes.
Training on augumented user 138222 13/50 current_auc = 0.4832506203473946
User 138222 AUC after training: 0.48263027295285366
User 138222 does not improve AUC. Reverting changes.
Training on augumented user 82261 14/50 current_auc = 0.4832506203473946
User 82261 AUC after training: 0.4823200992555831
User 82261 does not improve AUC. Reverting changes.
Training on augumented user 116838 15/50 current_auc = 0.4832506203473946
User 116838 AUC after training: 0.4807692307692308
User 116838 does not improve AUC. Reverting changes.
Training on augumented user 78022 16/50 current_auc = 0.4832506203473946
User 78022 AUC after training: 0.4832506203473946
User 78022 does not improve AUC. Reverting changes.
Training on augumented user 102150 17/50 current_auc = 0.4832506203473946
User 102150 AUC after training: 0.4823200992555831
User 102150 does not improve AUC. Reverting changes.
Training on augumented user 53857 18/50 current_auc = 0.4832506203473946
User 53857 AUC after training: 0.48294044665012403
User 53857 does not improve AUC. Reverting changes.
Training on augumented user 134024 19/50 current_auc = 0.4832506203473946
User 134024 AUC after training: 0.48138957816377165
User 134024 does not improve AUC. Reverting changes.
Training on augumented user 81743 20/50 current_auc = 0.4832506203473946
User 81743 AUC after training: 0.4826302729528536
User 81743 does not improve AUC. Reverting changes.
Training on augumented user 90870 21/50 current_auc = 0.4832506203473946
User 90870 AUC after training: 0.4829404466501241
User 90870 does not improve AUC. Reverting changes.
Training on augumented user 137218 22/50 current_auc = 0.4832506203473946
User 137218 AUC after training: 0.4838709677419355
User 137218 improves AUC. Keeping the model.
Training on augumented user 31084 23/50 current_auc = 0.4838709677419355
User 31084 AUC after training: 0.4832506203473945
User 31084 does not improve AUC. Reverting changes.
Training on augumented user 76158 24/50 current_auc = 0.4838709677419355
User 76158 AUC after training: 0.4832506203473945
User 76158 does not improve AUC. Reverting changes.
Training on augumented user 92701 25/50 current_auc = 0.4838709677419355
User 92701 AUC after training: 0.48325062034739463
User 92701 does not improve AUC. Reverting changes.
Training on augumented user 105951 26/50 current_auc = 0.4838709677419355
User 105951 AUC after training: 0.483560794044665
User 105951 does not improve AUC. Reverting changes.
Training on augumented user 40207 27/50 current_auc = 0.4838709677419355
User 40207 AUC after training: 0.484181141439206
User 40207 improves AUC. Keeping the model.
Training on augumented user 103730 28/50 current_auc = 0.484181141439206
User 103730 AUC after training: 0.4820099255583126
User 103730 does not improve AUC. Reverting changes.
Training on augumented user 40660 29/50 current_auc = 0.484181141439206
User 40660 AUC after training: 0.483560794044665
User 40660 does not improve AUC. Reverting changes.
Training on augumented user 121668 30/50 current_auc = 0.484181141439206
User 121668 AUC after training: 0.4826302729528536
User 121668 does not improve AUC. Reverting changes.
Training on augumented user 68351 31/50 current_auc = 0.484181141439206
User 68351 AUC after training: 0.48278535980148884
User 68351 does not improve AUC. Reverting changes.
Training on augumented user 97215 32/50 current_auc = 0.484181141439206
User 97215 AUC after training: 0.4851116625310174
User 97215 improves AUC. Keeping the model.
Training on augumented user 135902 33/50 current_auc = 0.4851116625310174
User 135902 AUC after training: 0.48418114143920593
User 135902 does not improve AUC. Reverting changes.
Training on augumented user 33495 34/50 current_auc = 0.4851116625310174
User 33495 AUC after training: 0.48294044665012403
User 33495 does not improve AUC. Reverting changes.
Training on augumented user 22424 35/50 current_auc = 0.4851116625310174
User 22424 AUC after training: 0.4848014888337469
User 22424 does not improve AUC. Reverting changes.
Training on augumented user 61294 36/50 current_auc = 0.4851116625310174
User 61294 AUC after training: 0.4848014888337469
User 61294 does not improve AUC. Reverting changes.
Training on augumented user 42457 37/50 current_auc = 0.4851116625310174
User 42457 AUC after training: 0.4848014888337469
User 42457 does not improve AUC. Reverting changes.
Training on augumented user 105827 38/50 current_auc = 0.4851116625310174
User 105827 AUC after training: 0.4795285359801489
User 105827 does not improve AUC. Reverting changes.
Training on augumented user 100375 39/50 current_auc = 0.4851116625310174
User 100375 AUC after training: 0.4838709677419355
User 100375 does not improve AUC. Reverting changes.
Training on augumented user 40329 40/50 current_auc = 0.4851116625310174
User 40329 AUC after training: 0.48418114143920593
User 40329 does not improve AUC. Reverting changes.
Training on augumented user 42128 41/50 current_auc = 0.4851116625310174
User 42128 AUC after training: 0.4844913151364764
User 42128 does not improve AUC. Reverting changes.
Training on augumented user 65066 42/50 current_auc = 0.4851116625310174
User 65066 AUC after training: 0.4844913151364764
User 65066 does not improve AUC. Reverting changes.
Training on augumented user 41337 43/50 current_auc = 0.4851116625310174
User 41337 AUC after training: 0.48325062034739447
User 41337 does not improve AUC. Reverting changes.
Training on augumented user 47780 44/50 current_auc = 0.4851116625310174
User 47780 AUC after training: 0.48449131513647636
User 47780 does not improve AUC. Reverting changes.
Training on augumented user 49188 45/50 current_auc = 0.4851116625310174
User 49188 AUC after training: 0.48418114143920593
User 49188 does not improve AUC. Reverting changes.
Training on augumented user 16911 46/50 current_auc = 0.4851116625310174
User 16911 AUC after training: 0.483560794044665
User 16911 does not improve AUC. Reverting changes.
Training on augumented user 122139 47/50 current_auc = 0.4851116625310174
User 122139 AUC after training: 0.4848014888337469
User 122139 does not improve AUC. Reverting changes.
Training on augumented user 88775 48/50 current_auc = 0.4851116625310174
User 88775 AUC after training: 0.4848014888337469
User 88775 does not improve AUC. Reverting changes.
Training on augumented user 108625 49/50 current_auc = 0.4851116625310174
User 108625 AUC after training: 0.48418114143920593
User 108625 does not improve AUC. Reverting changes.
[2024-12-02 19:38:46.383849] start test user 100970 214/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:38:47.170050] start test user 100970 214/567 recall augumented users by random, augumented_users = [81282, 133476, 39054, 75821, 131657, 107871, 34771, 100513, 56486, 15357, 46968, 61173, 38807, 98243, 94723, 33834, 82056, 11794, 26208, 89190, 17374, 47495, 35729, 99239, 80559, 128495, 136127, 35773, 79456, 27193, 79995, 115355, 97169, 117755, 120659, 77243, 23808, 54326, 34995, 69146, 115553, 39284, 34767, 128686, 73305, 132337, 129723, 83807, 95224, 112474]
[2024-12-02 19:38:47.197704] user = 100970 Cloud 214/567
[2024-12-02 19:38:47.206452] user = 100970 Local 214/567
[2024-12-02 19:38:47.307462] user = 100970 Local+ 214/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:38:50.186833] user = 100970 MPDA- 214/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8888888888888888
Training on augumented user 81282 0/50 current_auc = 0.8888888888888888
User 81282 AUC after training: 0.8888888888888888
User 81282 does not improve AUC. Reverting changes.
Training on augumented user 133476 1/50 current_auc = 0.8888888888888888
User 133476 AUC after training: 0.8888888888888888
User 133476 does not improve AUC. Reverting changes.
Training on augumented user 39054 2/50 current_auc = 0.8888888888888888
User 39054 AUC after training: 0.8888888888888888
User 39054 does not improve AUC. Reverting changes.
Training on augumented user 75821 3/50 current_auc = 0.8888888888888888
User 75821 AUC after training: 0.8888888888888888
User 75821 does not improve AUC. Reverting changes.
Training on augumented user 131657 4/50 current_auc = 0.8888888888888888
User 131657 AUC after training: 0.8888888888888888
User 131657 does not improve AUC. Reverting changes.
Training on augumented user 107871 5/50 current_auc = 0.8888888888888888
User 107871 AUC after training: 0.8888888888888888
User 107871 does not improve AUC. Reverting changes.
Training on augumented user 34771 6/50 current_auc = 0.8888888888888888
User 34771 AUC after training: 0.8888888888888888
User 34771 does not improve AUC. Reverting changes.
Training on augumented user 100513 7/50 current_auc = 0.8888888888888888
User 100513 AUC after training: 0.8888888888888888
User 100513 does not improve AUC. Reverting changes.
Training on augumented user 56486 8/50 current_auc = 0.8888888888888888
User 56486 AUC after training: 0.8888888888888888
User 56486 does not improve AUC. Reverting changes.
Training on augumented user 15357 9/50 current_auc = 0.8888888888888888
User 15357 AUC after training: 0.8888888888888888
User 15357 does not improve AUC. Reverting changes.
Training on augumented user 46968 10/50 current_auc = 0.8888888888888888
User 46968 AUC after training: 0.8888888888888888
User 46968 does not improve AUC. Reverting changes.
Training on augumented user 61173 11/50 current_auc = 0.8888888888888888
User 61173 AUC after training: 0.8888888888888888
User 61173 does not improve AUC. Reverting changes.
Training on augumented user 38807 12/50 current_auc = 0.8888888888888888
User 38807 AUC after training: 0.8888888888888888
User 38807 does not improve AUC. Reverting changes.
Training on augumented user 98243 13/50 current_auc = 0.8888888888888888
User 98243 AUC after training: 0.8888888888888888
User 98243 does not improve AUC. Reverting changes.
Training on augumented user 94723 14/50 current_auc = 0.8888888888888888
User 94723 AUC after training: 0.8888888888888888
User 94723 does not improve AUC. Reverting changes.
Training on augumented user 33834 15/50 current_auc = 0.8888888888888888
User 33834 AUC after training: 0.8888888888888888
User 33834 does not improve AUC. Reverting changes.
Training on augumented user 82056 16/50 current_auc = 0.8888888888888888
User 82056 AUC after training: 0.8888888888888888
User 82056 does not improve AUC. Reverting changes.
Training on augumented user 11794 17/50 current_auc = 0.8888888888888888
User 11794 AUC after training: 0.8888888888888888
User 11794 does not improve AUC. Reverting changes.
Training on augumented user 26208 18/50 current_auc = 0.8888888888888888
User 26208 AUC after training: 0.8888888888888888
User 26208 does not improve AUC. Reverting changes.
Training on augumented user 89190 19/50 current_auc = 0.8888888888888888
User 89190 AUC after training: 0.8888888888888888
User 89190 does not improve AUC. Reverting changes.
Training on augumented user 17374 20/50 current_auc = 0.8888888888888888
User 17374 AUC after training: 0.8888888888888888
User 17374 does not improve AUC. Reverting changes.
Training on augumented user 47495 21/50 current_auc = 0.8888888888888888
User 47495 AUC after training: 0.8888888888888888
User 47495 does not improve AUC. Reverting changes.
Training on augumented user 35729 22/50 current_auc = 0.8888888888888888
User 35729 AUC after training: 0.8888888888888888
User 35729 does not improve AUC. Reverting changes.
Training on augumented user 99239 23/50 current_auc = 0.8888888888888888
User 99239 AUC after training: 0.8888888888888888
User 99239 does not improve AUC. Reverting changes.
Training on augumented user 80559 24/50 current_auc = 0.8888888888888888
User 80559 AUC after training: 0.8888888888888888
User 80559 does not improve AUC. Reverting changes.
Training on augumented user 128495 25/50 current_auc = 0.8888888888888888
User 128495 AUC after training: 0.8888888888888888
User 128495 does not improve AUC. Reverting changes.
Training on augumented user 136127 26/50 current_auc = 0.8888888888888888
User 136127 AUC after training: 0.8888888888888888
User 136127 does not improve AUC. Reverting changes.
Training on augumented user 35773 27/50 current_auc = 0.8888888888888888
User 35773 AUC after training: 0.8888888888888888
User 35773 does not improve AUC. Reverting changes.
Training on augumented user 79456 28/50 current_auc = 0.8888888888888888
User 79456 AUC after training: 0.8888888888888888
User 79456 does not improve AUC. Reverting changes.
Training on augumented user 27193 29/50 current_auc = 0.8888888888888888
User 27193 AUC after training: 0.8888888888888888
User 27193 does not improve AUC. Reverting changes.
Training on augumented user 79995 30/50 current_auc = 0.8888888888888888
User 79995 AUC after training: 0.8888888888888888
User 79995 does not improve AUC. Reverting changes.
Training on augumented user 115355 31/50 current_auc = 0.8888888888888888
User 115355 AUC after training: 0.8888888888888888
User 115355 does not improve AUC. Reverting changes.
Training on augumented user 97169 32/50 current_auc = 0.8888888888888888
User 97169 AUC after training: 0.8888888888888888
User 97169 does not improve AUC. Reverting changes.
Training on augumented user 117755 33/50 current_auc = 0.8888888888888888
User 117755 AUC after training: 0.8888888888888888
User 117755 does not improve AUC. Reverting changes.
Training on augumented user 120659 34/50 current_auc = 0.8888888888888888
User 120659 AUC after training: 0.8888888888888888
User 120659 does not improve AUC. Reverting changes.
Training on augumented user 77243 35/50 current_auc = 0.8888888888888888
User 77243 AUC after training: 0.8888888888888888
User 77243 does not improve AUC. Reverting changes.
Training on augumented user 23808 36/50 current_auc = 0.8888888888888888
User 23808 AUC after training: 0.8888888888888888
User 23808 does not improve AUC. Reverting changes.
Training on augumented user 54326 37/50 current_auc = 0.8888888888888888
User 54326 AUC after training: 0.8888888888888888
User 54326 does not improve AUC. Reverting changes.
Training on augumented user 34995 38/50 current_auc = 0.8888888888888888
User 34995 AUC after training: 0.8888888888888888
User 34995 does not improve AUC. Reverting changes.
Training on augumented user 69146 39/50 current_auc = 0.8888888888888888
User 69146 AUC after training: 0.8888888888888888
User 69146 does not improve AUC. Reverting changes.
Training on augumented user 115553 40/50 current_auc = 0.8888888888888888
User 115553 AUC after training: 0.8888888888888888
User 115553 does not improve AUC. Reverting changes.
Training on augumented user 39284 41/50 current_auc = 0.8888888888888888
User 39284 AUC after training: 0.8888888888888888
User 39284 does not improve AUC. Reverting changes.
Training on augumented user 34767 42/50 current_auc = 0.8888888888888888
User 34767 AUC after training: 0.8888888888888888
User 34767 does not improve AUC. Reverting changes.
Training on augumented user 128686 43/50 current_auc = 0.8888888888888888
User 128686 AUC after training: 0.8888888888888888
User 128686 does not improve AUC. Reverting changes.
Training on augumented user 73305 44/50 current_auc = 0.8888888888888888
User 73305 AUC after training: 0.8888888888888888
User 73305 does not improve AUC. Reverting changes.
Training on augumented user 132337 45/50 current_auc = 0.8888888888888888
User 132337 AUC after training: 0.8888888888888888
User 132337 does not improve AUC. Reverting changes.
Training on augumented user 129723 46/50 current_auc = 0.8888888888888888
User 129723 AUC after training: 0.8888888888888888
User 129723 does not improve AUC. Reverting changes.
Training on augumented user 83807 47/50 current_auc = 0.8888888888888888
User 83807 AUC after training: 0.8888888888888888
User 83807 does not improve AUC. Reverting changes.
Training on augumented user 95224 48/50 current_auc = 0.8888888888888888
User 95224 AUC after training: 0.8888888888888888
User 95224 does not improve AUC. Reverting changes.
Training on augumented user 112474 49/50 current_auc = 0.8888888888888888
User 112474 AUC after training: 0.8888888888888888
User 112474 does not improve AUC. Reverting changes.
[2024-12-02 19:39:18.782026] start test user 101021 215/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:39:19.222581] start test user 101021 215/567 recall augumented users by random, augumented_users = [53759, 124366, 42502, 137721, 47842, 63667, 10057, 81199, 98259, 31008, 65036, 90817, 58622, 20291, 25627, 251, 83919, 61446, 65882, 105404, 46909, 104795, 124152, 74985, 68322, 4553, 33289, 43310, 15717, 19638, 90150, 103689, 112731, 56715, 65389, 3554, 4228, 135200, 103688, 103330, 130373, 16334, 127974, 88182, 13483, 12038, 4113, 40450, 89855, 47717]
[2024-12-02 19:39:19.239093] user = 101021 Cloud 215/567
[2024-12-02 19:39:19.253898] user = 101021 Local 215/567
[2024-12-02 19:39:19.303987] user = 101021 Local+ 215/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:39:21.680033] user = 101021 MPDA- 215/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8666666666666667
Training on augumented user 53759 0/50 current_auc = 0.8666666666666667
User 53759 AUC after training: 0.8666666666666667
User 53759 does not improve AUC. Reverting changes.
Training on augumented user 124366 1/50 current_auc = 0.8666666666666667
User 124366 AUC after training: 0.8666666666666667
User 124366 does not improve AUC. Reverting changes.
Training on augumented user 42502 2/50 current_auc = 0.8666666666666667
User 42502 AUC after training: 0.8666666666666667
User 42502 does not improve AUC. Reverting changes.
Training on augumented user 137721 3/50 current_auc = 0.8666666666666667
User 137721 AUC after training: 0.8666666666666667
User 137721 does not improve AUC. Reverting changes.
Training on augumented user 47842 4/50 current_auc = 0.8666666666666667
User 47842 AUC after training: 0.8666666666666667
User 47842 does not improve AUC. Reverting changes.
Training on augumented user 63667 5/50 current_auc = 0.8666666666666667
User 63667 AUC after training: 0.8666666666666667
User 63667 does not improve AUC. Reverting changes.
Training on augumented user 10057 6/50 current_auc = 0.8666666666666667
User 10057 AUC after training: 0.8666666666666667
User 10057 does not improve AUC. Reverting changes.
Training on augumented user 81199 7/50 current_auc = 0.8666666666666667
User 81199 AUC after training: 0.8666666666666667
User 81199 does not improve AUC. Reverting changes.
Training on augumented user 98259 8/50 current_auc = 0.8666666666666667
User 98259 AUC after training: 0.8666666666666667
User 98259 does not improve AUC. Reverting changes.
Training on augumented user 31008 9/50 current_auc = 0.8666666666666667
User 31008 AUC after training: 0.8666666666666667
User 31008 does not improve AUC. Reverting changes.
Training on augumented user 65036 10/50 current_auc = 0.8666666666666667
User 65036 AUC after training: 0.8666666666666667
User 65036 does not improve AUC. Reverting changes.
Training on augumented user 90817 11/50 current_auc = 0.8666666666666667
User 90817 AUC after training: 0.8666666666666667
User 90817 does not improve AUC. Reverting changes.
Training on augumented user 58622 12/50 current_auc = 0.8666666666666667
User 58622 AUC after training: 0.8666666666666667
User 58622 does not improve AUC. Reverting changes.
Training on augumented user 20291 13/50 current_auc = 0.8666666666666667
User 20291 AUC after training: 0.8666666666666667
User 20291 does not improve AUC. Reverting changes.
Training on augumented user 25627 14/50 current_auc = 0.8666666666666667
User 25627 AUC after training: 0.8666666666666667
User 25627 does not improve AUC. Reverting changes.
Training on augumented user 251 15/50 current_auc = 0.8666666666666667
User 251 AUC after training: 0.8666666666666667
User 251 does not improve AUC. Reverting changes.
Training on augumented user 83919 16/50 current_auc = 0.8666666666666667
User 83919 AUC after training: 0.8666666666666667
User 83919 does not improve AUC. Reverting changes.
Training on augumented user 61446 17/50 current_auc = 0.8666666666666667
User 61446 AUC after training: 0.8666666666666667
User 61446 does not improve AUC. Reverting changes.
Training on augumented user 65882 18/50 current_auc = 0.8666666666666667
User 65882 AUC after training: 0.8666666666666667
User 65882 does not improve AUC. Reverting changes.
Training on augumented user 105404 19/50 current_auc = 0.8666666666666667
User 105404 AUC after training: 0.8666666666666667
User 105404 does not improve AUC. Reverting changes.
Training on augumented user 46909 20/50 current_auc = 0.8666666666666667
User 46909 AUC after training: 0.8666666666666667
User 46909 does not improve AUC. Reverting changes.
Training on augumented user 104795 21/50 current_auc = 0.8666666666666667
User 104795 AUC after training: 0.8666666666666667
User 104795 does not improve AUC. Reverting changes.
Training on augumented user 124152 22/50 current_auc = 0.8666666666666667
User 124152 AUC after training: 0.8666666666666667
User 124152 does not improve AUC. Reverting changes.
Training on augumented user 74985 23/50 current_auc = 0.8666666666666667
User 74985 AUC after training: 0.8666666666666667
User 74985 does not improve AUC. Reverting changes.
Training on augumented user 68322 24/50 current_auc = 0.8666666666666667
User 68322 AUC after training: 0.8666666666666667
User 68322 does not improve AUC. Reverting changes.
Training on augumented user 4553 25/50 current_auc = 0.8666666666666667
User 4553 AUC after training: 0.8666666666666667
User 4553 does not improve AUC. Reverting changes.
Training on augumented user 33289 26/50 current_auc = 0.8666666666666667
User 33289 AUC after training: 0.8666666666666667
User 33289 does not improve AUC. Reverting changes.
Training on augumented user 43310 27/50 current_auc = 0.8666666666666667
User 43310 AUC after training: 0.8666666666666667
User 43310 does not improve AUC. Reverting changes.
Training on augumented user 15717 28/50 current_auc = 0.8666666666666667
User 15717 AUC after training: 0.8666666666666667
User 15717 does not improve AUC. Reverting changes.
Training on augumented user 19638 29/50 current_auc = 0.8666666666666667
User 19638 AUC after training: 0.8666666666666667
User 19638 does not improve AUC. Reverting changes.
Training on augumented user 90150 30/50 current_auc = 0.8666666666666667
User 90150 AUC after training: 0.8666666666666667
User 90150 does not improve AUC. Reverting changes.
Training on augumented user 103689 31/50 current_auc = 0.8666666666666667
User 103689 AUC after training: 0.8666666666666667
User 103689 does not improve AUC. Reverting changes.
Training on augumented user 112731 32/50 current_auc = 0.8666666666666667
User 112731 AUC after training: 0.8666666666666667
User 112731 does not improve AUC. Reverting changes.
Training on augumented user 56715 33/50 current_auc = 0.8666666666666667
User 56715 AUC after training: 0.8666666666666667
User 56715 does not improve AUC. Reverting changes.
Training on augumented user 65389 34/50 current_auc = 0.8666666666666667
User 65389 AUC after training: 0.8666666666666667
User 65389 does not improve AUC. Reverting changes.
Training on augumented user 3554 35/50 current_auc = 0.8666666666666667
User 3554 AUC after training: 0.8666666666666667
User 3554 does not improve AUC. Reverting changes.
Training on augumented user 4228 36/50 current_auc = 0.8666666666666667
User 4228 AUC after training: 0.8666666666666667
User 4228 does not improve AUC. Reverting changes.
Training on augumented user 135200 37/50 current_auc = 0.8666666666666667
User 135200 AUC after training: 0.8666666666666667
User 135200 does not improve AUC. Reverting changes.
Training on augumented user 103688 38/50 current_auc = 0.8666666666666667
User 103688 AUC after training: 0.8666666666666667
User 103688 does not improve AUC. Reverting changes.
Training on augumented user 103330 39/50 current_auc = 0.8666666666666667
User 103330 AUC after training: 0.8666666666666667
User 103330 does not improve AUC. Reverting changes.
Training on augumented user 130373 40/50 current_auc = 0.8666666666666667
User 130373 AUC after training: 0.8666666666666667
User 130373 does not improve AUC. Reverting changes.
Training on augumented user 16334 41/50 current_auc = 0.8666666666666667
User 16334 AUC after training: 0.8666666666666667
User 16334 does not improve AUC. Reverting changes.
Training on augumented user 127974 42/50 current_auc = 0.8666666666666667
User 127974 AUC after training: 0.8666666666666667
User 127974 does not improve AUC. Reverting changes.
Training on augumented user 88182 43/50 current_auc = 0.8666666666666667
User 88182 AUC after training: 0.8666666666666667
User 88182 does not improve AUC. Reverting changes.
Training on augumented user 13483 44/50 current_auc = 0.8666666666666667
User 13483 AUC after training: 0.8666666666666667
User 13483 does not improve AUC. Reverting changes.
Training on augumented user 12038 45/50 current_auc = 0.8666666666666667
User 12038 AUC after training: 0.8666666666666667
User 12038 does not improve AUC. Reverting changes.
Training on augumented user 4113 46/50 current_auc = 0.8666666666666667
User 4113 AUC after training: 0.8666666666666667
User 4113 does not improve AUC. Reverting changes.
Training on augumented user 40450 47/50 current_auc = 0.8666666666666667
User 40450 AUC after training: 0.8666666666666667
User 40450 does not improve AUC. Reverting changes.
Training on augumented user 89855 48/50 current_auc = 0.8666666666666667
User 89855 AUC after training: 0.8666666666666667
User 89855 does not improve AUC. Reverting changes.
Training on augumented user 47717 49/50 current_auc = 0.8666666666666667
User 47717 AUC after training: 0.8666666666666667
User 47717 does not improve AUC. Reverting changes.
[2024-12-02 19:39:55.830107] start test user 101026 216/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:39:56.330619] start test user 101026 216/567 recall augumented users by random, augumented_users = [45783, 106588, 77333, 101648, 72467, 49372, 112288, 14016, 60859, 67131, 61915, 83822, 28671, 30648, 108527, 3778, 17505, 93525, 137364, 2199, 1512, 66608, 115877, 6444, 138461, 10778, 89668, 46989, 111792, 49736, 107337, 58974, 31993, 106153, 124775, 133156, 52012, 89776, 54683, 64445, 126162, 133070, 84141, 88333, 88043, 133364, 103221, 108216, 40080, 71925]
[2024-12-02 19:39:56.346443] user = 101026 Cloud 216/567
[2024-12-02 19:39:56.408017] user = 101026 Local 216/567
[2024-12-02 19:39:56.497842] user = 101026 Local+ 216/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:39:58.406516] user = 101026 MPDA- 216/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6437394472585088
Training on augumented user 45783 0/50 current_auc = 0.6437394472585088
User 45783 AUC after training: 0.6434284190882431
User 45783 does not improve AUC. Reverting changes.
Training on augumented user 106588 1/50 current_auc = 0.6437394472585088
User 106588 AUC after training: 0.6435172842797476
User 106588 does not improve AUC. Reverting changes.
Training on augumented user 77333 2/50 current_auc = 0.6437394472585088
User 77333 AUC after training: 0.643606149471252
User 77333 does not improve AUC. Reverting changes.
Training on augumented user 101648 3/50 current_auc = 0.6437394472585088
User 101648 AUC after training: 0.6435172842797476
User 101648 does not improve AUC. Reverting changes.
Training on augumented user 72467 4/50 current_auc = 0.6437394472585088
User 72467 AUC after training: 0.6436505820670044
User 72467 does not improve AUC. Reverting changes.
Training on augumented user 49372 5/50 current_auc = 0.6437394472585088
User 49372 AUC after training: 0.643606149471252
User 49372 does not improve AUC. Reverting changes.
Training on augumented user 112288 6/50 current_auc = 0.6437394472585088
User 112288 AUC after training: 0.6435172842797476
User 112288 does not improve AUC. Reverting changes.
Training on augumented user 14016 7/50 current_auc = 0.6437394472585088
User 14016 AUC after training: 0.6434728516839954
User 14016 does not improve AUC. Reverting changes.
Training on augumented user 60859 8/50 current_auc = 0.6437394472585088
User 60859 AUC after training: 0.64396161023727
User 60859 improves AUC. Keeping the model.
Training on augumented user 67131 9/50 current_auc = 0.64396161023727
User 67131 AUC after training: 0.6440949080245268
User 67131 improves AUC. Keeping the model.
Training on augumented user 61915 10/50 current_auc = 0.6440949080245268
User 61915 AUC after training: 0.6432951213009863
User 61915 does not improve AUC. Reverting changes.
Training on augumented user 83822 11/50 current_auc = 0.6440949080245268
User 83822 AUC after training: 0.6451612903225806
User 83822 improves AUC. Keeping the model.
Training on augumented user 28671 12/50 current_auc = 0.6451612903225806
User 28671 AUC after training: 0.6442282058117835
User 28671 does not improve AUC. Reverting changes.
Training on augumented user 30648 13/50 current_auc = 0.6451612903225806
User 30648 AUC after training: 0.6453834533013418
User 30648 improves AUC. Keeping the model.
Training on augumented user 108527 14/50 current_auc = 0.6453834533013418
User 108527 AUC after training: 0.6453834533013418
User 108527 does not improve AUC. Reverting changes.
Training on augumented user 3778 15/50 current_auc = 0.6453834533013418
User 3778 AUC after training: 0.6458277792588643
User 3778 improves AUC. Keeping the model.
Training on augumented user 17505 16/50 current_auc = 0.6458277792588643
User 17505 AUC after training: 0.6455167510885986
User 17505 does not improve AUC. Reverting changes.
Training on augumented user 93525 17/50 current_auc = 0.6458277792588643
User 93525 AUC after training: 0.6462721052163867
User 93525 improves AUC. Keeping the model.
Training on augumented user 137364 18/50 current_auc = 0.6462721052163867
User 137364 AUC after training: 0.6459166444503688
User 137364 does not improve AUC. Reverting changes.
Training on augumented user 2199 19/50 current_auc = 0.6462721052163867
User 2199 AUC after training: 0.6468052963654136
User 2199 improves AUC. Keeping the model.
Training on augumented user 1512 20/50 current_auc = 0.6468052963654136
User 1512 AUC after training: 0.6472940549186883
User 1512 improves AUC. Keeping the model.
Training on augumented user 66608 21/50 current_auc = 0.6472940549186883
User 66608 AUC after training: 0.6468941615569181
User 66608 does not improve AUC. Reverting changes.
Training on augumented user 115877 22/50 current_auc = 0.6472940549186883
User 115877 AUC after training: 0.6466275659824047
User 115877 does not improve AUC. Reverting changes.
Training on augumented user 6444 23/50 current_auc = 0.6472940549186883
User 6444 AUC after training: 0.6471607571314317
User 6444 does not improve AUC. Reverting changes.
Training on augumented user 138461 24/50 current_auc = 0.6472940549186883
User 138461 AUC after training: 0.6467608637696615
User 138461 does not improve AUC. Reverting changes.
Training on augumented user 10778 25/50 current_auc = 0.6472940549186883
User 10778 AUC after training: 0.6458277792588643
User 10778 does not improve AUC. Reverting changes.
Training on augumented user 89668 26/50 current_auc = 0.6472940549186883
User 89668 AUC after training: 0.647249622322936
User 89668 does not improve AUC. Reverting changes.
Training on augumented user 46989 27/50 current_auc = 0.6472940549186883
User 46989 AUC after training: 0.6476495156847062
User 46989 improves AUC. Keeping the model.
Training on augumented user 111792 28/50 current_auc = 0.6476495156847062
User 111792 AUC after training: 0.647782813471963
User 111792 improves AUC. Keeping the model.
Training on augumented user 49736 29/50 current_auc = 0.647782813471963
User 49736 AUC after training: 0.647427352705945
User 49736 does not improve AUC. Reverting changes.
Training on augumented user 107337 30/50 current_auc = 0.647782813471963
User 107337 AUC after training: 0.6472940549186883
User 107337 does not improve AUC. Reverting changes.
Training on augumented user 58974 31/50 current_auc = 0.647782813471963
User 58974 AUC after training: 0.6473384875144406
User 58974 does not improve AUC. Reverting changes.
Training on augumented user 31993 32/50 current_auc = 0.647782813471963
User 31993 AUC after training: 0.6482715720252377
User 31993 improves AUC. Keeping the model.
Training on augumented user 106153 33/50 current_auc = 0.6482715720252377
User 106153 AUC after training: 0.6476939482804585
User 106153 does not improve AUC. Reverting changes.
Training on augumented user 124775 34/50 current_auc = 0.6482715720252377
User 124775 AUC after training: 0.6465387007909001
User 124775 does not improve AUC. Reverting changes.
Training on augumented user 133156 35/50 current_auc = 0.6482715720252377
User 133156 AUC after training: 0.6486270327912557
User 133156 improves AUC. Keeping the model.
Training on augumented user 52012 36/50 current_auc = 0.6486270327912557
User 52012 AUC after training: 0.6479605438549719
User 52012 does not improve AUC. Reverting changes.
Training on augumented user 89776 37/50 current_auc = 0.6486270327912557
User 89776 AUC after training: 0.6472051897271838
User 89776 does not improve AUC. Reverting changes.
Training on augumented user 54683 38/50 current_auc = 0.6486270327912557
User 54683 AUC after training: 0.6487158979827601
User 54683 improves AUC. Keeping the model.
Training on augumented user 64445 39/50 current_auc = 0.6487158979827601
User 64445 AUC after training: 0.6491157913445303
User 64445 improves AUC. Keeping the model.
Training on augumented user 126162 40/50 current_auc = 0.6491157913445303
User 126162 AUC after training: 0.6492046565360348
User 126162 improves AUC. Keeping the model.
Training on augumented user 133070 41/50 current_auc = 0.6492046565360348
User 133070 AUC after training: 0.649249089131787
User 133070 improves AUC. Keeping the model.
Training on augumented user 84141 42/50 current_auc = 0.649249089131787
User 84141 AUC after training: 0.6489380609615213
User 84141 does not improve AUC. Reverting changes.
Training on augumented user 88333 43/50 current_auc = 0.649249089131787
User 88333 AUC after training: 0.6487603305785123
User 88333 does not improve AUC. Reverting changes.
Training on augumented user 88043 44/50 current_auc = 0.649249089131787
User 88043 AUC after training: 0.649249089131787
User 88043 does not improve AUC. Reverting changes.
Training on augumented user 133364 45/50 current_auc = 0.649249089131787
User 133364 AUC after training: 0.6489824935572737
User 133364 does not improve AUC. Reverting changes.
Training on augumented user 103221 46/50 current_auc = 0.649249089131787
User 103221 AUC after training: 0.6493823869190438
User 103221 improves AUC. Keeping the model.
Training on augumented user 108216 47/50 current_auc = 0.6493823869190438
User 108216 AUC after training: 0.6498711454723185
User 108216 improves AUC. Keeping the model.
Training on augumented user 40080 48/50 current_auc = 0.6498711454723185
User 40080 AUC after training: 0.6500933084510796
User 40080 improves AUC. Keeping the model.
Training on augumented user 71925 49/50 current_auc = 0.6500933084510796
User 71925 AUC after training: 0.6500044432595752
User 71925 does not improve AUC. Reverting changes.
[2024-12-02 19:40:30.122495] start test user 101027 217/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:40:30.641021] start test user 101027 217/567 recall augumented users by random, augumented_users = [585, 51139, 122754, 803, 88599, 134676, 5958, 93762, 75813, 42966, 134495, 58475, 116430, 103942, 37259, 105493, 119054, 127127, 54172, 15031, 128121, 114451, 62268, 130762, 35021, 106187, 37874, 108479, 130780, 121742, 47658, 24434, 115800, 78582, 44767, 124165, 115004, 56517, 122029, 79377, 85426, 61632, 48735, 20652, 121514, 28242, 96253, 124830, 40476, 107757]
[2024-12-02 19:40:30.655760] user = 101027 Cloud 217/567
[2024-12-02 19:40:30.704573] user = 101027 Local 217/567
[2024-12-02 19:40:30.758383] user = 101027 Local+ 217/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:40:33.552724] user = 101027 MPDA- 217/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.48938572719060525
Training on augumented user 585 0/50 current_auc = 0.48938572719060525
User 585 AUC after training: 0.4890469738030715
User 585 does not improve AUC. Reverting changes.
Training on augumented user 51139 1/50 current_auc = 0.48938572719060525
User 51139 AUC after training: 0.49006323396567303
User 51139 improves AUC. Keeping the model.
Training on augumented user 122754 2/50 current_auc = 0.49006323396567303
User 122754 AUC after training: 0.4901761517615176
User 122754 improves AUC. Keeping the model.
Training on augumented user 803 3/50 current_auc = 0.4901761517615176
User 803 AUC after training: 0.49062782294489615
User 803 improves AUC. Keeping the model.
Training on augumented user 88599 4/50 current_auc = 0.49062782294489615
User 88599 AUC after training: 0.4896115627822945
User 88599 does not improve AUC. Reverting changes.
Training on augumented user 134676 5/50 current_auc = 0.49062782294489615
User 134676 AUC after training: 0.49034552845528456
User 134676 does not improve AUC. Reverting changes.
Training on augumented user 5958 6/50 current_auc = 0.49062782294489615
User 5958 AUC after training: 0.49006323396567303
User 5958 does not improve AUC. Reverting changes.
Training on augumented user 93762 7/50 current_auc = 0.49062782294489615
User 93762 AUC after training: 0.49074074074074076
User 93762 improves AUC. Keeping the model.
Training on augumented user 75813 8/50 current_auc = 0.49074074074074076
User 75813 AUC after training: 0.49074074074074076
User 75813 does not improve AUC. Reverting changes.
Training on augumented user 42966 9/50 current_auc = 0.49074074074074076
User 42966 AUC after training: 0.49062782294489615
User 42966 does not improve AUC. Reverting changes.
Training on augumented user 134495 10/50 current_auc = 0.49074074074074076
User 134495 AUC after training: 0.4905149051490515
User 134495 does not improve AUC. Reverting changes.
Training on augumented user 58475 11/50 current_auc = 0.49074074074074076
User 58475 AUC after training: 0.49085365853658536
User 58475 improves AUC. Keeping the model.
Training on augumented user 116430 12/50 current_auc = 0.49085365853658536
User 116430 AUC after training: 0.49017615176151763
User 116430 does not improve AUC. Reverting changes.
Training on augumented user 103942 13/50 current_auc = 0.49085365853658536
User 103942 AUC after training: 0.4906278229448961
User 103942 does not improve AUC. Reverting changes.
Training on augumented user 37259 14/50 current_auc = 0.49085365853658536
User 37259 AUC after training: 0.4910794941282746
User 37259 improves AUC. Keeping the model.
Training on augumented user 105493 15/50 current_auc = 0.4910794941282746
User 105493 AUC after training: 0.4910794941282746
User 105493 does not improve AUC. Reverting changes.
Training on augumented user 119054 16/50 current_auc = 0.4910794941282746
User 119054 AUC after training: 0.49040198735320684
User 119054 does not improve AUC. Reverting changes.
Training on augumented user 127127 17/50 current_auc = 0.4910794941282746
User 127127 AUC after training: 0.49062782294489615
User 127127 does not improve AUC. Reverting changes.
Training on augumented user 54172 18/50 current_auc = 0.4910794941282746
User 54172 AUC after training: 0.49028906955736223
User 54172 does not improve AUC. Reverting changes.
Training on augumented user 15031 19/50 current_auc = 0.4910794941282746
User 15031 AUC after training: 0.49028906955736223
User 15031 does not improve AUC. Reverting changes.
Training on augumented user 128121 20/50 current_auc = 0.4910794941282746
User 128121 AUC after training: 0.4907407407407407
User 128121 does not improve AUC. Reverting changes.
Training on augumented user 114451 21/50 current_auc = 0.4910794941282746
User 114451 AUC after training: 0.49096657633243
User 114451 does not improve AUC. Reverting changes.
Training on augumented user 62268 22/50 current_auc = 0.4910794941282746
User 62268 AUC after training: 0.49074074074074076
User 62268 does not improve AUC. Reverting changes.
Training on augumented user 130762 23/50 current_auc = 0.4910794941282746
User 130762 AUC after training: 0.4901761517615176
User 130762 does not improve AUC. Reverting changes.
Training on augumented user 35021 24/50 current_auc = 0.4910794941282746
User 35021 AUC after training: 0.4905149051490515
User 35021 does not improve AUC. Reverting changes.
Training on augumented user 106187 25/50 current_auc = 0.4910794941282746
User 106187 AUC after training: 0.49096657633243
User 106187 does not improve AUC. Reverting changes.
Training on augumented user 37874 26/50 current_auc = 0.4910794941282746
User 37874 AUC after training: 0.4910794941282747
User 37874 improves AUC. Keeping the model.
Training on augumented user 108479 27/50 current_auc = 0.4910794941282747
User 108479 AUC after training: 0.49096657633243
User 108479 does not improve AUC. Reverting changes.
Training on augumented user 130780 28/50 current_auc = 0.4910794941282747
User 130780 AUC after training: 0.4907407407407408
User 130780 does not improve AUC. Reverting changes.
Training on augumented user 121742 29/50 current_auc = 0.4910794941282747
User 121742 AUC after training: 0.49006323396567303
User 121742 does not improve AUC. Reverting changes.
Training on augumented user 47658 30/50 current_auc = 0.4910794941282747
User 47658 AUC after training: 0.4902890695573622
User 47658 does not improve AUC. Reverting changes.
Training on augumented user 24434 31/50 current_auc = 0.4910794941282747
User 24434 AUC after training: 0.49096657633243
User 24434 does not improve AUC. Reverting changes.
Training on augumented user 115800 32/50 current_auc = 0.4910794941282747
User 115800 AUC after training: 0.49074074074074076
User 115800 does not improve AUC. Reverting changes.
Training on augumented user 78582 33/50 current_auc = 0.4910794941282747
User 78582 AUC after training: 0.49051490514905155
User 78582 does not improve AUC. Reverting changes.
Training on augumented user 44767 34/50 current_auc = 0.4910794941282747
User 44767 AUC after training: 0.49040198735320684
User 44767 does not improve AUC. Reverting changes.
Training on augumented user 124165 35/50 current_auc = 0.4910794941282747
User 124165 AUC after training: 0.49096657633243
User 124165 does not improve AUC. Reverting changes.
Training on augumented user 115004 36/50 current_auc = 0.4910794941282747
User 115004 AUC after training: 0.49096657633243
User 115004 does not improve AUC. Reverting changes.
Training on augumented user 56517 37/50 current_auc = 0.4910794941282747
User 56517 AUC after training: 0.49096657633243
User 56517 does not improve AUC. Reverting changes.
Training on augumented user 122029 38/50 current_auc = 0.4910794941282747
User 122029 AUC after training: 0.48978093947606144
User 122029 does not improve AUC. Reverting changes.
Training on augumented user 79377 39/50 current_auc = 0.4910794941282747
User 79377 AUC after training: 0.490063233965673
User 79377 does not improve AUC. Reverting changes.
Training on augumented user 85426 40/50 current_auc = 0.4910794941282747
User 85426 AUC after training: 0.49107949412827456
User 85426 does not improve AUC. Reverting changes.
Training on augumented user 61632 41/50 current_auc = 0.4910794941282747
User 61632 AUC after training: 0.49096657633243
User 61632 does not improve AUC. Reverting changes.
Training on augumented user 48735 42/50 current_auc = 0.4910794941282747
User 48735 AUC after training: 0.49074074074074076
User 48735 does not improve AUC. Reverting changes.
Training on augumented user 20652 43/50 current_auc = 0.4910794941282747
User 20652 AUC after training: 0.4913053297199639
User 20652 improves AUC. Keeping the model.
Training on augumented user 121514 44/50 current_auc = 0.4913053297199639
User 121514 AUC after training: 0.49164408310749774
User 121514 improves AUC. Keeping the model.
Training on augumented user 28242 45/50 current_auc = 0.49164408310749774
User 28242 AUC after training: 0.49085365853658536
User 28242 does not improve AUC. Reverting changes.
Training on augumented user 96253 46/50 current_auc = 0.49164408310749774
User 96253 AUC after training: 0.49175700090334235
User 96253 improves AUC. Keeping the model.
Training on augumented user 124830 47/50 current_auc = 0.49175700090334235
User 124830 AUC after training: 0.49164408310749774
User 124830 does not improve AUC. Reverting changes.
Training on augumented user 40476 48/50 current_auc = 0.49175700090334235
User 40476 AUC after training: 0.49186991869918695
User 40476 improves AUC. Keeping the model.
Training on augumented user 107757 49/50 current_auc = 0.49186991869918695
User 107757 AUC after training: 0.49164408310749774
User 107757 does not improve AUC. Reverting changes.
[2024-12-02 19:41:05.389358] start test user 101033 218/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:41:05.786476] start test user 101033 218/567 recall augumented users by random, augumented_users = [132453, 114792, 60628, 14489, 63388, 82156, 115881, 62571, 22117, 8351, 112470, 3743, 88483, 83928, 130795, 54230, 116350, 121619, 130797, 10896, 50439, 122600, 93604, 123061, 107309, 35072, 5367, 75924, 63484, 119692, 61942, 68800, 23078, 60373, 91082, 84077, 43956, 124313, 4189, 72187, 130956, 100588, 100962, 111708, 134237, 125466, 35922, 24281, 32391, 48796]
[2024-12-02 19:41:05.801695] user = 101033 Cloud 218/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:41:05.808399] user = 101033 Local 218/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:41:05.906424] user = 101033 Local+ 218/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:41:08.426706] user = 101033 MPDA- 218/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 132453 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132453 AUC after training: 0.5
User 132453 does not improve AUC. Reverting changes.
Training on augumented user 114792 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114792 AUC after training: 0.5
User 114792 does not improve AUC. Reverting changes.
Training on augumented user 60628 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60628 AUC after training: 0.5
User 60628 does not improve AUC. Reverting changes.
Training on augumented user 14489 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14489 AUC after training: 0.5
User 14489 does not improve AUC. Reverting changes.
Training on augumented user 63388 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63388 AUC after training: 0.5
User 63388 does not improve AUC. Reverting changes.
Training on augumented user 82156 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82156 AUC after training: 0.5
User 82156 does not improve AUC. Reverting changes.
Training on augumented user 115881 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115881 AUC after training: 0.5
User 115881 does not improve AUC. Reverting changes.
Training on augumented user 62571 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62571 AUC after training: 0.5
User 62571 does not improve AUC. Reverting changes.
Training on augumented user 22117 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22117 AUC after training: 0.5
User 22117 does not improve AUC. Reverting changes.
Training on augumented user 8351 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8351 AUC after training: 0.5
User 8351 does not improve AUC. Reverting changes.
Training on augumented user 112470 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 112470 AUC after training: 0.5
User 112470 does not improve AUC. Reverting changes.
Training on augumented user 3743 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3743 AUC after training: 0.5
User 3743 does not improve AUC. Reverting changes.
Training on augumented user 88483 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88483 AUC after training: 0.5
User 88483 does not improve AUC. Reverting changes.
Training on augumented user 83928 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83928 AUC after training: 0.5
User 83928 does not improve AUC. Reverting changes.
Training on augumented user 130795 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130795 AUC after training: 0.5
User 130795 does not improve AUC. Reverting changes.
Training on augumented user 54230 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54230 AUC after training: 0.5
User 54230 does not improve AUC. Reverting changes.
Training on augumented user 116350 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116350 AUC after training: 0.5
User 116350 does not improve AUC. Reverting changes.
Training on augumented user 121619 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121619 AUC after training: 0.5
User 121619 does not improve AUC. Reverting changes.
Training on augumented user 130797 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130797 AUC after training: 0.5
User 130797 does not improve AUC. Reverting changes.
Training on augumented user 10896 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10896 AUC after training: 0.5
User 10896 does not improve AUC. Reverting changes.
Training on augumented user 50439 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50439 AUC after training: 0.5
User 50439 does not improve AUC. Reverting changes.
Training on augumented user 122600 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122600 AUC after training: 0.5
User 122600 does not improve AUC. Reverting changes.
Training on augumented user 93604 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93604 AUC after training: 0.5
User 93604 does not improve AUC. Reverting changes.
Training on augumented user 123061 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123061 AUC after training: 0.5
User 123061 does not improve AUC. Reverting changes.
Training on augumented user 107309 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107309 AUC after training: 0.5
User 107309 does not improve AUC. Reverting changes.
Training on augumented user 35072 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35072 AUC after training: 0.5
User 35072 does not improve AUC. Reverting changes.
Training on augumented user 5367 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5367 AUC after training: 0.5
User 5367 does not improve AUC. Reverting changes.
Training on augumented user 75924 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75924 AUC after training: 0.5
User 75924 does not improve AUC. Reverting changes.
Training on augumented user 63484 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63484 AUC after training: 0.5
User 63484 does not improve AUC. Reverting changes.
Training on augumented user 119692 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 119692 AUC after training: 0.5
User 119692 does not improve AUC. Reverting changes.
Training on augumented user 61942 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61942 AUC after training: 0.5
User 61942 does not improve AUC. Reverting changes.
Training on augumented user 68800 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68800 AUC after training: 0.5
User 68800 does not improve AUC. Reverting changes.
Training on augumented user 23078 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23078 AUC after training: 0.5
User 23078 does not improve AUC. Reverting changes.
Training on augumented user 60373 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60373 AUC after training: 0.5
User 60373 does not improve AUC. Reverting changes.
Training on augumented user 91082 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91082 AUC after training: 0.5
User 91082 does not improve AUC. Reverting changes.
Training on augumented user 84077 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84077 AUC after training: 0.5
User 84077 does not improve AUC. Reverting changes.
Training on augumented user 43956 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43956 AUC after training: 0.5
User 43956 does not improve AUC. Reverting changes.
Training on augumented user 124313 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124313 AUC after training: 0.5
User 124313 does not improve AUC. Reverting changes.
Training on augumented user 4189 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4189 AUC after training: 0.5
User 4189 does not improve AUC. Reverting changes.
Training on augumented user 72187 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72187 AUC after training: 0.5
User 72187 does not improve AUC. Reverting changes.
Training on augumented user 130956 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130956 AUC after training: 0.5
User 130956 does not improve AUC. Reverting changes.
Training on augumented user 100588 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100588 AUC after training: 0.5
User 100588 does not improve AUC. Reverting changes.
Training on augumented user 100962 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100962 AUC after training: 0.5
User 100962 does not improve AUC. Reverting changes.
Training on augumented user 111708 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111708 AUC after training: 0.5
User 111708 does not improve AUC. Reverting changes.
Training on augumented user 134237 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134237 AUC after training: 0.5
User 134237 does not improve AUC. Reverting changes.
Training on augumented user 125466 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 125466 AUC after training: 0.5
User 125466 does not improve AUC. Reverting changes.
Training on augumented user 35922 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35922 AUC after training: 0.5
User 35922 does not improve AUC. Reverting changes.
Training on augumented user 24281 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24281 AUC after training: 0.5
User 24281 does not improve AUC. Reverting changes.
Training on augumented user 32391 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32391 AUC after training: 0.5
User 32391 does not improve AUC. Reverting changes.
Training on augumented user 48796 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48796 AUC after training: 0.5
User 48796 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:41:36.159879] start test user 101040 219/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:41:36.655115] start test user 101040 219/567 recall augumented users by random, augumented_users = [132653, 37715, 120965, 110697, 99764, 96482, 107908, 87818, 91936, 109280, 18708, 1184, 133576, 73364, 44765, 63602, 83510, 123887, 66079, 111974, 24514, 30326, 73004, 40132, 107430, 6806, 7415, 86996, 112198, 54459, 111684, 134824, 46628, 95970, 25604, 106807, 25981, 50827, 129602, 128866, 84895, 16871, 116374, 41985, 114463, 873, 29798, 65802, 83431, 59723]
[2024-12-02 19:41:36.670163] user = 101040 Cloud 219/567
[2024-12-02 19:41:36.687504] user = 101040 Local 219/567
[2024-12-02 19:41:36.783040] user = 101040 Local+ 219/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:41:40.063256] user = 101040 MPDA- 219/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6055416318574214
Training on augumented user 132653 0/50 current_auc = 0.6055416318574214
User 132653 AUC after training: 0.6066555277081593
User 132653 improves AUC. Keeping the model.
Training on augumented user 37715 1/50 current_auc = 0.6066555277081593
User 37715 AUC after training: 0.606516290726817
User 37715 does not improve AUC. Reverting changes.
Training on augumented user 120965 2/50 current_auc = 0.6066555277081593
User 120965 AUC after training: 0.607073238652186
User 120965 improves AUC. Keeping the model.
Training on augumented user 110697 3/50 current_auc = 0.607073238652186
User 110697 AUC after training: 0.6076301865775551
User 110697 improves AUC. Keeping the model.
Training on augumented user 99764 4/50 current_auc = 0.6076301865775551
User 99764 AUC after training: 0.6063770537454747
User 99764 does not improve AUC. Reverting changes.
Training on augumented user 96482 5/50 current_auc = 0.6076301865775551
User 96482 AUC after training: 0.6091617933723197
User 96482 improves AUC. Keeping the model.
Training on augumented user 107908 6/50 current_auc = 0.6091617933723197
User 107908 AUC after training: 0.6087440824282929
User 107908 does not improve AUC. Reverting changes.
Training on augumented user 87818 7/50 current_auc = 0.6091617933723197
User 87818 AUC after training: 0.6093010303536619
User 87818 improves AUC. Keeping the model.
Training on augumented user 91936 8/50 current_auc = 0.6093010303536619
User 91936 AUC after training: 0.6069340016708438
User 91936 does not improve AUC. Reverting changes.
Training on augumented user 109280 9/50 current_auc = 0.6093010303536619
User 109280 AUC after training: 0.6090225563909775
User 109280 does not improve AUC. Reverting changes.
Training on augumented user 18708 10/50 current_auc = 0.6093010303536619
User 18708 AUC after training: 0.6093010303536619
User 18708 does not improve AUC. Reverting changes.
Training on augumented user 1184 11/50 current_auc = 0.6093010303536619
User 1184 AUC after training: 0.608744082428293
User 1184 does not improve AUC. Reverting changes.
Training on augumented user 133576 12/50 current_auc = 0.6093010303536619
User 133576 AUC after training: 0.6095795043163464
User 133576 improves AUC. Keeping the model.
Training on augumented user 73364 13/50 current_auc = 0.6095795043163464
User 73364 AUC after training: 0.6088833194096352
User 73364 does not improve AUC. Reverting changes.
Training on augumented user 44765 14/50 current_auc = 0.6095795043163464
User 44765 AUC after training: 0.6099972152603732
User 44765 improves AUC. Keeping the model.
Training on augumented user 63602 15/50 current_auc = 0.6099972152603732
User 63602 AUC after training: 0.6108326371484265
User 63602 improves AUC. Keeping the model.
Training on augumented user 83510 16/50 current_auc = 0.6108326371484265
User 83510 AUC after training: 0.6109718741297688
User 83510 improves AUC. Keeping the model.
Training on augumented user 123887 17/50 current_auc = 0.6109718741297688
User 123887 AUC after training: 0.6108326371484265
User 123887 does not improve AUC. Reverting changes.
Training on augumented user 66079 18/50 current_auc = 0.6109718741297688
User 66079 AUC after training: 0.6105541631857421
User 66079 does not improve AUC. Reverting changes.
Training on augumented user 111974 19/50 current_auc = 0.6109718741297688
User 111974 AUC after training: 0.6112503480924534
User 111974 improves AUC. Keeping the model.
Training on augumented user 24514 20/50 current_auc = 0.6112503480924534
User 24514 AUC after training: 0.6106934001670843
User 24514 does not improve AUC. Reverting changes.
Training on augumented user 30326 21/50 current_auc = 0.6112503480924534
User 30326 AUC after training: 0.6109718741297689
User 30326 does not improve AUC. Reverting changes.
Training on augumented user 73004 22/50 current_auc = 0.6112503480924534
User 73004 AUC after training: 0.6112503480924534
User 73004 does not improve AUC. Reverting changes.
Training on augumented user 40132 23/50 current_auc = 0.6112503480924534
User 40132 AUC after training: 0.6111111111111112
User 40132 does not improve AUC. Reverting changes.
Training on augumented user 107430 24/50 current_auc = 0.6112503480924534
User 107430 AUC after training: 0.6111111111111112
User 107430 does not improve AUC. Reverting changes.
Training on augumented user 6806 25/50 current_auc = 0.6112503480924534
User 6806 AUC after training: 0.6108326371484265
User 6806 does not improve AUC. Reverting changes.
Training on augumented user 7415 26/50 current_auc = 0.6112503480924534
User 7415 AUC after training: 0.6109718741297687
User 7415 does not improve AUC. Reverting changes.
Training on augumented user 86996 27/50 current_auc = 0.6112503480924534
User 86996 AUC after training: 0.6106934001670843
User 86996 does not improve AUC. Reverting changes.
Training on augumented user 112198 28/50 current_auc = 0.6112503480924534
User 112198 AUC after training: 0.6105541631857421
User 112198 does not improve AUC. Reverting changes.
Training on augumented user 54459 29/50 current_auc = 0.6112503480924534
User 54459 AUC after training: 0.6095795043163464
User 54459 does not improve AUC. Reverting changes.
Training on augumented user 111684 30/50 current_auc = 0.6112503480924534
User 111684 AUC after training: 0.6108326371484265
User 111684 does not improve AUC. Reverting changes.
Training on augumented user 134824 31/50 current_auc = 0.6112503480924534
User 134824 AUC after training: 0.6109718741297689
User 134824 does not improve AUC. Reverting changes.
Training on augumented user 46628 32/50 current_auc = 0.6112503480924534
User 46628 AUC after training: 0.6101364522417154
User 46628 does not improve AUC. Reverting changes.
Training on augumented user 95970 33/50 current_auc = 0.6112503480924534
User 95970 AUC after training: 0.6101364522417154
User 95970 does not improve AUC. Reverting changes.
Training on augumented user 25604 34/50 current_auc = 0.6112503480924534
User 25604 AUC after training: 0.6097187412976887
User 25604 does not improve AUC. Reverting changes.
Training on augumented user 106807 35/50 current_auc = 0.6112503480924534
User 106807 AUC after training: 0.6109718741297688
User 106807 does not improve AUC. Reverting changes.
Training on augumented user 25981 36/50 current_auc = 0.6112503480924534
User 25981 AUC after training: 0.6109718741297689
User 25981 does not improve AUC. Reverting changes.
Training on augumented user 50827 37/50 current_auc = 0.6112503480924534
User 50827 AUC after training: 0.6106934001670843
User 50827 does not improve AUC. Reverting changes.
Training on augumented user 129602 38/50 current_auc = 0.6112503480924534
User 129602 AUC after training: 0.6105541631857422
User 129602 does not improve AUC. Reverting changes.
Training on augumented user 128866 39/50 current_auc = 0.6112503480924534
User 128866 AUC after training: 0.6106934001670843
User 128866 does not improve AUC. Reverting changes.
Training on augumented user 84895 40/50 current_auc = 0.6112503480924534
User 84895 AUC after training: 0.6108326371484265
User 84895 does not improve AUC. Reverting changes.
Training on augumented user 16871 41/50 current_auc = 0.6112503480924534
User 16871 AUC after training: 0.61166805903648
User 16871 improves AUC. Keeping the model.
Training on augumented user 116374 42/50 current_auc = 0.61166805903648
User 116374 AUC after training: 0.6113895850737956
User 116374 does not improve AUC. Reverting changes.
Training on augumented user 41985 43/50 current_auc = 0.61166805903648
User 41985 AUC after training: 0.6109718741297689
User 41985 does not improve AUC. Reverting changes.
Training on augumented user 114463 44/50 current_auc = 0.61166805903648
User 114463 AUC after training: 0.6113895850737956
User 114463 does not improve AUC. Reverting changes.
Training on augumented user 873 45/50 current_auc = 0.61166805903648
User 873 AUC after training: 0.6113895850737956
User 873 does not improve AUC. Reverting changes.
Training on augumented user 29798 46/50 current_auc = 0.61166805903648
User 29798 AUC after training: 0.6115288220551378
User 29798 does not improve AUC. Reverting changes.
Training on augumented user 65802 47/50 current_auc = 0.61166805903648
User 65802 AUC after training: 0.6113895850737956
User 65802 does not improve AUC. Reverting changes.
Training on augumented user 83431 48/50 current_auc = 0.61166805903648
User 83431 AUC after training: 0.6112503480924533
User 83431 does not improve AUC. Reverting changes.
Training on augumented user 59723 49/50 current_auc = 0.61166805903648
User 59723 AUC after training: 0.6102756892230576
User 59723 does not improve AUC. Reverting changes.
[2024-12-02 19:42:11.076087] start test user 101059 220/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:42:11.496547] start test user 101059 220/567 recall augumented users by random, augumented_users = [117860, 97457, 63204, 807, 37596, 53769, 60498, 71296, 10717, 26214, 42977, 43142, 120213, 36506, 125579, 56024, 17569, 19764, 26712, 88456, 33748, 123730, 75934, 65410, 109691, 71364, 136517, 67030, 18507, 59140, 54367, 136280, 131224, 2134, 124095, 122738, 74689, 17997, 4047, 128691, 121443, 105235, 93665, 42156, 63399, 76147, 3527, 103283, 78143, 58392]
[2024-12-02 19:42:11.511086] user = 101059 Cloud 220/567
[2024-12-02 19:42:11.521087] user = 101059 Local 220/567
[2024-12-02 19:42:11.565257] user = 101059 Local+ 220/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:42:13.732616] user = 101059 MPDA- 220/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6666666666666666
Training on augumented user 117860 0/50 current_auc = 0.6666666666666666
User 117860 AUC after training: 0.6666666666666666
User 117860 does not improve AUC. Reverting changes.
Training on augumented user 97457 1/50 current_auc = 0.6666666666666666
User 97457 AUC after training: 0.6666666666666666
User 97457 does not improve AUC. Reverting changes.
Training on augumented user 63204 2/50 current_auc = 0.6666666666666666
User 63204 AUC after training: 0.6666666666666666
User 63204 does not improve AUC. Reverting changes.
Training on augumented user 807 3/50 current_auc = 0.6666666666666666
User 807 AUC after training: 0.6666666666666666
User 807 does not improve AUC. Reverting changes.
Training on augumented user 37596 4/50 current_auc = 0.6666666666666666
User 37596 AUC after training: 0.6666666666666666
User 37596 does not improve AUC. Reverting changes.
Training on augumented user 53769 5/50 current_auc = 0.6666666666666666
User 53769 AUC after training: 0.6666666666666666
User 53769 does not improve AUC. Reverting changes.
Training on augumented user 60498 6/50 current_auc = 0.6666666666666666
User 60498 AUC after training: 0.75
User 60498 improves AUC. Keeping the model.
Training on augumented user 71296 7/50 current_auc = 0.75
User 71296 AUC after training: 0.6666666666666666
User 71296 does not improve AUC. Reverting changes.
Training on augumented user 10717 8/50 current_auc = 0.75
User 10717 AUC after training: 0.6666666666666666
User 10717 does not improve AUC. Reverting changes.
Training on augumented user 26214 9/50 current_auc = 0.75
User 26214 AUC after training: 0.6666666666666666
User 26214 does not improve AUC. Reverting changes.
Training on augumented user 42977 10/50 current_auc = 0.75
User 42977 AUC after training: 0.6666666666666666
User 42977 does not improve AUC. Reverting changes.
Training on augumented user 43142 11/50 current_auc = 0.75
User 43142 AUC after training: 0.6666666666666666
User 43142 does not improve AUC. Reverting changes.
Training on augumented user 120213 12/50 current_auc = 0.75
User 120213 AUC after training: 0.6666666666666666
User 120213 does not improve AUC. Reverting changes.
Training on augumented user 36506 13/50 current_auc = 0.75
User 36506 AUC after training: 0.75
User 36506 does not improve AUC. Reverting changes.
Training on augumented user 125579 14/50 current_auc = 0.75
User 125579 AUC after training: 0.6666666666666666
User 125579 does not improve AUC. Reverting changes.
Training on augumented user 56024 15/50 current_auc = 0.75
User 56024 AUC after training: 0.6666666666666666
User 56024 does not improve AUC. Reverting changes.
Training on augumented user 17569 16/50 current_auc = 0.75
User 17569 AUC after training: 0.75
User 17569 does not improve AUC. Reverting changes.
Training on augumented user 19764 17/50 current_auc = 0.75
User 19764 AUC after training: 0.6666666666666666
User 19764 does not improve AUC. Reverting changes.
Training on augumented user 26712 18/50 current_auc = 0.75
User 26712 AUC after training: 0.75
User 26712 does not improve AUC. Reverting changes.
Training on augumented user 88456 19/50 current_auc = 0.75
User 88456 AUC after training: 0.6666666666666666
User 88456 does not improve AUC. Reverting changes.
Training on augumented user 33748 20/50 current_auc = 0.75
User 33748 AUC after training: 0.6666666666666666
User 33748 does not improve AUC. Reverting changes.
Training on augumented user 123730 21/50 current_auc = 0.75
User 123730 AUC after training: 0.6666666666666666
User 123730 does not improve AUC. Reverting changes.
Training on augumented user 75934 22/50 current_auc = 0.75
User 75934 AUC after training: 0.6666666666666666
User 75934 does not improve AUC. Reverting changes.
Training on augumented user 65410 23/50 current_auc = 0.75
User 65410 AUC after training: 0.6666666666666666
User 65410 does not improve AUC. Reverting changes.
Training on augumented user 109691 24/50 current_auc = 0.75
User 109691 AUC after training: 0.75
User 109691 does not improve AUC. Reverting changes.
Training on augumented user 71364 25/50 current_auc = 0.75
User 71364 AUC after training: 0.6666666666666666
User 71364 does not improve AUC. Reverting changes.
Training on augumented user 136517 26/50 current_auc = 0.75
User 136517 AUC after training: 0.6666666666666666
User 136517 does not improve AUC. Reverting changes.
Training on augumented user 67030 27/50 current_auc = 0.75
User 67030 AUC after training: 0.6666666666666666
User 67030 does not improve AUC. Reverting changes.
Training on augumented user 18507 28/50 current_auc = 0.75
User 18507 AUC after training: 0.6666666666666666
User 18507 does not improve AUC. Reverting changes.
Training on augumented user 59140 29/50 current_auc = 0.75
User 59140 AUC after training: 0.6666666666666666
User 59140 does not improve AUC. Reverting changes.
Training on augumented user 54367 30/50 current_auc = 0.75
User 54367 AUC after training: 0.75
User 54367 does not improve AUC. Reverting changes.
Training on augumented user 136280 31/50 current_auc = 0.75
User 136280 AUC after training: 0.75
User 136280 does not improve AUC. Reverting changes.
Training on augumented user 131224 32/50 current_auc = 0.75
User 131224 AUC after training: 0.75
User 131224 does not improve AUC. Reverting changes.
Training on augumented user 2134 33/50 current_auc = 0.75
User 2134 AUC after training: 0.75
User 2134 does not improve AUC. Reverting changes.
Training on augumented user 124095 34/50 current_auc = 0.75
User 124095 AUC after training: 0.6666666666666666
User 124095 does not improve AUC. Reverting changes.
Training on augumented user 122738 35/50 current_auc = 0.75
User 122738 AUC after training: 0.6666666666666666
User 122738 does not improve AUC. Reverting changes.
Training on augumented user 74689 36/50 current_auc = 0.75
User 74689 AUC after training: 0.75
User 74689 does not improve AUC. Reverting changes.
Training on augumented user 17997 37/50 current_auc = 0.75
User 17997 AUC after training: 0.75
User 17997 does not improve AUC. Reverting changes.
Training on augumented user 4047 38/50 current_auc = 0.75
User 4047 AUC after training: 0.75
User 4047 does not improve AUC. Reverting changes.
Training on augumented user 128691 39/50 current_auc = 0.75
User 128691 AUC after training: 0.6666666666666666
User 128691 does not improve AUC. Reverting changes.
Training on augumented user 121443 40/50 current_auc = 0.75
User 121443 AUC after training: 0.75
User 121443 does not improve AUC. Reverting changes.
Training on augumented user 105235 41/50 current_auc = 0.75
User 105235 AUC after training: 0.6666666666666666
User 105235 does not improve AUC. Reverting changes.
Training on augumented user 93665 42/50 current_auc = 0.75
User 93665 AUC after training: 0.75
User 93665 does not improve AUC. Reverting changes.
Training on augumented user 42156 43/50 current_auc = 0.75
User 42156 AUC after training: 0.75
User 42156 does not improve AUC. Reverting changes.
Training on augumented user 63399 44/50 current_auc = 0.75
User 63399 AUC after training: 0.6666666666666666
User 63399 does not improve AUC. Reverting changes.
Training on augumented user 76147 45/50 current_auc = 0.75
User 76147 AUC after training: 0.75
User 76147 does not improve AUC. Reverting changes.
Training on augumented user 3527 46/50 current_auc = 0.75
User 3527 AUC after training: 0.6666666666666666
User 3527 does not improve AUC. Reverting changes.
Training on augumented user 103283 47/50 current_auc = 0.75
User 103283 AUC after training: 0.6666666666666666
User 103283 does not improve AUC. Reverting changes.
Training on augumented user 78143 48/50 current_auc = 0.75
User 78143 AUC after training: 0.75
User 78143 does not improve AUC. Reverting changes.
Training on augumented user 58392 49/50 current_auc = 0.75
User 58392 AUC after training: 0.6666666666666666
User 58392 does not improve AUC. Reverting changes.
[2024-12-02 19:42:45.277787] start test user 101072 221/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:42:46.010924] start test user 101072 221/567 recall augumented users by random, augumented_users = [104704, 78247, 39943, 25657, 67136, 104034, 23292, 41126, 12234, 27604, 64783, 127087, 11062, 49995, 6234, 88663, 64660, 75151, 79568, 86505, 126932, 55446, 82666, 70985, 119753, 22661, 63121, 61705, 133339, 100791, 64862, 28838, 82467, 93251, 49460, 20634, 121836, 118541, 23829, 52182, 75296, 52651, 21027, 134769, 12518, 101019, 103915, 111816, 26522, 34363]
[2024-12-02 19:42:46.039741] user = 101072 Cloud 221/567
[2024-12-02 19:42:46.054331] user = 101072 Local 221/567
[2024-12-02 19:42:46.112553] user = 101072 Local+ 221/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:42:48.433109] user = 101072 MPDA- 221/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5673211781206171
Training on augumented user 104704 0/50 current_auc = 0.5673211781206171
User 104704 AUC after training: 0.5659186535764376
User 104704 does not improve AUC. Reverting changes.
Training on augumented user 78247 1/50 current_auc = 0.5673211781206171
User 78247 AUC after training: 0.5652173913043479
User 78247 does not improve AUC. Reverting changes.
Training on augumented user 39943 2/50 current_auc = 0.5673211781206171
User 39943 AUC after training: 0.5659186535764376
User 39943 does not improve AUC. Reverting changes.
Training on augumented user 25657 3/50 current_auc = 0.5673211781206171
User 25657 AUC after training: 0.564516129032258
User 25657 does not improve AUC. Reverting changes.
Training on augumented user 67136 4/50 current_auc = 0.5673211781206171
User 67136 AUC after training: 0.5673211781206171
User 67136 does not improve AUC. Reverting changes.
Training on augumented user 104034 5/50 current_auc = 0.5673211781206171
User 104034 AUC after training: 0.5673211781206171
User 104034 does not improve AUC. Reverting changes.
Training on augumented user 23292 6/50 current_auc = 0.5673211781206171
User 23292 AUC after training: 0.5659186535764377
User 23292 does not improve AUC. Reverting changes.
Training on augumented user 41126 7/50 current_auc = 0.5673211781206171
User 41126 AUC after training: 0.5673211781206171
User 41126 does not improve AUC. Reverting changes.
Training on augumented user 12234 8/50 current_auc = 0.5673211781206171
User 12234 AUC after training: 0.5659186535764376
User 12234 does not improve AUC. Reverting changes.
Training on augumented user 27604 9/50 current_auc = 0.5673211781206171
User 27604 AUC after training: 0.5617110799438991
User 27604 does not improve AUC. Reverting changes.
Training on augumented user 64783 10/50 current_auc = 0.5673211781206171
User 64783 AUC after training: 0.5645161290322581
User 64783 does not improve AUC. Reverting changes.
Training on augumented user 127087 11/50 current_auc = 0.5673211781206171
User 127087 AUC after training: 0.5666199158485274
User 127087 does not improve AUC. Reverting changes.
Training on augumented user 11062 12/50 current_auc = 0.5673211781206171
User 11062 AUC after training: 0.5673211781206171
User 11062 does not improve AUC. Reverting changes.
Training on augumented user 49995 13/50 current_auc = 0.5673211781206171
User 49995 AUC after training: 0.5673211781206171
User 49995 does not improve AUC. Reverting changes.
Training on augumented user 6234 14/50 current_auc = 0.5673211781206171
User 6234 AUC after training: 0.564516129032258
User 6234 does not improve AUC. Reverting changes.
Training on augumented user 88663 15/50 current_auc = 0.5673211781206171
User 88663 AUC after training: 0.5631136044880786
User 88663 does not improve AUC. Reverting changes.
Training on augumented user 64660 16/50 current_auc = 0.5673211781206171
User 64660 AUC after training: 0.5687237026647967
User 64660 improves AUC. Keeping the model.
Training on augumented user 75151 17/50 current_auc = 0.5687237026647967
User 75151 AUC after training: 0.5687237026647967
User 75151 does not improve AUC. Reverting changes.
Training on augumented user 79568 18/50 current_auc = 0.5687237026647967
User 79568 AUC after training: 0.5673211781206171
User 79568 does not improve AUC. Reverting changes.
Training on augumented user 86505 19/50 current_auc = 0.5687237026647967
User 86505 AUC after training: 0.5666199158485274
User 86505 does not improve AUC. Reverting changes.
Training on augumented user 126932 20/50 current_auc = 0.5687237026647967
User 126932 AUC after training: 0.5680224403927069
User 126932 does not improve AUC. Reverting changes.
Training on augumented user 55446 21/50 current_auc = 0.5687237026647967
User 55446 AUC after training: 0.5659186535764377
User 55446 does not improve AUC. Reverting changes.
Training on augumented user 82666 22/50 current_auc = 0.5687237026647967
User 82666 AUC after training: 0.5673211781206171
User 82666 does not improve AUC. Reverting changes.
Training on augumented user 70985 23/50 current_auc = 0.5687237026647967
User 70985 AUC after training: 0.5645161290322581
User 70985 does not improve AUC. Reverting changes.
Training on augumented user 119753 24/50 current_auc = 0.5687237026647967
User 119753 AUC after training: 0.5673211781206171
User 119753 does not improve AUC. Reverting changes.
Training on augumented user 22661 25/50 current_auc = 0.5687237026647967
User 22661 AUC after training: 0.5666199158485274
User 22661 does not improve AUC. Reverting changes.
Training on augumented user 63121 26/50 current_auc = 0.5687237026647967
User 63121 AUC after training: 0.5666199158485274
User 63121 does not improve AUC. Reverting changes.
Training on augumented user 61705 27/50 current_auc = 0.5687237026647967
User 61705 AUC after training: 0.5638148667601683
User 61705 does not improve AUC. Reverting changes.
Training on augumented user 133339 28/50 current_auc = 0.5687237026647967
User 133339 AUC after training: 0.5659186535764377
User 133339 does not improve AUC. Reverting changes.
Training on augumented user 100791 29/50 current_auc = 0.5687237026647967
User 100791 AUC after training: 0.5645161290322581
User 100791 does not improve AUC. Reverting changes.
Training on augumented user 64862 30/50 current_auc = 0.5687237026647967
User 64862 AUC after training: 0.5694249649368864
User 64862 improves AUC. Keeping the model.
Training on augumented user 28838 31/50 current_auc = 0.5694249649368864
User 28838 AUC after training: 0.5680224403927069
User 28838 does not improve AUC. Reverting changes.
Training on augumented user 82467 32/50 current_auc = 0.5694249649368864
User 82467 AUC after training: 0.5645161290322581
User 82467 does not improve AUC. Reverting changes.
Training on augumented user 93251 33/50 current_auc = 0.5694249649368864
User 93251 AUC after training: 0.5680224403927069
User 93251 does not improve AUC. Reverting changes.
Training on augumented user 49460 34/50 current_auc = 0.5694249649368864
User 49460 AUC after training: 0.5673211781206171
User 49460 does not improve AUC. Reverting changes.
Training on augumented user 20634 35/50 current_auc = 0.5694249649368864
User 20634 AUC after training: 0.5673211781206171
User 20634 does not improve AUC. Reverting changes.
Training on augumented user 121836 36/50 current_auc = 0.5694249649368864
User 121836 AUC after training: 0.5666199158485274
User 121836 does not improve AUC. Reverting changes.
Training on augumented user 118541 37/50 current_auc = 0.5694249649368864
User 118541 AUC after training: 0.5659186535764376
User 118541 does not improve AUC. Reverting changes.
Training on augumented user 23829 38/50 current_auc = 0.5694249649368864
User 23829 AUC after training: 0.5680224403927069
User 23829 does not improve AUC. Reverting changes.
Training on augumented user 52182 39/50 current_auc = 0.5694249649368864
User 52182 AUC after training: 0.5673211781206171
User 52182 does not improve AUC. Reverting changes.
Training on augumented user 75296 40/50 current_auc = 0.5694249649368864
User 75296 AUC after training: 0.5631136044880785
User 75296 does not improve AUC. Reverting changes.
Training on augumented user 52651 41/50 current_auc = 0.5694249649368864
User 52651 AUC after training: 0.5687237026647967
User 52651 does not improve AUC. Reverting changes.
Training on augumented user 21027 42/50 current_auc = 0.5694249649368864
User 21027 AUC after training: 0.5673211781206171
User 21027 does not improve AUC. Reverting changes.
Training on augumented user 134769 43/50 current_auc = 0.5694249649368864
User 134769 AUC after training: 0.5694249649368864
User 134769 does not improve AUC. Reverting changes.
Training on augumented user 12518 44/50 current_auc = 0.5694249649368864
User 12518 AUC after training: 0.5659186535764376
User 12518 does not improve AUC. Reverting changes.
Training on augumented user 101019 45/50 current_auc = 0.5694249649368864
User 101019 AUC after training: 0.5666199158485273
User 101019 does not improve AUC. Reverting changes.
Training on augumented user 103915 46/50 current_auc = 0.5694249649368864
User 103915 AUC after training: 0.5666199158485273
User 103915 does not improve AUC. Reverting changes.
Training on augumented user 111816 47/50 current_auc = 0.5694249649368864
User 111816 AUC after training: 0.568022440392707
User 111816 does not improve AUC. Reverting changes.
Training on augumented user 26522 48/50 current_auc = 0.5694249649368864
User 26522 AUC after training: 0.5666199158485274
User 26522 does not improve AUC. Reverting changes.
Training on augumented user 34363 49/50 current_auc = 0.5694249649368864
User 34363 AUC after training: 0.5673211781206171
User 34363 does not improve AUC. Reverting changes.
[2024-12-02 19:43:21.818808] start test user 101100 222/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:43:22.252162] start test user 101100 222/567 recall augumented users by random, augumented_users = [79322, 22086, 106466, 24138, 117943, 138486, 24195, 26598, 75319, 100239, 98734, 32564, 132319, 44444, 28633, 9854, 58018, 91210, 3700, 31675, 118607, 19556, 106182, 115286, 92345, 59787, 67099, 127040, 113948, 62523, 58860, 127694, 100399, 67104, 70582, 110608, 20484, 13775, 134177, 2645, 63197, 77997, 93461, 90044, 73113, 63996, 104075, 123973, 39832, 3368]
[2024-12-02 19:43:22.267320] user = 101100 Cloud 222/567
[2024-12-02 19:43:22.278064] user = 101100 Local 222/567
[2024-12-02 19:43:22.318274] user = 101100 Local+ 222/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:43:24.646285] user = 101100 MPDA- 222/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7637254901960784
Training on augumented user 79322 0/50 current_auc = 0.7637254901960784
User 79322 AUC after training: 0.7647058823529411
User 79322 improves AUC. Keeping the model.
Training on augumented user 22086 1/50 current_auc = 0.7647058823529411
User 22086 AUC after training: 0.7627450980392156
User 22086 does not improve AUC. Reverting changes.
Training on augumented user 106466 2/50 current_auc = 0.7647058823529411
User 106466 AUC after training: 0.7647058823529411
User 106466 does not improve AUC. Reverting changes.
Training on augumented user 24138 3/50 current_auc = 0.7647058823529411
User 24138 AUC after training: 0.7656862745098039
User 24138 improves AUC. Keeping the model.
Training on augumented user 117943 4/50 current_auc = 0.7656862745098039
User 117943 AUC after training: 0.7647058823529411
User 117943 does not improve AUC. Reverting changes.
Training on augumented user 138486 5/50 current_auc = 0.7656862745098039
User 138486 AUC after training: 0.7666666666666667
User 138486 improves AUC. Keeping the model.
Training on augumented user 24195 6/50 current_auc = 0.7666666666666667
User 24195 AUC after training: 0.7647058823529412
User 24195 does not improve AUC. Reverting changes.
Training on augumented user 26598 7/50 current_auc = 0.7666666666666667
User 26598 AUC after training: 0.7647058823529412
User 26598 does not improve AUC. Reverting changes.
Training on augumented user 75319 8/50 current_auc = 0.7666666666666667
User 75319 AUC after training: 0.7666666666666667
User 75319 does not improve AUC. Reverting changes.
Training on augumented user 100239 9/50 current_auc = 0.7666666666666667
User 100239 AUC after training: 0.7637254901960784
User 100239 does not improve AUC. Reverting changes.
Training on augumented user 98734 10/50 current_auc = 0.7666666666666667
User 98734 AUC after training: 0.765686274509804
User 98734 does not improve AUC. Reverting changes.
Training on augumented user 32564 11/50 current_auc = 0.7666666666666667
User 32564 AUC after training: 0.765686274509804
User 32564 does not improve AUC. Reverting changes.
Training on augumented user 132319 12/50 current_auc = 0.7666666666666667
User 132319 AUC after training: 0.7676470588235295
User 132319 improves AUC. Keeping the model.
Training on augumented user 44444 13/50 current_auc = 0.7676470588235295
User 44444 AUC after training: 0.7676470588235295
User 44444 does not improve AUC. Reverting changes.
Training on augumented user 28633 14/50 current_auc = 0.7676470588235295
User 28633 AUC after training: 0.7666666666666667
User 28633 does not improve AUC. Reverting changes.
Training on augumented user 9854 15/50 current_auc = 0.7676470588235295
User 9854 AUC after training: 0.7676470588235295
User 9854 does not improve AUC. Reverting changes.
Training on augumented user 58018 16/50 current_auc = 0.7676470588235295
User 58018 AUC after training: 0.7666666666666667
User 58018 does not improve AUC. Reverting changes.
Training on augumented user 91210 17/50 current_auc = 0.7676470588235295
User 91210 AUC after training: 0.7676470588235295
User 91210 does not improve AUC. Reverting changes.
Training on augumented user 3700 18/50 current_auc = 0.7676470588235295
User 3700 AUC after training: 0.7700980392156863
User 3700 improves AUC. Keeping the model.
Training on augumented user 31675 19/50 current_auc = 0.7700980392156863
User 31675 AUC after training: 0.771078431372549
User 31675 improves AUC. Keeping the model.
Training on augumented user 118607 20/50 current_auc = 0.771078431372549
User 118607 AUC after training: 0.771078431372549
User 118607 does not improve AUC. Reverting changes.
Training on augumented user 19556 21/50 current_auc = 0.771078431372549
User 19556 AUC after training: 0.7700980392156863
User 19556 does not improve AUC. Reverting changes.
Training on augumented user 106182 22/50 current_auc = 0.771078431372549
User 106182 AUC after training: 0.7720588235294118
User 106182 improves AUC. Keeping the model.
Training on augumented user 115286 23/50 current_auc = 0.7720588235294118
User 115286 AUC after training: 0.7700980392156862
User 115286 does not improve AUC. Reverting changes.
Training on augumented user 92345 24/50 current_auc = 0.7720588235294118
User 92345 AUC after training: 0.7700980392156862
User 92345 does not improve AUC. Reverting changes.
Training on augumented user 59787 25/50 current_auc = 0.7720588235294118
User 59787 AUC after training: 0.7740196078431373
User 59787 improves AUC. Keeping the model.
Training on augumented user 67099 26/50 current_auc = 0.7740196078431373
User 67099 AUC after training: 0.7725490196078432
User 67099 does not improve AUC. Reverting changes.
Training on augumented user 127040 27/50 current_auc = 0.7740196078431373
User 127040 AUC after training: 0.7740196078431373
User 127040 does not improve AUC. Reverting changes.
Training on augumented user 113948 28/50 current_auc = 0.7740196078431373
User 113948 AUC after training: 0.7740196078431373
User 113948 does not improve AUC. Reverting changes.
Training on augumented user 62523 29/50 current_auc = 0.7740196078431373
User 62523 AUC after training: 0.7720588235294118
User 62523 does not improve AUC. Reverting changes.
Training on augumented user 58860 30/50 current_auc = 0.7740196078431373
User 58860 AUC after training: 0.7720588235294118
User 58860 does not improve AUC. Reverting changes.
Training on augumented user 127694 31/50 current_auc = 0.7740196078431373
User 127694 AUC after training: 0.7676470588235293
User 127694 does not improve AUC. Reverting changes.
Training on augumented user 100399 32/50 current_auc = 0.7740196078431373
User 100399 AUC after training: 0.7686274509803922
User 100399 does not improve AUC. Reverting changes.
Training on augumented user 67104 33/50 current_auc = 0.7740196078431373
User 67104 AUC after training: 0.7676470588235293
User 67104 does not improve AUC. Reverting changes.
Training on augumented user 70582 34/50 current_auc = 0.7740196078431373
User 70582 AUC after training: 0.7740196078431373
User 70582 does not improve AUC. Reverting changes.
Training on augumented user 110608 35/50 current_auc = 0.7740196078431373
User 110608 AUC after training: 0.7725490196078433
User 110608 does not improve AUC. Reverting changes.
Training on augumented user 20484 36/50 current_auc = 0.7740196078431373
User 20484 AUC after training: 0.7730392156862745
User 20484 does not improve AUC. Reverting changes.
Training on augumented user 13775 37/50 current_auc = 0.7740196078431373
User 13775 AUC after training: 0.7720588235294118
User 13775 does not improve AUC. Reverting changes.
Training on augumented user 134177 38/50 current_auc = 0.7740196078431373
User 134177 AUC after training: 0.7725490196078432
User 134177 does not improve AUC. Reverting changes.
Training on augumented user 2645 39/50 current_auc = 0.7740196078431373
User 2645 AUC after training: 0.7740196078431373
User 2645 does not improve AUC. Reverting changes.
Training on augumented user 63197 40/50 current_auc = 0.7740196078431373
User 63197 AUC after training: 0.7710784313725491
User 63197 does not improve AUC. Reverting changes.
Training on augumented user 77997 41/50 current_auc = 0.7740196078431373
User 77997 AUC after training: 0.7740196078431373
User 77997 does not improve AUC. Reverting changes.
Training on augumented user 93461 42/50 current_auc = 0.7740196078431373
User 93461 AUC after training: 0.7735294117647059
User 93461 does not improve AUC. Reverting changes.
Training on augumented user 90044 43/50 current_auc = 0.7740196078431373
User 90044 AUC after training: 0.7710784313725491
User 90044 does not improve AUC. Reverting changes.
Training on augumented user 73113 44/50 current_auc = 0.7740196078431373
User 73113 AUC after training: 0.7740196078431373
User 73113 does not improve AUC. Reverting changes.
Training on augumented user 63996 45/50 current_auc = 0.7740196078431373
User 63996 AUC after training: 0.7700980392156862
User 63996 does not improve AUC. Reverting changes.
Training on augumented user 104075 46/50 current_auc = 0.7740196078431373
User 104075 AUC after training: 0.7740196078431373
User 104075 does not improve AUC. Reverting changes.
Training on augumented user 123973 47/50 current_auc = 0.7740196078431373
User 123973 AUC after training: 0.7710784313725491
User 123973 does not improve AUC. Reverting changes.
Training on augumented user 39832 48/50 current_auc = 0.7740196078431373
User 39832 AUC after training: 0.7740196078431373
User 39832 does not improve AUC. Reverting changes.
Training on augumented user 3368 49/50 current_auc = 0.7740196078431373
User 3368 AUC after training: 0.7740196078431373
User 3368 does not improve AUC. Reverting changes.
[2024-12-02 19:43:55.931424] start test user 101129 223/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:43:56.484159] start test user 101129 223/567 recall augumented users by random, augumented_users = [65968, 40352, 72276, 13214, 35352, 81043, 57819, 8055, 63730, 131541, 135959, 131395, 43103, 85397, 70352, 132740, 138410, 83556, 92983, 108396, 111287, 82384, 20994, 50212, 62141, 83200, 84138, 86979, 104340, 686, 20510, 114594, 121550, 20029, 39322, 24525, 9264, 16009, 90446, 65455, 22486, 41522, 71737, 133256, 109489, 90476, 53881, 22179, 47027, 60437]
[2024-12-02 19:43:56.499760] user = 101129 Cloud 223/567
[2024-12-02 19:43:56.509228] user = 101129 Local 223/567
[2024-12-02 19:43:56.570514] user = 101129 Local+ 223/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:43:59.675551] user = 101129 MPDA- 223/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 1.0
Training on augumented user 65968 0/50 current_auc = 1.0
User 65968 AUC after training: 1.0
User 65968 does not improve AUC. Reverting changes.
Training on augumented user 40352 1/50 current_auc = 1.0
User 40352 AUC after training: 1.0
User 40352 does not improve AUC. Reverting changes.
Training on augumented user 72276 2/50 current_auc = 1.0
User 72276 AUC after training: 1.0
User 72276 does not improve AUC. Reverting changes.
Training on augumented user 13214 3/50 current_auc = 1.0
User 13214 AUC after training: 1.0
User 13214 does not improve AUC. Reverting changes.
Training on augumented user 35352 4/50 current_auc = 1.0
User 35352 AUC after training: 1.0
User 35352 does not improve AUC. Reverting changes.
Training on augumented user 81043 5/50 current_auc = 1.0
User 81043 AUC after training: 1.0
User 81043 does not improve AUC. Reverting changes.
Training on augumented user 57819 6/50 current_auc = 1.0
User 57819 AUC after training: 1.0
User 57819 does not improve AUC. Reverting changes.
Training on augumented user 8055 7/50 current_auc = 1.0
User 8055 AUC after training: 1.0
User 8055 does not improve AUC. Reverting changes.
Training on augumented user 63730 8/50 current_auc = 1.0
User 63730 AUC after training: 1.0
User 63730 does not improve AUC. Reverting changes.
Training on augumented user 131541 9/50 current_auc = 1.0
User 131541 AUC after training: 1.0
User 131541 does not improve AUC. Reverting changes.
Training on augumented user 135959 10/50 current_auc = 1.0
User 135959 AUC after training: 1.0
User 135959 does not improve AUC. Reverting changes.
Training on augumented user 131395 11/50 current_auc = 1.0
User 131395 AUC after training: 1.0
User 131395 does not improve AUC. Reverting changes.
Training on augumented user 43103 12/50 current_auc = 1.0
User 43103 AUC after training: 1.0
User 43103 does not improve AUC. Reverting changes.
Training on augumented user 85397 13/50 current_auc = 1.0
User 85397 AUC after training: 1.0
User 85397 does not improve AUC. Reverting changes.
Training on augumented user 70352 14/50 current_auc = 1.0
User 70352 AUC after training: 1.0
User 70352 does not improve AUC. Reverting changes.
Training on augumented user 132740 15/50 current_auc = 1.0
User 132740 AUC after training: 1.0
User 132740 does not improve AUC. Reverting changes.
Training on augumented user 138410 16/50 current_auc = 1.0
User 138410 AUC after training: 1.0
User 138410 does not improve AUC. Reverting changes.
Training on augumented user 83556 17/50 current_auc = 1.0
User 83556 AUC after training: 1.0
User 83556 does not improve AUC. Reverting changes.
Training on augumented user 92983 18/50 current_auc = 1.0
User 92983 AUC after training: 1.0
User 92983 does not improve AUC. Reverting changes.
Training on augumented user 108396 19/50 current_auc = 1.0
User 108396 AUC after training: 1.0
User 108396 does not improve AUC. Reverting changes.
Training on augumented user 111287 20/50 current_auc = 1.0
User 111287 AUC after training: 1.0
User 111287 does not improve AUC. Reverting changes.
Training on augumented user 82384 21/50 current_auc = 1.0
User 82384 AUC after training: 1.0
User 82384 does not improve AUC. Reverting changes.
Training on augumented user 20994 22/50 current_auc = 1.0
User 20994 AUC after training: 1.0
User 20994 does not improve AUC. Reverting changes.
Training on augumented user 50212 23/50 current_auc = 1.0
User 50212 AUC after training: 1.0
User 50212 does not improve AUC. Reverting changes.
Training on augumented user 62141 24/50 current_auc = 1.0
User 62141 AUC after training: 1.0
User 62141 does not improve AUC. Reverting changes.
Training on augumented user 83200 25/50 current_auc = 1.0
User 83200 AUC after training: 1.0
User 83200 does not improve AUC. Reverting changes.
Training on augumented user 84138 26/50 current_auc = 1.0
User 84138 AUC after training: 1.0
User 84138 does not improve AUC. Reverting changes.
Training on augumented user 86979 27/50 current_auc = 1.0
User 86979 AUC after training: 1.0
User 86979 does not improve AUC. Reverting changes.
Training on augumented user 104340 28/50 current_auc = 1.0
User 104340 AUC after training: 1.0
User 104340 does not improve AUC. Reverting changes.
Training on augumented user 686 29/50 current_auc = 1.0
User 686 AUC after training: 1.0
User 686 does not improve AUC. Reverting changes.
Training on augumented user 20510 30/50 current_auc = 1.0
User 20510 AUC after training: 1.0
User 20510 does not improve AUC. Reverting changes.
Training on augumented user 114594 31/50 current_auc = 1.0
User 114594 AUC after training: 1.0
User 114594 does not improve AUC. Reverting changes.
Training on augumented user 121550 32/50 current_auc = 1.0
User 121550 AUC after training: 1.0
User 121550 does not improve AUC. Reverting changes.
Training on augumented user 20029 33/50 current_auc = 1.0
User 20029 AUC after training: 1.0
User 20029 does not improve AUC. Reverting changes.
Training on augumented user 39322 34/50 current_auc = 1.0
User 39322 AUC after training: 1.0
User 39322 does not improve AUC. Reverting changes.
Training on augumented user 24525 35/50 current_auc = 1.0
User 24525 AUC after training: 1.0
User 24525 does not improve AUC. Reverting changes.
Training on augumented user 9264 36/50 current_auc = 1.0
User 9264 AUC after training: 1.0
User 9264 does not improve AUC. Reverting changes.
Training on augumented user 16009 37/50 current_auc = 1.0
User 16009 AUC after training: 1.0
User 16009 does not improve AUC. Reverting changes.
Training on augumented user 90446 38/50 current_auc = 1.0
User 90446 AUC after training: 1.0
User 90446 does not improve AUC. Reverting changes.
Training on augumented user 65455 39/50 current_auc = 1.0
User 65455 AUC after training: 1.0
User 65455 does not improve AUC. Reverting changes.
Training on augumented user 22486 40/50 current_auc = 1.0
User 22486 AUC after training: 1.0
User 22486 does not improve AUC. Reverting changes.
Training on augumented user 41522 41/50 current_auc = 1.0
User 41522 AUC after training: 1.0
User 41522 does not improve AUC. Reverting changes.
Training on augumented user 71737 42/50 current_auc = 1.0
User 71737 AUC after training: 1.0
User 71737 does not improve AUC. Reverting changes.
Training on augumented user 133256 43/50 current_auc = 1.0
User 133256 AUC after training: 1.0
User 133256 does not improve AUC. Reverting changes.
Training on augumented user 109489 44/50 current_auc = 1.0
User 109489 AUC after training: 1.0
User 109489 does not improve AUC. Reverting changes.
Training on augumented user 90476 45/50 current_auc = 1.0
User 90476 AUC after training: 1.0
User 90476 does not improve AUC. Reverting changes.
Training on augumented user 53881 46/50 current_auc = 1.0
User 53881 AUC after training: 1.0
User 53881 does not improve AUC. Reverting changes.
Training on augumented user 22179 47/50 current_auc = 1.0
User 22179 AUC after training: 1.0
User 22179 does not improve AUC. Reverting changes.
Training on augumented user 47027 48/50 current_auc = 1.0
User 47027 AUC after training: 1.0
User 47027 does not improve AUC. Reverting changes.
Training on augumented user 60437 49/50 current_auc = 1.0
User 60437 AUC after training: 1.0
User 60437 does not improve AUC. Reverting changes.
[2024-12-02 19:44:29.607019] start test user 101133 224/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:44:30.022759] start test user 101133 224/567 recall augumented users by random, augumented_users = [39974, 121281, 67187, 51070, 10894, 128989, 91322, 4560, 51964, 128180, 96968, 9390, 43407, 52727, 128279, 67247, 50319, 119496, 100916, 111164, 55335, 1123, 100771, 84783, 60504, 58384, 55913, 108648, 69822, 79740, 85660, 115684, 27542, 39160, 48182, 115210, 70278, 116519, 64570, 39002, 105092, 119460, 9780, 33405, 92963, 98643, 120358, 86130, 33689, 21]
[2024-12-02 19:44:30.037733] user = 101133 Cloud 224/567
[2024-12-02 19:44:30.048348] user = 101133 Local 224/567
[2024-12-02 19:44:30.078629] user = 101133 Local+ 224/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:44:31.941845] user = 101133 MPDA- 224/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6807692307692308
Training on augumented user 39974 0/50 current_auc = 0.6807692307692308
User 39974 AUC after training: 0.6807692307692308
User 39974 does not improve AUC. Reverting changes.
Training on augumented user 121281 1/50 current_auc = 0.6807692307692308
User 121281 AUC after training: 0.6807692307692308
User 121281 does not improve AUC. Reverting changes.
Training on augumented user 67187 2/50 current_auc = 0.6807692307692308
User 67187 AUC after training: 0.6807692307692308
User 67187 does not improve AUC. Reverting changes.
Training on augumented user 51070 3/50 current_auc = 0.6807692307692308
User 51070 AUC after training: 0.6807692307692308
User 51070 does not improve AUC. Reverting changes.
Training on augumented user 10894 4/50 current_auc = 0.6807692307692308
User 10894 AUC after training: 0.6807692307692308
User 10894 does not improve AUC. Reverting changes.
Training on augumented user 128989 5/50 current_auc = 0.6807692307692308
User 128989 AUC after training: 0.676923076923077
User 128989 does not improve AUC. Reverting changes.
Training on augumented user 91322 6/50 current_auc = 0.6807692307692308
User 91322 AUC after training: 0.6807692307692308
User 91322 does not improve AUC. Reverting changes.
Training on augumented user 4560 7/50 current_auc = 0.6807692307692308
User 4560 AUC after training: 0.6807692307692308
User 4560 does not improve AUC. Reverting changes.
Training on augumented user 51964 8/50 current_auc = 0.6807692307692308
User 51964 AUC after training: 0.6807692307692308
User 51964 does not improve AUC. Reverting changes.
Training on augumented user 128180 9/50 current_auc = 0.6807692307692308
User 128180 AUC after training: 0.6807692307692308
User 128180 does not improve AUC. Reverting changes.
Training on augumented user 96968 10/50 current_auc = 0.6807692307692308
User 96968 AUC after training: 0.6807692307692308
User 96968 does not improve AUC. Reverting changes.
Training on augumented user 9390 11/50 current_auc = 0.6807692307692308
User 9390 AUC after training: 0.676923076923077
User 9390 does not improve AUC. Reverting changes.
Training on augumented user 43407 12/50 current_auc = 0.6807692307692308
User 43407 AUC after training: 0.676923076923077
User 43407 does not improve AUC. Reverting changes.
Training on augumented user 52727 13/50 current_auc = 0.6807692307692308
User 52727 AUC after training: 0.676923076923077
User 52727 does not improve AUC. Reverting changes.
Training on augumented user 128279 14/50 current_auc = 0.6807692307692308
User 128279 AUC after training: 0.6807692307692308
User 128279 does not improve AUC. Reverting changes.
Training on augumented user 67247 15/50 current_auc = 0.6807692307692308
User 67247 AUC after training: 0.6807692307692308
User 67247 does not improve AUC. Reverting changes.
Training on augumented user 50319 16/50 current_auc = 0.6807692307692308
User 50319 AUC after training: 0.6807692307692308
User 50319 does not improve AUC. Reverting changes.
Training on augumented user 119496 17/50 current_auc = 0.6807692307692308
User 119496 AUC after training: 0.6807692307692308
User 119496 does not improve AUC. Reverting changes.
Training on augumented user 100916 18/50 current_auc = 0.6807692307692308
User 100916 AUC after training: 0.6807692307692308
User 100916 does not improve AUC. Reverting changes.
Training on augumented user 111164 19/50 current_auc = 0.6807692307692308
User 111164 AUC after training: 0.676923076923077
User 111164 does not improve AUC. Reverting changes.
Training on augumented user 55335 20/50 current_auc = 0.6807692307692308
User 55335 AUC after training: 0.6807692307692308
User 55335 does not improve AUC. Reverting changes.
Training on augumented user 1123 21/50 current_auc = 0.6807692307692308
User 1123 AUC after training: 0.6807692307692308
User 1123 does not improve AUC. Reverting changes.
Training on augumented user 100771 22/50 current_auc = 0.6807692307692308
User 100771 AUC after training: 0.6807692307692308
User 100771 does not improve AUC. Reverting changes.
Training on augumented user 84783 23/50 current_auc = 0.6807692307692308
User 84783 AUC after training: 0.6807692307692308
User 84783 does not improve AUC. Reverting changes.
Training on augumented user 60504 24/50 current_auc = 0.6807692307692308
User 60504 AUC after training: 0.6807692307692308
User 60504 does not improve AUC. Reverting changes.
Training on augumented user 58384 25/50 current_auc = 0.6807692307692308
User 58384 AUC after training: 0.6807692307692308
User 58384 does not improve AUC. Reverting changes.
Training on augumented user 55913 26/50 current_auc = 0.6807692307692308
User 55913 AUC after training: 0.6807692307692308
User 55913 does not improve AUC. Reverting changes.
Training on augumented user 108648 27/50 current_auc = 0.6807692307692308
User 108648 AUC after training: 0.6807692307692308
User 108648 does not improve AUC. Reverting changes.
Training on augumented user 69822 28/50 current_auc = 0.6807692307692308
User 69822 AUC after training: 0.6807692307692308
User 69822 does not improve AUC. Reverting changes.
Training on augumented user 79740 29/50 current_auc = 0.6807692307692308
User 79740 AUC after training: 0.6807692307692308
User 79740 does not improve AUC. Reverting changes.
Training on augumented user 85660 30/50 current_auc = 0.6807692307692308
User 85660 AUC after training: 0.6807692307692308
User 85660 does not improve AUC. Reverting changes.
Training on augumented user 115684 31/50 current_auc = 0.6807692307692308
User 115684 AUC after training: 0.676923076923077
User 115684 does not improve AUC. Reverting changes.
Training on augumented user 27542 32/50 current_auc = 0.6807692307692308
User 27542 AUC after training: 0.6807692307692308
User 27542 does not improve AUC. Reverting changes.
Training on augumented user 39160 33/50 current_auc = 0.6807692307692308
User 39160 AUC after training: 0.6807692307692308
User 39160 does not improve AUC. Reverting changes.
Training on augumented user 48182 34/50 current_auc = 0.6807692307692308
User 48182 AUC after training: 0.6807692307692308
User 48182 does not improve AUC. Reverting changes.
Training on augumented user 115210 35/50 current_auc = 0.6807692307692308
User 115210 AUC after training: 0.6807692307692308
User 115210 does not improve AUC. Reverting changes.
Training on augumented user 70278 36/50 current_auc = 0.6807692307692308
User 70278 AUC after training: 0.6807692307692308
User 70278 does not improve AUC. Reverting changes.
Training on augumented user 116519 37/50 current_auc = 0.6807692307692308
User 116519 AUC after training: 0.6846153846153846
User 116519 improves AUC. Keeping the model.
Training on augumented user 64570 38/50 current_auc = 0.6846153846153846
User 64570 AUC after training: 0.6807692307692308
User 64570 does not improve AUC. Reverting changes.
Training on augumented user 39002 39/50 current_auc = 0.6846153846153846
User 39002 AUC after training: 0.676923076923077
User 39002 does not improve AUC. Reverting changes.
Training on augumented user 105092 40/50 current_auc = 0.6846153846153846
User 105092 AUC after training: 0.6807692307692308
User 105092 does not improve AUC. Reverting changes.
Training on augumented user 119460 41/50 current_auc = 0.6846153846153846
User 119460 AUC after training: 0.6807692307692308
User 119460 does not improve AUC. Reverting changes.
Training on augumented user 9780 42/50 current_auc = 0.6846153846153846
User 9780 AUC after training: 0.6846153846153846
User 9780 does not improve AUC. Reverting changes.
Training on augumented user 33405 43/50 current_auc = 0.6846153846153846
User 33405 AUC after training: 0.6807692307692308
User 33405 does not improve AUC. Reverting changes.
Training on augumented user 92963 44/50 current_auc = 0.6846153846153846
User 92963 AUC after training: 0.6807692307692308
User 92963 does not improve AUC. Reverting changes.
Training on augumented user 98643 45/50 current_auc = 0.6846153846153846
User 98643 AUC after training: 0.6807692307692308
User 98643 does not improve AUC. Reverting changes.
Training on augumented user 120358 46/50 current_auc = 0.6846153846153846
User 120358 AUC after training: 0.6807692307692308
User 120358 does not improve AUC. Reverting changes.
Training on augumented user 86130 47/50 current_auc = 0.6846153846153846
User 86130 AUC after training: 0.676923076923077
User 86130 does not improve AUC. Reverting changes.
Training on augumented user 33689 48/50 current_auc = 0.6846153846153846
User 33689 AUC after training: 0.6846153846153846
User 33689 does not improve AUC. Reverting changes.
Training on augumented user 21 49/50 current_auc = 0.6846153846153846
User 21 AUC after training: 0.676923076923077
User 21 does not improve AUC. Reverting changes.
[2024-12-02 19:45:01.877974] start test user 101155 225/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:45:02.338135] start test user 101155 225/567 recall augumented users by random, augumented_users = [107959, 97576, 128845, 106234, 27571, 123699, 101269, 76315, 127249, 29063, 86161, 70097, 60937, 64770, 50211, 97776, 102122, 120881, 123934, 76300, 17227, 30158, 103863, 57027, 108350, 61295, 113725, 110403, 378, 97688, 120573, 129549, 19271, 90250, 133105, 128613, 136620, 89704, 74575, 126618, 37985, 26542, 115607, 86555, 9656, 100399, 90522, 50122, 115082, 109815]
[2024-12-02 19:45:02.354975] user = 101155 Cloud 225/567
[2024-12-02 19:45:02.436652] user = 101155 Local 225/567
[2024-12-02 19:45:02.619046] user = 101155 Local+ 225/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:45:06.048472] user = 101155 MPDA- 225/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6841741949038086
Training on augumented user 107959 0/50 current_auc = 0.6841741949038086
User 107959 AUC after training: 0.6842342207149074
User 107959 improves AUC. Keeping the model.
Training on augumented user 97576 1/50 current_auc = 0.6842342207149074
User 97576 AUC after training: 0.6839641045649629
User 97576 does not improve AUC. Reverting changes.
Training on augumented user 128845 2/50 current_auc = 0.6842342207149074
User 128845 AUC after training: 0.6838740658483148
User 128845 does not improve AUC. Reverting changes.
Training on augumented user 106234 3/50 current_auc = 0.6842342207149074
User 106234 AUC after training: 0.6845343497704013
User 106234 improves AUC. Keeping the model.
Training on augumented user 27571 4/50 current_auc = 0.6845343497704013
User 27571 AUC after training: 0.6846844142981482
User 27571 improves AUC. Keeping the model.
Training on augumented user 123699 5/50 current_auc = 0.6846844142981482
User 123699 AUC after training: 0.6846243884870494
User 123699 does not improve AUC. Reverting changes.
Training on augumented user 101269 6/50 current_auc = 0.6846844142981482
User 101269 AUC after training: 0.6846844142981482
User 101269 does not improve AUC. Reverting changes.
Training on augumented user 76315 7/50 current_auc = 0.6846844142981482
User 76315 AUC after training: 0.6849545304480926
User 76315 improves AUC. Keeping the model.
Training on augumented user 127249 8/50 current_auc = 0.6849545304480926
User 127249 AUC after training: 0.6852246465980372
User 127249 improves AUC. Keeping the model.
Training on augumented user 29063 9/50 current_auc = 0.6852246465980372
User 29063 AUC after training: 0.6855547885590804
User 29063 improves AUC. Keeping the model.
Training on augumented user 86161 10/50 current_auc = 0.6855547885590804
User 86161 AUC after training: 0.6853747111257841
User 86161 does not improve AUC. Reverting changes.
Training on augumented user 70097 11/50 current_auc = 0.6855547885590804
User 70097 AUC after training: 0.6837840271316666
User 70097 does not improve AUC. Reverting changes.
Training on augumented user 60937 12/50 current_auc = 0.6855547885590804
User 60937 AUC after training: 0.685524775653531
User 60937 does not improve AUC. Reverting changes.
Training on augumented user 64770 13/50 current_auc = 0.6855547885590804
User 64770 AUC after training: 0.685134607881389
User 64770 does not improve AUC. Reverting changes.
Training on augumented user 50211 14/50 current_auc = 0.6855547885590804
User 50211 AUC after training: 0.6837240013205679
User 50211 does not improve AUC. Reverting changes.
Training on augumented user 97776 15/50 current_auc = 0.6855547885590804
User 97776 AUC after training: 0.6856748401812779
User 97776 improves AUC. Keeping the model.
Training on augumented user 102122 16/50 current_auc = 0.6856748401812779
User 102122 AUC after training: 0.6853747111257841
User 102122 does not improve AUC. Reverting changes.
Training on augumented user 120881 17/50 current_auc = 0.6856748401812779
User 120881 AUC after training: 0.6853446982202347
User 120881 does not improve AUC. Reverting changes.
Training on augumented user 123934 18/50 current_auc = 0.6856748401812779
User 123934 AUC after training: 0.6839340916594137
User 123934 does not improve AUC. Reverting changes.
Training on augumented user 76300 19/50 current_auc = 0.6856748401812779
User 76300 AUC after training: 0.6845943755815
User 76300 does not improve AUC. Reverting changes.
Training on augumented user 17227 20/50 current_auc = 0.6856748401812779
User 17227 AUC after training: 0.6852846724091359
User 17227 does not improve AUC. Reverting changes.
Training on augumented user 30158 21/50 current_auc = 0.6856748401812779
User 30158 AUC after training: 0.6853146853146852
User 30158 does not improve AUC. Reverting changes.
Training on augumented user 103863 22/50 current_auc = 0.6856748401812779
User 103863 AUC after training: 0.6843242594315555
User 103863 does not improve AUC. Reverting changes.
Training on augumented user 57027 23/50 current_auc = 0.6856748401812779
User 57027 AUC after training: 0.6855848014646299
User 57027 does not improve AUC. Reverting changes.
Training on augumented user 108350 24/50 current_auc = 0.6856748401812779
User 108350 AUC after training: 0.683663975509469
User 108350 does not improve AUC. Reverting changes.
Training on augumented user 61295 25/50 current_auc = 0.6856748401812779
User 61295 AUC after training: 0.6854647498424322
User 61295 does not improve AUC. Reverting changes.
Training on augumented user 113725 26/50 current_auc = 0.6856748401812779
User 113725 AUC after training: 0.6850145562591915
User 113725 does not improve AUC. Reverting changes.
Training on augumented user 110403 27/50 current_auc = 0.6856748401812779
User 110403 AUC after training: 0.684399291695429
User 110403 does not improve AUC. Reverting changes.
Training on augumented user 378 28/50 current_auc = 0.6856748401812779
User 378 AUC after training: 0.6851946336924878
User 378 does not improve AUC. Reverting changes.
Training on augumented user 97688 29/50 current_auc = 0.6856748401812779
User 97688 AUC after training: 0.685674840181278
User 97688 improves AUC. Keeping the model.
Training on augumented user 120573 30/50 current_auc = 0.685674840181278
User 120573 AUC after training: 0.6850745820702902
User 120573 does not improve AUC. Reverting changes.
Training on augumented user 129549 31/50 current_auc = 0.685674840181278
User 129549 AUC after training: 0.6852846724091359
User 129549 does not improve AUC. Reverting changes.
Training on augumented user 19271 32/50 current_auc = 0.685674840181278
User 19271 AUC after training: 0.6856148143701791
User 19271 does not improve AUC. Reverting changes.
Training on augumented user 90250 33/50 current_auc = 0.685674840181278
User 90250 AUC after training: 0.6855547885590804
User 90250 does not improve AUC. Reverting changes.
Training on augumented user 133105 34/50 current_auc = 0.685674840181278
User 133105 AUC after training: 0.6849545304480926
User 133105 does not improve AUC. Reverting changes.
Training on augumented user 128613 35/50 current_auc = 0.685674840181278
User 128613 AUC after training: 0.6854347369368828
User 128613 does not improve AUC. Reverting changes.
Training on augumented user 136620 36/50 current_auc = 0.685674840181278
User 136620 AUC after training: 0.685764878897926
User 136620 improves AUC. Keeping the model.
Training on augumented user 89704 37/50 current_auc = 0.685764878897926
User 89704 AUC after training: 0.6860049821423212
User 89704 improves AUC. Keeping the model.
Training on augumented user 74575 38/50 current_auc = 0.6860049821423212
User 74575 AUC after training: 0.684894504636994
User 74575 does not improve AUC. Reverting changes.
Training on augumented user 126618 39/50 current_auc = 0.6860049821423212
User 126618 AUC after training: 0.6856748401812779
User 126618 does not improve AUC. Reverting changes.
Training on augumented user 37985 40/50 current_auc = 0.6860049821423212
User 37985 AUC after training: 0.6854347369368828
User 37985 does not improve AUC. Reverting changes.
Training on augumented user 26542 41/50 current_auc = 0.6860049821423212
User 26542 AUC after training: 0.6851646207869383
User 26542 does not improve AUC. Reverting changes.
Training on augumented user 115607 42/50 current_auc = 0.6860049821423212
User 115607 AUC after training: 0.6859749692367717
User 115607 does not improve AUC. Reverting changes.
Training on augumented user 86555 43/50 current_auc = 0.6860049821423212
User 86555 AUC after training: 0.6850745820702904
User 86555 does not improve AUC. Reverting changes.
Training on augumented user 9656 44/50 current_auc = 0.6860049821423212
User 9656 AUC after training: 0.6856148143701792
User 9656 does not improve AUC. Reverting changes.
Training on augumented user 100399 45/50 current_auc = 0.6860049821423212
User 100399 AUC after training: 0.6848945046369939
User 100399 does not improve AUC. Reverting changes.
Training on augumented user 90522 46/50 current_auc = 0.6860049821423212
User 90522 AUC after training: 0.6855547885590804
User 90522 does not improve AUC. Reverting changes.
Training on augumented user 50122 47/50 current_auc = 0.6860049821423212
User 50122 AUC after training: 0.6862150724811669
User 50122 improves AUC. Keeping the model.
Training on augumented user 115082 48/50 current_auc = 0.6862150724811669
User 115082 AUC after training: 0.6861850595756176
User 115082 does not improve AUC. Reverting changes.
Training on augumented user 109815 49/50 current_auc = 0.6862150724811669
User 109815 AUC after training: 0.6858999369728983
User 109815 does not improve AUC. Reverting changes.
[2024-12-02 19:45:40.447596] start test user 101171 226/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:45:40.974599] start test user 101171 226/567 recall augumented users by random, augumented_users = [89324, 60603, 59835, 85919, 31669, 67322, 128350, 26642, 70802, 70357, 49411, 13381, 108068, 100329, 92075, 88721, 99872, 420, 4044, 122046, 25116, 125987, 29765, 92096, 86323, 27220, 1809, 48331, 57470, 112858, 62155, 87242, 22198, 85156, 74991, 24323, 134116, 98877, 85062, 122456, 70396, 22890, 57211, 50867, 75399, 22252, 103840, 71371, 5235, 9946]
[2024-12-02 19:45:40.991103] user = 101171 Cloud 226/567
[2024-12-02 19:45:41.044833] user = 101171 Local 226/567
[2024-12-02 19:45:41.300241] user = 101171 Local+ 226/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:45:43.561435] user = 101171 MPDA- 226/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.711864406779661
Training on augumented user 89324 0/50 current_auc = 0.711864406779661
User 89324 AUC after training: 0.7117093840429929
User 89324 does not improve AUC. Reverting changes.
Training on augumented user 60603 1/50 current_auc = 0.711864406779661
User 60603 AUC after training: 0.7114510128152128
User 60603 does not improve AUC. Reverting changes.
Training on augumented user 59835 2/50 current_auc = 0.711864406779661
User 59835 AUC after training: 0.7123811492352212
User 59835 improves AUC. Keeping the model.
Training on augumented user 85919 3/50 current_auc = 0.7123811492352212
User 85919 AUC after training: 0.7129495659363373
User 85919 improves AUC. Keeping the model.
Training on augumented user 31669 4/50 current_auc = 0.7129495659363373
User 31669 AUC after training: 0.7129495659363372
User 31669 does not improve AUC. Reverting changes.
Training on augumented user 67322 5/50 current_auc = 0.7129495659363373
User 67322 AUC after training: 0.7134663083918974
User 67322 improves AUC. Keeping the model.
Training on augumented user 128350 6/50 current_auc = 0.7134663083918974
User 128350 AUC after training: 0.7131045886730054
User 128350 does not improve AUC. Reverting changes.
Training on augumented user 26642 7/50 current_auc = 0.7134663083918974
User 26642 AUC after training: 0.7128462174452252
User 26642 does not improve AUC. Reverting changes.
Training on augumented user 70802 8/50 current_auc = 0.7134663083918974
User 70802 AUC after training: 0.7131045886730053
User 70802 does not improve AUC. Reverting changes.
Training on augumented user 70357 9/50 current_auc = 0.7134663083918974
User 70357 AUC after training: 0.7130012401818933
User 70357 does not improve AUC. Reverting changes.
Training on augumented user 49411 10/50 current_auc = 0.7134663083918974
User 49411 AUC after training: 0.7132079371641175
User 49411 does not improve AUC. Reverting changes.
Training on augumented user 13381 11/50 current_auc = 0.7134663083918974
User 13381 AUC after training: 0.7127945431996693
User 13381 does not improve AUC. Reverting changes.
Training on augumented user 108068 12/50 current_auc = 0.7134663083918974
User 108068 AUC after training: 0.7135696568830096
User 108068 improves AUC. Keeping the model.
Training on augumented user 100329 13/50 current_auc = 0.7135696568830096
User 100329 AUC after training: 0.7133629599007855
User 100329 does not improve AUC. Reverting changes.
Training on augumented user 92075 14/50 current_auc = 0.7135696568830096
User 92075 AUC after training: 0.7134146341463414
User 92075 does not improve AUC. Reverting changes.
Training on augumented user 88721 15/50 current_auc = 0.7135696568830096
User 88721 AUC after training: 0.7134663083918974
User 88721 does not improve AUC. Reverting changes.
Training on augumented user 99872 16/50 current_auc = 0.7135696568830096
User 99872 AUC after training: 0.7136988424968995
User 99872 improves AUC. Keeping the model.
Training on augumented user 420 17/50 current_auc = 0.7136988424968995
User 420 AUC after training: 0.7136730053741215
User 420 does not improve AUC. Reverting changes.
Training on augumented user 4044 18/50 current_auc = 0.7136988424968995
User 4044 AUC after training: 0.7123294749896651
User 4044 does not improve AUC. Reverting changes.
Training on augumented user 122046 19/50 current_auc = 0.7136988424968995
User 122046 AUC after training: 0.7124844977263332
User 122046 does not improve AUC. Reverting changes.
Training on augumented user 25116 20/50 current_auc = 0.7136988424968995
User 25116 AUC after training: 0.7137763538652335
User 25116 improves AUC. Keeping the model.
Training on augumented user 125987 21/50 current_auc = 0.7137763538652335
User 125987 AUC after training: 0.7133629599007855
User 125987 does not improve AUC. Reverting changes.
Training on augumented user 29765 22/50 current_auc = 0.7137763538652335
User 29765 AUC after training: 0.7139313766019016
User 29765 improves AUC. Keeping the model.
Training on augumented user 92096 23/50 current_auc = 0.7139313766019016
User 92096 AUC after training: 0.7123811492352211
User 92096 does not improve AUC. Reverting changes.
Training on augumented user 86323 24/50 current_auc = 0.7139313766019016
User 86323 AUC after training: 0.7129495659363374
User 86323 does not improve AUC. Reverting changes.
Training on augumented user 27220 25/50 current_auc = 0.7139313766019016
User 27220 AUC after training: 0.7134146341463414
User 27220 does not improve AUC. Reverting changes.
Training on augumented user 1809 26/50 current_auc = 0.7139313766019016
User 1809 AUC after training: 0.7133629599007855
User 1809 does not improve AUC. Reverting changes.
Training on augumented user 48331 27/50 current_auc = 0.7139313766019016
User 48331 AUC after training: 0.7121744522529971
User 48331 does not improve AUC. Reverting changes.
Training on augumented user 57470 28/50 current_auc = 0.7139313766019016
User 57470 AUC after training: 0.7135696568830094
User 57470 does not improve AUC. Reverting changes.
Training on augumented user 112858 29/50 current_auc = 0.7139313766019016
User 112858 AUC after training: 0.7135179826374535
User 112858 does not improve AUC. Reverting changes.
Training on augumented user 62155 30/50 current_auc = 0.7139313766019016
User 62155 AUC after training: 0.7135179826374535
User 62155 does not improve AUC. Reverting changes.
Training on augumented user 87242 31/50 current_auc = 0.7139313766019016
User 87242 AUC after training: 0.7137763538652336
User 87242 does not improve AUC. Reverting changes.
Training on augumented user 22198 32/50 current_auc = 0.7139313766019016
User 22198 AUC after training: 0.7138280281107896
User 22198 does not improve AUC. Reverting changes.
Training on augumented user 85156 33/50 current_auc = 0.7139313766019016
User 85156 AUC after training: 0.7140863993385697
User 85156 improves AUC. Keeping the model.
Training on augumented user 74991 34/50 current_auc = 0.7140863993385697
User 74991 AUC after training: 0.7121744522529971
User 74991 does not improve AUC. Reverting changes.
Training on augumented user 24323 35/50 current_auc = 0.7140863993385697
User 24323 AUC after training: 0.7141380735841256
User 24323 improves AUC. Keeping the model.
Training on augumented user 134116 36/50 current_auc = 0.7141380735841256
User 134116 AUC after training: 0.715688300950806
User 134116 improves AUC. Keeping the model.
Training on augumented user 98877 37/50 current_auc = 0.715688300950806
User 98877 AUC after training: 0.7163600661430343
User 98877 improves AUC. Keeping the model.
Training on augumented user 85062 38/50 current_auc = 0.7163600661430343
User 85062 AUC after training: 0.7156366267052501
User 85062 does not improve AUC. Reverting changes.
Training on augumented user 122456 39/50 current_auc = 0.7163600661430343
User 122456 AUC after training: 0.7164117403885902
User 122456 improves AUC. Keeping the model.
Training on augumented user 70396 40/50 current_auc = 0.7164117403885902
User 70396 AUC after training: 0.7158949979330301
User 70396 does not improve AUC. Reverting changes.
Training on augumented user 22890 41/50 current_auc = 0.7164117403885902
User 22890 AUC after training: 0.7163600661430344
User 22890 does not improve AUC. Reverting changes.
Training on augumented user 57211 42/50 current_auc = 0.7164117403885902
User 57211 AUC after training: 0.7161533691608102
User 57211 does not improve AUC. Reverting changes.
Training on augumented user 50867 43/50 current_auc = 0.7164117403885902
User 50867 AUC after training: 0.7161016949152542
User 50867 does not improve AUC. Reverting changes.
Training on augumented user 75399 44/50 current_auc = 0.7164117403885902
User 75399 AUC after training: 0.7159983464241422
User 75399 does not improve AUC. Reverting changes.
Training on augumented user 22252 45/50 current_auc = 0.7164117403885902
User 22252 AUC after training: 0.7163600661430343
User 22252 does not improve AUC. Reverting changes.
Training on augumented user 103840 46/50 current_auc = 0.7164117403885902
User 103840 AUC after training: 0.7164117403885903
User 103840 improves AUC. Keeping the model.
Training on augumented user 71371 47/50 current_auc = 0.7164117403885903
User 71371 AUC after training: 0.7164117403885903
User 71371 does not improve AUC. Reverting changes.
Training on augumented user 5235 48/50 current_auc = 0.7164117403885903
User 5235 AUC after training: 0.715688300950806
User 5235 does not improve AUC. Reverting changes.
Training on augumented user 9946 49/50 current_auc = 0.7164117403885903
User 9946 AUC after training: 0.7163083918974783
User 9946 does not improve AUC. Reverting changes.
[2024-12-02 19:46:17.923557] start test user 101197 227/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:46:18.630345] start test user 101197 227/567 recall augumented users by random, augumented_users = [5693, 83147, 98321, 79365, 12857, 35754, 118494, 76615, 135272, 105022, 9662, 78843, 41065, 86622, 135911, 7766, 60783, 133798, 19386, 126064, 122636, 44592, 25249, 61434, 133818, 47989, 673, 127013, 83950, 85539, 39879, 29222, 98630, 30522, 101852, 34519, 104613, 123996, 76314, 93647, 32356, 38034, 113605, 4219, 74265, 91547, 5126, 136379, 21930, 115277]
[2024-12-02 19:46:18.654098] user = 101197 Cloud 227/567
[2024-12-02 19:46:18.689730] user = 101197 Local 227/567
[2024-12-02 19:46:18.872819] user = 101197 Local+ 227/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:46:21.124802] user = 101197 MPDA- 227/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.664796633941094
Training on augumented user 5693 0/50 current_auc = 0.664796633941094
User 5693 AUC after training: 0.6649524700015583
User 5693 improves AUC. Keeping the model.
Training on augumented user 83147 1/50 current_auc = 0.6649524700015583
User 83147 AUC after training: 0.6646407978806296
User 83147 does not improve AUC. Reverting changes.
Training on augumented user 98321 2/50 current_auc = 0.6649524700015583
User 98321 AUC after training: 0.6649524700015583
User 98321 does not improve AUC. Reverting changes.
Training on augumented user 79365 3/50 current_auc = 0.6649524700015583
User 79365 AUC after training: 0.6647187159108617
User 79365 does not improve AUC. Reverting changes.
Training on augumented user 12857 4/50 current_auc = 0.6649524700015583
User 12857 AUC after training: 0.6643291257597008
User 12857 does not improve AUC. Reverting changes.
Training on augumented user 35754 5/50 current_auc = 0.6649524700015583
User 35754 AUC after training: 0.6646407978806296
User 35754 does not improve AUC. Reverting changes.
Training on augumented user 118494 6/50 current_auc = 0.6649524700015583
User 118494 AUC after training: 0.664407043789933
User 118494 does not improve AUC. Reverting changes.
Training on augumented user 76615 7/50 current_auc = 0.6649524700015583
User 76615 AUC after training: 0.6643291257597008
User 76615 does not improve AUC. Reverting changes.
Training on augumented user 135272 8/50 current_auc = 0.6649524700015583
User 135272 AUC after training: 0.6643291257597008
User 135272 does not improve AUC. Reverting changes.
Training on augumented user 105022 9/50 current_auc = 0.6649524700015583
User 105022 AUC after training: 0.6647187159108617
User 105022 does not improve AUC. Reverting changes.
Training on augumented user 9662 10/50 current_auc = 0.6649524700015583
User 9662 AUC after training: 0.6645628798503974
User 9662 does not improve AUC. Reverting changes.
Training on augumented user 78843 11/50 current_auc = 0.6649524700015583
User 78843 AUC after training: 0.6648745519713262
User 78843 does not improve AUC. Reverting changes.
Training on augumented user 41065 12/50 current_auc = 0.6649524700015583
User 41065 AUC after training: 0.664407043789933
User 41065 does not improve AUC. Reverting changes.
Training on augumented user 86622 13/50 current_auc = 0.6649524700015583
User 86622 AUC after training: 0.6655758142434159
User 86622 improves AUC. Keeping the model.
Training on augumented user 135911 14/50 current_auc = 0.6655758142434159
User 135911 AUC after training: 0.6651083060620228
User 135911 does not improve AUC. Reverting changes.
Training on augumented user 7766 15/50 current_auc = 0.6655758142434159
User 7766 AUC after training: 0.664796633941094
User 7766 does not improve AUC. Reverting changes.
Training on augumented user 60783 16/50 current_auc = 0.6655758142434159
User 60783 AUC after training: 0.6654199781829515
User 60783 does not improve AUC. Reverting changes.
Training on augumented user 133798 17/50 current_auc = 0.6655758142434159
User 133798 AUC after training: 0.6651083060620228
User 133798 does not improve AUC. Reverting changes.
Training on augumented user 19386 18/50 current_auc = 0.6655758142434159
User 19386 AUC after training: 0.664796633941094
User 19386 does not improve AUC. Reverting changes.
Training on augumented user 126064 19/50 current_auc = 0.6655758142434159
User 126064 AUC after training: 0.6652641421224872
User 126064 does not improve AUC. Reverting changes.
Training on augumented user 122636 20/50 current_auc = 0.6655758142434159
User 122636 AUC after training: 0.664796633941094
User 122636 does not improve AUC. Reverting changes.
Training on augumented user 44592 21/50 current_auc = 0.6655758142434159
User 44592 AUC after training: 0.6651083060620228
User 44592 does not improve AUC. Reverting changes.
Training on augumented user 25249 22/50 current_auc = 0.6655758142434159
User 25249 AUC after training: 0.664017453638772
User 25249 does not improve AUC. Reverting changes.
Training on augumented user 61434 23/50 current_auc = 0.6655758142434159
User 61434 AUC after training: 0.6635499454573788
User 61434 does not improve AUC. Reverting changes.
Training on augumented user 133818 24/50 current_auc = 0.6655758142434159
User 133818 AUC after training: 0.6641732896992365
User 133818 does not improve AUC. Reverting changes.
Training on augumented user 47989 25/50 current_auc = 0.6655758142434159
User 47989 AUC after training: 0.6654199781829515
User 47989 does not improve AUC. Reverting changes.
Training on augumented user 673 26/50 current_auc = 0.6655758142434159
User 673 AUC after training: 0.6654199781829515
User 673 does not improve AUC. Reverting changes.
Training on augumented user 127013 27/50 current_auc = 0.6655758142434159
User 127013 AUC after training: 0.6651862240922549
User 127013 does not improve AUC. Reverting changes.
Training on augumented user 83950 28/50 current_auc = 0.6655758142434159
User 83950 AUC after training: 0.6642512077294686
User 83950 does not improve AUC. Reverting changes.
Training on augumented user 85539 29/50 current_auc = 0.6655758142434159
User 85539 AUC after training: 0.6651083060620228
User 85539 does not improve AUC. Reverting changes.
Training on augumented user 39879 30/50 current_auc = 0.6655758142434159
User 39879 AUC after training: 0.6652641421224872
User 39879 does not improve AUC. Reverting changes.
Training on augumented user 29222 31/50 current_auc = 0.6655758142434159
User 29222 AUC after training: 0.6645628798503973
User 29222 does not improve AUC. Reverting changes.
Training on augumented user 98630 32/50 current_auc = 0.6655758142434159
User 98630 AUC after training: 0.6658874863643447
User 98630 improves AUC. Keeping the model.
Training on augumented user 30522 33/50 current_auc = 0.6658874863643447
User 30522 AUC after training: 0.6655758142434158
User 30522 does not improve AUC. Reverting changes.
Training on augumented user 101852 34/50 current_auc = 0.6658874863643447
User 101852 AUC after training: 0.6661991584852734
User 101852 improves AUC. Keeping the model.
Training on augumented user 34519 35/50 current_auc = 0.6661991584852734
User 34519 AUC after training: 0.6658874863643447
User 34519 does not improve AUC. Reverting changes.
Training on augumented user 104613 36/50 current_auc = 0.6661991584852734
User 104613 AUC after training: 0.6657316503038804
User 104613 does not improve AUC. Reverting changes.
Training on augumented user 123996 37/50 current_auc = 0.6661991584852734
User 123996 AUC after training: 0.6657316503038803
User 123996 does not improve AUC. Reverting changes.
Training on augumented user 76314 38/50 current_auc = 0.6661991584852734
User 76314 AUC after training: 0.6659654043945769
User 76314 does not improve AUC. Reverting changes.
Training on augumented user 93647 39/50 current_auc = 0.6661991584852734
User 93647 AUC after training: 0.6655758142434159
User 93647 does not improve AUC. Reverting changes.
Training on augumented user 32356 40/50 current_auc = 0.6661991584852734
User 32356 AUC after training: 0.6661991584852734
User 32356 does not improve AUC. Reverting changes.
Training on augumented user 38034 41/50 current_auc = 0.6661991584852734
User 38034 AUC after training: 0.6663549945457379
User 38034 improves AUC. Keeping the model.
Training on augumented user 113605 42/50 current_auc = 0.6663549945457379
User 113605 AUC after training: 0.6644849618201651
User 113605 does not improve AUC. Reverting changes.
Training on augumented user 4219 43/50 current_auc = 0.6663549945457379
User 4219 AUC after training: 0.6637057815178432
User 4219 does not improve AUC. Reverting changes.
Training on augumented user 74265 44/50 current_auc = 0.6663549945457379
User 74265 AUC after training: 0.6652641421224872
User 74265 does not improve AUC. Reverting changes.
Training on augumented user 91547 45/50 current_auc = 0.6663549945457379
User 91547 AUC after training: 0.6651083060620226
User 91547 does not improve AUC. Reverting changes.
Training on augumented user 5126 46/50 current_auc = 0.6663549945457379
User 5126 AUC after training: 0.6654199781829515
User 5126 does not improve AUC. Reverting changes.
Training on augumented user 136379 47/50 current_auc = 0.6663549945457379
User 136379 AUC after training: 0.6658874863643447
User 136379 does not improve AUC. Reverting changes.
Training on augumented user 21930 48/50 current_auc = 0.6663549945457379
User 21930 AUC after training: 0.6646407978806295
User 21930 does not improve AUC. Reverting changes.
Training on augumented user 115277 49/50 current_auc = 0.6663549945457379
User 115277 AUC after training: 0.6646407978806295
User 115277 does not improve AUC. Reverting changes.
[2024-12-02 19:46:54.191792] start test user 101274 228/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:46:54.806488] start test user 101274 228/567 recall augumented users by random, augumented_users = [98107, 70642, 73244, 56741, 107678, 8537, 31679, 79864, 50492, 24835, 52913, 46785, 131411, 102510, 37776, 39139, 83952, 5693, 116664, 136327, 124220, 76461, 122898, 93025, 122899, 127901, 101662, 59429, 93330, 58, 24396, 93749, 137640, 46784, 25568, 100546, 53813, 105885, 58278, 38548, 90076, 77677, 131832, 119214, 11748, 44925, 56088, 24172, 17581, 114165]
[2024-12-02 19:46:54.821920] user = 101274 Cloud 228/567
[2024-12-02 19:46:54.838777] user = 101274 Local 228/567
[2024-12-02 19:46:54.968572] user = 101274 Local+ 228/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:46:57.571625] user = 101274 MPDA- 228/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7126436781609194
Training on augumented user 98107 0/50 current_auc = 0.7126436781609194
User 98107 AUC after training: 0.7138664710198092
User 98107 improves AUC. Keeping the model.
Training on augumented user 70642 1/50 current_auc = 0.7138664710198092
User 70642 AUC after training: 0.7143555881633651
User 70642 improves AUC. Keeping the model.
Training on augumented user 73244 2/50 current_auc = 0.7143555881633651
User 73244 AUC after training: 0.7136219124480313
User 73244 does not improve AUC. Reverting changes.
Training on augumented user 56741 3/50 current_auc = 0.7143555881633651
User 56741 AUC after training: 0.7136219124480313
User 56741 does not improve AUC. Reverting changes.
Training on augumented user 107678 4/50 current_auc = 0.7143555881633651
User 107678 AUC after training: 0.714355588163365
User 107678 does not improve AUC. Reverting changes.
Training on augumented user 8537 5/50 current_auc = 0.7143555881633651
User 8537 AUC after training: 0.7141110295915871
User 8537 does not improve AUC. Reverting changes.
Training on augumented user 31679 6/50 current_auc = 0.7143555881633651
User 31679 AUC after training: 0.7143555881633651
User 31679 does not improve AUC. Reverting changes.
Training on augumented user 79864 7/50 current_auc = 0.7143555881633651
User 79864 AUC after training: 0.7138664710198092
User 79864 does not improve AUC. Reverting changes.
Training on augumented user 50492 8/50 current_auc = 0.7143555881633651
User 50492 AUC after training: 0.7143555881633651
User 50492 does not improve AUC. Reverting changes.
Training on augumented user 24835 9/50 current_auc = 0.7143555881633651
User 24835 AUC after training: 0.7143555881633651
User 24835 does not improve AUC. Reverting changes.
Training on augumented user 52913 10/50 current_auc = 0.7143555881633651
User 52913 AUC after training: 0.7143555881633651
User 52913 does not improve AUC. Reverting changes.
Training on augumented user 46785 11/50 current_auc = 0.7143555881633651
User 46785 AUC after training: 0.7138664710198092
User 46785 does not improve AUC. Reverting changes.
Training on augumented user 131411 12/50 current_auc = 0.7143555881633651
User 131411 AUC after training: 0.7141110295915872
User 131411 does not improve AUC. Reverting changes.
Training on augumented user 102510 13/50 current_auc = 0.7143555881633651
User 102510 AUC after training: 0.7138664710198092
User 102510 does not improve AUC. Reverting changes.
Training on augumented user 37776 14/50 current_auc = 0.7143555881633651
User 37776 AUC after training: 0.7138664710198092
User 37776 does not improve AUC. Reverting changes.
Training on augumented user 39139 15/50 current_auc = 0.7143555881633651
User 39139 AUC after training: 0.7146001467351429
User 39139 improves AUC. Keeping the model.
Training on augumented user 83952 16/50 current_auc = 0.7146001467351429
User 83952 AUC after training: 0.7141110295915871
User 83952 does not improve AUC. Reverting changes.
Training on augumented user 5693 17/50 current_auc = 0.7146001467351429
User 5693 AUC after training: 0.7138664710198092
User 5693 does not improve AUC. Reverting changes.
Training on augumented user 116664 18/50 current_auc = 0.7146001467351429
User 116664 AUC after training: 0.7141110295915871
User 116664 does not improve AUC. Reverting changes.
Training on augumented user 136327 19/50 current_auc = 0.7146001467351429
User 136327 AUC after training: 0.7141110295915871
User 136327 does not improve AUC. Reverting changes.
Training on augumented user 124220 20/50 current_auc = 0.7146001467351429
User 124220 AUC after training: 0.7123991195891416
User 124220 does not improve AUC. Reverting changes.
Training on augumented user 76461 21/50 current_auc = 0.7146001467351429
User 76461 AUC after training: 0.7150892638786989
User 76461 improves AUC. Keeping the model.
Training on augumented user 122898 22/50 current_auc = 0.7150892638786989
User 122898 AUC after training: 0.7153338224504768
User 122898 improves AUC. Keeping the model.
Training on augumented user 93025 23/50 current_auc = 0.7153338224504768
User 93025 AUC after training: 0.7163120567375886
User 93025 improves AUC. Keeping the model.
Training on augumented user 122899 24/50 current_auc = 0.7163120567375886
User 122899 AUC after training: 0.7160674981658107
User 122899 does not improve AUC. Reverting changes.
Training on augumented user 127901 25/50 current_auc = 0.7163120567375886
User 127901 AUC after training: 0.7160674981658107
User 127901 does not improve AUC. Reverting changes.
Training on augumented user 101662 26/50 current_auc = 0.7163120567375886
User 101662 AUC after training: 0.7158229395940328
User 101662 does not improve AUC. Reverting changes.
Training on augumented user 59429 27/50 current_auc = 0.7163120567375886
User 59429 AUC after training: 0.7170457324529225
User 59429 improves AUC. Keeping the model.
Training on augumented user 93330 28/50 current_auc = 0.7170457324529225
User 93330 AUC after training: 0.7165566153093665
User 93330 does not improve AUC. Reverting changes.
Training on augumented user 58 29/50 current_auc = 0.7170457324529225
User 58 AUC after training: 0.7168011738811445
User 58 does not improve AUC. Reverting changes.
Training on augumented user 24396 30/50 current_auc = 0.7170457324529225
User 24396 AUC after training: 0.7168011738811445
User 24396 does not improve AUC. Reverting changes.
Training on augumented user 93749 31/50 current_auc = 0.7170457324529225
User 93749 AUC after training: 0.7172902910247004
User 93749 improves AUC. Keeping the model.
Training on augumented user 137640 32/50 current_auc = 0.7172902910247004
User 137640 AUC after training: 0.7172902910247004
User 137640 does not improve AUC. Reverting changes.
Training on augumented user 46784 33/50 current_auc = 0.7172902910247004
User 46784 AUC after training: 0.7170457324529225
User 46784 does not improve AUC. Reverting changes.
Training on augumented user 25568 34/50 current_auc = 0.7172902910247004
User 25568 AUC after training: 0.7168011738811445
User 25568 does not improve AUC. Reverting changes.
Training on augumented user 100546 35/50 current_auc = 0.7172902910247004
User 100546 AUC after training: 0.7157006603081437
User 100546 does not improve AUC. Reverting changes.
Training on augumented user 53813 36/50 current_auc = 0.7172902910247004
User 53813 AUC after training: 0.7172902910247003
User 53813 does not improve AUC. Reverting changes.
Training on augumented user 105885 37/50 current_auc = 0.7172902910247004
User 105885 AUC after training: 0.7168011738811445
User 105885 does not improve AUC. Reverting changes.
Training on augumented user 58278 38/50 current_auc = 0.7172902910247004
User 58278 AUC after training: 0.7172902910247003
User 58278 does not improve AUC. Reverting changes.
Training on augumented user 38548 39/50 current_auc = 0.7172902910247004
User 38548 AUC after training: 0.7160674981658106
User 38548 does not improve AUC. Reverting changes.
Training on augumented user 90076 40/50 current_auc = 0.7172902910247004
User 90076 AUC after training: 0.7165566153093665
User 90076 does not improve AUC. Reverting changes.
Training on augumented user 77677 41/50 current_auc = 0.7172902910247004
User 77677 AUC after training: 0.7177794081682562
User 77677 improves AUC. Keeping the model.
Training on augumented user 131832 42/50 current_auc = 0.7177794081682562
User 131832 AUC after training: 0.7172902910247003
User 131832 does not improve AUC. Reverting changes.
Training on augumented user 119214 43/50 current_auc = 0.7177794081682562
User 119214 AUC after training: 0.715089263878699
User 119214 does not improve AUC. Reverting changes.
Training on augumented user 11748 44/50 current_auc = 0.7177794081682562
User 11748 AUC after training: 0.7148447053069209
User 11748 does not improve AUC. Reverting changes.
Training on augumented user 44925 45/50 current_auc = 0.7177794081682562
User 44925 AUC after training: 0.7170457324529224
User 44925 does not improve AUC. Reverting changes.
Training on augumented user 56088 46/50 current_auc = 0.7177794081682562
User 56088 AUC after training: 0.7168011738811445
User 56088 does not improve AUC. Reverting changes.
Training on augumented user 24172 47/50 current_auc = 0.7177794081682562
User 24172 AUC after training: 0.7168011738811445
User 24172 does not improve AUC. Reverting changes.
Training on augumented user 17581 48/50 current_auc = 0.7177794081682562
User 17581 AUC after training: 0.7177794081682562
User 17581 does not improve AUC. Reverting changes.
Training on augumented user 114165 49/50 current_auc = 0.7177794081682562
User 114165 AUC after training: 0.718757642455368
User 114165 improves AUC. Keeping the model.
[2024-12-02 19:47:31.806006] start test user 101275 229/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:47:32.421158] start test user 101275 229/567 recall augumented users by random, augumented_users = [89999, 101629, 6882, 50202, 67711, 74279, 86045, 81586, 31139, 98688, 58565, 131249, 115016, 23040, 49556, 133654, 138220, 81661, 61300, 13644, 108339, 36628, 109736, 38688, 114084, 127374, 91440, 88738, 130984, 46278, 17092, 55102, 71207, 92004, 24013, 85985, 119556, 126693, 38884, 101556, 115666, 68958, 68732, 62534, 100518, 23120, 50693, 101320, 10839, 22182]
[2024-12-02 19:47:32.438578] user = 101275 Cloud 229/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:47:32.452453] user = 101275 Local 229/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:47:32.878833] user = 101275 Local+ 229/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:47:35.277610] user = 101275 MPDA- 229/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 89999 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89999 AUC after training: 0.5
User 89999 does not improve AUC. Reverting changes.
Training on augumented user 101629 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101629 AUC after training: 0.5
User 101629 does not improve AUC. Reverting changes.
Training on augumented user 6882 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6882 AUC after training: 0.5
User 6882 does not improve AUC. Reverting changes.
Training on augumented user 50202 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50202 AUC after training: 0.5
User 50202 does not improve AUC. Reverting changes.
Training on augumented user 67711 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67711 AUC after training: 0.5
User 67711 does not improve AUC. Reverting changes.
Training on augumented user 74279 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74279 AUC after training: 0.5
User 74279 does not improve AUC. Reverting changes.
Training on augumented user 86045 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86045 AUC after training: 0.5
User 86045 does not improve AUC. Reverting changes.
Training on augumented user 81586 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81586 AUC after training: 0.5
User 81586 does not improve AUC. Reverting changes.
Training on augumented user 31139 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 31139 AUC after training: 0.5
User 31139 does not improve AUC. Reverting changes.
Training on augumented user 98688 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98688 AUC after training: 0.5
User 98688 does not improve AUC. Reverting changes.
Training on augumented user 58565 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58565 AUC after training: 0.5
User 58565 does not improve AUC. Reverting changes.
Training on augumented user 131249 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131249 AUC after training: 0.5
User 131249 does not improve AUC. Reverting changes.
Training on augumented user 115016 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115016 AUC after training: 0.5
User 115016 does not improve AUC. Reverting changes.
Training on augumented user 23040 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23040 AUC after training: 0.5
User 23040 does not improve AUC. Reverting changes.
Training on augumented user 49556 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49556 AUC after training: 0.5
User 49556 does not improve AUC. Reverting changes.
Training on augumented user 133654 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133654 AUC after training: 0.5
User 133654 does not improve AUC. Reverting changes.
Training on augumented user 138220 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 138220 AUC after training: 0.5
User 138220 does not improve AUC. Reverting changes.
Training on augumented user 81661 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81661 AUC after training: 0.5
User 81661 does not improve AUC. Reverting changes.
Training on augumented user 61300 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61300 AUC after training: 0.5
User 61300 does not improve AUC. Reverting changes.
Training on augumented user 13644 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13644 AUC after training: 0.5
User 13644 does not improve AUC. Reverting changes.
Training on augumented user 108339 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108339 AUC after training: 0.5
User 108339 does not improve AUC. Reverting changes.
Training on augumented user 36628 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36628 AUC after training: 0.5
User 36628 does not improve AUC. Reverting changes.
Training on augumented user 109736 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109736 AUC after training: 0.5
User 109736 does not improve AUC. Reverting changes.
Training on augumented user 38688 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38688 AUC after training: 0.5
User 38688 does not improve AUC. Reverting changes.
Training on augumented user 114084 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114084 AUC after training: 0.5
User 114084 does not improve AUC. Reverting changes.
Training on augumented user 127374 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127374 AUC after training: 0.5
User 127374 does not improve AUC. Reverting changes.
Training on augumented user 91440 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 91440 AUC after training: 0.5
User 91440 does not improve AUC. Reverting changes.
Training on augumented user 88738 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88738 AUC after training: 0.5
User 88738 does not improve AUC. Reverting changes.
Training on augumented user 130984 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130984 AUC after training: 0.5
User 130984 does not improve AUC. Reverting changes.
Training on augumented user 46278 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 46278 AUC after training: 0.5
User 46278 does not improve AUC. Reverting changes.
Training on augumented user 17092 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 17092 AUC after training: 0.5
User 17092 does not improve AUC. Reverting changes.
Training on augumented user 55102 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55102 AUC after training: 0.5
User 55102 does not improve AUC. Reverting changes.
Training on augumented user 71207 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 71207 AUC after training: 0.5
User 71207 does not improve AUC. Reverting changes.
Training on augumented user 92004 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92004 AUC after training: 0.5
User 92004 does not improve AUC. Reverting changes.
Training on augumented user 24013 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24013 AUC after training: 0.5
User 24013 does not improve AUC. Reverting changes.
Training on augumented user 85985 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 85985 AUC after training: 0.5
User 85985 does not improve AUC. Reverting changes.
Training on augumented user 119556 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 119556 AUC after training: 0.5
User 119556 does not improve AUC. Reverting changes.
Training on augumented user 126693 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126693 AUC after training: 0.5
User 126693 does not improve AUC. Reverting changes.
Training on augumented user 38884 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38884 AUC after training: 0.5
User 38884 does not improve AUC. Reverting changes.
Training on augumented user 101556 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101556 AUC after training: 0.5
User 101556 does not improve AUC. Reverting changes.
Training on augumented user 115666 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115666 AUC after training: 0.5
User 115666 does not improve AUC. Reverting changes.
Training on augumented user 68958 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68958 AUC after training: 0.5
User 68958 does not improve AUC. Reverting changes.
Training on augumented user 68732 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68732 AUC after training: 0.5
User 68732 does not improve AUC. Reverting changes.
Training on augumented user 62534 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62534 AUC after training: 0.5
User 62534 does not improve AUC. Reverting changes.
Training on augumented user 100518 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100518 AUC after training: 0.5
User 100518 does not improve AUC. Reverting changes.
Training on augumented user 23120 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23120 AUC after training: 0.5
User 23120 does not improve AUC. Reverting changes.
Training on augumented user 50693 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 50693 AUC after training: 0.5
User 50693 does not improve AUC. Reverting changes.
Training on augumented user 101320 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101320 AUC after training: 0.5
User 101320 does not improve AUC. Reverting changes.
Training on augumented user 10839 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10839 AUC after training: 0.5
User 10839 does not improve AUC. Reverting changes.
Training on augumented user 22182 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22182 AUC after training: 0.5
User 22182 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:48:08.579893] start test user 101282 230/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:48:09.172068] start test user 101282 230/567 recall augumented users by random, augumented_users = [59043, 12693, 61566, 6313, 109484, 79493, 23935, 90590, 79333, 80775, 124509, 22031, 60702, 50843, 66905, 51416, 75356, 131099, 43177, 137557, 47098, 45551, 39941, 5204, 88222, 76365, 43607, 42484, 130906, 27284, 7551, 77105, 116427, 114899, 44362, 61850, 67296, 96578, 17332, 935, 6550, 15787, 103105, 122316, 132060, 103942, 89269, 78057, 50831, 50196]
[2024-12-02 19:48:09.204853] user = 101282 Cloud 230/567
[2024-12-02 19:48:09.233820] user = 101282 Local 230/567
[2024-12-02 19:48:09.543889] user = 101282 Local+ 230/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:48:12.030522] user = 101282 MPDA- 230/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5711405529953917
Training on augumented user 59043 0/50 current_auc = 0.5711405529953917
User 59043 AUC after training: 0.5699884792626728
User 59043 does not improve AUC. Reverting changes.
Training on augumented user 12693 1/50 current_auc = 0.5711405529953917
User 12693 AUC after training: 0.570852534562212
User 12693 does not improve AUC. Reverting changes.
Training on augumented user 61566 2/50 current_auc = 0.5711405529953917
User 61566 AUC after training: 0.5717165898617512
User 61566 improves AUC. Keeping the model.
Training on augumented user 6313 3/50 current_auc = 0.5717165898617512
User 6313 AUC after training: 0.5717165898617511
User 6313 does not improve AUC. Reverting changes.
Training on augumented user 109484 4/50 current_auc = 0.5717165898617512
User 109484 AUC after training: 0.5705645161290323
User 109484 does not improve AUC. Reverting changes.
Training on augumented user 79493 5/50 current_auc = 0.5717165898617512
User 79493 AUC after training: 0.5705645161290324
User 79493 does not improve AUC. Reverting changes.
Training on augumented user 23935 6/50 current_auc = 0.5717165898617512
User 23935 AUC after training: 0.5714285714285714
User 23935 does not improve AUC. Reverting changes.
Training on augumented user 90590 7/50 current_auc = 0.5717165898617512
User 90590 AUC after training: 0.5714285714285714
User 90590 does not improve AUC. Reverting changes.
Training on augumented user 79333 8/50 current_auc = 0.5717165898617512
User 79333 AUC after training: 0.5691244239631337
User 79333 does not improve AUC. Reverting changes.
Training on augumented user 80775 9/50 current_auc = 0.5717165898617512
User 80775 AUC after training: 0.5720046082949309
User 80775 improves AUC. Keeping the model.
Training on augumented user 124509 10/50 current_auc = 0.5720046082949309
User 124509 AUC after training: 0.5711405529953917
User 124509 does not improve AUC. Reverting changes.
Training on augumented user 22031 11/50 current_auc = 0.5720046082949309
User 22031 AUC after training: 0.5714285714285714
User 22031 does not improve AUC. Reverting changes.
Training on augumented user 60702 12/50 current_auc = 0.5720046082949309
User 60702 AUC after training: 0.5717165898617511
User 60702 does not improve AUC. Reverting changes.
Training on augumented user 50843 13/50 current_auc = 0.5720046082949309
User 50843 AUC after training: 0.5699884792626728
User 50843 does not improve AUC. Reverting changes.
Training on augumented user 66905 14/50 current_auc = 0.5720046082949309
User 66905 AUC after training: 0.5702764976958525
User 66905 does not improve AUC. Reverting changes.
Training on augumented user 51416 15/50 current_auc = 0.5720046082949309
User 51416 AUC after training: 0.5717165898617511
User 51416 does not improve AUC. Reverting changes.
Training on augumented user 75356 16/50 current_auc = 0.5720046082949309
User 75356 AUC after training: 0.5717165898617511
User 75356 does not improve AUC. Reverting changes.
Training on augumented user 131099 17/50 current_auc = 0.5720046082949309
User 131099 AUC after training: 0.5697004608294931
User 131099 does not improve AUC. Reverting changes.
Training on augumented user 43177 18/50 current_auc = 0.5720046082949309
User 43177 AUC after training: 0.5711405529953917
User 43177 does not improve AUC. Reverting changes.
Training on augumented user 137557 19/50 current_auc = 0.5720046082949309
User 137557 AUC after training: 0.5720046082949308
User 137557 does not improve AUC. Reverting changes.
Training on augumented user 47098 20/50 current_auc = 0.5720046082949309
User 47098 AUC after training: 0.5702764976958525
User 47098 does not improve AUC. Reverting changes.
Training on augumented user 45551 21/50 current_auc = 0.5720046082949309
User 45551 AUC after training: 0.5711405529953917
User 45551 does not improve AUC. Reverting changes.
Training on augumented user 39941 22/50 current_auc = 0.5720046082949309
User 39941 AUC after training: 0.5711405529953917
User 39941 does not improve AUC. Reverting changes.
Training on augumented user 5204 23/50 current_auc = 0.5720046082949309
User 5204 AUC after training: 0.570852534562212
User 5204 does not improve AUC. Reverting changes.
Training on augumented user 88222 24/50 current_auc = 0.5720046082949309
User 88222 AUC after training: 0.5717165898617511
User 88222 does not improve AUC. Reverting changes.
Training on augumented user 76365 25/50 current_auc = 0.5720046082949309
User 76365 AUC after training: 0.570852534562212
User 76365 does not improve AUC. Reverting changes.
Training on augumented user 43607 26/50 current_auc = 0.5720046082949309
User 43607 AUC after training: 0.5705645161290323
User 43607 does not improve AUC. Reverting changes.
Training on augumented user 42484 27/50 current_auc = 0.5720046082949309
User 42484 AUC after training: 0.5711405529953917
User 42484 does not improve AUC. Reverting changes.
Training on augumented user 130906 28/50 current_auc = 0.5720046082949309
User 130906 AUC after training: 0.5720046082949308
User 130906 does not improve AUC. Reverting changes.
Training on augumented user 27284 29/50 current_auc = 0.5720046082949309
User 27284 AUC after training: 0.5717165898617511
User 27284 does not improve AUC. Reverting changes.
Training on augumented user 7551 30/50 current_auc = 0.5720046082949309
User 7551 AUC after training: 0.5717165898617512
User 7551 does not improve AUC. Reverting changes.
Training on augumented user 77105 31/50 current_auc = 0.5720046082949309
User 77105 AUC after training: 0.5714285714285714
User 77105 does not improve AUC. Reverting changes.
Training on augumented user 116427 32/50 current_auc = 0.5720046082949309
User 116427 AUC after training: 0.570852534562212
User 116427 does not improve AUC. Reverting changes.
Training on augumented user 114899 33/50 current_auc = 0.5720046082949309
User 114899 AUC after training: 0.5720046082949308
User 114899 does not improve AUC. Reverting changes.
Training on augumented user 44362 34/50 current_auc = 0.5720046082949309
User 44362 AUC after training: 0.570852534562212
User 44362 does not improve AUC. Reverting changes.
Training on augumented user 61850 35/50 current_auc = 0.5720046082949309
User 61850 AUC after training: 0.5697004608294931
User 61850 does not improve AUC. Reverting changes.
Training on augumented user 67296 36/50 current_auc = 0.5720046082949309
User 67296 AUC after training: 0.5720046082949309
User 67296 does not improve AUC. Reverting changes.
Training on augumented user 96578 37/50 current_auc = 0.5720046082949309
User 96578 AUC after training: 0.5668202764976958
User 96578 does not improve AUC. Reverting changes.
Training on augumented user 17332 38/50 current_auc = 0.5720046082949309
User 17332 AUC after training: 0.5720046082949309
User 17332 does not improve AUC. Reverting changes.
Training on augumented user 935 39/50 current_auc = 0.5720046082949309
User 935 AUC after training: 0.5711405529953917
User 935 does not improve AUC. Reverting changes.
Training on augumented user 6550 40/50 current_auc = 0.5720046082949309
User 6550 AUC after training: 0.5717165898617512
User 6550 does not improve AUC. Reverting changes.
Training on augumented user 15787 41/50 current_auc = 0.5720046082949309
User 15787 AUC after training: 0.5714285714285714
User 15787 does not improve AUC. Reverting changes.
Training on augumented user 103105 42/50 current_auc = 0.5720046082949309
User 103105 AUC after training: 0.5711405529953917
User 103105 does not improve AUC. Reverting changes.
Training on augumented user 122316 43/50 current_auc = 0.5720046082949309
User 122316 AUC after training: 0.5702764976958525
User 122316 does not improve AUC. Reverting changes.
Training on augumented user 132060 44/50 current_auc = 0.5720046082949309
User 132060 AUC after training: 0.5717165898617512
User 132060 does not improve AUC. Reverting changes.
Training on augumented user 103942 45/50 current_auc = 0.5720046082949309
User 103942 AUC after training: 0.5711405529953917
User 103942 does not improve AUC. Reverting changes.
Training on augumented user 89269 46/50 current_auc = 0.5720046082949309
User 89269 AUC after training: 0.5711405529953917
User 89269 does not improve AUC. Reverting changes.
Training on augumented user 78057 47/50 current_auc = 0.5720046082949309
User 78057 AUC after training: 0.570852534562212
User 78057 does not improve AUC. Reverting changes.
Training on augumented user 50831 48/50 current_auc = 0.5720046082949309
User 50831 AUC after training: 0.5725806451612903
User 50831 improves AUC. Keeping the model.
Training on augumented user 50196 49/50 current_auc = 0.5725806451612903
User 50196 AUC after training: 0.5728686635944701
User 50196 improves AUC. Keeping the model.
[2024-12-02 19:48:39.595852] start test user 101326 231/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:48:40.028480] start test user 101326 231/567 recall augumented users by random, augumented_users = [21140, 102432, 101785, 121860, 110584, 121059, 48931, 44308, 62744, 63263, 20424, 7081, 32667, 55209, 102403, 117349, 129634, 133352, 119163, 123628, 102686, 134803, 38646, 71341, 118836, 86503, 114397, 11144, 77377, 109285, 96307, 123064, 102217, 54992, 31832, 10149, 133231, 59880, 130902, 32698, 14157, 116395, 122349, 50172, 63132, 18985, 14771, 20804, 2671, 93848]
[2024-12-02 19:48:40.057139] user = 101326 Cloud 231/567
[2024-12-02 19:48:40.066820] user = 101326 Local 231/567
[2024-12-02 19:48:40.138965] user = 101326 Local+ 231/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:48:43.074132] user = 101326 MPDA- 231/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8055555555555556
Training on augumented user 21140 0/50 current_auc = 0.8055555555555556
User 21140 AUC after training: 0.8055555555555556
User 21140 does not improve AUC. Reverting changes.
Training on augumented user 102432 1/50 current_auc = 0.8055555555555556
User 102432 AUC after training: 0.8055555555555556
User 102432 does not improve AUC. Reverting changes.
Training on augumented user 101785 2/50 current_auc = 0.8055555555555556
User 101785 AUC after training: 0.8055555555555556
User 101785 does not improve AUC. Reverting changes.
Training on augumented user 121860 3/50 current_auc = 0.8055555555555556
User 121860 AUC after training: 0.8055555555555556
User 121860 does not improve AUC. Reverting changes.
Training on augumented user 110584 4/50 current_auc = 0.8055555555555556
User 110584 AUC after training: 0.8055555555555556
User 110584 does not improve AUC. Reverting changes.
Training on augumented user 121059 5/50 current_auc = 0.8055555555555556
User 121059 AUC after training: 0.8055555555555556
User 121059 does not improve AUC. Reverting changes.
Training on augumented user 48931 6/50 current_auc = 0.8055555555555556
User 48931 AUC after training: 0.8055555555555556
User 48931 does not improve AUC. Reverting changes.
Training on augumented user 44308 7/50 current_auc = 0.8055555555555556
User 44308 AUC after training: 0.8055555555555556
User 44308 does not improve AUC. Reverting changes.
Training on augumented user 62744 8/50 current_auc = 0.8055555555555556
User 62744 AUC after training: 0.8055555555555556
User 62744 does not improve AUC. Reverting changes.
Training on augumented user 63263 9/50 current_auc = 0.8055555555555556
User 63263 AUC after training: 0.8055555555555556
User 63263 does not improve AUC. Reverting changes.
Training on augumented user 20424 10/50 current_auc = 0.8055555555555556
User 20424 AUC after training: 0.8055555555555556
User 20424 does not improve AUC. Reverting changes.
Training on augumented user 7081 11/50 current_auc = 0.8055555555555556
User 7081 AUC after training: 0.8055555555555556
User 7081 does not improve AUC. Reverting changes.
Training on augumented user 32667 12/50 current_auc = 0.8055555555555556
User 32667 AUC after training: 0.8055555555555556
User 32667 does not improve AUC. Reverting changes.
Training on augumented user 55209 13/50 current_auc = 0.8055555555555556
User 55209 AUC after training: 0.8055555555555556
User 55209 does not improve AUC. Reverting changes.
Training on augumented user 102403 14/50 current_auc = 0.8055555555555556
User 102403 AUC after training: 0.8055555555555556
User 102403 does not improve AUC. Reverting changes.
Training on augumented user 117349 15/50 current_auc = 0.8055555555555556
User 117349 AUC after training: 0.8055555555555556
User 117349 does not improve AUC. Reverting changes.
Training on augumented user 129634 16/50 current_auc = 0.8055555555555556
User 129634 AUC after training: 0.8055555555555556
User 129634 does not improve AUC. Reverting changes.
Training on augumented user 133352 17/50 current_auc = 0.8055555555555556
User 133352 AUC after training: 0.8055555555555556
User 133352 does not improve AUC. Reverting changes.
Training on augumented user 119163 18/50 current_auc = 0.8055555555555556
User 119163 AUC after training: 0.8055555555555556
User 119163 does not improve AUC. Reverting changes.
Training on augumented user 123628 19/50 current_auc = 0.8055555555555556
User 123628 AUC after training: 0.8055555555555556
User 123628 does not improve AUC. Reverting changes.
Training on augumented user 102686 20/50 current_auc = 0.8055555555555556
User 102686 AUC after training: 0.8055555555555556
User 102686 does not improve AUC. Reverting changes.
Training on augumented user 134803 21/50 current_auc = 0.8055555555555556
User 134803 AUC after training: 0.8055555555555556
User 134803 does not improve AUC. Reverting changes.
Training on augumented user 38646 22/50 current_auc = 0.8055555555555556
User 38646 AUC after training: 0.8055555555555556
User 38646 does not improve AUC. Reverting changes.
Training on augumented user 71341 23/50 current_auc = 0.8055555555555556
User 71341 AUC after training: 0.8055555555555556
User 71341 does not improve AUC. Reverting changes.
Training on augumented user 118836 24/50 current_auc = 0.8055555555555556
User 118836 AUC after training: 0.8055555555555556
User 118836 does not improve AUC. Reverting changes.
Training on augumented user 86503 25/50 current_auc = 0.8055555555555556
User 86503 AUC after training: 0.8055555555555556
User 86503 does not improve AUC. Reverting changes.
Training on augumented user 114397 26/50 current_auc = 0.8055555555555556
User 114397 AUC after training: 0.8055555555555556
User 114397 does not improve AUC. Reverting changes.
Training on augumented user 11144 27/50 current_auc = 0.8055555555555556
User 11144 AUC after training: 0.8055555555555556
User 11144 does not improve AUC. Reverting changes.
Training on augumented user 77377 28/50 current_auc = 0.8055555555555556
User 77377 AUC after training: 0.8055555555555556
User 77377 does not improve AUC. Reverting changes.
Training on augumented user 109285 29/50 current_auc = 0.8055555555555556
User 109285 AUC after training: 0.8055555555555556
User 109285 does not improve AUC. Reverting changes.
Training on augumented user 96307 30/50 current_auc = 0.8055555555555556
User 96307 AUC after training: 0.8055555555555556
User 96307 does not improve AUC. Reverting changes.
Training on augumented user 123064 31/50 current_auc = 0.8055555555555556
User 123064 AUC after training: 0.8055555555555556
User 123064 does not improve AUC. Reverting changes.
Training on augumented user 102217 32/50 current_auc = 0.8055555555555556
User 102217 AUC after training: 0.8055555555555556
User 102217 does not improve AUC. Reverting changes.
Training on augumented user 54992 33/50 current_auc = 0.8055555555555556
User 54992 AUC after training: 0.8055555555555556
User 54992 does not improve AUC. Reverting changes.
Training on augumented user 31832 34/50 current_auc = 0.8055555555555556
User 31832 AUC after training: 0.8055555555555556
User 31832 does not improve AUC. Reverting changes.
Training on augumented user 10149 35/50 current_auc = 0.8055555555555556
User 10149 AUC after training: 0.8055555555555556
User 10149 does not improve AUC. Reverting changes.
Training on augumented user 133231 36/50 current_auc = 0.8055555555555556
User 133231 AUC after training: 0.8055555555555556
User 133231 does not improve AUC. Reverting changes.
Training on augumented user 59880 37/50 current_auc = 0.8055555555555556
User 59880 AUC after training: 0.8055555555555556
User 59880 does not improve AUC. Reverting changes.
Training on augumented user 130902 38/50 current_auc = 0.8055555555555556
User 130902 AUC after training: 0.8055555555555556
User 130902 does not improve AUC. Reverting changes.
Training on augumented user 32698 39/50 current_auc = 0.8055555555555556
User 32698 AUC after training: 0.8055555555555556
User 32698 does not improve AUC. Reverting changes.
Training on augumented user 14157 40/50 current_auc = 0.8055555555555556
User 14157 AUC after training: 0.8055555555555556
User 14157 does not improve AUC. Reverting changes.
Training on augumented user 116395 41/50 current_auc = 0.8055555555555556
User 116395 AUC after training: 0.8055555555555556
User 116395 does not improve AUC. Reverting changes.
Training on augumented user 122349 42/50 current_auc = 0.8055555555555556
User 122349 AUC after training: 0.8055555555555556
User 122349 does not improve AUC. Reverting changes.
Training on augumented user 50172 43/50 current_auc = 0.8055555555555556
User 50172 AUC after training: 0.8055555555555556
User 50172 does not improve AUC. Reverting changes.
Training on augumented user 63132 44/50 current_auc = 0.8055555555555556
User 63132 AUC after training: 0.7777777777777778
User 63132 does not improve AUC. Reverting changes.
Training on augumented user 18985 45/50 current_auc = 0.8055555555555556
User 18985 AUC after training: 0.8055555555555556
User 18985 does not improve AUC. Reverting changes.
Training on augumented user 14771 46/50 current_auc = 0.8055555555555556
User 14771 AUC after training: 0.8055555555555556
User 14771 does not improve AUC. Reverting changes.
Training on augumented user 20804 47/50 current_auc = 0.8055555555555556
User 20804 AUC after training: 0.8055555555555556
User 20804 does not improve AUC. Reverting changes.
Training on augumented user 2671 48/50 current_auc = 0.8055555555555556
User 2671 AUC after training: 0.8055555555555556
User 2671 does not improve AUC. Reverting changes.
Training on augumented user 93848 49/50 current_auc = 0.8055555555555556
User 93848 AUC after training: 0.8055555555555556
User 93848 does not improve AUC. Reverting changes.
[2024-12-02 19:49:14.685698] start test user 101329 232/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:49:15.204990] start test user 101329 232/567 recall augumented users by random, augumented_users = [131853, 30622, 77747, 126344, 97932, 136050, 67490, 19084, 53501, 57046, 134668, 26985, 39080, 131009, 131961, 135057, 123377, 60191, 135832, 54898, 67967, 136515, 15173, 113283, 131634, 52492, 20071, 103072, 90789, 14489, 47278, 27217, 11409, 100859, 30475, 109697, 59208, 29383, 119148, 134874, 43923, 129656, 91468, 125833, 64348, 119140, 41510, 37447, 10533, 35156]
[2024-12-02 19:49:15.233800] user = 101329 Cloud 232/567
[2024-12-02 19:49:15.266133] user = 101329 Local 232/567
[2024-12-02 19:49:15.370859] user = 101329 Local+ 232/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:49:18.615302] user = 101329 MPDA- 232/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5657142857142857
Training on augumented user 131853 0/50 current_auc = 0.5657142857142857
User 131853 AUC after training: 0.5671428571428572
User 131853 improves AUC. Keeping the model.
Training on augumented user 30622 1/50 current_auc = 0.5671428571428572
User 30622 AUC after training: 0.5657142857142857
User 30622 does not improve AUC. Reverting changes.
Training on augumented user 77747 2/50 current_auc = 0.5671428571428572
User 77747 AUC after training: 0.5671428571428572
User 77747 does not improve AUC. Reverting changes.
Training on augumented user 126344 3/50 current_auc = 0.5671428571428572
User 126344 AUC after training: 0.5671428571428572
User 126344 does not improve AUC. Reverting changes.
Training on augumented user 97932 4/50 current_auc = 0.5671428571428572
User 97932 AUC after training: 0.5657142857142857
User 97932 does not improve AUC. Reverting changes.
Training on augumented user 136050 5/50 current_auc = 0.5671428571428572
User 136050 AUC after training: 0.5671428571428572
User 136050 does not improve AUC. Reverting changes.
Training on augumented user 67490 6/50 current_auc = 0.5671428571428572
User 67490 AUC after training: 0.5642857142857143
User 67490 does not improve AUC. Reverting changes.
Training on augumented user 19084 7/50 current_auc = 0.5671428571428572
User 19084 AUC after training: 0.5642857142857143
User 19084 does not improve AUC. Reverting changes.
Training on augumented user 53501 8/50 current_auc = 0.5671428571428572
User 53501 AUC after training: 0.5642857142857142
User 53501 does not improve AUC. Reverting changes.
Training on augumented user 57046 9/50 current_auc = 0.5671428571428572
User 57046 AUC after training: 0.5642857142857143
User 57046 does not improve AUC. Reverting changes.
Training on augumented user 134668 10/50 current_auc = 0.5671428571428572
User 134668 AUC after training: 0.5642857142857143
User 134668 does not improve AUC. Reverting changes.
Training on augumented user 26985 11/50 current_auc = 0.5671428571428572
User 26985 AUC after training: 0.5671428571428572
User 26985 does not improve AUC. Reverting changes.
Training on augumented user 39080 12/50 current_auc = 0.5671428571428572
User 39080 AUC after training: 0.5657142857142857
User 39080 does not improve AUC. Reverting changes.
Training on augumented user 131009 13/50 current_auc = 0.5671428571428572
User 131009 AUC after training: 0.5671428571428572
User 131009 does not improve AUC. Reverting changes.
Training on augumented user 131961 14/50 current_auc = 0.5671428571428572
User 131961 AUC after training: 0.5700000000000001
User 131961 improves AUC. Keeping the model.
Training on augumented user 135057 15/50 current_auc = 0.5700000000000001
User 135057 AUC after training: 0.5685714285714286
User 135057 does not improve AUC. Reverting changes.
Training on augumented user 123377 16/50 current_auc = 0.5700000000000001
User 123377 AUC after training: 0.5685714285714286
User 123377 does not improve AUC. Reverting changes.
Training on augumented user 60191 17/50 current_auc = 0.5700000000000001
User 60191 AUC after training: 0.5700000000000001
User 60191 does not improve AUC. Reverting changes.
Training on augumented user 135832 18/50 current_auc = 0.5700000000000001
User 135832 AUC after training: 0.57
User 135832 does not improve AUC. Reverting changes.
Training on augumented user 54898 19/50 current_auc = 0.5700000000000001
User 54898 AUC after training: 0.5700000000000001
User 54898 does not improve AUC. Reverting changes.
Training on augumented user 67967 20/50 current_auc = 0.5700000000000001
User 67967 AUC after training: 0.5685714285714286
User 67967 does not improve AUC. Reverting changes.
Training on augumented user 136515 21/50 current_auc = 0.5700000000000001
User 136515 AUC after training: 0.5685714285714286
User 136515 does not improve AUC. Reverting changes.
Training on augumented user 15173 22/50 current_auc = 0.5700000000000001
User 15173 AUC after training: 0.5700000000000001
User 15173 does not improve AUC. Reverting changes.
Training on augumented user 113283 23/50 current_auc = 0.5700000000000001
User 113283 AUC after training: 0.5671428571428572
User 113283 does not improve AUC. Reverting changes.
Training on augumented user 131634 24/50 current_auc = 0.5700000000000001
User 131634 AUC after training: 0.5685714285714286
User 131634 does not improve AUC. Reverting changes.
Training on augumented user 52492 25/50 current_auc = 0.5700000000000001
User 52492 AUC after training: 0.5685714285714286
User 52492 does not improve AUC. Reverting changes.
Training on augumented user 20071 26/50 current_auc = 0.5700000000000001
User 20071 AUC after training: 0.5685714285714286
User 20071 does not improve AUC. Reverting changes.
Training on augumented user 103072 27/50 current_auc = 0.5700000000000001
User 103072 AUC after training: 0.5685714285714286
User 103072 does not improve AUC. Reverting changes.
Training on augumented user 90789 28/50 current_auc = 0.5700000000000001
User 90789 AUC after training: 0.5685714285714286
User 90789 does not improve AUC. Reverting changes.
Training on augumented user 14489 29/50 current_auc = 0.5700000000000001
User 14489 AUC after training: 0.5700000000000001
User 14489 does not improve AUC. Reverting changes.
Training on augumented user 47278 30/50 current_auc = 0.5700000000000001
User 47278 AUC after training: 0.5700000000000001
User 47278 does not improve AUC. Reverting changes.
Training on augumented user 27217 31/50 current_auc = 0.5700000000000001
User 27217 AUC after training: 0.5714285714285714
User 27217 improves AUC. Keeping the model.
Training on augumented user 11409 32/50 current_auc = 0.5714285714285714
User 11409 AUC after training: 0.5685714285714286
User 11409 does not improve AUC. Reverting changes.
Training on augumented user 100859 33/50 current_auc = 0.5714285714285714
User 100859 AUC after training: 0.5700000000000001
User 100859 does not improve AUC. Reverting changes.
Training on augumented user 30475 34/50 current_auc = 0.5714285714285714
User 30475 AUC after training: 0.5685714285714286
User 30475 does not improve AUC. Reverting changes.
Training on augumented user 109697 35/50 current_auc = 0.5714285714285714
User 109697 AUC after training: 0.5714285714285715
User 109697 improves AUC. Keeping the model.
Training on augumented user 59208 36/50 current_auc = 0.5714285714285715
User 59208 AUC after training: 0.5714285714285715
User 59208 does not improve AUC. Reverting changes.
Training on augumented user 29383 37/50 current_auc = 0.5714285714285715
User 29383 AUC after training: 0.5714285714285715
User 29383 does not improve AUC. Reverting changes.
Training on augumented user 119148 38/50 current_auc = 0.5714285714285715
User 119148 AUC after training: 0.5685714285714285
User 119148 does not improve AUC. Reverting changes.
Training on augumented user 134874 39/50 current_auc = 0.5714285714285715
User 134874 AUC after training: 0.5714285714285715
User 134874 does not improve AUC. Reverting changes.
Training on augumented user 43923 40/50 current_auc = 0.5714285714285715
User 43923 AUC after training: 0.5728571428571428
User 43923 improves AUC. Keeping the model.
Training on augumented user 129656 41/50 current_auc = 0.5728571428571428
User 129656 AUC after training: 0.5714285714285714
User 129656 does not improve AUC. Reverting changes.
Training on augumented user 91468 42/50 current_auc = 0.5728571428571428
User 91468 AUC after training: 0.5714285714285714
User 91468 does not improve AUC. Reverting changes.
Training on augumented user 125833 43/50 current_auc = 0.5728571428571428
User 125833 AUC after training: 0.5700000000000001
User 125833 does not improve AUC. Reverting changes.
Training on augumented user 64348 44/50 current_auc = 0.5728571428571428
User 64348 AUC after training: 0.5728571428571428
User 64348 does not improve AUC. Reverting changes.
Training on augumented user 119140 45/50 current_auc = 0.5728571428571428
User 119140 AUC after training: 0.57
User 119140 does not improve AUC. Reverting changes.
Training on augumented user 41510 46/50 current_auc = 0.5728571428571428
User 41510 AUC after training: 0.5714285714285715
User 41510 does not improve AUC. Reverting changes.
Training on augumented user 37447 47/50 current_auc = 0.5728571428571428
User 37447 AUC after training: 0.5742857142857143
User 37447 improves AUC. Keeping the model.
Training on augumented user 10533 48/50 current_auc = 0.5742857142857143
User 10533 AUC after training: 0.5714285714285714
User 10533 does not improve AUC. Reverting changes.
Training on augumented user 35156 49/50 current_auc = 0.5742857142857143
User 35156 AUC after training: 0.5728571428571428
User 35156 does not improve AUC. Reverting changes.
[2024-12-02 19:49:48.933922] start test user 101341 233/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:49:49.596286] start test user 101341 233/567 recall augumented users by random, augumented_users = [14241, 132278, 17028, 27799, 8498, 96463, 12073, 113687, 106759, 66815, 121081, 31131, 59231, 19595, 137946, 67208, 26378, 10450, 40644, 46849, 63093, 116918, 21204, 121218, 125746, 87750, 52543, 104844, 115386, 71287, 58487, 94921, 29066, 135999, 70337, 86303, 122462, 131373, 85278, 48579, 106282, 103835, 127568, 117085, 11236, 74492, 110714, 133198, 80371, 43463]
[2024-12-02 19:49:49.631289] user = 101341 Cloud 233/567
[2024-12-02 19:49:49.641447] user = 101341 Local 233/567
[2024-12-02 19:49:49.680924] user = 101341 Local+ 233/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:49:53.262203] user = 101341 MPDA- 233/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5555555555555556
Training on augumented user 14241 0/50 current_auc = 0.5555555555555556
User 14241 AUC after training: 0.5555555555555556
User 14241 does not improve AUC. Reverting changes.
Training on augumented user 132278 1/50 current_auc = 0.5555555555555556
User 132278 AUC after training: 0.5555555555555556
User 132278 does not improve AUC. Reverting changes.
Training on augumented user 17028 2/50 current_auc = 0.5555555555555556
User 17028 AUC after training: 0.5555555555555556
User 17028 does not improve AUC. Reverting changes.
Training on augumented user 27799 3/50 current_auc = 0.5555555555555556
User 27799 AUC after training: 0.5555555555555556
User 27799 does not improve AUC. Reverting changes.
Training on augumented user 8498 4/50 current_auc = 0.5555555555555556
User 8498 AUC after training: 0.5555555555555556
User 8498 does not improve AUC. Reverting changes.
Training on augumented user 96463 5/50 current_auc = 0.5555555555555556
User 96463 AUC after training: 0.5555555555555556
User 96463 does not improve AUC. Reverting changes.
Training on augumented user 12073 6/50 current_auc = 0.5555555555555556
User 12073 AUC after training: 0.5555555555555556
User 12073 does not improve AUC. Reverting changes.
Training on augumented user 113687 7/50 current_auc = 0.5555555555555556
User 113687 AUC after training: 0.5555555555555556
User 113687 does not improve AUC. Reverting changes.
Training on augumented user 106759 8/50 current_auc = 0.5555555555555556
User 106759 AUC after training: 0.5555555555555556
User 106759 does not improve AUC. Reverting changes.
Training on augumented user 66815 9/50 current_auc = 0.5555555555555556
User 66815 AUC after training: 0.5555555555555556
User 66815 does not improve AUC. Reverting changes.
Training on augumented user 121081 10/50 current_auc = 0.5555555555555556
User 121081 AUC after training: 0.5555555555555556
User 121081 does not improve AUC. Reverting changes.
Training on augumented user 31131 11/50 current_auc = 0.5555555555555556
User 31131 AUC after training: 0.5555555555555556
User 31131 does not improve AUC. Reverting changes.
Training on augumented user 59231 12/50 current_auc = 0.5555555555555556
User 59231 AUC after training: 0.5555555555555556
User 59231 does not improve AUC. Reverting changes.
Training on augumented user 19595 13/50 current_auc = 0.5555555555555556
User 19595 AUC after training: 0.5555555555555556
User 19595 does not improve AUC. Reverting changes.
Training on augumented user 137946 14/50 current_auc = 0.5555555555555556
User 137946 AUC after training: 0.5555555555555556
User 137946 does not improve AUC. Reverting changes.
Training on augumented user 67208 15/50 current_auc = 0.5555555555555556
User 67208 AUC after training: 0.5555555555555556
User 67208 does not improve AUC. Reverting changes.
Training on augumented user 26378 16/50 current_auc = 0.5555555555555556
User 26378 AUC after training: 0.5555555555555556
User 26378 does not improve AUC. Reverting changes.
Training on augumented user 10450 17/50 current_auc = 0.5555555555555556
User 10450 AUC after training: 0.5555555555555556
User 10450 does not improve AUC. Reverting changes.
Training on augumented user 40644 18/50 current_auc = 0.5555555555555556
User 40644 AUC after training: 0.5555555555555556
User 40644 does not improve AUC. Reverting changes.
Training on augumented user 46849 19/50 current_auc = 0.5555555555555556
User 46849 AUC after training: 0.5555555555555556
User 46849 does not improve AUC. Reverting changes.
Training on augumented user 63093 20/50 current_auc = 0.5555555555555556
User 63093 AUC after training: 0.5555555555555556
User 63093 does not improve AUC. Reverting changes.
Training on augumented user 116918 21/50 current_auc = 0.5555555555555556
User 116918 AUC after training: 0.5555555555555556
User 116918 does not improve AUC. Reverting changes.
Training on augumented user 21204 22/50 current_auc = 0.5555555555555556
User 21204 AUC after training: 0.5555555555555556
User 21204 does not improve AUC. Reverting changes.
Training on augumented user 121218 23/50 current_auc = 0.5555555555555556
User 121218 AUC after training: 0.5555555555555556
User 121218 does not improve AUC. Reverting changes.
Training on augumented user 125746 24/50 current_auc = 0.5555555555555556
User 125746 AUC after training: 0.5555555555555556
User 125746 does not improve AUC. Reverting changes.
Training on augumented user 87750 25/50 current_auc = 0.5555555555555556
User 87750 AUC after training: 0.5555555555555556
User 87750 does not improve AUC. Reverting changes.
Training on augumented user 52543 26/50 current_auc = 0.5555555555555556
User 52543 AUC after training: 0.5555555555555556
User 52543 does not improve AUC. Reverting changes.
Training on augumented user 104844 27/50 current_auc = 0.5555555555555556
User 104844 AUC after training: 0.5555555555555556
User 104844 does not improve AUC. Reverting changes.
Training on augumented user 115386 28/50 current_auc = 0.5555555555555556
User 115386 AUC after training: 0.5555555555555556
User 115386 does not improve AUC. Reverting changes.
Training on augumented user 71287 29/50 current_auc = 0.5555555555555556
User 71287 AUC after training: 0.5555555555555556
User 71287 does not improve AUC. Reverting changes.
Training on augumented user 58487 30/50 current_auc = 0.5555555555555556
User 58487 AUC after training: 0.5555555555555556
User 58487 does not improve AUC. Reverting changes.
Training on augumented user 94921 31/50 current_auc = 0.5555555555555556
User 94921 AUC after training: 0.5555555555555556
User 94921 does not improve AUC. Reverting changes.
Training on augumented user 29066 32/50 current_auc = 0.5555555555555556
User 29066 AUC after training: 0.5555555555555556
User 29066 does not improve AUC. Reverting changes.
Training on augumented user 135999 33/50 current_auc = 0.5555555555555556
User 135999 AUC after training: 0.5555555555555556
User 135999 does not improve AUC. Reverting changes.
Training on augumented user 70337 34/50 current_auc = 0.5555555555555556
User 70337 AUC after training: 0.5555555555555556
User 70337 does not improve AUC. Reverting changes.
Training on augumented user 86303 35/50 current_auc = 0.5555555555555556
User 86303 AUC after training: 0.5555555555555556
User 86303 does not improve AUC. Reverting changes.
Training on augumented user 122462 36/50 current_auc = 0.5555555555555556
User 122462 AUC after training: 0.5555555555555556
User 122462 does not improve AUC. Reverting changes.
Training on augumented user 131373 37/50 current_auc = 0.5555555555555556
User 131373 AUC after training: 0.5555555555555556
User 131373 does not improve AUC. Reverting changes.
Training on augumented user 85278 38/50 current_auc = 0.5555555555555556
User 85278 AUC after training: 0.5555555555555556
User 85278 does not improve AUC. Reverting changes.
Training on augumented user 48579 39/50 current_auc = 0.5555555555555556
User 48579 AUC after training: 0.5555555555555556
User 48579 does not improve AUC. Reverting changes.
Training on augumented user 106282 40/50 current_auc = 0.5555555555555556
User 106282 AUC after training: 0.5555555555555556
User 106282 does not improve AUC. Reverting changes.
Training on augumented user 103835 41/50 current_auc = 0.5555555555555556
User 103835 AUC after training: 0.5555555555555556
User 103835 does not improve AUC. Reverting changes.
Training on augumented user 127568 42/50 current_auc = 0.5555555555555556
User 127568 AUC after training: 0.5555555555555556
User 127568 does not improve AUC. Reverting changes.
Training on augumented user 117085 43/50 current_auc = 0.5555555555555556
User 117085 AUC after training: 0.5555555555555556
User 117085 does not improve AUC. Reverting changes.
Training on augumented user 11236 44/50 current_auc = 0.5555555555555556
User 11236 AUC after training: 0.5555555555555556
User 11236 does not improve AUC. Reverting changes.
Training on augumented user 74492 45/50 current_auc = 0.5555555555555556
User 74492 AUC after training: 0.5555555555555556
User 74492 does not improve AUC. Reverting changes.
Training on augumented user 110714 46/50 current_auc = 0.5555555555555556
User 110714 AUC after training: 0.5555555555555556
User 110714 does not improve AUC. Reverting changes.
Training on augumented user 133198 47/50 current_auc = 0.5555555555555556
User 133198 AUC after training: 0.5555555555555556
User 133198 does not improve AUC. Reverting changes.
Training on augumented user 80371 48/50 current_auc = 0.5555555555555556
User 80371 AUC after training: 0.5555555555555556
User 80371 does not improve AUC. Reverting changes.
Training on augumented user 43463 49/50 current_auc = 0.5555555555555556
User 43463 AUC after training: 0.5555555555555556
User 43463 does not improve AUC. Reverting changes.
[2024-12-02 19:50:22.893661] start test user 101342 234/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:50:23.551827] start test user 101342 234/567 recall augumented users by random, augumented_users = [106936, 35285, 17946, 12315, 23542, 13785, 108621, 80659, 11455, 127667, 4960, 94195, 105404, 33444, 56178, 81534, 73018, 104567, 122984, 134515, 90740, 5775, 71944, 26754, 42854, 135795, 45889, 14396, 115836, 56621, 114080, 11822, 29005, 112373, 88409, 102964, 71846, 1881, 32278, 22188, 119883, 35131, 44079, 53074, 61283, 46388, 109247, 84239, 21285, 119238]
[2024-12-02 19:50:23.579388] user = 101342 Cloud 234/567
[2024-12-02 19:50:23.589285] user = 101342 Local 234/567
[2024-12-02 19:50:23.629872] user = 101342 Local+ 234/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:50:26.558471] user = 101342 MPDA- 234/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5857142857142857
Training on augumented user 106936 0/50 current_auc = 0.5857142857142857
User 106936 AUC after training: 0.5571428571428572
User 106936 does not improve AUC. Reverting changes.
Training on augumented user 35285 1/50 current_auc = 0.5857142857142857
User 35285 AUC after training: 0.5857142857142857
User 35285 does not improve AUC. Reverting changes.
Training on augumented user 17946 2/50 current_auc = 0.5857142857142857
User 17946 AUC after training: 0.5857142857142857
User 17946 does not improve AUC. Reverting changes.
Training on augumented user 12315 3/50 current_auc = 0.5857142857142857
User 12315 AUC after training: 0.5857142857142857
User 12315 does not improve AUC. Reverting changes.
Training on augumented user 23542 4/50 current_auc = 0.5857142857142857
User 23542 AUC after training: 0.5571428571428572
User 23542 does not improve AUC. Reverting changes.
Training on augumented user 13785 5/50 current_auc = 0.5857142857142857
User 13785 AUC after training: 0.5857142857142857
User 13785 does not improve AUC. Reverting changes.
Training on augumented user 108621 6/50 current_auc = 0.5857142857142857
User 108621 AUC after training: 0.5857142857142857
User 108621 does not improve AUC. Reverting changes.
Training on augumented user 80659 7/50 current_auc = 0.5857142857142857
User 80659 AUC after training: 0.5857142857142857
User 80659 does not improve AUC. Reverting changes.
Training on augumented user 11455 8/50 current_auc = 0.5857142857142857
User 11455 AUC after training: 0.5714285714285714
User 11455 does not improve AUC. Reverting changes.
Training on augumented user 127667 9/50 current_auc = 0.5857142857142857
User 127667 AUC after training: 0.5857142857142857
User 127667 does not improve AUC. Reverting changes.
Training on augumented user 4960 10/50 current_auc = 0.5857142857142857
User 4960 AUC after training: 0.5857142857142857
User 4960 does not improve AUC. Reverting changes.
Training on augumented user 94195 11/50 current_auc = 0.5857142857142857
User 94195 AUC after training: 0.5857142857142857
User 94195 does not improve AUC. Reverting changes.
Training on augumented user 105404 12/50 current_auc = 0.5857142857142857
User 105404 AUC after training: 0.5857142857142857
User 105404 does not improve AUC. Reverting changes.
Training on augumented user 33444 13/50 current_auc = 0.5857142857142857
User 33444 AUC after training: 0.5857142857142857
User 33444 does not improve AUC. Reverting changes.
Training on augumented user 56178 14/50 current_auc = 0.5857142857142857
User 56178 AUC after training: 0.6
User 56178 improves AUC. Keeping the model.
Training on augumented user 81534 15/50 current_auc = 0.6
User 81534 AUC after training: 0.6
User 81534 does not improve AUC. Reverting changes.
Training on augumented user 73018 16/50 current_auc = 0.6
User 73018 AUC after training: 0.6
User 73018 does not improve AUC. Reverting changes.
Training on augumented user 104567 17/50 current_auc = 0.6
User 104567 AUC after training: 0.5857142857142857
User 104567 does not improve AUC. Reverting changes.
Training on augumented user 122984 18/50 current_auc = 0.6
User 122984 AUC after training: 0.6
User 122984 does not improve AUC. Reverting changes.
Training on augumented user 134515 19/50 current_auc = 0.6
User 134515 AUC after training: 0.6
User 134515 does not improve AUC. Reverting changes.
Training on augumented user 90740 20/50 current_auc = 0.6
User 90740 AUC after training: 0.6
User 90740 does not improve AUC. Reverting changes.
Training on augumented user 5775 21/50 current_auc = 0.6
User 5775 AUC after training: 0.6
User 5775 does not improve AUC. Reverting changes.
Training on augumented user 71944 22/50 current_auc = 0.6
User 71944 AUC after training: 0.5857142857142857
User 71944 does not improve AUC. Reverting changes.
Training on augumented user 26754 23/50 current_auc = 0.6
User 26754 AUC after training: 0.5857142857142857
User 26754 does not improve AUC. Reverting changes.
Training on augumented user 42854 24/50 current_auc = 0.6
User 42854 AUC after training: 0.6
User 42854 does not improve AUC. Reverting changes.
Training on augumented user 135795 25/50 current_auc = 0.6
User 135795 AUC after training: 0.5857142857142857
User 135795 does not improve AUC. Reverting changes.
Training on augumented user 45889 26/50 current_auc = 0.6
User 45889 AUC after training: 0.5857142857142857
User 45889 does not improve AUC. Reverting changes.
Training on augumented user 14396 27/50 current_auc = 0.6
User 14396 AUC after training: 0.6
User 14396 does not improve AUC. Reverting changes.
Training on augumented user 115836 28/50 current_auc = 0.6
User 115836 AUC after training: 0.6
User 115836 does not improve AUC. Reverting changes.
Training on augumented user 56621 29/50 current_auc = 0.6
User 56621 AUC after training: 0.5857142857142857
User 56621 does not improve AUC. Reverting changes.
Training on augumented user 114080 30/50 current_auc = 0.6
User 114080 AUC after training: 0.6142857142857143
User 114080 improves AUC. Keeping the model.
Training on augumented user 11822 31/50 current_auc = 0.6142857142857143
User 11822 AUC after training: 0.6142857142857143
User 11822 does not improve AUC. Reverting changes.
Training on augumented user 29005 32/50 current_auc = 0.6142857142857143
User 29005 AUC after training: 0.6142857142857143
User 29005 does not improve AUC. Reverting changes.
Training on augumented user 112373 33/50 current_auc = 0.6142857142857143
User 112373 AUC after training: 0.6142857142857143
User 112373 does not improve AUC. Reverting changes.
Training on augumented user 88409 34/50 current_auc = 0.6142857142857143
User 88409 AUC after training: 0.6142857142857143
User 88409 does not improve AUC. Reverting changes.
Training on augumented user 102964 35/50 current_auc = 0.6142857142857143
User 102964 AUC after training: 0.6
User 102964 does not improve AUC. Reverting changes.
Training on augumented user 71846 36/50 current_auc = 0.6142857142857143
User 71846 AUC after training: 0.6142857142857143
User 71846 does not improve AUC. Reverting changes.
Training on augumented user 1881 37/50 current_auc = 0.6142857142857143
User 1881 AUC after training: 0.6142857142857143
User 1881 does not improve AUC. Reverting changes.
Training on augumented user 32278 38/50 current_auc = 0.6142857142857143
User 32278 AUC after training: 0.6
User 32278 does not improve AUC. Reverting changes.
Training on augumented user 22188 39/50 current_auc = 0.6142857142857143
User 22188 AUC after training: 0.6
User 22188 does not improve AUC. Reverting changes.
Training on augumented user 119883 40/50 current_auc = 0.6142857142857143
User 119883 AUC after training: 0.6142857142857143
User 119883 does not improve AUC. Reverting changes.
Training on augumented user 35131 41/50 current_auc = 0.6142857142857143
User 35131 AUC after training: 0.6142857142857143
User 35131 does not improve AUC. Reverting changes.
Training on augumented user 44079 42/50 current_auc = 0.6142857142857143
User 44079 AUC after training: 0.5857142857142857
User 44079 does not improve AUC. Reverting changes.
Training on augumented user 53074 43/50 current_auc = 0.6142857142857143
User 53074 AUC after training: 0.6142857142857143
User 53074 does not improve AUC. Reverting changes.
Training on augumented user 61283 44/50 current_auc = 0.6142857142857143
User 61283 AUC after training: 0.6142857142857143
User 61283 does not improve AUC. Reverting changes.
Training on augumented user 46388 45/50 current_auc = 0.6142857142857143
User 46388 AUC after training: 0.6142857142857143
User 46388 does not improve AUC. Reverting changes.
Training on augumented user 109247 46/50 current_auc = 0.6142857142857143
User 109247 AUC after training: 0.6142857142857143
User 109247 does not improve AUC. Reverting changes.
Training on augumented user 84239 47/50 current_auc = 0.6142857142857143
User 84239 AUC after training: 0.6142857142857143
User 84239 does not improve AUC. Reverting changes.
Training on augumented user 21285 48/50 current_auc = 0.6142857142857143
User 21285 AUC after training: 0.5857142857142857
User 21285 does not improve AUC. Reverting changes.
Training on augumented user 119238 49/50 current_auc = 0.6142857142857143
User 119238 AUC after training: 0.6142857142857143
User 119238 does not improve AUC. Reverting changes.
[2024-12-02 19:50:58.353251] start test user 101345 235/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:50:58.929868] start test user 101345 235/567 recall augumented users by random, augumented_users = [102531, 116801, 69144, 63071, 30569, 74311, 117850, 3699, 2850, 2191, 89215, 52940, 111907, 101884, 22120, 74401, 128965, 88417, 21694, 123594, 45986, 103157, 75760, 134930, 28441, 132568, 75863, 75527, 12212, 50348, 128511, 1032, 126774, 95617, 40453, 36786, 120870, 24427, 5312, 82530, 73895, 15587, 129335, 51096, 119242, 117629, 121668, 120460, 121936, 38532]
[2024-12-02 19:50:58.945957] user = 101345 Cloud 235/567
[2024-12-02 19:50:58.972164] user = 101345 Local 235/567
[2024-12-02 19:50:59.090724] user = 101345 Local+ 235/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:51:02.162254] user = 101345 MPDA- 235/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7125164195909176
Training on augumented user 102531 0/50 current_auc = 0.7125164195909176
User 102531 AUC after training: 0.7132670294614374
User 102531 improves AUC. Keeping the model.
Training on augumented user 116801 1/50 current_auc = 0.7132670294614374
User 116801 AUC after training: 0.7132670294614374
User 116801 does not improve AUC. Reverting changes.
Training on augumented user 69144 2/50 current_auc = 0.7132670294614374
User 69144 AUC after training: 0.7134546819290674
User 69144 improves AUC. Keeping the model.
Training on augumented user 63071 3/50 current_auc = 0.7134546819290674
User 63071 AUC after training: 0.7152373803715518
User 63071 improves AUC. Keeping the model.
Training on augumented user 30569 4/50 current_auc = 0.7152373803715518
User 30569 AUC after training: 0.7152373803715518
User 30569 does not improve AUC. Reverting changes.
Training on augumented user 74311 5/50 current_auc = 0.7152373803715518
User 74311 AUC after training: 0.714580596734847
User 74311 does not improve AUC. Reverting changes.
Training on augumented user 117850 6/50 current_auc = 0.7152373803715518
User 117850 AUC after training: 0.7159879902420717
User 117850 improves AUC. Keeping the model.
Training on augumented user 3699 7/50 current_auc = 0.7159879902420717
User 3699 AUC after training: 0.7160818164758866
User 3699 improves AUC. Keeping the model.
Training on augumented user 2850 8/50 current_auc = 0.7160818164758866
User 2850 AUC after training: 0.7159879902420717
User 2850 does not improve AUC. Reverting changes.
Training on augumented user 2191 9/50 current_auc = 0.7160818164758866
User 2191 AUC after training: 0.7159879902420716
User 2191 does not improve AUC. Reverting changes.
Training on augumented user 89215 10/50 current_auc = 0.7160818164758866
User 89215 AUC after training: 0.7149559016701069
User 89215 does not improve AUC. Reverting changes.
Training on augumented user 52940 11/50 current_auc = 0.7160818164758866
User 52940 AUC after training: 0.7158941640082567
User 52940 does not improve AUC. Reverting changes.
Training on augumented user 111907 12/50 current_auc = 0.7160818164758866
User 111907 AUC after training: 0.7158941640082567
User 111907 does not improve AUC. Reverting changes.
Training on augumented user 101884 13/50 current_auc = 0.7160818164758866
User 101884 AUC after training: 0.7158003377744416
User 101884 does not improve AUC. Reverting changes.
Training on augumented user 22120 14/50 current_auc = 0.7160818164758866
User 22120 AUC after training: 0.7162694689435166
User 22120 improves AUC. Keeping the model.
Training on augumented user 74401 15/50 current_auc = 0.7162694689435166
User 74401 AUC after training: 0.7156126853068118
User 74401 does not improve AUC. Reverting changes.
Training on augumented user 128965 16/50 current_auc = 0.7162694689435166
User 128965 AUC after training: 0.7165509476449615
User 128965 improves AUC. Keeping the model.
Training on augumented user 88417 17/50 current_auc = 0.7165509476449615
User 88417 AUC after training: 0.7169262525802215
User 88417 improves AUC. Keeping the model.
Training on augumented user 21694 18/50 current_auc = 0.7169262525802215
User 21694 AUC after training: 0.7166447738787766
User 21694 does not improve AUC. Reverting changes.
Training on augumented user 123594 19/50 current_auc = 0.7169262525802215
User 123594 AUC after training: 0.7171139050478513
User 123594 improves AUC. Keeping the model.
Training on augumented user 45986 20/50 current_auc = 0.7171139050478513
User 45986 AUC after training: 0.7155188590729968
User 45986 does not improve AUC. Reverting changes.
Training on augumented user 103157 21/50 current_auc = 0.7171139050478513
User 103157 AUC after training: 0.7176768624507412
User 103157 improves AUC. Keeping the model.
Training on augumented user 75760 22/50 current_auc = 0.7176768624507412
User 75760 AUC after training: 0.7155188590729967
User 75760 does not improve AUC. Reverting changes.
Training on augumented user 134930 23/50 current_auc = 0.7176768624507412
User 134930 AUC after training: 0.7178645149183711
User 134930 improves AUC. Keeping the model.
Training on augumented user 28441 24/50 current_auc = 0.7178645149183711
User 28441 AUC after training: 0.7173015575154813
User 28441 does not improve AUC. Reverting changes.
Training on augumented user 132568 25/50 current_auc = 0.7178645149183711
User 132568 AUC after training: 0.7177706886845562
User 132568 does not improve AUC. Reverting changes.
Training on augumented user 75863 26/50 current_auc = 0.7178645149183711
User 75863 AUC after training: 0.7172077312816664
User 75863 does not improve AUC. Reverting changes.
Training on augumented user 75527 27/50 current_auc = 0.7178645149183711
User 75527 AUC after training: 0.7179583411521862
User 75527 improves AUC. Keeping the model.
Training on augumented user 12212 28/50 current_auc = 0.7179583411521862
User 12212 AUC after training: 0.7178645149183712
User 12212 does not improve AUC. Reverting changes.
Training on augumented user 50348 29/50 current_auc = 0.7179583411521862
User 50348 AUC after training: 0.7179583411521862
User 50348 does not improve AUC. Reverting changes.
Training on augumented user 128511 30/50 current_auc = 0.7179583411521862
User 128511 AUC after training: 0.7175830362169262
User 128511 does not improve AUC. Reverting changes.
Training on augumented user 1032 31/50 current_auc = 0.7179583411521862
User 1032 AUC after training: 0.7179583411521862
User 1032 does not improve AUC. Reverting changes.
Training on augumented user 126774 32/50 current_auc = 0.7179583411521862
User 126774 AUC after training: 0.7174892099831113
User 126774 does not improve AUC. Reverting changes.
Training on augumented user 95617 33/50 current_auc = 0.7179583411521862
User 95617 AUC after training: 0.7174892099831112
User 95617 does not improve AUC. Reverting changes.
Training on augumented user 40453 34/50 current_auc = 0.7179583411521862
User 40453 AUC after training: 0.7168324263464064
User 40453 does not improve AUC. Reverting changes.
Training on augumented user 36786 35/50 current_auc = 0.7179583411521862
User 36786 AUC after training: 0.7162694689435166
User 36786 does not improve AUC. Reverting changes.
Training on augumented user 120870 36/50 current_auc = 0.7179583411521862
User 120870 AUC after training: 0.7175830362169263
User 120870 does not improve AUC. Reverting changes.
Training on augumented user 24427 37/50 current_auc = 0.7179583411521862
User 24427 AUC after training: 0.7182398198536311
User 24427 improves AUC. Keeping the model.
Training on augumented user 5312 38/50 current_auc = 0.7182398198536311
User 5312 AUC after training: 0.7179583411521862
User 5312 does not improve AUC. Reverting changes.
Training on augumented user 82530 39/50 current_auc = 0.7182398198536311
User 82530 AUC after training: 0.7169262525802215
User 82530 does not improve AUC. Reverting changes.
Training on augumented user 73895 40/50 current_auc = 0.7182398198536311
User 73895 AUC after training: 0.7180521673860011
User 73895 does not improve AUC. Reverting changes.
Training on augumented user 15587 41/50 current_auc = 0.7182398198536311
User 15587 AUC after training: 0.7185212985550761
User 15587 improves AUC. Keeping the model.
Training on augumented user 129335 42/50 current_auc = 0.7185212985550761
User 129335 AUC after training: 0.7173953837492962
User 129335 does not improve AUC. Reverting changes.
Training on augumented user 51096 43/50 current_auc = 0.7185212985550761
User 51096 AUC after training: 0.7186151247888909
User 51096 improves AUC. Keeping the model.
Training on augumented user 119242 44/50 current_auc = 0.7186151247888909
User 119242 AUC after training: 0.7161756427097016
User 119242 does not improve AUC. Reverting changes.
Training on augumented user 117629 45/50 current_auc = 0.7186151247888909
User 117629 AUC after training: 0.7181459936198161
User 117629 does not improve AUC. Reverting changes.
Training on augumented user 121668 46/50 current_auc = 0.7186151247888909
User 121668 AUC after training: 0.7165509476449615
User 121668 does not improve AUC. Reverting changes.
Training on augumented user 120460 47/50 current_auc = 0.7186151247888909
User 120460 AUC after training: 0.7180521673860011
User 120460 does not improve AUC. Reverting changes.
Training on augumented user 121936 48/50 current_auc = 0.7186151247888909
User 121936 AUC after training: 0.7165509476449615
User 121936 does not improve AUC. Reverting changes.
Training on augumented user 38532 49/50 current_auc = 0.7186151247888909
User 38532 AUC after training: 0.7177706886845562
User 38532 does not improve AUC. Reverting changes.
[2024-12-02 19:51:30.033761] start test user 101370 236/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:51:30.577215] start test user 101370 236/567 recall augumented users by random, augumented_users = [76800, 32553, 4856, 109783, 22420, 32030, 89004, 98106, 8065, 76269, 25701, 47870, 45250, 100181, 133508, 79252, 126414, 38377, 26522, 17845, 123848, 39371, 70634, 41568, 55732, 32884, 54457, 110613, 87683, 4629, 65467, 58812, 19327, 69623, 67007, 69843, 54227, 1613, 32303, 57455, 67474, 126980, 65216, 17688, 43930, 127271, 47188, 38669, 92867, 77064]
[2024-12-02 19:51:30.592539] user = 101370 Cloud 236/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:51:30.598693] user = 101370 Local 236/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:51:30.708221] user = 101370 Local+ 236/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:51:32.880838] user = 101370 MPDA- 236/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 76800 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76800 AUC after training: 0.5
User 76800 does not improve AUC. Reverting changes.
Training on augumented user 32553 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32553 AUC after training: 0.5
User 32553 does not improve AUC. Reverting changes.
Training on augumented user 4856 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4856 AUC after training: 0.5
User 4856 does not improve AUC. Reverting changes.
Training on augumented user 109783 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109783 AUC after training: 0.5
User 109783 does not improve AUC. Reverting changes.
Training on augumented user 22420 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22420 AUC after training: 0.5
User 22420 does not improve AUC. Reverting changes.
Training on augumented user 32030 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32030 AUC after training: 0.5
User 32030 does not improve AUC. Reverting changes.
Training on augumented user 89004 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89004 AUC after training: 0.5
User 89004 does not improve AUC. Reverting changes.
Training on augumented user 98106 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98106 AUC after training: 0.5
User 98106 does not improve AUC. Reverting changes.
Training on augumented user 8065 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8065 AUC after training: 0.5
User 8065 does not improve AUC. Reverting changes.
Training on augumented user 76269 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76269 AUC after training: 0.5
User 76269 does not improve AUC. Reverting changes.
Training on augumented user 25701 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25701 AUC after training: 0.5
User 25701 does not improve AUC. Reverting changes.
Training on augumented user 47870 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47870 AUC after training: 0.5
User 47870 does not improve AUC. Reverting changes.
Training on augumented user 45250 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45250 AUC after training: 0.5
User 45250 does not improve AUC. Reverting changes.
Training on augumented user 100181 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100181 AUC after training: 0.5
User 100181 does not improve AUC. Reverting changes.
Training on augumented user 133508 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133508 AUC after training: 0.5
User 133508 does not improve AUC. Reverting changes.
Training on augumented user 79252 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79252 AUC after training: 0.5
User 79252 does not improve AUC. Reverting changes.
Training on augumented user 126414 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126414 AUC after training: 0.5
User 126414 does not improve AUC. Reverting changes.
Training on augumented user 38377 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38377 AUC after training: 0.5
User 38377 does not improve AUC. Reverting changes.
Training on augumented user 26522 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26522 AUC after training: 0.5
User 26522 does not improve AUC. Reverting changes.
Training on augumented user 17845 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 17845 AUC after training: 0.5
User 17845 does not improve AUC. Reverting changes.
Training on augumented user 123848 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123848 AUC after training: 0.5
User 123848 does not improve AUC. Reverting changes.
Training on augumented user 39371 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 39371 AUC after training: 0.5
User 39371 does not improve AUC. Reverting changes.
Training on augumented user 70634 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70634 AUC after training: 0.5
User 70634 does not improve AUC. Reverting changes.
Training on augumented user 41568 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41568 AUC after training: 0.5
User 41568 does not improve AUC. Reverting changes.
Training on augumented user 55732 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55732 AUC after training: 0.5
User 55732 does not improve AUC. Reverting changes.
Training on augumented user 32884 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32884 AUC after training: 0.5
User 32884 does not improve AUC. Reverting changes.
Training on augumented user 54457 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54457 AUC after training: 0.5
User 54457 does not improve AUC. Reverting changes.
Training on augumented user 110613 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110613 AUC after training: 0.5
User 110613 does not improve AUC. Reverting changes.
Training on augumented user 87683 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87683 AUC after training: 0.5
User 87683 does not improve AUC. Reverting changes.
Training on augumented user 4629 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4629 AUC after training: 0.5
User 4629 does not improve AUC. Reverting changes.
Training on augumented user 65467 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 65467 AUC after training: 0.5
User 65467 does not improve AUC. Reverting changes.
Training on augumented user 58812 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58812 AUC after training: 0.5
User 58812 does not improve AUC. Reverting changes.
Training on augumented user 19327 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19327 AUC after training: 0.5
User 19327 does not improve AUC. Reverting changes.
Training on augumented user 69623 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 69623 AUC after training: 0.5
User 69623 does not improve AUC. Reverting changes.
Training on augumented user 67007 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67007 AUC after training: 0.5
User 67007 does not improve AUC. Reverting changes.
Training on augumented user 69843 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 69843 AUC after training: 0.5
User 69843 does not improve AUC. Reverting changes.
Training on augumented user 54227 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54227 AUC after training: 0.5
User 54227 does not improve AUC. Reverting changes.
Training on augumented user 1613 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1613 AUC after training: 0.5
User 1613 does not improve AUC. Reverting changes.
Training on augumented user 32303 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32303 AUC after training: 0.5
User 32303 does not improve AUC. Reverting changes.
Training on augumented user 57455 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57455 AUC after training: 0.5
User 57455 does not improve AUC. Reverting changes.
Training on augumented user 67474 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67474 AUC after training: 0.5
User 67474 does not improve AUC. Reverting changes.
Training on augumented user 126980 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126980 AUC after training: 0.5
User 126980 does not improve AUC. Reverting changes.
Training on augumented user 65216 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 65216 AUC after training: 0.5
User 65216 does not improve AUC. Reverting changes.
Training on augumented user 17688 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 17688 AUC after training: 0.5
User 17688 does not improve AUC. Reverting changes.
Training on augumented user 43930 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43930 AUC after training: 0.5
User 43930 does not improve AUC. Reverting changes.
Training on augumented user 127271 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127271 AUC after training: 0.5
User 127271 does not improve AUC. Reverting changes.
Training on augumented user 47188 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47188 AUC after training: 0.5
User 47188 does not improve AUC. Reverting changes.
Training on augumented user 38669 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38669 AUC after training: 0.5
User 38669 does not improve AUC. Reverting changes.
Training on augumented user 92867 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92867 AUC after training: 0.5
User 92867 does not improve AUC. Reverting changes.
Training on augumented user 77064 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77064 AUC after training: 0.5
User 77064 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:52:02.323621] start test user 101452 237/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:52:02.759826] start test user 101452 237/567 recall augumented users by random, augumented_users = [34901, 94232, 43156, 12657, 79293, 107337, 81930, 40742, 50433, 122115, 43286, 76525, 29688, 126697, 123849, 135313, 8889, 20867, 126433, 35423, 63825, 2269, 52035, 6354, 8662, 17620, 39242, 68369, 23742, 38880, 44802, 33109, 77550, 91130, 53866, 87271, 63904, 91214, 53991, 94788, 135869, 15023, 111981, 108105, 18070, 110715, 109351, 32403, 71773, 106993]
[2024-12-02 19:52:02.776403] user = 101452 Cloud 237/567
[2024-12-02 19:52:02.813576] user = 101452 Local 237/567
[2024-12-02 19:52:03.125818] user = 101452 Local+ 237/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:52:05.890715] user = 101452 MPDA- 237/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.502435064935065
Training on augumented user 34901 0/50 current_auc = 0.502435064935065
User 34901 AUC after training: 0.502435064935065
User 34901 does not improve AUC. Reverting changes.
Training on augumented user 94232 1/50 current_auc = 0.502435064935065
User 94232 AUC after training: 0.5021645021645021
User 94232 does not improve AUC. Reverting changes.
Training on augumented user 43156 2/50 current_auc = 0.502435064935065
User 43156 AUC after training: 0.5027056277056277
User 43156 improves AUC. Keeping the model.
Training on augumented user 12657 3/50 current_auc = 0.5027056277056277
User 12657 AUC after training: 0.5027056277056277
User 12657 does not improve AUC. Reverting changes.
Training on augumented user 79293 4/50 current_auc = 0.5027056277056277
User 79293 AUC after training: 0.5013528138528138
User 79293 does not improve AUC. Reverting changes.
Training on augumented user 107337 5/50 current_auc = 0.5027056277056277
User 107337 AUC after training: 0.502435064935065
User 107337 does not improve AUC. Reverting changes.
Training on augumented user 81930 6/50 current_auc = 0.5027056277056277
User 81930 AUC after training: 0.5027056277056278
User 81930 improves AUC. Keeping the model.
Training on augumented user 40742 7/50 current_auc = 0.5027056277056278
User 40742 AUC after training: 0.5021645021645021
User 40742 does not improve AUC. Reverting changes.
Training on augumented user 50433 8/50 current_auc = 0.5027056277056278
User 50433 AUC after training: 0.502435064935065
User 50433 does not improve AUC. Reverting changes.
Training on augumented user 122115 9/50 current_auc = 0.5027056277056278
User 122115 AUC after training: 0.5018939393939394
User 122115 does not improve AUC. Reverting changes.
Training on augumented user 43286 10/50 current_auc = 0.5027056277056278
User 43286 AUC after training: 0.5029761904761905
User 43286 improves AUC. Keeping the model.
Training on augumented user 76525 11/50 current_auc = 0.5029761904761905
User 76525 AUC after training: 0.5035173160173161
User 76525 improves AUC. Keeping the model.
Training on augumented user 29688 12/50 current_auc = 0.5035173160173161
User 29688 AUC after training: 0.5037878787878788
User 29688 improves AUC. Keeping the model.
Training on augumented user 126697 13/50 current_auc = 0.5037878787878788
User 126697 AUC after training: 0.5029761904761905
User 126697 does not improve AUC. Reverting changes.
Training on augumented user 123849 14/50 current_auc = 0.5037878787878788
User 123849 AUC after training: 0.5040584415584416
User 123849 improves AUC. Keeping the model.
Training on augumented user 135313 15/50 current_auc = 0.5040584415584416
User 135313 AUC after training: 0.5035173160173161
User 135313 does not improve AUC. Reverting changes.
Training on augumented user 8889 16/50 current_auc = 0.5040584415584416
User 8889 AUC after training: 0.5035173160173161
User 8889 does not improve AUC. Reverting changes.
Training on augumented user 20867 17/50 current_auc = 0.5040584415584416
User 20867 AUC after training: 0.5032467532467533
User 20867 does not improve AUC. Reverting changes.
Training on augumented user 126433 18/50 current_auc = 0.5040584415584416
User 126433 AUC after training: 0.5027056277056277
User 126433 does not improve AUC. Reverting changes.
Training on augumented user 35423 19/50 current_auc = 0.5040584415584416
User 35423 AUC after training: 0.5040584415584415
User 35423 does not improve AUC. Reverting changes.
Training on augumented user 63825 20/50 current_auc = 0.5040584415584416
User 63825 AUC after training: 0.5062229437229437
User 63825 improves AUC. Keeping the model.
Training on augumented user 2269 21/50 current_auc = 0.5062229437229437
User 2269 AUC after training: 0.5045995670995671
User 2269 does not improve AUC. Reverting changes.
Training on augumented user 52035 22/50 current_auc = 0.5062229437229437
User 52035 AUC after training: 0.5062229437229437
User 52035 does not improve AUC. Reverting changes.
Training on augumented user 6354 23/50 current_auc = 0.5062229437229437
User 6354 AUC after training: 0.5059523809523809
User 6354 does not improve AUC. Reverting changes.
Training on augumented user 8662 24/50 current_auc = 0.5062229437229437
User 8662 AUC after training: 0.5056818181818181
User 8662 does not improve AUC. Reverting changes.
Training on augumented user 17620 25/50 current_auc = 0.5062229437229437
User 17620 AUC after training: 0.5062229437229437
User 17620 does not improve AUC. Reverting changes.
Training on augumented user 39242 26/50 current_auc = 0.5062229437229437
User 39242 AUC after training: 0.5048701298701298
User 39242 does not improve AUC. Reverting changes.
Training on augumented user 68369 27/50 current_auc = 0.5062229437229437
User 68369 AUC after training: 0.5054112554112554
User 68369 does not improve AUC. Reverting changes.
Training on augumented user 23742 28/50 current_auc = 0.5062229437229437
User 23742 AUC after training: 0.5048701298701299
User 23742 does not improve AUC. Reverting changes.
Training on augumented user 38880 29/50 current_auc = 0.5062229437229437
User 38880 AUC after training: 0.5059523809523809
User 38880 does not improve AUC. Reverting changes.
Training on augumented user 44802 30/50 current_auc = 0.5062229437229437
User 44802 AUC after training: 0.5064935064935066
User 44802 improves AUC. Keeping the model.
Training on augumented user 33109 31/50 current_auc = 0.5064935064935066
User 33109 AUC after training: 0.5067640692640693
User 33109 improves AUC. Keeping the model.
Training on augumented user 77550 32/50 current_auc = 0.5067640692640693
User 77550 AUC after training: 0.5067640692640694
User 77550 improves AUC. Keeping the model.
Training on augumented user 91130 33/50 current_auc = 0.5067640692640694
User 91130 AUC after training: 0.5073051948051948
User 91130 improves AUC. Keeping the model.
Training on augumented user 53866 34/50 current_auc = 0.5073051948051948
User 53866 AUC after training: 0.5064935064935066
User 53866 does not improve AUC. Reverting changes.
Training on augumented user 87271 35/50 current_auc = 0.5073051948051948
User 87271 AUC after training: 0.5073051948051948
User 87271 does not improve AUC. Reverting changes.
Training on augumented user 63904 36/50 current_auc = 0.5073051948051948
User 63904 AUC after training: 0.5073051948051948
User 63904 does not improve AUC. Reverting changes.
Training on augumented user 91214 37/50 current_auc = 0.5073051948051948
User 91214 AUC after training: 0.507034632034632
User 91214 does not improve AUC. Reverting changes.
Training on augumented user 53991 38/50 current_auc = 0.5073051948051948
User 53991 AUC after training: 0.5064935064935066
User 53991 does not improve AUC. Reverting changes.
Training on augumented user 94788 39/50 current_auc = 0.5073051948051948
User 94788 AUC after training: 0.5075757575757576
User 94788 improves AUC. Keeping the model.
Training on augumented user 135869 40/50 current_auc = 0.5075757575757576
User 135869 AUC after training: 0.5073051948051948
User 135869 does not improve AUC. Reverting changes.
Training on augumented user 15023 41/50 current_auc = 0.5075757575757576
User 15023 AUC after training: 0.5083874458874459
User 15023 improves AUC. Keeping the model.
Training on augumented user 111981 42/50 current_auc = 0.5083874458874459
User 111981 AUC after training: 0.5054112554112553
User 111981 does not improve AUC. Reverting changes.
Training on augumented user 108105 43/50 current_auc = 0.5083874458874459
User 108105 AUC after training: 0.5083874458874459
User 108105 does not improve AUC. Reverting changes.
Training on augumented user 18070 44/50 current_auc = 0.5083874458874459
User 18070 AUC after training: 0.508387445887446
User 18070 improves AUC. Keeping the model.
Training on augumented user 110715 45/50 current_auc = 0.508387445887446
User 110715 AUC after training: 0.5085227272727273
User 110715 improves AUC. Keeping the model.
Training on augumented user 109351 46/50 current_auc = 0.5085227272727273
User 109351 AUC after training: 0.5079816017316017
User 109351 does not improve AUC. Reverting changes.
Training on augumented user 32403 47/50 current_auc = 0.5085227272727273
User 32403 AUC after training: 0.5081168831168832
User 32403 does not improve AUC. Reverting changes.
Training on augumented user 71773 48/50 current_auc = 0.5085227272727273
User 71773 AUC after training: 0.5081168831168832
User 71773 does not improve AUC. Reverting changes.
Training on augumented user 106993 49/50 current_auc = 0.5085227272727273
User 106993 AUC after training: 0.5079816017316017
User 106993 does not improve AUC. Reverting changes.
[2024-12-02 19:52:36.720975] start test user 101453 238/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:52:37.329427] start test user 101453 238/567 recall augumented users by random, augumented_users = [72761, 595, 16622, 94647, 116976, 117071, 15294, 70398, 80653, 83026, 124187, 66585, 76166, 97402, 78957, 52258, 58216, 115894, 105190, 129168, 130558, 92817, 79182, 56942, 47854, 2512, 69486, 37910, 86123, 115285, 121251, 71206, 110643, 42343, 91244, 101605, 100379, 4346, 80696, 60490, 78757, 87282, 101600, 31223, 120887, 53731, 24145, 18400, 54917, 138042]
[2024-12-02 19:52:37.344323] user = 101453 Cloud 238/567
[2024-12-02 19:52:37.368998] user = 101453 Local 238/567
[2024-12-02 19:52:37.402405] user = 101453 Local+ 238/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:52:39.444349] user = 101453 MPDA- 238/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.0
Training on augumented user 72761 0/50 current_auc = 0.0
User 72761 AUC after training: 0.0
User 72761 does not improve AUC. Reverting changes.
Training on augumented user 595 1/50 current_auc = 0.0
User 595 AUC after training: 0.0
User 595 does not improve AUC. Reverting changes.
Training on augumented user 16622 2/50 current_auc = 0.0
User 16622 AUC after training: 0.0
User 16622 does not improve AUC. Reverting changes.
Training on augumented user 94647 3/50 current_auc = 0.0
User 94647 AUC after training: 0.0
User 94647 does not improve AUC. Reverting changes.
Training on augumented user 116976 4/50 current_auc = 0.0
User 116976 AUC after training: 0.0
User 116976 does not improve AUC. Reverting changes.
Training on augumented user 117071 5/50 current_auc = 0.0
User 117071 AUC after training: 0.0
User 117071 does not improve AUC. Reverting changes.
Training on augumented user 15294 6/50 current_auc = 0.0
User 15294 AUC after training: 0.0
User 15294 does not improve AUC. Reverting changes.
Training on augumented user 70398 7/50 current_auc = 0.0
User 70398 AUC after training: 0.0
User 70398 does not improve AUC. Reverting changes.
Training on augumented user 80653 8/50 current_auc = 0.0
User 80653 AUC after training: 0.0
User 80653 does not improve AUC. Reverting changes.
Training on augumented user 83026 9/50 current_auc = 0.0
User 83026 AUC after training: 0.0
User 83026 does not improve AUC. Reverting changes.
Training on augumented user 124187 10/50 current_auc = 0.0
User 124187 AUC after training: 0.0
User 124187 does not improve AUC. Reverting changes.
Training on augumented user 66585 11/50 current_auc = 0.0
User 66585 AUC after training: 0.0
User 66585 does not improve AUC. Reverting changes.
Training on augumented user 76166 12/50 current_auc = 0.0
User 76166 AUC after training: 0.0
User 76166 does not improve AUC. Reverting changes.
Training on augumented user 97402 13/50 current_auc = 0.0
User 97402 AUC after training: 0.0
User 97402 does not improve AUC. Reverting changes.
Training on augumented user 78957 14/50 current_auc = 0.0
User 78957 AUC after training: 0.0
User 78957 does not improve AUC. Reverting changes.
Training on augumented user 52258 15/50 current_auc = 0.0
User 52258 AUC after training: 0.0
User 52258 does not improve AUC. Reverting changes.
Training on augumented user 58216 16/50 current_auc = 0.0
User 58216 AUC after training: 0.0
User 58216 does not improve AUC. Reverting changes.
Training on augumented user 115894 17/50 current_auc = 0.0
User 115894 AUC after training: 0.0
User 115894 does not improve AUC. Reverting changes.
Training on augumented user 105190 18/50 current_auc = 0.0
User 105190 AUC after training: 0.0
User 105190 does not improve AUC. Reverting changes.
Training on augumented user 129168 19/50 current_auc = 0.0
User 129168 AUC after training: 0.0
User 129168 does not improve AUC. Reverting changes.
Training on augumented user 130558 20/50 current_auc = 0.0
User 130558 AUC after training: 0.0
User 130558 does not improve AUC. Reverting changes.
Training on augumented user 92817 21/50 current_auc = 0.0
User 92817 AUC after training: 0.0
User 92817 does not improve AUC. Reverting changes.
Training on augumented user 79182 22/50 current_auc = 0.0
User 79182 AUC after training: 0.0
User 79182 does not improve AUC. Reverting changes.
Training on augumented user 56942 23/50 current_auc = 0.0
User 56942 AUC after training: 0.0
User 56942 does not improve AUC. Reverting changes.
Training on augumented user 47854 24/50 current_auc = 0.0
User 47854 AUC after training: 0.0
User 47854 does not improve AUC. Reverting changes.
Training on augumented user 2512 25/50 current_auc = 0.0
User 2512 AUC after training: 0.0
User 2512 does not improve AUC. Reverting changes.
Training on augumented user 69486 26/50 current_auc = 0.0
User 69486 AUC after training: 0.0
User 69486 does not improve AUC. Reverting changes.
Training on augumented user 37910 27/50 current_auc = 0.0
User 37910 AUC after training: 0.0
User 37910 does not improve AUC. Reverting changes.
Training on augumented user 86123 28/50 current_auc = 0.0
User 86123 AUC after training: 0.0
User 86123 does not improve AUC. Reverting changes.
Training on augumented user 115285 29/50 current_auc = 0.0
User 115285 AUC after training: 0.0
User 115285 does not improve AUC. Reverting changes.
Training on augumented user 121251 30/50 current_auc = 0.0
User 121251 AUC after training: 0.0
User 121251 does not improve AUC. Reverting changes.
Training on augumented user 71206 31/50 current_auc = 0.0
User 71206 AUC after training: 0.0
User 71206 does not improve AUC. Reverting changes.
Training on augumented user 110643 32/50 current_auc = 0.0
User 110643 AUC after training: 0.0
User 110643 does not improve AUC. Reverting changes.
Training on augumented user 42343 33/50 current_auc = 0.0
User 42343 AUC after training: 0.0
User 42343 does not improve AUC. Reverting changes.
Training on augumented user 91244 34/50 current_auc = 0.0
User 91244 AUC after training: 0.0
User 91244 does not improve AUC. Reverting changes.
Training on augumented user 101605 35/50 current_auc = 0.0
User 101605 AUC after training: 0.0
User 101605 does not improve AUC. Reverting changes.
Training on augumented user 100379 36/50 current_auc = 0.0
User 100379 AUC after training: 0.0
User 100379 does not improve AUC. Reverting changes.
Training on augumented user 4346 37/50 current_auc = 0.0
User 4346 AUC after training: 0.0
User 4346 does not improve AUC. Reverting changes.
Training on augumented user 80696 38/50 current_auc = 0.0
User 80696 AUC after training: 0.0
User 80696 does not improve AUC. Reverting changes.
Training on augumented user 60490 39/50 current_auc = 0.0
User 60490 AUC after training: 0.0
User 60490 does not improve AUC. Reverting changes.
Training on augumented user 78757 40/50 current_auc = 0.0
User 78757 AUC after training: 0.0
User 78757 does not improve AUC. Reverting changes.
Training on augumented user 87282 41/50 current_auc = 0.0
User 87282 AUC after training: 0.0
User 87282 does not improve AUC. Reverting changes.
Training on augumented user 101600 42/50 current_auc = 0.0
User 101600 AUC after training: 0.0
User 101600 does not improve AUC. Reverting changes.
Training on augumented user 31223 43/50 current_auc = 0.0
User 31223 AUC after training: 0.0
User 31223 does not improve AUC. Reverting changes.
Training on augumented user 120887 44/50 current_auc = 0.0
User 120887 AUC after training: 0.0
User 120887 does not improve AUC. Reverting changes.
Training on augumented user 53731 45/50 current_auc = 0.0
User 53731 AUC after training: 0.0
User 53731 does not improve AUC. Reverting changes.
Training on augumented user 24145 46/50 current_auc = 0.0
User 24145 AUC after training: 0.0
User 24145 does not improve AUC. Reverting changes.
Training on augumented user 18400 47/50 current_auc = 0.0
User 18400 AUC after training: 0.0
User 18400 does not improve AUC. Reverting changes.
Training on augumented user 54917 48/50 current_auc = 0.0
User 54917 AUC after training: 0.0
User 54917 does not improve AUC. Reverting changes.
Training on augumented user 138042 49/50 current_auc = 0.0
User 138042 AUC after training: 0.0
User 138042 does not improve AUC. Reverting changes.
[2024-12-02 19:53:13.283743] start test user 101477 239/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:53:13.762607] start test user 101477 239/567 recall augumented users by random, augumented_users = [126775, 18482, 41238, 104698, 41302, 22561, 129567, 132935, 27198, 122183, 15573, 66824, 53143, 61271, 31912, 117349, 17647, 85049, 135684, 70268, 12283, 14937, 60470, 24794, 114748, 89205, 46377, 107057, 113292, 67732, 123971, 47600, 37136, 106653, 112022, 77115, 94385, 52005, 600, 36196, 103512, 99105, 77961, 57972, 74464, 29595, 46907, 51752, 111867, 84494]
[2024-12-02 19:53:13.778842] user = 101477 Cloud 239/567
[2024-12-02 19:53:13.790461] user = 101477 Local 239/567
[2024-12-02 19:53:13.810594] user = 101477 Local+ 239/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:53:15.496281] user = 101477 MPDA- 239/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8288043478260869
Training on augumented user 126775 0/50 current_auc = 0.8288043478260869
User 126775 AUC after training: 0.8288043478260869
User 126775 does not improve AUC. Reverting changes.
Training on augumented user 18482 1/50 current_auc = 0.8288043478260869
User 18482 AUC after training: 0.8288043478260869
User 18482 does not improve AUC. Reverting changes.
Training on augumented user 41238 2/50 current_auc = 0.8288043478260869
User 41238 AUC after training: 0.826086956521739
User 41238 does not improve AUC. Reverting changes.
Training on augumented user 104698 3/50 current_auc = 0.8288043478260869
User 104698 AUC after training: 0.8288043478260869
User 104698 does not improve AUC. Reverting changes.
Training on augumented user 41302 4/50 current_auc = 0.8288043478260869
User 41302 AUC after training: 0.8288043478260869
User 41302 does not improve AUC. Reverting changes.
Training on augumented user 22561 5/50 current_auc = 0.8288043478260869
User 22561 AUC after training: 0.8315217391304348
User 22561 improves AUC. Keeping the model.
Training on augumented user 129567 6/50 current_auc = 0.8315217391304348
User 129567 AUC after training: 0.826086956521739
User 129567 does not improve AUC. Reverting changes.
Training on augumented user 132935 7/50 current_auc = 0.8315217391304348
User 132935 AUC after training: 0.8315217391304348
User 132935 does not improve AUC. Reverting changes.
Training on augumented user 27198 8/50 current_auc = 0.8315217391304348
User 27198 AUC after training: 0.8315217391304348
User 27198 does not improve AUC. Reverting changes.
Training on augumented user 122183 9/50 current_auc = 0.8315217391304348
User 122183 AUC after training: 0.8288043478260869
User 122183 does not improve AUC. Reverting changes.
Training on augumented user 15573 10/50 current_auc = 0.8315217391304348
User 15573 AUC after training: 0.8315217391304348
User 15573 does not improve AUC. Reverting changes.
Training on augumented user 66824 11/50 current_auc = 0.8315217391304348
User 66824 AUC after training: 0.8315217391304348
User 66824 does not improve AUC. Reverting changes.
Training on augumented user 53143 12/50 current_auc = 0.8315217391304348
User 53143 AUC after training: 0.8315217391304348
User 53143 does not improve AUC. Reverting changes.
Training on augumented user 61271 13/50 current_auc = 0.8315217391304348
User 61271 AUC after training: 0.8288043478260869
User 61271 does not improve AUC. Reverting changes.
Training on augumented user 31912 14/50 current_auc = 0.8315217391304348
User 31912 AUC after training: 0.8274456521739131
User 31912 does not improve AUC. Reverting changes.
Training on augumented user 117349 15/50 current_auc = 0.8315217391304348
User 117349 AUC after training: 0.8288043478260869
User 117349 does not improve AUC. Reverting changes.
Training on augumented user 17647 16/50 current_auc = 0.8315217391304348
User 17647 AUC after training: 0.8315217391304348
User 17647 does not improve AUC. Reverting changes.
Training on augumented user 85049 17/50 current_auc = 0.8315217391304348
User 85049 AUC after training: 0.8315217391304348
User 85049 does not improve AUC. Reverting changes.
Training on augumented user 135684 18/50 current_auc = 0.8315217391304348
User 135684 AUC after training: 0.8288043478260869
User 135684 does not improve AUC. Reverting changes.
Training on augumented user 70268 19/50 current_auc = 0.8315217391304348
User 70268 AUC after training: 0.8233695652173912
User 70268 does not improve AUC. Reverting changes.
Training on augumented user 12283 20/50 current_auc = 0.8315217391304348
User 12283 AUC after training: 0.8315217391304348
User 12283 does not improve AUC. Reverting changes.
Training on augumented user 14937 21/50 current_auc = 0.8315217391304348
User 14937 AUC after training: 0.8315217391304348
User 14937 does not improve AUC. Reverting changes.
Training on augumented user 60470 22/50 current_auc = 0.8315217391304348
User 60470 AUC after training: 0.8315217391304348
User 60470 does not improve AUC. Reverting changes.
Training on augumented user 24794 23/50 current_auc = 0.8315217391304348
User 24794 AUC after training: 0.8315217391304348
User 24794 does not improve AUC. Reverting changes.
Training on augumented user 114748 24/50 current_auc = 0.8315217391304348
User 114748 AUC after training: 0.8315217391304348
User 114748 does not improve AUC. Reverting changes.
Training on augumented user 89205 25/50 current_auc = 0.8315217391304348
User 89205 AUC after training: 0.8315217391304348
User 89205 does not improve AUC. Reverting changes.
Training on augumented user 46377 26/50 current_auc = 0.8315217391304348
User 46377 AUC after training: 0.8315217391304348
User 46377 does not improve AUC. Reverting changes.
Training on augumented user 107057 27/50 current_auc = 0.8315217391304348
User 107057 AUC after training: 0.8288043478260869
User 107057 does not improve AUC. Reverting changes.
Training on augumented user 113292 28/50 current_auc = 0.8315217391304348
User 113292 AUC after training: 0.8288043478260869
User 113292 does not improve AUC. Reverting changes.
Training on augumented user 67732 29/50 current_auc = 0.8315217391304348
User 67732 AUC after training: 0.8315217391304348
User 67732 does not improve AUC. Reverting changes.
Training on augumented user 123971 30/50 current_auc = 0.8315217391304348
User 123971 AUC after training: 0.8315217391304348
User 123971 does not improve AUC. Reverting changes.
Training on augumented user 47600 31/50 current_auc = 0.8315217391304348
User 47600 AUC after training: 0.8233695652173912
User 47600 does not improve AUC. Reverting changes.
Training on augumented user 37136 32/50 current_auc = 0.8315217391304348
User 37136 AUC after training: 0.8288043478260869
User 37136 does not improve AUC. Reverting changes.
Training on augumented user 106653 33/50 current_auc = 0.8315217391304348
User 106653 AUC after training: 0.8288043478260869
User 106653 does not improve AUC. Reverting changes.
Training on augumented user 112022 34/50 current_auc = 0.8315217391304348
User 112022 AUC after training: 0.8315217391304348
User 112022 does not improve AUC. Reverting changes.
Training on augumented user 77115 35/50 current_auc = 0.8315217391304348
User 77115 AUC after training: 0.8288043478260869
User 77115 does not improve AUC. Reverting changes.
Training on augumented user 94385 36/50 current_auc = 0.8315217391304348
User 94385 AUC after training: 0.8288043478260869
User 94385 does not improve AUC. Reverting changes.
Training on augumented user 52005 37/50 current_auc = 0.8315217391304348
User 52005 AUC after training: 0.8288043478260869
User 52005 does not improve AUC. Reverting changes.
Training on augumented user 600 38/50 current_auc = 0.8315217391304348
User 600 AUC after training: 0.8288043478260869
User 600 does not improve AUC. Reverting changes.
Training on augumented user 36196 39/50 current_auc = 0.8315217391304348
User 36196 AUC after training: 0.8288043478260869
User 36196 does not improve AUC. Reverting changes.
Training on augumented user 103512 40/50 current_auc = 0.8315217391304348
User 103512 AUC after training: 0.8315217391304348
User 103512 does not improve AUC. Reverting changes.
Training on augumented user 99105 41/50 current_auc = 0.8315217391304348
User 99105 AUC after training: 0.8315217391304348
User 99105 does not improve AUC. Reverting changes.
Training on augumented user 77961 42/50 current_auc = 0.8315217391304348
User 77961 AUC after training: 0.8288043478260869
User 77961 does not improve AUC. Reverting changes.
Training on augumented user 57972 43/50 current_auc = 0.8315217391304348
User 57972 AUC after training: 0.8315217391304348
User 57972 does not improve AUC. Reverting changes.
Training on augumented user 74464 44/50 current_auc = 0.8315217391304348
User 74464 AUC after training: 0.8315217391304348
User 74464 does not improve AUC. Reverting changes.
Training on augumented user 29595 45/50 current_auc = 0.8315217391304348
User 29595 AUC after training: 0.826086956521739
User 29595 does not improve AUC. Reverting changes.
Training on augumented user 46907 46/50 current_auc = 0.8315217391304348
User 46907 AUC after training: 0.8315217391304348
User 46907 does not improve AUC. Reverting changes.
Training on augumented user 51752 47/50 current_auc = 0.8315217391304348
User 51752 AUC after training: 0.8315217391304348
User 51752 does not improve AUC. Reverting changes.
Training on augumented user 111867 48/50 current_auc = 0.8315217391304348
User 111867 AUC after training: 0.8315217391304348
User 111867 does not improve AUC. Reverting changes.
Training on augumented user 84494 49/50 current_auc = 0.8315217391304348
User 84494 AUC after training: 0.8315217391304348
User 84494 does not improve AUC. Reverting changes.
[2024-12-02 19:53:48.546383] start test user 101485 240/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:53:49.141439] start test user 101485 240/567 recall augumented users by random, augumented_users = [83172, 50205, 80844, 24952, 64392, 53885, 95191, 12783, 106014, 60568, 51915, 52537, 97298, 64828, 97413, 8495, 71766, 90644, 26923, 129352, 17297, 53311, 14650, 96499, 137564, 71889, 43167, 92289, 7068, 49581, 68799, 29612, 60398, 44312, 64194, 1015, 17527, 111667, 22872, 56335, 13473, 137536, 81615, 10952, 42048, 24744, 6589, 46064, 75966, 76509]
[2024-12-02 19:53:49.155801] user = 101485 Cloud 240/567
[2024-12-02 19:53:49.167610] user = 101485 Local 240/567
[2024-12-02 19:53:49.190369] user = 101485 Local+ 240/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:53:51.223459] user = 101485 MPDA- 240/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6727272727272727
Training on augumented user 83172 0/50 current_auc = 0.6727272727272727
User 83172 AUC after training: 0.6704545454545454
User 83172 does not improve AUC. Reverting changes.
Training on augumented user 50205 1/50 current_auc = 0.6727272727272727
User 50205 AUC after training: 0.675
User 50205 improves AUC. Keeping the model.
Training on augumented user 80844 2/50 current_auc = 0.675
User 80844 AUC after training: 0.6795454545454545
User 80844 improves AUC. Keeping the model.
Training on augumented user 24952 3/50 current_auc = 0.6795454545454545
User 24952 AUC after training: 0.675
User 24952 does not improve AUC. Reverting changes.
Training on augumented user 64392 4/50 current_auc = 0.6795454545454545
User 64392 AUC after training: 0.6818181818181818
User 64392 improves AUC. Keeping the model.
Training on augumented user 53885 5/50 current_auc = 0.6818181818181818
User 53885 AUC after training: 0.6772727272727272
User 53885 does not improve AUC. Reverting changes.
Training on augumented user 95191 6/50 current_auc = 0.6818181818181818
User 95191 AUC after training: 0.6795454545454546
User 95191 does not improve AUC. Reverting changes.
Training on augumented user 12783 7/50 current_auc = 0.6818181818181818
User 12783 AUC after training: 0.6704545454545454
User 12783 does not improve AUC. Reverting changes.
Training on augumented user 106014 8/50 current_auc = 0.6818181818181818
User 106014 AUC after training: 0.6818181818181818
User 106014 does not improve AUC. Reverting changes.
Training on augumented user 60568 9/50 current_auc = 0.6818181818181818
User 60568 AUC after training: 0.6795454545454545
User 60568 does not improve AUC. Reverting changes.
Training on augumented user 51915 10/50 current_auc = 0.6818181818181818
User 51915 AUC after training: 0.6772727272727272
User 51915 does not improve AUC. Reverting changes.
Training on augumented user 52537 11/50 current_auc = 0.6818181818181818
User 52537 AUC after training: 0.6818181818181818
User 52537 does not improve AUC. Reverting changes.
Training on augumented user 97298 12/50 current_auc = 0.6818181818181818
User 97298 AUC after training: 0.6818181818181818
User 97298 does not improve AUC. Reverting changes.
Training on augumented user 64828 13/50 current_auc = 0.6818181818181818
User 64828 AUC after training: 0.6795454545454545
User 64828 does not improve AUC. Reverting changes.
Training on augumented user 97413 14/50 current_auc = 0.6818181818181818
User 97413 AUC after training: 0.6818181818181818
User 97413 does not improve AUC. Reverting changes.
Training on augumented user 8495 15/50 current_auc = 0.6818181818181818
User 8495 AUC after training: 0.6795454545454545
User 8495 does not improve AUC. Reverting changes.
Training on augumented user 71766 16/50 current_auc = 0.6818181818181818
User 71766 AUC after training: 0.6818181818181818
User 71766 does not improve AUC. Reverting changes.
Training on augumented user 90644 17/50 current_auc = 0.6818181818181818
User 90644 AUC after training: 0.6818181818181818
User 90644 does not improve AUC. Reverting changes.
Training on augumented user 26923 18/50 current_auc = 0.6818181818181818
User 26923 AUC after training: 0.6818181818181818
User 26923 does not improve AUC. Reverting changes.
Training on augumented user 129352 19/50 current_auc = 0.6818181818181818
User 129352 AUC after training: 0.6818181818181818
User 129352 does not improve AUC. Reverting changes.
Training on augumented user 17297 20/50 current_auc = 0.6818181818181818
User 17297 AUC after training: 0.6818181818181818
User 17297 does not improve AUC. Reverting changes.
Training on augumented user 53311 21/50 current_auc = 0.6818181818181818
User 53311 AUC after training: 0.6795454545454546
User 53311 does not improve AUC. Reverting changes.
Training on augumented user 14650 22/50 current_auc = 0.6818181818181818
User 14650 AUC after training: 0.6818181818181818
User 14650 does not improve AUC. Reverting changes.
Training on augumented user 96499 23/50 current_auc = 0.6818181818181818
User 96499 AUC after training: 0.6818181818181818
User 96499 does not improve AUC. Reverting changes.
Training on augumented user 137564 24/50 current_auc = 0.6818181818181818
User 137564 AUC after training: 0.6818181818181818
User 137564 does not improve AUC. Reverting changes.
Training on augumented user 71889 25/50 current_auc = 0.6818181818181818
User 71889 AUC after training: 0.6818181818181818
User 71889 does not improve AUC. Reverting changes.
Training on augumented user 43167 26/50 current_auc = 0.6818181818181818
User 43167 AUC after training: 0.6818181818181818
User 43167 does not improve AUC. Reverting changes.
Training on augumented user 92289 27/50 current_auc = 0.6818181818181818
User 92289 AUC after training: 0.6818181818181818
User 92289 does not improve AUC. Reverting changes.
Training on augumented user 7068 28/50 current_auc = 0.6818181818181818
User 7068 AUC after training: 0.6818181818181818
User 7068 does not improve AUC. Reverting changes.
Training on augumented user 49581 29/50 current_auc = 0.6818181818181818
User 49581 AUC after training: 0.6818181818181818
User 49581 does not improve AUC. Reverting changes.
Training on augumented user 68799 30/50 current_auc = 0.6818181818181818
User 68799 AUC after training: 0.6818181818181818
User 68799 does not improve AUC. Reverting changes.
Training on augumented user 29612 31/50 current_auc = 0.6818181818181818
User 29612 AUC after training: 0.6795454545454545
User 29612 does not improve AUC. Reverting changes.
Training on augumented user 60398 32/50 current_auc = 0.6818181818181818
User 60398 AUC after training: 0.6749999999999999
User 60398 does not improve AUC. Reverting changes.
Training on augumented user 44312 33/50 current_auc = 0.6818181818181818
User 44312 AUC after training: 0.6818181818181818
User 44312 does not improve AUC. Reverting changes.
Training on augumented user 64194 34/50 current_auc = 0.6818181818181818
User 64194 AUC after training: 0.6818181818181818
User 64194 does not improve AUC. Reverting changes.
Training on augumented user 1015 35/50 current_auc = 0.6818181818181818
User 1015 AUC after training: 0.6772727272727272
User 1015 does not improve AUC. Reverting changes.
Training on augumented user 17527 36/50 current_auc = 0.6818181818181818
User 17527 AUC after training: 0.6772727272727272
User 17527 does not improve AUC. Reverting changes.
Training on augumented user 111667 37/50 current_auc = 0.6818181818181818
User 111667 AUC after training: 0.6818181818181818
User 111667 does not improve AUC. Reverting changes.
Training on augumented user 22872 38/50 current_auc = 0.6818181818181818
User 22872 AUC after training: 0.6818181818181818
User 22872 does not improve AUC. Reverting changes.
Training on augumented user 56335 39/50 current_auc = 0.6818181818181818
User 56335 AUC after training: 0.6818181818181818
User 56335 does not improve AUC. Reverting changes.
Training on augumented user 13473 40/50 current_auc = 0.6818181818181818
User 13473 AUC after training: 0.6795454545454545
User 13473 does not improve AUC. Reverting changes.
Training on augumented user 137536 41/50 current_auc = 0.6818181818181818
User 137536 AUC after training: 0.6795454545454545
User 137536 does not improve AUC. Reverting changes.
Training on augumented user 81615 42/50 current_auc = 0.6818181818181818
User 81615 AUC after training: 0.6818181818181818
User 81615 does not improve AUC. Reverting changes.
Training on augumented user 10952 43/50 current_auc = 0.6818181818181818
User 10952 AUC after training: 0.6795454545454545
User 10952 does not improve AUC. Reverting changes.
Training on augumented user 42048 44/50 current_auc = 0.6818181818181818
User 42048 AUC after training: 0.6818181818181818
User 42048 does not improve AUC. Reverting changes.
Training on augumented user 24744 45/50 current_auc = 0.6818181818181818
User 24744 AUC after training: 0.6818181818181818
User 24744 does not improve AUC. Reverting changes.
Training on augumented user 6589 46/50 current_auc = 0.6818181818181818
User 6589 AUC after training: 0.6818181818181818
User 6589 does not improve AUC. Reverting changes.
Training on augumented user 46064 47/50 current_auc = 0.6818181818181818
User 46064 AUC after training: 0.6818181818181818
User 46064 does not improve AUC. Reverting changes.
Training on augumented user 75966 48/50 current_auc = 0.6818181818181818
User 75966 AUC after training: 0.6795454545454545
User 75966 does not improve AUC. Reverting changes.
Training on augumented user 76509 49/50 current_auc = 0.6818181818181818
User 76509 AUC after training: 0.675
User 76509 does not improve AUC. Reverting changes.
[2024-12-02 19:54:23.253363] start test user 101499 241/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:54:23.744622] start test user 101499 241/567 recall augumented users by random, augumented_users = [105408, 22968, 50160, 7859, 121678, 13456, 98442, 60523, 51193, 106498, 47684, 40354, 111405, 102931, 12797, 104300, 59246, 131592, 8818, 114140, 93251, 29736, 103514, 91294, 9194, 98841, 124410, 12322, 106237, 137956, 103634, 99723, 77448, 116386, 33076, 72908, 113179, 71479, 120904, 18615, 132405, 12233, 102412, 37515, 136870, 52560, 16518, 22110, 133986, 43489]
[2024-12-02 19:54:23.766319] user = 101499 Cloud 241/567
[2024-12-02 19:54:23.796487] user = 101499 Local 241/567
[2024-12-02 19:54:23.968622] user = 101499 Local+ 241/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:54:26.194915] user = 101499 MPDA- 241/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7825396825396825
Training on augumented user 105408 0/50 current_auc = 0.7825396825396825
User 105408 AUC after training: 0.7777777777777778
User 105408 does not improve AUC. Reverting changes.
Training on augumented user 22968 1/50 current_auc = 0.7825396825396825
User 22968 AUC after training: 0.7825396825396825
User 22968 does not improve AUC. Reverting changes.
Training on augumented user 50160 2/50 current_auc = 0.7825396825396825
User 50160 AUC after training: 0.780952380952381
User 50160 does not improve AUC. Reverting changes.
Training on augumented user 7859 3/50 current_auc = 0.7825396825396825
User 7859 AUC after training: 0.7821428571428571
User 7859 does not improve AUC. Reverting changes.
Training on augumented user 121678 4/50 current_auc = 0.7825396825396825
User 121678 AUC after training: 0.7781746031746032
User 121678 does not improve AUC. Reverting changes.
Training on augumented user 13456 5/50 current_auc = 0.7825396825396825
User 13456 AUC after training: 0.7825396825396825
User 13456 does not improve AUC. Reverting changes.
Training on augumented user 98442 6/50 current_auc = 0.7825396825396825
User 98442 AUC after training: 0.7821428571428571
User 98442 does not improve AUC. Reverting changes.
Training on augumented user 60523 7/50 current_auc = 0.7825396825396825
User 60523 AUC after training: 0.7821428571428571
User 60523 does not improve AUC. Reverting changes.
Training on augumented user 51193 8/50 current_auc = 0.7825396825396825
User 51193 AUC after training: 0.7821428571428571
User 51193 does not improve AUC. Reverting changes.
Training on augumented user 106498 9/50 current_auc = 0.7825396825396825
User 106498 AUC after training: 0.7833333333333333
User 106498 improves AUC. Keeping the model.
Training on augumented user 47684 10/50 current_auc = 0.7833333333333333
User 47684 AUC after training: 0.7825396825396825
User 47684 does not improve AUC. Reverting changes.
Training on augumented user 40354 11/50 current_auc = 0.7833333333333333
User 40354 AUC after training: 0.7841269841269841
User 40354 improves AUC. Keeping the model.
Training on augumented user 111405 12/50 current_auc = 0.7841269841269841
User 111405 AUC after training: 0.7833333333333333
User 111405 does not improve AUC. Reverting changes.
Training on augumented user 102931 13/50 current_auc = 0.7841269841269841
User 102931 AUC after training: 0.7825396825396825
User 102931 does not improve AUC. Reverting changes.
Training on augumented user 12797 14/50 current_auc = 0.7841269841269841
User 12797 AUC after training: 0.7825396825396825
User 12797 does not improve AUC. Reverting changes.
Training on augumented user 104300 15/50 current_auc = 0.7841269841269841
User 104300 AUC after training: 0.7797619047619048
User 104300 does not improve AUC. Reverting changes.
Training on augumented user 59246 16/50 current_auc = 0.7841269841269841
User 59246 AUC after training: 0.7825396825396825
User 59246 does not improve AUC. Reverting changes.
Training on augumented user 131592 17/50 current_auc = 0.7841269841269841
User 131592 AUC after training: 0.7833333333333333
User 131592 does not improve AUC. Reverting changes.
Training on augumented user 8818 18/50 current_auc = 0.7841269841269841
User 8818 AUC after training: 0.7837301587301587
User 8818 does not improve AUC. Reverting changes.
Training on augumented user 114140 19/50 current_auc = 0.7841269841269841
User 114140 AUC after training: 0.7833333333333333
User 114140 does not improve AUC. Reverting changes.
Training on augumented user 93251 20/50 current_auc = 0.7841269841269841
User 93251 AUC after training: 0.7833333333333333
User 93251 does not improve AUC. Reverting changes.
Training on augumented user 29736 21/50 current_auc = 0.7841269841269841
User 29736 AUC after training: 0.7825396825396825
User 29736 does not improve AUC. Reverting changes.
Training on augumented user 103514 22/50 current_auc = 0.7841269841269841
User 103514 AUC after training: 0.7833333333333333
User 103514 does not improve AUC. Reverting changes.
Training on augumented user 91294 23/50 current_auc = 0.7841269841269841
User 91294 AUC after training: 0.7833333333333333
User 91294 does not improve AUC. Reverting changes.
Training on augumented user 9194 24/50 current_auc = 0.7841269841269841
User 9194 AUC after training: 0.7833333333333333
User 9194 does not improve AUC. Reverting changes.
Training on augumented user 98841 25/50 current_auc = 0.7841269841269841
User 98841 AUC after training: 0.7841269841269841
User 98841 does not improve AUC. Reverting changes.
Training on augumented user 124410 26/50 current_auc = 0.7841269841269841
User 124410 AUC after training: 0.7821428571428571
User 124410 does not improve AUC. Reverting changes.
Training on augumented user 12322 27/50 current_auc = 0.7841269841269841
User 12322 AUC after training: 0.7825396825396825
User 12322 does not improve AUC. Reverting changes.
Training on augumented user 106237 28/50 current_auc = 0.7841269841269841
User 106237 AUC after training: 0.7825396825396825
User 106237 does not improve AUC. Reverting changes.
Training on augumented user 137956 29/50 current_auc = 0.7841269841269841
User 137956 AUC after training: 0.7825396825396825
User 137956 does not improve AUC. Reverting changes.
Training on augumented user 103634 30/50 current_auc = 0.7841269841269841
User 103634 AUC after training: 0.7805555555555556
User 103634 does not improve AUC. Reverting changes.
Training on augumented user 99723 31/50 current_auc = 0.7841269841269841
User 99723 AUC after training: 0.7841269841269841
User 99723 does not improve AUC. Reverting changes.
Training on augumented user 77448 32/50 current_auc = 0.7841269841269841
User 77448 AUC after training: 0.7833333333333333
User 77448 does not improve AUC. Reverting changes.
Training on augumented user 116386 33/50 current_auc = 0.7841269841269841
User 116386 AUC after training: 0.7825396825396825
User 116386 does not improve AUC. Reverting changes.
Training on augumented user 33076 34/50 current_auc = 0.7841269841269841
User 33076 AUC after training: 0.7825396825396825
User 33076 does not improve AUC. Reverting changes.
Training on augumented user 72908 35/50 current_auc = 0.7841269841269841
User 72908 AUC after training: 0.7825396825396825
User 72908 does not improve AUC. Reverting changes.
Training on augumented user 113179 36/50 current_auc = 0.7841269841269841
User 113179 AUC after training: 0.7833333333333333
User 113179 does not improve AUC. Reverting changes.
Training on augumented user 71479 37/50 current_auc = 0.7841269841269841
User 71479 AUC after training: 0.7825396825396825
User 71479 does not improve AUC. Reverting changes.
Training on augumented user 120904 38/50 current_auc = 0.7841269841269841
User 120904 AUC after training: 0.7849206349206349
User 120904 improves AUC. Keeping the model.
Training on augumented user 18615 39/50 current_auc = 0.7849206349206349
User 18615 AUC after training: 0.7849206349206349
User 18615 does not improve AUC. Reverting changes.
Training on augumented user 132405 40/50 current_auc = 0.7849206349206349
User 132405 AUC after training: 0.7841269841269841
User 132405 does not improve AUC. Reverting changes.
Training on augumented user 12233 41/50 current_auc = 0.7849206349206349
User 12233 AUC after training: 0.7833333333333333
User 12233 does not improve AUC. Reverting changes.
Training on augumented user 102412 42/50 current_auc = 0.7849206349206349
User 102412 AUC after training: 0.7841269841269841
User 102412 does not improve AUC. Reverting changes.
Training on augumented user 37515 43/50 current_auc = 0.7849206349206349
User 37515 AUC after training: 0.7801587301587302
User 37515 does not improve AUC. Reverting changes.
Training on augumented user 136870 44/50 current_auc = 0.7849206349206349
User 136870 AUC after training: 0.7833333333333333
User 136870 does not improve AUC. Reverting changes.
Training on augumented user 52560 45/50 current_auc = 0.7849206349206349
User 52560 AUC after training: 0.7833333333333333
User 52560 does not improve AUC. Reverting changes.
Training on augumented user 16518 46/50 current_auc = 0.7849206349206349
User 16518 AUC after training: 0.7833333333333333
User 16518 does not improve AUC. Reverting changes.
Training on augumented user 22110 47/50 current_auc = 0.7849206349206349
User 22110 AUC after training: 0.7841269841269841
User 22110 does not improve AUC. Reverting changes.
Training on augumented user 133986 48/50 current_auc = 0.7849206349206349
User 133986 AUC after training: 0.7841269841269841
User 133986 does not improve AUC. Reverting changes.
Training on augumented user 43489 49/50 current_auc = 0.7849206349206349
User 43489 AUC after training: 0.7841269841269841
User 43489 does not improve AUC. Reverting changes.
[2024-12-02 19:54:55.081753] start test user 101515 242/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:54:55.519120] start test user 101515 242/567 recall augumented users by random, augumented_users = [89830, 107365, 53517, 28323, 54149, 91085, 78684, 111922, 5348, 32813, 100210, 45626, 17933, 20457, 135881, 91826, 31401, 132675, 86780, 70716, 24875, 53578, 114564, 106525, 45306, 111110, 111767, 47947, 53833, 134275, 119490, 87604, 96247, 107717, 17527, 30730, 104032, 87444, 28053, 74598, 72240, 134478, 129833, 11184, 134830, 22149, 96798, 123867, 105347, 12648]
[2024-12-02 19:54:55.534662] user = 101515 Cloud 242/567
[2024-12-02 19:54:55.545112] user = 101515 Local 242/567
[2024-12-02 19:54:55.623165] user = 101515 Local+ 242/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:54:57.893868] user = 101515 MPDA- 242/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5552825552825552
Training on augumented user 89830 0/50 current_auc = 0.5552825552825552
User 89830 AUC after training: 0.5577395577395577
User 89830 improves AUC. Keeping the model.
Training on augumented user 107365 1/50 current_auc = 0.5577395577395577
User 107365 AUC after training: 0.5601965601965602
User 107365 improves AUC. Keeping the model.
Training on augumented user 53517 2/50 current_auc = 0.5601965601965602
User 53517 AUC after training: 0.5601965601965602
User 53517 does not improve AUC. Reverting changes.
Training on augumented user 28323 3/50 current_auc = 0.5601965601965602
User 28323 AUC after training: 0.5577395577395577
User 28323 does not improve AUC. Reverting changes.
Training on augumented user 54149 4/50 current_auc = 0.5601965601965602
User 54149 AUC after training: 0.5552825552825552
User 54149 does not improve AUC. Reverting changes.
Training on augumented user 91085 5/50 current_auc = 0.5601965601965602
User 91085 AUC after training: 0.5601965601965602
User 91085 does not improve AUC. Reverting changes.
Training on augumented user 78684 6/50 current_auc = 0.5601965601965602
User 78684 AUC after training: 0.5601965601965602
User 78684 does not improve AUC. Reverting changes.
Training on augumented user 111922 7/50 current_auc = 0.5601965601965602
User 111922 AUC after training: 0.5601965601965602
User 111922 does not improve AUC. Reverting changes.
Training on augumented user 5348 8/50 current_auc = 0.5601965601965602
User 5348 AUC after training: 0.5565110565110565
User 5348 does not improve AUC. Reverting changes.
Training on augumented user 32813 9/50 current_auc = 0.5601965601965602
User 32813 AUC after training: 0.5601965601965602
User 32813 does not improve AUC. Reverting changes.
Training on augumented user 100210 10/50 current_auc = 0.5601965601965602
User 100210 AUC after training: 0.5577395577395577
User 100210 does not improve AUC. Reverting changes.
Training on augumented user 45626 11/50 current_auc = 0.5601965601965602
User 45626 AUC after training: 0.5552825552825552
User 45626 does not improve AUC. Reverting changes.
Training on augumented user 17933 12/50 current_auc = 0.5601965601965602
User 17933 AUC after training: 0.5601965601965602
User 17933 does not improve AUC. Reverting changes.
Training on augumented user 20457 13/50 current_auc = 0.5601965601965602
User 20457 AUC after training: 0.5601965601965602
User 20457 does not improve AUC. Reverting changes.
Training on augumented user 135881 14/50 current_auc = 0.5601965601965602
User 135881 AUC after training: 0.5601965601965602
User 135881 does not improve AUC. Reverting changes.
Training on augumented user 91826 15/50 current_auc = 0.5601965601965602
User 91826 AUC after training: 0.5577395577395577
User 91826 does not improve AUC. Reverting changes.
Training on augumented user 31401 16/50 current_auc = 0.5601965601965602
User 31401 AUC after training: 0.5601965601965602
User 31401 does not improve AUC. Reverting changes.
Training on augumented user 132675 17/50 current_auc = 0.5601965601965602
User 132675 AUC after training: 0.5601965601965602
User 132675 does not improve AUC. Reverting changes.
Training on augumented user 86780 18/50 current_auc = 0.5601965601965602
User 86780 AUC after training: 0.5626535626535627
User 86780 improves AUC. Keeping the model.
Training on augumented user 70716 19/50 current_auc = 0.5626535626535627
User 70716 AUC after training: 0.5577395577395577
User 70716 does not improve AUC. Reverting changes.
Training on augumented user 24875 20/50 current_auc = 0.5626535626535627
User 24875 AUC after training: 0.5601965601965602
User 24875 does not improve AUC. Reverting changes.
Training on augumented user 53578 21/50 current_auc = 0.5626535626535627
User 53578 AUC after training: 0.5626535626535627
User 53578 does not improve AUC. Reverting changes.
Training on augumented user 114564 22/50 current_auc = 0.5626535626535627
User 114564 AUC after training: 0.5626535626535627
User 114564 does not improve AUC. Reverting changes.
Training on augumented user 106525 23/50 current_auc = 0.5626535626535627
User 106525 AUC after training: 0.5626535626535627
User 106525 does not improve AUC. Reverting changes.
Training on augumented user 45306 24/50 current_auc = 0.5626535626535627
User 45306 AUC after training: 0.5601965601965602
User 45306 does not improve AUC. Reverting changes.
Training on augumented user 111110 25/50 current_auc = 0.5626535626535627
User 111110 AUC after training: 0.5626535626535627
User 111110 does not improve AUC. Reverting changes.
Training on augumented user 111767 26/50 current_auc = 0.5626535626535627
User 111767 AUC after training: 0.5626535626535627
User 111767 does not improve AUC. Reverting changes.
Training on augumented user 47947 27/50 current_auc = 0.5626535626535627
User 47947 AUC after training: 0.5626535626535627
User 47947 does not improve AUC. Reverting changes.
Training on augumented user 53833 28/50 current_auc = 0.5626535626535627
User 53833 AUC after training: 0.5626535626535627
User 53833 does not improve AUC. Reverting changes.
Training on augumented user 134275 29/50 current_auc = 0.5626535626535627
User 134275 AUC after training: 0.5626535626535627
User 134275 does not improve AUC. Reverting changes.
Training on augumented user 119490 30/50 current_auc = 0.5626535626535627
User 119490 AUC after training: 0.5601965601965602
User 119490 does not improve AUC. Reverting changes.
Training on augumented user 87604 31/50 current_auc = 0.5626535626535627
User 87604 AUC after training: 0.5638820638820639
User 87604 improves AUC. Keeping the model.
Training on augumented user 96247 32/50 current_auc = 0.5638820638820639
User 96247 AUC after training: 0.5638820638820639
User 96247 does not improve AUC. Reverting changes.
Training on augumented user 107717 33/50 current_auc = 0.5638820638820639
User 107717 AUC after training: 0.5663390663390664
User 107717 improves AUC. Keeping the model.
Training on augumented user 17527 34/50 current_auc = 0.5663390663390664
User 17527 AUC after training: 0.5565110565110565
User 17527 does not improve AUC. Reverting changes.
Training on augumented user 30730 35/50 current_auc = 0.5663390663390664
User 30730 AUC after training: 0.5663390663390664
User 30730 does not improve AUC. Reverting changes.
Training on augumented user 104032 36/50 current_auc = 0.5663390663390664
User 104032 AUC after training: 0.5663390663390664
User 104032 does not improve AUC. Reverting changes.
Training on augumented user 87444 37/50 current_auc = 0.5663390663390664
User 87444 AUC after training: 0.5663390663390664
User 87444 does not improve AUC. Reverting changes.
Training on augumented user 28053 38/50 current_auc = 0.5663390663390664
User 28053 AUC after training: 0.5663390663390664
User 28053 does not improve AUC. Reverting changes.
Training on augumented user 74598 39/50 current_auc = 0.5663390663390664
User 74598 AUC after training: 0.5663390663390664
User 74598 does not improve AUC. Reverting changes.
Training on augumented user 72240 40/50 current_auc = 0.5663390663390664
User 72240 AUC after training: 0.5663390663390664
User 72240 does not improve AUC. Reverting changes.
Training on augumented user 134478 41/50 current_auc = 0.5663390663390664
User 134478 AUC after training: 0.5663390663390664
User 134478 does not improve AUC. Reverting changes.
Training on augumented user 129833 42/50 current_auc = 0.5663390663390664
User 129833 AUC after training: 0.5663390663390664
User 129833 does not improve AUC. Reverting changes.
Training on augumented user 11184 43/50 current_auc = 0.5663390663390664
User 11184 AUC after training: 0.5601965601965602
User 11184 does not improve AUC. Reverting changes.
Training on augumented user 134830 44/50 current_auc = 0.5663390663390664
User 134830 AUC after training: 0.5638820638820639
User 134830 does not improve AUC. Reverting changes.
Training on augumented user 22149 45/50 current_auc = 0.5663390663390664
User 22149 AUC after training: 0.5601965601965602
User 22149 does not improve AUC. Reverting changes.
Training on augumented user 96798 46/50 current_auc = 0.5663390663390664
User 96798 AUC after training: 0.5663390663390664
User 96798 does not improve AUC. Reverting changes.
Training on augumented user 123867 47/50 current_auc = 0.5663390663390664
User 123867 AUC after training: 0.5663390663390664
User 123867 does not improve AUC. Reverting changes.
Training on augumented user 105347 48/50 current_auc = 0.5663390663390664
User 105347 AUC after training: 0.5663390663390664
User 105347 does not improve AUC. Reverting changes.
Training on augumented user 12648 49/50 current_auc = 0.5663390663390664
User 12648 AUC after training: 0.5663390663390664
User 12648 does not improve AUC. Reverting changes.
[2024-12-02 19:55:31.396851] start test user 101519 243/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:55:32.028383] start test user 101519 243/567 recall augumented users by random, augumented_users = [42581, 87578, 66658, 134459, 28418, 83751, 115511, 81452, 104050, 21111, 117807, 136079, 6007, 123013, 79275, 22424, 7266, 19400, 66909, 8861, 18791, 133031, 130790, 25841, 111942, 53440, 130399, 19277, 61947, 70365, 63921, 122650, 73536, 62938, 125435, 12225, 74579, 135310, 115850, 15870, 97650, 107394, 57343, 5882, 137405, 75225, 24801, 62160, 27994, 133710]
[2024-12-02 19:55:32.045846] user = 101519 Cloud 243/567
[2024-12-02 19:55:32.079436] user = 101519 Local 243/567
[2024-12-02 19:55:32.291675] user = 101519 Local+ 243/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:55:34.457893] user = 101519 MPDA- 243/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 42581 0/50 current_auc = 0.5
User 42581 AUC after training: 0.5
User 42581 does not improve AUC. Reverting changes.
Training on augumented user 87578 1/50 current_auc = 0.5
User 87578 AUC after training: 0.5
User 87578 does not improve AUC. Reverting changes.
Training on augumented user 66658 2/50 current_auc = 0.5
User 66658 AUC after training: 0.5
User 66658 does not improve AUC. Reverting changes.
Training on augumented user 134459 3/50 current_auc = 0.5
User 134459 AUC after training: 0.5
User 134459 does not improve AUC. Reverting changes.
Training on augumented user 28418 4/50 current_auc = 0.5
User 28418 AUC after training: 0.5
User 28418 does not improve AUC. Reverting changes.
Training on augumented user 83751 5/50 current_auc = 0.5
User 83751 AUC after training: 0.5
User 83751 does not improve AUC. Reverting changes.
Training on augumented user 115511 6/50 current_auc = 0.5
User 115511 AUC after training: 0.5
User 115511 does not improve AUC. Reverting changes.
Training on augumented user 81452 7/50 current_auc = 0.5
User 81452 AUC after training: 0.5
User 81452 does not improve AUC. Reverting changes.
Training on augumented user 104050 8/50 current_auc = 0.5
User 104050 AUC after training: 0.5
User 104050 does not improve AUC. Reverting changes.
Training on augumented user 21111 9/50 current_auc = 0.5
User 21111 AUC after training: 0.5
User 21111 does not improve AUC. Reverting changes.
Training on augumented user 117807 10/50 current_auc = 0.5
User 117807 AUC after training: 0.5
User 117807 does not improve AUC. Reverting changes.
Training on augumented user 136079 11/50 current_auc = 0.5
User 136079 AUC after training: 0.5
User 136079 does not improve AUC. Reverting changes.
Training on augumented user 6007 12/50 current_auc = 0.5
User 6007 AUC after training: 0.5
User 6007 does not improve AUC. Reverting changes.
Training on augumented user 123013 13/50 current_auc = 0.5
User 123013 AUC after training: 0.5
User 123013 does not improve AUC. Reverting changes.
Training on augumented user 79275 14/50 current_auc = 0.5
User 79275 AUC after training: 0.5
User 79275 does not improve AUC. Reverting changes.
Training on augumented user 22424 15/50 current_auc = 0.5
User 22424 AUC after training: 0.5
User 22424 does not improve AUC. Reverting changes.
Training on augumented user 7266 16/50 current_auc = 0.5
User 7266 AUC after training: 0.5
User 7266 does not improve AUC. Reverting changes.
Training on augumented user 19400 17/50 current_auc = 0.5
User 19400 AUC after training: 0.5
User 19400 does not improve AUC. Reverting changes.
Training on augumented user 66909 18/50 current_auc = 0.5
User 66909 AUC after training: 0.5
User 66909 does not improve AUC. Reverting changes.
Training on augumented user 8861 19/50 current_auc = 0.5
User 8861 AUC after training: 0.5
User 8861 does not improve AUC. Reverting changes.
Training on augumented user 18791 20/50 current_auc = 0.5
User 18791 AUC after training: 0.5
User 18791 does not improve AUC. Reverting changes.
Training on augumented user 133031 21/50 current_auc = 0.5
User 133031 AUC after training: 0.5
User 133031 does not improve AUC. Reverting changes.
Training on augumented user 130790 22/50 current_auc = 0.5
User 130790 AUC after training: 0.5
User 130790 does not improve AUC. Reverting changes.
Training on augumented user 25841 23/50 current_auc = 0.5
User 25841 AUC after training: 0.5
User 25841 does not improve AUC. Reverting changes.
Training on augumented user 111942 24/50 current_auc = 0.5
User 111942 AUC after training: 0.5
User 111942 does not improve AUC. Reverting changes.
Training on augumented user 53440 25/50 current_auc = 0.5
User 53440 AUC after training: 0.5
User 53440 does not improve AUC. Reverting changes.
Training on augumented user 130399 26/50 current_auc = 0.5
User 130399 AUC after training: 0.5
User 130399 does not improve AUC. Reverting changes.
Training on augumented user 19277 27/50 current_auc = 0.5
User 19277 AUC after training: 0.5
User 19277 does not improve AUC. Reverting changes.
Training on augumented user 61947 28/50 current_auc = 0.5
User 61947 AUC after training: 0.5
User 61947 does not improve AUC. Reverting changes.
Training on augumented user 70365 29/50 current_auc = 0.5
User 70365 AUC after training: 0.5
User 70365 does not improve AUC. Reverting changes.
Training on augumented user 63921 30/50 current_auc = 0.5
User 63921 AUC after training: 0.5
User 63921 does not improve AUC. Reverting changes.
Training on augumented user 122650 31/50 current_auc = 0.5
User 122650 AUC after training: 0.5
User 122650 does not improve AUC. Reverting changes.
Training on augumented user 73536 32/50 current_auc = 0.5
User 73536 AUC after training: 0.5
User 73536 does not improve AUC. Reverting changes.
Training on augumented user 62938 33/50 current_auc = 0.5
User 62938 AUC after training: 0.5
User 62938 does not improve AUC. Reverting changes.
Training on augumented user 125435 34/50 current_auc = 0.5
User 125435 AUC after training: 0.5
User 125435 does not improve AUC. Reverting changes.
Training on augumented user 12225 35/50 current_auc = 0.5
User 12225 AUC after training: 0.5
User 12225 does not improve AUC. Reverting changes.
Training on augumented user 74579 36/50 current_auc = 0.5
User 74579 AUC after training: 0.49074074074074076
User 74579 does not improve AUC. Reverting changes.
Training on augumented user 135310 37/50 current_auc = 0.5
User 135310 AUC after training: 0.5
User 135310 does not improve AUC. Reverting changes.
Training on augumented user 115850 38/50 current_auc = 0.5
User 115850 AUC after training: 0.5
User 115850 does not improve AUC. Reverting changes.
Training on augumented user 15870 39/50 current_auc = 0.5
User 15870 AUC after training: 0.5
User 15870 does not improve AUC. Reverting changes.
Training on augumented user 97650 40/50 current_auc = 0.5
User 97650 AUC after training: 0.5
User 97650 does not improve AUC. Reverting changes.
Training on augumented user 107394 41/50 current_auc = 0.5
User 107394 AUC after training: 0.5
User 107394 does not improve AUC. Reverting changes.
Training on augumented user 57343 42/50 current_auc = 0.5
User 57343 AUC after training: 0.5
User 57343 does not improve AUC. Reverting changes.
Training on augumented user 5882 43/50 current_auc = 0.5
User 5882 AUC after training: 0.5
User 5882 does not improve AUC. Reverting changes.
Training on augumented user 137405 44/50 current_auc = 0.5
User 137405 AUC after training: 0.5
User 137405 does not improve AUC. Reverting changes.
Training on augumented user 75225 45/50 current_auc = 0.5
User 75225 AUC after training: 0.5
User 75225 does not improve AUC. Reverting changes.
Training on augumented user 24801 46/50 current_auc = 0.5
User 24801 AUC after training: 0.5
User 24801 does not improve AUC. Reverting changes.
Training on augumented user 62160 47/50 current_auc = 0.5
User 62160 AUC after training: 0.5
User 62160 does not improve AUC. Reverting changes.
Training on augumented user 27994 48/50 current_auc = 0.5
User 27994 AUC after training: 0.5
User 27994 does not improve AUC. Reverting changes.
Training on augumented user 133710 49/50 current_auc = 0.5
User 133710 AUC after training: 0.5
User 133710 does not improve AUC. Reverting changes.
[2024-12-02 19:56:02.872909] start test user 101530 244/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:56:03.304740] start test user 101530 244/567 recall augumented users by random, augumented_users = [133492, 120710, 110211, 32219, 23281, 107910, 37290, 94822, 10549, 91496, 575, 27888, 87320, 12199, 333, 31628, 75348, 76522, 80685, 133483, 29375, 130870, 117615, 43453, 63764, 87772, 5161, 53061, 65496, 13330, 68397, 127936, 79665, 106834, 23000, 80969, 23185, 57622, 8112, 27285, 108149, 133261, 95137, 65216, 38285, 125169, 97586, 75100, 86117, 89554]
[2024-12-02 19:56:03.319979] user = 101530 Cloud 244/567
[2024-12-02 19:56:03.340250] user = 101530 Local 244/567
[2024-12-02 19:56:03.406379] user = 101530 Local+ 244/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:56:05.690122] user = 101530 MPDA- 244/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6097560975609757
Training on augumented user 133492 0/50 current_auc = 0.6097560975609757
User 133492 AUC after training: 0.6097560975609757
User 133492 does not improve AUC. Reverting changes.
Training on augumented user 120710 1/50 current_auc = 0.6097560975609757
User 120710 AUC after training: 0.6097560975609757
User 120710 does not improve AUC. Reverting changes.
Training on augumented user 110211 2/50 current_auc = 0.6097560975609757
User 110211 AUC after training: 0.5934959349593496
User 110211 does not improve AUC. Reverting changes.
Training on augumented user 32219 3/50 current_auc = 0.6097560975609757
User 32219 AUC after training: 0.6097560975609757
User 32219 does not improve AUC. Reverting changes.
Training on augumented user 23281 4/50 current_auc = 0.6097560975609757
User 23281 AUC after training: 0.6016260162601627
User 23281 does not improve AUC. Reverting changes.
Training on augumented user 107910 5/50 current_auc = 0.6097560975609757
User 107910 AUC after training: 0.6016260162601627
User 107910 does not improve AUC. Reverting changes.
Training on augumented user 37290 6/50 current_auc = 0.6097560975609757
User 37290 AUC after training: 0.6097560975609757
User 37290 does not improve AUC. Reverting changes.
Training on augumented user 94822 7/50 current_auc = 0.6097560975609757
User 94822 AUC after training: 0.6016260162601627
User 94822 does not improve AUC. Reverting changes.
Training on augumented user 10549 8/50 current_auc = 0.6097560975609757
User 10549 AUC after training: 0.6016260162601627
User 10549 does not improve AUC. Reverting changes.
Training on augumented user 91496 9/50 current_auc = 0.6097560975609757
User 91496 AUC after training: 0.6097560975609757
User 91496 does not improve AUC. Reverting changes.
Training on augumented user 575 10/50 current_auc = 0.6097560975609757
User 575 AUC after training: 0.6097560975609757
User 575 does not improve AUC. Reverting changes.
Training on augumented user 27888 11/50 current_auc = 0.6097560975609757
User 27888 AUC after training: 0.5934959349593496
User 27888 does not improve AUC. Reverting changes.
Training on augumented user 87320 12/50 current_auc = 0.6097560975609757
User 87320 AUC after training: 0.6097560975609757
User 87320 does not improve AUC. Reverting changes.
Training on augumented user 12199 13/50 current_auc = 0.6097560975609757
User 12199 AUC after training: 0.6016260162601627
User 12199 does not improve AUC. Reverting changes.
Training on augumented user 333 14/50 current_auc = 0.6097560975609757
User 333 AUC after training: 0.6097560975609757
User 333 does not improve AUC. Reverting changes.
Training on augumented user 31628 15/50 current_auc = 0.6097560975609757
User 31628 AUC after training: 0.5934959349593496
User 31628 does not improve AUC. Reverting changes.
Training on augumented user 75348 16/50 current_auc = 0.6097560975609757
User 75348 AUC after training: 0.6016260162601627
User 75348 does not improve AUC. Reverting changes.
Training on augumented user 76522 17/50 current_auc = 0.6097560975609757
User 76522 AUC after training: 0.6097560975609757
User 76522 does not improve AUC. Reverting changes.
Training on augumented user 80685 18/50 current_auc = 0.6097560975609757
User 80685 AUC after training: 0.6097560975609757
User 80685 does not improve AUC. Reverting changes.
Training on augumented user 133483 19/50 current_auc = 0.6097560975609757
User 133483 AUC after training: 0.6016260162601627
User 133483 does not improve AUC. Reverting changes.
Training on augumented user 29375 20/50 current_auc = 0.6097560975609757
User 29375 AUC after training: 0.6097560975609757
User 29375 does not improve AUC. Reverting changes.
Training on augumented user 130870 21/50 current_auc = 0.6097560975609757
User 130870 AUC after training: 0.6016260162601627
User 130870 does not improve AUC. Reverting changes.
Training on augumented user 117615 22/50 current_auc = 0.6097560975609757
User 117615 AUC after training: 0.6097560975609757
User 117615 does not improve AUC. Reverting changes.
Training on augumented user 43453 23/50 current_auc = 0.6097560975609757
User 43453 AUC after training: 0.6097560975609757
User 43453 does not improve AUC. Reverting changes.
Training on augumented user 63764 24/50 current_auc = 0.6097560975609757
User 63764 AUC after training: 0.6097560975609757
User 63764 does not improve AUC. Reverting changes.
Training on augumented user 87772 25/50 current_auc = 0.6097560975609757
User 87772 AUC after training: 0.6097560975609757
User 87772 does not improve AUC. Reverting changes.
Training on augumented user 5161 26/50 current_auc = 0.6097560975609757
User 5161 AUC after training: 0.5934959349593496
User 5161 does not improve AUC. Reverting changes.
Training on augumented user 53061 27/50 current_auc = 0.6097560975609757
User 53061 AUC after training: 0.6097560975609757
User 53061 does not improve AUC. Reverting changes.
Training on augumented user 65496 28/50 current_auc = 0.6097560975609757
User 65496 AUC after training: 0.5853658536585367
User 65496 does not improve AUC. Reverting changes.
Training on augumented user 13330 29/50 current_auc = 0.6097560975609757
User 13330 AUC after training: 0.6097560975609757
User 13330 does not improve AUC. Reverting changes.
Training on augumented user 68397 30/50 current_auc = 0.6097560975609757
User 68397 AUC after training: 0.6016260162601627
User 68397 does not improve AUC. Reverting changes.
Training on augumented user 127936 31/50 current_auc = 0.6097560975609757
User 127936 AUC after training: 0.6097560975609757
User 127936 does not improve AUC. Reverting changes.
Training on augumented user 79665 32/50 current_auc = 0.6097560975609757
User 79665 AUC after training: 0.6016260162601627
User 79665 does not improve AUC. Reverting changes.
Training on augumented user 106834 33/50 current_auc = 0.6097560975609757
User 106834 AUC after training: 0.6097560975609757
User 106834 does not improve AUC. Reverting changes.
Training on augumented user 23000 34/50 current_auc = 0.6097560975609757
User 23000 AUC after training: 0.6097560975609757
User 23000 does not improve AUC. Reverting changes.
Training on augumented user 80969 35/50 current_auc = 0.6097560975609757
User 80969 AUC after training: 0.6016260162601627
User 80969 does not improve AUC. Reverting changes.
Training on augumented user 23185 36/50 current_auc = 0.6097560975609757
User 23185 AUC after training: 0.6097560975609757
User 23185 does not improve AUC. Reverting changes.
Training on augumented user 57622 37/50 current_auc = 0.6097560975609757
User 57622 AUC after training: 0.6097560975609757
User 57622 does not improve AUC. Reverting changes.
Training on augumented user 8112 38/50 current_auc = 0.6097560975609757
User 8112 AUC after training: 0.5934959349593496
User 8112 does not improve AUC. Reverting changes.
Training on augumented user 27285 39/50 current_auc = 0.6097560975609757
User 27285 AUC after training: 0.6016260162601627
User 27285 does not improve AUC. Reverting changes.
Training on augumented user 108149 40/50 current_auc = 0.6097560975609757
User 108149 AUC after training: 0.6097560975609757
User 108149 does not improve AUC. Reverting changes.
Training on augumented user 133261 41/50 current_auc = 0.6097560975609757
User 133261 AUC after training: 0.6097560975609757
User 133261 does not improve AUC. Reverting changes.
Training on augumented user 95137 42/50 current_auc = 0.6097560975609757
User 95137 AUC after training: 0.6097560975609757
User 95137 does not improve AUC. Reverting changes.
Training on augumented user 65216 43/50 current_auc = 0.6097560975609757
User 65216 AUC after training: 0.6016260162601627
User 65216 does not improve AUC. Reverting changes.
Training on augumented user 38285 44/50 current_auc = 0.6097560975609757
User 38285 AUC after training: 0.6016260162601627
User 38285 does not improve AUC. Reverting changes.
Training on augumented user 125169 45/50 current_auc = 0.6097560975609757
User 125169 AUC after training: 0.6097560975609757
User 125169 does not improve AUC. Reverting changes.
Training on augumented user 97586 46/50 current_auc = 0.6097560975609757
User 97586 AUC after training: 0.6097560975609757
User 97586 does not improve AUC. Reverting changes.
Training on augumented user 75100 47/50 current_auc = 0.6097560975609757
User 75100 AUC after training: 0.6016260162601627
User 75100 does not improve AUC. Reverting changes.
Training on augumented user 86117 48/50 current_auc = 0.6097560975609757
User 86117 AUC after training: 0.6016260162601627
User 86117 does not improve AUC. Reverting changes.
Training on augumented user 89554 49/50 current_auc = 0.6097560975609757
User 89554 AUC after training: 0.6097560975609757
User 89554 does not improve AUC. Reverting changes.
[2024-12-02 19:56:37.409224] start test user 101555 245/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:56:38.104096] start test user 101555 245/567 recall augumented users by random, augumented_users = [74950, 134847, 93049, 60555, 77215, 7942, 44924, 73487, 53211, 53102, 53401, 108144, 21638, 11308, 11543, 28578, 88901, 120292, 101337, 18812, 122027, 84567, 31574, 47320, 38133, 80110, 8776, 24216, 104477, 4316, 124596, 137595, 73164, 110129, 14340, 22203, 2995, 41688, 129687, 130058, 123119, 1629, 82462, 35162, 85780, 32793, 99299, 49367, 108293, 119377]
[2024-12-02 19:56:38.132362] user = 101555 Cloud 245/567
[2024-12-02 19:56:38.171116] user = 101555 Local 245/567
[2024-12-02 19:56:38.257513] user = 101555 Local+ 245/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:56:40.730808] user = 101555 MPDA- 245/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.619949494949495
Training on augumented user 74950 0/50 current_auc = 0.619949494949495
User 74950 AUC after training: 0.6186868686868686
User 74950 does not improve AUC. Reverting changes.
Training on augumented user 134847 1/50 current_auc = 0.619949494949495
User 134847 AUC after training: 0.6212121212121213
User 134847 improves AUC. Keeping the model.
Training on augumented user 93049 2/50 current_auc = 0.6212121212121213
User 93049 AUC after training: 0.6224747474747475
User 93049 improves AUC. Keeping the model.
Training on augumented user 60555 3/50 current_auc = 0.6224747474747475
User 60555 AUC after training: 0.6212121212121213
User 60555 does not improve AUC. Reverting changes.
Training on augumented user 77215 4/50 current_auc = 0.6224747474747475
User 77215 AUC after training: 0.6224747474747475
User 77215 does not improve AUC. Reverting changes.
Training on augumented user 7942 5/50 current_auc = 0.6224747474747475
User 7942 AUC after training: 0.619949494949495
User 7942 does not improve AUC. Reverting changes.
Training on augumented user 44924 6/50 current_auc = 0.6224747474747475
User 44924 AUC after training: 0.6212121212121213
User 44924 does not improve AUC. Reverting changes.
Training on augumented user 73487 7/50 current_auc = 0.6224747474747475
User 73487 AUC after training: 0.6224747474747475
User 73487 does not improve AUC. Reverting changes.
Training on augumented user 53211 8/50 current_auc = 0.6224747474747475
User 53211 AUC after training: 0.6224747474747475
User 53211 does not improve AUC. Reverting changes.
Training on augumented user 53102 9/50 current_auc = 0.6224747474747475
User 53102 AUC after training: 0.6212121212121213
User 53102 does not improve AUC. Reverting changes.
Training on augumented user 53401 10/50 current_auc = 0.6224747474747475
User 53401 AUC after training: 0.6224747474747475
User 53401 does not improve AUC. Reverting changes.
Training on augumented user 108144 11/50 current_auc = 0.6224747474747475
User 108144 AUC after training: 0.619949494949495
User 108144 does not improve AUC. Reverting changes.
Training on augumented user 21638 12/50 current_auc = 0.6224747474747475
User 21638 AUC after training: 0.6224747474747475
User 21638 does not improve AUC. Reverting changes.
Training on augumented user 11308 13/50 current_auc = 0.6224747474747475
User 11308 AUC after training: 0.6224747474747475
User 11308 does not improve AUC. Reverting changes.
Training on augumented user 11543 14/50 current_auc = 0.6224747474747475
User 11543 AUC after training: 0.6212121212121213
User 11543 does not improve AUC. Reverting changes.
Training on augumented user 28578 15/50 current_auc = 0.6224747474747475
User 28578 AUC after training: 0.6224747474747475
User 28578 does not improve AUC. Reverting changes.
Training on augumented user 88901 16/50 current_auc = 0.6224747474747475
User 88901 AUC after training: 0.619949494949495
User 88901 does not improve AUC. Reverting changes.
Training on augumented user 120292 17/50 current_auc = 0.6224747474747475
User 120292 AUC after training: 0.6224747474747475
User 120292 does not improve AUC. Reverting changes.
Training on augumented user 101337 18/50 current_auc = 0.6224747474747475
User 101337 AUC after training: 0.625
User 101337 improves AUC. Keeping the model.
Training on augumented user 18812 19/50 current_auc = 0.625
User 18812 AUC after training: 0.6237373737373737
User 18812 does not improve AUC. Reverting changes.
Training on augumented user 122027 20/50 current_auc = 0.625
User 122027 AUC after training: 0.6224747474747475
User 122027 does not improve AUC. Reverting changes.
Training on augumented user 84567 21/50 current_auc = 0.625
User 84567 AUC after training: 0.6237373737373738
User 84567 does not improve AUC. Reverting changes.
Training on augumented user 31574 22/50 current_auc = 0.625
User 31574 AUC after training: 0.6224747474747475
User 31574 does not improve AUC. Reverting changes.
Training on augumented user 47320 23/50 current_auc = 0.625
User 47320 AUC after training: 0.625
User 47320 does not improve AUC. Reverting changes.
Training on augumented user 38133 24/50 current_auc = 0.625
User 38133 AUC after training: 0.6237373737373738
User 38133 does not improve AUC. Reverting changes.
Training on augumented user 80110 25/50 current_auc = 0.625
User 80110 AUC after training: 0.6224747474747475
User 80110 does not improve AUC. Reverting changes.
Training on augumented user 8776 26/50 current_auc = 0.625
User 8776 AUC after training: 0.625
User 8776 does not improve AUC. Reverting changes.
Training on augumented user 24216 27/50 current_auc = 0.625
User 24216 AUC after training: 0.6237373737373738
User 24216 does not improve AUC. Reverting changes.
Training on augumented user 104477 28/50 current_auc = 0.625
User 104477 AUC after training: 0.6237373737373738
User 104477 does not improve AUC. Reverting changes.
Training on augumented user 4316 29/50 current_auc = 0.625
User 4316 AUC after training: 0.6237373737373738
User 4316 does not improve AUC. Reverting changes.
Training on augumented user 124596 30/50 current_auc = 0.625
User 124596 AUC after training: 0.625
User 124596 does not improve AUC. Reverting changes.
Training on augumented user 137595 31/50 current_auc = 0.625
User 137595 AUC after training: 0.6237373737373738
User 137595 does not improve AUC. Reverting changes.
Training on augumented user 73164 32/50 current_auc = 0.625
User 73164 AUC after training: 0.6237373737373738
User 73164 does not improve AUC. Reverting changes.
Training on augumented user 110129 33/50 current_auc = 0.625
User 110129 AUC after training: 0.6224747474747475
User 110129 does not improve AUC. Reverting changes.
Training on augumented user 14340 34/50 current_auc = 0.625
User 14340 AUC after training: 0.625
User 14340 does not improve AUC. Reverting changes.
Training on augumented user 22203 35/50 current_auc = 0.625
User 22203 AUC after training: 0.6237373737373738
User 22203 does not improve AUC. Reverting changes.
Training on augumented user 2995 36/50 current_auc = 0.625
User 2995 AUC after training: 0.6224747474747475
User 2995 does not improve AUC. Reverting changes.
Training on augumented user 41688 37/50 current_auc = 0.625
User 41688 AUC after training: 0.625
User 41688 does not improve AUC. Reverting changes.
Training on augumented user 129687 38/50 current_auc = 0.625
User 129687 AUC after training: 0.625
User 129687 does not improve AUC. Reverting changes.
Training on augumented user 130058 39/50 current_auc = 0.625
User 130058 AUC after training: 0.625
User 130058 does not improve AUC. Reverting changes.
Training on augumented user 123119 40/50 current_auc = 0.625
User 123119 AUC after training: 0.6237373737373738
User 123119 does not improve AUC. Reverting changes.
Training on augumented user 1629 41/50 current_auc = 0.625
User 1629 AUC after training: 0.625
User 1629 does not improve AUC. Reverting changes.
Training on augumented user 82462 42/50 current_auc = 0.625
User 82462 AUC after training: 0.625
User 82462 does not improve AUC. Reverting changes.
Training on augumented user 35162 43/50 current_auc = 0.625
User 35162 AUC after training: 0.6237373737373737
User 35162 does not improve AUC. Reverting changes.
Training on augumented user 85780 44/50 current_auc = 0.625
User 85780 AUC after training: 0.625
User 85780 does not improve AUC. Reverting changes.
Training on augumented user 32793 45/50 current_auc = 0.625
User 32793 AUC after training: 0.625
User 32793 does not improve AUC. Reverting changes.
Training on augumented user 99299 46/50 current_auc = 0.625
User 99299 AUC after training: 0.6237373737373738
User 99299 does not improve AUC. Reverting changes.
Training on augumented user 49367 47/50 current_auc = 0.625
User 49367 AUC after training: 0.6224747474747475
User 49367 does not improve AUC. Reverting changes.
Training on augumented user 108293 48/50 current_auc = 0.625
User 108293 AUC after training: 0.625
User 108293 does not improve AUC. Reverting changes.
Training on augumented user 119377 49/50 current_auc = 0.625
User 119377 AUC after training: 0.625
User 119377 does not improve AUC. Reverting changes.
[2024-12-02 19:57:11.738609] start test user 101566 246/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:57:12.463752] start test user 101566 246/567 recall augumented users by random, augumented_users = [36699, 2575, 22794, 61639, 103333, 101542, 4297, 109845, 75099, 81378, 29965, 29645, 60358, 118964, 128271, 100062, 79885, 111037, 66792, 7157, 121498, 54416, 61569, 102214, 24661, 58106, 52503, 44270, 89252, 93483, 73156, 11173, 7259, 101845, 97070, 57065, 124791, 8407, 123893, 107559, 73732, 75049, 125826, 131052, 134778, 113506, 4636, 20572, 57557, 127350]
[2024-12-02 19:57:12.478717] user = 101566 Cloud 246/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:57:12.496608] user = 101566 Local 246/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:57:12.521952] user = 101566 Local+ 246/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:57:15.539870] user = 101566 MPDA- 246/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 36699 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36699 AUC after training: 0.5
User 36699 does not improve AUC. Reverting changes.
Training on augumented user 2575 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2575 AUC after training: 0.5
User 2575 does not improve AUC. Reverting changes.
Training on augumented user 22794 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22794 AUC after training: 0.5
User 22794 does not improve AUC. Reverting changes.
Training on augumented user 61639 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61639 AUC after training: 0.5
User 61639 does not improve AUC. Reverting changes.
Training on augumented user 103333 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103333 AUC after training: 0.5
User 103333 does not improve AUC. Reverting changes.
Training on augumented user 101542 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101542 AUC after training: 0.5
User 101542 does not improve AUC. Reverting changes.
Training on augumented user 4297 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4297 AUC after training: 0.5
User 4297 does not improve AUC. Reverting changes.
Training on augumented user 109845 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109845 AUC after training: 0.5
User 109845 does not improve AUC. Reverting changes.
Training on augumented user 75099 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75099 AUC after training: 0.5
User 75099 does not improve AUC. Reverting changes.
Training on augumented user 81378 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81378 AUC after training: 0.5
User 81378 does not improve AUC. Reverting changes.
Training on augumented user 29965 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29965 AUC after training: 0.5
User 29965 does not improve AUC. Reverting changes.
Training on augumented user 29645 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29645 AUC after training: 0.5
User 29645 does not improve AUC. Reverting changes.
Training on augumented user 60358 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60358 AUC after training: 0.5
User 60358 does not improve AUC. Reverting changes.
Training on augumented user 118964 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118964 AUC after training: 0.5
User 118964 does not improve AUC. Reverting changes.
Training on augumented user 128271 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128271 AUC after training: 0.5
User 128271 does not improve AUC. Reverting changes.
Training on augumented user 100062 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100062 AUC after training: 0.5
User 100062 does not improve AUC. Reverting changes.
Training on augumented user 79885 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79885 AUC after training: 0.5
User 79885 does not improve AUC. Reverting changes.
Training on augumented user 111037 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111037 AUC after training: 0.5
User 111037 does not improve AUC. Reverting changes.
Training on augumented user 66792 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66792 AUC after training: 0.5
User 66792 does not improve AUC. Reverting changes.
Training on augumented user 7157 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7157 AUC after training: 0.5
User 7157 does not improve AUC. Reverting changes.
Training on augumented user 121498 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121498 AUC after training: 0.5
User 121498 does not improve AUC. Reverting changes.
Training on augumented user 54416 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54416 AUC after training: 0.5
User 54416 does not improve AUC. Reverting changes.
Training on augumented user 61569 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61569 AUC after training: 0.5
User 61569 does not improve AUC. Reverting changes.
Training on augumented user 102214 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102214 AUC after training: 0.5
User 102214 does not improve AUC. Reverting changes.
Training on augumented user 24661 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24661 AUC after training: 0.5
User 24661 does not improve AUC. Reverting changes.
Training on augumented user 58106 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58106 AUC after training: 0.5
User 58106 does not improve AUC. Reverting changes.
Training on augumented user 52503 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 52503 AUC after training: 0.5
User 52503 does not improve AUC. Reverting changes.
Training on augumented user 44270 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44270 AUC after training: 0.5
User 44270 does not improve AUC. Reverting changes.
Training on augumented user 89252 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89252 AUC after training: 0.5
User 89252 does not improve AUC. Reverting changes.
Training on augumented user 93483 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93483 AUC after training: 0.5
User 93483 does not improve AUC. Reverting changes.
Training on augumented user 73156 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73156 AUC after training: 0.5
User 73156 does not improve AUC. Reverting changes.
Training on augumented user 11173 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11173 AUC after training: 0.5
User 11173 does not improve AUC. Reverting changes.
Training on augumented user 7259 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7259 AUC after training: 0.5
User 7259 does not improve AUC. Reverting changes.
Training on augumented user 101845 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101845 AUC after training: 0.5
User 101845 does not improve AUC. Reverting changes.
Training on augumented user 97070 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97070 AUC after training: 0.5
User 97070 does not improve AUC. Reverting changes.
Training on augumented user 57065 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57065 AUC after training: 0.5
User 57065 does not improve AUC. Reverting changes.
Training on augumented user 124791 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124791 AUC after training: 0.5
User 124791 does not improve AUC. Reverting changes.
Training on augumented user 8407 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8407 AUC after training: 0.5
User 8407 does not improve AUC. Reverting changes.
Training on augumented user 123893 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123893 AUC after training: 0.5
User 123893 does not improve AUC. Reverting changes.
Training on augumented user 107559 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107559 AUC after training: 0.5
User 107559 does not improve AUC. Reverting changes.
Training on augumented user 73732 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73732 AUC after training: 0.5
User 73732 does not improve AUC. Reverting changes.
Training on augumented user 75049 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75049 AUC after training: 0.5
User 75049 does not improve AUC. Reverting changes.
Training on augumented user 125826 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 125826 AUC after training: 0.5
User 125826 does not improve AUC. Reverting changes.
Training on augumented user 131052 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131052 AUC after training: 0.5
User 131052 does not improve AUC. Reverting changes.
Training on augumented user 134778 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134778 AUC after training: 0.5
User 134778 does not improve AUC. Reverting changes.
Training on augumented user 113506 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113506 AUC after training: 0.5
User 113506 does not improve AUC. Reverting changes.
Training on augumented user 4636 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4636 AUC after training: 0.5
User 4636 does not improve AUC. Reverting changes.
Training on augumented user 20572 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20572 AUC after training: 0.5
User 20572 does not improve AUC. Reverting changes.
Training on augumented user 57557 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57557 AUC after training: 0.5
User 57557 does not improve AUC. Reverting changes.
Training on augumented user 127350 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127350 AUC after training: 0.5
User 127350 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 19:57:46.237226] start test user 101611 247/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:57:46.875991] start test user 101611 247/567 recall augumented users by random, augumented_users = [137954, 77819, 9381, 38059, 82803, 3462, 32668, 93015, 54533, 13934, 127067, 90996, 119903, 40140, 18044, 90587, 103678, 112932, 85454, 5897, 22502, 27802, 78507, 134976, 134303, 28988, 94478, 92656, 67310, 89719, 16127, 101500, 103453, 76336, 54885, 38171, 64069, 37446, 23830, 134728, 55146, 89927, 85982, 34174, 114952, 77156, 113532, 89276, 67790, 18702]
[2024-12-02 19:57:46.906467] user = 101611 Cloud 247/567
[2024-12-02 19:57:46.942445] user = 101611 Local 247/567
[2024-12-02 19:57:47.069360] user = 101611 Local+ 247/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:57:49.827487] user = 101611 MPDA- 247/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6790633608815427
Training on augumented user 137954 0/50 current_auc = 0.6790633608815427
User 137954 AUC after training: 0.678374655647383
User 137954 does not improve AUC. Reverting changes.
Training on augumented user 77819 1/50 current_auc = 0.6790633608815427
User 77819 AUC after training: 0.6787190082644629
User 77819 does not improve AUC. Reverting changes.
Training on augumented user 9381 2/50 current_auc = 0.6790633608815427
User 9381 AUC after training: 0.6797520661157025
User 9381 improves AUC. Keeping the model.
Training on augumented user 38059 3/50 current_auc = 0.6797520661157025
User 38059 AUC after training: 0.6804407713498623
User 38059 improves AUC. Keeping the model.
Training on augumented user 82803 4/50 current_auc = 0.6804407713498623
User 82803 AUC after training: 0.6835399449035813
User 82803 improves AUC. Keeping the model.
Training on augumented user 3462 5/50 current_auc = 0.6835399449035813
User 3462 AUC after training: 0.6831955922865014
User 3462 does not improve AUC. Reverting changes.
Training on augumented user 32668 6/50 current_auc = 0.6835399449035813
User 32668 AUC after training: 0.6831955922865014
User 32668 does not improve AUC. Reverting changes.
Training on augumented user 93015 7/50 current_auc = 0.6835399449035813
User 93015 AUC after training: 0.6835399449035813
User 93015 does not improve AUC. Reverting changes.
Training on augumented user 54533 8/50 current_auc = 0.6835399449035813
User 54533 AUC after training: 0.6828512396694215
User 54533 does not improve AUC. Reverting changes.
Training on augumented user 13934 9/50 current_auc = 0.6835399449035813
User 13934 AUC after training: 0.6831955922865014
User 13934 does not improve AUC. Reverting changes.
Training on augumented user 127067 10/50 current_auc = 0.6835399449035813
User 127067 AUC after training: 0.6821625344352618
User 127067 does not improve AUC. Reverting changes.
Training on augumented user 90996 11/50 current_auc = 0.6835399449035813
User 90996 AUC after training: 0.6825068870523416
User 90996 does not improve AUC. Reverting changes.
Training on augumented user 119903 12/50 current_auc = 0.6835399449035813
User 119903 AUC after training: 0.684228650137741
User 119903 improves AUC. Keeping the model.
Training on augumented user 40140 13/50 current_auc = 0.684228650137741
User 40140 AUC after training: 0.6838842975206612
User 40140 does not improve AUC. Reverting changes.
Training on augumented user 18044 14/50 current_auc = 0.684228650137741
User 18044 AUC after training: 0.6825068870523416
User 18044 does not improve AUC. Reverting changes.
Training on augumented user 90587 15/50 current_auc = 0.684228650137741
User 90587 AUC after training: 0.6835399449035813
User 90587 does not improve AUC. Reverting changes.
Training on augumented user 103678 16/50 current_auc = 0.684228650137741
User 103678 AUC after training: 0.6835399449035813
User 103678 does not improve AUC. Reverting changes.
Training on augumented user 112932 17/50 current_auc = 0.684228650137741
User 112932 AUC after training: 0.6831955922865014
User 112932 does not improve AUC. Reverting changes.
Training on augumented user 85454 18/50 current_auc = 0.684228650137741
User 85454 AUC after training: 0.6831955922865014
User 85454 does not improve AUC. Reverting changes.
Training on augumented user 5897 19/50 current_auc = 0.684228650137741
User 5897 AUC after training: 0.6821625344352618
User 5897 does not improve AUC. Reverting changes.
Training on augumented user 22502 20/50 current_auc = 0.684228650137741
User 22502 AUC after training: 0.6828512396694215
User 22502 does not improve AUC. Reverting changes.
Training on augumented user 27802 21/50 current_auc = 0.684228650137741
User 27802 AUC after training: 0.6838842975206612
User 27802 does not improve AUC. Reverting changes.
Training on augumented user 78507 22/50 current_auc = 0.684228650137741
User 78507 AUC after training: 0.6835399449035813
User 78507 does not improve AUC. Reverting changes.
Training on augumented user 134976 23/50 current_auc = 0.684228650137741
User 134976 AUC after training: 0.684228650137741
User 134976 does not improve AUC. Reverting changes.
Training on augumented user 134303 24/50 current_auc = 0.684228650137741
User 134303 AUC after training: 0.6838842975206612
User 134303 does not improve AUC. Reverting changes.
Training on augumented user 28988 25/50 current_auc = 0.684228650137741
User 28988 AUC after training: 0.6838842975206612
User 28988 does not improve AUC. Reverting changes.
Training on augumented user 94478 26/50 current_auc = 0.684228650137741
User 94478 AUC after training: 0.6828512396694215
User 94478 does not improve AUC. Reverting changes.
Training on augumented user 92656 27/50 current_auc = 0.684228650137741
User 92656 AUC after training: 0.684228650137741
User 92656 does not improve AUC. Reverting changes.
Training on augumented user 67310 28/50 current_auc = 0.684228650137741
User 67310 AUC after training: 0.6835399449035813
User 67310 does not improve AUC. Reverting changes.
Training on augumented user 89719 29/50 current_auc = 0.684228650137741
User 89719 AUC after training: 0.6835399449035813
User 89719 does not improve AUC. Reverting changes.
Training on augumented user 16127 30/50 current_auc = 0.684228650137741
User 16127 AUC after training: 0.6828512396694215
User 16127 does not improve AUC. Reverting changes.
Training on augumented user 101500 31/50 current_auc = 0.684228650137741
User 101500 AUC after training: 0.6835399449035813
User 101500 does not improve AUC. Reverting changes.
Training on augumented user 103453 32/50 current_auc = 0.684228650137741
User 103453 AUC after training: 0.684228650137741
User 103453 does not improve AUC. Reverting changes.
Training on augumented user 76336 33/50 current_auc = 0.684228650137741
User 76336 AUC after training: 0.6831955922865014
User 76336 does not improve AUC. Reverting changes.
Training on augumented user 54885 34/50 current_auc = 0.684228650137741
User 54885 AUC after training: 0.6828512396694215
User 54885 does not improve AUC. Reverting changes.
Training on augumented user 38171 35/50 current_auc = 0.684228650137741
User 38171 AUC after training: 0.6831955922865014
User 38171 does not improve AUC. Reverting changes.
Training on augumented user 64069 36/50 current_auc = 0.684228650137741
User 64069 AUC after training: 0.6838842975206612
User 64069 does not improve AUC. Reverting changes.
Training on augumented user 37446 37/50 current_auc = 0.684228650137741
User 37446 AUC after training: 0.684228650137741
User 37446 does not improve AUC. Reverting changes.
Training on augumented user 23830 38/50 current_auc = 0.684228650137741
User 23830 AUC after training: 0.6831955922865014
User 23830 does not improve AUC. Reverting changes.
Training on augumented user 134728 39/50 current_auc = 0.684228650137741
User 134728 AUC after training: 0.6828512396694215
User 134728 does not improve AUC. Reverting changes.
Training on augumented user 55146 40/50 current_auc = 0.684228650137741
User 55146 AUC after training: 0.6831955922865014
User 55146 does not improve AUC. Reverting changes.
Training on augumented user 89927 41/50 current_auc = 0.684228650137741
User 89927 AUC after training: 0.6835399449035813
User 89927 does not improve AUC. Reverting changes.
Training on augumented user 85982 42/50 current_auc = 0.684228650137741
User 85982 AUC after training: 0.6838842975206612
User 85982 does not improve AUC. Reverting changes.
Training on augumented user 34174 43/50 current_auc = 0.684228650137741
User 34174 AUC after training: 0.6825068870523416
User 34174 does not improve AUC. Reverting changes.
Training on augumented user 114952 44/50 current_auc = 0.684228650137741
User 114952 AUC after training: 0.6838842975206612
User 114952 does not improve AUC. Reverting changes.
Training on augumented user 77156 45/50 current_auc = 0.684228650137741
User 77156 AUC after training: 0.6845730027548209
User 77156 improves AUC. Keeping the model.
Training on augumented user 113532 46/50 current_auc = 0.6845730027548209
User 113532 AUC after training: 0.6835399449035813
User 113532 does not improve AUC. Reverting changes.
Training on augumented user 89276 47/50 current_auc = 0.6845730027548209
User 89276 AUC after training: 0.6828512396694215
User 89276 does not improve AUC. Reverting changes.
Training on augumented user 67790 48/50 current_auc = 0.6845730027548209
User 67790 AUC after training: 0.684228650137741
User 67790 does not improve AUC. Reverting changes.
Training on augumented user 18702 49/50 current_auc = 0.6845730027548209
User 18702 AUC after training: 0.6838842975206612
User 18702 does not improve AUC. Reverting changes.
[2024-12-02 19:58:22.718605] start test user 101670 248/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:58:23.503230] start test user 101670 248/567 recall augumented users by random, augumented_users = [68425, 95848, 112690, 125703, 126419, 13860, 39794, 19415, 135316, 130792, 40052, 126875, 93659, 97775, 101089, 117858, 20654, 91165, 55674, 128055, 74091, 117093, 43636, 46306, 1131, 41468, 10836, 2840, 136223, 70129, 52263, 77452, 1255, 59453, 34888, 116693, 80962, 36210, 22526, 37327, 69900, 56767, 100543, 46814, 18683, 31738, 135748, 80440, 62299, 648]
[2024-12-02 19:58:23.519493] user = 101670 Cloud 248/567
[2024-12-02 19:58:23.529014] user = 101670 Local 248/567
[2024-12-02 19:58:23.638404] user = 101670 Local+ 248/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:58:26.623993] user = 101670 MPDA- 248/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5630252100840336
Training on augumented user 68425 0/50 current_auc = 0.5630252100840336
User 68425 AUC after training: 0.5546218487394958
User 68425 does not improve AUC. Reverting changes.
Training on augumented user 95848 1/50 current_auc = 0.5630252100840336
User 95848 AUC after training: 0.5630252100840336
User 95848 does not improve AUC. Reverting changes.
Training on augumented user 112690 2/50 current_auc = 0.5630252100840336
User 112690 AUC after training: 0.5798319327731093
User 112690 improves AUC. Keeping the model.
Training on augumented user 125703 3/50 current_auc = 0.5798319327731093
User 125703 AUC after training: 0.5630252100840336
User 125703 does not improve AUC. Reverting changes.
Training on augumented user 126419 4/50 current_auc = 0.5798319327731093
User 126419 AUC after training: 0.5798319327731093
User 126419 does not improve AUC. Reverting changes.
Training on augumented user 13860 5/50 current_auc = 0.5798319327731093
User 13860 AUC after training: 0.5714285714285715
User 13860 does not improve AUC. Reverting changes.
Training on augumented user 39794 6/50 current_auc = 0.5798319327731093
User 39794 AUC after training: 0.5798319327731093
User 39794 does not improve AUC. Reverting changes.
Training on augumented user 19415 7/50 current_auc = 0.5798319327731093
User 19415 AUC after training: 0.5798319327731093
User 19415 does not improve AUC. Reverting changes.
Training on augumented user 135316 8/50 current_auc = 0.5798319327731093
User 135316 AUC after training: 0.5798319327731093
User 135316 does not improve AUC. Reverting changes.
Training on augumented user 130792 9/50 current_auc = 0.5798319327731093
User 130792 AUC after training: 0.5798319327731093
User 130792 does not improve AUC. Reverting changes.
Training on augumented user 40052 10/50 current_auc = 0.5798319327731093
User 40052 AUC after training: 0.5630252100840336
User 40052 does not improve AUC. Reverting changes.
Training on augumented user 126875 11/50 current_auc = 0.5798319327731093
User 126875 AUC after training: 0.5798319327731093
User 126875 does not improve AUC. Reverting changes.
Training on augumented user 93659 12/50 current_auc = 0.5798319327731093
User 93659 AUC after training: 0.5714285714285714
User 93659 does not improve AUC. Reverting changes.
Training on augumented user 97775 13/50 current_auc = 0.5798319327731093
User 97775 AUC after training: 0.5798319327731093
User 97775 does not improve AUC. Reverting changes.
Training on augumented user 101089 14/50 current_auc = 0.5798319327731093
User 101089 AUC after training: 0.5798319327731093
User 101089 does not improve AUC. Reverting changes.
Training on augumented user 117858 15/50 current_auc = 0.5798319327731093
User 117858 AUC after training: 0.5714285714285714
User 117858 does not improve AUC. Reverting changes.
Training on augumented user 20654 16/50 current_auc = 0.5798319327731093
User 20654 AUC after training: 0.5798319327731093
User 20654 does not improve AUC. Reverting changes.
Training on augumented user 91165 17/50 current_auc = 0.5798319327731093
User 91165 AUC after training: 0.5798319327731093
User 91165 does not improve AUC. Reverting changes.
Training on augumented user 55674 18/50 current_auc = 0.5798319327731093
User 55674 AUC after training: 0.5798319327731093
User 55674 does not improve AUC. Reverting changes.
Training on augumented user 128055 19/50 current_auc = 0.5798319327731093
User 128055 AUC after training: 0.5798319327731093
User 128055 does not improve AUC. Reverting changes.
Training on augumented user 74091 20/50 current_auc = 0.5798319327731093
User 74091 AUC after training: 0.5798319327731093
User 74091 does not improve AUC. Reverting changes.
Training on augumented user 117093 21/50 current_auc = 0.5798319327731093
User 117093 AUC after training: 0.5798319327731093
User 117093 does not improve AUC. Reverting changes.
Training on augumented user 43636 22/50 current_auc = 0.5798319327731093
User 43636 AUC after training: 0.5546218487394958
User 43636 does not improve AUC. Reverting changes.
Training on augumented user 46306 23/50 current_auc = 0.5798319327731093
User 46306 AUC after training: 0.5798319327731093
User 46306 does not improve AUC. Reverting changes.
Training on augumented user 1131 24/50 current_auc = 0.5798319327731093
User 1131 AUC after training: 0.5714285714285715
User 1131 does not improve AUC. Reverting changes.
Training on augumented user 41468 25/50 current_auc = 0.5798319327731093
User 41468 AUC after training: 0.5714285714285714
User 41468 does not improve AUC. Reverting changes.
Training on augumented user 10836 26/50 current_auc = 0.5798319327731093
User 10836 AUC after training: 0.5714285714285715
User 10836 does not improve AUC. Reverting changes.
Training on augumented user 2840 27/50 current_auc = 0.5798319327731093
User 2840 AUC after training: 0.5798319327731093
User 2840 does not improve AUC. Reverting changes.
Training on augumented user 136223 28/50 current_auc = 0.5798319327731093
User 136223 AUC after training: 0.5882352941176471
User 136223 improves AUC. Keeping the model.
Training on augumented user 70129 29/50 current_auc = 0.5882352941176471
User 70129 AUC after training: 0.5882352941176471
User 70129 does not improve AUC. Reverting changes.
Training on augumented user 52263 30/50 current_auc = 0.5882352941176471
User 52263 AUC after training: 0.5882352941176471
User 52263 does not improve AUC. Reverting changes.
Training on augumented user 77452 31/50 current_auc = 0.5882352941176471
User 77452 AUC after training: 0.5798319327731093
User 77452 does not improve AUC. Reverting changes.
Training on augumented user 1255 32/50 current_auc = 0.5882352941176471
User 1255 AUC after training: 0.5882352941176471
User 1255 does not improve AUC. Reverting changes.
Training on augumented user 59453 33/50 current_auc = 0.5882352941176471
User 59453 AUC after training: 0.5882352941176471
User 59453 does not improve AUC. Reverting changes.
Training on augumented user 34888 34/50 current_auc = 0.5882352941176471
User 34888 AUC after training: 0.5882352941176471
User 34888 does not improve AUC. Reverting changes.
Training on augumented user 116693 35/50 current_auc = 0.5882352941176471
User 116693 AUC after training: 0.5882352941176471
User 116693 does not improve AUC. Reverting changes.
Training on augumented user 80962 36/50 current_auc = 0.5882352941176471
User 80962 AUC after training: 0.5882352941176471
User 80962 does not improve AUC. Reverting changes.
Training on augumented user 36210 37/50 current_auc = 0.5882352941176471
User 36210 AUC after training: 0.5882352941176471
User 36210 does not improve AUC. Reverting changes.
Training on augumented user 22526 38/50 current_auc = 0.5882352941176471
User 22526 AUC after training: 0.5882352941176471
User 22526 does not improve AUC. Reverting changes.
Training on augumented user 37327 39/50 current_auc = 0.5882352941176471
User 37327 AUC after training: 0.5882352941176471
User 37327 does not improve AUC. Reverting changes.
Training on augumented user 69900 40/50 current_auc = 0.5882352941176471
User 69900 AUC after training: 0.5882352941176471
User 69900 does not improve AUC. Reverting changes.
Training on augumented user 56767 41/50 current_auc = 0.5882352941176471
User 56767 AUC after training: 0.5882352941176471
User 56767 does not improve AUC. Reverting changes.
Training on augumented user 100543 42/50 current_auc = 0.5882352941176471
User 100543 AUC after training: 0.5882352941176471
User 100543 does not improve AUC. Reverting changes.
Training on augumented user 46814 43/50 current_auc = 0.5882352941176471
User 46814 AUC after training: 0.5882352941176471
User 46814 does not improve AUC. Reverting changes.
Training on augumented user 18683 44/50 current_auc = 0.5882352941176471
User 18683 AUC after training: 0.5798319327731093
User 18683 does not improve AUC. Reverting changes.
Training on augumented user 31738 45/50 current_auc = 0.5882352941176471
User 31738 AUC after training: 0.5882352941176471
User 31738 does not improve AUC. Reverting changes.
Training on augumented user 135748 46/50 current_auc = 0.5882352941176471
User 135748 AUC after training: 0.5798319327731093
User 135748 does not improve AUC. Reverting changes.
Training on augumented user 80440 47/50 current_auc = 0.5882352941176471
User 80440 AUC after training: 0.5882352941176471
User 80440 does not improve AUC. Reverting changes.
Training on augumented user 62299 48/50 current_auc = 0.5882352941176471
User 62299 AUC after training: 0.5882352941176471
User 62299 does not improve AUC. Reverting changes.
Training on augumented user 648 49/50 current_auc = 0.5882352941176471
User 648 AUC after training: 0.5882352941176471
User 648 does not improve AUC. Reverting changes.
[2024-12-02 19:58:59.703924] start test user 101686 249/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:59:00.380838] start test user 101686 249/567 recall augumented users by random, augumented_users = [87234, 1307, 25138, 24158, 88732, 58090, 57835, 106559, 91568, 53837, 100352, 128560, 120136, 36690, 28852, 119211, 7729, 9385, 132315, 90872, 24412, 18429, 65955, 113047, 41101, 273, 195, 40108, 26827, 35877, 65319, 13229, 6298, 89675, 80633, 69421, 134, 7533, 103846, 94992, 35483, 117557, 130905, 73119, 34641, 11199, 122723, 33892, 80572, 66940]
[2024-12-02 19:59:00.424599] user = 101686 Cloud 249/567
[2024-12-02 19:59:00.436307] user = 101686 Local 249/567
[2024-12-02 19:59:00.481966] user = 101686 Local+ 249/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:59:03.695849] user = 101686 MPDA- 249/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.64
Training on augumented user 87234 0/50 current_auc = 0.64
User 87234 AUC after training: 0.64
User 87234 does not improve AUC. Reverting changes.
Training on augumented user 1307 1/50 current_auc = 0.64
User 1307 AUC after training: 0.64
User 1307 does not improve AUC. Reverting changes.
Training on augumented user 25138 2/50 current_auc = 0.64
User 25138 AUC after training: 0.64
User 25138 does not improve AUC. Reverting changes.
Training on augumented user 24158 3/50 current_auc = 0.64
User 24158 AUC after training: 0.6371428571428571
User 24158 does not improve AUC. Reverting changes.
Training on augumented user 88732 4/50 current_auc = 0.64
User 88732 AUC after training: 0.6457142857142857
User 88732 improves AUC. Keeping the model.
Training on augumented user 58090 5/50 current_auc = 0.6457142857142857
User 58090 AUC after training: 0.64
User 58090 does not improve AUC. Reverting changes.
Training on augumented user 57835 6/50 current_auc = 0.6457142857142857
User 57835 AUC after training: 0.6457142857142857
User 57835 does not improve AUC. Reverting changes.
Training on augumented user 106559 7/50 current_auc = 0.6457142857142857
User 106559 AUC after training: 0.6371428571428571
User 106559 does not improve AUC. Reverting changes.
Training on augumented user 91568 8/50 current_auc = 0.6457142857142857
User 91568 AUC after training: 0.6428571428571429
User 91568 does not improve AUC. Reverting changes.
Training on augumented user 53837 9/50 current_auc = 0.6457142857142857
User 53837 AUC after training: 0.6228571428571428
User 53837 does not improve AUC. Reverting changes.
Training on augumented user 100352 10/50 current_auc = 0.6457142857142857
User 100352 AUC after training: 0.6457142857142857
User 100352 does not improve AUC. Reverting changes.
Training on augumented user 128560 11/50 current_auc = 0.6457142857142857
User 128560 AUC after training: 0.64
User 128560 does not improve AUC. Reverting changes.
Training on augumented user 120136 12/50 current_auc = 0.6457142857142857
User 120136 AUC after training: 0.6457142857142857
User 120136 does not improve AUC. Reverting changes.
Training on augumented user 36690 13/50 current_auc = 0.6457142857142857
User 36690 AUC after training: 0.6457142857142857
User 36690 does not improve AUC. Reverting changes.
Training on augumented user 28852 14/50 current_auc = 0.6457142857142857
User 28852 AUC after training: 0.6314285714285715
User 28852 does not improve AUC. Reverting changes.
Training on augumented user 119211 15/50 current_auc = 0.6457142857142857
User 119211 AUC after training: 0.64
User 119211 does not improve AUC. Reverting changes.
Training on augumented user 7729 16/50 current_auc = 0.6457142857142857
User 7729 AUC after training: 0.6371428571428572
User 7729 does not improve AUC. Reverting changes.
Training on augumented user 9385 17/50 current_auc = 0.6457142857142857
User 9385 AUC after training: 0.64
User 9385 does not improve AUC. Reverting changes.
Training on augumented user 132315 18/50 current_auc = 0.6457142857142857
User 132315 AUC after training: 0.6371428571428572
User 132315 does not improve AUC. Reverting changes.
Training on augumented user 90872 19/50 current_auc = 0.6457142857142857
User 90872 AUC after training: 0.6428571428571428
User 90872 does not improve AUC. Reverting changes.
Training on augumented user 24412 20/50 current_auc = 0.6457142857142857
User 24412 AUC after training: 0.6428571428571428
User 24412 does not improve AUC. Reverting changes.
Training on augumented user 18429 21/50 current_auc = 0.6457142857142857
User 18429 AUC after training: 0.6428571428571429
User 18429 does not improve AUC. Reverting changes.
Training on augumented user 65955 22/50 current_auc = 0.6457142857142857
User 65955 AUC after training: 0.6428571428571428
User 65955 does not improve AUC. Reverting changes.
Training on augumented user 113047 23/50 current_auc = 0.6457142857142857
User 113047 AUC after training: 0.64
User 113047 does not improve AUC. Reverting changes.
Training on augumented user 41101 24/50 current_auc = 0.6457142857142857
User 41101 AUC after training: 0.6457142857142857
User 41101 does not improve AUC. Reverting changes.
Training on augumented user 273 25/50 current_auc = 0.6457142857142857
User 273 AUC after training: 0.64
User 273 does not improve AUC. Reverting changes.
Training on augumented user 195 26/50 current_auc = 0.6457142857142857
User 195 AUC after training: 0.6457142857142857
User 195 does not improve AUC. Reverting changes.
Training on augumented user 40108 27/50 current_auc = 0.6457142857142857
User 40108 AUC after training: 0.6485714285714286
User 40108 improves AUC. Keeping the model.
Training on augumented user 26827 28/50 current_auc = 0.6485714285714286
User 26827 AUC after training: 0.6485714285714286
User 26827 does not improve AUC. Reverting changes.
Training on augumented user 35877 29/50 current_auc = 0.6485714285714286
User 35877 AUC after training: 0.6457142857142857
User 35877 does not improve AUC. Reverting changes.
Training on augumented user 65319 30/50 current_auc = 0.6485714285714286
User 65319 AUC after training: 0.64
User 65319 does not improve AUC. Reverting changes.
Training on augumented user 13229 31/50 current_auc = 0.6485714285714286
User 13229 AUC after training: 0.6457142857142857
User 13229 does not improve AUC. Reverting changes.
Training on augumented user 6298 32/50 current_auc = 0.6485714285714286
User 6298 AUC after training: 0.6428571428571429
User 6298 does not improve AUC. Reverting changes.
Training on augumented user 89675 33/50 current_auc = 0.6485714285714286
User 89675 AUC after training: 0.6371428571428571
User 89675 does not improve AUC. Reverting changes.
Training on augumented user 80633 34/50 current_auc = 0.6485714285714286
User 80633 AUC after training: 0.6314285714285715
User 80633 does not improve AUC. Reverting changes.
Training on augumented user 69421 35/50 current_auc = 0.6485714285714286
User 69421 AUC after training: 0.6428571428571428
User 69421 does not improve AUC. Reverting changes.
Training on augumented user 134 36/50 current_auc = 0.6485714285714286
User 134 AUC after training: 0.64
User 134 does not improve AUC. Reverting changes.
Training on augumented user 7533 37/50 current_auc = 0.6485714285714286
User 7533 AUC after training: 0.6457142857142857
User 7533 does not improve AUC. Reverting changes.
Training on augumented user 103846 38/50 current_auc = 0.6485714285714286
User 103846 AUC after training: 0.6457142857142857
User 103846 does not improve AUC. Reverting changes.
Training on augumented user 94992 39/50 current_auc = 0.6485714285714286
User 94992 AUC after training: 0.6457142857142857
User 94992 does not improve AUC. Reverting changes.
Training on augumented user 35483 40/50 current_auc = 0.6485714285714286
User 35483 AUC after training: 0.6428571428571429
User 35483 does not improve AUC. Reverting changes.
Training on augumented user 117557 41/50 current_auc = 0.6485714285714286
User 117557 AUC after training: 0.6428571428571428
User 117557 does not improve AUC. Reverting changes.
Training on augumented user 130905 42/50 current_auc = 0.6485714285714286
User 130905 AUC after training: 0.6457142857142857
User 130905 does not improve AUC. Reverting changes.
Training on augumented user 73119 43/50 current_auc = 0.6485714285714286
User 73119 AUC after training: 0.6371428571428572
User 73119 does not improve AUC. Reverting changes.
Training on augumented user 34641 44/50 current_auc = 0.6485714285714286
User 34641 AUC after training: 0.6457142857142857
User 34641 does not improve AUC. Reverting changes.
Training on augumented user 11199 45/50 current_auc = 0.6485714285714286
User 11199 AUC after training: 0.6457142857142857
User 11199 does not improve AUC. Reverting changes.
Training on augumented user 122723 46/50 current_auc = 0.6485714285714286
User 122723 AUC after training: 0.6457142857142857
User 122723 does not improve AUC. Reverting changes.
Training on augumented user 33892 47/50 current_auc = 0.6485714285714286
User 33892 AUC after training: 0.6371428571428572
User 33892 does not improve AUC. Reverting changes.
Training on augumented user 80572 48/50 current_auc = 0.6485714285714286
User 80572 AUC after training: 0.64
User 80572 does not improve AUC. Reverting changes.
Training on augumented user 66940 49/50 current_auc = 0.6485714285714286
User 66940 AUC after training: 0.64
User 66940 does not improve AUC. Reverting changes.
[2024-12-02 19:59:36.501760] start test user 101690 250/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:59:37.157592] start test user 101690 250/567 recall augumented users by random, augumented_users = [66978, 45640, 93950, 39612, 102207, 39044, 4391, 62484, 4540, 81979, 26634, 53342, 93042, 135102, 308, 127858, 25200, 130263, 58768, 15582, 138433, 73844, 127107, 86907, 87841, 61168, 111020, 38688, 127272, 45284, 120890, 38353, 129101, 82729, 20794, 99200, 48688, 65718, 70596, 126119, 70180, 60490, 91782, 85799, 137634, 85262, 87523, 115349, 125776, 2607]
[2024-12-02 19:59:37.171815] user = 101690 Cloud 250/567
[2024-12-02 19:59:37.194666] user = 101690 Local 250/567
[2024-12-02 19:59:37.357727] user = 101690 Local+ 250/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 19:59:40.539066] user = 101690 MPDA- 250/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 66978 0/50 current_auc = 0.5
User 66978 AUC after training: 0.5
User 66978 does not improve AUC. Reverting changes.
Training on augumented user 45640 1/50 current_auc = 0.5
User 45640 AUC after training: 0.5
User 45640 does not improve AUC. Reverting changes.
Training on augumented user 93950 2/50 current_auc = 0.5
User 93950 AUC after training: 0.5
User 93950 does not improve AUC. Reverting changes.
Training on augumented user 39612 3/50 current_auc = 0.5
User 39612 AUC after training: 0.5
User 39612 does not improve AUC. Reverting changes.
Training on augumented user 102207 4/50 current_auc = 0.5
User 102207 AUC after training: 0.5
User 102207 does not improve AUC. Reverting changes.
Training on augumented user 39044 5/50 current_auc = 0.5
User 39044 AUC after training: 0.475
User 39044 does not improve AUC. Reverting changes.
Training on augumented user 4391 6/50 current_auc = 0.5
User 4391 AUC after training: 0.5
User 4391 does not improve AUC. Reverting changes.
Training on augumented user 62484 7/50 current_auc = 0.5
User 62484 AUC after training: 0.5
User 62484 does not improve AUC. Reverting changes.
Training on augumented user 4540 8/50 current_auc = 0.5
User 4540 AUC after training: 0.5
User 4540 does not improve AUC. Reverting changes.
Training on augumented user 81979 9/50 current_auc = 0.5
User 81979 AUC after training: 0.5
User 81979 does not improve AUC. Reverting changes.
Training on augumented user 26634 10/50 current_auc = 0.5
User 26634 AUC after training: 0.5
User 26634 does not improve AUC. Reverting changes.
Training on augumented user 53342 11/50 current_auc = 0.5
User 53342 AUC after training: 0.5
User 53342 does not improve AUC. Reverting changes.
Training on augumented user 93042 12/50 current_auc = 0.5
User 93042 AUC after training: 0.5
User 93042 does not improve AUC. Reverting changes.
Training on augumented user 135102 13/50 current_auc = 0.5
User 135102 AUC after training: 0.475
User 135102 does not improve AUC. Reverting changes.
Training on augumented user 308 14/50 current_auc = 0.5
User 308 AUC after training: 0.5
User 308 does not improve AUC. Reverting changes.
Training on augumented user 127858 15/50 current_auc = 0.5
User 127858 AUC after training: 0.5
User 127858 does not improve AUC. Reverting changes.
Training on augumented user 25200 16/50 current_auc = 0.5
User 25200 AUC after training: 0.5
User 25200 does not improve AUC. Reverting changes.
Training on augumented user 130263 17/50 current_auc = 0.5
User 130263 AUC after training: 0.5
User 130263 does not improve AUC. Reverting changes.
Training on augumented user 58768 18/50 current_auc = 0.5
User 58768 AUC after training: 0.5
User 58768 does not improve AUC. Reverting changes.
Training on augumented user 15582 19/50 current_auc = 0.5
User 15582 AUC after training: 0.5
User 15582 does not improve AUC. Reverting changes.
Training on augumented user 138433 20/50 current_auc = 0.5
User 138433 AUC after training: 0.5
User 138433 does not improve AUC. Reverting changes.
Training on augumented user 73844 21/50 current_auc = 0.5
User 73844 AUC after training: 0.5
User 73844 does not improve AUC. Reverting changes.
Training on augumented user 127107 22/50 current_auc = 0.5
User 127107 AUC after training: 0.5
User 127107 does not improve AUC. Reverting changes.
Training on augumented user 86907 23/50 current_auc = 0.5
User 86907 AUC after training: 0.5
User 86907 does not improve AUC. Reverting changes.
Training on augumented user 87841 24/50 current_auc = 0.5
User 87841 AUC after training: 0.5
User 87841 does not improve AUC. Reverting changes.
Training on augumented user 61168 25/50 current_auc = 0.5
User 61168 AUC after training: 0.5
User 61168 does not improve AUC. Reverting changes.
Training on augumented user 111020 26/50 current_auc = 0.5
User 111020 AUC after training: 0.5
User 111020 does not improve AUC. Reverting changes.
Training on augumented user 38688 27/50 current_auc = 0.5
User 38688 AUC after training: 0.5
User 38688 does not improve AUC. Reverting changes.
Training on augumented user 127272 28/50 current_auc = 0.5
User 127272 AUC after training: 0.5
User 127272 does not improve AUC. Reverting changes.
Training on augumented user 45284 29/50 current_auc = 0.5
User 45284 AUC after training: 0.5
User 45284 does not improve AUC. Reverting changes.
Training on augumented user 120890 30/50 current_auc = 0.5
User 120890 AUC after training: 0.5
User 120890 does not improve AUC. Reverting changes.
Training on augumented user 38353 31/50 current_auc = 0.5
User 38353 AUC after training: 0.5
User 38353 does not improve AUC. Reverting changes.
Training on augumented user 129101 32/50 current_auc = 0.5
User 129101 AUC after training: 0.5
User 129101 does not improve AUC. Reverting changes.
Training on augumented user 82729 33/50 current_auc = 0.5
User 82729 AUC after training: 0.5
User 82729 does not improve AUC. Reverting changes.
Training on augumented user 20794 34/50 current_auc = 0.5
User 20794 AUC after training: 0.5
User 20794 does not improve AUC. Reverting changes.
Training on augumented user 99200 35/50 current_auc = 0.5
User 99200 AUC after training: 0.5
User 99200 does not improve AUC. Reverting changes.
Training on augumented user 48688 36/50 current_auc = 0.5
User 48688 AUC after training: 0.5
User 48688 does not improve AUC. Reverting changes.
Training on augumented user 65718 37/50 current_auc = 0.5
User 65718 AUC after training: 0.5
User 65718 does not improve AUC. Reverting changes.
Training on augumented user 70596 38/50 current_auc = 0.5
User 70596 AUC after training: 0.5
User 70596 does not improve AUC. Reverting changes.
Training on augumented user 126119 39/50 current_auc = 0.5
User 126119 AUC after training: 0.5
User 126119 does not improve AUC. Reverting changes.
Training on augumented user 70180 40/50 current_auc = 0.5
User 70180 AUC after training: 0.5
User 70180 does not improve AUC. Reverting changes.
Training on augumented user 60490 41/50 current_auc = 0.5
User 60490 AUC after training: 0.5
User 60490 does not improve AUC. Reverting changes.
Training on augumented user 91782 42/50 current_auc = 0.5
User 91782 AUC after training: 0.5
User 91782 does not improve AUC. Reverting changes.
Training on augumented user 85799 43/50 current_auc = 0.5
User 85799 AUC after training: 0.5
User 85799 does not improve AUC. Reverting changes.
Training on augumented user 137634 44/50 current_auc = 0.5
User 137634 AUC after training: 0.5
User 137634 does not improve AUC. Reverting changes.
Training on augumented user 85262 45/50 current_auc = 0.5
User 85262 AUC after training: 0.5
User 85262 does not improve AUC. Reverting changes.
Training on augumented user 87523 46/50 current_auc = 0.5
User 87523 AUC after training: 0.5
User 87523 does not improve AUC. Reverting changes.
Training on augumented user 115349 47/50 current_auc = 0.5
User 115349 AUC after training: 0.5
User 115349 does not improve AUC. Reverting changes.
Training on augumented user 125776 48/50 current_auc = 0.5
User 125776 AUC after training: 0.5
User 125776 does not improve AUC. Reverting changes.
Training on augumented user 2607 49/50 current_auc = 0.5
User 2607 AUC after training: 0.5
User 2607 does not improve AUC. Reverting changes.
[2024-12-02 20:00:12.304205] start test user 101703 251/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:00:12.972142] start test user 101703 251/567 recall augumented users by random, augumented_users = [125582, 26665, 32325, 92650, 124980, 113293, 113995, 110898, 62043, 19927, 40549, 123457, 46778, 134313, 62042, 68368, 29563, 62905, 130898, 128915, 64142, 64843, 72533, 117283, 41192, 17179, 28206, 131984, 81547, 46162, 55409, 113841, 96724, 94725, 107066, 90806, 8959, 124040, 78171, 59809, 124374, 52348, 130371, 11075, 3909, 46314, 48579, 23638, 82686, 119570]
[2024-12-02 20:00:12.987848] user = 101703 Cloud 251/567
[2024-12-02 20:00:12.997146] user = 101703 Local 251/567
[2024-12-02 20:00:13.084286] user = 101703 Local+ 251/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:00:15.631824] user = 101703 MPDA- 251/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.75
Training on augumented user 125582 0/50 current_auc = 0.75
User 125582 AUC after training: 0.75
User 125582 does not improve AUC. Reverting changes.
Training on augumented user 26665 1/50 current_auc = 0.75
User 26665 AUC after training: 0.75
User 26665 does not improve AUC. Reverting changes.
Training on augumented user 32325 2/50 current_auc = 0.75
User 32325 AUC after training: 0.75
User 32325 does not improve AUC. Reverting changes.
Training on augumented user 92650 3/50 current_auc = 0.75
User 92650 AUC after training: 0.75
User 92650 does not improve AUC. Reverting changes.
Training on augumented user 124980 4/50 current_auc = 0.75
User 124980 AUC after training: 0.75
User 124980 does not improve AUC. Reverting changes.
Training on augumented user 113293 5/50 current_auc = 0.75
User 113293 AUC after training: 0.75
User 113293 does not improve AUC. Reverting changes.
Training on augumented user 113995 6/50 current_auc = 0.75
User 113995 AUC after training: 0.75
User 113995 does not improve AUC. Reverting changes.
Training on augumented user 110898 7/50 current_auc = 0.75
User 110898 AUC after training: 0.75
User 110898 does not improve AUC. Reverting changes.
Training on augumented user 62043 8/50 current_auc = 0.75
User 62043 AUC after training: 0.75
User 62043 does not improve AUC. Reverting changes.
Training on augumented user 19927 9/50 current_auc = 0.75
User 19927 AUC after training: 0.75
User 19927 does not improve AUC. Reverting changes.
Training on augumented user 40549 10/50 current_auc = 0.75
User 40549 AUC after training: 0.75
User 40549 does not improve AUC. Reverting changes.
Training on augumented user 123457 11/50 current_auc = 0.75
User 123457 AUC after training: 0.75
User 123457 does not improve AUC. Reverting changes.
Training on augumented user 46778 12/50 current_auc = 0.75
User 46778 AUC after training: 0.75
User 46778 does not improve AUC. Reverting changes.
Training on augumented user 134313 13/50 current_auc = 0.75
User 134313 AUC after training: 0.75
User 134313 does not improve AUC. Reverting changes.
Training on augumented user 62042 14/50 current_auc = 0.75
User 62042 AUC after training: 0.75
User 62042 does not improve AUC. Reverting changes.
Training on augumented user 68368 15/50 current_auc = 0.75
User 68368 AUC after training: 0.75
User 68368 does not improve AUC. Reverting changes.
Training on augumented user 29563 16/50 current_auc = 0.75
User 29563 AUC after training: 0.75
User 29563 does not improve AUC. Reverting changes.
Training on augumented user 62905 17/50 current_auc = 0.75
User 62905 AUC after training: 0.75
User 62905 does not improve AUC. Reverting changes.
Training on augumented user 130898 18/50 current_auc = 0.75
User 130898 AUC after training: 0.75
User 130898 does not improve AUC. Reverting changes.
Training on augumented user 128915 19/50 current_auc = 0.75
User 128915 AUC after training: 0.75
User 128915 does not improve AUC. Reverting changes.
Training on augumented user 64142 20/50 current_auc = 0.75
User 64142 AUC after training: 0.75
User 64142 does not improve AUC. Reverting changes.
Training on augumented user 64843 21/50 current_auc = 0.75
User 64843 AUC after training: 0.75
User 64843 does not improve AUC. Reverting changes.
Training on augumented user 72533 22/50 current_auc = 0.75
User 72533 AUC after training: 0.75
User 72533 does not improve AUC. Reverting changes.
Training on augumented user 117283 23/50 current_auc = 0.75
User 117283 AUC after training: 0.75
User 117283 does not improve AUC. Reverting changes.
Training on augumented user 41192 24/50 current_auc = 0.75
User 41192 AUC after training: 0.75
User 41192 does not improve AUC. Reverting changes.
Training on augumented user 17179 25/50 current_auc = 0.75
User 17179 AUC after training: 0.75
User 17179 does not improve AUC. Reverting changes.
Training on augumented user 28206 26/50 current_auc = 0.75
User 28206 AUC after training: 0.75
User 28206 does not improve AUC. Reverting changes.
Training on augumented user 131984 27/50 current_auc = 0.75
User 131984 AUC after training: 0.75
User 131984 does not improve AUC. Reverting changes.
Training on augumented user 81547 28/50 current_auc = 0.75
User 81547 AUC after training: 0.75
User 81547 does not improve AUC. Reverting changes.
Training on augumented user 46162 29/50 current_auc = 0.75
User 46162 AUC after training: 0.75
User 46162 does not improve AUC. Reverting changes.
Training on augumented user 55409 30/50 current_auc = 0.75
User 55409 AUC after training: 0.75
User 55409 does not improve AUC. Reverting changes.
Training on augumented user 113841 31/50 current_auc = 0.75
User 113841 AUC after training: 0.75
User 113841 does not improve AUC. Reverting changes.
Training on augumented user 96724 32/50 current_auc = 0.75
User 96724 AUC after training: 0.75
User 96724 does not improve AUC. Reverting changes.
Training on augumented user 94725 33/50 current_auc = 0.75
User 94725 AUC after training: 0.75
User 94725 does not improve AUC. Reverting changes.
Training on augumented user 107066 34/50 current_auc = 0.75
User 107066 AUC after training: 0.75
User 107066 does not improve AUC. Reverting changes.
Training on augumented user 90806 35/50 current_auc = 0.75
User 90806 AUC after training: 0.75
User 90806 does not improve AUC. Reverting changes.
Training on augumented user 8959 36/50 current_auc = 0.75
User 8959 AUC after training: 0.75
User 8959 does not improve AUC. Reverting changes.
Training on augumented user 124040 37/50 current_auc = 0.75
User 124040 AUC after training: 0.75
User 124040 does not improve AUC. Reverting changes.
Training on augumented user 78171 38/50 current_auc = 0.75
User 78171 AUC after training: 0.75
User 78171 does not improve AUC. Reverting changes.
Training on augumented user 59809 39/50 current_auc = 0.75
User 59809 AUC after training: 0.75
User 59809 does not improve AUC. Reverting changes.
Training on augumented user 124374 40/50 current_auc = 0.75
User 124374 AUC after training: 0.75
User 124374 does not improve AUC. Reverting changes.
Training on augumented user 52348 41/50 current_auc = 0.75
User 52348 AUC after training: 0.75
User 52348 does not improve AUC. Reverting changes.
Training on augumented user 130371 42/50 current_auc = 0.75
User 130371 AUC after training: 0.75
User 130371 does not improve AUC. Reverting changes.
Training on augumented user 11075 43/50 current_auc = 0.75
User 11075 AUC after training: 0.75
User 11075 does not improve AUC. Reverting changes.
Training on augumented user 3909 44/50 current_auc = 0.75
User 3909 AUC after training: 0.75
User 3909 does not improve AUC. Reverting changes.
Training on augumented user 46314 45/50 current_auc = 0.75
User 46314 AUC after training: 0.75
User 46314 does not improve AUC. Reverting changes.
Training on augumented user 48579 46/50 current_auc = 0.75
User 48579 AUC after training: 0.75
User 48579 does not improve AUC. Reverting changes.
Training on augumented user 23638 47/50 current_auc = 0.75
User 23638 AUC after training: 0.75
User 23638 does not improve AUC. Reverting changes.
Training on augumented user 82686 48/50 current_auc = 0.75
User 82686 AUC after training: 0.75
User 82686 does not improve AUC. Reverting changes.
Training on augumented user 119570 49/50 current_auc = 0.75
User 119570 AUC after training: 0.75
User 119570 does not improve AUC. Reverting changes.
[2024-12-02 20:00:46.666933] start test user 101742 252/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:00:47.199276] start test user 101742 252/567 recall augumented users by random, augumented_users = [73369, 113797, 54457, 69921, 82818, 95770, 34567, 96105, 3765, 3593, 33970, 103804, 68238, 23634, 4262, 99530, 11285, 134521, 60741, 82857, 75401, 58887, 6757, 96197, 27120, 14690, 133605, 10418, 57221, 60939, 114159, 23845, 32498, 122504, 100652, 126860, 121645, 63515, 120968, 84944, 98220, 61565, 120101, 10794, 117048, 129830, 85662, 86427, 75288, 7185]
[2024-12-02 20:00:47.217081] user = 101742 Cloud 252/567
[2024-12-02 20:00:47.233003] user = 101742 Local 252/567
[2024-12-02 20:00:47.304295] user = 101742 Local+ 252/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:00:49.665694] user = 101742 MPDA- 252/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.590964590964591
Training on augumented user 73369 0/50 current_auc = 0.590964590964591
User 73369 AUC after training: 0.5905575905575906
User 73369 does not improve AUC. Reverting changes.
Training on augumented user 113797 1/50 current_auc = 0.590964590964591
User 113797 AUC after training: 0.5901505901505901
User 113797 does not improve AUC. Reverting changes.
Training on augumented user 54457 2/50 current_auc = 0.590964590964591
User 54457 AUC after training: 0.5909645909645909
User 54457 does not improve AUC. Reverting changes.
Training on augumented user 69921 3/50 current_auc = 0.590964590964591
User 69921 AUC after training: 0.5921855921855922
User 69921 improves AUC. Keeping the model.
Training on augumented user 82818 4/50 current_auc = 0.5921855921855922
User 82818 AUC after training: 0.5917785917785917
User 82818 does not improve AUC. Reverting changes.
Training on augumented user 95770 5/50 current_auc = 0.5921855921855922
User 95770 AUC after training: 0.5917785917785917
User 95770 does not improve AUC. Reverting changes.
Training on augumented user 34567 6/50 current_auc = 0.5921855921855922
User 34567 AUC after training: 0.5917785917785917
User 34567 does not improve AUC. Reverting changes.
Training on augumented user 96105 7/50 current_auc = 0.5921855921855922
User 96105 AUC after training: 0.5913715913715913
User 96105 does not improve AUC. Reverting changes.
Training on augumented user 3765 8/50 current_auc = 0.5921855921855922
User 3765 AUC after training: 0.5913715913715913
User 3765 does not improve AUC. Reverting changes.
Training on augumented user 3593 9/50 current_auc = 0.5921855921855922
User 3593 AUC after training: 0.5913715913715913
User 3593 does not improve AUC. Reverting changes.
Training on augumented user 33970 10/50 current_auc = 0.5921855921855922
User 33970 AUC after training: 0.5917785917785917
User 33970 does not improve AUC. Reverting changes.
Training on augumented user 103804 11/50 current_auc = 0.5921855921855922
User 103804 AUC after training: 0.5905575905575905
User 103804 does not improve AUC. Reverting changes.
Training on augumented user 68238 12/50 current_auc = 0.5921855921855922
User 68238 AUC after training: 0.5917785917785917
User 68238 does not improve AUC. Reverting changes.
Training on augumented user 23634 13/50 current_auc = 0.5921855921855922
User 23634 AUC after training: 0.590964590964591
User 23634 does not improve AUC. Reverting changes.
Training on augumented user 4262 14/50 current_auc = 0.5921855921855922
User 4262 AUC after training: 0.5913715913715913
User 4262 does not improve AUC. Reverting changes.
Training on augumented user 99530 15/50 current_auc = 0.5921855921855922
User 99530 AUC after training: 0.5917785917785917
User 99530 does not improve AUC. Reverting changes.
Training on augumented user 11285 16/50 current_auc = 0.5921855921855922
User 11285 AUC after training: 0.5925925925925927
User 11285 improves AUC. Keeping the model.
Training on augumented user 134521 17/50 current_auc = 0.5925925925925927
User 134521 AUC after training: 0.5913715913715913
User 134521 does not improve AUC. Reverting changes.
Training on augumented user 60741 18/50 current_auc = 0.5925925925925927
User 60741 AUC after training: 0.5915750915750916
User 60741 does not improve AUC. Reverting changes.
Training on augumented user 82857 19/50 current_auc = 0.5925925925925927
User 82857 AUC after training: 0.5929995929995929
User 82857 improves AUC. Keeping the model.
Training on augumented user 75401 20/50 current_auc = 0.5929995929995929
User 75401 AUC after training: 0.5929995929995929
User 75401 does not improve AUC. Reverting changes.
Training on augumented user 58887 21/50 current_auc = 0.5929995929995929
User 58887 AUC after training: 0.5929995929995929
User 58887 does not improve AUC. Reverting changes.
Training on augumented user 6757 22/50 current_auc = 0.5929995929995929
User 6757 AUC after training: 0.5925925925925926
User 6757 does not improve AUC. Reverting changes.
Training on augumented user 96197 23/50 current_auc = 0.5929995929995929
User 96197 AUC after training: 0.5929995929995929
User 96197 does not improve AUC. Reverting changes.
Training on augumented user 27120 24/50 current_auc = 0.5929995929995929
User 27120 AUC after training: 0.592999592999593
User 27120 improves AUC. Keeping the model.
Training on augumented user 14690 25/50 current_auc = 0.592999592999593
User 14690 AUC after training: 0.5917785917785917
User 14690 does not improve AUC. Reverting changes.
Training on augumented user 133605 26/50 current_auc = 0.592999592999593
User 133605 AUC after training: 0.592999592999593
User 133605 does not improve AUC. Reverting changes.
Training on augumented user 10418 27/50 current_auc = 0.592999592999593
User 10418 AUC after training: 0.5917785917785917
User 10418 does not improve AUC. Reverting changes.
Training on augumented user 57221 28/50 current_auc = 0.592999592999593
User 57221 AUC after training: 0.5925925925925926
User 57221 does not improve AUC. Reverting changes.
Training on augumented user 60939 29/50 current_auc = 0.592999592999593
User 60939 AUC after training: 0.5925925925925926
User 60939 does not improve AUC. Reverting changes.
Training on augumented user 114159 30/50 current_auc = 0.592999592999593
User 114159 AUC after training: 0.5929995929995929
User 114159 does not improve AUC. Reverting changes.
Training on augumented user 23845 31/50 current_auc = 0.592999592999593
User 23845 AUC after training: 0.5925925925925926
User 23845 does not improve AUC. Reverting changes.
Training on augumented user 32498 32/50 current_auc = 0.592999592999593
User 32498 AUC after training: 0.5929995929995929
User 32498 does not improve AUC. Reverting changes.
Training on augumented user 122504 33/50 current_auc = 0.592999592999593
User 122504 AUC after training: 0.5934065934065933
User 122504 improves AUC. Keeping the model.
Training on augumented user 100652 34/50 current_auc = 0.5934065934065933
User 100652 AUC after training: 0.590964590964591
User 100652 does not improve AUC. Reverting changes.
Training on augumented user 126860 35/50 current_auc = 0.5934065934065933
User 126860 AUC after training: 0.5913715913715913
User 126860 does not improve AUC. Reverting changes.
Training on augumented user 121645 36/50 current_auc = 0.5934065934065933
User 121645 AUC after training: 0.5946275946275946
User 121645 improves AUC. Keeping the model.
Training on augumented user 63515 37/50 current_auc = 0.5946275946275946
User 63515 AUC after training: 0.5942205942205943
User 63515 does not improve AUC. Reverting changes.
Training on augumented user 120968 38/50 current_auc = 0.5946275946275946
User 120968 AUC after training: 0.5934065934065934
User 120968 does not improve AUC. Reverting changes.
Training on augumented user 84944 39/50 current_auc = 0.5946275946275946
User 84944 AUC after training: 0.5934065934065934
User 84944 does not improve AUC. Reverting changes.
Training on augumented user 98220 40/50 current_auc = 0.5946275946275946
User 98220 AUC after training: 0.592999592999593
User 98220 does not improve AUC. Reverting changes.
Training on augumented user 61565 41/50 current_auc = 0.5946275946275946
User 61565 AUC after training: 0.5934065934065934
User 61565 does not improve AUC. Reverting changes.
Training on augumented user 120101 42/50 current_auc = 0.5946275946275946
User 120101 AUC after training: 0.5934065934065934
User 120101 does not improve AUC. Reverting changes.
Training on augumented user 10794 43/50 current_auc = 0.5946275946275946
User 10794 AUC after training: 0.5946275946275946
User 10794 does not improve AUC. Reverting changes.
Training on augumented user 117048 44/50 current_auc = 0.5946275946275946
User 117048 AUC after training: 0.5925925925925926
User 117048 does not improve AUC. Reverting changes.
Training on augumented user 129830 45/50 current_auc = 0.5946275946275946
User 129830 AUC after training: 0.5929995929995929
User 129830 does not improve AUC. Reverting changes.
Training on augumented user 85662 46/50 current_auc = 0.5946275946275946
User 85662 AUC after training: 0.5901505901505901
User 85662 does not improve AUC. Reverting changes.
Training on augumented user 86427 47/50 current_auc = 0.5946275946275946
User 86427 AUC after training: 0.595034595034595
User 86427 improves AUC. Keeping the model.
Training on augumented user 75288 48/50 current_auc = 0.595034595034595
User 75288 AUC after training: 0.5938135938135938
User 75288 does not improve AUC. Reverting changes.
Training on augumented user 7185 49/50 current_auc = 0.595034595034595
User 7185 AUC after training: 0.5942205942205943
User 7185 does not improve AUC. Reverting changes.
[2024-12-02 20:01:21.824267] start test user 101768 253/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:01:22.492127] start test user 101768 253/567 recall augumented users by random, augumented_users = [34887, 50015, 54396, 47279, 66514, 53669, 115071, 5352, 109886, 104428, 111788, 48871, 58212, 136239, 17566, 60971, 74973, 99444, 130376, 81311, 79301, 55900, 85755, 75728, 40889, 133452, 83238, 114673, 126812, 88473, 12268, 129506, 117036, 75048, 9944, 26775, 7458, 78209, 194, 125011, 137888, 29098, 21868, 137846, 56853, 61159, 101042, 132044, 68353, 95811]
[2024-12-02 20:01:22.542376] user = 101768 Cloud 253/567
[2024-12-02 20:01:22.653117] user = 101768 Local 253/567
[2024-12-02 20:01:22.924065] user = 101768 Local+ 253/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:01:25.361950] user = 101768 MPDA- 253/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7945803061754022
Training on augumented user 34887 0/50 current_auc = 0.7945803061754022
User 34887 AUC after training: 0.7947316640719599
User 34887 improves AUC. Keeping the model.
Training on augumented user 50015 1/50 current_auc = 0.7947316640719599
User 50015 AUC after training: 0.7948046402006572
User 50015 improves AUC. Keeping the model.
Training on augumented user 54396 2/50 current_auc = 0.7948046402006572
User 54396 AUC after training: 0.7948073430202388
User 54396 improves AUC. Keeping the model.
Training on augumented user 47279 3/50 current_auc = 0.7948073430202388
User 47279 AUC after training: 0.7949100501643315
User 47279 improves AUC. Keeping the model.
Training on augumented user 66514 4/50 current_auc = 0.7949100501643315
User 66514 AUC after training: 0.7948343712160526
User 66514 does not improve AUC. Reverting changes.
Training on augumented user 53669 5/50 current_auc = 0.7949100501643315
User 53669 AUC after training: 0.7948992388860059
User 53669 does not improve AUC. Reverting changes.
Training on augumented user 115071 6/50 current_auc = 0.7949100501643315
User 115071 AUC after training: 0.7948938332468432
User 115071 does not improve AUC. Reverting changes.
Training on augumented user 5352 7/50 current_auc = 0.7949100501643315
User 5352 AUC after training: 0.7948559937727037
User 5352 does not improve AUC. Reverting changes.
Training on augumented user 109886 8/50 current_auc = 0.7949100501643315
User 109886 AUC after training: 0.794942483999308
User 109886 improves AUC. Keeping the model.
Training on augumented user 104428 9/50 current_auc = 0.794942483999308
User 104428 AUC after training: 0.7949262670818198
User 104428 does not improve AUC. Reverting changes.
Training on augumented user 111788 10/50 current_auc = 0.794942483999308
User 111788 AUC after training: 0.7949587009167963
User 111788 improves AUC. Keeping the model.
Training on augumented user 48871 11/50 current_auc = 0.7949587009167963
User 48871 AUC after training: 0.7948343712160525
User 48871 does not improve AUC. Reverting changes.
Training on augumented user 58212 12/50 current_auc = 0.7949587009167963
User 58212 AUC after training: 0.7950424883238194
User 58212 improves AUC. Keeping the model.
Training on augumented user 136239 13/50 current_auc = 0.7950424883238194
User 136239 AUC after training: 0.7950262714063311
User 136239 does not improve AUC. Reverting changes.
Training on augumented user 17566 14/50 current_auc = 0.7950424883238194
User 17566 AUC after training: 0.7951695208441446
User 17566 improves AUC. Keeping the model.
Training on augumented user 60971 15/50 current_auc = 0.7951695208441446
User 60971 AUC after training: 0.7951776293028887
User 60971 improves AUC. Keeping the model.
Training on augumented user 74973 16/50 current_auc = 0.7951776293028887
User 74973 AUC after training: 0.7949587009167963
User 74973 does not improve AUC. Reverting changes.
Training on augumented user 99444 17/50 current_auc = 0.7951776293028887
User 99444 AUC after training: 0.7951506011070748
User 99444 does not improve AUC. Reverting changes.
Training on augumented user 130376 18/50 current_auc = 0.7951776293028887
User 130376 AUC after training: 0.7951181672720982
User 130376 does not improve AUC. Reverting changes.
Training on augumented user 81311 19/50 current_auc = 0.7951776293028887
User 81311 AUC after training: 0.79500464884968
User 81311 does not improve AUC. Reverting changes.
Training on augumented user 79301 20/50 current_auc = 0.7951776293028887
User 79301 AUC after training: 0.7949154558034943
User 79301 does not improve AUC. Reverting changes.
Training on augumented user 55900 21/50 current_auc = 0.7951776293028887
User 55900 AUC after training: 0.7949424839993081
User 55900 does not improve AUC. Reverting changes.
Training on augumented user 85755 22/50 current_auc = 0.7951776293028887
User 85755 AUC after training: 0.7948613994118664
User 85755 does not improve AUC. Reverting changes.
Training on augumented user 75728 23/50 current_auc = 0.7951776293028887
User 75728 AUC after training: 0.7950343798650752
User 75728 does not improve AUC. Reverting changes.
Training on augumented user 40889 24/50 current_auc = 0.7951776293028887
User 40889 AUC after training: 0.7947532866286109
User 40889 does not improve AUC. Reverting changes.
Training on augumented user 133452 25/50 current_auc = 0.7951776293028887
User 133452 AUC after training: 0.7949532952776336
User 133452 does not improve AUC. Reverting changes.
Training on augumented user 83238 26/50 current_auc = 0.7951776293028887
User 83238 AUC after training: 0.7953857464106557
User 83238 improves AUC. Keeping the model.
Training on augumented user 114673 27/50 current_auc = 0.7953857464106557
User 114673 AUC after training: 0.7953857464106555
User 114673 does not improve AUC. Reverting changes.
Training on augumented user 126812 28/50 current_auc = 0.7953857464106557
User 126812 AUC after training: 0.7954073689673067
User 126812 improves AUC. Keeping the model.
Training on augumented user 88473 29/50 current_auc = 0.7954073689673067
User 88473 AUC after training: 0.7954073689673067
User 88473 does not improve AUC. Reverting changes.
Training on augumented user 12268 30/50 current_auc = 0.7954073689673067
User 12268 AUC after training: 0.7950830306175403
User 12268 does not improve AUC. Reverting changes.
Training on augumented user 129506 31/50 current_auc = 0.7954073689673067
User 129506 AUC after training: 0.7952857420861441
User 129506 does not improve AUC. Reverting changes.
Training on augumented user 117036 32/50 current_auc = 0.7954073689673067
User 117036 AUC after training: 0.7953073646427955
User 117036 does not improve AUC. Reverting changes.
Training on augumented user 75048 33/50 current_auc = 0.7954073689673067
User 75048 AUC after training: 0.7953830435910741
User 75048 does not improve AUC. Reverting changes.
Training on augumented user 9944 34/50 current_auc = 0.7954073689673067
User 9944 AUC after training: 0.7952397941532607
User 9944 does not improve AUC. Reverting changes.
Training on augumented user 26775 35/50 current_auc = 0.7954073689673067
User 26775 AUC after training: 0.7953316900190278
User 26775 does not improve AUC. Reverting changes.
Training on augumented user 7458 36/50 current_auc = 0.7954073689673067
User 7458 AUC after training: 0.7951992518595399
User 7458 does not improve AUC. Reverting changes.
Training on augumented user 78209 37/50 current_auc = 0.7954073689673067
User 78209 AUC after training: 0.7950668137000517
User 78209 does not improve AUC. Reverting changes.
Training on augumented user 194 38/50 current_auc = 0.7954073689673067
User 194 AUC after training: 0.7954181802456323
User 194 improves AUC. Keeping the model.
Training on augumented user 125011 39/50 current_auc = 0.7954181802456323
User 125011 AUC after training: 0.795493859193911
User 125011 improves AUC. Keeping the model.
Training on augumented user 137888 40/50 current_auc = 0.795493859193911
User 137888 AUC after training: 0.7956235945338177
User 137888 improves AUC. Keeping the model.
Training on augumented user 29098 41/50 current_auc = 0.7956235945338177
User 29098 AUC after training: 0.7956344058121432
User 29098 improves AUC. Keeping the model.
Training on augumented user 21868 42/50 current_auc = 0.7956344058121432
User 21868 AUC after training: 0.7955073732918181
User 21868 does not improve AUC. Reverting changes.
Training on augumented user 137846 43/50 current_auc = 0.7956344058121432
User 137846 AUC after training: 0.7955235902093064
User 137846 does not improve AUC. Reverting changes.
Training on augumented user 56853 44/50 current_auc = 0.7956344058121432
User 56853 AUC after training: 0.7956506227296316
User 56853 improves AUC. Keeping the model.
Training on augumented user 61159 45/50 current_auc = 0.7956506227296316
User 61159 AUC after training: 0.7955938635184224
User 61159 does not improve AUC. Reverting changes.
Training on augumented user 101042 46/50 current_auc = 0.7956506227296316
User 101042 AUC after training: 0.7955965663380038
User 101042 does not improve AUC. Reverting changes.
Training on augumented user 132044 47/50 current_auc = 0.7956506227296316
User 132044 AUC after training: 0.7955344014876319
User 132044 does not improve AUC. Reverting changes.
Training on augumented user 68353 48/50 current_auc = 0.7956506227296316
User 68353 AUC after training: 0.7956614340079571
User 68353 improves AUC. Keeping the model.
Training on augumented user 95811 49/50 current_auc = 0.7956614340079571
User 95811 AUC after training: 0.7955479155855388
User 95811 does not improve AUC. Reverting changes.
[2024-12-02 20:02:03.124138] start test user 101808 254/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:02:03.868788] start test user 101808 254/567 recall augumented users by random, augumented_users = [87565, 22838, 131097, 23901, 120642, 60577, 35028, 47365, 13223, 123625, 26276, 46138, 51090, 109042, 44599, 59020, 114454, 96224, 30390, 72587, 38866, 21498, 106626, 117886, 63078, 125659, 73087, 36944, 55312, 79348, 79241, 118118, 131378, 95301, 75584, 100911, 93879, 62915, 55267, 5662, 37270, 111670, 30314, 21292, 54448, 97967, 81747, 21661, 56038, 132085]
[2024-12-02 20:02:03.889289] user = 101808 Cloud 254/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:02:03.901442] user = 101808 Local 254/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:02:03.916976] user = 101808 Local+ 254/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:02:06.594569] user = 101808 MPDA- 254/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 87565 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 87565 AUC after training: 0.5
User 87565 does not improve AUC. Reverting changes.
Training on augumented user 22838 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22838 AUC after training: 0.5
User 22838 does not improve AUC. Reverting changes.
Training on augumented user 131097 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131097 AUC after training: 0.5
User 131097 does not improve AUC. Reverting changes.
Training on augumented user 23901 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23901 AUC after training: 0.5
User 23901 does not improve AUC. Reverting changes.
Training on augumented user 120642 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120642 AUC after training: 0.5
User 120642 does not improve AUC. Reverting changes.
Training on augumented user 60577 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60577 AUC after training: 0.5
User 60577 does not improve AUC. Reverting changes.
Training on augumented user 35028 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35028 AUC after training: 0.5
User 35028 does not improve AUC. Reverting changes.
Training on augumented user 47365 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47365 AUC after training: 0.5
User 47365 does not improve AUC. Reverting changes.
Training on augumented user 13223 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13223 AUC after training: 0.5
User 13223 does not improve AUC. Reverting changes.
Training on augumented user 123625 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123625 AUC after training: 0.5
User 123625 does not improve AUC. Reverting changes.
Training on augumented user 26276 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26276 AUC after training: 0.5
User 26276 does not improve AUC. Reverting changes.
Training on augumented user 46138 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 46138 AUC after training: 0.5
User 46138 does not improve AUC. Reverting changes.
Training on augumented user 51090 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51090 AUC after training: 0.5
User 51090 does not improve AUC. Reverting changes.
Training on augumented user 109042 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 109042 AUC after training: 0.5
User 109042 does not improve AUC. Reverting changes.
Training on augumented user 44599 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44599 AUC after training: 0.5
User 44599 does not improve AUC. Reverting changes.
Training on augumented user 59020 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59020 AUC after training: 0.5
User 59020 does not improve AUC. Reverting changes.
Training on augumented user 114454 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114454 AUC after training: 0.5
User 114454 does not improve AUC. Reverting changes.
Training on augumented user 96224 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96224 AUC after training: 0.5
User 96224 does not improve AUC. Reverting changes.
Training on augumented user 30390 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30390 AUC after training: 0.5
User 30390 does not improve AUC. Reverting changes.
Training on augumented user 72587 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72587 AUC after training: 0.5
User 72587 does not improve AUC. Reverting changes.
Training on augumented user 38866 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38866 AUC after training: 0.5
User 38866 does not improve AUC. Reverting changes.
Training on augumented user 21498 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21498 AUC after training: 0.5
User 21498 does not improve AUC. Reverting changes.
Training on augumented user 106626 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106626 AUC after training: 0.5
User 106626 does not improve AUC. Reverting changes.
Training on augumented user 117886 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117886 AUC after training: 0.5
User 117886 does not improve AUC. Reverting changes.
Training on augumented user 63078 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63078 AUC after training: 0.5
User 63078 does not improve AUC. Reverting changes.
Training on augumented user 125659 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 125659 AUC after training: 0.5
User 125659 does not improve AUC. Reverting changes.
Training on augumented user 73087 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73087 AUC after training: 0.5
User 73087 does not improve AUC. Reverting changes.
Training on augumented user 36944 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 36944 AUC after training: 0.5
User 36944 does not improve AUC. Reverting changes.
Training on augumented user 55312 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55312 AUC after training: 0.5
User 55312 does not improve AUC. Reverting changes.
Training on augumented user 79348 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79348 AUC after training: 0.5
User 79348 does not improve AUC. Reverting changes.
Training on augumented user 79241 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79241 AUC after training: 0.5
User 79241 does not improve AUC. Reverting changes.
Training on augumented user 118118 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118118 AUC after training: 0.5
User 118118 does not improve AUC. Reverting changes.
Training on augumented user 131378 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131378 AUC after training: 0.5
User 131378 does not improve AUC. Reverting changes.
Training on augumented user 95301 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95301 AUC after training: 0.5
User 95301 does not improve AUC. Reverting changes.
Training on augumented user 75584 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75584 AUC after training: 0.5
User 75584 does not improve AUC. Reverting changes.
Training on augumented user 100911 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100911 AUC after training: 0.5
User 100911 does not improve AUC. Reverting changes.
Training on augumented user 93879 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93879 AUC after training: 0.5
User 93879 does not improve AUC. Reverting changes.
Training on augumented user 62915 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62915 AUC after training: 0.5
User 62915 does not improve AUC. Reverting changes.
Training on augumented user 55267 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55267 AUC after training: 0.5
User 55267 does not improve AUC. Reverting changes.
Training on augumented user 5662 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5662 AUC after training: 0.5
User 5662 does not improve AUC. Reverting changes.
Training on augumented user 37270 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37270 AUC after training: 0.5
User 37270 does not improve AUC. Reverting changes.
Training on augumented user 111670 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111670 AUC after training: 0.5
User 111670 does not improve AUC. Reverting changes.
Training on augumented user 30314 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30314 AUC after training: 0.5
User 30314 does not improve AUC. Reverting changes.
Training on augumented user 21292 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21292 AUC after training: 0.5
User 21292 does not improve AUC. Reverting changes.
Training on augumented user 54448 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 54448 AUC after training: 0.5
User 54448 does not improve AUC. Reverting changes.
Training on augumented user 97967 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 97967 AUC after training: 0.5
User 97967 does not improve AUC. Reverting changes.
Training on augumented user 81747 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81747 AUC after training: 0.5
User 81747 does not improve AUC. Reverting changes.
Training on augumented user 21661 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21661 AUC after training: 0.5
User 21661 does not improve AUC. Reverting changes.
Training on augumented user 56038 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56038 AUC after training: 0.5
User 56038 does not improve AUC. Reverting changes.
Training on augumented user 132085 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132085 AUC after training: 0.5
User 132085 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:02:38.934087] start test user 101818 255/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:02:39.397566] start test user 101818 255/567 recall augumented users by random, augumented_users = [33310, 115011, 129274, 94599, 58810, 133696, 86328, 115714, 134484, 18873, 3275, 83718, 30969, 129723, 23463, 75982, 51737, 60895, 128268, 114408, 84295, 100345, 96709, 25876, 89879, 4604, 111418, 64202, 118195, 15716, 106015, 3609, 37866, 90641, 116981, 80150, 130164, 29222, 130595, 56841, 9714, 63132, 27836, 49226, 19841, 134474, 95287, 136953, 65810, 102171]
[2024-12-02 20:02:39.411705] user = 101818 Cloud 255/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:02:39.417907] user = 101818 Local 255/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:02:39.438096] user = 101818 Local+ 255/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:02:41.772019] user = 101818 MPDA- 255/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 33310 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33310 AUC after training: 0.5
User 33310 does not improve AUC. Reverting changes.
Training on augumented user 115011 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115011 AUC after training: 0.5
User 115011 does not improve AUC. Reverting changes.
Training on augumented user 129274 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129274 AUC after training: 0.5
User 129274 does not improve AUC. Reverting changes.
Training on augumented user 94599 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94599 AUC after training: 0.5
User 94599 does not improve AUC. Reverting changes.
Training on augumented user 58810 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 58810 AUC after training: 0.5
User 58810 does not improve AUC. Reverting changes.
Training on augumented user 133696 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133696 AUC after training: 0.5
User 133696 does not improve AUC. Reverting changes.
Training on augumented user 86328 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86328 AUC after training: 0.5
User 86328 does not improve AUC. Reverting changes.
Training on augumented user 115714 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115714 AUC after training: 0.5
User 115714 does not improve AUC. Reverting changes.
Training on augumented user 134484 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134484 AUC after training: 0.5
User 134484 does not improve AUC. Reverting changes.
Training on augumented user 18873 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18873 AUC after training: 0.5
User 18873 does not improve AUC. Reverting changes.
Training on augumented user 3275 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3275 AUC after training: 0.5
User 3275 does not improve AUC. Reverting changes.
Training on augumented user 83718 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83718 AUC after training: 0.5
User 83718 does not improve AUC. Reverting changes.
Training on augumented user 30969 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30969 AUC after training: 0.5
User 30969 does not improve AUC. Reverting changes.
Training on augumented user 129723 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 129723 AUC after training: 0.5
User 129723 does not improve AUC. Reverting changes.
Training on augumented user 23463 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23463 AUC after training: 0.5
User 23463 does not improve AUC. Reverting changes.
Training on augumented user 75982 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75982 AUC after training: 0.5
User 75982 does not improve AUC. Reverting changes.
Training on augumented user 51737 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 51737 AUC after training: 0.5
User 51737 does not improve AUC. Reverting changes.
Training on augumented user 60895 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 60895 AUC after training: 0.5
User 60895 does not improve AUC. Reverting changes.
Training on augumented user 128268 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128268 AUC after training: 0.5
User 128268 does not improve AUC. Reverting changes.
Training on augumented user 114408 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114408 AUC after training: 0.5
User 114408 does not improve AUC. Reverting changes.
Training on augumented user 84295 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84295 AUC after training: 0.5
User 84295 does not improve AUC. Reverting changes.
Training on augumented user 100345 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 100345 AUC after training: 0.5
User 100345 does not improve AUC. Reverting changes.
Training on augumented user 96709 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96709 AUC after training: 0.5
User 96709 does not improve AUC. Reverting changes.
Training on augumented user 25876 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 25876 AUC after training: 0.5
User 25876 does not improve AUC. Reverting changes.
Training on augumented user 89879 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89879 AUC after training: 0.5
User 89879 does not improve AUC. Reverting changes.
Training on augumented user 4604 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 4604 AUC after training: 0.5
User 4604 does not improve AUC. Reverting changes.
Training on augumented user 111418 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 111418 AUC after training: 0.5
User 111418 does not improve AUC. Reverting changes.
Training on augumented user 64202 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64202 AUC after training: 0.5
User 64202 does not improve AUC. Reverting changes.
Training on augumented user 118195 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118195 AUC after training: 0.5
User 118195 does not improve AUC. Reverting changes.
Training on augumented user 15716 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15716 AUC after training: 0.5
User 15716 does not improve AUC. Reverting changes.
Training on augumented user 106015 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106015 AUC after training: 0.5
User 106015 does not improve AUC. Reverting changes.
Training on augumented user 3609 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3609 AUC after training: 0.5
User 3609 does not improve AUC. Reverting changes.
Training on augumented user 37866 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 37866 AUC after training: 0.5
User 37866 does not improve AUC. Reverting changes.
Training on augumented user 90641 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 90641 AUC after training: 0.5
User 90641 does not improve AUC. Reverting changes.
Training on augumented user 116981 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116981 AUC after training: 0.5
User 116981 does not improve AUC. Reverting changes.
Training on augumented user 80150 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80150 AUC after training: 0.5
User 80150 does not improve AUC. Reverting changes.
Training on augumented user 130164 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130164 AUC after training: 0.5
User 130164 does not improve AUC. Reverting changes.
Training on augumented user 29222 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 29222 AUC after training: 0.5
User 29222 does not improve AUC. Reverting changes.
Training on augumented user 130595 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 130595 AUC after training: 0.5
User 130595 does not improve AUC. Reverting changes.
Training on augumented user 56841 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56841 AUC after training: 0.5
User 56841 does not improve AUC. Reverting changes.
Training on augumented user 9714 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9714 AUC after training: 0.5
User 9714 does not improve AUC. Reverting changes.
Training on augumented user 63132 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 63132 AUC after training: 0.5
User 63132 does not improve AUC. Reverting changes.
Training on augumented user 27836 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27836 AUC after training: 0.5
User 27836 does not improve AUC. Reverting changes.
Training on augumented user 49226 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49226 AUC after training: 0.5
User 49226 does not improve AUC. Reverting changes.
Training on augumented user 19841 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19841 AUC after training: 0.5
User 19841 does not improve AUC. Reverting changes.
Training on augumented user 134474 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134474 AUC after training: 0.5
User 134474 does not improve AUC. Reverting changes.
Training on augumented user 95287 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 95287 AUC after training: 0.5
User 95287 does not improve AUC. Reverting changes.
Training on augumented user 136953 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136953 AUC after training: 0.5
User 136953 does not improve AUC. Reverting changes.
Training on augumented user 65810 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 65810 AUC after training: 0.5
User 65810 does not improve AUC. Reverting changes.
Training on augumented user 102171 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102171 AUC after training: 0.5
User 102171 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:03:10.204738] start test user 101975 256/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:03:10.615834] start test user 101975 256/567 recall augumented users by random, augumented_users = [72347, 113307, 84819, 55492, 79320, 81229, 44559, 78310, 31454, 40365, 94643, 86433, 95191, 24470, 49875, 95526, 32466, 66510, 59105, 32840, 74016, 115352, 60567, 93342, 65551, 55399, 74382, 125233, 34276, 77911, 89196, 17861, 3152, 112987, 94659, 122795, 66891, 45321, 70478, 80121, 63590, 110132, 111715, 110263, 27363, 87593, 39219, 125079, 4487, 114275]
[2024-12-02 20:03:10.632101] user = 101975 Cloud 256/567
[2024-12-02 20:03:10.642297] user = 101975 Local 256/567
[2024-12-02 20:03:10.952608] user = 101975 Local+ 256/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:03:13.646669] user = 101975 MPDA- 256/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.44537815126050423
Training on augumented user 72347 0/50 current_auc = 0.44537815126050423
User 72347 AUC after training: 0.44537815126050423
User 72347 does not improve AUC. Reverting changes.
Training on augumented user 113307 1/50 current_auc = 0.44537815126050423
User 113307 AUC after training: 0.4621848739495799
User 113307 improves AUC. Keeping the model.
Training on augumented user 84819 2/50 current_auc = 0.4621848739495799
User 84819 AUC after training: 0.4621848739495799
User 84819 does not improve AUC. Reverting changes.
Training on augumented user 55492 3/50 current_auc = 0.4621848739495799
User 55492 AUC after training: 0.453781512605042
User 55492 does not improve AUC. Reverting changes.
Training on augumented user 79320 4/50 current_auc = 0.4621848739495799
User 79320 AUC after training: 0.4621848739495799
User 79320 does not improve AUC. Reverting changes.
Training on augumented user 81229 5/50 current_auc = 0.4621848739495799
User 81229 AUC after training: 0.4621848739495799
User 81229 does not improve AUC. Reverting changes.
Training on augumented user 44559 6/50 current_auc = 0.4621848739495799
User 44559 AUC after training: 0.45378151260504207
User 44559 does not improve AUC. Reverting changes.
Training on augumented user 78310 7/50 current_auc = 0.4621848739495799
User 78310 AUC after training: 0.4621848739495799
User 78310 does not improve AUC. Reverting changes.
Training on augumented user 31454 8/50 current_auc = 0.4621848739495799
User 31454 AUC after training: 0.44537815126050423
User 31454 does not improve AUC. Reverting changes.
Training on augumented user 40365 9/50 current_auc = 0.4621848739495799
User 40365 AUC after training: 0.4621848739495799
User 40365 does not improve AUC. Reverting changes.
Training on augumented user 94643 10/50 current_auc = 0.4621848739495799
User 94643 AUC after training: 0.45378151260504207
User 94643 does not improve AUC. Reverting changes.
Training on augumented user 86433 11/50 current_auc = 0.4621848739495799
User 86433 AUC after training: 0.44537815126050423
User 86433 does not improve AUC. Reverting changes.
Training on augumented user 95191 12/50 current_auc = 0.4621848739495799
User 95191 AUC after training: 0.4621848739495799
User 95191 does not improve AUC. Reverting changes.
Training on augumented user 24470 13/50 current_auc = 0.4621848739495799
User 24470 AUC after training: 0.4621848739495799
User 24470 does not improve AUC. Reverting changes.
Training on augumented user 49875 14/50 current_auc = 0.4621848739495799
User 49875 AUC after training: 0.4621848739495799
User 49875 does not improve AUC. Reverting changes.
Training on augumented user 95526 15/50 current_auc = 0.4621848739495799
User 95526 AUC after training: 0.4621848739495799
User 95526 does not improve AUC. Reverting changes.
Training on augumented user 32466 16/50 current_auc = 0.4621848739495799
User 32466 AUC after training: 0.4621848739495799
User 32466 does not improve AUC. Reverting changes.
Training on augumented user 66510 17/50 current_auc = 0.4621848739495799
User 66510 AUC after training: 0.4621848739495799
User 66510 does not improve AUC. Reverting changes.
Training on augumented user 59105 18/50 current_auc = 0.4621848739495799
User 59105 AUC after training: 0.4621848739495799
User 59105 does not improve AUC. Reverting changes.
Training on augumented user 32840 19/50 current_auc = 0.4621848739495799
User 32840 AUC after training: 0.4621848739495799
User 32840 does not improve AUC. Reverting changes.
Training on augumented user 74016 20/50 current_auc = 0.4621848739495799
User 74016 AUC after training: 0.4621848739495799
User 74016 does not improve AUC. Reverting changes.
Training on augumented user 115352 21/50 current_auc = 0.4621848739495799
User 115352 AUC after training: 0.453781512605042
User 115352 does not improve AUC. Reverting changes.
Training on augumented user 60567 22/50 current_auc = 0.4621848739495799
User 60567 AUC after training: 0.4621848739495799
User 60567 does not improve AUC. Reverting changes.
Training on augumented user 93342 23/50 current_auc = 0.4621848739495799
User 93342 AUC after training: 0.4621848739495799
User 93342 does not improve AUC. Reverting changes.
Training on augumented user 65551 24/50 current_auc = 0.4621848739495799
User 65551 AUC after training: 0.4621848739495799
User 65551 does not improve AUC. Reverting changes.
Training on augumented user 55399 25/50 current_auc = 0.4621848739495799
User 55399 AUC after training: 0.4621848739495799
User 55399 does not improve AUC. Reverting changes.
Training on augumented user 74382 26/50 current_auc = 0.4621848739495799
User 74382 AUC after training: 0.453781512605042
User 74382 does not improve AUC. Reverting changes.
Training on augumented user 125233 27/50 current_auc = 0.4621848739495799
User 125233 AUC after training: 0.4621848739495799
User 125233 does not improve AUC. Reverting changes.
Training on augumented user 34276 28/50 current_auc = 0.4621848739495799
User 34276 AUC after training: 0.4621848739495799
User 34276 does not improve AUC. Reverting changes.
Training on augumented user 77911 29/50 current_auc = 0.4621848739495799
User 77911 AUC after training: 0.4621848739495799
User 77911 does not improve AUC. Reverting changes.
Training on augumented user 89196 30/50 current_auc = 0.4621848739495799
User 89196 AUC after training: 0.4621848739495799
User 89196 does not improve AUC. Reverting changes.
Training on augumented user 17861 31/50 current_auc = 0.4621848739495799
User 17861 AUC after training: 0.453781512605042
User 17861 does not improve AUC. Reverting changes.
Training on augumented user 3152 32/50 current_auc = 0.4621848739495799
User 3152 AUC after training: 0.4621848739495799
User 3152 does not improve AUC. Reverting changes.
Training on augumented user 112987 33/50 current_auc = 0.4621848739495799
User 112987 AUC after training: 0.4621848739495799
User 112987 does not improve AUC. Reverting changes.
Training on augumented user 94659 34/50 current_auc = 0.4621848739495799
User 94659 AUC after training: 0.4621848739495799
User 94659 does not improve AUC. Reverting changes.
Training on augumented user 122795 35/50 current_auc = 0.4621848739495799
User 122795 AUC after training: 0.4621848739495799
User 122795 does not improve AUC. Reverting changes.
Training on augumented user 66891 36/50 current_auc = 0.4621848739495799
User 66891 AUC after training: 0.4621848739495799
User 66891 does not improve AUC. Reverting changes.
Training on augumented user 45321 37/50 current_auc = 0.4621848739495799
User 45321 AUC after training: 0.4621848739495799
User 45321 does not improve AUC. Reverting changes.
Training on augumented user 70478 38/50 current_auc = 0.4621848739495799
User 70478 AUC after training: 0.4621848739495799
User 70478 does not improve AUC. Reverting changes.
Training on augumented user 80121 39/50 current_auc = 0.4621848739495799
User 80121 AUC after training: 0.4621848739495799
User 80121 does not improve AUC. Reverting changes.
Training on augumented user 63590 40/50 current_auc = 0.4621848739495799
User 63590 AUC after training: 0.4621848739495799
User 63590 does not improve AUC. Reverting changes.
Training on augumented user 110132 41/50 current_auc = 0.4621848739495799
User 110132 AUC after training: 0.4621848739495799
User 110132 does not improve AUC. Reverting changes.
Training on augumented user 111715 42/50 current_auc = 0.4621848739495799
User 111715 AUC after training: 0.4621848739495799
User 111715 does not improve AUC. Reverting changes.
Training on augumented user 110263 43/50 current_auc = 0.4621848739495799
User 110263 AUC after training: 0.4621848739495799
User 110263 does not improve AUC. Reverting changes.
Training on augumented user 27363 44/50 current_auc = 0.4621848739495799
User 27363 AUC after training: 0.4621848739495799
User 27363 does not improve AUC. Reverting changes.
Training on augumented user 87593 45/50 current_auc = 0.4621848739495799
User 87593 AUC after training: 0.44537815126050423
User 87593 does not improve AUC. Reverting changes.
Training on augumented user 39219 46/50 current_auc = 0.4621848739495799
User 39219 AUC after training: 0.4621848739495799
User 39219 does not improve AUC. Reverting changes.
Training on augumented user 125079 47/50 current_auc = 0.4621848739495799
User 125079 AUC after training: 0.45378151260504207
User 125079 does not improve AUC. Reverting changes.
Training on augumented user 4487 48/50 current_auc = 0.4621848739495799
User 4487 AUC after training: 0.4621848739495799
User 4487 does not improve AUC. Reverting changes.
Training on augumented user 114275 49/50 current_auc = 0.4621848739495799
User 114275 AUC after training: 0.4621848739495799
User 114275 does not improve AUC. Reverting changes.
[2024-12-02 20:03:46.611698] start test user 102000 257/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:03:47.375991] start test user 102000 257/567 recall augumented users by random, augumented_users = [119734, 57840, 36117, 67667, 59818, 25762, 75369, 46250, 88527, 2575, 99116, 3347, 88322, 133622, 52029, 62209, 38606, 1001, 14156, 1185, 123014, 42324, 63024, 30585, 73119, 73997, 20450, 80212, 27190, 76948, 28640, 80457, 235, 44076, 109951, 118674, 24419, 81906, 5110, 29687, 107123, 119367, 111089, 127274, 2886, 138059, 133534, 119890, 17268, 37869]
[2024-12-02 20:03:47.408650] user = 102000 Cloud 257/567
[2024-12-02 20:03:47.418325] user = 102000 Local 257/567
[2024-12-02 20:03:47.550280] user = 102000 Local+ 257/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:03:51.342616] user = 102000 MPDA- 257/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5825426944971537
Training on augumented user 119734 0/50 current_auc = 0.5825426944971537
User 119734 AUC after training: 0.5863377609108159
User 119734 improves AUC. Keeping the model.
Training on augumented user 57840 1/50 current_auc = 0.5863377609108159
User 57840 AUC after training: 0.5863377609108159
User 57840 does not improve AUC. Reverting changes.
Training on augumented user 36117 2/50 current_auc = 0.5863377609108159
User 36117 AUC after training: 0.5844402277039848
User 36117 does not improve AUC. Reverting changes.
Training on augumented user 67667 3/50 current_auc = 0.5863377609108159
User 67667 AUC after training: 0.5825426944971537
User 67667 does not improve AUC. Reverting changes.
Training on augumented user 59818 4/50 current_auc = 0.5863377609108159
User 59818 AUC after training: 0.5806451612903226
User 59818 does not improve AUC. Reverting changes.
Training on augumented user 25762 5/50 current_auc = 0.5863377609108159
User 25762 AUC after training: 0.5825426944971537
User 25762 does not improve AUC. Reverting changes.
Training on augumented user 75369 6/50 current_auc = 0.5863377609108159
User 75369 AUC after training: 0.5825426944971537
User 75369 does not improve AUC. Reverting changes.
Training on augumented user 46250 7/50 current_auc = 0.5863377609108159
User 46250 AUC after training: 0.5806451612903225
User 46250 does not improve AUC. Reverting changes.
Training on augumented user 88527 8/50 current_auc = 0.5863377609108159
User 88527 AUC after training: 0.5768500948766604
User 88527 does not improve AUC. Reverting changes.
Training on augumented user 2575 9/50 current_auc = 0.5863377609108159
User 2575 AUC after training: 0.5844402277039847
User 2575 does not improve AUC. Reverting changes.
Training on augumented user 99116 10/50 current_auc = 0.5863377609108159
User 99116 AUC after training: 0.5806451612903226
User 99116 does not improve AUC. Reverting changes.
Training on augumented user 3347 11/50 current_auc = 0.5863377609108159
User 3347 AUC after training: 0.5825426944971537
User 3347 does not improve AUC. Reverting changes.
Training on augumented user 88322 12/50 current_auc = 0.5863377609108159
User 88322 AUC after training: 0.5806451612903226
User 88322 does not improve AUC. Reverting changes.
Training on augumented user 133622 13/50 current_auc = 0.5863377609108159
User 133622 AUC after training: 0.5806451612903225
User 133622 does not improve AUC. Reverting changes.
Training on augumented user 52029 14/50 current_auc = 0.5863377609108159
User 52029 AUC after training: 0.5787476280834916
User 52029 does not improve AUC. Reverting changes.
Training on augumented user 62209 15/50 current_auc = 0.5863377609108159
User 62209 AUC after training: 0.5844402277039848
User 62209 does not improve AUC. Reverting changes.
Training on augumented user 38606 16/50 current_auc = 0.5863377609108159
User 38606 AUC after training: 0.5863377609108159
User 38606 does not improve AUC. Reverting changes.
Training on augumented user 1001 17/50 current_auc = 0.5863377609108159
User 1001 AUC after training: 0.5768500948766603
User 1001 does not improve AUC. Reverting changes.
Training on augumented user 14156 18/50 current_auc = 0.5863377609108159
User 14156 AUC after training: 0.5844402277039847
User 14156 does not improve AUC. Reverting changes.
Training on augumented user 1185 19/50 current_auc = 0.5863377609108159
User 1185 AUC after training: 0.5749525616698292
User 1185 does not improve AUC. Reverting changes.
Training on augumented user 123014 20/50 current_auc = 0.5863377609108159
User 123014 AUC after training: 0.5844402277039848
User 123014 does not improve AUC. Reverting changes.
Training on augumented user 42324 21/50 current_auc = 0.5863377609108159
User 42324 AUC after training: 0.5825426944971537
User 42324 does not improve AUC. Reverting changes.
Training on augumented user 63024 22/50 current_auc = 0.5863377609108159
User 63024 AUC after training: 0.5844402277039848
User 63024 does not improve AUC. Reverting changes.
Training on augumented user 30585 23/50 current_auc = 0.5863377609108159
User 30585 AUC after training: 0.5844402277039848
User 30585 does not improve AUC. Reverting changes.
Training on augumented user 73119 24/50 current_auc = 0.5863377609108159
User 73119 AUC after training: 0.5825426944971537
User 73119 does not improve AUC. Reverting changes.
Training on augumented user 73997 25/50 current_auc = 0.5863377609108159
User 73997 AUC after training: 0.5806451612903226
User 73997 does not improve AUC. Reverting changes.
Training on augumented user 20450 26/50 current_auc = 0.5863377609108159
User 20450 AUC after training: 0.5844402277039848
User 20450 does not improve AUC. Reverting changes.
Training on augumented user 80212 27/50 current_auc = 0.5863377609108159
User 80212 AUC after training: 0.5825426944971537
User 80212 does not improve AUC. Reverting changes.
Training on augumented user 27190 28/50 current_auc = 0.5863377609108159
User 27190 AUC after training: 0.5749525616698292
User 27190 does not improve AUC. Reverting changes.
Training on augumented user 76948 29/50 current_auc = 0.5863377609108159
User 76948 AUC after training: 0.5901328273244781
User 76948 improves AUC. Keeping the model.
Training on augumented user 28640 30/50 current_auc = 0.5901328273244781
User 28640 AUC after training: 0.5863377609108159
User 28640 does not improve AUC. Reverting changes.
Training on augumented user 80457 31/50 current_auc = 0.5901328273244781
User 80457 AUC after training: 0.5863377609108159
User 80457 does not improve AUC. Reverting changes.
Training on augumented user 235 32/50 current_auc = 0.5901328273244781
User 235 AUC after training: 0.5882352941176471
User 235 does not improve AUC. Reverting changes.
Training on augumented user 44076 33/50 current_auc = 0.5901328273244781
User 44076 AUC after training: 0.5844402277039847
User 44076 does not improve AUC. Reverting changes.
Training on augumented user 109951 34/50 current_auc = 0.5901328273244781
User 109951 AUC after training: 0.5882352941176471
User 109951 does not improve AUC. Reverting changes.
Training on augumented user 118674 35/50 current_auc = 0.5901328273244781
User 118674 AUC after training: 0.5863377609108159
User 118674 does not improve AUC. Reverting changes.
Training on augumented user 24419 36/50 current_auc = 0.5901328273244781
User 24419 AUC after training: 0.5920303605313093
User 24419 improves AUC. Keeping the model.
Training on augumented user 81906 37/50 current_auc = 0.5920303605313093
User 81906 AUC after training: 0.5920303605313093
User 81906 does not improve AUC. Reverting changes.
Training on augumented user 5110 38/50 current_auc = 0.5920303605313093
User 5110 AUC after training: 0.5787476280834914
User 5110 does not improve AUC. Reverting changes.
Training on augumented user 29687 39/50 current_auc = 0.5920303605313093
User 29687 AUC after training: 0.5844402277039848
User 29687 does not improve AUC. Reverting changes.
Training on augumented user 107123 40/50 current_auc = 0.5920303605313093
User 107123 AUC after training: 0.5844402277039848
User 107123 does not improve AUC. Reverting changes.
Training on augumented user 119367 41/50 current_auc = 0.5920303605313093
User 119367 AUC after training: 0.5749525616698292
User 119367 does not improve AUC. Reverting changes.
Training on augumented user 111089 42/50 current_auc = 0.5920303605313093
User 111089 AUC after training: 0.5920303605313093
User 111089 does not improve AUC. Reverting changes.
Training on augumented user 127274 43/50 current_auc = 0.5920303605313093
User 127274 AUC after training: 0.5939278937381405
User 127274 improves AUC. Keeping the model.
Training on augumented user 2886 44/50 current_auc = 0.5939278937381405
User 2886 AUC after training: 0.5901328273244781
User 2886 does not improve AUC. Reverting changes.
Training on augumented user 138059 45/50 current_auc = 0.5939278937381405
User 138059 AUC after training: 0.5939278937381405
User 138059 does not improve AUC. Reverting changes.
Training on augumented user 133534 46/50 current_auc = 0.5939278937381405
User 133534 AUC after training: 0.5920303605313093
User 133534 does not improve AUC. Reverting changes.
Training on augumented user 119890 47/50 current_auc = 0.5939278937381405
User 119890 AUC after training: 0.5920303605313093
User 119890 does not improve AUC. Reverting changes.
Training on augumented user 17268 48/50 current_auc = 0.5939278937381405
User 17268 AUC after training: 0.5901328273244781
User 17268 does not improve AUC. Reverting changes.
Training on augumented user 37869 49/50 current_auc = 0.5939278937381405
User 37869 AUC after training: 0.5901328273244781
User 37869 does not improve AUC. Reverting changes.
[2024-12-02 20:04:24.379208] start test user 102001 258/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:04:24.900501] start test user 102001 258/567 recall augumented users by random, augumented_users = [99521, 64357, 97993, 45780, 58281, 116601, 2021, 19622, 79436, 102414, 129371, 81442, 138155, 129798, 119259, 131043, 137292, 14218, 57349, 80560, 129433, 98559, 57428, 90165, 8964, 94734, 76824, 80520, 95392, 39876, 71013, 4135, 62451, 59968, 95770, 98014, 128618, 66517, 30047, 102862, 130220, 131033, 86592, 95035, 62618, 95446, 82400, 136686, 2118, 87845]
[2024-12-02 20:04:24.918678] user = 102001 Cloud 258/567
[2024-12-02 20:04:24.954849] user = 102001 Local 258/567
[2024-12-02 20:04:25.091607] user = 102001 Local+ 258/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:04:27.900204] user = 102001 MPDA- 258/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6524899474172594
Training on augumented user 99521 0/50 current_auc = 0.6524899474172594
User 99521 AUC after training: 0.6518713269409218
User 99521 does not improve AUC. Reverting changes.
Training on augumented user 64357 1/50 current_auc = 0.6524899474172594
User 64357 AUC after training: 0.652438395710898
User 64357 does not improve AUC. Reverting changes.
Training on augumented user 97993 2/50 current_auc = 0.6524899474172594
User 97993 AUC after training: 0.6516135684091144
User 97993 does not improve AUC. Reverting changes.
Training on augumented user 45780 3/50 current_auc = 0.6524899474172594
User 45780 AUC after training: 0.6524899474172594
User 45780 does not improve AUC. Reverting changes.
Training on augumented user 58281 4/50 current_auc = 0.6524899474172594
User 58281 AUC after training: 0.6525414991236209
User 58281 improves AUC. Keeping the model.
Training on augumented user 116601 5/50 current_auc = 0.6525414991236209
User 116601 AUC after training: 0.6525930508299824
User 116601 improves AUC. Keeping the model.
Training on augumented user 2021 6/50 current_auc = 0.6525930508299824
User 2021 AUC after training: 0.6523868440045365
User 2021 does not improve AUC. Reverting changes.
Training on augumented user 19622 7/50 current_auc = 0.6525930508299824
User 19622 AUC after training: 0.6529539127745129
User 19622 improves AUC. Keeping the model.
Training on augumented user 79436 8/50 current_auc = 0.6529539127745129
User 79436 AUC after training: 0.653031240334055
User 79436 improves AUC. Keeping the model.
Training on augumented user 102414 9/50 current_auc = 0.653031240334055
User 102414 AUC after training: 0.6528508093617897
User 102414 does not improve AUC. Reverting changes.
Training on augumented user 129371 10/50 current_auc = 0.653031240334055
User 129371 AUC after training: 0.6532889988658624
User 129371 improves AUC. Keeping the model.
Training on augumented user 81442 11/50 current_auc = 0.6532889988658624
User 81442 AUC after training: 0.6530570161872358
User 81442 does not improve AUC. Reverting changes.
Training on augumented user 138155 12/50 current_auc = 0.6532889988658624
User 138155 AUC after training: 0.6538560676358387
User 138155 improves AUC. Keeping the model.
Training on augumented user 129798 13/50 current_auc = 0.6538560676358387
User 129798 AUC after training: 0.6534436539849469
User 129798 does not improve AUC. Reverting changes.
Training on augumented user 119259 14/50 current_auc = 0.6538560676358387
User 119259 AUC after training: 0.6525414991236209
User 119259 does not improve AUC. Reverting changes.
Training on augumented user 131043 15/50 current_auc = 0.6538560676358387
User 131043 AUC after training: 0.6536498608103929
User 131043 does not improve AUC. Reverting changes.
Training on augumented user 137292 16/50 current_auc = 0.6538560676358387
User 137292 AUC after training: 0.6535983091040314
User 137292 does not improve AUC. Reverting changes.
Training on augumented user 14218 17/50 current_auc = 0.6538560676358387
User 14218 AUC after training: 0.6534952056913083
User 14218 does not improve AUC. Reverting changes.
Training on augumented user 57349 18/50 current_auc = 0.6538560676358387
User 57349 AUC after training: 0.6525930508299824
User 57349 does not improve AUC. Reverting changes.
Training on augumented user 80560 19/50 current_auc = 0.6538560676358387
User 80560 AUC after training: 0.6534436539849469
User 80560 does not improve AUC. Reverting changes.
Training on augumented user 129433 20/50 current_auc = 0.6538560676358387
User 129433 AUC after training: 0.6530827920404165
User 129433 does not improve AUC. Reverting changes.
Training on augumented user 98559 21/50 current_auc = 0.6538560676358387
User 98559 AUC after training: 0.6532889988658624
User 98559 does not improve AUC. Reverting changes.
Training on augumented user 57428 22/50 current_auc = 0.6538560676358387
User 57428 AUC after training: 0.6539591710485617
User 57428 improves AUC. Keeping the model.
Training on augumented user 90165 23/50 current_auc = 0.6539591710485617
User 90165 AUC after training: 0.6534952056913084
User 90165 does not improve AUC. Reverting changes.
Training on augumented user 8964 24/50 current_auc = 0.6539591710485617
User 8964 AUC after training: 0.6537529642231158
User 8964 does not improve AUC. Reverting changes.
Training on augumented user 94734 25/50 current_auc = 0.6539591710485617
User 94734 AUC after training: 0.6537529642231158
User 94734 does not improve AUC. Reverting changes.
Training on augumented user 76824 26/50 current_auc = 0.6539591710485617
User 76824 AUC after training: 0.6540107227549232
User 76824 improves AUC. Keeping the model.
Training on augumented user 80520 27/50 current_auc = 0.6540107227549232
User 80520 AUC after training: 0.6537014125167543
User 80520 does not improve AUC. Reverting changes.
Training on augumented user 95392 28/50 current_auc = 0.6540107227549232
User 95392 AUC after training: 0.6534436539849469
User 95392 does not improve AUC. Reverting changes.
Training on augumented user 39876 29/50 current_auc = 0.6540107227549232
User 39876 AUC after training: 0.653031240334055
User 39876 does not improve AUC. Reverting changes.
Training on augumented user 71013 30/50 current_auc = 0.6540107227549232
User 71013 AUC after training: 0.6529539127745128
User 71013 does not improve AUC. Reverting changes.
Training on augumented user 4135 31/50 current_auc = 0.6540107227549232
User 4135 AUC after training: 0.653933395195381
User 4135 does not improve AUC. Reverting changes.
Training on augumented user 62451 32/50 current_auc = 0.6540107227549232
User 62451 AUC after training: 0.6534952056913085
User 62451 does not improve AUC. Reverting changes.
Training on augumented user 59968 33/50 current_auc = 0.6540107227549232
User 59968 AUC after training: 0.6524899474172594
User 59968 does not improve AUC. Reverting changes.
Training on augumented user 95770 34/50 current_auc = 0.6540107227549232
User 95770 AUC after training: 0.6530570161872359
User 95770 does not improve AUC. Reverting changes.
Training on augumented user 98014 35/50 current_auc = 0.6540107227549232
User 98014 AUC after training: 0.6533147747190432
User 98014 does not improve AUC. Reverting changes.
Training on augumented user 128618 36/50 current_auc = 0.6540107227549232
User 128618 AUC after training: 0.6537014125167543
User 128618 does not improve AUC. Reverting changes.
Training on augumented user 66517 37/50 current_auc = 0.6540107227549232
User 66517 AUC after training: 0.6531343437467779
User 66517 does not improve AUC. Reverting changes.
Training on augumented user 30047 38/50 current_auc = 0.6540107227549232
User 30047 AUC after training: 0.6520775337663677
User 30047 does not improve AUC. Reverting changes.
Training on augumented user 102862 39/50 current_auc = 0.6540107227549232
User 102862 AUC after training: 0.6534436539849469
User 102862 does not improve AUC. Reverting changes.
Training on augumented user 130220 40/50 current_auc = 0.6540107227549232
User 130220 AUC after training: 0.6535983091040314
User 130220 does not improve AUC. Reverting changes.
Training on augumented user 131033 41/50 current_auc = 0.6540107227549232
User 131033 AUC after training: 0.6538560676358387
User 131033 does not improve AUC. Reverting changes.
Training on augumented user 86592 42/50 current_auc = 0.6540107227549232
User 86592 AUC after training: 0.6551706361480564
User 86592 improves AUC. Keeping the model.
Training on augumented user 95035 43/50 current_auc = 0.6551706361480564
User 95035 AUC after training: 0.6548613259098875
User 95035 does not improve AUC. Reverting changes.
Training on augumented user 62618 44/50 current_auc = 0.6551706361480564
User 62618 AUC after training: 0.6545004639653572
User 62618 does not improve AUC. Reverting changes.
Training on augumented user 95446 45/50 current_auc = 0.6551706361480564
User 95446 AUC after training: 0.6552737395607795
User 95446 improves AUC. Keeping the model.
Training on augumented user 82400 46/50 current_auc = 0.6552737395607795
User 82400 AUC after training: 0.6550675327353335
User 82400 does not improve AUC. Reverting changes.
Training on augumented user 136686 47/50 current_auc = 0.6552737395607795
User 136686 AUC after training: 0.6549644293226106
User 136686 does not improve AUC. Reverting changes.
Training on augumented user 2118 48/50 current_auc = 0.6552737395607795
User 2118 AUC after training: 0.6553252912671409
User 2118 improves AUC. Keeping the model.
Training on augumented user 87845 49/50 current_auc = 0.6553252912671409
User 87845 AUC after training: 0.655222187854418
User 87845 does not improve AUC. Reverting changes.
[2024-12-02 20:04:56.861491] start test user 102025 259/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:04:57.514443] start test user 102025 259/567 recall augumented users by random, augumented_users = [51471, 107115, 47966, 20419, 38217, 94007, 17630, 104639, 102128, 5228, 128871, 134171, 128322, 104097, 79432, 9165, 120323, 58770, 64983, 84750, 25575, 91371, 134452, 63606, 52402, 111972, 36223, 108836, 131106, 138039, 137699, 89039, 46443, 59009, 65993, 62588, 134844, 99214, 11923, 126926, 61639, 64146, 111642, 106473, 81902, 51753, 4919, 20998, 3452, 53732]
[2024-12-02 20:04:57.533005] user = 102025 Cloud 259/567
[2024-12-02 20:04:57.584132] user = 102025 Local 259/567
[2024-12-02 20:04:57.950245] user = 102025 Local+ 259/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:04:59.734967] user = 102025 MPDA- 259/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6200641156116425
Training on augumented user 51471 0/50 current_auc = 0.6200641156116425
User 51471 AUC after training: 0.6202276758454248
User 51471 improves AUC. Keeping the model.
Training on augumented user 107115 1/50 current_auc = 0.6202276758454248
User 107115 AUC after training: 0.6200604809397808
User 107115 does not improve AUC. Reverting changes.
Training on augumented user 47966 2/50 current_auc = 0.6202276758454248
User 47966 AUC after training: 0.620140443720741
User 47966 does not improve AUC. Reverting changes.
Training on augumented user 20419 3/50 current_auc = 0.6202276758454248
User 20419 AUC after training: 0.6201949637986683
User 20419 does not improve AUC. Reverting changes.
Training on augumented user 38217 4/50 current_auc = 0.6202276758454248
User 38217 AUC after training: 0.6200132302055771
User 38217 does not improve AUC. Reverting changes.
Training on augumented user 94007 5/50 current_auc = 0.6202276758454248
User 94007 AUC after training: 0.620304003954523
User 94007 improves AUC. Keeping the model.
Training on augumented user 17630 6/50 current_auc = 0.620304003954523
User 17630 AUC after training: 0.6203730627198976
User 17630 improves AUC. Keeping the model.
Training on augumented user 104639 7/50 current_auc = 0.6203730627198976
User 104639 AUC after training: 0.6201767904393591
User 104639 does not improve AUC. Reverting changes.
Training on augumented user 102128 8/50 current_auc = 0.6203730627198976
User 102128 AUC after training: 0.6201731557674973
User 102128 does not improve AUC. Reverting changes.
Training on augumented user 5228 9/50 current_auc = 0.6203730627198976
User 5228 AUC after training: 0.6203585240324503
User 5228 does not improve AUC. Reverting changes.
Training on augumented user 128871 10/50 current_auc = 0.6203730627198976
User 128871 AUC after training: 0.620409409438516
User 128871 improves AUC. Keeping the model.
Training on augumented user 134171 11/50 current_auc = 0.620409409438516
User 134171 AUC after training: 0.6200822889709517
User 134171 does not improve AUC. Reverting changes.
Training on augumented user 128322 12/50 current_auc = 0.620409409438516
User 128322 AUC after training: 0.6201622517519119
User 128322 does not improve AUC. Reverting changes.
Training on augumented user 104097 13/50 current_auc = 0.620409409438516
User 104097 AUC after training: 0.6203294466575557
User 104097 does not improve AUC. Reverting changes.
Training on augumented user 79432 14/50 current_auc = 0.620409409438516
User 79432 AUC after training: 0.6204602948445814
User 79432 improves AUC. Keeping the model.
Training on augumented user 9165 15/50 current_auc = 0.6204602948445814
User 9165 AUC after training: 0.6205329882818179
User 9165 improves AUC. Keeping the model.
Training on augumented user 120323 16/50 current_auc = 0.6205329882818179
User 120323 AUC after training: 0.6202785612514902
User 120323 does not improve AUC. Reverting changes.
Training on augumented user 58770 17/50 current_auc = 0.6205329882818179
User 58770 AUC after training: 0.6205184495943707
User 58770 does not improve AUC. Reverting changes.
Training on augumented user 64983 18/50 current_auc = 0.6205329882818179
User 64983 AUC after training: 0.6203294466575557
User 64983 does not improve AUC. Reverting changes.
Training on augumented user 84750 19/50 current_auc = 0.6205329882818179
User 84750 AUC after training: 0.6205039109069233
User 84750 does not improve AUC. Reverting changes.
Training on augumented user 25575 20/50 current_auc = 0.6205329882818179
User 25575 AUC after training: 0.6206420284376727
User 25575 improves AUC. Keeping the model.
Training on augumented user 91371 21/50 current_auc = 0.6206420284376727
User 91371 AUC after training: 0.6205402576255417
User 91371 does not improve AUC. Reverting changes.
Training on augumented user 134452 22/50 current_auc = 0.6206420284376727
User 134452 AUC after training: 0.6204021400947922
User 134452 does not improve AUC. Reverting changes.
Training on augumented user 63606 23/50 current_auc = 0.6206420284376727
User 63606 AUC after training: 0.6208310313744876
User 63606 improves AUC. Keeping the model.
Training on augumented user 52402 24/50 current_auc = 0.6208310313744876
User 52402 AUC after training: 0.6210927277485387
User 52402 improves AUC. Keeping the model.
Training on augumented user 111972 25/50 current_auc = 0.6210927277485387
User 111972 AUC after training: 0.6209000901398622
User 111972 does not improve AUC. Reverting changes.
Training on augumented user 36223 26/50 current_auc = 0.6210927277485387
User 36223 AUC after training: 0.6209618795615132
User 36223 does not improve AUC. Reverting changes.
Training on augumented user 108836 27/50 current_auc = 0.6210927277485387
User 108836 AUC after training: 0.6211581518420517
User 108836 improves AUC. Keeping the model.
Training on augumented user 131106 28/50 current_auc = 0.6211581518420517
User 131106 AUC after training: 0.621027303655026
User 131106 does not improve AUC. Reverting changes.
Training on augumented user 138039 29/50 current_auc = 0.6211581518420517
User 138039 AUC after training: 0.6208164926870402
User 138039 does not improve AUC. Reverting changes.
Training on augumented user 137699 30/50 current_auc = 0.6211581518420517
User 137699 AUC after training: 0.621089093076677
User 137699 does not improve AUC. Reverting changes.
Training on augumented user 89039 31/50 current_auc = 0.6211581518420517
User 89039 AUC after training: 0.6209509755459277
User 89039 does not improve AUC. Reverting changes.
Training on augumented user 46443 32/50 current_auc = 0.6211581518420517
User 46443 AUC after training: 0.6210781890610916
User 46443 does not improve AUC. Reverting changes.
Training on augumented user 59009 33/50 current_auc = 0.6211581518420517
User 59009 AUC after training: 0.6212163065918408
User 59009 improves AUC. Keeping the model.
Training on augumented user 65993 34/50 current_auc = 0.6212163065918408
User 65993 AUC after training: 0.6212272106074265
User 65993 improves AUC. Keeping the model.
Training on augumented user 62588 35/50 current_auc = 0.6212272106074265
User 62588 AUC after training: 0.6209255328428949
User 62588 does not improve AUC. Reverting changes.
Training on augumented user 134844 36/50 current_auc = 0.6212272106074265
User 134844 AUC after training: 0.6206492977813962
User 134844 does not improve AUC. Reverting changes.
Training on augumented user 99214 37/50 current_auc = 0.6212272106074265
User 99214 AUC after training: 0.6214016748567939
User 99214 improves AUC. Keeping the model.
Training on augumented user 11923 38/50 current_auc = 0.6214016748567939
User 11923 AUC after training: 0.6212562879823209
User 11923 does not improve AUC. Reverting changes.
Training on augumented user 126926 39/50 current_auc = 0.6214016748567939
User 126926 AUC after training: 0.622372132243901
User 126926 improves AUC. Keeping the model.
Training on augumented user 61639 40/50 current_auc = 0.622372132243901
User 61639 AUC after training: 0.6225974818993341
User 61639 improves AUC. Keeping the model.
Training on augumented user 64146 41/50 current_auc = 0.6225974818993341
User 64146 AUC after training: 0.6228628129452474
User 64146 improves AUC. Keeping the model.
Training on augumented user 111642 42/50 current_auc = 0.6228628129452474
User 111642 AUC after training: 0.6230772585850949
User 111642 improves AUC. Keeping the model.
Training on augumented user 106473 43/50 current_auc = 0.6230772585850949
User 106473 AUC after training: 0.6227392341019452
User 106473 does not improve AUC. Reverting changes.
Training on augumented user 81902 44/50 current_auc = 0.6230772585850949
User 81902 AUC after training: 0.6232117414439824
User 81902 improves AUC. Keeping the model.
Training on augumented user 51753 45/50 current_auc = 0.6232117414439824
User 51753 AUC after training: 0.6231208746474368
User 51753 does not improve AUC. Reverting changes.
Training on augumented user 4919 46/50 current_auc = 0.6232117414439824
User 4919 AUC after training: 0.6234225524119681
User 4919 improves AUC. Keeping the model.
Training on augumented user 20998 47/50 current_auc = 0.6234225524119681
User 20998 AUC after training: 0.6239095984414527
User 20998 improves AUC. Keeping the model.
Training on augumented user 3452 48/50 current_auc = 0.6239095984414527
User 3452 AUC after training: 0.6244984152830682
User 3452 improves AUC. Keeping the model.
Training on augumented user 53732 49/50 current_auc = 0.6244984152830682
User 53732 AUC after training: 0.6242985083306679
User 53732 does not improve AUC. Reverting changes.
[2024-12-02 20:05:31.726328] start test user 102037 260/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:05:32.315257] start test user 102037 260/567 recall augumented users by random, augumented_users = [23050, 95955, 65628, 34676, 130163, 135060, 86669, 11510, 90760, 41088, 26407, 126297, 30747, 29781, 62923, 58003, 24393, 94963, 4433, 41975, 69577, 32880, 77307, 53757, 64078, 127696, 79254, 124342, 17624, 23540, 103147, 65709, 53046, 86142, 73026, 95145, 82494, 82463, 112937, 86743, 75040, 133752, 60124, 36484, 26562, 89049, 91028, 88472, 6126, 98851]
[2024-12-02 20:05:32.331046] user = 102037 Cloud 260/567
[2024-12-02 20:05:32.349300] user = 102037 Local 260/567
[2024-12-02 20:05:32.406981] user = 102037 Local+ 260/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:05:34.776055] user = 102037 MPDA- 260/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5519125683060109
Training on augumented user 23050 0/50 current_auc = 0.5519125683060109
User 23050 AUC after training: 0.5521857923497268
User 23050 improves AUC. Keeping the model.
Training on augumented user 95955 1/50 current_auc = 0.5521857923497268
User 95955 AUC after training: 0.5521857923497269
User 95955 improves AUC. Keeping the model.
Training on augumented user 65628 2/50 current_auc = 0.5521857923497269
User 65628 AUC after training: 0.5521857923497268
User 65628 does not improve AUC. Reverting changes.
Training on augumented user 34676 3/50 current_auc = 0.5521857923497269
User 34676 AUC after training: 0.5520491803278689
User 34676 does not improve AUC. Reverting changes.
Training on augumented user 130163 4/50 current_auc = 0.5521857923497269
User 130163 AUC after training: 0.5523224043715848
User 130163 improves AUC. Keeping the model.
Training on augumented user 135060 5/50 current_auc = 0.5523224043715848
User 135060 AUC after training: 0.5519125683060109
User 135060 does not improve AUC. Reverting changes.
Training on augumented user 86669 6/50 current_auc = 0.5523224043715848
User 86669 AUC after training: 0.5518442622950819
User 86669 does not improve AUC. Reverting changes.
Training on augumented user 11510 7/50 current_auc = 0.5523224043715848
User 11510 AUC after training: 0.5520491803278689
User 11510 does not improve AUC. Reverting changes.
Training on augumented user 90760 8/50 current_auc = 0.5523224043715848
User 90760 AUC after training: 0.5521857923497268
User 90760 does not improve AUC. Reverting changes.
Training on augumented user 41088 9/50 current_auc = 0.5523224043715848
User 41088 AUC after training: 0.5519125683060109
User 41088 does not improve AUC. Reverting changes.
Training on augumented user 26407 10/50 current_auc = 0.5523224043715848
User 26407 AUC after training: 0.5521857923497268
User 26407 does not improve AUC. Reverting changes.
Training on augumented user 126297 11/50 current_auc = 0.5523224043715848
User 126297 AUC after training: 0.5521857923497268
User 126297 does not improve AUC. Reverting changes.
Training on augumented user 30747 12/50 current_auc = 0.5523224043715848
User 30747 AUC after training: 0.5516393442622951
User 30747 does not improve AUC. Reverting changes.
Training on augumented user 29781 13/50 current_auc = 0.5523224043715848
User 29781 AUC after training: 0.5521857923497268
User 29781 does not improve AUC. Reverting changes.
Training on augumented user 62923 14/50 current_auc = 0.5523224043715848
User 62923 AUC after training: 0.5521857923497269
User 62923 does not improve AUC. Reverting changes.
Training on augumented user 58003 15/50 current_auc = 0.5523224043715848
User 58003 AUC after training: 0.551912568306011
User 58003 does not improve AUC. Reverting changes.
Training on augumented user 24393 16/50 current_auc = 0.5523224043715848
User 24393 AUC after training: 0.5524590163934426
User 24393 improves AUC. Keeping the model.
Training on augumented user 94963 17/50 current_auc = 0.5524590163934426
User 94963 AUC after training: 0.5519125683060109
User 94963 does not improve AUC. Reverting changes.
Training on augumented user 4433 18/50 current_auc = 0.5524590163934426
User 4433 AUC after training: 0.5524590163934426
User 4433 does not improve AUC. Reverting changes.
Training on augumented user 41975 19/50 current_auc = 0.5524590163934426
User 41975 AUC after training: 0.5520491803278689
User 41975 does not improve AUC. Reverting changes.
Training on augumented user 69577 20/50 current_auc = 0.5524590163934426
User 69577 AUC after training: 0.5513661202185792
User 69577 does not improve AUC. Reverting changes.
Training on augumented user 32880 21/50 current_auc = 0.5524590163934426
User 32880 AUC after training: 0.5520491803278689
User 32880 does not improve AUC. Reverting changes.
Training on augumented user 77307 22/50 current_auc = 0.5524590163934426
User 77307 AUC after training: 0.5515027322404371
User 77307 does not improve AUC. Reverting changes.
Training on augumented user 53757 23/50 current_auc = 0.5524590163934426
User 53757 AUC after training: 0.5524590163934426
User 53757 does not improve AUC. Reverting changes.
Training on augumented user 64078 24/50 current_auc = 0.5524590163934426
User 64078 AUC after training: 0.5521857923497269
User 64078 does not improve AUC. Reverting changes.
Training on augumented user 127696 25/50 current_auc = 0.5524590163934426
User 127696 AUC after training: 0.5527322404371585
User 127696 improves AUC. Keeping the model.
Training on augumented user 79254 26/50 current_auc = 0.5527322404371585
User 79254 AUC after training: 0.5519125683060109
User 79254 does not improve AUC. Reverting changes.
Training on augumented user 124342 27/50 current_auc = 0.5527322404371585
User 124342 AUC after training: 0.5523224043715846
User 124342 does not improve AUC. Reverting changes.
Training on augumented user 17624 28/50 current_auc = 0.5527322404371585
User 17624 AUC after training: 0.5524590163934426
User 17624 does not improve AUC. Reverting changes.
Training on augumented user 23540 29/50 current_auc = 0.5527322404371585
User 23540 AUC after training: 0.5521857923497269
User 23540 does not improve AUC. Reverting changes.
Training on augumented user 103147 30/50 current_auc = 0.5527322404371585
User 103147 AUC after training: 0.5519125683060109
User 103147 does not improve AUC. Reverting changes.
Training on augumented user 65709 31/50 current_auc = 0.5527322404371585
User 65709 AUC after training: 0.5524590163934426
User 65709 does not improve AUC. Reverting changes.
Training on augumented user 53046 32/50 current_auc = 0.5527322404371585
User 53046 AUC after training: 0.5523224043715846
User 53046 does not improve AUC. Reverting changes.
Training on augumented user 86142 33/50 current_auc = 0.5527322404371585
User 86142 AUC after training: 0.5521857923497269
User 86142 does not improve AUC. Reverting changes.
Training on augumented user 73026 34/50 current_auc = 0.5527322404371585
User 73026 AUC after training: 0.5513661202185792
User 73026 does not improve AUC. Reverting changes.
Training on augumented user 95145 35/50 current_auc = 0.5527322404371585
User 95145 AUC after training: 0.5513661202185792
User 95145 does not improve AUC. Reverting changes.
Training on augumented user 82494 36/50 current_auc = 0.5527322404371585
User 82494 AUC after training: 0.5520491803278689
User 82494 does not improve AUC. Reverting changes.
Training on augumented user 82463 37/50 current_auc = 0.5527322404371585
User 82463 AUC after training: 0.5524590163934426
User 82463 does not improve AUC. Reverting changes.
Training on augumented user 112937 38/50 current_auc = 0.5527322404371585
User 112937 AUC after training: 0.5521857923497269
User 112937 does not improve AUC. Reverting changes.
Training on augumented user 86743 39/50 current_auc = 0.5527322404371585
User 86743 AUC after training: 0.5523224043715848
User 86743 does not improve AUC. Reverting changes.
Training on augumented user 75040 40/50 current_auc = 0.5527322404371585
User 75040 AUC after training: 0.5525956284153006
User 75040 does not improve AUC. Reverting changes.
Training on augumented user 133752 41/50 current_auc = 0.5527322404371585
User 133752 AUC after training: 0.551775956284153
User 133752 does not improve AUC. Reverting changes.
Training on augumented user 60124 42/50 current_auc = 0.5527322404371585
User 60124 AUC after training: 0.5524590163934426
User 60124 does not improve AUC. Reverting changes.
Training on augumented user 36484 43/50 current_auc = 0.5527322404371585
User 36484 AUC after training: 0.5523224043715848
User 36484 does not improve AUC. Reverting changes.
Training on augumented user 26562 44/50 current_auc = 0.5527322404371585
User 26562 AUC after training: 0.5524590163934426
User 26562 does not improve AUC. Reverting changes.
Training on augumented user 89049 45/50 current_auc = 0.5527322404371585
User 89049 AUC after training: 0.5523224043715846
User 89049 does not improve AUC. Reverting changes.
Training on augumented user 91028 46/50 current_auc = 0.5527322404371585
User 91028 AUC after training: 0.5520491803278689
User 91028 does not improve AUC. Reverting changes.
Training on augumented user 88472 47/50 current_auc = 0.5527322404371585
User 88472 AUC after training: 0.5517759562841531
User 88472 does not improve AUC. Reverting changes.
Training on augumented user 6126 48/50 current_auc = 0.5527322404371585
User 6126 AUC after training: 0.5512295081967213
User 6126 does not improve AUC. Reverting changes.
Training on augumented user 98851 49/50 current_auc = 0.5527322404371585
User 98851 AUC after training: 0.5523224043715846
User 98851 does not improve AUC. Reverting changes.
[2024-12-02 20:06:07.796707] start test user 102060 261/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:06:08.278519] start test user 102060 261/567 recall augumented users by random, augumented_users = [133868, 41056, 134171, 49511, 127655, 43194, 47569, 47609, 96740, 87410, 57051, 127369, 45234, 135728, 28890, 105160, 5854, 19548, 59042, 27472, 22786, 17491, 62998, 18955, 17462, 53702, 36582, 35030, 61581, 130888, 87058, 16343, 52728, 78052, 105483, 42022, 63596, 25227, 72463, 62878, 136483, 87507, 29797, 103094, 65735, 132675, 68503, 41693, 2902, 119977]
[2024-12-02 20:06:08.300066] user = 102060 Cloud 261/567
[2024-12-02 20:06:08.324350] user = 102060 Local 261/567
[2024-12-02 20:06:08.440361] user = 102060 Local+ 261/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:06:11.868435] user = 102060 MPDA- 261/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6669642857142857
Training on augumented user 133868 0/50 current_auc = 0.6669642857142857
User 133868 AUC after training: 0.6669642857142857
User 133868 does not improve AUC. Reverting changes.
Training on augumented user 41056 1/50 current_auc = 0.6669642857142857
User 41056 AUC after training: 0.6678571428571428
User 41056 improves AUC. Keeping the model.
Training on augumented user 134171 2/50 current_auc = 0.6678571428571428
User 134171 AUC after training: 0.6678571428571428
User 134171 does not improve AUC. Reverting changes.
Training on augumented user 49511 3/50 current_auc = 0.6678571428571428
User 49511 AUC after training: 0.6696428571428571
User 49511 improves AUC. Keeping the model.
Training on augumented user 127655 4/50 current_auc = 0.6696428571428571
User 127655 AUC after training: 0.6705357142857142
User 127655 improves AUC. Keeping the model.
Training on augumented user 43194 5/50 current_auc = 0.6705357142857142
User 43194 AUC after training: 0.6589285714285715
User 43194 does not improve AUC. Reverting changes.
Training on augumented user 47569 6/50 current_auc = 0.6705357142857142
User 47569 AUC after training: 0.6705357142857142
User 47569 does not improve AUC. Reverting changes.
Training on augumented user 47609 7/50 current_auc = 0.6705357142857142
User 47609 AUC after training: 0.6705357142857142
User 47609 does not improve AUC. Reverting changes.
Training on augumented user 96740 8/50 current_auc = 0.6705357142857142
User 96740 AUC after training: 0.6696428571428571
User 96740 does not improve AUC. Reverting changes.
Training on augumented user 87410 9/50 current_auc = 0.6705357142857142
User 87410 AUC after training: 0.6660714285714285
User 87410 does not improve AUC. Reverting changes.
Training on augumented user 57051 10/50 current_auc = 0.6705357142857142
User 57051 AUC after training: 0.6696428571428571
User 57051 does not improve AUC. Reverting changes.
Training on augumented user 127369 11/50 current_auc = 0.6705357142857142
User 127369 AUC after training: 0.6705357142857142
User 127369 does not improve AUC. Reverting changes.
Training on augumented user 45234 12/50 current_auc = 0.6705357142857142
User 45234 AUC after training: 0.6696428571428571
User 45234 does not improve AUC. Reverting changes.
Training on augumented user 135728 13/50 current_auc = 0.6705357142857142
User 135728 AUC after training: 0.6705357142857142
User 135728 does not improve AUC. Reverting changes.
Training on augumented user 28890 14/50 current_auc = 0.6705357142857142
User 28890 AUC after training: 0.6660714285714285
User 28890 does not improve AUC. Reverting changes.
Training on augumented user 105160 15/50 current_auc = 0.6705357142857142
User 105160 AUC after training: 0.6696428571428571
User 105160 does not improve AUC. Reverting changes.
Training on augumented user 5854 16/50 current_auc = 0.6705357142857142
User 5854 AUC after training: 0.6660714285714285
User 5854 does not improve AUC. Reverting changes.
Training on augumented user 19548 17/50 current_auc = 0.6705357142857142
User 19548 AUC after training: 0.6696428571428571
User 19548 does not improve AUC. Reverting changes.
Training on augumented user 59042 18/50 current_auc = 0.6705357142857142
User 59042 AUC after training: 0.6705357142857142
User 59042 does not improve AUC. Reverting changes.
Training on augumented user 27472 19/50 current_auc = 0.6705357142857142
User 27472 AUC after training: 0.6696428571428572
User 27472 does not improve AUC. Reverting changes.
Training on augumented user 22786 20/50 current_auc = 0.6705357142857142
User 22786 AUC after training: 0.6678571428571428
User 22786 does not improve AUC. Reverting changes.
Training on augumented user 17491 21/50 current_auc = 0.6705357142857142
User 17491 AUC after training: 0.6705357142857142
User 17491 does not improve AUC. Reverting changes.
Training on augumented user 62998 22/50 current_auc = 0.6705357142857142
User 62998 AUC after training: 0.6705357142857142
User 62998 does not improve AUC. Reverting changes.
Training on augumented user 18955 23/50 current_auc = 0.6705357142857142
User 18955 AUC after training: 0.6687500000000001
User 18955 does not improve AUC. Reverting changes.
Training on augumented user 17462 24/50 current_auc = 0.6705357142857142
User 17462 AUC after training: 0.6678571428571428
User 17462 does not improve AUC. Reverting changes.
Training on augumented user 53702 25/50 current_auc = 0.6705357142857142
User 53702 AUC after training: 0.6660714285714285
User 53702 does not improve AUC. Reverting changes.
Training on augumented user 36582 26/50 current_auc = 0.6705357142857142
User 36582 AUC after training: 0.6705357142857142
User 36582 does not improve AUC. Reverting changes.
Training on augumented user 35030 27/50 current_auc = 0.6705357142857142
User 35030 AUC after training: 0.6705357142857142
User 35030 does not improve AUC. Reverting changes.
Training on augumented user 61581 28/50 current_auc = 0.6705357142857142
User 61581 AUC after training: 0.6705357142857142
User 61581 does not improve AUC. Reverting changes.
Training on augumented user 130888 29/50 current_auc = 0.6705357142857142
User 130888 AUC after training: 0.6678571428571428
User 130888 does not improve AUC. Reverting changes.
Training on augumented user 87058 30/50 current_auc = 0.6705357142857142
User 87058 AUC after training: 0.6705357142857142
User 87058 does not improve AUC. Reverting changes.
Training on augumented user 16343 31/50 current_auc = 0.6705357142857142
User 16343 AUC after training: 0.6723214285714286
User 16343 improves AUC. Keeping the model.
Training on augumented user 52728 32/50 current_auc = 0.6723214285714286
User 52728 AUC after training: 0.6723214285714286
User 52728 does not improve AUC. Reverting changes.
Training on augumented user 78052 33/50 current_auc = 0.6723214285714286
User 78052 AUC after training: 0.6678571428571429
User 78052 does not improve AUC. Reverting changes.
Training on augumented user 105483 34/50 current_auc = 0.6723214285714286
User 105483 AUC after training: 0.6678571428571429
User 105483 does not improve AUC. Reverting changes.
Training on augumented user 42022 35/50 current_auc = 0.6723214285714286
User 42022 AUC after training: 0.6705357142857142
User 42022 does not improve AUC. Reverting changes.
Training on augumented user 63596 36/50 current_auc = 0.6723214285714286
User 63596 AUC after training: 0.6517857142857142
User 63596 does not improve AUC. Reverting changes.
Training on augumented user 25227 37/50 current_auc = 0.6723214285714286
User 25227 AUC after training: 0.6696428571428572
User 25227 does not improve AUC. Reverting changes.
Training on augumented user 72463 38/50 current_auc = 0.6723214285714286
User 72463 AUC after training: 0.6678571428571429
User 72463 does not improve AUC. Reverting changes.
Training on augumented user 62878 39/50 current_auc = 0.6723214285714286
User 62878 AUC after training: 0.6741071428571429
User 62878 improves AUC. Keeping the model.
Training on augumented user 136483 40/50 current_auc = 0.6741071428571429
User 136483 AUC after training: 0.6705357142857142
User 136483 does not improve AUC. Reverting changes.
Training on augumented user 87507 41/50 current_auc = 0.6741071428571429
User 87507 AUC after training: 0.6741071428571429
User 87507 does not improve AUC. Reverting changes.
Training on augumented user 29797 42/50 current_auc = 0.6741071428571429
User 29797 AUC after training: 0.6660714285714285
User 29797 does not improve AUC. Reverting changes.
Training on augumented user 103094 43/50 current_auc = 0.6741071428571429
User 103094 AUC after training: 0.6741071428571429
User 103094 does not improve AUC. Reverting changes.
Training on augumented user 65735 44/50 current_auc = 0.6741071428571429
User 65735 AUC after training: 0.6723214285714286
User 65735 does not improve AUC. Reverting changes.
Training on augumented user 132675 45/50 current_auc = 0.6741071428571429
User 132675 AUC after training: 0.6705357142857142
User 132675 does not improve AUC. Reverting changes.
Training on augumented user 68503 46/50 current_auc = 0.6741071428571429
User 68503 AUC after training: 0.6723214285714286
User 68503 does not improve AUC. Reverting changes.
Training on augumented user 41693 47/50 current_auc = 0.6741071428571429
User 41693 AUC after training: 0.6696428571428572
User 41693 does not improve AUC. Reverting changes.
Training on augumented user 2902 48/50 current_auc = 0.6741071428571429
User 2902 AUC after training: 0.6687500000000001
User 2902 does not improve AUC. Reverting changes.
Training on augumented user 119977 49/50 current_auc = 0.6741071428571429
User 119977 AUC after training: 0.6741071428571429
User 119977 does not improve AUC. Reverting changes.
[2024-12-02 20:06:45.488285] start test user 102069 262/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:06:46.088382] start test user 102069 262/567 recall augumented users by random, augumented_users = [85121, 86259, 41769, 506, 10286, 132731, 2355, 3636, 22708, 12548, 44684, 130983, 108311, 91564, 14238, 122856, 1029, 111595, 50966, 134976, 44308, 24708, 44623, 13840, 73708, 37502, 104884, 39399, 54106, 70738, 32403, 67908, 117594, 91138, 127123, 136296, 37402, 136259, 111538, 40299, 50389, 75742, 58891, 99824, 97719, 110140, 46897, 26376, 104848, 119111]
[2024-12-02 20:06:46.102468] user = 102069 Cloud 262/567
[2024-12-02 20:06:46.112387] user = 102069 Local 262/567
[2024-12-02 20:06:46.130160] user = 102069 Local+ 262/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:06:48.215317] user = 102069 MPDA- 262/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.696969696969697
Training on augumented user 85121 0/50 current_auc = 0.696969696969697
User 85121 AUC after training: 0.6868686868686869
User 85121 does not improve AUC. Reverting changes.
Training on augumented user 86259 1/50 current_auc = 0.696969696969697
User 86259 AUC after training: 0.6868686868686869
User 86259 does not improve AUC. Reverting changes.
Training on augumented user 41769 2/50 current_auc = 0.696969696969697
User 41769 AUC after training: 0.696969696969697
User 41769 does not improve AUC. Reverting changes.
Training on augumented user 506 3/50 current_auc = 0.696969696969697
User 506 AUC after training: 0.6868686868686869
User 506 does not improve AUC. Reverting changes.
Training on augumented user 10286 4/50 current_auc = 0.696969696969697
User 10286 AUC after training: 0.6868686868686869
User 10286 does not improve AUC. Reverting changes.
Training on augumented user 132731 5/50 current_auc = 0.696969696969697
User 132731 AUC after training: 0.6868686868686869
User 132731 does not improve AUC. Reverting changes.
Training on augumented user 2355 6/50 current_auc = 0.696969696969697
User 2355 AUC after training: 0.6868686868686869
User 2355 does not improve AUC. Reverting changes.
Training on augumented user 3636 7/50 current_auc = 0.696969696969697
User 3636 AUC after training: 0.696969696969697
User 3636 does not improve AUC. Reverting changes.
Training on augumented user 22708 8/50 current_auc = 0.696969696969697
User 22708 AUC after training: 0.6868686868686869
User 22708 does not improve AUC. Reverting changes.
Training on augumented user 12548 9/50 current_auc = 0.696969696969697
User 12548 AUC after training: 0.696969696969697
User 12548 does not improve AUC. Reverting changes.
Training on augumented user 44684 10/50 current_auc = 0.696969696969697
User 44684 AUC after training: 0.696969696969697
User 44684 does not improve AUC. Reverting changes.
Training on augumented user 130983 11/50 current_auc = 0.696969696969697
User 130983 AUC after training: 0.696969696969697
User 130983 does not improve AUC. Reverting changes.
Training on augumented user 108311 12/50 current_auc = 0.696969696969697
User 108311 AUC after training: 0.6868686868686869
User 108311 does not improve AUC. Reverting changes.
Training on augumented user 91564 13/50 current_auc = 0.696969696969697
User 91564 AUC after training: 0.696969696969697
User 91564 does not improve AUC. Reverting changes.
Training on augumented user 14238 14/50 current_auc = 0.696969696969697
User 14238 AUC after training: 0.696969696969697
User 14238 does not improve AUC. Reverting changes.
Training on augumented user 122856 15/50 current_auc = 0.696969696969697
User 122856 AUC after training: 0.6868686868686869
User 122856 does not improve AUC. Reverting changes.
Training on augumented user 1029 16/50 current_auc = 0.696969696969697
User 1029 AUC after training: 0.6868686868686869
User 1029 does not improve AUC. Reverting changes.
Training on augumented user 111595 17/50 current_auc = 0.696969696969697
User 111595 AUC after training: 0.696969696969697
User 111595 does not improve AUC. Reverting changes.
Training on augumented user 50966 18/50 current_auc = 0.696969696969697
User 50966 AUC after training: 0.6868686868686869
User 50966 does not improve AUC. Reverting changes.
Training on augumented user 134976 19/50 current_auc = 0.696969696969697
User 134976 AUC after training: 0.6868686868686869
User 134976 does not improve AUC. Reverting changes.
Training on augumented user 44308 20/50 current_auc = 0.696969696969697
User 44308 AUC after training: 0.6868686868686869
User 44308 does not improve AUC. Reverting changes.
Training on augumented user 24708 21/50 current_auc = 0.696969696969697
User 24708 AUC after training: 0.6868686868686869
User 24708 does not improve AUC. Reverting changes.
Training on augumented user 44623 22/50 current_auc = 0.696969696969697
User 44623 AUC after training: 0.6868686868686869
User 44623 does not improve AUC. Reverting changes.
Training on augumented user 13840 23/50 current_auc = 0.696969696969697
User 13840 AUC after training: 0.696969696969697
User 13840 does not improve AUC. Reverting changes.
Training on augumented user 73708 24/50 current_auc = 0.696969696969697
User 73708 AUC after training: 0.6868686868686869
User 73708 does not improve AUC. Reverting changes.
Training on augumented user 37502 25/50 current_auc = 0.696969696969697
User 37502 AUC after training: 0.696969696969697
User 37502 does not improve AUC. Reverting changes.
Training on augumented user 104884 26/50 current_auc = 0.696969696969697
User 104884 AUC after training: 0.696969696969697
User 104884 does not improve AUC. Reverting changes.
Training on augumented user 39399 27/50 current_auc = 0.696969696969697
User 39399 AUC after training: 0.6868686868686869
User 39399 does not improve AUC. Reverting changes.
Training on augumented user 54106 28/50 current_auc = 0.696969696969697
User 54106 AUC after training: 0.6868686868686869
User 54106 does not improve AUC. Reverting changes.
Training on augumented user 70738 29/50 current_auc = 0.696969696969697
User 70738 AUC after training: 0.7070707070707071
User 70738 improves AUC. Keeping the model.
Training on augumented user 32403 30/50 current_auc = 0.7070707070707071
User 32403 AUC after training: 0.7070707070707071
User 32403 does not improve AUC. Reverting changes.
Training on augumented user 67908 31/50 current_auc = 0.7070707070707071
User 67908 AUC after training: 0.7070707070707071
User 67908 does not improve AUC. Reverting changes.
Training on augumented user 117594 32/50 current_auc = 0.7070707070707071
User 117594 AUC after training: 0.7070707070707071
User 117594 does not improve AUC. Reverting changes.
Training on augumented user 91138 33/50 current_auc = 0.7070707070707071
User 91138 AUC after training: 0.696969696969697
User 91138 does not improve AUC. Reverting changes.
Training on augumented user 127123 34/50 current_auc = 0.7070707070707071
User 127123 AUC after training: 0.7070707070707071
User 127123 does not improve AUC. Reverting changes.
Training on augumented user 136296 35/50 current_auc = 0.7070707070707071
User 136296 AUC after training: 0.7070707070707071
User 136296 does not improve AUC. Reverting changes.
Training on augumented user 37402 36/50 current_auc = 0.7070707070707071
User 37402 AUC after training: 0.7070707070707071
User 37402 does not improve AUC. Reverting changes.
Training on augumented user 136259 37/50 current_auc = 0.7070707070707071
User 136259 AUC after training: 0.696969696969697
User 136259 does not improve AUC. Reverting changes.
Training on augumented user 111538 38/50 current_auc = 0.7070707070707071
User 111538 AUC after training: 0.7070707070707071
User 111538 does not improve AUC. Reverting changes.
Training on augumented user 40299 39/50 current_auc = 0.7070707070707071
User 40299 AUC after training: 0.696969696969697
User 40299 does not improve AUC. Reverting changes.
Training on augumented user 50389 40/50 current_auc = 0.7070707070707071
User 50389 AUC after training: 0.696969696969697
User 50389 does not improve AUC. Reverting changes.
Training on augumented user 75742 41/50 current_auc = 0.7070707070707071
User 75742 AUC after training: 0.6868686868686869
User 75742 does not improve AUC. Reverting changes.
Training on augumented user 58891 42/50 current_auc = 0.7070707070707071
User 58891 AUC after training: 0.696969696969697
User 58891 does not improve AUC. Reverting changes.
Training on augumented user 99824 43/50 current_auc = 0.7070707070707071
User 99824 AUC after training: 0.7070707070707071
User 99824 does not improve AUC. Reverting changes.
Training on augumented user 97719 44/50 current_auc = 0.7070707070707071
User 97719 AUC after training: 0.696969696969697
User 97719 does not improve AUC. Reverting changes.
Training on augumented user 110140 45/50 current_auc = 0.7070707070707071
User 110140 AUC after training: 0.696969696969697
User 110140 does not improve AUC. Reverting changes.
Training on augumented user 46897 46/50 current_auc = 0.7070707070707071
User 46897 AUC after training: 0.6868686868686869
User 46897 does not improve AUC. Reverting changes.
Training on augumented user 26376 47/50 current_auc = 0.7070707070707071
User 26376 AUC after training: 0.696969696969697
User 26376 does not improve AUC. Reverting changes.
Training on augumented user 104848 48/50 current_auc = 0.7070707070707071
User 104848 AUC after training: 0.7070707070707071
User 104848 does not improve AUC. Reverting changes.
Training on augumented user 119111 49/50 current_auc = 0.7070707070707071
User 119111 AUC after training: 0.696969696969697
User 119111 does not improve AUC. Reverting changes.
[2024-12-02 20:07:21.233553] start test user 102087 263/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:07:21.966587] start test user 102087 263/567 recall augumented users by random, augumented_users = [36916, 22236, 93544, 42394, 19070, 21631, 10209, 26041, 3357, 137950, 497, 33041, 77215, 6956, 105169, 127456, 85365, 90903, 33431, 27329, 109854, 33766, 131855, 101037, 41057, 109514, 110519, 57171, 88187, 120063, 71073, 21946, 65635, 57696, 52954, 56267, 42424, 64692, 97907, 67487, 98375, 123748, 29680, 58371, 20461, 105247, 30140, 102528, 135517, 41404]
[2024-12-02 20:07:21.981781] user = 102087 Cloud 263/567
[2024-12-02 20:07:21.991861] user = 102087 Local 263/567
[2024-12-02 20:07:22.058341] user = 102087 Local+ 263/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:07:24.814670] user = 102087 MPDA- 263/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.679144385026738
Training on augumented user 36916 0/50 current_auc = 0.679144385026738
User 36916 AUC after training: 0.679144385026738
User 36916 does not improve AUC. Reverting changes.
Training on augumented user 22236 1/50 current_auc = 0.679144385026738
User 22236 AUC after training: 0.6858288770053476
User 22236 improves AUC. Keeping the model.
Training on augumented user 93544 2/50 current_auc = 0.6858288770053476
User 93544 AUC after training: 0.6858288770053476
User 93544 does not improve AUC. Reverting changes.
Training on augumented user 42394 3/50 current_auc = 0.6858288770053476
User 42394 AUC after training: 0.6791443850267379
User 42394 does not improve AUC. Reverting changes.
Training on augumented user 19070 4/50 current_auc = 0.6858288770053476
User 19070 AUC after training: 0.679144385026738
User 19070 does not improve AUC. Reverting changes.
Training on augumented user 21631 5/50 current_auc = 0.6858288770053476
User 21631 AUC after training: 0.6858288770053476
User 21631 does not improve AUC. Reverting changes.
Training on augumented user 10209 6/50 current_auc = 0.6858288770053476
User 10209 AUC after training: 0.6858288770053476
User 10209 does not improve AUC. Reverting changes.
Training on augumented user 26041 7/50 current_auc = 0.6858288770053476
User 26041 AUC after training: 0.6858288770053476
User 26041 does not improve AUC. Reverting changes.
Training on augumented user 3357 8/50 current_auc = 0.6858288770053476
User 3357 AUC after training: 0.6858288770053476
User 3357 does not improve AUC. Reverting changes.
Training on augumented user 137950 9/50 current_auc = 0.6858288770053476
User 137950 AUC after training: 0.6858288770053476
User 137950 does not improve AUC. Reverting changes.
Training on augumented user 497 10/50 current_auc = 0.6858288770053476
User 497 AUC after training: 0.679144385026738
User 497 does not improve AUC. Reverting changes.
Training on augumented user 33041 11/50 current_auc = 0.6858288770053476
User 33041 AUC after training: 0.6858288770053476
User 33041 does not improve AUC. Reverting changes.
Training on augumented user 77215 12/50 current_auc = 0.6858288770053476
User 77215 AUC after training: 0.6858288770053476
User 77215 does not improve AUC. Reverting changes.
Training on augumented user 6956 13/50 current_auc = 0.6858288770053476
User 6956 AUC after training: 0.6858288770053476
User 6956 does not improve AUC. Reverting changes.
Training on augumented user 105169 14/50 current_auc = 0.6858288770053476
User 105169 AUC after training: 0.6858288770053476
User 105169 does not improve AUC. Reverting changes.
Training on augumented user 127456 15/50 current_auc = 0.6858288770053476
User 127456 AUC after training: 0.6858288770053476
User 127456 does not improve AUC. Reverting changes.
Training on augumented user 85365 16/50 current_auc = 0.6858288770053476
User 85365 AUC after training: 0.6831550802139037
User 85365 does not improve AUC. Reverting changes.
Training on augumented user 90903 17/50 current_auc = 0.6858288770053476
User 90903 AUC after training: 0.6764705882352942
User 90903 does not improve AUC. Reverting changes.
Training on augumented user 33431 18/50 current_auc = 0.6858288770053476
User 33431 AUC after training: 0.6858288770053476
User 33431 does not improve AUC. Reverting changes.
Training on augumented user 27329 19/50 current_auc = 0.6858288770053476
User 27329 AUC after training: 0.6831550802139037
User 27329 does not improve AUC. Reverting changes.
Training on augumented user 109854 20/50 current_auc = 0.6858288770053476
User 109854 AUC after training: 0.6858288770053476
User 109854 does not improve AUC. Reverting changes.
Training on augumented user 33766 21/50 current_auc = 0.6858288770053476
User 33766 AUC after training: 0.6858288770053476
User 33766 does not improve AUC. Reverting changes.
Training on augumented user 131855 22/50 current_auc = 0.6858288770053476
User 131855 AUC after training: 0.679144385026738
User 131855 does not improve AUC. Reverting changes.
Training on augumented user 101037 23/50 current_auc = 0.6858288770053476
User 101037 AUC after training: 0.6831550802139037
User 101037 does not improve AUC. Reverting changes.
Training on augumented user 41057 24/50 current_auc = 0.6858288770053476
User 41057 AUC after training: 0.6858288770053476
User 41057 does not improve AUC. Reverting changes.
Training on augumented user 109514 25/50 current_auc = 0.6858288770053476
User 109514 AUC after training: 0.6764705882352942
User 109514 does not improve AUC. Reverting changes.
Training on augumented user 110519 26/50 current_auc = 0.6858288770053476
User 110519 AUC after training: 0.6858288770053476
User 110519 does not improve AUC. Reverting changes.
Training on augumented user 57171 27/50 current_auc = 0.6858288770053476
User 57171 AUC after training: 0.6844919786096257
User 57171 does not improve AUC. Reverting changes.
Training on augumented user 88187 28/50 current_auc = 0.6858288770053476
User 88187 AUC after training: 0.6858288770053476
User 88187 does not improve AUC. Reverting changes.
Training on augumented user 120063 29/50 current_auc = 0.6858288770053476
User 120063 AUC after training: 0.6764705882352942
User 120063 does not improve AUC. Reverting changes.
Training on augumented user 71073 30/50 current_auc = 0.6858288770053476
User 71073 AUC after training: 0.6858288770053476
User 71073 does not improve AUC. Reverting changes.
Training on augumented user 21946 31/50 current_auc = 0.6858288770053476
User 21946 AUC after training: 0.6858288770053476
User 21946 does not improve AUC. Reverting changes.
Training on augumented user 65635 32/50 current_auc = 0.6858288770053476
User 65635 AUC after training: 0.6858288770053476
User 65635 does not improve AUC. Reverting changes.
Training on augumented user 57696 33/50 current_auc = 0.6858288770053476
User 57696 AUC after training: 0.6858288770053476
User 57696 does not improve AUC. Reverting changes.
Training on augumented user 52954 34/50 current_auc = 0.6858288770053476
User 52954 AUC after training: 0.6791443850267379
User 52954 does not improve AUC. Reverting changes.
Training on augumented user 56267 35/50 current_auc = 0.6858288770053476
User 56267 AUC after training: 0.6911764705882353
User 56267 improves AUC. Keeping the model.
Training on augumented user 42424 36/50 current_auc = 0.6911764705882353
User 42424 AUC after training: 0.679144385026738
User 42424 does not improve AUC. Reverting changes.
Training on augumented user 64692 37/50 current_auc = 0.6911764705882353
User 64692 AUC after training: 0.6911764705882353
User 64692 does not improve AUC. Reverting changes.
Training on augumented user 97907 38/50 current_auc = 0.6911764705882353
User 97907 AUC after training: 0.6818181818181818
User 97907 does not improve AUC. Reverting changes.
Training on augumented user 67487 39/50 current_auc = 0.6911764705882353
User 67487 AUC after training: 0.6911764705882353
User 67487 does not improve AUC. Reverting changes.
Training on augumented user 98375 40/50 current_auc = 0.6911764705882353
User 98375 AUC after training: 0.6911764705882353
User 98375 does not improve AUC. Reverting changes.
Training on augumented user 123748 41/50 current_auc = 0.6911764705882353
User 123748 AUC after training: 0.6911764705882353
User 123748 does not improve AUC. Reverting changes.
Training on augumented user 29680 42/50 current_auc = 0.6911764705882353
User 29680 AUC after training: 0.6911764705882353
User 29680 does not improve AUC. Reverting changes.
Training on augumented user 58371 43/50 current_auc = 0.6911764705882353
User 58371 AUC after training: 0.6938502673796791
User 58371 improves AUC. Keeping the model.
Training on augumented user 20461 44/50 current_auc = 0.6938502673796791
User 20461 AUC after training: 0.6911764705882353
User 20461 does not improve AUC. Reverting changes.
Training on augumented user 105247 45/50 current_auc = 0.6938502673796791
User 105247 AUC after training: 0.6938502673796791
User 105247 does not improve AUC. Reverting changes.
Training on augumented user 30140 46/50 current_auc = 0.6938502673796791
User 30140 AUC after training: 0.6885026737967914
User 30140 does not improve AUC. Reverting changes.
Training on augumented user 102528 47/50 current_auc = 0.6938502673796791
User 102528 AUC after training: 0.6885026737967914
User 102528 does not improve AUC. Reverting changes.
Training on augumented user 135517 48/50 current_auc = 0.6938502673796791
User 135517 AUC after training: 0.6885026737967914
User 135517 does not improve AUC. Reverting changes.
Training on augumented user 41404 49/50 current_auc = 0.6938502673796791
User 41404 AUC after training: 0.6791443850267379
User 41404 does not improve AUC. Reverting changes.
[2024-12-02 20:07:54.895549] start test user 102174 264/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:07:55.297595] start test user 102174 264/567 recall augumented users by random, augumented_users = [74575, 77730, 116968, 121537, 67610, 46947, 15245, 15633, 118422, 5862, 107724, 80866, 5015, 59613, 30236, 61463, 34835, 2170, 26879, 120117, 108662, 680, 118853, 48764, 124885, 7887, 31579, 64262, 133394, 133196, 93528, 83767, 135384, 43108, 84139, 98052, 75636, 108150, 120840, 125176, 41501, 137479, 73890, 125248, 56175, 80264, 81558, 107222, 115775, 20965]
[2024-12-02 20:07:55.311650] user = 102174 Cloud 264/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:07:55.317867] user = 102174 Local 264/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:07:55.346532] user = 102174 Local+ 264/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:07:57.929196] user = 102174 MPDA- 264/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 74575 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 74575 AUC after training: 0.5
User 74575 does not improve AUC. Reverting changes.
Training on augumented user 77730 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77730 AUC after training: 0.5
User 77730 does not improve AUC. Reverting changes.
Training on augumented user 116968 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116968 AUC after training: 0.5
User 116968 does not improve AUC. Reverting changes.
Training on augumented user 121537 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121537 AUC after training: 0.5
User 121537 does not improve AUC. Reverting changes.
Training on augumented user 67610 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 67610 AUC after training: 0.5
User 67610 does not improve AUC. Reverting changes.
Training on augumented user 46947 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 46947 AUC after training: 0.5
User 46947 does not improve AUC. Reverting changes.
Training on augumented user 15245 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15245 AUC after training: 0.5
User 15245 does not improve AUC. Reverting changes.
Training on augumented user 15633 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15633 AUC after training: 0.5
User 15633 does not improve AUC. Reverting changes.
Training on augumented user 118422 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118422 AUC after training: 0.5
User 118422 does not improve AUC. Reverting changes.
Training on augumented user 5862 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5862 AUC after training: 0.5
User 5862 does not improve AUC. Reverting changes.
Training on augumented user 107724 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107724 AUC after training: 0.5
User 107724 does not improve AUC. Reverting changes.
Training on augumented user 80866 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80866 AUC after training: 0.5
User 80866 does not improve AUC. Reverting changes.
Training on augumented user 5015 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 5015 AUC after training: 0.5
User 5015 does not improve AUC. Reverting changes.
Training on augumented user 59613 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59613 AUC after training: 0.5
User 59613 does not improve AUC. Reverting changes.
Training on augumented user 30236 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30236 AUC after training: 0.5
User 30236 does not improve AUC. Reverting changes.
Training on augumented user 61463 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61463 AUC after training: 0.5
User 61463 does not improve AUC. Reverting changes.
Training on augumented user 34835 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 34835 AUC after training: 0.5
User 34835 does not improve AUC. Reverting changes.
Training on augumented user 2170 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2170 AUC after training: 0.5
User 2170 does not improve AUC. Reverting changes.
Training on augumented user 26879 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 26879 AUC after training: 0.5
User 26879 does not improve AUC. Reverting changes.
Training on augumented user 120117 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120117 AUC after training: 0.5
User 120117 does not improve AUC. Reverting changes.
Training on augumented user 108662 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108662 AUC after training: 0.5
User 108662 does not improve AUC. Reverting changes.
Training on augumented user 680 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 680 AUC after training: 0.5
User 680 does not improve AUC. Reverting changes.
Training on augumented user 118853 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118853 AUC after training: 0.5
User 118853 does not improve AUC. Reverting changes.
Training on augumented user 48764 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48764 AUC after training: 0.5
User 48764 does not improve AUC. Reverting changes.
Training on augumented user 124885 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124885 AUC after training: 0.5
User 124885 does not improve AUC. Reverting changes.
Training on augumented user 7887 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7887 AUC after training: 0.5
User 7887 does not improve AUC. Reverting changes.
Training on augumented user 31579 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 31579 AUC after training: 0.5
User 31579 does not improve AUC. Reverting changes.
Training on augumented user 64262 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64262 AUC after training: 0.5
User 64262 does not improve AUC. Reverting changes.
Training on augumented user 133394 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133394 AUC after training: 0.5
User 133394 does not improve AUC. Reverting changes.
Training on augumented user 133196 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133196 AUC after training: 0.5
User 133196 does not improve AUC. Reverting changes.
Training on augumented user 93528 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93528 AUC after training: 0.5
User 93528 does not improve AUC. Reverting changes.
Training on augumented user 83767 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 83767 AUC after training: 0.5
User 83767 does not improve AUC. Reverting changes.
Training on augumented user 135384 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 135384 AUC after training: 0.5
User 135384 does not improve AUC. Reverting changes.
Training on augumented user 43108 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43108 AUC after training: 0.5
User 43108 does not improve AUC. Reverting changes.
Training on augumented user 84139 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84139 AUC after training: 0.5
User 84139 does not improve AUC. Reverting changes.
Training on augumented user 98052 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 98052 AUC after training: 0.5
User 98052 does not improve AUC. Reverting changes.
Training on augumented user 75636 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 75636 AUC after training: 0.5
User 75636 does not improve AUC. Reverting changes.
Training on augumented user 108150 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108150 AUC after training: 0.5
User 108150 does not improve AUC. Reverting changes.
Training on augumented user 120840 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120840 AUC after training: 0.5
User 120840 does not improve AUC. Reverting changes.
Training on augumented user 125176 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 125176 AUC after training: 0.5
User 125176 does not improve AUC. Reverting changes.
Training on augumented user 41501 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41501 AUC after training: 0.5
User 41501 does not improve AUC. Reverting changes.
Training on augumented user 137479 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137479 AUC after training: 0.5
User 137479 does not improve AUC. Reverting changes.
Training on augumented user 73890 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73890 AUC after training: 0.5
User 73890 does not improve AUC. Reverting changes.
Training on augumented user 125248 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 125248 AUC after training: 0.5
User 125248 does not improve AUC. Reverting changes.
Training on augumented user 56175 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56175 AUC after training: 0.5
User 56175 does not improve AUC. Reverting changes.
Training on augumented user 80264 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80264 AUC after training: 0.5
User 80264 does not improve AUC. Reverting changes.
Training on augumented user 81558 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 81558 AUC after training: 0.5
User 81558 does not improve AUC. Reverting changes.
Training on augumented user 107222 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 107222 AUC after training: 0.5
User 107222 does not improve AUC. Reverting changes.
Training on augumented user 115775 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115775 AUC after training: 0.5
User 115775 does not improve AUC. Reverting changes.
Training on augumented user 20965 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20965 AUC after training: 0.5
User 20965 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:08:29.389797] start test user 102186 265/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:08:29.908768] start test user 102186 265/567 recall augumented users by random, augumented_users = [26822, 12783, 108148, 88593, 57770, 92175, 90190, 5710, 102834, 114155, 120374, 62457, 75829, 21160, 60909, 33448, 19990, 16909, 32897, 128204, 31728, 84110, 134679, 81921, 90763, 105336, 20455, 7940, 45734, 11394, 64927, 111735, 47513, 76187, 18738, 39222, 103300, 22002, 75456, 39334, 46098, 26961, 66752, 30270, 57396, 135916, 42358, 41764, 32529, 51033]
[2024-12-02 20:08:29.930241] user = 102186 Cloud 265/567
[2024-12-02 20:08:29.954657] user = 102186 Local 265/567
[2024-12-02 20:08:30.019030] user = 102186 Local+ 265/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:08:32.340326] user = 102186 MPDA- 265/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.75
Training on augumented user 26822 0/50 current_auc = 0.75
User 26822 AUC after training: 0.75
User 26822 does not improve AUC. Reverting changes.
Training on augumented user 12783 1/50 current_auc = 0.75
User 12783 AUC after training: 0.75
User 12783 does not improve AUC. Reverting changes.
Training on augumented user 108148 2/50 current_auc = 0.75
User 108148 AUC after training: 0.75
User 108148 does not improve AUC. Reverting changes.
Training on augumented user 88593 3/50 current_auc = 0.75
User 88593 AUC after training: 0.75
User 88593 does not improve AUC. Reverting changes.
Training on augumented user 57770 4/50 current_auc = 0.75
User 57770 AUC after training: 0.75
User 57770 does not improve AUC. Reverting changes.
Training on augumented user 92175 5/50 current_auc = 0.75
User 92175 AUC after training: 0.75
User 92175 does not improve AUC. Reverting changes.
Training on augumented user 90190 6/50 current_auc = 0.75
User 90190 AUC after training: 0.75
User 90190 does not improve AUC. Reverting changes.
Training on augumented user 5710 7/50 current_auc = 0.75
User 5710 AUC after training: 0.75
User 5710 does not improve AUC. Reverting changes.
Training on augumented user 102834 8/50 current_auc = 0.75
User 102834 AUC after training: 0.75
User 102834 does not improve AUC. Reverting changes.
Training on augumented user 114155 9/50 current_auc = 0.75
User 114155 AUC after training: 0.75
User 114155 does not improve AUC. Reverting changes.
Training on augumented user 120374 10/50 current_auc = 0.75
User 120374 AUC after training: 0.75
User 120374 does not improve AUC. Reverting changes.
Training on augumented user 62457 11/50 current_auc = 0.75
User 62457 AUC after training: 0.75
User 62457 does not improve AUC. Reverting changes.
Training on augumented user 75829 12/50 current_auc = 0.75
User 75829 AUC after training: 0.75
User 75829 does not improve AUC. Reverting changes.
Training on augumented user 21160 13/50 current_auc = 0.75
User 21160 AUC after training: 0.75
User 21160 does not improve AUC. Reverting changes.
Training on augumented user 60909 14/50 current_auc = 0.75
User 60909 AUC after training: 0.75
User 60909 does not improve AUC. Reverting changes.
Training on augumented user 33448 15/50 current_auc = 0.75
User 33448 AUC after training: 0.75
User 33448 does not improve AUC. Reverting changes.
Training on augumented user 19990 16/50 current_auc = 0.75
User 19990 AUC after training: 0.75
User 19990 does not improve AUC. Reverting changes.
Training on augumented user 16909 17/50 current_auc = 0.75
User 16909 AUC after training: 0.75
User 16909 does not improve AUC. Reverting changes.
Training on augumented user 32897 18/50 current_auc = 0.75
User 32897 AUC after training: 0.75
User 32897 does not improve AUC. Reverting changes.
Training on augumented user 128204 19/50 current_auc = 0.75
User 128204 AUC after training: 0.75
User 128204 does not improve AUC. Reverting changes.
Training on augumented user 31728 20/50 current_auc = 0.75
User 31728 AUC after training: 0.75
User 31728 does not improve AUC. Reverting changes.
Training on augumented user 84110 21/50 current_auc = 0.75
User 84110 AUC after training: 0.75
User 84110 does not improve AUC. Reverting changes.
Training on augumented user 134679 22/50 current_auc = 0.75
User 134679 AUC after training: 0.75
User 134679 does not improve AUC. Reverting changes.
Training on augumented user 81921 23/50 current_auc = 0.75
User 81921 AUC after training: 0.75
User 81921 does not improve AUC. Reverting changes.
Training on augumented user 90763 24/50 current_auc = 0.75
User 90763 AUC after training: 0.75
User 90763 does not improve AUC. Reverting changes.
Training on augumented user 105336 25/50 current_auc = 0.75
User 105336 AUC after training: 0.75
User 105336 does not improve AUC. Reverting changes.
Training on augumented user 20455 26/50 current_auc = 0.75
User 20455 AUC after training: 0.75
User 20455 does not improve AUC. Reverting changes.
Training on augumented user 7940 27/50 current_auc = 0.75
User 7940 AUC after training: 0.75
User 7940 does not improve AUC. Reverting changes.
Training on augumented user 45734 28/50 current_auc = 0.75
User 45734 AUC after training: 0.75
User 45734 does not improve AUC. Reverting changes.
Training on augumented user 11394 29/50 current_auc = 0.75
User 11394 AUC after training: 0.75
User 11394 does not improve AUC. Reverting changes.
Training on augumented user 64927 30/50 current_auc = 0.75
User 64927 AUC after training: 0.75
User 64927 does not improve AUC. Reverting changes.
Training on augumented user 111735 31/50 current_auc = 0.75
User 111735 AUC after training: 0.75
User 111735 does not improve AUC. Reverting changes.
Training on augumented user 47513 32/50 current_auc = 0.75
User 47513 AUC after training: 0.75
User 47513 does not improve AUC. Reverting changes.
Training on augumented user 76187 33/50 current_auc = 0.75
User 76187 AUC after training: 0.75
User 76187 does not improve AUC. Reverting changes.
Training on augumented user 18738 34/50 current_auc = 0.75
User 18738 AUC after training: 0.75
User 18738 does not improve AUC. Reverting changes.
Training on augumented user 39222 35/50 current_auc = 0.75
User 39222 AUC after training: 0.75
User 39222 does not improve AUC. Reverting changes.
Training on augumented user 103300 36/50 current_auc = 0.75
User 103300 AUC after training: 0.75
User 103300 does not improve AUC. Reverting changes.
Training on augumented user 22002 37/50 current_auc = 0.75
User 22002 AUC after training: 0.75
User 22002 does not improve AUC. Reverting changes.
Training on augumented user 75456 38/50 current_auc = 0.75
User 75456 AUC after training: 0.75
User 75456 does not improve AUC. Reverting changes.
Training on augumented user 39334 39/50 current_auc = 0.75
User 39334 AUC after training: 0.75
User 39334 does not improve AUC. Reverting changes.
Training on augumented user 46098 40/50 current_auc = 0.75
User 46098 AUC after training: 0.75
User 46098 does not improve AUC. Reverting changes.
Training on augumented user 26961 41/50 current_auc = 0.75
User 26961 AUC after training: 0.75
User 26961 does not improve AUC. Reverting changes.
Training on augumented user 66752 42/50 current_auc = 0.75
User 66752 AUC after training: 0.75
User 66752 does not improve AUC. Reverting changes.
Training on augumented user 30270 43/50 current_auc = 0.75
User 30270 AUC after training: 0.75
User 30270 does not improve AUC. Reverting changes.
Training on augumented user 57396 44/50 current_auc = 0.75
User 57396 AUC after training: 0.75
User 57396 does not improve AUC. Reverting changes.
Training on augumented user 135916 45/50 current_auc = 0.75
User 135916 AUC after training: 0.75
User 135916 does not improve AUC. Reverting changes.
Training on augumented user 42358 46/50 current_auc = 0.75
User 42358 AUC after training: 0.75
User 42358 does not improve AUC. Reverting changes.
Training on augumented user 41764 47/50 current_auc = 0.75
User 41764 AUC after training: 0.75
User 41764 does not improve AUC. Reverting changes.
Training on augumented user 32529 48/50 current_auc = 0.75
User 32529 AUC after training: 0.75
User 32529 does not improve AUC. Reverting changes.
Training on augumented user 51033 49/50 current_auc = 0.75
User 51033 AUC after training: 0.75
User 51033 does not improve AUC. Reverting changes.
[2024-12-02 20:09:01.668357] start test user 102242 266/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:09:02.366319] start test user 102242 266/567 recall augumented users by random, augumented_users = [100012, 101669, 40203, 120370, 14648, 125259, 65770, 26184, 93101, 2224, 37006, 94291, 137457, 130309, 21321, 86956, 25657, 12072, 42811, 40246, 70549, 87606, 29808, 133634, 80575, 59397, 127400, 104053, 137585, 22692, 113800, 69855, 33593, 77402, 30099, 65620, 137812, 95429, 47839, 132342, 119650, 55732, 38493, 95235, 64739, 105041, 43045, 32934, 45712, 90169]
[2024-12-02 20:09:02.382820] user = 102242 Cloud 266/567
[2024-12-02 20:09:02.396597] user = 102242 Local 266/567
[2024-12-02 20:09:02.475676] user = 102242 Local+ 266/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:09:05.487944] user = 102242 MPDA- 266/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.4985422740524782
Training on augumented user 100012 0/50 current_auc = 0.4985422740524782
User 100012 AUC after training: 0.4985422740524782
User 100012 does not improve AUC. Reverting changes.
Training on augumented user 101669 1/50 current_auc = 0.4985422740524782
User 101669 AUC after training: 0.4956268221574345
User 101669 does not improve AUC. Reverting changes.
Training on augumented user 40203 2/50 current_auc = 0.4985422740524782
User 40203 AUC after training: 0.4985422740524782
User 40203 does not improve AUC. Reverting changes.
Training on augumented user 120370 3/50 current_auc = 0.4985422740524782
User 120370 AUC after training: 0.5102040816326531
User 120370 improves AUC. Keeping the model.
Training on augumented user 14648 4/50 current_auc = 0.5102040816326531
User 14648 AUC after training: 0.5102040816326531
User 14648 does not improve AUC. Reverting changes.
Training on augumented user 125259 5/50 current_auc = 0.5102040816326531
User 125259 AUC after training: 0.4985422740524782
User 125259 does not improve AUC. Reverting changes.
Training on augumented user 65770 6/50 current_auc = 0.5102040816326531
User 65770 AUC after training: 0.5043731778425656
User 65770 does not improve AUC. Reverting changes.
Training on augumented user 26184 7/50 current_auc = 0.5102040816326531
User 26184 AUC after training: 0.5014577259475219
User 26184 does not improve AUC. Reverting changes.
Training on augumented user 93101 8/50 current_auc = 0.5102040816326531
User 93101 AUC after training: 0.5102040816326531
User 93101 does not improve AUC. Reverting changes.
Training on augumented user 2224 9/50 current_auc = 0.5102040816326531
User 2224 AUC after training: 0.5072886297376094
User 2224 does not improve AUC. Reverting changes.
Training on augumented user 37006 10/50 current_auc = 0.5102040816326531
User 37006 AUC after training: 0.5072886297376094
User 37006 does not improve AUC. Reverting changes.
Training on augumented user 94291 11/50 current_auc = 0.5102040816326531
User 94291 AUC after training: 0.5072886297376094
User 94291 does not improve AUC. Reverting changes.
Training on augumented user 137457 12/50 current_auc = 0.5102040816326531
User 137457 AUC after training: 0.4985422740524782
User 137457 does not improve AUC. Reverting changes.
Training on augumented user 130309 13/50 current_auc = 0.5102040816326531
User 130309 AUC after training: 0.5072886297376094
User 130309 does not improve AUC. Reverting changes.
Training on augumented user 21321 14/50 current_auc = 0.5102040816326531
User 21321 AUC after training: 0.5102040816326531
User 21321 does not improve AUC. Reverting changes.
Training on augumented user 86956 15/50 current_auc = 0.5102040816326531
User 86956 AUC after training: 0.5043731778425656
User 86956 does not improve AUC. Reverting changes.
Training on augumented user 25657 16/50 current_auc = 0.5102040816326531
User 25657 AUC after training: 0.5043731778425656
User 25657 does not improve AUC. Reverting changes.
Training on augumented user 12072 17/50 current_auc = 0.5102040816326531
User 12072 AUC after training: 0.5102040816326531
User 12072 does not improve AUC. Reverting changes.
Training on augumented user 42811 18/50 current_auc = 0.5102040816326531
User 42811 AUC after training: 0.5102040816326531
User 42811 does not improve AUC. Reverting changes.
Training on augumented user 40246 19/50 current_auc = 0.5102040816326531
User 40246 AUC after training: 0.5014577259475219
User 40246 does not improve AUC. Reverting changes.
Training on augumented user 70549 20/50 current_auc = 0.5102040816326531
User 70549 AUC after training: 0.5043731778425656
User 70549 does not improve AUC. Reverting changes.
Training on augumented user 87606 21/50 current_auc = 0.5102040816326531
User 87606 AUC after training: 0.5102040816326531
User 87606 does not improve AUC. Reverting changes.
Training on augumented user 29808 22/50 current_auc = 0.5102040816326531
User 29808 AUC after training: 0.5043731778425656
User 29808 does not improve AUC. Reverting changes.
Training on augumented user 133634 23/50 current_auc = 0.5102040816326531
User 133634 AUC after training: 0.5102040816326531
User 133634 does not improve AUC. Reverting changes.
Training on augumented user 80575 24/50 current_auc = 0.5102040816326531
User 80575 AUC after training: 0.5102040816326531
User 80575 does not improve AUC. Reverting changes.
Training on augumented user 59397 25/50 current_auc = 0.5102040816326531
User 59397 AUC after training: 0.4985422740524782
User 59397 does not improve AUC. Reverting changes.
Training on augumented user 127400 26/50 current_auc = 0.5102040816326531
User 127400 AUC after training: 0.5014577259475219
User 127400 does not improve AUC. Reverting changes.
Training on augumented user 104053 27/50 current_auc = 0.5102040816326531
User 104053 AUC after training: 0.4985422740524782
User 104053 does not improve AUC. Reverting changes.
Training on augumented user 137585 28/50 current_auc = 0.5102040816326531
User 137585 AUC after training: 0.4985422740524782
User 137585 does not improve AUC. Reverting changes.
Training on augumented user 22692 29/50 current_auc = 0.5102040816326531
User 22692 AUC after training: 0.4985422740524782
User 22692 does not improve AUC. Reverting changes.
Training on augumented user 113800 30/50 current_auc = 0.5102040816326531
User 113800 AUC after training: 0.5102040816326531
User 113800 does not improve AUC. Reverting changes.
Training on augumented user 69855 31/50 current_auc = 0.5102040816326531
User 69855 AUC after training: 0.5131195335276968
User 69855 improves AUC. Keeping the model.
Training on augumented user 33593 32/50 current_auc = 0.5131195335276968
User 33593 AUC after training: 0.5072886297376094
User 33593 does not improve AUC. Reverting changes.
Training on augumented user 77402 33/50 current_auc = 0.5131195335276968
User 77402 AUC after training: 0.5043731778425656
User 77402 does not improve AUC. Reverting changes.
Training on augumented user 30099 34/50 current_auc = 0.5131195335276968
User 30099 AUC after training: 0.5043731778425656
User 30099 does not improve AUC. Reverting changes.
Training on augumented user 65620 35/50 current_auc = 0.5131195335276968
User 65620 AUC after training: 0.5131195335276968
User 65620 does not improve AUC. Reverting changes.
Training on augumented user 137812 36/50 current_auc = 0.5131195335276968
User 137812 AUC after training: 0.5131195335276968
User 137812 does not improve AUC. Reverting changes.
Training on augumented user 95429 37/50 current_auc = 0.5131195335276968
User 95429 AUC after training: 0.5043731778425656
User 95429 does not improve AUC. Reverting changes.
Training on augumented user 47839 38/50 current_auc = 0.5131195335276968
User 47839 AUC after training: 0.5043731778425656
User 47839 does not improve AUC. Reverting changes.
Training on augumented user 132342 39/50 current_auc = 0.5131195335276968
User 132342 AUC after training: 0.5014577259475219
User 132342 does not improve AUC. Reverting changes.
Training on augumented user 119650 40/50 current_auc = 0.5131195335276968
User 119650 AUC after training: 0.5072886297376094
User 119650 does not improve AUC. Reverting changes.
Training on augumented user 55732 41/50 current_auc = 0.5131195335276968
User 55732 AUC after training: 0.5072886297376094
User 55732 does not improve AUC. Reverting changes.
Training on augumented user 38493 42/50 current_auc = 0.5131195335276968
User 38493 AUC after training: 0.5131195335276968
User 38493 does not improve AUC. Reverting changes.
Training on augumented user 95235 43/50 current_auc = 0.5131195335276968
User 95235 AUC after training: 0.5131195335276968
User 95235 does not improve AUC. Reverting changes.
Training on augumented user 64739 44/50 current_auc = 0.5131195335276968
User 64739 AUC after training: 0.5072886297376094
User 64739 does not improve AUC. Reverting changes.
Training on augumented user 105041 45/50 current_auc = 0.5131195335276968
User 105041 AUC after training: 0.5014577259475219
User 105041 does not improve AUC. Reverting changes.
Training on augumented user 43045 46/50 current_auc = 0.5131195335276968
User 43045 AUC after training: 0.5072886297376094
User 43045 does not improve AUC. Reverting changes.
Training on augumented user 32934 47/50 current_auc = 0.5131195335276968
User 32934 AUC after training: 0.4985422740524782
User 32934 does not improve AUC. Reverting changes.
Training on augumented user 45712 48/50 current_auc = 0.5131195335276968
User 45712 AUC after training: 0.5131195335276968
User 45712 does not improve AUC. Reverting changes.
Training on augumented user 90169 49/50 current_auc = 0.5131195335276968
User 90169 AUC after training: 0.5131195335276968
User 90169 does not improve AUC. Reverting changes.
[2024-12-02 20:09:36.663982] start test user 102244 267/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:09:37.071228] start test user 102244 267/567 recall augumented users by random, augumented_users = [62848, 90616, 21000, 10544, 83231, 72403, 78960, 31816, 93128, 50730, 14542, 115179, 117530, 8809, 59057, 21437, 137314, 122242, 47067, 36117, 126291, 72261, 16841, 73564, 18559, 84811, 29498, 76311, 48421, 46938, 97759, 20902, 98547, 86564, 24276, 91345, 75395, 132969, 132283, 107025, 8257, 120839, 43855, 93357, 25291, 32944, 41424, 134618, 82880, 84232]
[2024-12-02 20:09:37.086094] user = 102244 Cloud 267/567
[2024-12-02 20:09:37.107599] user = 102244 Local 267/567
[2024-12-02 20:09:37.229990] user = 102244 Local+ 267/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:09:39.911348] user = 102244 MPDA- 267/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6234817813765182
Training on augumented user 62848 0/50 current_auc = 0.6234817813765182
User 62848 AUC after training: 0.6275303643724697
User 62848 improves AUC. Keeping the model.
Training on augumented user 90616 1/50 current_auc = 0.6275303643724697
User 90616 AUC after training: 0.6275303643724697
User 90616 does not improve AUC. Reverting changes.
Training on augumented user 21000 2/50 current_auc = 0.6275303643724697
User 21000 AUC after training: 0.6275303643724697
User 21000 does not improve AUC. Reverting changes.
Training on augumented user 10544 3/50 current_auc = 0.6275303643724697
User 10544 AUC after training: 0.6275303643724697
User 10544 does not improve AUC. Reverting changes.
Training on augumented user 83231 4/50 current_auc = 0.6275303643724697
User 83231 AUC after training: 0.6275303643724697
User 83231 does not improve AUC. Reverting changes.
Training on augumented user 72403 5/50 current_auc = 0.6275303643724697
User 72403 AUC after training: 0.6275303643724697
User 72403 does not improve AUC. Reverting changes.
Training on augumented user 78960 6/50 current_auc = 0.6275303643724697
User 78960 AUC after training: 0.6275303643724697
User 78960 does not improve AUC. Reverting changes.
Training on augumented user 31816 7/50 current_auc = 0.6275303643724697
User 31816 AUC after training: 0.6275303643724697
User 31816 does not improve AUC. Reverting changes.
Training on augumented user 93128 8/50 current_auc = 0.6275303643724697
User 93128 AUC after training: 0.6275303643724697
User 93128 does not improve AUC. Reverting changes.
Training on augumented user 50730 9/50 current_auc = 0.6275303643724697
User 50730 AUC after training: 0.6275303643724697
User 50730 does not improve AUC. Reverting changes.
Training on augumented user 14542 10/50 current_auc = 0.6275303643724697
User 14542 AUC after training: 0.6275303643724697
User 14542 does not improve AUC. Reverting changes.
Training on augumented user 115179 11/50 current_auc = 0.6275303643724697
User 115179 AUC after training: 0.6275303643724697
User 115179 does not improve AUC. Reverting changes.
Training on augumented user 117530 12/50 current_auc = 0.6275303643724697
User 117530 AUC after training: 0.6275303643724697
User 117530 does not improve AUC. Reverting changes.
Training on augumented user 8809 13/50 current_auc = 0.6275303643724697
User 8809 AUC after training: 0.6275303643724697
User 8809 does not improve AUC. Reverting changes.
Training on augumented user 59057 14/50 current_auc = 0.6275303643724697
User 59057 AUC after training: 0.6275303643724697
User 59057 does not improve AUC. Reverting changes.
Training on augumented user 21437 15/50 current_auc = 0.6275303643724697
User 21437 AUC after training: 0.6275303643724697
User 21437 does not improve AUC. Reverting changes.
Training on augumented user 137314 16/50 current_auc = 0.6275303643724697
User 137314 AUC after training: 0.6275303643724697
User 137314 does not improve AUC. Reverting changes.
Training on augumented user 122242 17/50 current_auc = 0.6275303643724697
User 122242 AUC after training: 0.6275303643724697
User 122242 does not improve AUC. Reverting changes.
Training on augumented user 47067 18/50 current_auc = 0.6275303643724697
User 47067 AUC after training: 0.6275303643724697
User 47067 does not improve AUC. Reverting changes.
Training on augumented user 36117 19/50 current_auc = 0.6275303643724697
User 36117 AUC after training: 0.6275303643724697
User 36117 does not improve AUC. Reverting changes.
Training on augumented user 126291 20/50 current_auc = 0.6275303643724697
User 126291 AUC after training: 0.6275303643724697
User 126291 does not improve AUC. Reverting changes.
Training on augumented user 72261 21/50 current_auc = 0.6275303643724697
User 72261 AUC after training: 0.6275303643724697
User 72261 does not improve AUC. Reverting changes.
Training on augumented user 16841 22/50 current_auc = 0.6275303643724697
User 16841 AUC after training: 0.6275303643724697
User 16841 does not improve AUC. Reverting changes.
Training on augumented user 73564 23/50 current_auc = 0.6275303643724697
User 73564 AUC after training: 0.6275303643724697
User 73564 does not improve AUC. Reverting changes.
Training on augumented user 18559 24/50 current_auc = 0.6275303643724697
User 18559 AUC after training: 0.6275303643724697
User 18559 does not improve AUC. Reverting changes.
Training on augumented user 84811 25/50 current_auc = 0.6275303643724697
User 84811 AUC after training: 0.6275303643724697
User 84811 does not improve AUC. Reverting changes.
Training on augumented user 29498 26/50 current_auc = 0.6275303643724697
User 29498 AUC after training: 0.6275303643724697
User 29498 does not improve AUC. Reverting changes.
Training on augumented user 76311 27/50 current_auc = 0.6275303643724697
User 76311 AUC after training: 0.6234817813765182
User 76311 does not improve AUC. Reverting changes.
Training on augumented user 48421 28/50 current_auc = 0.6275303643724697
User 48421 AUC after training: 0.6275303643724697
User 48421 does not improve AUC. Reverting changes.
Training on augumented user 46938 29/50 current_auc = 0.6275303643724697
User 46938 AUC after training: 0.631578947368421
User 46938 improves AUC. Keeping the model.
Training on augumented user 97759 30/50 current_auc = 0.631578947368421
User 97759 AUC after training: 0.631578947368421
User 97759 does not improve AUC. Reverting changes.
Training on augumented user 20902 31/50 current_auc = 0.631578947368421
User 20902 AUC after training: 0.6275303643724697
User 20902 does not improve AUC. Reverting changes.
Training on augumented user 98547 32/50 current_auc = 0.631578947368421
User 98547 AUC after training: 0.631578947368421
User 98547 does not improve AUC. Reverting changes.
Training on augumented user 86564 33/50 current_auc = 0.631578947368421
User 86564 AUC after training: 0.6275303643724697
User 86564 does not improve AUC. Reverting changes.
Training on augumented user 24276 34/50 current_auc = 0.631578947368421
User 24276 AUC after training: 0.631578947368421
User 24276 does not improve AUC. Reverting changes.
Training on augumented user 91345 35/50 current_auc = 0.631578947368421
User 91345 AUC after training: 0.631578947368421
User 91345 does not improve AUC. Reverting changes.
Training on augumented user 75395 36/50 current_auc = 0.631578947368421
User 75395 AUC after training: 0.6234817813765182
User 75395 does not improve AUC. Reverting changes.
Training on augumented user 132969 37/50 current_auc = 0.631578947368421
User 132969 AUC after training: 0.6275303643724697
User 132969 does not improve AUC. Reverting changes.
Training on augumented user 132283 38/50 current_auc = 0.631578947368421
User 132283 AUC after training: 0.6234817813765182
User 132283 does not improve AUC. Reverting changes.
Training on augumented user 107025 39/50 current_auc = 0.631578947368421
User 107025 AUC after training: 0.631578947368421
User 107025 does not improve AUC. Reverting changes.
Training on augumented user 8257 40/50 current_auc = 0.631578947368421
User 8257 AUC after training: 0.631578947368421
User 8257 does not improve AUC. Reverting changes.
Training on augumented user 120839 41/50 current_auc = 0.631578947368421
User 120839 AUC after training: 0.631578947368421
User 120839 does not improve AUC. Reverting changes.
Training on augumented user 43855 42/50 current_auc = 0.631578947368421
User 43855 AUC after training: 0.631578947368421
User 43855 does not improve AUC. Reverting changes.
Training on augumented user 93357 43/50 current_auc = 0.631578947368421
User 93357 AUC after training: 0.631578947368421
User 93357 does not improve AUC. Reverting changes.
Training on augumented user 25291 44/50 current_auc = 0.631578947368421
User 25291 AUC after training: 0.631578947368421
User 25291 does not improve AUC. Reverting changes.
Training on augumented user 32944 45/50 current_auc = 0.631578947368421
User 32944 AUC after training: 0.631578947368421
User 32944 does not improve AUC. Reverting changes.
Training on augumented user 41424 46/50 current_auc = 0.631578947368421
User 41424 AUC after training: 0.6275303643724697
User 41424 does not improve AUC. Reverting changes.
Training on augumented user 134618 47/50 current_auc = 0.631578947368421
User 134618 AUC after training: 0.631578947368421
User 134618 does not improve AUC. Reverting changes.
Training on augumented user 82880 48/50 current_auc = 0.631578947368421
User 82880 AUC after training: 0.6234817813765182
User 82880 does not improve AUC. Reverting changes.
Training on augumented user 84232 49/50 current_auc = 0.631578947368421
User 84232 AUC after training: 0.631578947368421
User 84232 does not improve AUC. Reverting changes.
[2024-12-02 20:10:10.581404] start test user 102290 268/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:10:11.238140] start test user 102290 268/567 recall augumented users by random, augumented_users = [113015, 39159, 49783, 28491, 53647, 31297, 62793, 1685, 30334, 44793, 22468, 127774, 127748, 36683, 104696, 89029, 83763, 128191, 27298, 109585, 40257, 93916, 46825, 56147, 102932, 30744, 15958, 97967, 133632, 57191, 22707, 44467, 9865, 44502, 8666, 16396, 111027, 51535, 73891, 129204, 87418, 29780, 20782, 113479, 71327, 61053, 20166, 32294, 135038, 106879]
[2024-12-02 20:10:11.253468] user = 102290 Cloud 268/567
[2024-12-02 20:10:11.264100] user = 102290 Local 268/567
[2024-12-02 20:10:11.314808] user = 102290 Local+ 268/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:10:13.692768] user = 102290 MPDA- 268/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8846153846153846
Training on augumented user 113015 0/50 current_auc = 0.8846153846153846
User 113015 AUC after training: 0.8846153846153846
User 113015 does not improve AUC. Reverting changes.
Training on augumented user 39159 1/50 current_auc = 0.8846153846153846
User 39159 AUC after training: 0.8846153846153846
User 39159 does not improve AUC. Reverting changes.
Training on augumented user 49783 2/50 current_auc = 0.8846153846153846
User 49783 AUC after training: 0.8846153846153846
User 49783 does not improve AUC. Reverting changes.
Training on augumented user 28491 3/50 current_auc = 0.8846153846153846
User 28491 AUC after training: 0.8846153846153846
User 28491 does not improve AUC. Reverting changes.
Training on augumented user 53647 4/50 current_auc = 0.8846153846153846
User 53647 AUC after training: 0.8814102564102564
User 53647 does not improve AUC. Reverting changes.
Training on augumented user 31297 5/50 current_auc = 0.8846153846153846
User 31297 AUC after training: 0.8846153846153846
User 31297 does not improve AUC. Reverting changes.
Training on augumented user 62793 6/50 current_auc = 0.8846153846153846
User 62793 AUC after training: 0.8846153846153846
User 62793 does not improve AUC. Reverting changes.
Training on augumented user 1685 7/50 current_auc = 0.8846153846153846
User 1685 AUC after training: 0.8846153846153846
User 1685 does not improve AUC. Reverting changes.
Training on augumented user 30334 8/50 current_auc = 0.8846153846153846
User 30334 AUC after training: 0.8814102564102564
User 30334 does not improve AUC. Reverting changes.
Training on augumented user 44793 9/50 current_auc = 0.8846153846153846
User 44793 AUC after training: 0.8846153846153846
User 44793 does not improve AUC. Reverting changes.
Training on augumented user 22468 10/50 current_auc = 0.8846153846153846
User 22468 AUC after training: 0.8846153846153846
User 22468 does not improve AUC. Reverting changes.
Training on augumented user 127774 11/50 current_auc = 0.8846153846153846
User 127774 AUC after training: 0.8846153846153846
User 127774 does not improve AUC. Reverting changes.
Training on augumented user 127748 12/50 current_auc = 0.8846153846153846
User 127748 AUC after training: 0.8846153846153846
User 127748 does not improve AUC. Reverting changes.
Training on augumented user 36683 13/50 current_auc = 0.8846153846153846
User 36683 AUC after training: 0.8846153846153846
User 36683 does not improve AUC. Reverting changes.
Training on augumented user 104696 14/50 current_auc = 0.8846153846153846
User 104696 AUC after training: 0.8846153846153846
User 104696 does not improve AUC. Reverting changes.
Training on augumented user 89029 15/50 current_auc = 0.8846153846153846
User 89029 AUC after training: 0.8846153846153846
User 89029 does not improve AUC. Reverting changes.
Training on augumented user 83763 16/50 current_auc = 0.8846153846153846
User 83763 AUC after training: 0.8846153846153846
User 83763 does not improve AUC. Reverting changes.
Training on augumented user 128191 17/50 current_auc = 0.8846153846153846
User 128191 AUC after training: 0.8846153846153846
User 128191 does not improve AUC. Reverting changes.
Training on augumented user 27298 18/50 current_auc = 0.8846153846153846
User 27298 AUC after training: 0.8846153846153846
User 27298 does not improve AUC. Reverting changes.
Training on augumented user 109585 19/50 current_auc = 0.8846153846153846
User 109585 AUC after training: 0.8846153846153846
User 109585 does not improve AUC. Reverting changes.
Training on augumented user 40257 20/50 current_auc = 0.8846153846153846
User 40257 AUC after training: 0.8846153846153846
User 40257 does not improve AUC. Reverting changes.
Training on augumented user 93916 21/50 current_auc = 0.8846153846153846
User 93916 AUC after training: 0.8846153846153846
User 93916 does not improve AUC. Reverting changes.
Training on augumented user 46825 22/50 current_auc = 0.8846153846153846
User 46825 AUC after training: 0.8846153846153846
User 46825 does not improve AUC. Reverting changes.
Training on augumented user 56147 23/50 current_auc = 0.8846153846153846
User 56147 AUC after training: 0.8846153846153846
User 56147 does not improve AUC. Reverting changes.
Training on augumented user 102932 24/50 current_auc = 0.8846153846153846
User 102932 AUC after training: 0.8846153846153846
User 102932 does not improve AUC. Reverting changes.
Training on augumented user 30744 25/50 current_auc = 0.8846153846153846
User 30744 AUC after training: 0.8814102564102564
User 30744 does not improve AUC. Reverting changes.
Training on augumented user 15958 26/50 current_auc = 0.8846153846153846
User 15958 AUC after training: 0.8846153846153846
User 15958 does not improve AUC. Reverting changes.
Training on augumented user 97967 27/50 current_auc = 0.8846153846153846
User 97967 AUC after training: 0.8846153846153846
User 97967 does not improve AUC. Reverting changes.
Training on augumented user 133632 28/50 current_auc = 0.8846153846153846
User 133632 AUC after training: 0.8846153846153846
User 133632 does not improve AUC. Reverting changes.
Training on augumented user 57191 29/50 current_auc = 0.8846153846153846
User 57191 AUC after training: 0.8846153846153846
User 57191 does not improve AUC. Reverting changes.
Training on augumented user 22707 30/50 current_auc = 0.8846153846153846
User 22707 AUC after training: 0.8846153846153846
User 22707 does not improve AUC. Reverting changes.
Training on augumented user 44467 31/50 current_auc = 0.8846153846153846
User 44467 AUC after training: 0.8846153846153846
User 44467 does not improve AUC. Reverting changes.
Training on augumented user 9865 32/50 current_auc = 0.8846153846153846
User 9865 AUC after training: 0.8814102564102564
User 9865 does not improve AUC. Reverting changes.
Training on augumented user 44502 33/50 current_auc = 0.8846153846153846
User 44502 AUC after training: 0.8846153846153846
User 44502 does not improve AUC. Reverting changes.
Training on augumented user 8666 34/50 current_auc = 0.8846153846153846
User 8666 AUC after training: 0.8846153846153846
User 8666 does not improve AUC. Reverting changes.
Training on augumented user 16396 35/50 current_auc = 0.8846153846153846
User 16396 AUC after training: 0.8846153846153846
User 16396 does not improve AUC. Reverting changes.
Training on augumented user 111027 36/50 current_auc = 0.8846153846153846
User 111027 AUC after training: 0.8846153846153846
User 111027 does not improve AUC. Reverting changes.
Training on augumented user 51535 37/50 current_auc = 0.8846153846153846
User 51535 AUC after training: 0.8846153846153846
User 51535 does not improve AUC. Reverting changes.
Training on augumented user 73891 38/50 current_auc = 0.8846153846153846
User 73891 AUC after training: 0.8846153846153846
User 73891 does not improve AUC. Reverting changes.
Training on augumented user 129204 39/50 current_auc = 0.8846153846153846
User 129204 AUC after training: 0.8846153846153846
User 129204 does not improve AUC. Reverting changes.
Training on augumented user 87418 40/50 current_auc = 0.8846153846153846
User 87418 AUC after training: 0.8846153846153846
User 87418 does not improve AUC. Reverting changes.
Training on augumented user 29780 41/50 current_auc = 0.8846153846153846
User 29780 AUC after training: 0.8846153846153846
User 29780 does not improve AUC. Reverting changes.
Training on augumented user 20782 42/50 current_auc = 0.8846153846153846
User 20782 AUC after training: 0.8814102564102564
User 20782 does not improve AUC. Reverting changes.
Training on augumented user 113479 43/50 current_auc = 0.8846153846153846
User 113479 AUC after training: 0.8814102564102564
User 113479 does not improve AUC. Reverting changes.
Training on augumented user 71327 44/50 current_auc = 0.8846153846153846
User 71327 AUC after training: 0.8846153846153846
User 71327 does not improve AUC. Reverting changes.
Training on augumented user 61053 45/50 current_auc = 0.8846153846153846
User 61053 AUC after training: 0.8846153846153846
User 61053 does not improve AUC. Reverting changes.
Training on augumented user 20166 46/50 current_auc = 0.8846153846153846
User 20166 AUC after training: 0.8846153846153846
User 20166 does not improve AUC. Reverting changes.
Training on augumented user 32294 47/50 current_auc = 0.8846153846153846
User 32294 AUC after training: 0.8814102564102564
User 32294 does not improve AUC. Reverting changes.
Training on augumented user 135038 48/50 current_auc = 0.8846153846153846
User 135038 AUC after training: 0.8846153846153846
User 135038 does not improve AUC. Reverting changes.
Training on augumented user 106879 49/50 current_auc = 0.8846153846153846
User 106879 AUC after training: 0.8846153846153846
User 106879 does not improve AUC. Reverting changes.
[2024-12-02 20:10:36.897986] start test user 102349 269/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:10:37.580376] start test user 102349 269/567 recall augumented users by random, augumented_users = [76763, 42546, 132586, 116129, 171, 134764, 5295, 75182, 17566, 129046, 54636, 81836, 66245, 17555, 2980, 96338, 137110, 128203, 25433, 118337, 20317, 44318, 61019, 95183, 94500, 19158, 120969, 97978, 50301, 5518, 35248, 94081, 41678, 93226, 75831, 37920, 28241, 125642, 74466, 12720, 46068, 39272, 38328, 52242, 22508, 93925, 44242, 38822, 130343, 133835]
[2024-12-02 20:10:37.597116] user = 102349 Cloud 269/567
[2024-12-02 20:10:37.631946] user = 102349 Local 269/567
[2024-12-02 20:10:37.792029] user = 102349 Local+ 269/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:10:40.246969] user = 102349 MPDA- 269/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5604458886923616
Training on augumented user 76763 0/50 current_auc = 0.5604458886923616
User 76763 AUC after training: 0.559993418617087
User 76763 does not improve AUC. Reverting changes.
Training on augumented user 42546 1/50 current_auc = 0.5604458886923616
User 42546 AUC after training: 0.560363621405948
User 42546 does not improve AUC. Reverting changes.
Training on augumented user 132586 2/50 current_auc = 0.5604458886923616
User 132586 AUC after training: 0.5652996585907614
User 132586 improves AUC. Keeping the model.
Training on augumented user 116129 3/50 current_auc = 0.5652996585907614
User 116129 AUC after training: 0.5659577968820699
User 116129 improves AUC. Keeping the model.
Training on augumented user 171 4/50 current_auc = 0.5659577968820699
User 171 AUC after training: 0.5657521286660359
User 171 does not improve AUC. Reverting changes.
Training on augumented user 134764 5/50 current_auc = 0.5659577968820699
User 134764 AUC after training: 0.5652996585907615
User 134764 does not improve AUC. Reverting changes.
Training on augumented user 5295 6/50 current_auc = 0.5659577968820699
User 5295 AUC after training: 0.5675208753239275
User 5295 improves AUC. Keeping the model.
Training on augumented user 75182 7/50 current_auc = 0.5675208753239275
User 75182 AUC after training: 0.5675208753239275
User 75182 does not improve AUC. Reverting changes.
Training on augumented user 17566 8/50 current_auc = 0.5675208753239275
User 17566 AUC after training: 0.566122331454897
User 17566 does not improve AUC. Reverting changes.
Training on augumented user 129046 9/50 current_auc = 0.5675208753239275
User 129046 AUC after training: 0.5671095388918597
User 129046 does not improve AUC. Reverting changes.
Training on augumented user 54636 10/50 current_auc = 0.5675208753239275
User 54636 AUC after training: 0.5660811978116902
User 54636 does not improve AUC. Reverting changes.
Training on augumented user 81836 11/50 current_auc = 0.5675208753239275
User 81836 AUC after training: 0.5682201472584427
User 81836 improves AUC. Keeping the model.
Training on augumented user 66245 12/50 current_auc = 0.5682201472584427
User 66245 AUC after training: 0.5685903500473037
User 66245 improves AUC. Keeping the model.
Training on augumented user 17555 13/50 current_auc = 0.5685903500473037
User 17555 AUC after training: 0.5684258154744766
User 17555 does not improve AUC. Reverting changes.
Training on augumented user 2980 14/50 current_auc = 0.5685903500473037
User 2980 AUC after training: 0.5667393361029986
User 2980 does not improve AUC. Reverting changes.
Training on augumented user 96338 15/50 current_auc = 0.5685903500473037
User 96338 AUC after training: 0.5690428201225781
User 96338 improves AUC. Keeping the model.
Training on augumented user 137110 16/50 current_auc = 0.5690428201225781
User 137110 AUC after training: 0.5688371519065444
User 137110 does not improve AUC. Reverting changes.
Training on augumented user 128203 17/50 current_auc = 0.5690428201225781
User 128203 AUC after training: 0.5580601373863683
User 128203 does not improve AUC. Reverting changes.
Training on augumented user 25433 18/50 current_auc = 0.5690428201225781
User 25433 AUC after training: 0.5693307556250257
User 25433 improves AUC. Keeping the model.
Training on augumented user 118337 19/50 current_auc = 0.5693307556250257
User 118337 AUC after training: 0.5692484883386122
User 118337 does not improve AUC. Reverting changes.
Training on augumented user 20317 20/50 current_auc = 0.5693307556250257
User 20317 AUC after training: 0.5693718892682325
User 20317 improves AUC. Keeping the model.
Training on augumented user 44318 21/50 current_auc = 0.5693718892682325
User 44318 AUC after training: 0.5696186911274732
User 44318 improves AUC. Keeping the model.
Training on augumented user 61019 22/50 current_auc = 0.5696186911274732
User 61019 AUC after training: 0.5697832257003002
User 61019 improves AUC. Keeping the model.
Training on augumented user 95183 23/50 current_auc = 0.5697832257003002
User 95183 AUC after training: 0.5697009584138867
User 95183 does not improve AUC. Reverting changes.
Training on augumented user 94500 24/50 current_auc = 0.5697832257003002
User 94500 AUC after training: 0.5700711612027477
User 94500 improves AUC. Keeping the model.
Training on augumented user 19158 25/50 current_auc = 0.5700711612027477
User 19158 AUC after training: 0.5693307556250258
User 19158 does not improve AUC. Reverting changes.
Training on augumented user 120969 26/50 current_auc = 0.5700711612027477
User 120969 AUC after training: 0.5697420920570935
User 120969 does not improve AUC. Reverting changes.
Training on augumented user 97978 27/50 current_auc = 0.5700711612027477
User 97978 AUC after training: 0.5702356957755748
User 97978 improves AUC. Keeping the model.
Training on augumented user 50301 28/50 current_auc = 0.5702356957755748
User 50301 AUC after training: 0.5701534284891612
User 50301 does not improve AUC. Reverting changes.
Training on augumented user 5518 29/50 current_auc = 0.5702356957755748
User 5518 AUC after training: 0.5659577968820699
User 5518 does not improve AUC. Reverting changes.
Training on augumented user 35248 30/50 current_auc = 0.5702356957755748
User 35248 AUC after training: 0.5705647649212291
User 35248 improves AUC. Keeping the model.
Training on augumented user 94081 31/50 current_auc = 0.5705647649212291
User 94081 AUC after training: 0.5702768294187816
User 94081 does not improve AUC. Reverting changes.
Training on augumented user 41678 32/50 current_auc = 0.5705647649212291
User 41678 AUC after training: 0.5699888939163341
User 41678 does not improve AUC. Reverting changes.
Training on augumented user 93226 33/50 current_auc = 0.5705647649212291
User 93226 AUC after training: 0.5704002303484019
User 93226 does not improve AUC. Reverting changes.
Training on augumented user 75831 34/50 current_auc = 0.5705647649212291
User 75831 AUC after training: 0.5697832257003004
User 75831 does not improve AUC. Reverting changes.
Training on augumented user 37920 35/50 current_auc = 0.5705647649212291
User 37920 AUC after training: 0.569454156554646
User 37920 does not improve AUC. Reverting changes.
Training on augumented user 28241 36/50 current_auc = 0.5705647649212291
User 28241 AUC after training: 0.5700711612027478
User 28241 does not improve AUC. Reverting changes.
Training on augumented user 125642 37/50 current_auc = 0.5705647649212291
User 125642 AUC after training: 0.5698654929867139
User 125642 does not improve AUC. Reverting changes.
Training on augumented user 74466 38/50 current_auc = 0.5705647649212291
User 74466 AUC after training: 0.5703179630619883
User 74466 does not improve AUC. Reverting changes.
Training on augumented user 12720 39/50 current_auc = 0.5705647649212291
User 12720 AUC after training: 0.5705647649212291
User 12720 does not improve AUC. Reverting changes.
Training on augumented user 46068 40/50 current_auc = 0.5705647649212291
User 46068 AUC after training: 0.5704413639916087
User 46068 does not improve AUC. Reverting changes.
Training on augumented user 39272 41/50 current_auc = 0.5705647649212291
User 39272 AUC after training: 0.5700300275595409
User 39272 does not improve AUC. Reverting changes.
Training on augumented user 38328 42/50 current_auc = 0.5705647649212291
User 38328 AUC after training: 0.5703590967051952
User 38328 does not improve AUC. Reverting changes.
Training on augumented user 52242 43/50 current_auc = 0.5705647649212291
User 52242 AUC after training: 0.5699888939163341
User 52242 does not improve AUC. Reverting changes.
Training on augumented user 22508 44/50 current_auc = 0.5705647649212291
User 22508 AUC after training: 0.5701534284891614
User 22508 does not improve AUC. Reverting changes.
Training on augumented user 93925 45/50 current_auc = 0.5705647649212291
User 93925 AUC after training: 0.570770433137263
User 93925 improves AUC. Keeping the model.
Training on augumented user 44242 46/50 current_auc = 0.570770433137263
User 44242 AUC after training: 0.5705236312780223
User 44242 does not improve AUC. Reverting changes.
Training on augumented user 38822 47/50 current_auc = 0.570770433137263
User 38822 AUC after training: 0.5703179630619883
User 38822 does not improve AUC. Reverting changes.
Training on augumented user 130343 48/50 current_auc = 0.570770433137263
User 130343 AUC after training: 0.5708938340668833
User 130343 improves AUC. Keeping the model.
Training on augumented user 133835 49/50 current_auc = 0.5708938340668833
User 133835 AUC after training: 0.5708115667804697
User 133835 does not improve AUC. Reverting changes.
[2024-12-02 20:11:13.823145] start test user 102368 270/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:11:14.533307] start test user 102368 270/567 recall augumented users by random, augumented_users = [56640, 134078, 89581, 45153, 27557, 16510, 88912, 726, 21023, 15954, 21106, 99773, 10496, 21582, 11903, 23377, 106164, 118040, 137953, 23346, 128223, 117658, 62009, 33585, 120321, 82402, 76753, 45249, 116106, 124954, 40296, 66676, 66366, 33322, 115867, 47678, 86884, 137263, 14693, 12046, 115380, 116433, 110401, 82282, 135590, 1388, 9823, 119078, 14099, 45815]
[2024-12-02 20:11:14.578894] user = 102368 Cloud 270/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:11:14.585996] user = 102368 Local 270/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:11:14.735832] user = 102368 Local+ 270/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:11:17.263165] user = 102368 MPDA- 270/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 56640 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 56640 AUC after training: 0.5
User 56640 does not improve AUC. Reverting changes.
Training on augumented user 134078 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134078 AUC after training: 0.5
User 134078 does not improve AUC. Reverting changes.
Training on augumented user 89581 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 89581 AUC after training: 0.5
User 89581 does not improve AUC. Reverting changes.
Training on augumented user 45153 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45153 AUC after training: 0.5
User 45153 does not improve AUC. Reverting changes.
Training on augumented user 27557 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27557 AUC after training: 0.5
User 27557 does not improve AUC. Reverting changes.
Training on augumented user 16510 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16510 AUC after training: 0.5
User 16510 does not improve AUC. Reverting changes.
Training on augumented user 88912 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88912 AUC after training: 0.5
User 88912 does not improve AUC. Reverting changes.
Training on augumented user 726 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 726 AUC after training: 0.5
User 726 does not improve AUC. Reverting changes.
Training on augumented user 21023 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21023 AUC after training: 0.5
User 21023 does not improve AUC. Reverting changes.
Training on augumented user 15954 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 15954 AUC after training: 0.5
User 15954 does not improve AUC. Reverting changes.
Training on augumented user 21106 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21106 AUC after training: 0.5
User 21106 does not improve AUC. Reverting changes.
Training on augumented user 99773 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 99773 AUC after training: 0.5
User 99773 does not improve AUC. Reverting changes.
Training on augumented user 10496 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 10496 AUC after training: 0.5
User 10496 does not improve AUC. Reverting changes.
Training on augumented user 21582 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21582 AUC after training: 0.5
User 21582 does not improve AUC. Reverting changes.
Training on augumented user 11903 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 11903 AUC after training: 0.5
User 11903 does not improve AUC. Reverting changes.
Training on augumented user 23377 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23377 AUC after training: 0.5
User 23377 does not improve AUC. Reverting changes.
Training on augumented user 106164 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106164 AUC after training: 0.5
User 106164 does not improve AUC. Reverting changes.
Training on augumented user 118040 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 118040 AUC after training: 0.5
User 118040 does not improve AUC. Reverting changes.
Training on augumented user 137953 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137953 AUC after training: 0.5
User 137953 does not improve AUC. Reverting changes.
Training on augumented user 23346 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23346 AUC after training: 0.5
User 23346 does not improve AUC. Reverting changes.
Training on augumented user 128223 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128223 AUC after training: 0.5
User 128223 does not improve AUC. Reverting changes.
Training on augumented user 117658 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117658 AUC after training: 0.5
User 117658 does not improve AUC. Reverting changes.
Training on augumented user 62009 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 62009 AUC after training: 0.5
User 62009 does not improve AUC. Reverting changes.
Training on augumented user 33585 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33585 AUC after training: 0.5
User 33585 does not improve AUC. Reverting changes.
Training on augumented user 120321 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 120321 AUC after training: 0.5
User 120321 does not improve AUC. Reverting changes.
Training on augumented user 82402 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82402 AUC after training: 0.5
User 82402 does not improve AUC. Reverting changes.
Training on augumented user 76753 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 76753 AUC after training: 0.5
User 76753 does not improve AUC. Reverting changes.
Training on augumented user 45249 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45249 AUC after training: 0.5
User 45249 does not improve AUC. Reverting changes.
Training on augumented user 116106 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116106 AUC after training: 0.5
User 116106 does not improve AUC. Reverting changes.
Training on augumented user 124954 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124954 AUC after training: 0.5
User 124954 does not improve AUC. Reverting changes.
Training on augumented user 40296 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 40296 AUC after training: 0.5
User 40296 does not improve AUC. Reverting changes.
Training on augumented user 66676 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66676 AUC after training: 0.5
User 66676 does not improve AUC. Reverting changes.
Training on augumented user 66366 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 66366 AUC after training: 0.5
User 66366 does not improve AUC. Reverting changes.
Training on augumented user 33322 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 33322 AUC after training: 0.5
User 33322 does not improve AUC. Reverting changes.
Training on augumented user 115867 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115867 AUC after training: 0.5
User 115867 does not improve AUC. Reverting changes.
Training on augumented user 47678 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47678 AUC after training: 0.5
User 47678 does not improve AUC. Reverting changes.
Training on augumented user 86884 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 86884 AUC after training: 0.5
User 86884 does not improve AUC. Reverting changes.
Training on augumented user 137263 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137263 AUC after training: 0.5
User 137263 does not improve AUC. Reverting changes.
Training on augumented user 14693 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14693 AUC after training: 0.5
User 14693 does not improve AUC. Reverting changes.
Training on augumented user 12046 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12046 AUC after training: 0.5
User 12046 does not improve AUC. Reverting changes.
Training on augumented user 115380 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115380 AUC after training: 0.5
User 115380 does not improve AUC. Reverting changes.
Training on augumented user 116433 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 116433 AUC after training: 0.5
User 116433 does not improve AUC. Reverting changes.
Training on augumented user 110401 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 110401 AUC after training: 0.5
User 110401 does not improve AUC. Reverting changes.
Training on augumented user 82282 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 82282 AUC after training: 0.5
User 82282 does not improve AUC. Reverting changes.
Training on augumented user 135590 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 135590 AUC after training: 0.5
User 135590 does not improve AUC. Reverting changes.
Training on augumented user 1388 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1388 AUC after training: 0.5
User 1388 does not improve AUC. Reverting changes.
Training on augumented user 9823 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 9823 AUC after training: 0.5
User 9823 does not improve AUC. Reverting changes.
Training on augumented user 119078 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 119078 AUC after training: 0.5
User 119078 does not improve AUC. Reverting changes.
Training on augumented user 14099 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 14099 AUC after training: 0.5
User 14099 does not improve AUC. Reverting changes.
Training on augumented user 45815 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 45815 AUC after training: 0.5
User 45815 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:11:47.643767] start test user 102395 271/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:11:48.171425] start test user 102395 271/567 recall augumented users by random, augumented_users = [72298, 79662, 64611, 57696, 62634, 136350, 9979, 6623, 94703, 92337, 50316, 4142, 4065, 107322, 96696, 34881, 131888, 18316, 114107, 119271, 75259, 97828, 82901, 87893, 131342, 57029, 92201, 86161, 82678, 31232, 37981, 123914, 10553, 109166, 57633, 25711, 49163, 121436, 94757, 26002, 14078, 14686, 109697, 34247, 87113, 64900, 53600, 81387, 31290, 118787]
[2024-12-02 20:11:48.186984] user = 102395 Cloud 271/567
[2024-12-02 20:11:48.197069] user = 102395 Local 271/567
[2024-12-02 20:11:48.241523] user = 102395 Local+ 271/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:11:51.308827] user = 102395 MPDA- 271/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7071428571428572
Training on augumented user 72298 0/50 current_auc = 0.7071428571428572
User 72298 AUC after training: 0.7095238095238096
User 72298 improves AUC. Keeping the model.
Training on augumented user 79662 1/50 current_auc = 0.7095238095238096
User 79662 AUC after training: 0.7071428571428572
User 79662 does not improve AUC. Reverting changes.
Training on augumented user 64611 2/50 current_auc = 0.7095238095238096
User 64611 AUC after training: 0.7095238095238096
User 64611 does not improve AUC. Reverting changes.
Training on augumented user 57696 3/50 current_auc = 0.7095238095238096
User 57696 AUC after training: 0.7071428571428572
User 57696 does not improve AUC. Reverting changes.
Training on augumented user 62634 4/50 current_auc = 0.7095238095238096
User 62634 AUC after training: 0.7071428571428572
User 62634 does not improve AUC. Reverting changes.
Training on augumented user 136350 5/50 current_auc = 0.7095238095238096
User 136350 AUC after training: 0.7095238095238096
User 136350 does not improve AUC. Reverting changes.
Training on augumented user 9979 6/50 current_auc = 0.7095238095238096
User 9979 AUC after training: 0.7095238095238096
User 9979 does not improve AUC. Reverting changes.
Training on augumented user 6623 7/50 current_auc = 0.7095238095238096
User 6623 AUC after training: 0.7071428571428572
User 6623 does not improve AUC. Reverting changes.
Training on augumented user 94703 8/50 current_auc = 0.7095238095238096
User 94703 AUC after training: 0.7071428571428572
User 94703 does not improve AUC. Reverting changes.
Training on augumented user 92337 9/50 current_auc = 0.7095238095238096
User 92337 AUC after training: 0.7095238095238096
User 92337 does not improve AUC. Reverting changes.
Training on augumented user 50316 10/50 current_auc = 0.7095238095238096
User 50316 AUC after training: 0.7095238095238096
User 50316 does not improve AUC. Reverting changes.
Training on augumented user 4142 11/50 current_auc = 0.7095238095238096
User 4142 AUC after training: 0.7095238095238096
User 4142 does not improve AUC. Reverting changes.
Training on augumented user 4065 12/50 current_auc = 0.7095238095238096
User 4065 AUC after training: 0.7095238095238096
User 4065 does not improve AUC. Reverting changes.
Training on augumented user 107322 13/50 current_auc = 0.7095238095238096
User 107322 AUC after training: 0.7119047619047619
User 107322 improves AUC. Keeping the model.
Training on augumented user 96696 14/50 current_auc = 0.7119047619047619
User 96696 AUC after training: 0.7119047619047619
User 96696 does not improve AUC. Reverting changes.
Training on augumented user 34881 15/50 current_auc = 0.7119047619047619
User 34881 AUC after training: 0.7119047619047619
User 34881 does not improve AUC. Reverting changes.
Training on augumented user 131888 16/50 current_auc = 0.7119047619047619
User 131888 AUC after training: 0.7119047619047619
User 131888 does not improve AUC. Reverting changes.
Training on augumented user 18316 17/50 current_auc = 0.7119047619047619
User 18316 AUC after training: 0.7119047619047619
User 18316 does not improve AUC. Reverting changes.
Training on augumented user 114107 18/50 current_auc = 0.7119047619047619
User 114107 AUC after training: 0.7119047619047619
User 114107 does not improve AUC. Reverting changes.
Training on augumented user 119271 19/50 current_auc = 0.7119047619047619
User 119271 AUC after training: 0.7119047619047619
User 119271 does not improve AUC. Reverting changes.
Training on augumented user 75259 20/50 current_auc = 0.7119047619047619
User 75259 AUC after training: 0.7119047619047619
User 75259 does not improve AUC. Reverting changes.
Training on augumented user 97828 21/50 current_auc = 0.7119047619047619
User 97828 AUC after training: 0.7119047619047619
User 97828 does not improve AUC. Reverting changes.
Training on augumented user 82901 22/50 current_auc = 0.7119047619047619
User 82901 AUC after training: 0.7119047619047619
User 82901 does not improve AUC. Reverting changes.
Training on augumented user 87893 23/50 current_auc = 0.7119047619047619
User 87893 AUC after training: 0.7095238095238096
User 87893 does not improve AUC. Reverting changes.
Training on augumented user 131342 24/50 current_auc = 0.7119047619047619
User 131342 AUC after training: 0.7119047619047619
User 131342 does not improve AUC. Reverting changes.
Training on augumented user 57029 25/50 current_auc = 0.7119047619047619
User 57029 AUC after training: 0.7119047619047619
User 57029 does not improve AUC. Reverting changes.
Training on augumented user 92201 26/50 current_auc = 0.7119047619047619
User 92201 AUC after training: 0.7119047619047619
User 92201 does not improve AUC. Reverting changes.
Training on augumented user 86161 27/50 current_auc = 0.7119047619047619
User 86161 AUC after training: 0.7119047619047619
User 86161 does not improve AUC. Reverting changes.
Training on augumented user 82678 28/50 current_auc = 0.7119047619047619
User 82678 AUC after training: 0.7119047619047619
User 82678 does not improve AUC. Reverting changes.
Training on augumented user 31232 29/50 current_auc = 0.7119047619047619
User 31232 AUC after training: 0.7119047619047619
User 31232 does not improve AUC. Reverting changes.
Training on augumented user 37981 30/50 current_auc = 0.7119047619047619
User 37981 AUC after training: 0.7119047619047619
User 37981 does not improve AUC. Reverting changes.
Training on augumented user 123914 31/50 current_auc = 0.7119047619047619
User 123914 AUC after training: 0.7119047619047619
User 123914 does not improve AUC. Reverting changes.
Training on augumented user 10553 32/50 current_auc = 0.7119047619047619
User 10553 AUC after training: 0.7119047619047619
User 10553 does not improve AUC. Reverting changes.
Training on augumented user 109166 33/50 current_auc = 0.7119047619047619
User 109166 AUC after training: 0.7119047619047619
User 109166 does not improve AUC. Reverting changes.
Training on augumented user 57633 34/50 current_auc = 0.7119047619047619
User 57633 AUC after training: 0.7119047619047619
User 57633 does not improve AUC. Reverting changes.
Training on augumented user 25711 35/50 current_auc = 0.7119047619047619
User 25711 AUC after training: 0.7119047619047619
User 25711 does not improve AUC. Reverting changes.
Training on augumented user 49163 36/50 current_auc = 0.7119047619047619
User 49163 AUC after training: 0.7119047619047619
User 49163 does not improve AUC. Reverting changes.
Training on augumented user 121436 37/50 current_auc = 0.7119047619047619
User 121436 AUC after training: 0.7119047619047619
User 121436 does not improve AUC. Reverting changes.
Training on augumented user 94757 38/50 current_auc = 0.7119047619047619
User 94757 AUC after training: 0.7119047619047619
User 94757 does not improve AUC. Reverting changes.
Training on augumented user 26002 39/50 current_auc = 0.7119047619047619
User 26002 AUC after training: 0.7119047619047619
User 26002 does not improve AUC. Reverting changes.
Training on augumented user 14078 40/50 current_auc = 0.7119047619047619
User 14078 AUC after training: 0.7119047619047619
User 14078 does not improve AUC. Reverting changes.
Training on augumented user 14686 41/50 current_auc = 0.7119047619047619
User 14686 AUC after training: 0.7119047619047619
User 14686 does not improve AUC. Reverting changes.
Training on augumented user 109697 42/50 current_auc = 0.7119047619047619
User 109697 AUC after training: 0.7119047619047619
User 109697 does not improve AUC. Reverting changes.
Training on augumented user 34247 43/50 current_auc = 0.7119047619047619
User 34247 AUC after training: 0.7119047619047619
User 34247 does not improve AUC. Reverting changes.
Training on augumented user 87113 44/50 current_auc = 0.7119047619047619
User 87113 AUC after training: 0.7119047619047619
User 87113 does not improve AUC. Reverting changes.
Training on augumented user 64900 45/50 current_auc = 0.7119047619047619
User 64900 AUC after training: 0.7119047619047619
User 64900 does not improve AUC. Reverting changes.
Training on augumented user 53600 46/50 current_auc = 0.7119047619047619
User 53600 AUC after training: 0.7095238095238096
User 53600 does not improve AUC. Reverting changes.
Training on augumented user 81387 47/50 current_auc = 0.7119047619047619
User 81387 AUC after training: 0.7119047619047619
User 81387 does not improve AUC. Reverting changes.
Training on augumented user 31290 48/50 current_auc = 0.7119047619047619
User 31290 AUC after training: 0.7119047619047619
User 31290 does not improve AUC. Reverting changes.
Training on augumented user 118787 49/50 current_auc = 0.7119047619047619
User 118787 AUC after training: 0.7119047619047619
User 118787 does not improve AUC. Reverting changes.
[2024-12-02 20:12:26.624401] start test user 102411 272/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:12:27.263170] start test user 102411 272/567 recall augumented users by random, augumented_users = [73545, 80072, 131489, 59407, 134543, 88475, 94040, 131902, 89555, 1016, 130030, 118989, 72849, 43551, 125259, 51532, 16033, 138362, 14390, 50628, 43223, 72910, 16124, 10218, 59391, 8893, 6728, 138405, 134823, 119220, 115773, 85225, 53644, 14940, 126010, 57522, 118143, 45647, 113328, 95400, 111994, 86514, 76075, 115631, 38456, 121434, 25388, 13547, 120752, 69071]
[2024-12-02 20:12:27.278784] user = 102411 Cloud 272/567
[2024-12-02 20:12:27.289761] user = 102411 Local 272/567
[2024-12-02 20:12:27.386987] user = 102411 Local+ 272/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:12:30.438937] user = 102411 MPDA- 272/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.6363636363636364
Training on augumented user 73545 0/50 current_auc = 0.6363636363636364
User 73545 AUC after training: 0.6363636363636364
User 73545 does not improve AUC. Reverting changes.
Training on augumented user 80072 1/50 current_auc = 0.6363636363636364
User 80072 AUC after training: 0.6363636363636364
User 80072 does not improve AUC. Reverting changes.
Training on augumented user 131489 2/50 current_auc = 0.6363636363636364
User 131489 AUC after training: 0.6303030303030303
User 131489 does not improve AUC. Reverting changes.
Training on augumented user 59407 3/50 current_auc = 0.6363636363636364
User 59407 AUC after training: 0.6242424242424243
User 59407 does not improve AUC. Reverting changes.
Training on augumented user 134543 4/50 current_auc = 0.6363636363636364
User 134543 AUC after training: 0.6363636363636364
User 134543 does not improve AUC. Reverting changes.
Training on augumented user 88475 5/50 current_auc = 0.6363636363636364
User 88475 AUC after training: 0.6363636363636364
User 88475 does not improve AUC. Reverting changes.
Training on augumented user 94040 6/50 current_auc = 0.6363636363636364
User 94040 AUC after training: 0.6363636363636364
User 94040 does not improve AUC. Reverting changes.
Training on augumented user 131902 7/50 current_auc = 0.6363636363636364
User 131902 AUC after training: 0.6303030303030303
User 131902 does not improve AUC. Reverting changes.
Training on augumented user 89555 8/50 current_auc = 0.6363636363636364
User 89555 AUC after training: 0.6424242424242425
User 89555 improves AUC. Keeping the model.
Training on augumented user 1016 9/50 current_auc = 0.6424242424242425
User 1016 AUC after training: 0.6424242424242425
User 1016 does not improve AUC. Reverting changes.
Training on augumented user 130030 10/50 current_auc = 0.6424242424242425
User 130030 AUC after training: 0.6242424242424243
User 130030 does not improve AUC. Reverting changes.
Training on augumented user 118989 11/50 current_auc = 0.6424242424242425
User 118989 AUC after training: 0.6424242424242425
User 118989 does not improve AUC. Reverting changes.
Training on augumented user 72849 12/50 current_auc = 0.6424242424242425
User 72849 AUC after training: 0.6424242424242425
User 72849 does not improve AUC. Reverting changes.
Training on augumented user 43551 13/50 current_auc = 0.6424242424242425
User 43551 AUC after training: 0.6424242424242425
User 43551 does not improve AUC. Reverting changes.
Training on augumented user 125259 14/50 current_auc = 0.6424242424242425
User 125259 AUC after training: 0.6424242424242425
User 125259 does not improve AUC. Reverting changes.
Training on augumented user 51532 15/50 current_auc = 0.6424242424242425
User 51532 AUC after training: 0.6545454545454545
User 51532 improves AUC. Keeping the model.
Training on augumented user 16033 16/50 current_auc = 0.6545454545454545
User 16033 AUC after training: 0.6545454545454545
User 16033 does not improve AUC. Reverting changes.
Training on augumented user 138362 17/50 current_auc = 0.6545454545454545
User 138362 AUC after training: 0.6545454545454545
User 138362 does not improve AUC. Reverting changes.
Training on augumented user 14390 18/50 current_auc = 0.6545454545454545
User 14390 AUC after training: 0.6545454545454545
User 14390 does not improve AUC. Reverting changes.
Training on augumented user 50628 19/50 current_auc = 0.6545454545454545
User 50628 AUC after training: 0.6545454545454545
User 50628 does not improve AUC. Reverting changes.
Training on augumented user 43223 20/50 current_auc = 0.6545454545454545
User 43223 AUC after training: 0.6545454545454545
User 43223 does not improve AUC. Reverting changes.
Training on augumented user 72910 21/50 current_auc = 0.6545454545454545
User 72910 AUC after training: 0.6545454545454545
User 72910 does not improve AUC. Reverting changes.
Training on augumented user 16124 22/50 current_auc = 0.6545454545454545
User 16124 AUC after training: 0.6545454545454545
User 16124 does not improve AUC. Reverting changes.
Training on augumented user 10218 23/50 current_auc = 0.6545454545454545
User 10218 AUC after training: 0.6545454545454545
User 10218 does not improve AUC. Reverting changes.
Training on augumented user 59391 24/50 current_auc = 0.6545454545454545
User 59391 AUC after training: 0.6545454545454545
User 59391 does not improve AUC. Reverting changes.
Training on augumented user 8893 25/50 current_auc = 0.6545454545454545
User 8893 AUC after training: 0.6545454545454545
User 8893 does not improve AUC. Reverting changes.
Training on augumented user 6728 26/50 current_auc = 0.6545454545454545
User 6728 AUC after training: 0.6545454545454545
User 6728 does not improve AUC. Reverting changes.
Training on augumented user 138405 27/50 current_auc = 0.6545454545454545
User 138405 AUC after training: 0.6545454545454545
User 138405 does not improve AUC. Reverting changes.
Training on augumented user 134823 28/50 current_auc = 0.6545454545454545
User 134823 AUC after training: 0.6606060606060606
User 134823 improves AUC. Keeping the model.
Training on augumented user 119220 29/50 current_auc = 0.6606060606060606
User 119220 AUC after training: 0.6363636363636364
User 119220 does not improve AUC. Reverting changes.
Training on augumented user 115773 30/50 current_auc = 0.6606060606060606
User 115773 AUC after training: 0.6606060606060606
User 115773 does not improve AUC. Reverting changes.
Training on augumented user 85225 31/50 current_auc = 0.6606060606060606
User 85225 AUC after training: 0.6606060606060606
User 85225 does not improve AUC. Reverting changes.
Training on augumented user 53644 32/50 current_auc = 0.6606060606060606
User 53644 AUC after training: 0.6606060606060606
User 53644 does not improve AUC. Reverting changes.
Training on augumented user 14940 33/50 current_auc = 0.6606060606060606
User 14940 AUC after training: 0.6606060606060606
User 14940 does not improve AUC. Reverting changes.
Training on augumented user 126010 34/50 current_auc = 0.6606060606060606
User 126010 AUC after training: 0.6484848484848484
User 126010 does not improve AUC. Reverting changes.
Training on augumented user 57522 35/50 current_auc = 0.6606060606060606
User 57522 AUC after training: 0.6303030303030303
User 57522 does not improve AUC. Reverting changes.
Training on augumented user 118143 36/50 current_auc = 0.6606060606060606
User 118143 AUC after training: 0.6484848484848484
User 118143 does not improve AUC. Reverting changes.
Training on augumented user 45647 37/50 current_auc = 0.6606060606060606
User 45647 AUC after training: 0.6606060606060606
User 45647 does not improve AUC. Reverting changes.
Training on augumented user 113328 38/50 current_auc = 0.6606060606060606
User 113328 AUC after training: 0.6606060606060606
User 113328 does not improve AUC. Reverting changes.
Training on augumented user 95400 39/50 current_auc = 0.6606060606060606
User 95400 AUC after training: 0.6666666666666667
User 95400 improves AUC. Keeping the model.
Training on augumented user 111994 40/50 current_auc = 0.6666666666666667
User 111994 AUC after training: 0.6666666666666667
User 111994 does not improve AUC. Reverting changes.
Training on augumented user 86514 41/50 current_auc = 0.6666666666666667
User 86514 AUC after training: 0.6545454545454545
User 86514 does not improve AUC. Reverting changes.
Training on augumented user 76075 42/50 current_auc = 0.6666666666666667
User 76075 AUC after training: 0.6606060606060606
User 76075 does not improve AUC. Reverting changes.
Training on augumented user 115631 43/50 current_auc = 0.6666666666666667
User 115631 AUC after training: 0.6606060606060606
User 115631 does not improve AUC. Reverting changes.
Training on augumented user 38456 44/50 current_auc = 0.6666666666666667
User 38456 AUC after training: 0.6666666666666667
User 38456 does not improve AUC. Reverting changes.
Training on augumented user 121434 45/50 current_auc = 0.6666666666666667
User 121434 AUC after training: 0.6666666666666667
User 121434 does not improve AUC. Reverting changes.
Training on augumented user 25388 46/50 current_auc = 0.6666666666666667
User 25388 AUC after training: 0.6545454545454545
User 25388 does not improve AUC. Reverting changes.
Training on augumented user 13547 47/50 current_auc = 0.6666666666666667
User 13547 AUC after training: 0.6606060606060606
User 13547 does not improve AUC. Reverting changes.
Training on augumented user 120752 48/50 current_auc = 0.6666666666666667
User 120752 AUC after training: 0.6606060606060606
User 120752 does not improve AUC. Reverting changes.
Training on augumented user 69071 49/50 current_auc = 0.6666666666666667
User 69071 AUC after training: 0.6666666666666667
User 69071 does not improve AUC. Reverting changes.
[2024-12-02 20:12:58.794467] start test user 102421 273/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:12:59.296470] start test user 102421 273/567 recall augumented users by random, augumented_users = [31391, 87402, 74083, 94806, 80640, 96991, 29771, 105696, 68699, 85479, 117648, 89289, 42614, 90187, 29681, 43102, 132991, 119955, 35809, 49983, 7734, 23913, 31562, 91667, 19451, 1764, 126959, 22961, 106854, 58251, 137177, 96639, 99296, 86765, 48994, 121701, 293, 53958, 98999, 51850, 29816, 76811, 38767, 208, 22664, 67604, 83961, 3379, 89287, 63461]
[2024-12-02 20:12:59.318809] user = 102421 Cloud 273/567
[2024-12-02 20:12:59.328504] user = 102421 Local 273/567
[2024-12-02 20:12:59.429592] user = 102421 Local+ 273/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:13:02.530621] user = 102421 MPDA- 273/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 1.0
Training on augumented user 31391 0/50 current_auc = 1.0
User 31391 AUC after training: 1.0
User 31391 does not improve AUC. Reverting changes.
Training on augumented user 87402 1/50 current_auc = 1.0
User 87402 AUC after training: 1.0
User 87402 does not improve AUC. Reverting changes.
Training on augumented user 74083 2/50 current_auc = 1.0
User 74083 AUC after training: 1.0
User 74083 does not improve AUC. Reverting changes.
Training on augumented user 94806 3/50 current_auc = 1.0
User 94806 AUC after training: 1.0
User 94806 does not improve AUC. Reverting changes.
Training on augumented user 80640 4/50 current_auc = 1.0
User 80640 AUC after training: 1.0
User 80640 does not improve AUC. Reverting changes.
Training on augumented user 96991 5/50 current_auc = 1.0
User 96991 AUC after training: 1.0
User 96991 does not improve AUC. Reverting changes.
Training on augumented user 29771 6/50 current_auc = 1.0
User 29771 AUC after training: 1.0
User 29771 does not improve AUC. Reverting changes.
Training on augumented user 105696 7/50 current_auc = 1.0
User 105696 AUC after training: 1.0
User 105696 does not improve AUC. Reverting changes.
Training on augumented user 68699 8/50 current_auc = 1.0
User 68699 AUC after training: 1.0
User 68699 does not improve AUC. Reverting changes.
Training on augumented user 85479 9/50 current_auc = 1.0
User 85479 AUC after training: 1.0
User 85479 does not improve AUC. Reverting changes.
Training on augumented user 117648 10/50 current_auc = 1.0
User 117648 AUC after training: 1.0
User 117648 does not improve AUC. Reverting changes.
Training on augumented user 89289 11/50 current_auc = 1.0
User 89289 AUC after training: 1.0
User 89289 does not improve AUC. Reverting changes.
Training on augumented user 42614 12/50 current_auc = 1.0
User 42614 AUC after training: 1.0
User 42614 does not improve AUC. Reverting changes.
Training on augumented user 90187 13/50 current_auc = 1.0
User 90187 AUC after training: 1.0
User 90187 does not improve AUC. Reverting changes.
Training on augumented user 29681 14/50 current_auc = 1.0
User 29681 AUC after training: 1.0
User 29681 does not improve AUC. Reverting changes.
Training on augumented user 43102 15/50 current_auc = 1.0
User 43102 AUC after training: 1.0
User 43102 does not improve AUC. Reverting changes.
Training on augumented user 132991 16/50 current_auc = 1.0
User 132991 AUC after training: 1.0
User 132991 does not improve AUC. Reverting changes.
Training on augumented user 119955 17/50 current_auc = 1.0
User 119955 AUC after training: 1.0
User 119955 does not improve AUC. Reverting changes.
Training on augumented user 35809 18/50 current_auc = 1.0
User 35809 AUC after training: 1.0
User 35809 does not improve AUC. Reverting changes.
Training on augumented user 49983 19/50 current_auc = 1.0
User 49983 AUC after training: 1.0
User 49983 does not improve AUC. Reverting changes.
Training on augumented user 7734 20/50 current_auc = 1.0
User 7734 AUC after training: 1.0
User 7734 does not improve AUC. Reverting changes.
Training on augumented user 23913 21/50 current_auc = 1.0
User 23913 AUC after training: 1.0
User 23913 does not improve AUC. Reverting changes.
Training on augumented user 31562 22/50 current_auc = 1.0
User 31562 AUC after training: 1.0
User 31562 does not improve AUC. Reverting changes.
Training on augumented user 91667 23/50 current_auc = 1.0
User 91667 AUC after training: 1.0
User 91667 does not improve AUC. Reverting changes.
Training on augumented user 19451 24/50 current_auc = 1.0
User 19451 AUC after training: 1.0
User 19451 does not improve AUC. Reverting changes.
Training on augumented user 1764 25/50 current_auc = 1.0
User 1764 AUC after training: 1.0
User 1764 does not improve AUC. Reverting changes.
Training on augumented user 126959 26/50 current_auc = 1.0
User 126959 AUC after training: 1.0
User 126959 does not improve AUC. Reverting changes.
Training on augumented user 22961 27/50 current_auc = 1.0
User 22961 AUC after training: 1.0
User 22961 does not improve AUC. Reverting changes.
Training on augumented user 106854 28/50 current_auc = 1.0
User 106854 AUC after training: 1.0
User 106854 does not improve AUC. Reverting changes.
Training on augumented user 58251 29/50 current_auc = 1.0
User 58251 AUC after training: 1.0
User 58251 does not improve AUC. Reverting changes.
Training on augumented user 137177 30/50 current_auc = 1.0
User 137177 AUC after training: 1.0
User 137177 does not improve AUC. Reverting changes.
Training on augumented user 96639 31/50 current_auc = 1.0
User 96639 AUC after training: 1.0
User 96639 does not improve AUC. Reverting changes.
Training on augumented user 99296 32/50 current_auc = 1.0
User 99296 AUC after training: 1.0
User 99296 does not improve AUC. Reverting changes.
Training on augumented user 86765 33/50 current_auc = 1.0
User 86765 AUC after training: 1.0
User 86765 does not improve AUC. Reverting changes.
Training on augumented user 48994 34/50 current_auc = 1.0
User 48994 AUC after training: 1.0
User 48994 does not improve AUC. Reverting changes.
Training on augumented user 121701 35/50 current_auc = 1.0
User 121701 AUC after training: 1.0
User 121701 does not improve AUC. Reverting changes.
Training on augumented user 293 36/50 current_auc = 1.0
User 293 AUC after training: 1.0
User 293 does not improve AUC. Reverting changes.
Training on augumented user 53958 37/50 current_auc = 1.0
User 53958 AUC after training: 1.0
User 53958 does not improve AUC. Reverting changes.
Training on augumented user 98999 38/50 current_auc = 1.0
User 98999 AUC after training: 1.0
User 98999 does not improve AUC. Reverting changes.
Training on augumented user 51850 39/50 current_auc = 1.0
User 51850 AUC after training: 1.0
User 51850 does not improve AUC. Reverting changes.
Training on augumented user 29816 40/50 current_auc = 1.0
User 29816 AUC after training: 1.0
User 29816 does not improve AUC. Reverting changes.
Training on augumented user 76811 41/50 current_auc = 1.0
User 76811 AUC after training: 1.0
User 76811 does not improve AUC. Reverting changes.
Training on augumented user 38767 42/50 current_auc = 1.0
User 38767 AUC after training: 1.0
User 38767 does not improve AUC. Reverting changes.
Training on augumented user 208 43/50 current_auc = 1.0
User 208 AUC after training: 1.0
User 208 does not improve AUC. Reverting changes.
Training on augumented user 22664 44/50 current_auc = 1.0
User 22664 AUC after training: 1.0
User 22664 does not improve AUC. Reverting changes.
Training on augumented user 67604 45/50 current_auc = 1.0
User 67604 AUC after training: 1.0
User 67604 does not improve AUC. Reverting changes.
Training on augumented user 83961 46/50 current_auc = 1.0
User 83961 AUC after training: 1.0
User 83961 does not improve AUC. Reverting changes.
Training on augumented user 3379 47/50 current_auc = 1.0
User 3379 AUC after training: 1.0
User 3379 does not improve AUC. Reverting changes.
Training on augumented user 89287 48/50 current_auc = 1.0
User 89287 AUC after training: 1.0
User 89287 does not improve AUC. Reverting changes.
Training on augumented user 63461 49/50 current_auc = 1.0
User 63461 AUC after training: 1.0
User 63461 does not improve AUC. Reverting changes.
[2024-12-02 20:13:35.239675] start test user 102486 274/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:13:35.820876] start test user 102486 274/567 recall augumented users by random, augumented_users = [23593, 75635, 103636, 37460, 105121, 18989, 130088, 42681, 125054, 83062, 109674, 74547, 118026, 18298, 37845, 3956, 115736, 20600, 25251, 80087, 99351, 27619, 1493, 29169, 47498, 85395, 79025, 130020, 110174, 627, 60478, 116755, 23161, 39782, 125438, 15868, 120991, 124248, 120258, 12379, 104169, 39342, 130583, 80322, 22867, 125888, 78988, 77749, 127164, 26323]
[2024-12-02 20:13:35.835991] user = 102486 Cloud 274/567
[2024-12-02 20:13:35.848407] user = 102486 Local 274/567
[2024-12-02 20:13:35.877657] user = 102486 Local+ 274/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:13:37.461649] user = 102486 MPDA- 274/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8431372549019608
Training on augumented user 23593 0/50 current_auc = 0.8431372549019608
User 23593 AUC after training: 0.8431372549019608
User 23593 does not improve AUC. Reverting changes.
Training on augumented user 75635 1/50 current_auc = 0.8431372549019608
User 75635 AUC after training: 0.8455882352941176
User 75635 improves AUC. Keeping the model.
Training on augumented user 103636 2/50 current_auc = 0.8455882352941176
User 103636 AUC after training: 0.8455882352941176
User 103636 does not improve AUC. Reverting changes.
Training on augumented user 37460 3/50 current_auc = 0.8455882352941176
User 37460 AUC after training: 0.8455882352941176
User 37460 does not improve AUC. Reverting changes.
Training on augumented user 105121 4/50 current_auc = 0.8455882352941176
User 105121 AUC after training: 0.8455882352941176
User 105121 does not improve AUC. Reverting changes.
Training on augumented user 18989 5/50 current_auc = 0.8455882352941176
User 18989 AUC after training: 0.8455882352941176
User 18989 does not improve AUC. Reverting changes.
Training on augumented user 130088 6/50 current_auc = 0.8455882352941176
User 130088 AUC after training: 0.8455882352941176
User 130088 does not improve AUC. Reverting changes.
Training on augumented user 42681 7/50 current_auc = 0.8455882352941176
User 42681 AUC after training: 0.8455882352941176
User 42681 does not improve AUC. Reverting changes.
Training on augumented user 125054 8/50 current_auc = 0.8455882352941176
User 125054 AUC after training: 0.8455882352941176
User 125054 does not improve AUC. Reverting changes.
Training on augumented user 83062 9/50 current_auc = 0.8455882352941176
User 83062 AUC after training: 0.8455882352941176
User 83062 does not improve AUC. Reverting changes.
Training on augumented user 109674 10/50 current_auc = 0.8455882352941176
User 109674 AUC after training: 0.8455882352941176
User 109674 does not improve AUC. Reverting changes.
Training on augumented user 74547 11/50 current_auc = 0.8455882352941176
User 74547 AUC after training: 0.8455882352941176
User 74547 does not improve AUC. Reverting changes.
Training on augumented user 118026 12/50 current_auc = 0.8455882352941176
User 118026 AUC after training: 0.8455882352941176
User 118026 does not improve AUC. Reverting changes.
Training on augumented user 18298 13/50 current_auc = 0.8455882352941176
User 18298 AUC after training: 0.8431372549019608
User 18298 does not improve AUC. Reverting changes.
Training on augumented user 37845 14/50 current_auc = 0.8455882352941176
User 37845 AUC after training: 0.8455882352941176
User 37845 does not improve AUC. Reverting changes.
Training on augumented user 3956 15/50 current_auc = 0.8455882352941176
User 3956 AUC after training: 0.8455882352941176
User 3956 does not improve AUC. Reverting changes.
Training on augumented user 115736 16/50 current_auc = 0.8455882352941176
User 115736 AUC after training: 0.8455882352941176
User 115736 does not improve AUC. Reverting changes.
Training on augumented user 20600 17/50 current_auc = 0.8455882352941176
User 20600 AUC after training: 0.8455882352941176
User 20600 does not improve AUC. Reverting changes.
Training on augumented user 25251 18/50 current_auc = 0.8455882352941176
User 25251 AUC after training: 0.8455882352941176
User 25251 does not improve AUC. Reverting changes.
Training on augumented user 80087 19/50 current_auc = 0.8455882352941176
User 80087 AUC after training: 0.8455882352941176
User 80087 does not improve AUC. Reverting changes.
Training on augumented user 99351 20/50 current_auc = 0.8455882352941176
User 99351 AUC after training: 0.8455882352941176
User 99351 does not improve AUC. Reverting changes.
Training on augumented user 27619 21/50 current_auc = 0.8455882352941176
User 27619 AUC after training: 0.8455882352941176
User 27619 does not improve AUC. Reverting changes.
Training on augumented user 1493 22/50 current_auc = 0.8455882352941176
User 1493 AUC after training: 0.8455882352941176
User 1493 does not improve AUC. Reverting changes.
Training on augumented user 29169 23/50 current_auc = 0.8455882352941176
User 29169 AUC after training: 0.8455882352941176
User 29169 does not improve AUC. Reverting changes.
Training on augumented user 47498 24/50 current_auc = 0.8455882352941176
User 47498 AUC after training: 0.8455882352941176
User 47498 does not improve AUC. Reverting changes.
Training on augumented user 85395 25/50 current_auc = 0.8455882352941176
User 85395 AUC after training: 0.8455882352941176
User 85395 does not improve AUC. Reverting changes.
Training on augumented user 79025 26/50 current_auc = 0.8455882352941176
User 79025 AUC after training: 0.8406862745098039
User 79025 does not improve AUC. Reverting changes.
Training on augumented user 130020 27/50 current_auc = 0.8455882352941176
User 130020 AUC after training: 0.8455882352941176
User 130020 does not improve AUC. Reverting changes.
Training on augumented user 110174 28/50 current_auc = 0.8455882352941176
User 110174 AUC after training: 0.8455882352941176
User 110174 does not improve AUC. Reverting changes.
Training on augumented user 627 29/50 current_auc = 0.8455882352941176
User 627 AUC after training: 0.8455882352941176
User 627 does not improve AUC. Reverting changes.
Training on augumented user 60478 30/50 current_auc = 0.8455882352941176
User 60478 AUC after training: 0.8455882352941176
User 60478 does not improve AUC. Reverting changes.
Training on augumented user 116755 31/50 current_auc = 0.8455882352941176
User 116755 AUC after training: 0.8455882352941176
User 116755 does not improve AUC. Reverting changes.
Training on augumented user 23161 32/50 current_auc = 0.8455882352941176
User 23161 AUC after training: 0.8455882352941176
User 23161 does not improve AUC. Reverting changes.
Training on augumented user 39782 33/50 current_auc = 0.8455882352941176
User 39782 AUC after training: 0.8455882352941176
User 39782 does not improve AUC. Reverting changes.
Training on augumented user 125438 34/50 current_auc = 0.8455882352941176
User 125438 AUC after training: 0.8455882352941176
User 125438 does not improve AUC. Reverting changes.
Training on augumented user 15868 35/50 current_auc = 0.8455882352941176
User 15868 AUC after training: 0.8455882352941176
User 15868 does not improve AUC. Reverting changes.
Training on augumented user 120991 36/50 current_auc = 0.8455882352941176
User 120991 AUC after training: 0.8406862745098039
User 120991 does not improve AUC. Reverting changes.
Training on augumented user 124248 37/50 current_auc = 0.8455882352941176
User 124248 AUC after training: 0.8455882352941176
User 124248 does not improve AUC. Reverting changes.
Training on augumented user 120258 38/50 current_auc = 0.8455882352941176
User 120258 AUC after training: 0.8455882352941176
User 120258 does not improve AUC. Reverting changes.
Training on augumented user 12379 39/50 current_auc = 0.8455882352941176
User 12379 AUC after training: 0.8480392156862746
User 12379 improves AUC. Keeping the model.
Training on augumented user 104169 40/50 current_auc = 0.8480392156862746
User 104169 AUC after training: 0.8455882352941176
User 104169 does not improve AUC. Reverting changes.
Training on augumented user 39342 41/50 current_auc = 0.8480392156862746
User 39342 AUC after training: 0.8504901960784313
User 39342 improves AUC. Keeping the model.
Training on augumented user 130583 42/50 current_auc = 0.8504901960784313
User 130583 AUC after training: 0.8504901960784313
User 130583 does not improve AUC. Reverting changes.
Training on augumented user 80322 43/50 current_auc = 0.8504901960784313
User 80322 AUC after training: 0.8455882352941176
User 80322 does not improve AUC. Reverting changes.
Training on augumented user 22867 44/50 current_auc = 0.8504901960784313
User 22867 AUC after training: 0.8455882352941176
User 22867 does not improve AUC. Reverting changes.
Training on augumented user 125888 45/50 current_auc = 0.8504901960784313
User 125888 AUC after training: 0.8504901960784313
User 125888 does not improve AUC. Reverting changes.
Training on augumented user 78988 46/50 current_auc = 0.8504901960784313
User 78988 AUC after training: 0.8504901960784313
User 78988 does not improve AUC. Reverting changes.
Training on augumented user 77749 47/50 current_auc = 0.8504901960784313
User 77749 AUC after training: 0.8455882352941176
User 77749 does not improve AUC. Reverting changes.
Training on augumented user 127164 48/50 current_auc = 0.8504901960784313
User 127164 AUC after training: 0.8480392156862746
User 127164 does not improve AUC. Reverting changes.
Training on augumented user 26323 49/50 current_auc = 0.8504901960784313
User 26323 AUC after training: 0.8504901960784313
User 26323 does not improve AUC. Reverting changes.
[2024-12-02 20:14:08.783738] start test user 102488 275/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:14:09.250747] start test user 102488 275/567 recall augumented users by random, augumented_users = [92120, 46189, 69960, 85998, 120980, 32934, 101413, 92730, 98748, 94711, 129910, 85931, 109092, 122938, 85745, 74388, 12693, 97576, 114940, 65101, 75795, 84845, 8722, 137832, 135211, 120960, 100421, 96442, 26887, 42420, 81452, 66262, 5645, 100689, 135992, 97341, 118436, 132723, 80240, 62705, 89743, 61177, 73396, 72147, 54156, 76445, 59112, 2429, 91313, 27964]
[2024-12-02 20:14:09.265492] user = 102488 Cloud 275/567
[2024-12-02 20:14:09.279326] user = 102488 Local 275/567
[2024-12-02 20:14:09.315439] user = 102488 Local+ 275/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:14:11.379941] user = 102488 MPDA- 275/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5669642857142857
Training on augumented user 92120 0/50 current_auc = 0.5669642857142857
User 92120 AUC after training: 0.5669642857142858
User 92120 improves AUC. Keeping the model.
Training on augumented user 46189 1/50 current_auc = 0.5669642857142858
User 46189 AUC after training: 0.5678571428571428
User 46189 improves AUC. Keeping the model.
Training on augumented user 69960 2/50 current_auc = 0.5678571428571428
User 69960 AUC after training: 0.5669642857142858
User 69960 does not improve AUC. Reverting changes.
Training on augumented user 85998 3/50 current_auc = 0.5678571428571428
User 85998 AUC after training: 0.5696428571428571
User 85998 improves AUC. Keeping the model.
Training on augumented user 120980 4/50 current_auc = 0.5696428571428571
User 120980 AUC after training: 0.5705357142857144
User 120980 improves AUC. Keeping the model.
Training on augumented user 32934 5/50 current_auc = 0.5705357142857144
User 32934 AUC after training: 0.5705357142857144
User 32934 does not improve AUC. Reverting changes.
Training on augumented user 101413 6/50 current_auc = 0.5705357142857144
User 101413 AUC after training: 0.5714285714285715
User 101413 improves AUC. Keeping the model.
Training on augumented user 92730 7/50 current_auc = 0.5714285714285715
User 92730 AUC after training: 0.5705357142857144
User 92730 does not improve AUC. Reverting changes.
Training on augumented user 98748 8/50 current_auc = 0.5714285714285715
User 98748 AUC after training: 0.5714285714285715
User 98748 does not improve AUC. Reverting changes.
Training on augumented user 94711 9/50 current_auc = 0.5714285714285715
User 94711 AUC after training: 0.5723214285714286
User 94711 improves AUC. Keeping the model.
Training on augumented user 129910 10/50 current_auc = 0.5723214285714286
User 129910 AUC after training: 0.5732142857142858
User 129910 improves AUC. Keeping the model.
Training on augumented user 85931 11/50 current_auc = 0.5732142857142858
User 85931 AUC after training: 0.5732142857142858
User 85931 does not improve AUC. Reverting changes.
Training on augumented user 109092 12/50 current_auc = 0.5732142857142858
User 109092 AUC after training: 0.5758928571428572
User 109092 improves AUC. Keeping the model.
Training on augumented user 122938 13/50 current_auc = 0.5758928571428572
User 122938 AUC after training: 0.5767857142857143
User 122938 improves AUC. Keeping the model.
Training on augumented user 85745 14/50 current_auc = 0.5767857142857143
User 85745 AUC after training: 0.5767857142857143
User 85745 does not improve AUC. Reverting changes.
Training on augumented user 74388 15/50 current_auc = 0.5767857142857143
User 74388 AUC after training: 0.5714285714285715
User 74388 does not improve AUC. Reverting changes.
Training on augumented user 12693 16/50 current_auc = 0.5767857142857143
User 12693 AUC after training: 0.5776785714285715
User 12693 improves AUC. Keeping the model.
Training on augumented user 97576 17/50 current_auc = 0.5776785714285715
User 97576 AUC after training: 0.5776785714285715
User 97576 does not improve AUC. Reverting changes.
Training on augumented user 114940 18/50 current_auc = 0.5776785714285715
User 114940 AUC after training: 0.5758928571428572
User 114940 does not improve AUC. Reverting changes.
Training on augumented user 65101 19/50 current_auc = 0.5776785714285715
User 65101 AUC after training: 0.5776785714285715
User 65101 does not improve AUC. Reverting changes.
Training on augumented user 75795 20/50 current_auc = 0.5776785714285715
User 75795 AUC after training: 0.5776785714285715
User 75795 does not improve AUC. Reverting changes.
Training on augumented user 84845 21/50 current_auc = 0.5776785714285715
User 84845 AUC after training: 0.5776785714285715
User 84845 does not improve AUC. Reverting changes.
Training on augumented user 8722 22/50 current_auc = 0.5776785714285715
User 8722 AUC after training: 0.5767857142857143
User 8722 does not improve AUC. Reverting changes.
Training on augumented user 137832 23/50 current_auc = 0.5776785714285715
User 137832 AUC after training: 0.5767857142857142
User 137832 does not improve AUC. Reverting changes.
Training on augumented user 135211 24/50 current_auc = 0.5776785714285715
User 135211 AUC after training: 0.5776785714285715
User 135211 does not improve AUC. Reverting changes.
Training on augumented user 120960 25/50 current_auc = 0.5776785714285715
User 120960 AUC after training: 0.5750000000000001
User 120960 does not improve AUC. Reverting changes.
Training on augumented user 100421 26/50 current_auc = 0.5776785714285715
User 100421 AUC after training: 0.5767857142857143
User 100421 does not improve AUC. Reverting changes.
Training on augumented user 96442 27/50 current_auc = 0.5776785714285715
User 96442 AUC after training: 0.5767857142857143
User 96442 does not improve AUC. Reverting changes.
Training on augumented user 26887 28/50 current_auc = 0.5776785714285715
User 26887 AUC after training: 0.5723214285714286
User 26887 does not improve AUC. Reverting changes.
Training on augumented user 42420 29/50 current_auc = 0.5776785714285715
User 42420 AUC after training: 0.5767857142857143
User 42420 does not improve AUC. Reverting changes.
Training on augumented user 81452 30/50 current_auc = 0.5776785714285715
User 81452 AUC after training: 0.5767857142857143
User 81452 does not improve AUC. Reverting changes.
Training on augumented user 66262 31/50 current_auc = 0.5776785714285715
User 66262 AUC after training: 0.5776785714285715
User 66262 does not improve AUC. Reverting changes.
Training on augumented user 5645 32/50 current_auc = 0.5776785714285715
User 5645 AUC after training: 0.5776785714285715
User 5645 does not improve AUC. Reverting changes.
Training on augumented user 100689 33/50 current_auc = 0.5776785714285715
User 100689 AUC after training: 0.5776785714285715
User 100689 does not improve AUC. Reverting changes.
Training on augumented user 135992 34/50 current_auc = 0.5776785714285715
User 135992 AUC after training: 0.5776785714285715
User 135992 does not improve AUC. Reverting changes.
Training on augumented user 97341 35/50 current_auc = 0.5776785714285715
User 97341 AUC after training: 0.5723214285714286
User 97341 does not improve AUC. Reverting changes.
Training on augumented user 118436 36/50 current_auc = 0.5776785714285715
User 118436 AUC after training: 0.575
User 118436 does not improve AUC. Reverting changes.
Training on augumented user 132723 37/50 current_auc = 0.5776785714285715
User 132723 AUC after training: 0.5776785714285715
User 132723 does not improve AUC. Reverting changes.
Training on augumented user 80240 38/50 current_auc = 0.5776785714285715
User 80240 AUC after training: 0.5767857142857143
User 80240 does not improve AUC. Reverting changes.
Training on augumented user 62705 39/50 current_auc = 0.5776785714285715
User 62705 AUC after training: 0.5758928571428572
User 62705 does not improve AUC. Reverting changes.
Training on augumented user 89743 40/50 current_auc = 0.5776785714285715
User 89743 AUC after training: 0.5767857142857143
User 89743 does not improve AUC. Reverting changes.
Training on augumented user 61177 41/50 current_auc = 0.5776785714285715
User 61177 AUC after training: 0.5776785714285715
User 61177 does not improve AUC. Reverting changes.
Training on augumented user 73396 42/50 current_auc = 0.5776785714285715
User 73396 AUC after training: 0.5776785714285715
User 73396 does not improve AUC. Reverting changes.
Training on augumented user 72147 43/50 current_auc = 0.5776785714285715
User 72147 AUC after training: 0.5776785714285715
User 72147 does not improve AUC. Reverting changes.
Training on augumented user 54156 44/50 current_auc = 0.5776785714285715
User 54156 AUC after training: 0.5758928571428572
User 54156 does not improve AUC. Reverting changes.
Training on augumented user 76445 45/50 current_auc = 0.5776785714285715
User 76445 AUC after training: 0.5776785714285715
User 76445 does not improve AUC. Reverting changes.
Training on augumented user 59112 46/50 current_auc = 0.5776785714285715
User 59112 AUC after training: 0.5776785714285715
User 59112 does not improve AUC. Reverting changes.
Training on augumented user 2429 47/50 current_auc = 0.5776785714285715
User 2429 AUC after training: 0.5767857142857142
User 2429 does not improve AUC. Reverting changes.
Training on augumented user 91313 48/50 current_auc = 0.5776785714285715
User 91313 AUC after training: 0.5732142857142857
User 91313 does not improve AUC. Reverting changes.
Training on augumented user 27964 49/50 current_auc = 0.5776785714285715
User 27964 AUC after training: 0.5776785714285715
User 27964 does not improve AUC. Reverting changes.
[2024-12-02 20:14:43.626541] start test user 102507 276/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:14:44.314234] start test user 102507 276/567 recall augumented users by random, augumented_users = [6457, 14487, 59579, 61944, 43819, 114828, 82573, 86079, 1674, 68368, 133463, 10773, 44220, 14946, 125597, 135056, 105078, 66182, 85666, 131141, 29644, 127936, 128280, 62870, 53555, 12973, 136450, 22402, 123478, 127204, 123514, 29849, 696, 38188, 135182, 8089, 134234, 103722, 9072, 6732, 86924, 70495, 4044, 33127, 67963, 34050, 66382, 61652, 89688, 101824]
[2024-12-02 20:14:44.337782] user = 102507 Cloud 276/567
[2024-12-02 20:14:44.369885] user = 102507 Local 276/567
[2024-12-02 20:14:44.501509] user = 102507 Local+ 276/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:14:47.949040] user = 102507 MPDA- 276/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.803030303030303
Training on augumented user 6457 0/50 current_auc = 0.803030303030303
User 6457 AUC after training: 0.803030303030303
User 6457 does not improve AUC. Reverting changes.
Training on augumented user 14487 1/50 current_auc = 0.803030303030303
User 14487 AUC after training: 0.803030303030303
User 14487 does not improve AUC. Reverting changes.
Training on augumented user 59579 2/50 current_auc = 0.803030303030303
User 59579 AUC after training: 0.803030303030303
User 59579 does not improve AUC. Reverting changes.
Training on augumented user 61944 3/50 current_auc = 0.803030303030303
User 61944 AUC after training: 0.803030303030303
User 61944 does not improve AUC. Reverting changes.
Training on augumented user 43819 4/50 current_auc = 0.803030303030303
User 43819 AUC after training: 0.803030303030303
User 43819 does not improve AUC. Reverting changes.
Training on augumented user 114828 5/50 current_auc = 0.803030303030303
User 114828 AUC after training: 0.803030303030303
User 114828 does not improve AUC. Reverting changes.
Training on augumented user 82573 6/50 current_auc = 0.803030303030303
User 82573 AUC after training: 0.803030303030303
User 82573 does not improve AUC. Reverting changes.
Training on augumented user 86079 7/50 current_auc = 0.803030303030303
User 86079 AUC after training: 0.803030303030303
User 86079 does not improve AUC. Reverting changes.
Training on augumented user 1674 8/50 current_auc = 0.803030303030303
User 1674 AUC after training: 0.803030303030303
User 1674 does not improve AUC. Reverting changes.
Training on augumented user 68368 9/50 current_auc = 0.803030303030303
User 68368 AUC after training: 0.803030303030303
User 68368 does not improve AUC. Reverting changes.
Training on augumented user 133463 10/50 current_auc = 0.803030303030303
User 133463 AUC after training: 0.803030303030303
User 133463 does not improve AUC. Reverting changes.
Training on augumented user 10773 11/50 current_auc = 0.803030303030303
User 10773 AUC after training: 0.803030303030303
User 10773 does not improve AUC. Reverting changes.
Training on augumented user 44220 12/50 current_auc = 0.803030303030303
User 44220 AUC after training: 0.803030303030303
User 44220 does not improve AUC. Reverting changes.
Training on augumented user 14946 13/50 current_auc = 0.803030303030303
User 14946 AUC after training: 0.803030303030303
User 14946 does not improve AUC. Reverting changes.
Training on augumented user 125597 14/50 current_auc = 0.803030303030303
User 125597 AUC after training: 0.803030303030303
User 125597 does not improve AUC. Reverting changes.
Training on augumented user 135056 15/50 current_auc = 0.803030303030303
User 135056 AUC after training: 0.803030303030303
User 135056 does not improve AUC. Reverting changes.
Training on augumented user 105078 16/50 current_auc = 0.803030303030303
User 105078 AUC after training: 0.803030303030303
User 105078 does not improve AUC. Reverting changes.
Training on augumented user 66182 17/50 current_auc = 0.803030303030303
User 66182 AUC after training: 0.803030303030303
User 66182 does not improve AUC. Reverting changes.
Training on augumented user 85666 18/50 current_auc = 0.803030303030303
User 85666 AUC after training: 0.803030303030303
User 85666 does not improve AUC. Reverting changes.
Training on augumented user 131141 19/50 current_auc = 0.803030303030303
User 131141 AUC after training: 0.803030303030303
User 131141 does not improve AUC. Reverting changes.
Training on augumented user 29644 20/50 current_auc = 0.803030303030303
User 29644 AUC after training: 0.803030303030303
User 29644 does not improve AUC. Reverting changes.
Training on augumented user 127936 21/50 current_auc = 0.803030303030303
User 127936 AUC after training: 0.803030303030303
User 127936 does not improve AUC. Reverting changes.
Training on augumented user 128280 22/50 current_auc = 0.803030303030303
User 128280 AUC after training: 0.803030303030303
User 128280 does not improve AUC. Reverting changes.
Training on augumented user 62870 23/50 current_auc = 0.803030303030303
User 62870 AUC after training: 0.803030303030303
User 62870 does not improve AUC. Reverting changes.
Training on augumented user 53555 24/50 current_auc = 0.803030303030303
User 53555 AUC after training: 0.803030303030303
User 53555 does not improve AUC. Reverting changes.
Training on augumented user 12973 25/50 current_auc = 0.803030303030303
User 12973 AUC after training: 0.803030303030303
User 12973 does not improve AUC. Reverting changes.
Training on augumented user 136450 26/50 current_auc = 0.803030303030303
User 136450 AUC after training: 0.803030303030303
User 136450 does not improve AUC. Reverting changes.
Training on augumented user 22402 27/50 current_auc = 0.803030303030303
User 22402 AUC after training: 0.803030303030303
User 22402 does not improve AUC. Reverting changes.
Training on augumented user 123478 28/50 current_auc = 0.803030303030303
User 123478 AUC after training: 0.803030303030303
User 123478 does not improve AUC. Reverting changes.
Training on augumented user 127204 29/50 current_auc = 0.803030303030303
User 127204 AUC after training: 0.803030303030303
User 127204 does not improve AUC. Reverting changes.
Training on augumented user 123514 30/50 current_auc = 0.803030303030303
User 123514 AUC after training: 0.8181818181818181
User 123514 improves AUC. Keeping the model.
Training on augumented user 29849 31/50 current_auc = 0.8181818181818181
User 29849 AUC after training: 0.8181818181818181
User 29849 does not improve AUC. Reverting changes.
Training on augumented user 696 32/50 current_auc = 0.8181818181818181
User 696 AUC after training: 0.8181818181818181
User 696 does not improve AUC. Reverting changes.
Training on augumented user 38188 33/50 current_auc = 0.8181818181818181
User 38188 AUC after training: 0.8181818181818181
User 38188 does not improve AUC. Reverting changes.
Training on augumented user 135182 34/50 current_auc = 0.8181818181818181
User 135182 AUC after training: 0.8181818181818181
User 135182 does not improve AUC. Reverting changes.
Training on augumented user 8089 35/50 current_auc = 0.8181818181818181
User 8089 AUC after training: 0.803030303030303
User 8089 does not improve AUC. Reverting changes.
Training on augumented user 134234 36/50 current_auc = 0.8181818181818181
User 134234 AUC after training: 0.8181818181818181
User 134234 does not improve AUC. Reverting changes.
Training on augumented user 103722 37/50 current_auc = 0.8181818181818181
User 103722 AUC after training: 0.8181818181818181
User 103722 does not improve AUC. Reverting changes.
Training on augumented user 9072 38/50 current_auc = 0.8181818181818181
User 9072 AUC after training: 0.8181818181818181
User 9072 does not improve AUC. Reverting changes.
Training on augumented user 6732 39/50 current_auc = 0.8181818181818181
User 6732 AUC after training: 0.8181818181818181
User 6732 does not improve AUC. Reverting changes.
Training on augumented user 86924 40/50 current_auc = 0.8181818181818181
User 86924 AUC after training: 0.8181818181818181
User 86924 does not improve AUC. Reverting changes.
Training on augumented user 70495 41/50 current_auc = 0.8181818181818181
User 70495 AUC after training: 0.8181818181818181
User 70495 does not improve AUC. Reverting changes.
Training on augumented user 4044 42/50 current_auc = 0.8181818181818181
User 4044 AUC after training: 0.803030303030303
User 4044 does not improve AUC. Reverting changes.
Training on augumented user 33127 43/50 current_auc = 0.8181818181818181
User 33127 AUC after training: 0.8181818181818181
User 33127 does not improve AUC. Reverting changes.
Training on augumented user 67963 44/50 current_auc = 0.8181818181818181
User 67963 AUC after training: 0.8181818181818181
User 67963 does not improve AUC. Reverting changes.
Training on augumented user 34050 45/50 current_auc = 0.8181818181818181
User 34050 AUC after training: 0.8181818181818181
User 34050 does not improve AUC. Reverting changes.
Training on augumented user 66382 46/50 current_auc = 0.8181818181818181
User 66382 AUC after training: 0.8181818181818181
User 66382 does not improve AUC. Reverting changes.
Training on augumented user 61652 47/50 current_auc = 0.8181818181818181
User 61652 AUC after training: 0.8181818181818181
User 61652 does not improve AUC. Reverting changes.
Training on augumented user 89688 48/50 current_auc = 0.8181818181818181
User 89688 AUC after training: 0.8181818181818181
User 89688 does not improve AUC. Reverting changes.
Training on augumented user 101824 49/50 current_auc = 0.8181818181818181
User 101824 AUC after training: 0.8181818181818181
User 101824 does not improve AUC. Reverting changes.
[2024-12-02 20:15:18.979240] start test user 102532 277/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:15:19.620778] start test user 102532 277/567 recall augumented users by random, augumented_users = [30121, 129973, 94242, 94460, 81266, 94801, 15002, 54634, 100565, 39447, 84215, 49816, 118683, 121867, 58751, 94092, 4667, 55829, 48698, 60226, 73888, 134719, 128801, 88909, 36182, 66238, 82102, 17034, 79888, 2577, 27288, 118827, 131370, 88772, 132067, 73220, 87548, 18373, 134031, 97527, 117364, 106636, 110458, 66891, 90130, 61872, 30337, 93925, 44266, 71251]
[2024-12-02 20:15:19.639343] user = 102532 Cloud 277/567
[2024-12-02 20:15:19.699552] user = 102532 Local 277/567
[2024-12-02 20:15:19.837111] user = 102532 Local+ 277/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:15:23.117726] user = 102532 MPDA- 277/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7145680134401938
Training on augumented user 30121 0/50 current_auc = 0.7145680134401938
User 30121 AUC after training: 0.7145817841306563
User 30121 improves AUC. Keeping the model.
Training on augumented user 129973 1/50 current_auc = 0.7145817841306563
User 129973 AUC after training: 0.7149742488088352
User 129973 improves AUC. Keeping the model.
Training on augumented user 94242 2/50 current_auc = 0.7149742488088352
User 94242 AUC after training: 0.7145542427497316
User 94242 does not improve AUC. Reverting changes.
Training on augumented user 94460 3/50 current_auc = 0.7149742488088352
User 94460 AUC after training: 0.7145817841306563
User 94460 does not improve AUC. Reverting changes.
Training on augumented user 81266 4/50 current_auc = 0.7149742488088352
User 81266 AUC after training: 0.7140309565121595
User 81266 does not improve AUC. Reverting changes.
Training on augumented user 94801 5/50 current_auc = 0.7149742488088352
User 94801 AUC after training: 0.7152221212371589
User 94801 improves AUC. Keeping the model.
Training on augumented user 15002 6/50 current_auc = 0.7152221212371589
User 15002 AUC after training: 0.7136109504530557
User 15002 does not improve AUC. Reverting changes.
Training on augumented user 54634 7/50 current_auc = 0.7152221212371589
User 54634 AUC after training: 0.7151670384753093
User 54634 does not improve AUC. Reverting changes.
Training on augumented user 100565 8/50 current_auc = 0.7152221212371589
User 100565 AUC after training: 0.7148365419042111
User 100565 does not improve AUC. Reverting changes.
Training on augumented user 39447 9/50 current_auc = 0.7152221212371589
User 39447 AUC after training: 0.7153391721060894
User 39447 improves AUC. Keeping the model.
Training on augumented user 84215 10/50 current_auc = 0.7153391721060894
User 84215 AUC after training: 0.7155663884987193
User 84215 improves AUC. Keeping the model.
Training on augumented user 49816 11/50 current_auc = 0.7155663884987193
User 49816 AUC after training: 0.7149467074279106
User 49816 does not improve AUC. Reverting changes.
Training on augumented user 118683 12/50 current_auc = 0.7155663884987193
User 118683 AUC after training: 0.7155319617725633
User 118683 does not improve AUC. Reverting changes.
Training on augumented user 121867 13/50 current_auc = 0.7155663884987193
User 121867 AUC after training: 0.7162618083670715
User 121867 improves AUC. Keeping the model.
Training on augumented user 58751 14/50 current_auc = 0.7162618083670715
User 58751 AUC after training: 0.7153322867608582
User 58751 does not improve AUC. Reverting changes.
Training on augumented user 94092 15/50 current_auc = 0.7162618083670715
User 94092 AUC after training: 0.7163513178550772
User 94092 improves AUC. Keeping the model.
Training on augumented user 4667 16/50 current_auc = 0.7163513178550772
User 4667 AUC after training: 0.7162824644027652
User 4667 does not improve AUC. Reverting changes.
Training on augumented user 55829 17/50 current_auc = 0.7163513178550772
User 55829 AUC after training: 0.7166818144261753
User 55829 improves AUC. Keeping the model.
Training on augumented user 48698 18/50 current_auc = 0.7166818144261753
User 48698 AUC after training: 0.7170536230686607
User 48698 improves AUC. Keeping the model.
Training on augumented user 60226 19/50 current_auc = 0.7170536230686607
User 60226 AUC after training: 0.71739100498499
User 60226 improves AUC. Keeping the model.
Training on augumented user 73888 20/50 current_auc = 0.71739100498499
User 73888 AUC after training: 0.7162136109504531
User 73888 does not improve AUC. Reverting changes.
Training on augumented user 134719 21/50 current_auc = 0.71739100498499
User 134719 AUC after training: 0.7170880497948167
User 134719 does not improve AUC. Reverting changes.
Training on augumented user 128801 22/50 current_auc = 0.71739100498499
User 128801 AUC after training: 0.7163513178550772
User 128801 does not improve AUC. Reverting changes.
Training on augumented user 88909 23/50 current_auc = 0.71739100498499
User 88909 AUC after training: 0.7165785342477071
User 88909 does not improve AUC. Reverting changes.
Training on augumented user 36182 24/50 current_auc = 0.71739100498499
User 36182 AUC after training: 0.7171775592828223
User 36182 does not improve AUC. Reverting changes.
Training on augumented user 66238 25/50 current_auc = 0.71739100498499
User 66238 AUC after training: 0.7169709989258861
User 66238 does not improve AUC. Reverting changes.
Training on augumented user 82102 26/50 current_auc = 0.71739100498499
User 82102 AUC after training: 0.7174873998182268
User 82102 improves AUC. Keeping the model.
Training on augumented user 17034 27/50 current_auc = 0.7174873998182268
User 17034 AUC after training: 0.7174047756754525
User 17034 does not improve AUC. Reverting changes.
Training on augumented user 79888 28/50 current_auc = 0.7174873998182268
User 79888 AUC after training: 0.7170260816877359
User 79888 does not improve AUC. Reverting changes.
Training on augumented user 2577 29/50 current_auc = 0.7174873998182268
User 2577 AUC after training: 0.7168677187474178
User 2577 does not improve AUC. Reverting changes.
Training on augumented user 27288 30/50 current_auc = 0.7174873998182268
User 27288 AUC after training: 0.7164890247597013
User 27288 does not improve AUC. Reverting changes.
Training on augumented user 118827 31/50 current_auc = 0.7174873998182268
User 118827 AUC after training: 0.7160139359387478
User 118827 does not improve AUC. Reverting changes.
Training on augumented user 131370 32/50 current_auc = 0.7174873998182268
User 131370 AUC after training: 0.7164270566526205
User 131370 does not improve AUC. Reverting changes.
Training on augumented user 88772 33/50 current_auc = 0.7174873998182268
User 88772 AUC after training: 0.7162273816409153
User 88772 does not improve AUC. Reverting changes.
Training on augumented user 132067 34/50 current_auc = 0.7174873998182268
User 132067 AUC after training: 0.7163513178550773
User 132067 does not improve AUC. Reverting changes.
Training on augumented user 73220 35/50 current_auc = 0.7174873998182268
User 73220 AUC after training: 0.716998540306811
User 73220 does not improve AUC. Reverting changes.
Training on augumented user 87548 36/50 current_auc = 0.7174873998182268
User 87548 AUC after training: 0.7174047756754522
User 87548 does not improve AUC. Reverting changes.
Training on augumented user 18373 37/50 current_auc = 0.7174873998182268
User 18373 AUC after training: 0.7174323170563772
User 18373 does not improve AUC. Reverting changes.
Training on augumented user 134031 38/50 current_auc = 0.7174873998182268
User 134031 AUC after training: 0.7168126359855684
User 134031 does not improve AUC. Reverting changes.
Training on augumented user 97527 39/50 current_auc = 0.7174873998182268
User 97527 AUC after training: 0.7175149411991517
User 97527 improves AUC. Keeping the model.
Training on augumented user 117364 40/50 current_auc = 0.7175149411991517
User 117364 AUC after training: 0.716736897188025
User 117364 does not improve AUC. Reverting changes.
Training on augumented user 106636 41/50 current_auc = 0.7175149411991517
User 106636 AUC after training: 0.7167782092594122
User 106636 does not improve AUC. Reverting changes.
Training on augumented user 110458 42/50 current_auc = 0.7175149411991517
User 110458 AUC after training: 0.7172601834255969
User 110458 does not improve AUC. Reverting changes.
Training on augumented user 66891 43/50 current_auc = 0.7175149411991517
User 66891 AUC after training: 0.717418546365915
User 66891 does not improve AUC. Reverting changes.
Training on augumented user 90130 44/50 current_auc = 0.7175149411991517
User 90130 AUC after training: 0.7167506678784874
User 90130 does not improve AUC. Reverting changes.
Training on augumented user 61872 45/50 current_auc = 0.7175149411991517
User 61872 AUC after training: 0.7170811644495856
User 61872 does not improve AUC. Reverting changes.
Training on augumented user 30337 46/50 current_auc = 0.7175149411991517
User 30337 AUC after training: 0.7172188713542097
User 30337 does not improve AUC. Reverting changes.
Training on augumented user 93925 47/50 current_auc = 0.7175149411991517
User 93925 AUC after training: 0.7166955851166377
User 93925 does not improve AUC. Reverting changes.
Training on augumented user 44266 48/50 current_auc = 0.7175149411991517
User 44266 AUC after training: 0.7171362472114351
User 44266 does not improve AUC. Reverting changes.
Training on augumented user 71251 49/50 current_auc = 0.7175149411991517
User 71251 AUC after training: 0.7171224765209726
User 71251 does not improve AUC. Reverting changes.
[2024-12-02 20:16:00.080216] start test user 102536 278/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:16:00.555285] start test user 102536 278/567 recall augumented users by random, augumented_users = [122349, 123927, 46636, 117975, 59722, 35848, 24108, 124668, 108266, 117236, 136470, 30152, 96199, 1876, 131038, 31112, 104429, 80835, 48482, 24500, 127110, 61608, 132007, 21816, 114147, 106460, 43550, 133339, 134529, 78486, 128553, 70663, 121636, 24510, 57491, 94917, 113511, 80743, 80547, 6726, 103499, 2413, 77930, 115095, 84599, 18295, 17438, 93942, 13455, 49317]
[2024-12-02 20:16:00.570042] user = 102536 Cloud 278/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:16:00.576718] user = 102536 Local 278/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:16:00.642569] user = 102536 Local+ 278/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:16:03.136574] user = 102536 MPDA- 278/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 122349 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122349 AUC after training: 0.5
User 122349 does not improve AUC. Reverting changes.
Training on augumented user 123927 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123927 AUC after training: 0.5
User 123927 does not improve AUC. Reverting changes.
Training on augumented user 46636 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 46636 AUC after training: 0.5
User 46636 does not improve AUC. Reverting changes.
Training on augumented user 117975 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117975 AUC after training: 0.5
User 117975 does not improve AUC. Reverting changes.
Training on augumented user 59722 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 59722 AUC after training: 0.5
User 59722 does not improve AUC. Reverting changes.
Training on augumented user 35848 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 35848 AUC after training: 0.5
User 35848 does not improve AUC. Reverting changes.
Training on augumented user 24108 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24108 AUC after training: 0.5
User 24108 does not improve AUC. Reverting changes.
Training on augumented user 124668 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124668 AUC after training: 0.5
User 124668 does not improve AUC. Reverting changes.
Training on augumented user 108266 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 108266 AUC after training: 0.5
User 108266 does not improve AUC. Reverting changes.
Training on augumented user 117236 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 117236 AUC after training: 0.5
User 117236 does not improve AUC. Reverting changes.
Training on augumented user 136470 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136470 AUC after training: 0.5
User 136470 does not improve AUC. Reverting changes.
Training on augumented user 30152 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 30152 AUC after training: 0.5
User 30152 does not improve AUC. Reverting changes.
Training on augumented user 96199 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 96199 AUC after training: 0.5
User 96199 does not improve AUC. Reverting changes.
Training on augumented user 1876 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 1876 AUC after training: 0.5
User 1876 does not improve AUC. Reverting changes.
Training on augumented user 131038 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 131038 AUC after training: 0.5
User 131038 does not improve AUC. Reverting changes.
Training on augumented user 31112 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 31112 AUC after training: 0.5
User 31112 does not improve AUC. Reverting changes.
Training on augumented user 104429 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104429 AUC after training: 0.5
User 104429 does not improve AUC. Reverting changes.
Training on augumented user 80835 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80835 AUC after training: 0.5
User 80835 does not improve AUC. Reverting changes.
Training on augumented user 48482 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 48482 AUC after training: 0.5
User 48482 does not improve AUC. Reverting changes.
Training on augumented user 24500 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24500 AUC after training: 0.5
User 24500 does not improve AUC. Reverting changes.
Training on augumented user 127110 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 127110 AUC after training: 0.5
User 127110 does not improve AUC. Reverting changes.
Training on augumented user 61608 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 61608 AUC after training: 0.5
User 61608 does not improve AUC. Reverting changes.
Training on augumented user 132007 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 132007 AUC after training: 0.5
User 132007 does not improve AUC. Reverting changes.
Training on augumented user 21816 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 21816 AUC after training: 0.5
User 21816 does not improve AUC. Reverting changes.
Training on augumented user 114147 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114147 AUC after training: 0.5
User 114147 does not improve AUC. Reverting changes.
Training on augumented user 106460 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106460 AUC after training: 0.5
User 106460 does not improve AUC. Reverting changes.
Training on augumented user 43550 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43550 AUC after training: 0.5
User 43550 does not improve AUC. Reverting changes.
Training on augumented user 133339 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 133339 AUC after training: 0.5
User 133339 does not improve AUC. Reverting changes.
Training on augumented user 134529 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 134529 AUC after training: 0.5
User 134529 does not improve AUC. Reverting changes.
Training on augumented user 78486 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 78486 AUC after training: 0.5
User 78486 does not improve AUC. Reverting changes.
Training on augumented user 128553 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 128553 AUC after training: 0.5
User 128553 does not improve AUC. Reverting changes.
Training on augumented user 70663 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70663 AUC after training: 0.5
User 70663 does not improve AUC. Reverting changes.
Training on augumented user 121636 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 121636 AUC after training: 0.5
User 121636 does not improve AUC. Reverting changes.
Training on augumented user 24510 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 24510 AUC after training: 0.5
User 24510 does not improve AUC. Reverting changes.
Training on augumented user 57491 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 57491 AUC after training: 0.5
User 57491 does not improve AUC. Reverting changes.
Training on augumented user 94917 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 94917 AUC after training: 0.5
User 94917 does not improve AUC. Reverting changes.
Training on augumented user 113511 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 113511 AUC after training: 0.5
User 113511 does not improve AUC. Reverting changes.
Training on augumented user 80743 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80743 AUC after training: 0.5
User 80743 does not improve AUC. Reverting changes.
Training on augumented user 80547 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 80547 AUC after training: 0.5
User 80547 does not improve AUC. Reverting changes.
Training on augumented user 6726 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6726 AUC after training: 0.5
User 6726 does not improve AUC. Reverting changes.
Training on augumented user 103499 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 103499 AUC after training: 0.5
User 103499 does not improve AUC. Reverting changes.
Training on augumented user 2413 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 2413 AUC after training: 0.5
User 2413 does not improve AUC. Reverting changes.
Training on augumented user 77930 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77930 AUC after training: 0.5
User 77930 does not improve AUC. Reverting changes.
Training on augumented user 115095 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 115095 AUC after training: 0.5
User 115095 does not improve AUC. Reverting changes.
Training on augumented user 84599 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 84599 AUC after training: 0.5
User 84599 does not improve AUC. Reverting changes.
Training on augumented user 18295 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 18295 AUC after training: 0.5
User 18295 does not improve AUC. Reverting changes.
Training on augumented user 17438 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 17438 AUC after training: 0.5
User 17438 does not improve AUC. Reverting changes.
Training on augumented user 93942 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 93942 AUC after training: 0.5
User 93942 does not improve AUC. Reverting changes.
Training on augumented user 13455 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13455 AUC after training: 0.5
User 13455 does not improve AUC. Reverting changes.
Training on augumented user 49317 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 49317 AUC after training: 0.5
User 49317 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:16:34.075486] start test user 102552 279/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:16:34.599895] start test user 102552 279/567 recall augumented users by random, augumented_users = [129756, 98015, 113376, 112062, 109900, 19319, 85665, 132573, 41478, 132624, 45569, 130461, 91587, 136169, 94069, 19678, 100065, 136826, 74065, 135906, 115586, 60152, 113037, 84722, 9964, 110006, 10607, 88010, 113626, 11513, 97766, 133020, 124789, 56879, 7189, 33408, 32993, 56739, 7536, 127861, 82064, 71699, 133251, 83807, 120357, 79090, 3808, 48928, 54269, 834]
[2024-12-02 20:16:34.616821] user = 102552 Cloud 279/567
[2024-12-02 20:16:34.645141] user = 102552 Local 279/567
[2024-12-02 20:16:34.676986] user = 102552 Local+ 279/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:16:37.313614] user = 102552 MPDA- 279/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7126865671641791
Training on augumented user 129756 0/50 current_auc = 0.7126865671641791
User 129756 AUC after training: 0.7169509594882728
User 129756 improves AUC. Keeping the model.
Training on augumented user 98015 1/50 current_auc = 0.7169509594882728
User 98015 AUC after training: 0.7153518123667377
User 98015 does not improve AUC. Reverting changes.
Training on augumented user 113376 2/50 current_auc = 0.7169509594882728
User 113376 AUC after training: 0.7176172707889126
User 113376 improves AUC. Keeping the model.
Training on augumented user 112062 3/50 current_auc = 0.7176172707889126
User 112062 AUC after training: 0.7173507462686567
User 112062 does not improve AUC. Reverting changes.
Training on augumented user 109900 4/50 current_auc = 0.7176172707889126
User 109900 AUC after training: 0.7158848614072495
User 109900 does not improve AUC. Reverting changes.
Training on augumented user 19319 5/50 current_auc = 0.7176172707889126
User 19319 AUC after training: 0.7178837953091685
User 19319 improves AUC. Keeping the model.
Training on augumented user 85665 6/50 current_auc = 0.7178837953091685
User 85665 AUC after training: 0.7176172707889126
User 85665 does not improve AUC. Reverting changes.
Training on augumented user 132573 7/50 current_auc = 0.7178837953091685
User 132573 AUC after training: 0.7153518123667376
User 132573 does not improve AUC. Reverting changes.
Training on augumented user 41478 8/50 current_auc = 0.7178837953091685
User 41478 AUC after training: 0.7178837953091683
User 41478 does not improve AUC. Reverting changes.
Training on augumented user 132624 9/50 current_auc = 0.7178837953091685
User 132624 AUC after training: 0.7133528784648188
User 132624 does not improve AUC. Reverting changes.
Training on augumented user 45569 10/50 current_auc = 0.7178837953091685
User 45569 AUC after training: 0.7153518123667377
User 45569 does not improve AUC. Reverting changes.
Training on augumented user 130461 11/50 current_auc = 0.7178837953091685
User 130461 AUC after training: 0.7152185501066098
User 130461 does not improve AUC. Reverting changes.
Training on augumented user 91587 12/50 current_auc = 0.7178837953091685
User 91587 AUC after training: 0.7150852878464818
User 91587 does not improve AUC. Reverting changes.
Training on augumented user 136169 13/50 current_auc = 0.7178837953091685
User 136169 AUC after training: 0.7176172707889126
User 136169 does not improve AUC. Reverting changes.
Training on augumented user 94069 14/50 current_auc = 0.7178837953091685
User 94069 AUC after training: 0.7178837953091683
User 94069 does not improve AUC. Reverting changes.
Training on augumented user 19678 15/50 current_auc = 0.7178837953091685
User 19678 AUC after training: 0.7170842217484008
User 19678 does not improve AUC. Reverting changes.
Training on augumented user 100065 16/50 current_auc = 0.7178837953091685
User 100065 AUC after training: 0.7181503198294243
User 100065 improves AUC. Keeping the model.
Training on augumented user 136826 17/50 current_auc = 0.7181503198294243
User 136826 AUC after training: 0.7150852878464818
User 136826 does not improve AUC. Reverting changes.
Training on augumented user 74065 18/50 current_auc = 0.7181503198294243
User 74065 AUC after training: 0.7168176972281449
User 74065 does not improve AUC. Reverting changes.
Training on augumented user 135906 19/50 current_auc = 0.7181503198294243
User 135906 AUC after training: 0.7156183368869936
User 135906 does not improve AUC. Reverting changes.
Training on augumented user 115586 20/50 current_auc = 0.7181503198294243
User 115586 AUC after training: 0.7156183368869935
User 115586 does not improve AUC. Reverting changes.
Training on augumented user 60152 21/50 current_auc = 0.7181503198294243
User 60152 AUC after training: 0.7173507462686567
User 60152 does not improve AUC. Reverting changes.
Training on augumented user 113037 22/50 current_auc = 0.7181503198294243
User 113037 AUC after training: 0.7168176972281449
User 113037 does not improve AUC. Reverting changes.
Training on augumented user 84722 23/50 current_auc = 0.7181503198294243
User 84722 AUC after training: 0.7165511727078892
User 84722 does not improve AUC. Reverting changes.
Training on augumented user 9964 24/50 current_auc = 0.7181503198294243
User 9964 AUC after training: 0.7173507462686567
User 9964 does not improve AUC. Reverting changes.
Training on augumented user 110006 25/50 current_auc = 0.7181503198294243
User 110006 AUC after training: 0.7181503198294242
User 110006 does not improve AUC. Reverting changes.
Training on augumented user 10607 26/50 current_auc = 0.7181503198294243
User 10607 AUC after training: 0.716551172707889
User 10607 does not improve AUC. Reverting changes.
Training on augumented user 88010 27/50 current_auc = 0.7181503198294243
User 88010 AUC after training: 0.7166844349680169
User 88010 does not improve AUC. Reverting changes.
Training on augumented user 113626 28/50 current_auc = 0.7181503198294243
User 113626 AUC after training: 0.7176172707889126
User 113626 does not improve AUC. Reverting changes.
Training on augumented user 11513 29/50 current_auc = 0.7181503198294243
User 11513 AUC after training: 0.7113539445628998
User 11513 does not improve AUC. Reverting changes.
Training on augumented user 97766 30/50 current_auc = 0.7181503198294243
User 97766 AUC after training: 0.7170842217484008
User 97766 does not improve AUC. Reverting changes.
Training on augumented user 133020 31/50 current_auc = 0.7181503198294243
User 133020 AUC after training: 0.7158848614072494
User 133020 does not improve AUC. Reverting changes.
Training on augumented user 124789 32/50 current_auc = 0.7181503198294243
User 124789 AUC after training: 0.7173507462686568
User 124789 does not improve AUC. Reverting changes.
Training on augumented user 56879 33/50 current_auc = 0.7181503198294243
User 56879 AUC after training: 0.7124200426439232
User 56879 does not improve AUC. Reverting changes.
Training on augumented user 7189 34/50 current_auc = 0.7181503198294243
User 7189 AUC after training: 0.7158848614072495
User 7189 does not improve AUC. Reverting changes.
Training on augumented user 33408 35/50 current_auc = 0.7181503198294243
User 33408 AUC after training: 0.7158848614072494
User 33408 does not improve AUC. Reverting changes.
Training on augumented user 32993 36/50 current_auc = 0.7181503198294243
User 32993 AUC after training: 0.7176172707889126
User 32993 does not improve AUC. Reverting changes.
Training on augumented user 56739 37/50 current_auc = 0.7181503198294243
User 56739 AUC after training: 0.7161513859275053
User 56739 does not improve AUC. Reverting changes.
Training on augumented user 7536 38/50 current_auc = 0.7181503198294243
User 7536 AUC after training: 0.7173507462686567
User 7536 does not improve AUC. Reverting changes.
Training on augumented user 127861 39/50 current_auc = 0.7181503198294243
User 127861 AUC after training: 0.7162846481876332
User 127861 does not improve AUC. Reverting changes.
Training on augumented user 82064 40/50 current_auc = 0.7181503198294243
User 82064 AUC after training: 0.7176172707889126
User 82064 does not improve AUC. Reverting changes.
Training on augumented user 71699 41/50 current_auc = 0.7181503198294243
User 71699 AUC after training: 0.7177505330490406
User 71699 does not improve AUC. Reverting changes.
Training on augumented user 133251 42/50 current_auc = 0.7181503198294243
User 133251 AUC after training: 0.7176172707889126
User 133251 does not improve AUC. Reverting changes.
Training on augumented user 83807 43/50 current_auc = 0.7181503198294243
User 83807 AUC after training: 0.715085287846482
User 83807 does not improve AUC. Reverting changes.
Training on augumented user 120357 44/50 current_auc = 0.7181503198294243
User 120357 AUC after training: 0.7168176972281449
User 120357 does not improve AUC. Reverting changes.
Training on augumented user 79090 45/50 current_auc = 0.7181503198294243
User 79090 AUC after training: 0.7176172707889126
User 79090 does not improve AUC. Reverting changes.
Training on augumented user 3808 46/50 current_auc = 0.7181503198294243
User 3808 AUC after training: 0.7184168443496801
User 3808 improves AUC. Keeping the model.
Training on augumented user 48928 47/50 current_auc = 0.7184168443496801
User 48928 AUC after training: 0.7178837953091685
User 48928 does not improve AUC. Reverting changes.
Training on augumented user 54269 48/50 current_auc = 0.7184168443496801
User 54269 AUC after training: 0.7158848614072495
User 54269 does not improve AUC. Reverting changes.
Training on augumented user 834 49/50 current_auc = 0.7184168443496801
User 834 AUC after training: 0.7152185501066098
User 834 does not improve AUC. Reverting changes.
[2024-12-02 20:17:10.657570] start test user 102563 280/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:17:11.054479] start test user 102563 280/567 recall augumented users by random, augumented_users = [15229, 61171, 122616, 65431, 41920, 449, 47690, 108729, 101777, 135326, 64895, 84469, 26381, 99010, 83496, 102635, 46007, 101907, 14062, 37965, 20131, 130830, 41916, 54195, 88350, 54791, 27770, 71534, 4839, 104378, 120866, 15522, 118241, 110509, 83835, 31619, 100607, 8658, 109761, 112302, 67636, 121365, 41369, 32793, 73236, 61144, 78681, 42906, 59896, 87202]
[2024-12-02 20:17:11.068938] user = 102563 Cloud 280/567
[2024-12-02 20:17:11.083002] user = 102563 Local 280/567
[2024-12-02 20:17:11.108323] user = 102563 Local+ 280/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:17:13.246777] user = 102563 MPDA- 280/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.49805636540330417
Training on augumented user 15229 0/50 current_auc = 0.49805636540330417
User 15229 AUC after training: 0.4961127308066083
User 15229 does not improve AUC. Reverting changes.
Training on augumented user 61171 1/50 current_auc = 0.49805636540330417
User 61171 AUC after training: 0.49562682215743437
User 61171 does not improve AUC. Reverting changes.
Training on augumented user 122616 2/50 current_auc = 0.49805636540330417
User 122616 AUC after training: 0.4985422740524781
User 122616 improves AUC. Keeping the model.
Training on augumented user 65431 3/50 current_auc = 0.4985422740524781
User 65431 AUC after training: 0.4970845481049562
User 65431 does not improve AUC. Reverting changes.
Training on augumented user 41920 4/50 current_auc = 0.4985422740524781
User 41920 AUC after training: 0.49708454810495617
User 41920 does not improve AUC. Reverting changes.
Training on augumented user 449 5/50 current_auc = 0.4985422740524781
User 449 AUC after training: 0.49708454810495617
User 449 does not improve AUC. Reverting changes.
Training on augumented user 47690 6/50 current_auc = 0.4985422740524781
User 47690 AUC after training: 0.4970845481049562
User 47690 does not improve AUC. Reverting changes.
Training on augumented user 108729 7/50 current_auc = 0.4985422740524781
User 108729 AUC after training: 0.49416909620991245
User 108729 does not improve AUC. Reverting changes.
Training on augumented user 101777 8/50 current_auc = 0.4985422740524781
User 101777 AUC after training: 0.49951409135082603
User 101777 improves AUC. Keeping the model.
Training on augumented user 135326 9/50 current_auc = 0.49951409135082603
User 135326 AUC after training: 0.49902818270165206
User 135326 does not improve AUC. Reverting changes.
Training on augumented user 64895 10/50 current_auc = 0.49951409135082603
User 64895 AUC after training: 0.49757045675413014
User 64895 does not improve AUC. Reverting changes.
Training on augumented user 84469 11/50 current_auc = 0.49951409135082603
User 84469 AUC after training: 0.49902818270165206
User 84469 does not improve AUC. Reverting changes.
Training on augumented user 26381 12/50 current_auc = 0.49951409135082603
User 26381 AUC after training: 0.49757045675413014
User 26381 does not improve AUC. Reverting changes.
Training on augumented user 99010 13/50 current_auc = 0.49951409135082603
User 99010 AUC after training: 0.4985422740524781
User 99010 does not improve AUC. Reverting changes.
Training on augumented user 83496 14/50 current_auc = 0.49951409135082603
User 83496 AUC after training: 0.49902818270165206
User 83496 does not improve AUC. Reverting changes.
Training on augumented user 102635 15/50 current_auc = 0.49951409135082603
User 102635 AUC after training: 0.4985422740524781
User 102635 does not improve AUC. Reverting changes.
Training on augumented user 46007 16/50 current_auc = 0.49951409135082603
User 46007 AUC after training: 0.4985422740524781
User 46007 does not improve AUC. Reverting changes.
Training on augumented user 101907 17/50 current_auc = 0.49951409135082603
User 101907 AUC after training: 0.49611273080660834
User 101907 does not improve AUC. Reverting changes.
Training on augumented user 14062 18/50 current_auc = 0.49951409135082603
User 14062 AUC after training: 0.4995140913508259
User 14062 does not improve AUC. Reverting changes.
Training on augumented user 37965 19/50 current_auc = 0.49951409135082603
User 37965 AUC after training: 0.49757045675413014
User 37965 does not improve AUC. Reverting changes.
Training on augumented user 20131 20/50 current_auc = 0.49951409135082603
User 20131 AUC after training: 0.4985422740524781
User 20131 does not improve AUC. Reverting changes.
Training on augumented user 130830 21/50 current_auc = 0.49951409135082603
User 130830 AUC after training: 0.4985422740524781
User 130830 does not improve AUC. Reverting changes.
Training on augumented user 41916 22/50 current_auc = 0.49951409135082603
User 41916 AUC after training: 0.49951409135082603
User 41916 does not improve AUC. Reverting changes.
Training on augumented user 54195 23/50 current_auc = 0.49951409135082603
User 54195 AUC after training: 0.49999999999999994
User 54195 improves AUC. Keeping the model.
Training on augumented user 88350 24/50 current_auc = 0.49999999999999994
User 88350 AUC after training: 0.500485908649174
User 88350 improves AUC. Keeping the model.
Training on augumented user 54791 25/50 current_auc = 0.500485908649174
User 54791 AUC after training: 0.500485908649174
User 54791 does not improve AUC. Reverting changes.
Training on augumented user 27770 26/50 current_auc = 0.500485908649174
User 27770 AUC after training: 0.4990281827016521
User 27770 does not improve AUC. Reverting changes.
Training on augumented user 71534 27/50 current_auc = 0.500485908649174
User 71534 AUC after training: 0.49854227405247803
User 71534 does not improve AUC. Reverting changes.
Training on augumented user 4839 28/50 current_auc = 0.500485908649174
User 4839 AUC after training: 0.4990281827016521
User 4839 does not improve AUC. Reverting changes.
Training on augumented user 104378 29/50 current_auc = 0.500485908649174
User 104378 AUC after training: 0.49999999999999994
User 104378 does not improve AUC. Reverting changes.
Training on augumented user 120866 30/50 current_auc = 0.500485908649174
User 120866 AUC after training: 0.49999999999999994
User 120866 does not improve AUC. Reverting changes.
Training on augumented user 15522 31/50 current_auc = 0.500485908649174
User 15522 AUC after training: 0.49951409135082603
User 15522 does not improve AUC. Reverting changes.
Training on augumented user 118241 32/50 current_auc = 0.500485908649174
User 118241 AUC after training: 0.499514091350826
User 118241 does not improve AUC. Reverting changes.
Training on augumented user 110509 33/50 current_auc = 0.500485908649174
User 110509 AUC after training: 0.4965986394557823
User 110509 does not improve AUC. Reverting changes.
Training on augumented user 83835 34/50 current_auc = 0.500485908649174
User 83835 AUC after training: 0.49999999999999994
User 83835 does not improve AUC. Reverting changes.
Training on augumented user 31619 35/50 current_auc = 0.500485908649174
User 31619 AUC after training: 0.49951409135082603
User 31619 does not improve AUC. Reverting changes.
Training on augumented user 100607 36/50 current_auc = 0.500485908649174
User 100607 AUC after training: 0.4980563654033041
User 100607 does not improve AUC. Reverting changes.
Training on augumented user 8658 37/50 current_auc = 0.500485908649174
User 8658 AUC after training: 0.5
User 8658 does not improve AUC. Reverting changes.
Training on augumented user 109761 38/50 current_auc = 0.500485908649174
User 109761 AUC after training: 0.49951409135082603
User 109761 does not improve AUC. Reverting changes.
Training on augumented user 112302 39/50 current_auc = 0.500485908649174
User 112302 AUC after training: 0.4980563654033042
User 112302 does not improve AUC. Reverting changes.
Training on augumented user 67636 40/50 current_auc = 0.500485908649174
User 67636 AUC after training: 0.49514091350826045
User 67636 does not improve AUC. Reverting changes.
Training on augumented user 121365 41/50 current_auc = 0.500485908649174
User 121365 AUC after training: 0.4985422740524781
User 121365 does not improve AUC. Reverting changes.
Training on augumented user 41369 42/50 current_auc = 0.500485908649174
User 41369 AUC after training: 0.4980563654033042
User 41369 does not improve AUC. Reverting changes.
Training on augumented user 32793 43/50 current_auc = 0.500485908649174
User 32793 AUC after training: 0.49902818270165206
User 32793 does not improve AUC. Reverting changes.
Training on augumented user 73236 44/50 current_auc = 0.500485908649174
User 73236 AUC after training: 0.49902818270165206
User 73236 does not improve AUC. Reverting changes.
Training on augumented user 61144 45/50 current_auc = 0.500485908649174
User 61144 AUC after training: 0.500485908649174
User 61144 does not improve AUC. Reverting changes.
Training on augumented user 78681 46/50 current_auc = 0.500485908649174
User 78681 AUC after training: 0.5024295432458697
User 78681 improves AUC. Keeping the model.
Training on augumented user 42906 47/50 current_auc = 0.5024295432458697
User 42906 AUC after training: 0.5009718172983478
User 42906 does not improve AUC. Reverting changes.
Training on augumented user 59896 48/50 current_auc = 0.5024295432458697
User 59896 AUC after training: 0.5014577259475218
User 59896 does not improve AUC. Reverting changes.
Training on augumented user 87202 49/50 current_auc = 0.5024295432458697
User 87202 AUC after training: 0.5009718172983478
User 87202 does not improve AUC. Reverting changes.
[2024-12-02 20:17:40.982880] start test user 102565 281/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:17:41.396004] start test user 102565 281/567 recall augumented users by random, augumented_users = [28832, 49575, 107102, 116446, 6703, 38470, 50015, 44003, 8902, 57586, 94467, 109137, 116818, 121319, 40916, 136013, 112485, 113853, 3361, 17425, 31177, 47647, 132025, 111297, 41135, 26247, 115379, 32431, 103098, 20395, 28216, 99905, 8257, 119484, 100775, 44800, 19231, 67368, 136025, 132634, 112492, 67853, 36764, 86049, 108698, 88709, 81769, 42583, 1571, 73258]
[2024-12-02 20:17:41.411944] user = 102565 Cloud 281/567
[2024-12-02 20:17:41.426046] user = 102565 Local 281/567
[2024-12-02 20:17:41.580411] user = 102565 Local+ 281/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:17:43.374725] user = 102565 MPDA- 281/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.47953216374269003
Training on augumented user 28832 0/50 current_auc = 0.47953216374269003
User 28832 AUC after training: 0.47953216374269003
User 28832 does not improve AUC. Reverting changes.
Training on augumented user 49575 1/50 current_auc = 0.47953216374269003
User 49575 AUC after training: 0.47953216374269003
User 49575 does not improve AUC. Reverting changes.
Training on augumented user 107102 2/50 current_auc = 0.47953216374269003
User 107102 AUC after training: 0.4834307992202729
User 107102 improves AUC. Keeping the model.
Training on augumented user 116446 3/50 current_auc = 0.4834307992202729
User 116446 AUC after training: 0.4853801169590643
User 116446 improves AUC. Keeping the model.
Training on augumented user 6703 4/50 current_auc = 0.4853801169590643
User 6703 AUC after training: 0.4873294346978557
User 6703 improves AUC. Keeping the model.
Training on augumented user 38470 5/50 current_auc = 0.4873294346978557
User 38470 AUC after training: 0.4873294346978557
User 38470 does not improve AUC. Reverting changes.
Training on augumented user 50015 6/50 current_auc = 0.4873294346978557
User 50015 AUC after training: 0.4853801169590643
User 50015 does not improve AUC. Reverting changes.
Training on augumented user 44003 7/50 current_auc = 0.4873294346978557
User 44003 AUC after training: 0.4853801169590643
User 44003 does not improve AUC. Reverting changes.
Training on augumented user 8902 8/50 current_auc = 0.4873294346978557
User 8902 AUC after training: 0.4853801169590643
User 8902 does not improve AUC. Reverting changes.
Training on augumented user 57586 9/50 current_auc = 0.4873294346978557
User 57586 AUC after training: 0.4853801169590643
User 57586 does not improve AUC. Reverting changes.
Training on augumented user 94467 10/50 current_auc = 0.4873294346978557
User 94467 AUC after training: 0.4853801169590643
User 94467 does not improve AUC. Reverting changes.
Training on augumented user 109137 11/50 current_auc = 0.4873294346978557
User 109137 AUC after training: 0.4853801169590643
User 109137 does not improve AUC. Reverting changes.
Training on augumented user 116818 12/50 current_auc = 0.4873294346978557
User 116818 AUC after training: 0.4873294346978557
User 116818 does not improve AUC. Reverting changes.
Training on augumented user 121319 13/50 current_auc = 0.4873294346978557
User 121319 AUC after training: 0.4853801169590643
User 121319 does not improve AUC. Reverting changes.
Training on augumented user 40916 14/50 current_auc = 0.4873294346978557
User 40916 AUC after training: 0.4853801169590643
User 40916 does not improve AUC. Reverting changes.
Training on augumented user 136013 15/50 current_auc = 0.4873294346978557
User 136013 AUC after training: 0.4853801169590643
User 136013 does not improve AUC. Reverting changes.
Training on augumented user 112485 16/50 current_auc = 0.4873294346978557
User 112485 AUC after training: 0.4873294346978557
User 112485 does not improve AUC. Reverting changes.
Training on augumented user 113853 17/50 current_auc = 0.4873294346978557
User 113853 AUC after training: 0.4853801169590643
User 113853 does not improve AUC. Reverting changes.
Training on augumented user 3361 18/50 current_auc = 0.4873294346978557
User 3361 AUC after training: 0.4853801169590643
User 3361 does not improve AUC. Reverting changes.
Training on augumented user 17425 19/50 current_auc = 0.4873294346978557
User 17425 AUC after training: 0.4853801169590643
User 17425 does not improve AUC. Reverting changes.
Training on augumented user 31177 20/50 current_auc = 0.4873294346978557
User 31177 AUC after training: 0.4834307992202729
User 31177 does not improve AUC. Reverting changes.
Training on augumented user 47647 21/50 current_auc = 0.4873294346978557
User 47647 AUC after training: 0.4834307992202729
User 47647 does not improve AUC. Reverting changes.
Training on augumented user 132025 22/50 current_auc = 0.4873294346978557
User 132025 AUC after training: 0.4853801169590643
User 132025 does not improve AUC. Reverting changes.
Training on augumented user 111297 23/50 current_auc = 0.4873294346978557
User 111297 AUC after training: 0.4853801169590643
User 111297 does not improve AUC. Reverting changes.
Training on augumented user 41135 24/50 current_auc = 0.4873294346978557
User 41135 AUC after training: 0.4853801169590643
User 41135 does not improve AUC. Reverting changes.
Training on augumented user 26247 25/50 current_auc = 0.4873294346978557
User 26247 AUC after training: 0.4873294346978557
User 26247 does not improve AUC. Reverting changes.
Training on augumented user 115379 26/50 current_auc = 0.4873294346978557
User 115379 AUC after training: 0.4853801169590643
User 115379 does not improve AUC. Reverting changes.
Training on augumented user 32431 27/50 current_auc = 0.4873294346978557
User 32431 AUC after training: 0.48148148148148145
User 32431 does not improve AUC. Reverting changes.
Training on augumented user 103098 28/50 current_auc = 0.4873294346978557
User 103098 AUC after training: 0.4873294346978557
User 103098 does not improve AUC. Reverting changes.
Training on augumented user 20395 29/50 current_auc = 0.4873294346978557
User 20395 AUC after training: 0.4834307992202729
User 20395 does not improve AUC. Reverting changes.
Training on augumented user 28216 30/50 current_auc = 0.4873294346978557
User 28216 AUC after training: 0.4873294346978557
User 28216 does not improve AUC. Reverting changes.
Training on augumented user 99905 31/50 current_auc = 0.4873294346978557
User 99905 AUC after training: 0.4873294346978557
User 99905 does not improve AUC. Reverting changes.
Training on augumented user 8257 32/50 current_auc = 0.4873294346978557
User 8257 AUC after training: 0.4873294346978557
User 8257 does not improve AUC. Reverting changes.
Training on augumented user 119484 33/50 current_auc = 0.4873294346978557
User 119484 AUC after training: 0.4873294346978557
User 119484 does not improve AUC. Reverting changes.
Training on augumented user 100775 34/50 current_auc = 0.4873294346978557
User 100775 AUC after training: 0.4834307992202729
User 100775 does not improve AUC. Reverting changes.
Training on augumented user 44800 35/50 current_auc = 0.4873294346978557
User 44800 AUC after training: 0.4853801169590643
User 44800 does not improve AUC. Reverting changes.
Training on augumented user 19231 36/50 current_auc = 0.4873294346978557
User 19231 AUC after training: 0.4853801169590643
User 19231 does not improve AUC. Reverting changes.
Training on augumented user 67368 37/50 current_auc = 0.4873294346978557
User 67368 AUC after training: 0.4834307992202729
User 67368 does not improve AUC. Reverting changes.
Training on augumented user 136025 38/50 current_auc = 0.4873294346978557
User 136025 AUC after training: 0.4853801169590643
User 136025 does not improve AUC. Reverting changes.
Training on augumented user 132634 39/50 current_auc = 0.4873294346978557
User 132634 AUC after training: 0.4853801169590643
User 132634 does not improve AUC. Reverting changes.
Training on augumented user 112492 40/50 current_auc = 0.4873294346978557
User 112492 AUC after training: 0.4873294346978557
User 112492 does not improve AUC. Reverting changes.
Training on augumented user 67853 41/50 current_auc = 0.4873294346978557
User 67853 AUC after training: 0.4853801169590643
User 67853 does not improve AUC. Reverting changes.
Training on augumented user 36764 42/50 current_auc = 0.4873294346978557
User 36764 AUC after training: 0.4873294346978557
User 36764 does not improve AUC. Reverting changes.
Training on augumented user 86049 43/50 current_auc = 0.4873294346978557
User 86049 AUC after training: 0.4834307992202729
User 86049 does not improve AUC. Reverting changes.
Training on augumented user 108698 44/50 current_auc = 0.4873294346978557
User 108698 AUC after training: 0.4853801169590643
User 108698 does not improve AUC. Reverting changes.
Training on augumented user 88709 45/50 current_auc = 0.4873294346978557
User 88709 AUC after training: 0.4853801169590643
User 88709 does not improve AUC. Reverting changes.
Training on augumented user 81769 46/50 current_auc = 0.4873294346978557
User 81769 AUC after training: 0.4853801169590643
User 81769 does not improve AUC. Reverting changes.
Training on augumented user 42583 47/50 current_auc = 0.4873294346978557
User 42583 AUC after training: 0.4873294346978557
User 42583 does not improve AUC. Reverting changes.
Training on augumented user 1571 48/50 current_auc = 0.4873294346978557
User 1571 AUC after training: 0.4834307992202729
User 1571 does not improve AUC. Reverting changes.
Training on augumented user 73258 49/50 current_auc = 0.4873294346978557
User 73258 AUC after training: 0.4834307992202729
User 73258 does not improve AUC. Reverting changes.
[2024-12-02 20:18:06.034190] start test user 102569 282/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:18:06.442098] start test user 102569 282/567 recall augumented users by random, augumented_users = [75971, 107104, 94735, 94962, 32768, 46440, 49241, 39744, 84031, 134435, 17661, 39172, 9347, 127651, 93831, 117189, 138334, 129031, 102123, 40983, 55935, 131754, 96547, 2150, 103950, 18979, 66223, 40692, 124125, 37069, 110590, 52228, 10418, 82091, 108153, 74889, 4174, 97853, 102413, 100919, 2032, 94291, 132023, 92386, 136611, 83044, 118492, 49935, 107438, 84037]
[2024-12-02 20:18:06.457235] user = 102569 Cloud 282/567
[2024-12-02 20:18:06.467402] user = 102569 Local 282/567
[2024-12-02 20:18:06.528234] user = 102569 Local+ 282/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:18:09.683314] user = 102569 MPDA- 282/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.8308823529411764
Training on augumented user 75971 0/50 current_auc = 0.8308823529411764
User 75971 AUC after training: 0.8272058823529411
User 75971 does not improve AUC. Reverting changes.
Training on augumented user 107104 1/50 current_auc = 0.8308823529411764
User 107104 AUC after training: 0.8272058823529411
User 107104 does not improve AUC. Reverting changes.
Training on augumented user 94735 2/50 current_auc = 0.8308823529411764
User 94735 AUC after training: 0.8308823529411764
User 94735 does not improve AUC. Reverting changes.
Training on augumented user 94962 3/50 current_auc = 0.8308823529411764
User 94962 AUC after training: 0.8345588235294117
User 94962 improves AUC. Keeping the model.
Training on augumented user 32768 4/50 current_auc = 0.8345588235294117
User 32768 AUC after training: 0.8272058823529411
User 32768 does not improve AUC. Reverting changes.
Training on augumented user 46440 5/50 current_auc = 0.8345588235294117
User 46440 AUC after training: 0.8345588235294117
User 46440 does not improve AUC. Reverting changes.
Training on augumented user 49241 6/50 current_auc = 0.8345588235294117
User 49241 AUC after training: 0.8345588235294117
User 49241 does not improve AUC. Reverting changes.
Training on augumented user 39744 7/50 current_auc = 0.8345588235294117
User 39744 AUC after training: 0.8308823529411764
User 39744 does not improve AUC. Reverting changes.
Training on augumented user 84031 8/50 current_auc = 0.8345588235294117
User 84031 AUC after training: 0.8308823529411764
User 84031 does not improve AUC. Reverting changes.
Training on augumented user 134435 9/50 current_auc = 0.8345588235294117
User 134435 AUC after training: 0.8345588235294117
User 134435 does not improve AUC. Reverting changes.
Training on augumented user 17661 10/50 current_auc = 0.8345588235294117
User 17661 AUC after training: 0.8345588235294117
User 17661 does not improve AUC. Reverting changes.
Training on augumented user 39172 11/50 current_auc = 0.8345588235294117
User 39172 AUC after training: 0.8345588235294117
User 39172 does not improve AUC. Reverting changes.
Training on augumented user 9347 12/50 current_auc = 0.8345588235294117
User 9347 AUC after training: 0.8345588235294117
User 9347 does not improve AUC. Reverting changes.
Training on augumented user 127651 13/50 current_auc = 0.8345588235294117
User 127651 AUC after training: 0.8345588235294117
User 127651 does not improve AUC. Reverting changes.
Training on augumented user 93831 14/50 current_auc = 0.8345588235294117
User 93831 AUC after training: 0.8272058823529411
User 93831 does not improve AUC. Reverting changes.
Training on augumented user 117189 15/50 current_auc = 0.8345588235294117
User 117189 AUC after training: 0.8345588235294117
User 117189 does not improve AUC. Reverting changes.
Training on augumented user 138334 16/50 current_auc = 0.8345588235294117
User 138334 AUC after training: 0.8345588235294117
User 138334 does not improve AUC. Reverting changes.
Training on augumented user 129031 17/50 current_auc = 0.8345588235294117
User 129031 AUC after training: 0.8345588235294117
User 129031 does not improve AUC. Reverting changes.
Training on augumented user 102123 18/50 current_auc = 0.8345588235294117
User 102123 AUC after training: 0.8345588235294117
User 102123 does not improve AUC. Reverting changes.
Training on augumented user 40983 19/50 current_auc = 0.8345588235294117
User 40983 AUC after training: 0.8345588235294117
User 40983 does not improve AUC. Reverting changes.
Training on augumented user 55935 20/50 current_auc = 0.8345588235294117
User 55935 AUC after training: 0.8345588235294117
User 55935 does not improve AUC. Reverting changes.
Training on augumented user 131754 21/50 current_auc = 0.8345588235294117
User 131754 AUC after training: 0.8345588235294117
User 131754 does not improve AUC. Reverting changes.
Training on augumented user 96547 22/50 current_auc = 0.8345588235294117
User 96547 AUC after training: 0.838235294117647
User 96547 improves AUC. Keeping the model.
Training on augumented user 2150 23/50 current_auc = 0.838235294117647
User 2150 AUC after training: 0.838235294117647
User 2150 does not improve AUC. Reverting changes.
Training on augumented user 103950 24/50 current_auc = 0.838235294117647
User 103950 AUC after training: 0.8345588235294117
User 103950 does not improve AUC. Reverting changes.
Training on augumented user 18979 25/50 current_auc = 0.838235294117647
User 18979 AUC after training: 0.838235294117647
User 18979 does not improve AUC. Reverting changes.
Training on augumented user 66223 26/50 current_auc = 0.838235294117647
User 66223 AUC after training: 0.838235294117647
User 66223 does not improve AUC. Reverting changes.
Training on augumented user 40692 27/50 current_auc = 0.838235294117647
User 40692 AUC after training: 0.8345588235294117
User 40692 does not improve AUC. Reverting changes.
Training on augumented user 124125 28/50 current_auc = 0.838235294117647
User 124125 AUC after training: 0.838235294117647
User 124125 does not improve AUC. Reverting changes.
Training on augumented user 37069 29/50 current_auc = 0.838235294117647
User 37069 AUC after training: 0.8345588235294117
User 37069 does not improve AUC. Reverting changes.
Training on augumented user 110590 30/50 current_auc = 0.838235294117647
User 110590 AUC after training: 0.838235294117647
User 110590 does not improve AUC. Reverting changes.
Training on augumented user 52228 31/50 current_auc = 0.838235294117647
User 52228 AUC after training: 0.838235294117647
User 52228 does not improve AUC. Reverting changes.
Training on augumented user 10418 32/50 current_auc = 0.838235294117647
User 10418 AUC after training: 0.838235294117647
User 10418 does not improve AUC. Reverting changes.
Training on augumented user 82091 33/50 current_auc = 0.838235294117647
User 82091 AUC after training: 0.8272058823529411
User 82091 does not improve AUC. Reverting changes.
Training on augumented user 108153 34/50 current_auc = 0.838235294117647
User 108153 AUC after training: 0.8345588235294117
User 108153 does not improve AUC. Reverting changes.
Training on augumented user 74889 35/50 current_auc = 0.838235294117647
User 74889 AUC after training: 0.8419117647058824
User 74889 improves AUC. Keeping the model.
Training on augumented user 4174 36/50 current_auc = 0.8419117647058824
User 4174 AUC after training: 0.8419117647058824
User 4174 does not improve AUC. Reverting changes.
Training on augumented user 97853 37/50 current_auc = 0.8419117647058824
User 97853 AUC after training: 0.8272058823529411
User 97853 does not improve AUC. Reverting changes.
Training on augumented user 102413 38/50 current_auc = 0.8419117647058824
User 102413 AUC after training: 0.8419117647058824
User 102413 does not improve AUC. Reverting changes.
Training on augumented user 100919 39/50 current_auc = 0.8419117647058824
User 100919 AUC after training: 0.838235294117647
User 100919 does not improve AUC. Reverting changes.
Training on augumented user 2032 40/50 current_auc = 0.8419117647058824
User 2032 AUC after training: 0.838235294117647
User 2032 does not improve AUC. Reverting changes.
Training on augumented user 94291 41/50 current_auc = 0.8419117647058824
User 94291 AUC after training: 0.8345588235294117
User 94291 does not improve AUC. Reverting changes.
Training on augumented user 132023 42/50 current_auc = 0.8419117647058824
User 132023 AUC after training: 0.838235294117647
User 132023 does not improve AUC. Reverting changes.
Training on augumented user 92386 43/50 current_auc = 0.8419117647058824
User 92386 AUC after training: 0.8419117647058824
User 92386 does not improve AUC. Reverting changes.
Training on augumented user 136611 44/50 current_auc = 0.8419117647058824
User 136611 AUC after training: 0.8419117647058824
User 136611 does not improve AUC. Reverting changes.
Training on augumented user 83044 45/50 current_auc = 0.8419117647058824
User 83044 AUC after training: 0.8419117647058824
User 83044 does not improve AUC. Reverting changes.
Training on augumented user 118492 46/50 current_auc = 0.8419117647058824
User 118492 AUC after training: 0.838235294117647
User 118492 does not improve AUC. Reverting changes.
Training on augumented user 49935 47/50 current_auc = 0.8419117647058824
User 49935 AUC after training: 0.8419117647058824
User 49935 does not improve AUC. Reverting changes.
Training on augumented user 107438 48/50 current_auc = 0.8419117647058824
User 107438 AUC after training: 0.8419117647058824
User 107438 does not improve AUC. Reverting changes.
Training on augumented user 84037 49/50 current_auc = 0.8419117647058824
User 84037 AUC after training: 0.8419117647058824
User 84037 does not improve AUC. Reverting changes.
[2024-12-02 20:18:40.202477] start test user 102599 283/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:18:40.609988] start test user 102599 283/567 recall augumented users by random, augumented_users = [3271, 124059, 31232, 39893, 126022, 18052, 47624, 79759, 8543, 117304, 129158, 73451, 12058, 3554, 72058, 14462, 91150, 33952, 90854, 103193, 26524, 130003, 136893, 36280, 110018, 66099, 57851, 7363, 6649, 120044, 122662, 14071, 16942, 61145, 53324, 14954, 23228, 69960, 85043, 82000, 110170, 25599, 119380, 5524, 5879, 9726, 109647, 76904, 121710, 27112]
[2024-12-02 20:18:40.626288] user = 102599 Cloud 283/567
[2024-12-02 20:18:40.644746] user = 102599 Local 283/567
[2024-12-02 20:18:40.759705] user = 102599 Local+ 283/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:18:42.958952] user = 102599 MPDA- 283/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.43793939393939396
Training on augumented user 3271 0/50 current_auc = 0.43793939393939396
User 3271 AUC after training: 0.4381818181818181
User 3271 improves AUC. Keeping the model.
Training on augumented user 124059 1/50 current_auc = 0.4381818181818181
User 124059 AUC after training: 0.4395151515151515
User 124059 improves AUC. Keeping the model.
Training on augumented user 31232 2/50 current_auc = 0.4395151515151515
User 31232 AUC after training: 0.4395151515151515
User 31232 does not improve AUC. Reverting changes.
Training on augumented user 39893 3/50 current_auc = 0.4395151515151515
User 39893 AUC after training: 0.43927272727272726
User 39893 does not improve AUC. Reverting changes.
Training on augumented user 126022 4/50 current_auc = 0.4395151515151515
User 126022 AUC after training: 0.43854545454545457
User 126022 does not improve AUC. Reverting changes.
Training on augumented user 18052 5/50 current_auc = 0.4395151515151515
User 18052 AUC after training: 0.4378181818181818
User 18052 does not improve AUC. Reverting changes.
Training on augumented user 47624 6/50 current_auc = 0.4395151515151515
User 47624 AUC after training: 0.4364848484848485
User 47624 does not improve AUC. Reverting changes.
Training on augumented user 79759 7/50 current_auc = 0.4395151515151515
User 79759 AUC after training: 0.43999999999999995
User 79759 improves AUC. Keeping the model.
Training on augumented user 8543 8/50 current_auc = 0.43999999999999995
User 8543 AUC after training: 0.4402424242424242
User 8543 improves AUC. Keeping the model.
Training on augumented user 117304 9/50 current_auc = 0.4402424242424242
User 117304 AUC after training: 0.4402424242424242
User 117304 does not improve AUC. Reverting changes.
Training on augumented user 129158 10/50 current_auc = 0.4402424242424242
User 129158 AUC after training: 0.4395151515151515
User 129158 does not improve AUC. Reverting changes.
Training on augumented user 73451 11/50 current_auc = 0.4402424242424242
User 73451 AUC after training: 0.4414545454545455
User 73451 improves AUC. Keeping the model.
Training on augumented user 12058 12/50 current_auc = 0.4414545454545455
User 12058 AUC after training: 0.43975757575757574
User 12058 does not improve AUC. Reverting changes.
Training on augumented user 3554 13/50 current_auc = 0.4414545454545455
User 3554 AUC after training: 0.4349090909090909
User 3554 does not improve AUC. Reverting changes.
Training on augumented user 72058 14/50 current_auc = 0.4414545454545455
User 72058 AUC after training: 0.43903030303030305
User 72058 does not improve AUC. Reverting changes.
Training on augumented user 14462 15/50 current_auc = 0.4414545454545455
User 14462 AUC after training: 0.44533333333333336
User 14462 improves AUC. Keeping the model.
Training on augumented user 91150 16/50 current_auc = 0.44533333333333336
User 91150 AUC after training: 0.4443636363636364
User 91150 does not improve AUC. Reverting changes.
Training on augumented user 33952 17/50 current_auc = 0.44533333333333336
User 33952 AUC after training: 0.440969696969697
User 33952 does not improve AUC. Reverting changes.
Training on augumented user 90854 18/50 current_auc = 0.44533333333333336
User 90854 AUC after training: 0.44412121212121214
User 90854 does not improve AUC. Reverting changes.
Training on augumented user 103193 19/50 current_auc = 0.44533333333333336
User 103193 AUC after training: 0.44521212121212117
User 103193 does not improve AUC. Reverting changes.
Training on augumented user 26524 20/50 current_auc = 0.44533333333333336
User 26524 AUC after training: 0.4450909090909091
User 26524 does not improve AUC. Reverting changes.
Training on augumented user 130003 21/50 current_auc = 0.44533333333333336
User 130003 AUC after training: 0.4467878787878788
User 130003 improves AUC. Keeping the model.
Training on augumented user 136893 22/50 current_auc = 0.4467878787878788
User 136893 AUC after training: 0.44557575757575757
User 136893 does not improve AUC. Reverting changes.
Training on augumented user 36280 23/50 current_auc = 0.4467878787878788
User 36280 AUC after training: 0.4465454545454545
User 36280 does not improve AUC. Reverting changes.
Training on augumented user 110018 24/50 current_auc = 0.4467878787878788
User 110018 AUC after training: 0.44581818181818184
User 110018 does not improve AUC. Reverting changes.
Training on augumented user 66099 25/50 current_auc = 0.4467878787878788
User 66099 AUC after training: 0.4455757575757576
User 66099 does not improve AUC. Reverting changes.
Training on augumented user 57851 26/50 current_auc = 0.4467878787878788
User 57851 AUC after training: 0.44557575757575757
User 57851 does not improve AUC. Reverting changes.
Training on augumented user 7363 27/50 current_auc = 0.4467878787878788
User 7363 AUC after training: 0.4467878787878788
User 7363 does not improve AUC. Reverting changes.
Training on augumented user 6649 28/50 current_auc = 0.4467878787878788
User 6649 AUC after training: 0.4463030303030303
User 6649 does not improve AUC. Reverting changes.
Training on augumented user 120044 29/50 current_auc = 0.4467878787878788
User 120044 AUC after training: 0.44412121212121214
User 120044 does not improve AUC. Reverting changes.
Training on augumented user 122662 30/50 current_auc = 0.4467878787878788
User 122662 AUC after training: 0.44290909090909086
User 122662 does not improve AUC. Reverting changes.
Training on augumented user 14071 31/50 current_auc = 0.4467878787878788
User 14071 AUC after training: 0.4412121212121212
User 14071 does not improve AUC. Reverting changes.
Training on augumented user 16942 32/50 current_auc = 0.4467878787878788
User 16942 AUC after training: 0.44242424242424244
User 16942 does not improve AUC. Reverting changes.
Training on augumented user 61145 33/50 current_auc = 0.4467878787878788
User 61145 AUC after training: 0.44630303030303026
User 61145 does not improve AUC. Reverting changes.
Training on augumented user 53324 34/50 current_auc = 0.4467878787878788
User 53324 AUC after training: 0.4463030303030303
User 53324 does not improve AUC. Reverting changes.
Training on augumented user 14954 35/50 current_auc = 0.4467878787878788
User 14954 AUC after training: 0.44315151515151513
User 14954 does not improve AUC. Reverting changes.
Training on augumented user 23228 36/50 current_auc = 0.4467878787878788
User 23228 AUC after training: 0.4465454545454545
User 23228 does not improve AUC. Reverting changes.
Training on augumented user 69960 37/50 current_auc = 0.4467878787878788
User 69960 AUC after training: 0.4438787878787879
User 69960 does not improve AUC. Reverting changes.
Training on augumented user 85043 38/50 current_auc = 0.4467878787878788
User 85043 AUC after training: 0.44581818181818184
User 85043 does not improve AUC. Reverting changes.
Training on augumented user 82000 39/50 current_auc = 0.4467878787878788
User 82000 AUC after training: 0.4436363636363636
User 82000 does not improve AUC. Reverting changes.
Training on augumented user 110170 40/50 current_auc = 0.4467878787878788
User 110170 AUC after training: 0.4441212121212121
User 110170 does not improve AUC. Reverting changes.
Training on augumented user 25599 41/50 current_auc = 0.4467878787878788
User 25599 AUC after training: 0.44581818181818184
User 25599 does not improve AUC. Reverting changes.
Training on augumented user 119380 42/50 current_auc = 0.4467878787878788
User 119380 AUC after training: 0.45139393939393935
User 119380 improves AUC. Keeping the model.
Training on augumented user 5524 43/50 current_auc = 0.45139393939393935
User 5524 AUC after training: 0.4518787878787879
User 5524 improves AUC. Keeping the model.
Training on augumented user 5879 44/50 current_auc = 0.4518787878787879
User 5879 AUC after training: 0.4499393939393939
User 5879 does not improve AUC. Reverting changes.
Training on augumented user 9726 45/50 current_auc = 0.4518787878787879
User 9726 AUC after training: 0.45066666666666666
User 9726 does not improve AUC. Reverting changes.
Training on augumented user 109647 46/50 current_auc = 0.4518787878787879
User 109647 AUC after training: 0.45115151515151514
User 109647 does not improve AUC. Reverting changes.
Training on augumented user 76904 47/50 current_auc = 0.4518787878787879
User 76904 AUC after training: 0.4509090909090909
User 76904 does not improve AUC. Reverting changes.
Training on augumented user 121710 48/50 current_auc = 0.4518787878787879
User 121710 AUC after training: 0.4509090909090909
User 121710 does not improve AUC. Reverting changes.
Training on augumented user 27112 49/50 current_auc = 0.4518787878787879
User 27112 AUC after training: 0.4518787878787879
User 27112 does not improve AUC. Reverting changes.
[2024-12-02 20:19:11.988809] start test user 102630 284/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:19:12.503949] start test user 102630 284/567 recall augumented users by random, augumented_users = [123819, 47214, 65012, 77124, 68385, 22578, 126367, 16157, 68421, 42878, 42927, 12390, 20629, 101831, 41171, 53575, 38431, 6655, 88268, 92732, 19059, 122851, 114466, 27312, 7334, 55779, 22366, 126298, 23511, 44973, 7294, 8184, 79055, 104020, 750, 136201, 70045, 137602, 73468, 135693, 78120, 124568, 43933, 13418, 32523, 72343, 3842, 64620, 102603, 106501]
[2024-12-02 20:19:12.518815] user = 102630 Cloud 284/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:19:12.524793] user = 102630 Local 284/567
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:19:12.580413] user = 102630 Local+ 284/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:19:15.596528] user = 102630 MPDA- 284/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 123819 0/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 123819 AUC after training: 0.5
User 123819 does not improve AUC. Reverting changes.
Training on augumented user 47214 1/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 47214 AUC after training: 0.5
User 47214 does not improve AUC. Reverting changes.
Training on augumented user 65012 2/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 65012 AUC after training: 0.5
User 65012 does not improve AUC. Reverting changes.
Training on augumented user 77124 3/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 77124 AUC after training: 0.5
User 77124 does not improve AUC. Reverting changes.
Training on augumented user 68385 4/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68385 AUC after training: 0.5
User 68385 does not improve AUC. Reverting changes.
Training on augumented user 22578 5/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22578 AUC after training: 0.5
User 22578 does not improve AUC. Reverting changes.
Training on augumented user 126367 6/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126367 AUC after training: 0.5
User 126367 does not improve AUC. Reverting changes.
Training on augumented user 16157 7/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 16157 AUC after training: 0.5
User 16157 does not improve AUC. Reverting changes.
Training on augumented user 68421 8/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 68421 AUC after training: 0.5
User 68421 does not improve AUC. Reverting changes.
Training on augumented user 42878 9/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42878 AUC after training: 0.5
User 42878 does not improve AUC. Reverting changes.
Training on augumented user 42927 10/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 42927 AUC after training: 0.5
User 42927 does not improve AUC. Reverting changes.
Training on augumented user 12390 11/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 12390 AUC after training: 0.5
User 12390 does not improve AUC. Reverting changes.
Training on augumented user 20629 12/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 20629 AUC after training: 0.5
User 20629 does not improve AUC. Reverting changes.
Training on augumented user 101831 13/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 101831 AUC after training: 0.5
User 101831 does not improve AUC. Reverting changes.
Training on augumented user 41171 14/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 41171 AUC after training: 0.5
User 41171 does not improve AUC. Reverting changes.
Training on augumented user 53575 15/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 53575 AUC after training: 0.5
User 53575 does not improve AUC. Reverting changes.
Training on augumented user 38431 16/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 38431 AUC after training: 0.5
User 38431 does not improve AUC. Reverting changes.
Training on augumented user 6655 17/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 6655 AUC after training: 0.5
User 6655 does not improve AUC. Reverting changes.
Training on augumented user 88268 18/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 88268 AUC after training: 0.5
User 88268 does not improve AUC. Reverting changes.
Training on augumented user 92732 19/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 92732 AUC after training: 0.5
User 92732 does not improve AUC. Reverting changes.
Training on augumented user 19059 20/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 19059 AUC after training: 0.5
User 19059 does not improve AUC. Reverting changes.
Training on augumented user 122851 21/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 122851 AUC after training: 0.5
User 122851 does not improve AUC. Reverting changes.
Training on augumented user 114466 22/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 114466 AUC after training: 0.5
User 114466 does not improve AUC. Reverting changes.
Training on augumented user 27312 23/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 27312 AUC after training: 0.5
User 27312 does not improve AUC. Reverting changes.
Training on augumented user 7334 24/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7334 AUC after training: 0.5
User 7334 does not improve AUC. Reverting changes.
Training on augumented user 55779 25/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 55779 AUC after training: 0.5
User 55779 does not improve AUC. Reverting changes.
Training on augumented user 22366 26/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 22366 AUC after training: 0.5
User 22366 does not improve AUC. Reverting changes.
Training on augumented user 126298 27/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 126298 AUC after training: 0.5
User 126298 does not improve AUC. Reverting changes.
Training on augumented user 23511 28/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 23511 AUC after training: 0.5
User 23511 does not improve AUC. Reverting changes.
Training on augumented user 44973 29/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 44973 AUC after training: 0.5
User 44973 does not improve AUC. Reverting changes.
Training on augumented user 7294 30/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 7294 AUC after training: 0.5
User 7294 does not improve AUC. Reverting changes.
Training on augumented user 8184 31/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 8184 AUC after training: 0.5
User 8184 does not improve AUC. Reverting changes.
Training on augumented user 79055 32/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 79055 AUC after training: 0.5
User 79055 does not improve AUC. Reverting changes.
Training on augumented user 104020 33/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 104020 AUC after training: 0.5
User 104020 does not improve AUC. Reverting changes.
Training on augumented user 750 34/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 750 AUC after training: 0.5
User 750 does not improve AUC. Reverting changes.
Training on augumented user 136201 35/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 136201 AUC after training: 0.5
User 136201 does not improve AUC. Reverting changes.
Training on augumented user 70045 36/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 70045 AUC after training: 0.5
User 70045 does not improve AUC. Reverting changes.
Training on augumented user 137602 37/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 137602 AUC after training: 0.5
User 137602 does not improve AUC. Reverting changes.
Training on augumented user 73468 38/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 73468 AUC after training: 0.5
User 73468 does not improve AUC. Reverting changes.
Training on augumented user 135693 39/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 135693 AUC after training: 0.5
User 135693 does not improve AUC. Reverting changes.
Training on augumented user 78120 40/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 78120 AUC after training: 0.5
User 78120 does not improve AUC. Reverting changes.
Training on augumented user 124568 41/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 124568 AUC after training: 0.5
User 124568 does not improve AUC. Reverting changes.
Training on augumented user 43933 42/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 43933 AUC after training: 0.5
User 43933 does not improve AUC. Reverting changes.
Training on augumented user 13418 43/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 13418 AUC after training: 0.5
User 13418 does not improve AUC. Reverting changes.
Training on augumented user 32523 44/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 32523 AUC after training: 0.5
User 32523 does not improve AUC. Reverting changes.
Training on augumented user 72343 45/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 72343 AUC after training: 0.5
User 72343 does not improve AUC. Reverting changes.
Training on augumented user 3842 46/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 3842 AUC after training: 0.5
User 3842 does not improve AUC. Reverting changes.
Training on augumented user 64620 47/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 64620 AUC after training: 0.5
User 64620 does not improve AUC. Reverting changes.
Training on augumented user 102603 48/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 102603 AUC after training: 0.5
User 102603 does not improve AUC. Reverting changes.
Training on augumented user 106501 49/50 current_auc = 0.5
Warning: Only one class present in labels. AUC is not defined.
User 106501 AUC after training: 0.5
User 106501 does not improve AUC. Reverting changes.
Warning: Only one class present in labels. AUC is not defined.
[2024-12-02 20:19:41.663355] start test user 102671 285/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:19:42.178531] start test user 102671 285/567 recall augumented users by random, augumented_users = [95729, 76513, 81869, 52161, 26651, 77139, 18597, 45471, 18980, 116069, 61361, 101428, 134653, 55291, 136008, 71845, 124896, 132325, 22415, 78813, 43252, 45752, 34043, 77613, 99626, 18859, 99193, 57661, 85513, 37789, 77562, 7082, 110035, 42979, 49185, 40616, 40412, 42584, 66754, 2163, 53757, 93884, 117170, 111571, 119554, 87897, 34492, 108050, 39412, 48342]
[2024-12-02 20:19:42.195130] user = 102671 Cloud 285/567
[2024-12-02 20:19:42.221010] user = 102671 Local 285/567
[2024-12-02 20:19:42.267129] user = 102671 Local+ 285/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:19:44.936570] user = 102671 MPDA- 285/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.3333333333333333
Training on augumented user 95729 0/50 current_auc = 0.3333333333333333
User 95729 AUC after training: 0.3333333333333333
User 95729 does not improve AUC. Reverting changes.
Training on augumented user 76513 1/50 current_auc = 0.3333333333333333
User 76513 AUC after training: 0.3333333333333333
User 76513 does not improve AUC. Reverting changes.
Training on augumented user 81869 2/50 current_auc = 0.3333333333333333
User 81869 AUC after training: 0.3333333333333333
User 81869 does not improve AUC. Reverting changes.
Training on augumented user 52161 3/50 current_auc = 0.3333333333333333
User 52161 AUC after training: 0.3333333333333333
User 52161 does not improve AUC. Reverting changes.
Training on augumented user 26651 4/50 current_auc = 0.3333333333333333
User 26651 AUC after training: 0.3333333333333333
User 26651 does not improve AUC. Reverting changes.
Training on augumented user 77139 5/50 current_auc = 0.3333333333333333
User 77139 AUC after training: 0.3333333333333333
User 77139 does not improve AUC. Reverting changes.
Training on augumented user 18597 6/50 current_auc = 0.3333333333333333
User 18597 AUC after training: 0.3333333333333333
User 18597 does not improve AUC. Reverting changes.
Training on augumented user 45471 7/50 current_auc = 0.3333333333333333
User 45471 AUC after training: 0.3333333333333333
User 45471 does not improve AUC. Reverting changes.
Training on augumented user 18980 8/50 current_auc = 0.3333333333333333
User 18980 AUC after training: 0.3333333333333333
User 18980 does not improve AUC. Reverting changes.
Training on augumented user 116069 9/50 current_auc = 0.3333333333333333
User 116069 AUC after training: 0.3333333333333333
User 116069 does not improve AUC. Reverting changes.
Training on augumented user 61361 10/50 current_auc = 0.3333333333333333
User 61361 AUC after training: 0.3333333333333333
User 61361 does not improve AUC. Reverting changes.
Training on augumented user 101428 11/50 current_auc = 0.3333333333333333
User 101428 AUC after training: 0.3333333333333333
User 101428 does not improve AUC. Reverting changes.
Training on augumented user 134653 12/50 current_auc = 0.3333333333333333
User 134653 AUC after training: 0.3333333333333333
User 134653 does not improve AUC. Reverting changes.
Training on augumented user 55291 13/50 current_auc = 0.3333333333333333
User 55291 AUC after training: 0.3333333333333333
User 55291 does not improve AUC. Reverting changes.
Training on augumented user 136008 14/50 current_auc = 0.3333333333333333
User 136008 AUC after training: 0.3333333333333333
User 136008 does not improve AUC. Reverting changes.
Training on augumented user 71845 15/50 current_auc = 0.3333333333333333
User 71845 AUC after training: 0.3333333333333333
User 71845 does not improve AUC. Reverting changes.
Training on augumented user 124896 16/50 current_auc = 0.3333333333333333
User 124896 AUC after training: 0.3333333333333333
User 124896 does not improve AUC. Reverting changes.
Training on augumented user 132325 17/50 current_auc = 0.3333333333333333
User 132325 AUC after training: 0.3333333333333333
User 132325 does not improve AUC. Reverting changes.
Training on augumented user 22415 18/50 current_auc = 0.3333333333333333
User 22415 AUC after training: 0.3333333333333333
User 22415 does not improve AUC. Reverting changes.
Training on augumented user 78813 19/50 current_auc = 0.3333333333333333
User 78813 AUC after training: 0.3333333333333333
User 78813 does not improve AUC. Reverting changes.
Training on augumented user 43252 20/50 current_auc = 0.3333333333333333
User 43252 AUC after training: 0.3333333333333333
User 43252 does not improve AUC. Reverting changes.
Training on augumented user 45752 21/50 current_auc = 0.3333333333333333
User 45752 AUC after training: 0.3333333333333333
User 45752 does not improve AUC. Reverting changes.
Training on augumented user 34043 22/50 current_auc = 0.3333333333333333
User 34043 AUC after training: 0.3333333333333333
User 34043 does not improve AUC. Reverting changes.
Training on augumented user 77613 23/50 current_auc = 0.3333333333333333
User 77613 AUC after training: 0.3333333333333333
User 77613 does not improve AUC. Reverting changes.
Training on augumented user 99626 24/50 current_auc = 0.3333333333333333
User 99626 AUC after training: 0.3333333333333333
User 99626 does not improve AUC. Reverting changes.
Training on augumented user 18859 25/50 current_auc = 0.3333333333333333
User 18859 AUC after training: 0.3333333333333333
User 18859 does not improve AUC. Reverting changes.
Training on augumented user 99193 26/50 current_auc = 0.3333333333333333
User 99193 AUC after training: 0.3333333333333333
User 99193 does not improve AUC. Reverting changes.
Training on augumented user 57661 27/50 current_auc = 0.3333333333333333
User 57661 AUC after training: 0.3333333333333333
User 57661 does not improve AUC. Reverting changes.
Training on augumented user 85513 28/50 current_auc = 0.3333333333333333
User 85513 AUC after training: 0.3333333333333333
User 85513 does not improve AUC. Reverting changes.
Training on augumented user 37789 29/50 current_auc = 0.3333333333333333
User 37789 AUC after training: 0.3333333333333333
User 37789 does not improve AUC. Reverting changes.
Training on augumented user 77562 30/50 current_auc = 0.3333333333333333
User 77562 AUC after training: 0.3333333333333333
User 77562 does not improve AUC. Reverting changes.
Training on augumented user 7082 31/50 current_auc = 0.3333333333333333
User 7082 AUC after training: 0.3333333333333333
User 7082 does not improve AUC. Reverting changes.
Training on augumented user 110035 32/50 current_auc = 0.3333333333333333
User 110035 AUC after training: 0.3333333333333333
User 110035 does not improve AUC. Reverting changes.
Training on augumented user 42979 33/50 current_auc = 0.3333333333333333
User 42979 AUC after training: 0.3333333333333333
User 42979 does not improve AUC. Reverting changes.
Training on augumented user 49185 34/50 current_auc = 0.3333333333333333
User 49185 AUC after training: 0.3333333333333333
User 49185 does not improve AUC. Reverting changes.
Training on augumented user 40616 35/50 current_auc = 0.3333333333333333
User 40616 AUC after training: 0.3333333333333333
User 40616 does not improve AUC. Reverting changes.
Training on augumented user 40412 36/50 current_auc = 0.3333333333333333
User 40412 AUC after training: 0.3333333333333333
User 40412 does not improve AUC. Reverting changes.
Training on augumented user 42584 37/50 current_auc = 0.3333333333333333
User 42584 AUC after training: 0.3333333333333333
User 42584 does not improve AUC. Reverting changes.
Training on augumented user 66754 38/50 current_auc = 0.3333333333333333
User 66754 AUC after training: 0.3333333333333333
User 66754 does not improve AUC. Reverting changes.
Training on augumented user 2163 39/50 current_auc = 0.3333333333333333
User 2163 AUC after training: 0.3333333333333333
User 2163 does not improve AUC. Reverting changes.
Training on augumented user 53757 40/50 current_auc = 0.3333333333333333
User 53757 AUC after training: 0.3333333333333333
User 53757 does not improve AUC. Reverting changes.
Training on augumented user 93884 41/50 current_auc = 0.3333333333333333
User 93884 AUC after training: 0.3333333333333333
User 93884 does not improve AUC. Reverting changes.
Training on augumented user 117170 42/50 current_auc = 0.3333333333333333
User 117170 AUC after training: 0.3333333333333333
User 117170 does not improve AUC. Reverting changes.
Training on augumented user 111571 43/50 current_auc = 0.3333333333333333
User 111571 AUC after training: 0.3333333333333333
User 111571 does not improve AUC. Reverting changes.
Training on augumented user 119554 44/50 current_auc = 0.3333333333333333
User 119554 AUC after training: 0.3333333333333333
User 119554 does not improve AUC. Reverting changes.
Training on augumented user 87897 45/50 current_auc = 0.3333333333333333
User 87897 AUC after training: 0.3333333333333333
User 87897 does not improve AUC. Reverting changes.
Training on augumented user 34492 46/50 current_auc = 0.3333333333333333
User 34492 AUC after training: 0.3333333333333333
User 34492 does not improve AUC. Reverting changes.
Training on augumented user 108050 47/50 current_auc = 0.3333333333333333
User 108050 AUC after training: 0.3333333333333333
User 108050 does not improve AUC. Reverting changes.
Training on augumented user 39412 48/50 current_auc = 0.3333333333333333
User 39412 AUC after training: 0.3333333333333333
User 39412 does not improve AUC. Reverting changes.
Training on augumented user 48342 49/50 current_auc = 0.3333333333333333
User 48342 AUC after training: 0.3333333333333333
User 48342 does not improve AUC. Reverting changes.
[2024-12-02 20:20:15.298564] start test user 102679 286/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:20:15.739867] start test user 102679 286/567 recall augumented users by random, augumented_users = [20282, 80604, 6368, 59644, 137742, 117716, 115775, 81882, 42610, 73761, 84616, 94231, 78646, 31559, 77952, 109697, 32821, 89013, 27164, 125201, 135894, 111875, 73083, 89177, 44017, 35005, 41984, 1245, 135547, 79513, 122252, 104773, 91970, 120344, 40107, 15560, 75760, 34914, 11149, 78480, 76762, 125390, 40103, 38365, 120439, 25818, 26008, 86453, 88139, 105319]
[2024-12-02 20:20:15.755576] user = 102679 Cloud 286/567
[2024-12-02 20:20:15.764866] user = 102679 Local 286/567
[2024-12-02 20:20:15.823900] user = 102679 Local+ 286/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:20:18.235509] user = 102679 MPDA- 286/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5
Training on augumented user 20282 0/50 current_auc = 0.5
User 20282 AUC after training: 0.5
User 20282 does not improve AUC. Reverting changes.
Training on augumented user 80604 1/50 current_auc = 0.5
User 80604 AUC after training: 0.5
User 80604 does not improve AUC. Reverting changes.
Training on augumented user 6368 2/50 current_auc = 0.5
User 6368 AUC after training: 0.5
User 6368 does not improve AUC. Reverting changes.
Training on augumented user 59644 3/50 current_auc = 0.5
User 59644 AUC after training: 0.5
User 59644 does not improve AUC. Reverting changes.
Training on augumented user 137742 4/50 current_auc = 0.5
User 137742 AUC after training: 0.5
User 137742 does not improve AUC. Reverting changes.
Training on augumented user 117716 5/50 current_auc = 0.5
User 117716 AUC after training: 0.5
User 117716 does not improve AUC. Reverting changes.
Training on augumented user 115775 6/50 current_auc = 0.5
User 115775 AUC after training: 0.5
User 115775 does not improve AUC. Reverting changes.
Training on augumented user 81882 7/50 current_auc = 0.5
User 81882 AUC after training: 0.5
User 81882 does not improve AUC. Reverting changes.
Training on augumented user 42610 8/50 current_auc = 0.5
User 42610 AUC after training: 0.5
User 42610 does not improve AUC. Reverting changes.
Training on augumented user 73761 9/50 current_auc = 0.5
User 73761 AUC after training: 0.5
User 73761 does not improve AUC. Reverting changes.
Training on augumented user 84616 10/50 current_auc = 0.5
User 84616 AUC after training: 0.5
User 84616 does not improve AUC. Reverting changes.
Training on augumented user 94231 11/50 current_auc = 0.5
User 94231 AUC after training: 0.5
User 94231 does not improve AUC. Reverting changes.
Training on augumented user 78646 12/50 current_auc = 0.5
User 78646 AUC after training: 0.5
User 78646 does not improve AUC. Reverting changes.
Training on augumented user 31559 13/50 current_auc = 0.5
User 31559 AUC after training: 0.5
User 31559 does not improve AUC. Reverting changes.
Training on augumented user 77952 14/50 current_auc = 0.5
User 77952 AUC after training: 0.5
User 77952 does not improve AUC. Reverting changes.
Training on augumented user 109697 15/50 current_auc = 0.5
User 109697 AUC after training: 0.5
User 109697 does not improve AUC. Reverting changes.
Training on augumented user 32821 16/50 current_auc = 0.5
User 32821 AUC after training: 0.5
User 32821 does not improve AUC. Reverting changes.
Training on augumented user 89013 17/50 current_auc = 0.5
User 89013 AUC after training: 0.5
User 89013 does not improve AUC. Reverting changes.
Training on augumented user 27164 18/50 current_auc = 0.5
User 27164 AUC after training: 0.5
User 27164 does not improve AUC. Reverting changes.
Training on augumented user 125201 19/50 current_auc = 0.5
User 125201 AUC after training: 0.5
User 125201 does not improve AUC. Reverting changes.
Training on augumented user 135894 20/50 current_auc = 0.5
User 135894 AUC after training: 0.5
User 135894 does not improve AUC. Reverting changes.
Training on augumented user 111875 21/50 current_auc = 0.5
User 111875 AUC after training: 0.5
User 111875 does not improve AUC. Reverting changes.
Training on augumented user 73083 22/50 current_auc = 0.5
User 73083 AUC after training: 0.5
User 73083 does not improve AUC. Reverting changes.
Training on augumented user 89177 23/50 current_auc = 0.5
User 89177 AUC after training: 0.5
User 89177 does not improve AUC. Reverting changes.
Training on augumented user 44017 24/50 current_auc = 0.5
User 44017 AUC after training: 0.5
User 44017 does not improve AUC. Reverting changes.
Training on augumented user 35005 25/50 current_auc = 0.5
User 35005 AUC after training: 0.5
User 35005 does not improve AUC. Reverting changes.
Training on augumented user 41984 26/50 current_auc = 0.5
User 41984 AUC after training: 0.5
User 41984 does not improve AUC. Reverting changes.
Training on augumented user 1245 27/50 current_auc = 0.5
User 1245 AUC after training: 0.5
User 1245 does not improve AUC. Reverting changes.
Training on augumented user 135547 28/50 current_auc = 0.5
User 135547 AUC after training: 0.5
User 135547 does not improve AUC. Reverting changes.
Training on augumented user 79513 29/50 current_auc = 0.5
User 79513 AUC after training: 0.5
User 79513 does not improve AUC. Reverting changes.
Training on augumented user 122252 30/50 current_auc = 0.5
User 122252 AUC after training: 0.5
User 122252 does not improve AUC. Reverting changes.
Training on augumented user 104773 31/50 current_auc = 0.5
User 104773 AUC after training: 0.5
User 104773 does not improve AUC. Reverting changes.
Training on augumented user 91970 32/50 current_auc = 0.5
User 91970 AUC after training: 0.5
User 91970 does not improve AUC. Reverting changes.
Training on augumented user 120344 33/50 current_auc = 0.5
User 120344 AUC after training: 0.5
User 120344 does not improve AUC. Reverting changes.
Training on augumented user 40107 34/50 current_auc = 0.5
User 40107 AUC after training: 0.5
User 40107 does not improve AUC. Reverting changes.
Training on augumented user 15560 35/50 current_auc = 0.5
User 15560 AUC after training: 0.5
User 15560 does not improve AUC. Reverting changes.
Training on augumented user 75760 36/50 current_auc = 0.5
User 75760 AUC after training: 0.5
User 75760 does not improve AUC. Reverting changes.
Training on augumented user 34914 37/50 current_auc = 0.5
User 34914 AUC after training: 0.5
User 34914 does not improve AUC. Reverting changes.
Training on augumented user 11149 38/50 current_auc = 0.5
User 11149 AUC after training: 0.5
User 11149 does not improve AUC. Reverting changes.
Training on augumented user 78480 39/50 current_auc = 0.5
User 78480 AUC after training: 0.5
User 78480 does not improve AUC. Reverting changes.
Training on augumented user 76762 40/50 current_auc = 0.5
User 76762 AUC after training: 0.5
User 76762 does not improve AUC. Reverting changes.
Training on augumented user 125390 41/50 current_auc = 0.5
User 125390 AUC after training: 0.5
User 125390 does not improve AUC. Reverting changes.
Training on augumented user 40103 42/50 current_auc = 0.5
User 40103 AUC after training: 0.5
User 40103 does not improve AUC. Reverting changes.
Training on augumented user 38365 43/50 current_auc = 0.5
User 38365 AUC after training: 0.5
User 38365 does not improve AUC. Reverting changes.
Training on augumented user 120439 44/50 current_auc = 0.5
User 120439 AUC after training: 0.5
User 120439 does not improve AUC. Reverting changes.
Training on augumented user 25818 45/50 current_auc = 0.5
User 25818 AUC after training: 0.5
User 25818 does not improve AUC. Reverting changes.
Training on augumented user 26008 46/50 current_auc = 0.5
User 26008 AUC after training: 0.5
User 26008 does not improve AUC. Reverting changes.
Training on augumented user 86453 47/50 current_auc = 0.5
User 86453 AUC after training: 0.5
User 86453 does not improve AUC. Reverting changes.
Training on augumented user 88139 48/50 current_auc = 0.5
User 88139 AUC after training: 0.5
User 88139 does not improve AUC. Reverting changes.
Training on augumented user 105319 49/50 current_auc = 0.5
User 105319 AUC after training: 0.5
User 105319 does not improve AUC. Reverting changes.
[2024-12-02 20:20:48.958028] start test user 102680 287/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:20:49.595718] start test user 102680 287/567 recall augumented users by random, augumented_users = [52965, 96998, 95266, 87592, 22262, 79948, 1579, 55250, 115055, 83705, 62598, 33433, 119546, 119593, 72596, 81003, 26585, 74119, 101277, 136937, 125972, 96982, 74705, 37057, 42333, 90054, 50629, 4706, 116458, 30674, 134356, 87047, 11009, 87373, 25974, 28203, 131915, 3242, 131453, 13584, 89460, 102957, 65034, 50479, 55649, 70622, 75394, 74173, 77492, 83729]
[2024-12-02 20:20:49.613278] user = 102680 Cloud 287/567
[2024-12-02 20:20:49.648712] user = 102680 Local 287/567
[2024-12-02 20:20:49.884477] user = 102680 Local+ 287/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:20:52.729729] user = 102680 MPDA- 287/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.5116816980251905
Training on augumented user 52965 0/50 current_auc = 0.5116816980251905
User 52965 AUC after training: 0.5107875913543772
User 52965 does not improve AUC. Reverting changes.
Training on augumented user 96998 1/50 current_auc = 0.5116816980251905
User 96998 AUC after training: 0.5118955061421241
User 96998 improves AUC. Keeping the model.
Training on augumented user 95266 2/50 current_auc = 0.5118955061421241
User 95266 AUC after training: 0.5114970455605661
User 95266 does not improve AUC. Reverting changes.
Training on augumented user 87592 3/50 current_auc = 0.5118955061421241
User 87592 AUC after training: 0.5120704400559788
User 87592 improves AUC. Keeping the model.
Training on augumented user 22262 4/50 current_auc = 0.5120704400559788
User 22262 AUC after training: 0.5118955061421241
User 22262 does not improve AUC. Reverting changes.
Training on augumented user 79948 5/50 current_auc = 0.5120704400559788
User 79948 AUC after training: 0.5120704400559789
User 79948 improves AUC. Keeping the model.
Training on augumented user 1579 6/50 current_auc = 0.5120704400559789
User 1579 AUC after training: 0.5121287513605971
User 1579 improves AUC. Keeping the model.
Training on augumented user 55250 7/50 current_auc = 0.5121287513605971
User 55250 AUC after training: 0.5119926916498212
User 55250 does not improve AUC. Reverting changes.
Training on augumented user 115055 8/50 current_auc = 0.5121287513605971
User 115055 AUC after training: 0.5127896128129372
User 115055 improves AUC. Keeping the model.
Training on augumented user 83705 9/50 current_auc = 0.5127896128129372
User 83705 AUC after training: 0.5130811693360287
User 83705 improves AUC. Keeping the model.
Training on augumented user 62598 10/50 current_auc = 0.5130811693360287
User 62598 AUC after training: 0.5132852589021925
User 62598 improves AUC. Keeping the model.
Training on augumented user 33433 11/50 current_auc = 0.5132852589021925
User 33433 AUC after training: 0.5132755403514228
User 33433 does not improve AUC. Reverting changes.
Training on augumented user 119546 12/50 current_auc = 0.5132852589021925
User 119546 AUC after training: 0.5137323122375991
User 119546 improves AUC. Keeping the model.
Training on augumented user 119593 13/50 current_auc = 0.5137323122375991
User 119593 AUC after training: 0.5141113357176178
User 119593 improves AUC. Keeping the model.
Training on augumented user 72596 14/50 current_auc = 0.5141113357176178
User 72596 AUC after training: 0.5140335873114601
User 72596 does not improve AUC. Reverting changes.
Training on augumented user 81003 15/50 current_auc = 0.5141113357176178
User 81003 AUC after training: 0.5148305084745762
User 81003 improves AUC. Keeping the model.
Training on augumented user 26585 16/50 current_auc = 0.5148305084745762
User 26585 AUC after training: 0.514772197169958
User 26585 does not improve AUC. Reverting changes.
Training on augumented user 74119 17/50 current_auc = 0.5148305084745762
User 74119 AUC after training: 0.5139655574560722
User 74119 does not improve AUC. Reverting changes.
Training on augumented user 101277 18/50 current_auc = 0.5148305084745762
User 101277 AUC after training: 0.5152192505053647
User 101277 improves AUC. Keeping the model.
Training on augumented user 136937 19/50 current_auc = 0.5152192505053647
User 136937 AUC after training: 0.5148305084745763
User 136937 does not improve AUC. Reverting changes.
Training on augumented user 125972 20/50 current_auc = 0.5152192505053647
User 125972 AUC after training: 0.5155108070284559
User 125972 improves AUC. Keeping the model.
Training on augumented user 96982 21/50 current_auc = 0.5155108070284559
User 96982 AUC after training: 0.5160647644223293
User 96982 improves AUC. Keeping the model.
Training on augumented user 74705 22/50 current_auc = 0.5160647644223293
User 74705 AUC after training: 0.5149276939822733
User 74705 does not improve AUC. Reverting changes.
Training on augumented user 37057 23/50 current_auc = 0.5160647644223293
User 37057 AUC after training: 0.5160161716684808
User 37057 does not improve AUC. Reverting changes.
Training on augumented user 42333 24/50 current_auc = 0.5160647644223293
User 42333 AUC after training: 0.5155399626807651
User 42333 does not improve AUC. Reverting changes.
Training on augumented user 90054 25/50 current_auc = 0.5160647644223293
User 90054 AUC after training: 0.5154719328253771
User 90054 does not improve AUC. Reverting changes.
Training on augumented user 50629 26/50 current_auc = 0.5160647644223293
User 50629 AUC after training: 0.5158120821023169
User 50629 does not improve AUC. Reverting changes.
Training on augumented user 4706 27/50 current_auc = 0.5160647644223293
User 4706 AUC after training: 0.5160939200746385
User 4706 improves AUC. Keeping the model.
Training on augumented user 116458 28/50 current_auc = 0.5160939200746385
User 116458 AUC after training: 0.5155496812315348
User 116458 does not improve AUC. Reverting changes.
Training on augumented user 30674 29/50 current_auc = 0.5160939200746385
User 30674 AUC after training: 0.5156177110869227
User 30674 does not improve AUC. Reverting changes.
Training on augumented user 134356 30/50 current_auc = 0.5160939200746385
User 134356 AUC after training: 0.5146750116622609
User 134356 does not improve AUC. Reverting changes.
Training on augumented user 87047 31/50 current_auc = 0.5160939200746385
User 87047 AUC after training: 0.5161327942777173
User 87047 improves AUC. Keeping the model.
Training on augumented user 11009 32/50 current_auc = 0.5161327942777173
User 11009 AUC after training: 0.516210542683875
User 11009 improves AUC. Keeping the model.
Training on augumented user 87373 33/50 current_auc = 0.516210542683875
User 87373 AUC after training: 0.5155496812315348
User 87373 does not improve AUC. Reverting changes.
Training on augumented user 25974 34/50 current_auc = 0.516210542683875
User 25974 AUC after training: 0.5163271652931115
User 25974 improves AUC. Keeping the model.
Training on augumented user 28203 35/50 current_auc = 0.5163271652931115
User 28203 AUC after training: 0.5159189861607837
User 28203 does not improve AUC. Reverting changes.
Training on augumented user 131915 36/50 current_auc = 0.5163271652931115
User 131915 AUC after training: 0.5180765044316591
User 131915 improves AUC. Keeping the model.
Training on augumented user 3242 37/50 current_auc = 0.5180765044316591
User 3242 AUC after training: 0.5179793189239621
User 3242 does not improve AUC. Reverting changes.
Training on augumented user 131453 38/50 current_auc = 0.5180765044316591
User 131453 AUC after training: 0.5179015705178044
User 131453 does not improve AUC. Reverting changes.
Training on augumented user 13584 39/50 current_auc = 0.5180765044316591
User 13584 AUC after training: 0.5182125641424351
User 13584 improves AUC. Keeping the model.
Training on augumented user 89460 40/50 current_auc = 0.5182125641424351
User 89460 AUC after training: 0.5172990203700825
User 89460 does not improve AUC. Reverting changes.
Training on augumented user 102957 41/50 current_auc = 0.5182125641424351
User 102957 AUC after training: 0.5183972166070596
User 102957 improves AUC. Keeping the model.
Training on augumented user 65034 42/50 current_auc = 0.5183972166070596
User 65034 AUC after training: 0.518815114290157
User 65034 improves AUC. Keeping the model.
Training on augumented user 50479 43/50 current_auc = 0.518815114290157
User 50479 AUC after training: 0.5193010418286426
User 50479 improves AUC. Keeping the model.
Training on augumented user 55649 44/50 current_auc = 0.5193010418286426
User 55649 AUC after training: 0.5192232934224849
User 55649 does not improve AUC. Reverting changes.
Training on augumented user 70622 45/50 current_auc = 0.5193010418286426
User 70622 AUC after training: 0.5193787902348002
User 70622 improves AUC. Keeping the model.
Training on augumented user 75394 46/50 current_auc = 0.5193787902348002
User 75394 AUC after training: 0.5197092209609703
User 75394 improves AUC. Keeping the model.
Training on augumented user 74173 47/50 current_auc = 0.5197092209609703
User 74173 AUC after training: 0.5197286580625097
User 74173 improves AUC. Keeping the model.
Training on augumented user 77492 48/50 current_auc = 0.5197286580625097
User 77492 AUC after training: 0.5197675322655886
User 77492 improves AUC. Keeping the model.
Training on augumented user 83729 49/50 current_auc = 0.5197675322655886
User 83729 AUC after training: 0.519281604727103
User 83729 does not improve AUC. Reverting changes.
[2024-12-02 20:21:25.378973] start test user 102699 288/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:21:26.036932] start test user 102699 288/567 recall augumented users by random, augumented_users = [96158, 46446, 96250, 119575, 111071, 45767, 55133, 52458, 80991, 133623, 112111, 130482, 103305, 16132, 99228, 72558, 91018, 125944, 57066, 127450, 31197, 102914, 8742, 86513, 110337, 97227, 83920, 46682, 67463, 93184, 119369, 61278, 119751, 54629, 34294, 6985, 60863, 41477, 39443, 38847, 136259, 13941, 43059, 69985, 57623, 37108, 42692, 27908, 55223, 94823]
[2024-12-02 20:21:26.064709] user = 102699 Cloud 288/567
[2024-12-02 20:21:26.074228] user = 102699 Local 288/567
[2024-12-02 20:21:26.194289] user = 102699 Local+ 288/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:21:28.228523] user = 102699 MPDA- 288/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 1.0
Training on augumented user 96158 0/50 current_auc = 1.0
User 96158 AUC after training: 1.0
User 96158 does not improve AUC. Reverting changes.
Training on augumented user 46446 1/50 current_auc = 1.0
User 46446 AUC after training: 1.0
User 46446 does not improve AUC. Reverting changes.
Training on augumented user 96250 2/50 current_auc = 1.0
User 96250 AUC after training: 1.0
User 96250 does not improve AUC. Reverting changes.
Training on augumented user 119575 3/50 current_auc = 1.0
User 119575 AUC after training: 1.0
User 119575 does not improve AUC. Reverting changes.
Training on augumented user 111071 4/50 current_auc = 1.0
User 111071 AUC after training: 1.0
User 111071 does not improve AUC. Reverting changes.
Training on augumented user 45767 5/50 current_auc = 1.0
User 45767 AUC after training: 1.0
User 45767 does not improve AUC. Reverting changes.
Training on augumented user 55133 6/50 current_auc = 1.0
User 55133 AUC after training: 1.0
User 55133 does not improve AUC. Reverting changes.
Training on augumented user 52458 7/50 current_auc = 1.0
User 52458 AUC after training: 1.0
User 52458 does not improve AUC. Reverting changes.
Training on augumented user 80991 8/50 current_auc = 1.0
User 80991 AUC after training: 1.0
User 80991 does not improve AUC. Reverting changes.
Training on augumented user 133623 9/50 current_auc = 1.0
User 133623 AUC after training: 1.0
User 133623 does not improve AUC. Reverting changes.
Training on augumented user 112111 10/50 current_auc = 1.0
User 112111 AUC after training: 1.0
User 112111 does not improve AUC. Reverting changes.
Training on augumented user 130482 11/50 current_auc = 1.0
User 130482 AUC after training: 1.0
User 130482 does not improve AUC. Reverting changes.
Training on augumented user 103305 12/50 current_auc = 1.0
User 103305 AUC after training: 1.0
User 103305 does not improve AUC. Reverting changes.
Training on augumented user 16132 13/50 current_auc = 1.0
User 16132 AUC after training: 1.0
User 16132 does not improve AUC. Reverting changes.
Training on augumented user 99228 14/50 current_auc = 1.0
User 99228 AUC after training: 1.0
User 99228 does not improve AUC. Reverting changes.
Training on augumented user 72558 15/50 current_auc = 1.0
User 72558 AUC after training: 1.0
User 72558 does not improve AUC. Reverting changes.
Training on augumented user 91018 16/50 current_auc = 1.0
User 91018 AUC after training: 1.0
User 91018 does not improve AUC. Reverting changes.
Training on augumented user 125944 17/50 current_auc = 1.0
User 125944 AUC after training: 1.0
User 125944 does not improve AUC. Reverting changes.
Training on augumented user 57066 18/50 current_auc = 1.0
User 57066 AUC after training: 1.0
User 57066 does not improve AUC. Reverting changes.
Training on augumented user 127450 19/50 current_auc = 1.0
User 127450 AUC after training: 1.0
User 127450 does not improve AUC. Reverting changes.
Training on augumented user 31197 20/50 current_auc = 1.0
User 31197 AUC after training: 1.0
User 31197 does not improve AUC. Reverting changes.
Training on augumented user 102914 21/50 current_auc = 1.0
User 102914 AUC after training: 1.0
User 102914 does not improve AUC. Reverting changes.
Training on augumented user 8742 22/50 current_auc = 1.0
User 8742 AUC after training: 1.0
User 8742 does not improve AUC. Reverting changes.
Training on augumented user 86513 23/50 current_auc = 1.0
User 86513 AUC after training: 1.0
User 86513 does not improve AUC. Reverting changes.
Training on augumented user 110337 24/50 current_auc = 1.0
User 110337 AUC after training: 1.0
User 110337 does not improve AUC. Reverting changes.
Training on augumented user 97227 25/50 current_auc = 1.0
User 97227 AUC after training: 1.0
User 97227 does not improve AUC. Reverting changes.
Training on augumented user 83920 26/50 current_auc = 1.0
User 83920 AUC after training: 1.0
User 83920 does not improve AUC. Reverting changes.
Training on augumented user 46682 27/50 current_auc = 1.0
User 46682 AUC after training: 1.0
User 46682 does not improve AUC. Reverting changes.
Training on augumented user 67463 28/50 current_auc = 1.0
User 67463 AUC after training: 1.0
User 67463 does not improve AUC. Reverting changes.
Training on augumented user 93184 29/50 current_auc = 1.0
User 93184 AUC after training: 1.0
User 93184 does not improve AUC. Reverting changes.
Training on augumented user 119369 30/50 current_auc = 1.0
User 119369 AUC after training: 1.0
User 119369 does not improve AUC. Reverting changes.
Training on augumented user 61278 31/50 current_auc = 1.0
User 61278 AUC after training: 1.0
User 61278 does not improve AUC. Reverting changes.
Training on augumented user 119751 32/50 current_auc = 1.0
User 119751 AUC after training: 1.0
User 119751 does not improve AUC. Reverting changes.
Training on augumented user 54629 33/50 current_auc = 1.0
User 54629 AUC after training: 1.0
User 54629 does not improve AUC. Reverting changes.
Training on augumented user 34294 34/50 current_auc = 1.0
User 34294 AUC after training: 1.0
User 34294 does not improve AUC. Reverting changes.
Training on augumented user 6985 35/50 current_auc = 1.0
User 6985 AUC after training: 1.0
User 6985 does not improve AUC. Reverting changes.
Training on augumented user 60863 36/50 current_auc = 1.0
User 60863 AUC after training: 1.0
User 60863 does not improve AUC. Reverting changes.
Training on augumented user 41477 37/50 current_auc = 1.0
User 41477 AUC after training: 1.0
User 41477 does not improve AUC. Reverting changes.
Training on augumented user 39443 38/50 current_auc = 1.0
User 39443 AUC after training: 1.0
User 39443 does not improve AUC. Reverting changes.
Training on augumented user 38847 39/50 current_auc = 1.0
User 38847 AUC after training: 1.0
User 38847 does not improve AUC. Reverting changes.
Training on augumented user 136259 40/50 current_auc = 1.0
User 136259 AUC after training: 1.0
User 136259 does not improve AUC. Reverting changes.
Training on augumented user 13941 41/50 current_auc = 1.0
User 13941 AUC after training: 1.0
User 13941 does not improve AUC. Reverting changes.
Training on augumented user 43059 42/50 current_auc = 1.0
User 43059 AUC after training: 1.0
User 43059 does not improve AUC. Reverting changes.
Training on augumented user 69985 43/50 current_auc = 1.0
User 69985 AUC after training: 1.0
User 69985 does not improve AUC. Reverting changes.
Training on augumented user 57623 44/50 current_auc = 1.0
User 57623 AUC after training: 1.0
User 57623 does not improve AUC. Reverting changes.
Training on augumented user 37108 45/50 current_auc = 1.0
User 37108 AUC after training: 1.0
User 37108 does not improve AUC. Reverting changes.
Training on augumented user 42692 46/50 current_auc = 1.0
User 42692 AUC after training: 1.0
User 42692 does not improve AUC. Reverting changes.
Training on augumented user 27908 47/50 current_auc = 1.0
User 27908 AUC after training: 1.0
User 27908 does not improve AUC. Reverting changes.
Training on augumented user 55223 48/50 current_auc = 1.0
User 55223 AUC after training: 1.0
User 55223 does not improve AUC. Reverting changes.
Training on augumented user 94823 49/50 current_auc = 1.0
User 94823 AUC after training: 1.0
User 94823 does not improve AUC. Reverting changes.
[2024-12-02 20:21:55.751374] start test user 102705 289/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:21:56.386349] start test user 102705 289/567 recall augumented users by random, augumented_users = [98382, 94094, 59235, 109413, 21830, 97945, 74855, 61352, 131003, 123594, 99144, 82381, 108892, 68524, 133667, 49167, 134110, 64683, 85354, 39501, 67498, 133634, 47052, 65078, 53981, 18105, 45115, 68267, 83520, 22339, 64568, 78251, 48344, 109592, 59154, 22578, 119019, 91634, 58326, 134844, 103248, 111603, 27051, 44650, 131032, 137012, 63887, 124552, 10352, 105702]
[2024-12-02 20:21:56.403050] user = 102705 Cloud 289/567
[2024-12-02 20:21:56.415452] user = 102705 Local 289/567
[2024-12-02 20:21:56.667331] user = 102705 Local+ 289/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:21:59.449826] user = 102705 MPDA- 289/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.7382445141065831
Training on augumented user 98382 0/50 current_auc = 0.7382445141065831
User 98382 AUC after training: 0.7351097178683387
User 98382 does not improve AUC. Reverting changes.
Training on augumented user 94094 1/50 current_auc = 0.7382445141065831
User 94094 AUC after training: 0.7366771159874609
User 94094 does not improve AUC. Reverting changes.
Training on augumented user 59235 2/50 current_auc = 0.7382445141065831
User 59235 AUC after training: 0.7366771159874609
User 59235 does not improve AUC. Reverting changes.
Training on augumented user 109413 3/50 current_auc = 0.7382445141065831
User 109413 AUC after training: 0.7351097178683387
User 109413 does not improve AUC. Reverting changes.
Training on augumented user 21830 4/50 current_auc = 0.7382445141065831
User 21830 AUC after training: 0.7366771159874609
User 21830 does not improve AUC. Reverting changes.
Training on augumented user 97945 5/50 current_auc = 0.7382445141065831
User 97945 AUC after training: 0.7366771159874609
User 97945 does not improve AUC. Reverting changes.
Training on augumented user 74855 6/50 current_auc = 0.7382445141065831
User 74855 AUC after training: 0.7335423197492162
User 74855 does not improve AUC. Reverting changes.
Training on augumented user 61352 7/50 current_auc = 0.7382445141065831
User 61352 AUC after training: 0.7351097178683387
User 61352 does not improve AUC. Reverting changes.
Training on augumented user 131003 8/50 current_auc = 0.7382445141065831
User 131003 AUC after training: 0.7413793103448275
User 131003 improves AUC. Keeping the model.
Training on augumented user 123594 9/50 current_auc = 0.7413793103448275
User 123594 AUC after training: 0.7366771159874609
User 123594 does not improve AUC. Reverting changes.
Training on augumented user 99144 10/50 current_auc = 0.7413793103448275
User 99144 AUC after training: 0.7413793103448275
User 99144 does not improve AUC. Reverting changes.
Training on augumented user 82381 11/50 current_auc = 0.7413793103448275
User 82381 AUC after training: 0.7413793103448275
User 82381 does not improve AUC. Reverting changes.
Training on augumented user 108892 12/50 current_auc = 0.7413793103448275
User 108892 AUC after training: 0.7413793103448276
User 108892 improves AUC. Keeping the model.
Training on augumented user 68524 13/50 current_auc = 0.7413793103448276
User 68524 AUC after training: 0.7460815047021944
User 68524 improves AUC. Keeping the model.
Training on augumented user 133667 14/50 current_auc = 0.7460815047021944
User 133667 AUC after training: 0.7351097178683385
User 133667 does not improve AUC. Reverting changes.
Training on augumented user 49167 15/50 current_auc = 0.7460815047021944
User 49167 AUC after training: 0.7351097178683386
User 49167 does not improve AUC. Reverting changes.
Training on augumented user 134110 16/50 current_auc = 0.7460815047021944
User 134110 AUC after training: 0.7460815047021944
User 134110 does not improve AUC. Reverting changes.
Training on augumented user 64683 17/50 current_auc = 0.7460815047021944
User 64683 AUC after training: 0.7460815047021944
User 64683 does not improve AUC. Reverting changes.
Training on augumented user 85354 18/50 current_auc = 0.7460815047021944
User 85354 AUC after training: 0.7413793103448276
User 85354 does not improve AUC. Reverting changes.
Training on augumented user 39501 19/50 current_auc = 0.7460815047021944
User 39501 AUC after training: 0.7398119122257053
User 39501 does not improve AUC. Reverting changes.
Training on augumented user 67498 20/50 current_auc = 0.7460815047021944
User 67498 AUC after training: 0.7413793103448276
User 67498 does not improve AUC. Reverting changes.
Training on augumented user 133634 21/50 current_auc = 0.7460815047021944
User 133634 AUC after training: 0.7460815047021944
User 133634 does not improve AUC. Reverting changes.
Training on augumented user 47052 22/50 current_auc = 0.7460815047021944
User 47052 AUC after training: 0.7460815047021944
User 47052 does not improve AUC. Reverting changes.
Training on augumented user 65078 23/50 current_auc = 0.7460815047021944
User 65078 AUC after training: 0.7445141065830722
User 65078 does not improve AUC. Reverting changes.
Training on augumented user 53981 24/50 current_auc = 0.7460815047021944
User 53981 AUC after training: 0.7460815047021944
User 53981 does not improve AUC. Reverting changes.
Training on augumented user 18105 25/50 current_auc = 0.7460815047021944
User 18105 AUC after training: 0.7492163009404389
User 18105 improves AUC. Keeping the model.
Training on augumented user 45115 26/50 current_auc = 0.7492163009404389
User 45115 AUC after training: 0.7476489028213166
User 45115 does not improve AUC. Reverting changes.
Training on augumented user 68267 27/50 current_auc = 0.7492163009404389
User 68267 AUC after training: 0.7476489028213167
User 68267 does not improve AUC. Reverting changes.
Training on augumented user 83520 28/50 current_auc = 0.7492163009404389
User 83520 AUC after training: 0.7460815047021944
User 83520 does not improve AUC. Reverting changes.
Training on augumented user 22339 29/50 current_auc = 0.7492163009404389
User 22339 AUC after training: 0.7429467084639498
User 22339 does not improve AUC. Reverting changes.
Training on augumented user 64568 30/50 current_auc = 0.7492163009404389
User 64568 AUC after training: 0.7476489028213166
User 64568 does not improve AUC. Reverting changes.
Training on augumented user 78251 31/50 current_auc = 0.7492163009404389
User 78251 AUC after training: 0.7492163009404389
User 78251 does not improve AUC. Reverting changes.
Training on augumented user 48344 32/50 current_auc = 0.7492163009404389
User 48344 AUC after training: 0.74294670846395
User 48344 does not improve AUC. Reverting changes.
Training on augumented user 109592 33/50 current_auc = 0.7492163009404389
User 109592 AUC after training: 0.7492163009404389
User 109592 does not improve AUC. Reverting changes.
Training on augumented user 59154 34/50 current_auc = 0.7492163009404389
User 59154 AUC after training: 0.7492163009404389
User 59154 does not improve AUC. Reverting changes.
Training on augumented user 22578 35/50 current_auc = 0.7492163009404389
User 22578 AUC after training: 0.7460815047021944
User 22578 does not improve AUC. Reverting changes.
Training on augumented user 119019 36/50 current_auc = 0.7492163009404389
User 119019 AUC after training: 0.7492163009404389
User 119019 does not improve AUC. Reverting changes.
Training on augumented user 91634 37/50 current_auc = 0.7492163009404389
User 91634 AUC after training: 0.7507836990595611
User 91634 improves AUC. Keeping the model.
Training on augumented user 58326 38/50 current_auc = 0.7507836990595611
User 58326 AUC after training: 0.7476489028213166
User 58326 does not improve AUC. Reverting changes.
Training on augumented user 134844 39/50 current_auc = 0.7507836990595611
User 134844 AUC after training: 0.7351097178683385
User 134844 does not improve AUC. Reverting changes.
Training on augumented user 103248 40/50 current_auc = 0.7507836990595611
User 103248 AUC after training: 0.7460815047021944
User 103248 does not improve AUC. Reverting changes.
Training on augumented user 111603 41/50 current_auc = 0.7507836990595611
User 111603 AUC after training: 0.7492163009404389
User 111603 does not improve AUC. Reverting changes.
Training on augumented user 27051 42/50 current_auc = 0.7507836990595611
User 27051 AUC after training: 0.7476489028213166
User 27051 does not improve AUC. Reverting changes.
Training on augumented user 44650 43/50 current_auc = 0.7507836990595611
User 44650 AUC after training: 0.7492163009404388
User 44650 does not improve AUC. Reverting changes.
Training on augumented user 131032 44/50 current_auc = 0.7507836990595611
User 131032 AUC after training: 0.7413793103448275
User 131032 does not improve AUC. Reverting changes.
Training on augumented user 137012 45/50 current_auc = 0.7507836990595611
User 137012 AUC after training: 0.7492163009404389
User 137012 does not improve AUC. Reverting changes.
Training on augumented user 63887 46/50 current_auc = 0.7507836990595611
User 63887 AUC after training: 0.7460815047021944
User 63887 does not improve AUC. Reverting changes.
Training on augumented user 124552 47/50 current_auc = 0.7507836990595611
User 124552 AUC after training: 0.7492163009404389
User 124552 does not improve AUC. Reverting changes.
Training on augumented user 10352 48/50 current_auc = 0.7507836990595611
User 10352 AUC after training: 0.7460815047021944
User 10352 does not improve AUC. Reverting changes.
Training on augumented user 105702 49/50 current_auc = 0.7507836990595611
User 105702 AUC after training: 0.7476489028213166
User 105702 does not improve AUC. Reverting changes.
[2024-12-02 20:22:28.145625] start test user 102720 290/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:22:28.862823] start test user 102720 290/567 recall augumented users by random, augumented_users = [134279, 112794, 10635, 62903, 123073, 12309, 83649, 86584, 44317, 29799, 42865, 52549, 80348, 57071, 31370, 10535, 71272, 103448, 64633, 72903, 82859, 135471, 116264, 30408, 73226, 47568, 42480, 98647, 125946, 110835, 32219, 11602, 117345, 40041, 137712, 81921, 98219, 100054, 54797, 59063, 129343, 107750, 113115, 22211, 56539, 84677, 32546, 62413, 15150, 132085]
[2024-12-02 20:22:28.897930] user = 102720 Cloud 290/567
[2024-12-02 20:22:28.907692] user = 102720 Local 290/567
[2024-12-02 20:22:28.937788] user = 102720 Local+ 290/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:22:31.342687] user = 102720 MPDA- 290/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.41964285714285715
Training on augumented user 134279 0/50 current_auc = 0.41964285714285715
User 134279 AUC after training: 0.41964285714285715
User 134279 does not improve AUC. Reverting changes.
Training on augumented user 112794 1/50 current_auc = 0.41964285714285715
User 112794 AUC after training: 0.41964285714285715
User 112794 does not improve AUC. Reverting changes.
Training on augumented user 10635 2/50 current_auc = 0.41964285714285715
User 10635 AUC after training: 0.41964285714285715
User 10635 does not improve AUC. Reverting changes.
Training on augumented user 62903 3/50 current_auc = 0.41964285714285715
User 62903 AUC after training: 0.4107142857142857
User 62903 does not improve AUC. Reverting changes.
Training on augumented user 123073 4/50 current_auc = 0.41964285714285715
User 123073 AUC after training: 0.41964285714285715
User 123073 does not improve AUC. Reverting changes.
Training on augumented user 12309 5/50 current_auc = 0.41964285714285715
User 12309 AUC after training: 0.41964285714285715
User 12309 does not improve AUC. Reverting changes.
Training on augumented user 83649 6/50 current_auc = 0.41964285714285715
User 83649 AUC after training: 0.41964285714285715
User 83649 does not improve AUC. Reverting changes.
Training on augumented user 86584 7/50 current_auc = 0.41964285714285715
User 86584 AUC after training: 0.41964285714285715
User 86584 does not improve AUC. Reverting changes.
Training on augumented user 44317 8/50 current_auc = 0.41964285714285715
User 44317 AUC after training: 0.41964285714285715
User 44317 does not improve AUC. Reverting changes.
Training on augumented user 29799 9/50 current_auc = 0.41964285714285715
User 29799 AUC after training: 0.41964285714285715
User 29799 does not improve AUC. Reverting changes.
Training on augumented user 42865 10/50 current_auc = 0.41964285714285715
User 42865 AUC after training: 0.4107142857142857
User 42865 does not improve AUC. Reverting changes.
Training on augumented user 52549 11/50 current_auc = 0.41964285714285715
User 52549 AUC after training: 0.41964285714285715
User 52549 does not improve AUC. Reverting changes.
Training on augumented user 80348 12/50 current_auc = 0.41964285714285715
User 80348 AUC after training: 0.41964285714285715
User 80348 does not improve AUC. Reverting changes.
Training on augumented user 57071 13/50 current_auc = 0.41964285714285715
User 57071 AUC after training: 0.41964285714285715
User 57071 does not improve AUC. Reverting changes.
Training on augumented user 31370 14/50 current_auc = 0.41964285714285715
User 31370 AUC after training: 0.41964285714285715
User 31370 does not improve AUC. Reverting changes.
Training on augumented user 10535 15/50 current_auc = 0.41964285714285715
User 10535 AUC after training: 0.41964285714285715
User 10535 does not improve AUC. Reverting changes.
Training on augumented user 71272 16/50 current_auc = 0.41964285714285715
User 71272 AUC after training: 0.4017857142857143
User 71272 does not improve AUC. Reverting changes.
Training on augumented user 103448 17/50 current_auc = 0.41964285714285715
User 103448 AUC after training: 0.41964285714285715
User 103448 does not improve AUC. Reverting changes.
Training on augumented user 64633 18/50 current_auc = 0.41964285714285715
User 64633 AUC after training: 0.41964285714285715
User 64633 does not improve AUC. Reverting changes.
Training on augumented user 72903 19/50 current_auc = 0.41964285714285715
User 72903 AUC after training: 0.41964285714285715
User 72903 does not improve AUC. Reverting changes.
Training on augumented user 82859 20/50 current_auc = 0.41964285714285715
User 82859 AUC after training: 0.41964285714285715
User 82859 does not improve AUC. Reverting changes.
Training on augumented user 135471 21/50 current_auc = 0.41964285714285715
User 135471 AUC after training: 0.41964285714285715
User 135471 does not improve AUC. Reverting changes.
Training on augumented user 116264 22/50 current_auc = 0.41964285714285715
User 116264 AUC after training: 0.41964285714285715
User 116264 does not improve AUC. Reverting changes.
Training on augumented user 30408 23/50 current_auc = 0.41964285714285715
User 30408 AUC after training: 0.42857142857142855
User 30408 improves AUC. Keeping the model.
Training on augumented user 73226 24/50 current_auc = 0.42857142857142855
User 73226 AUC after training: 0.41964285714285715
User 73226 does not improve AUC. Reverting changes.
Training on augumented user 47568 25/50 current_auc = 0.42857142857142855
User 47568 AUC after training: 0.42857142857142855
User 47568 does not improve AUC. Reverting changes.
Training on augumented user 42480 26/50 current_auc = 0.42857142857142855
User 42480 AUC after training: 0.41964285714285715
User 42480 does not improve AUC. Reverting changes.
Training on augumented user 98647 27/50 current_auc = 0.42857142857142855
User 98647 AUC after training: 0.42857142857142855
User 98647 does not improve AUC. Reverting changes.
Training on augumented user 125946 28/50 current_auc = 0.42857142857142855
User 125946 AUC after training: 0.42857142857142855
User 125946 does not improve AUC. Reverting changes.
Training on augumented user 110835 29/50 current_auc = 0.42857142857142855
User 110835 AUC after training: 0.42857142857142855
User 110835 does not improve AUC. Reverting changes.
Training on augumented user 32219 30/50 current_auc = 0.42857142857142855
User 32219 AUC after training: 0.42857142857142855
User 32219 does not improve AUC. Reverting changes.
Training on augumented user 11602 31/50 current_auc = 0.42857142857142855
User 11602 AUC after training: 0.42857142857142855
User 11602 does not improve AUC. Reverting changes.
Training on augumented user 117345 32/50 current_auc = 0.42857142857142855
User 117345 AUC after training: 0.42857142857142855
User 117345 does not improve AUC. Reverting changes.
Training on augumented user 40041 33/50 current_auc = 0.42857142857142855
User 40041 AUC after training: 0.41964285714285715
User 40041 does not improve AUC. Reverting changes.
Training on augumented user 137712 34/50 current_auc = 0.42857142857142855
User 137712 AUC after training: 0.42857142857142855
User 137712 does not improve AUC. Reverting changes.
Training on augumented user 81921 35/50 current_auc = 0.42857142857142855
User 81921 AUC after training: 0.4375
User 81921 improves AUC. Keeping the model.
Training on augumented user 98219 36/50 current_auc = 0.4375
User 98219 AUC after training: 0.42857142857142855
User 98219 does not improve AUC. Reverting changes.
Training on augumented user 100054 37/50 current_auc = 0.4375
User 100054 AUC after training: 0.42857142857142855
User 100054 does not improve AUC. Reverting changes.
Training on augumented user 54797 38/50 current_auc = 0.4375
User 54797 AUC after training: 0.44642857142857145
User 54797 improves AUC. Keeping the model.
Training on augumented user 59063 39/50 current_auc = 0.44642857142857145
User 59063 AUC after training: 0.42857142857142855
User 59063 does not improve AUC. Reverting changes.
Training on augumented user 129343 40/50 current_auc = 0.44642857142857145
User 129343 AUC after training: 0.44642857142857145
User 129343 does not improve AUC. Reverting changes.
Training on augumented user 107750 41/50 current_auc = 0.44642857142857145
User 107750 AUC after training: 0.4375
User 107750 does not improve AUC. Reverting changes.
Training on augumented user 113115 42/50 current_auc = 0.44642857142857145
User 113115 AUC after training: 0.43749999999999994
User 113115 does not improve AUC. Reverting changes.
Training on augumented user 22211 43/50 current_auc = 0.44642857142857145
User 22211 AUC after training: 0.4375
User 22211 does not improve AUC. Reverting changes.
Training on augumented user 56539 44/50 current_auc = 0.44642857142857145
User 56539 AUC after training: 0.42857142857142855
User 56539 does not improve AUC. Reverting changes.
Training on augumented user 84677 45/50 current_auc = 0.44642857142857145
User 84677 AUC after training: 0.42857142857142855
User 84677 does not improve AUC. Reverting changes.
Training on augumented user 32546 46/50 current_auc = 0.44642857142857145
User 32546 AUC after training: 0.44642857142857145
User 32546 does not improve AUC. Reverting changes.
Training on augumented user 62413 47/50 current_auc = 0.44642857142857145
User 62413 AUC after training: 0.43749999999999994
User 62413 does not improve AUC. Reverting changes.
Training on augumented user 15150 48/50 current_auc = 0.44642857142857145
User 15150 AUC after training: 0.4375
User 15150 does not improve AUC. Reverting changes.
Training on augumented user 132085 49/50 current_auc = 0.44642857142857145
User 132085 AUC after training: 0.4375
User 132085 does not improve AUC. Reverting changes.
[2024-12-02 20:23:02.511043] start test user 102726 291/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:23:03.243964] start test user 102726 291/567 recall augumented users by random, augumented_users = [120100, 83820, 39280, 114211, 130374, 78810, 127722, 29893, 66219, 41602, 99337, 17599, 45071, 89862, 39021, 95820, 88480, 99508, 34692, 100206, 3343, 81937, 28694, 110313, 29539, 58349, 85328, 8917, 35540, 131949, 75027, 11379, 32801, 5999, 87565, 107381, 10477, 71996, 59108, 105216, 82638, 118722, 27028, 48500, 17730, 17958, 69302, 109019, 102770, 17541]
[2024-12-02 20:23:03.258860] user = 102726 Cloud 291/567
[2024-12-02 20:23:03.269249] user = 102726 Local 291/567
[2024-12-02 20:23:03.336173] user = 102726 Local+ 291/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:23:05.704857] user = 102726 MPDA- 291/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 1.0
Training on augumented user 120100 0/50 current_auc = 1.0
User 120100 AUC after training: 1.0
User 120100 does not improve AUC. Reverting changes.
Training on augumented user 83820 1/50 current_auc = 1.0
User 83820 AUC after training: 1.0
User 83820 does not improve AUC. Reverting changes.
Training on augumented user 39280 2/50 current_auc = 1.0
User 39280 AUC after training: 1.0
User 39280 does not improve AUC. Reverting changes.
Training on augumented user 114211 3/50 current_auc = 1.0
User 114211 AUC after training: 1.0
User 114211 does not improve AUC. Reverting changes.
Training on augumented user 130374 4/50 current_auc = 1.0
User 130374 AUC after training: 0.9166666666666667
User 130374 does not improve AUC. Reverting changes.
Training on augumented user 78810 5/50 current_auc = 1.0
User 78810 AUC after training: 1.0
User 78810 does not improve AUC. Reverting changes.
Training on augumented user 127722 6/50 current_auc = 1.0
User 127722 AUC after training: 0.9166666666666667
User 127722 does not improve AUC. Reverting changes.
Training on augumented user 29893 7/50 current_auc = 1.0
User 29893 AUC after training: 1.0
User 29893 does not improve AUC. Reverting changes.
Training on augumented user 66219 8/50 current_auc = 1.0
User 66219 AUC after training: 1.0
User 66219 does not improve AUC. Reverting changes.
Training on augumented user 41602 9/50 current_auc = 1.0
User 41602 AUC after training: 1.0
User 41602 does not improve AUC. Reverting changes.
Training on augumented user 99337 10/50 current_auc = 1.0
User 99337 AUC after training: 1.0
User 99337 does not improve AUC. Reverting changes.
Training on augumented user 17599 11/50 current_auc = 1.0
User 17599 AUC after training: 1.0
User 17599 does not improve AUC. Reverting changes.
Training on augumented user 45071 12/50 current_auc = 1.0
User 45071 AUC after training: 1.0
User 45071 does not improve AUC. Reverting changes.
Training on augumented user 89862 13/50 current_auc = 1.0
User 89862 AUC after training: 1.0
User 89862 does not improve AUC. Reverting changes.
Training on augumented user 39021 14/50 current_auc = 1.0
User 39021 AUC after training: 0.9166666666666667
User 39021 does not improve AUC. Reverting changes.
Training on augumented user 95820 15/50 current_auc = 1.0
User 95820 AUC after training: 1.0
User 95820 does not improve AUC. Reverting changes.
Training on augumented user 88480 16/50 current_auc = 1.0
User 88480 AUC after training: 1.0
User 88480 does not improve AUC. Reverting changes.
Training on augumented user 99508 17/50 current_auc = 1.0
User 99508 AUC after training: 1.0
User 99508 does not improve AUC. Reverting changes.
Training on augumented user 34692 18/50 current_auc = 1.0
User 34692 AUC after training: 1.0
User 34692 does not improve AUC. Reverting changes.
Training on augumented user 100206 19/50 current_auc = 1.0
User 100206 AUC after training: 1.0
User 100206 does not improve AUC. Reverting changes.
Training on augumented user 3343 20/50 current_auc = 1.0
User 3343 AUC after training: 1.0
User 3343 does not improve AUC. Reverting changes.
Training on augumented user 81937 21/50 current_auc = 1.0
User 81937 AUC after training: 1.0
User 81937 does not improve AUC. Reverting changes.
Training on augumented user 28694 22/50 current_auc = 1.0
User 28694 AUC after training: 1.0
User 28694 does not improve AUC. Reverting changes.
Training on augumented user 110313 23/50 current_auc = 1.0
User 110313 AUC after training: 1.0
User 110313 does not improve AUC. Reverting changes.
Training on augumented user 29539 24/50 current_auc = 1.0
User 29539 AUC after training: 1.0
User 29539 does not improve AUC. Reverting changes.
Training on augumented user 58349 25/50 current_auc = 1.0
User 58349 AUC after training: 1.0
User 58349 does not improve AUC. Reverting changes.
Training on augumented user 85328 26/50 current_auc = 1.0
User 85328 AUC after training: 1.0
User 85328 does not improve AUC. Reverting changes.
Training on augumented user 8917 27/50 current_auc = 1.0
User 8917 AUC after training: 1.0
User 8917 does not improve AUC. Reverting changes.
Training on augumented user 35540 28/50 current_auc = 1.0
User 35540 AUC after training: 1.0
User 35540 does not improve AUC. Reverting changes.
Training on augumented user 131949 29/50 current_auc = 1.0
User 131949 AUC after training: 1.0
User 131949 does not improve AUC. Reverting changes.
Training on augumented user 75027 30/50 current_auc = 1.0
User 75027 AUC after training: 1.0
User 75027 does not improve AUC. Reverting changes.
Training on augumented user 11379 31/50 current_auc = 1.0
User 11379 AUC after training: 1.0
User 11379 does not improve AUC. Reverting changes.
Training on augumented user 32801 32/50 current_auc = 1.0
User 32801 AUC after training: 1.0
User 32801 does not improve AUC. Reverting changes.
Training on augumented user 5999 33/50 current_auc = 1.0
User 5999 AUC after training: 1.0
User 5999 does not improve AUC. Reverting changes.
Training on augumented user 87565 34/50 current_auc = 1.0
User 87565 AUC after training: 1.0
User 87565 does not improve AUC. Reverting changes.
Training on augumented user 107381 35/50 current_auc = 1.0
User 107381 AUC after training: 1.0
User 107381 does not improve AUC. Reverting changes.
Training on augumented user 10477 36/50 current_auc = 1.0
User 10477 AUC after training: 1.0
User 10477 does not improve AUC. Reverting changes.
Training on augumented user 71996 37/50 current_auc = 1.0
User 71996 AUC after training: 1.0
User 71996 does not improve AUC. Reverting changes.
Training on augumented user 59108 38/50 current_auc = 1.0
User 59108 AUC after training: 1.0
User 59108 does not improve AUC. Reverting changes.
Training on augumented user 105216 39/50 current_auc = 1.0
User 105216 AUC after training: 1.0
User 105216 does not improve AUC. Reverting changes.
Training on augumented user 82638 40/50 current_auc = 1.0
User 82638 AUC after training: 1.0
User 82638 does not improve AUC. Reverting changes.
Training on augumented user 118722 41/50 current_auc = 1.0
User 118722 AUC after training: 0.9166666666666667
User 118722 does not improve AUC. Reverting changes.
Training on augumented user 27028 42/50 current_auc = 1.0
User 27028 AUC after training: 1.0
User 27028 does not improve AUC. Reverting changes.
Training on augumented user 48500 43/50 current_auc = 1.0
User 48500 AUC after training: 1.0
User 48500 does not improve AUC. Reverting changes.
Training on augumented user 17730 44/50 current_auc = 1.0
User 17730 AUC after training: 1.0
User 17730 does not improve AUC. Reverting changes.
Training on augumented user 17958 45/50 current_auc = 1.0
User 17958 AUC after training: 1.0
User 17958 does not improve AUC. Reverting changes.
Training on augumented user 69302 46/50 current_auc = 1.0
User 69302 AUC after training: 1.0
User 69302 does not improve AUC. Reverting changes.
Training on augumented user 109019 47/50 current_auc = 1.0
User 109019 AUC after training: 1.0
User 109019 does not improve AUC. Reverting changes.
Training on augumented user 102770 48/50 current_auc = 1.0
User 102770 AUC after training: 1.0
User 102770 does not improve AUC. Reverting changes.
Training on augumented user 17541 49/50 current_auc = 1.0
User 17541 AUC after training: 1.0
User 17541 does not improve AUC. Reverting changes.
[2024-12-02 20:23:35.873250] start test user 102732 292/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:92: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:23:36.561155] start test user 102732 292/567 recall augumented users by random, augumented_users = [68630, 48643, 110172, 4556, 27557, 82731, 9051, 7609, 68988, 103784, 135138, 10797, 53163, 58340, 50512, 99554, 80816, 17246, 35956, 42159, 128518, 6416, 77732, 114463, 105379, 69719, 119015, 24893, 25443, 77755, 29468, 32553, 22953, 82886, 60999, 61495, 28902, 124434, 89303, 37340, 56087, 96705, 55671, 137502, 54288, 41224, 99870, 29190, 77902, 15392]
[2024-12-02 20:23:36.575945] user = 102732 Cloud 292/567
[2024-12-02 20:23:36.614344] user = 102732 Local 292/567
[2024-12-02 20:23:36.660109] user = 102732 Local+ 292/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:125: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
[2024-12-02 20:23:39.418019] user = 102732 MPDA- 292/567
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:136: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  init_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
/home/chao/workspace/MPDA-implementation/model/NCF/transfer.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  current_model.load_state_dict(torch.load(utils.get_init_model_path('NCF')))
Initial AUC: 0.625
Training on augumented user 68630 0/50 current_auc = 0.625
User 68630 AUC after training: 0.6247387669801463
User 68630 does not improve AUC. Reverting changes.
Training on augumented user 48643 1/50 current_auc = 0.625
User 48643 AUC after training: 0.6247387669801463
User 48643 does not improve AUC. Reverting changes.
Training on augumented user 110172 2/50 current_auc = 0.625
User 110172 AUC after training: 0.6243469174503657
User 110172 does not improve AUC. Reverting changes.
Training on augumented user 4556 3/50 current_auc = 0.625
User 4556 AUC after training: 0.6248693834900731
User 4556 does not improve AUC. Reverting changes.
Training on augumented user 27557 4/50 current_auc = 0.625
User 27557 AUC after training: 0.6247387669801463
User 27557 does not improve AUC. Reverting changes.
Training on augumented user 82731 5/50 current_auc = 0.625
User 82731 AUC after training: 0.6253918495297806
User 82731 improves AUC. Keeping the model.
Training on augumented user 9051 6/50 current_auc = 0.6253918495297806
User 9051 AUC after training: 0.6255224660397074
User 9051 improves AUC. Keeping the model.
Training on augumented user 7609 7/50 current_auc = 0.6255224660397074
User 7609 AUC after training: 0.6251306165099269
User 7609 does not improve AUC. Reverting changes.
Training on augumented user 68988 8/50 current_auc = 0.6255224660397074
User 68988 AUC after training: 0.6253918495297806
User 68988 does not improve AUC. Reverting changes.
Training on augumented user 103784 9/50 current_auc = 0.6255224660397074
User 103784 AUC after training: 0.624542842215256
User 103784 does not improve AUC. Reverting changes.
Training on augumented user 135138 10/50 current_auc = 0.6255224660397074
User 135138 AUC after training: 0.625
User 135138 does not improve AUC. Reverting changes.
Training on augumented user 10797 11/50 current_auc = 0.6255224660397074
User 10797 AUC after training: 0.6248693834900731
User 10797 does not improve AUC. Reverting changes.
Training on augumented user 53163 12/50 current_auc = 0.6255224660397074
User 53163 AUC after training: 0.6256530825496343
User 53163 improves AUC. Keeping the model.
Training on augumented user 58340 13/50 current_auc = 0.6256530825496343
User 58340 AUC after training: 0.6257836990595611
User 58340 improves AUC. Keeping the model.
Training on augumented user 50512 14/50 current_auc = 0.6257836990595611
User 50512 AUC after training: 0.6256530825496343
User 50512 does not improve AUC. Reverting changes.
Training on augumented user 99554 15/50 current_auc = 0.6257836990595611
User 99554 AUC after training: 0.6248693834900731
User 99554 does not improve AUC. Reverting changes.
Training on augumented user 80816 16/50 current_auc = 0.6257836990595611
User 80816 AUC after training: 0.6251306165099269
User 80816 does not improve AUC. Reverting changes.
Training on augumented user 17246 17/50 current_auc = 0.6257836990595611
User 17246 AUC after training: 0.625
User 17246 does not improve AUC. Reverting changes.
Training on augumented user 35956 18/50 current_auc = 0.6257836990595611
User 35956 AUC after training: 0.6236938349007315
User 35956 does not improve AUC. Reverting changes.
Training on augumented user 42159 19/50 current_auc = 0.6257836990595611
User 42159 AUC after training: 0.6248693834900733
User 42159 does not improve AUC. Reverting changes.
Training on augumented user 128518 20/50 current_auc = 0.6257836990595611
User 128518 AUC after training: 0.6252612330198537
User 128518 does not improve AUC. Reverting changes.
Training on augumented user 6416 21/50 current_auc = 0.6257836990595611
User 6416 AUC after training: 0.6255224660397074
User 6416 does not improve AUC. Reverting changes.
Training on augumented user 77732 22/50 current_auc = 0.6257836990595611
User 77732 AUC after training: 0.6253918495297806
User 77732 does not improve AUC. Reverting changes.
Training on augumented user 114463 23/50 current_auc = 0.6257836990595611
User 114463 AUC after training: 0.625
User 114463 does not improve AUC. Reverting changes.
Training on augumented user 105379 24/50 current_auc = 0.6257836990595611
User 105379 AUC after training: 0.6256530825496343
User 105379 does not improve AUC. Reverting changes.
Training on augumented user 69719 25/50 current_auc = 0.6257836990595611
User 69719 AUC after training: 0.6251306165099269
User 69719 does not improve AUC. Reverting changes.
Training on augumented user 119015 26/50 current_auc = 0.6257836990595611
User 119015 AUC after training: 0.6251306165099269
User 119015 does not improve AUC. Reverting changes.
Training on augumented user 24893 27/50 current_auc = 0.6257836990595611
User 24893 AUC after training: 0.6263061650992685
User 24893 improves AUC. Keeping the model.
Training on augumented user 25443 28/50 current_auc = 0.6263061650992685
User 25443 AUC after training: 0.6256530825496343
User 25443 does not improve AUC. Reverting changes.
Training on augumented user 77755 29/50 current_auc = 0.6263061650992685
User 77755 AUC after training: 0.6263061650992685
User 77755 does not improve AUC. Reverting changes.
Training on augumented user 29468 30/50 current_auc = 0.6263061650992685
User 29468 AUC after training: 0.625914315569488
User 29468 does not improve AUC. Reverting changes.
Training on augumented user 32553 31/50 current_auc = 0.6263061650992685
User 32553 AUC after training: 0.6247387669801463
User 32553 does not improve AUC. Reverting changes.
Training on augumented user 22953 32/50 current_auc = 0.6263061650992685
User 22953 AUC after training: 0.6263061650992685
User 22953 does not improve AUC. Reverting changes.
Training on augumented user 82886 33/50 current_auc = 0.6263061650992685
User 82886 AUC after training: 0.6257836990595612
User 82886 does not improve AUC. Reverting changes.
Training on augumented user 60999 34/50 current_auc = 0.6263061650992685
User 60999 AUC after training: 0.6261755485893417
User 60999 does not improve AUC. Reverting changes.
Training on augumented user 61495 35/50 current_auc = 0.6263061650992685
User 61495 AUC after training: 0.6265673981191223
User 61495 improves AUC. Keeping the model.
Training on augumented user 28902 36/50 current_auc = 0.6265673981191223
User 28902 AUC after training: 0.6272204806687566
User 28902 improves AUC. Keeping the model.
Training on augumented user 124434 37/50 current_auc = 0.6272204806687566
User 124434 AUC after training: 0.6263061650992685
User 124434 does not improve AUC. Reverting changes.
Training on augumented user 89303 38/50 current_auc = 0.6272204806687566
User 89303 AUC after training: 0.6263061650992685
User 89303 does not improve AUC. Reverting changes.
Training on augumented user 37340 39/50 current_auc = 0.6272204806687566
User 37340 AUC after training: 0.6269592476489029
User 37340 does not improve AUC. Reverting changes.
Training on augumented user 56087 40/50 current_auc = 0.6272204806687566
